ca65 V2.9.2 - (C) Copyright 1998-2000 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ; BBC Micro version by Kieran Connell 2018
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $1100	; assembly address _BEEB
000000r 1               	.DEFINE header   0		; Header Wouter Ras emulator
000000r 1               	.DEFINE filenaam "AGD"
000000r 1               
000000r 1               .org asm_code-22*header
001100  1               
001100  1               .IF header
001100  1               ;********************************************************************
001100  1               ; ATM Header for Atom emulator Wouter Ras
001100  1               
001100  1               name_start:
001100  1               	.byte filenaam			; Filename
001100  1               name_end:
001100  1               	.repeat 16-name_end+name_start	; Fill with 0 till 16 chars
001100  1               	  .byte $0
001100  1               	.endrep
001100  1               
001100  1               	.word asm_code			; 2 bytes startaddress
001100  1               	.word exec			; 2 bytes linkaddress
001100  1               	.word eind_asm-start_asm	; 2 bytes filelength
001100  1               
001100  1               ;********************************************************************
001100  1               .ENDIF
001100  1               
001100  1               exec:
001100  1               start_asm:
001100  1               	.include "z80-zp.inc"
001100  1               	.include "game.inc"
001100  2               .segment "ZEROPAGE"
001100  2               
001100  2               ws	 = $60
001100  2               
001100  2               z80_f	 = ws+$00
001100  2               z80_a	 = ws+$01
001100  2               z80_af	 = z80_f
001100  2               
001100  2               z80_c	 = ws+$02
001100  2               z80_b	 = ws+$03
001100  2               z80_bc	 = z80_c
001100  2               
001100  2               z80_e	 = ws+$04
001100  2               z80_d	 = ws+$05
001100  2               z80_de	 = z80_e
001100  2               
001100  2               z80_l	 = ws+$06
001100  2               z80_h	 = ws+$07
001100  2               z80_hl	 = z80_l
001100  2               
001100  2               z80_x    = ws+$08
001100  2               z80_i    = ws+$09
001100  2               z80_ix	 = z80_x
001100  2               
001100  2               z80_iy	 = ws+$0a
001100  2               
001100  2               z80_fp	 = ws+$0c
001100  2               z80_ap	 = ws+$0d
001100  2               
001100  2               z80_cp	 = ws+$0e
001100  2               z80_bp	 = ws+$0f
001100  2               z80_bcp	 = z80_cp
001100  2               
001100  2               z80_ep	 = ws+$10
001100  2               z80_dp	 = ws+$11
001100  2               z80_dep	 = z80_ep
001100  2               
001100  2               z80_lp	 = ws+$12
001100  2               z80_hp	 = ws+$13
001100  2               z80_hlp	 = z80_lp
001100  2               
001100  2               z80_sp   = ws+$14
001100  2               
001100  2               z80_reg0 = ws+$16
001100  2               z80_reg1 = ws+$17
001100  2               z80_reg2 = ws+$18
001100  2               z80_reg3 = ws+$19
001100  2               
001100  2               z80_r	 = ws+$1a
001100  2               
001100  2               
001100  1               	.include "z80.asm"
001100  2               .include "dodgy.inc" 
001100  2               
001100  3               ; Game engine code --------------------------------------------------------------
001100  3               
001100  3               ; Arcade Game Designer.
001100  3               ; (C) 2008 Jonathan Cauldwell.
001100  3               ; ZX Spectrum Next Engine v0.1.
001100  3               
001100  3               ; Global definitions ------------------------------------------------------------
001100  3               
001100  3               	FONT = font		; Font address
001100  3               
001100  3               ; Block characteristics.
001100  3               
001100  3               	PLATFM = 1		; platform.
001100  3               	WALL = PLATFM + 1	; solid wall.
001100  3               	LADDER = WALL + 1	; ladder.
001100  3               	FODDER = LADDER + 1	; fodder block.
001100  3               	DEADLY = FODDER + 1	; deadly block.
001100  3               	CUSTOM = DEADLY + 1	; custom block.
001100  3               	NUMTYP = CUSTOM + 1	; number of types.
001100  3               
001100  3               ; Sprites.
001100  3               
001100  3               	NUMSPR = 12		; number of sprites.
001100  3               	TABSIZ = 17		; size of each entry.
001100  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
001100  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
001100  3               	var_X  = 8		; new x coordinate of sprite.
001100  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
001100  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
001100  3               
001100  3               ; Particle engine.
001100  3               
001100  3               	NUMSHR = 55		; pieces of shrapnel.
001100  3               	SHRSIZ = 6		; bytes per particle.
001100  3               
001100  3               ; Local vars
001100  3               
001100  3               	scraddr	= $80
001100  3               	fntaddr	= $82
001100  3               	tileaddr= $84
001100  3               	bufaddr	= $86
001100  3               	tmp     = $88
001100  3               
001100  3               	scr_l	= $90
001100  3               	scr_r	= $92
001100  3               	scr_txt	= $94
001100  3               
001100  3               ; System constants
001100  3               
001100  3               	ScreenAddr  = $5800	; Startaddress video RAM _BEEB
001100  3               	ScreenSize 	= $8000 - ScreenAddr	; Screen size bytes _BEEB
001100  3               	ScreenRowBytes = 320				; 40 columns
001100  3               
001100  3               ;	ScrSelAddr  = $b000	; Screen selection address
001100  3               ;	KeyRowAddr  = $b000	; PIA key matrix row
001100  3               ;	KeyColAddr  = $b001	; PIA key matrix column
001100  3               ;	SpeakerBit  = $b002	; Speaker bit
001100  3               ;	CmdReg      = $b400	; Command register AtoMMC
001100  3               ;	DatReg      = $b401	; Data register AtoMMC 
001100  3               ;	Timer2_Low  = $b808	; Timer 2 low byte
001100  3               ;	Timer2_High = $b809	; Timer 2 high byte
001100  3               
001100  3               ; System calls
001100  3               
001100  3               ;	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
001100  3               ;	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
001100  3               ;	OSRDCH   = $fe94	; get key subroutine
001100  3               ;   READKEY  = $fe71	; scan key matrix subroutine
001100  3               
001100  3               ; _BEEB MOS calls
001100  3               
001100  3               	OSBYTE	 = $fff4
001100  3               	OSFILE	 = $ffdd
001100  3               	OSWRCH	 = $ffee
001100  3               	OSASCI	 = $ffe3
001100  3               	OSWORD	 = $fff1
001100  3               	OSFIND	 = $ffce
001100  3               	OSGBPB	 = $ffd1
001100  3               	OSARGS	 = $ffda
001100  3               
001100  3               ; Conditional compilation flags
001100  3               ; Flags are set in commandline assembly
001100  3               
001100  3               ;	mflag = 0 		; MENU + INV
001100  3               ;	pflag = 0		; Particle engine
001100  3               ;	sflag = 0		; scrollytext
001100  3               ;	fflag = 1		; Fontflag
001100  3               
001100  3               .if iflag
001100  3               	TxtInvert   = $ff	; Invert byte for character printing
001100  3               	ScrFillByte = $ff	; Screen fill byte for CLS
001100  3               .else
001100  3               	TxtInvert   = $00	; Invert byte for character printing
001100  3               	ScrFillByte = $00	; Screen fill byte for CLS
001100  3               .endif
001100  3               	ScrMode     = 4		; Screen mode:	_BEEB
001100  3               				;  $d0 = CLEAR4a colour
001100  3               				;  $f0 = CLEAR4  mono
001100  3               
001100  3               ;===============================================================
001100  3               ; Game starts here
001100  3               ;===============================================================
001100  3               
001100  3               .segment "CODE"
001100  3               
001100  3               ;--------------------------------------------------------------
001100  3               ; If a font is required...
001100  3               ;--------------------------------------------------------------
001100  3               
001100  3  A9 67        	lda #<(FONT-256)	; address of font.
001102  3  8D 77 2C     	sta FontPtr
001105  3  A9 34        	lda #>(FONT-256)
001107  3  8D 78 2C     	sta FontPtr+1
00110A  3               
00110A  3               :
00110A  3  20 80 12     	jsr game	 	; start the game.
00110D  3               
00110D  3  A2 FF        	ldx #$ff
00110F  3  A0 7F        	ldy #$7f
001111  3  A9 81        	lda #$81
001113  3  20 F4 FF     	jsr OSBYTE
001116  3               
001116  3  4C 0A 11     	jmp :-
001119  3               
001119  3  60           	rts				; exit (to BASIC?)
00111A  3               	
00111A  3  00           contrl:	.byte 0			; control, 0 = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
00111B  3  00           joyval:	.byte 0			; joystick reading.
00111C  3  00           frmno:	.byte 0			; selected frame.
00111D  3               
00111D  3               ; Don't change the order of these four.  
00111D  3               ; Menu routine relies on winlft following wintop.
00111D  3               
00111D  3  01           wintop:	.byte WINDOWTOP		; top of window.
00111E  3  01           winlft:	.byte WINDOWLFT		; left edge.
00111F  3  16           winhgt:	.byte WINDOWHGT		; window height.
001120  3  1E           winwid:	.byte WINDOWWID		; window width.
001121  3  03           numob:	.byte NUMOBJ		; number of objects in game.
001122  3               
001122  3               ; Variables start here.
001122  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
001122  3               
001122  3  08           wntopx:	.byte (8 * WINDOWTOP)
001123  3  08           wnlftx:	.byte (8 * WINDOWLFT)
001124  3  A8           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
001125  3  E6           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
001126  3               
001126  3  00           scno:	.byte 0			; present screen number.
001127  3  03           numlif:	.byte 3			; number of lives.
001128  3               
001128  3  00           vara:	.byte 0			; general-purpose variable.
001129  3  00           varb:	.byte 0			; general-purpose variable.
00112A  3  00           varc:	.byte 0			; general-purpose variable.
00112B  3  00           vard:	.byte 0			; general-purpose variable.
00112C  3  00           vare:	.byte 0			; general-purpose variable.
00112D  3  00           varf:	.byte 0			; general-purpose variable.
00112E  3  00           varg:	.byte 0			; general-purpose variable.
00112F  3  00           varh:	.byte 0			; general-purpose variable.
001130  3  00           vari:	.byte 0			; general-purpose variable.
001131  3  00           varj:	.byte 0			; general-purpose variable.
001132  3  00           vark:	.byte 0			; general-purpose variable.
001133  3  00           varl:	.byte 0			; general-purpose variable.
001134  3  00           varm:	.byte 0			; general-purpose variable.
001135  3  00           varn:	.byte 0			; general-purpose variable.
001136  3  00           varo:	.byte 0			; general-purpose variable.
001137  3  00           varp:	.byte 0			; general-purpose variable.
001138  3  00           varq:	.byte 0			; general-purpose variable.
001139  3  00           varr:	.byte 0			; general-purpose variable.
00113A  3  00           vars:	.byte 0			; general-purpose variable.
00113B  3  00           vart:	.byte 0			; general-purpose variable.
00113C  3  00           varu:	.byte 0			; general-purpose variable.
00113D  3  00           varv:	.byte 0			; general-purpose variable.
00113E  3  00           varw:	.byte 0			; general-purpose variable.
00113F  3  00           varz:	.byte 0			; general-purpose variable.
001140  3               
001140  3  00           charx:	.byte 0			; cursor x position.
001141  3  00           chary:	.byte 0			; cursor y position.
001142  3               
001142  3  00           clock:	.byte 0			; last clock reading.
001143  3  FF           varrnd:	.byte 255		; last random number.
001144  3  FE           varobj:	.byte 254		; last object number.
001145  3  FF           varopt:	.byte 255		; last option chosen from menu.
001146  3  FF           varblk:	.byte 255		; block type.
001147  3  00           nexlev:	.byte 0			; next level flag.
001148  3  00           restfl:	.byte 0			; restart screen flag.
001149  3  00           deadf:	.byte 0			; dead flag.
00114A  3  00           gamwon:	.byte 0			; game won flag.
00114B  3  00           dispx:	.byte 0			; cursor x position.
00114C  3  00           dispy:	.byte 0			; cursor y position.
00114D  3               
00114D  3               ; Make sure pointers are arranged in the same order as the data itself.
00114D  3               
00114D  3  7F 34        frmptr:	.word frmlst         ; sprite frames.
00114F  3               
00114F  3               ; Assorted game routines which can go in contended memory.
00114F  3               
00114F  3               ;--------------------------------------------------------------
00114F  3               ; Modify for inventory.
00114F  3               ; called by the INV command
00114F  3               ;
00114F  3               ; Input:
00114F  3               ;  X   = message nr with objects seperated with ,
00114F  3               ;
00114F  3               ; Output:
00114F  3               ;  OPT = selected line nr of INV menu
00114F  3               ;--------------------------------------------------------------
00114F  3               
00114F  3               .if mflag
00114F  3               minve:
00114F  3               	lda #<(invdis)		; routine address.
00114F  3               	sta mod0+1		; set up menu routine.
00114F  3               	sta mod2+1		; set up count routine.
00114F  3               	lda #>(invdis)
00114F  3               	sta mod0+2
00114F  3               	sta mod2+2
00114F  3               	lda #<(fopt)		; find option from available objects.
00114F  3               	sta mod1+1		; set up routine.
00114F  3               	lda #>(fopt)
00114F  3               	sta mod1+1+1
00114F  3               	jmp dbox		; do menu routine.
00114F  3               
00114F  3               ;--------------------------------------------------------------
00114F  3               ; Modify for menu.
00114F  3               ; called by the MENU command
00114F  3               ;
00114F  3               ; Input:
00114F  3               ;  X   = message nr with menu items seperated with ,
00114F  3               ;
00114F  3               ; Output:
00114F  3               ;  OPT = selected line nr of MENU menu
00114F  3               ;--------------------------------------------------------------
00114F  3               
00114F  3               mmenu:
00114F  3               	lda #<(always)		; routine address.
00114F  3               	sta mod0+1		; set up routine.
00114F  3               	sta mod2+1		; set up count routine.
00114F  3               	lda #>(always)
00114F  3               	sta mod0+2
00114F  3               	sta mod2+2
00114F  3               
00114F  3               	lda #<(fstd)		; standard option selection.
00114F  3               	sta mod1+1		; set up routine.
00114F  3               	lda #>(fstd)
00114F  3               	sta mod1+2
00114F  3               
00114F  3               ; Drop through into box routine.
00114F  3               
00114F  3               ;--------------------------------------------------------------
00114F  3               ; Work out size of box for message or menu.
00114F  3               ;--------------------------------------------------------------
00114F  3               
00114F  3               dbox:
00114F  3               	lda #<(msgdat)		; pointer to messages.
00114F  3               	sta z80_l
00114F  3               	lda #>(msgdat)
00114F  3               	sta z80_h
00114F  3               	
00114F  3               	jsr getwrd		; get message number.
00114F  3               
00114F  3               	lda z80_h		; store pointer to message.
00114F  3               	sta TmpAddr
00114F  3               	lda z80_l
00114F  3               	sta TmpAddr+1
00114F  3               
00114F  3               	lda #1			; height.
00114F  3               	sta z80_d
00114F  3               	lda #0			; start at object zero.
00114F  3               	sta combyt		; store number of object in combyt.
00114F  3               	sta z80_e		; maximum width.
00114F  3               dbox5:
00114F  3               	lda #0			; this line"s width.
00114F  3               	sta z80_b
00114F  3               mod2:
00114F  3               	jsr always		; item in player"s possession?
00114F  3               	cmp #255
00114F  3               	bne dbox6		; not in inventory, skip this line.
00114F  3               	inc z80_d		; add to tally.
00114F  3               dbox6:
00114F  3               	ldy #0			; get character.
00114F  3               	lda (z80_hl),y
00114F  3               	sta z80_a
00114F  3               	inc z80_l		; next character.
00114F  3               	bne :+
00114F  3               	inc z80_h
00114F  3               :
00114F  3               	lda z80_a		; reached end of line?
00114F  3               	cmp #','
00114F  3               	beq dbox3		; yes.
00114F  3               	cmp #13
00114F  3               	beq dbox3		; yes.
00114F  3               	inc z80_b		; add to this line"s width.
00114F  3               	lda z80_a
00114F  3               	bmi dbox4		; end of message? yes, end count.
00114F  3               	jmp dbox6		; repeat until we find the end.
00114F  3               dbox3:
00114F  3               	lda z80_e		; maximum line width.
00114F  3               	cmp z80_b		; have we exceeded longest so far?
00114F  3               	bpl dbox5		; no, carry on looking.
00114F  3               	lda z80_b		; make this the widest so far.
00114F  3               	sta z80_e
00114F  3               	jmp dbox5		; keep looking.
00114F  3               dbox4:
00114F  3               	lda z80_e		; maximum line width.
00114F  3               	cmp z80_b		; have we exceeded longest so far?
00114F  3               	bpl dbox8		; no, carry on looking.
00114F  3               	lda z80_b		; final line is the longest so far.
00114F  3               	sta z80_e
00114F  3               dbox8:
00114F  3               	dec z80_d		; decrement items found.
00114F  3               	bne :+			; total was zero.
00114F  3               	jmp dbox15		
00114F  3               :
00114F  3               	lda z80_e		; longest line.
00114F  3               	bne :+			; was it zero?
00114F  3               	jmp dbox15		; total was zero.
00114F  3               :
00114F  3               	sta bwid		; set up size.
00114F  3               	lda z80_d
00114F  3               	sta blen
00114F  3               
00114F  3               ;--------------------------------------------------------------
00114F  3               ; That's set up our box size.
00114F  3               ;--------------------------------------------------------------
00114F  3               
00114F  3               	lda winhgt		; window height in characters.
00114F  3               	sec
00114F  3               	sbc z80_d		; subtract height of box.
00114F  3               	lsr a			; divide by 2.
00114F  3               	clc
00114F  3               	adc wintop		; add top edge of window.
00114F  3               	sta btop		; set up box top.
00114F  3               
00114F  3               	lda winwid		; window width in characters.
00114F  3               	sec	
00114F  3               	sbc z80_e		; subtract box width.
00114F  3               	lsr a			; divide by 2.
00114F  3               	clc
00114F  3               	adc winlft		; add left edge of window.
00114F  3               	sta blft		; box left.
00114F  3               
00114F  3               	lda FontPtr		; font.
00114F  3               	sta grbase		; set up for text display.
00114F  3               	lda FontPtr+1
00114F  3               	sta grbase+1
00114F  3               
00114F  3               	lda TmpAddr+1		; restore message pointer.
00114F  3               	sta z80_l
00114F  3               	lda TmpAddr
00114F  3               	sta z80_h
00114F  3               
00114F  3               	lda btop		; box top.
00114F  3               	sta dispy		; set display coordinate.
00114F  3               	lda #0			; start at object zero.
00114F  3               	sta combyt		; store number of object in combyt.
00114F  3               dbox2:
00114F  3               	lda combyt		; get object number.
00114F  3               	sta z80_a
00114F  3               mod0:
00114F  3               	jsr always		; check inventory for display.
00114F  3               	cmp #255
00114F  3               	beq :+			
00114F  3               	jmp dbox13		; not in inventory, skip this line.
00114F  3               :
00114F  3               	lda blft		; box left.
00114F  3               	sta dispx		; set left display position.
00114F  3               	lda bwid		; box width.
00114F  3               	sta z80_b		; store width.
00114F  3               dbox0:
00114F  3               	ldy #0			; get character.
00114F  3               	lda (z80_hl),y
00114F  3               	cmp #','		; end of line?
00114F  3               	beq dbox1		; yes, next one.
00114F  3               	cmp #13			; end of line?
00114F  3               	beq dbox1		; yes, next one.
00114F  3               
00114F  3               	dec z80_b		; one less to display.
00114F  3               	and #127		; remove terminator.
00114F  3               
00114F  3               	jsr pchr		; display on screen.
00114F  3               
00114F  3               	ldy #0
00114F  3               	lda (z80_hl),y		; get character.
00114F  3               	sta z80_a
00114F  3               	inc z80_l		; next character.
00114F  3               	bne :+
00114F  3               	inc z80_h
00114F  3               :
00114F  3               	lda z80_a
00114F  3               	cmp #128		; end of message?
00114F  3               	bmi :+
00114F  3               	jmp dbox7		; yes, job done.
00114F  3               :
00114F  3               	lda z80_b		; chars remaining.
00114F  3               	beq :+			; are any left?
00114F  3               	jmp dbox0		; yes, continue.
00114F  3               :
00114F  3               ;---------------------------------------------------
00114F  3               ; Reached limit of characters per line.
00114F  3               ;---------------------------------------------------
00114F  3               
00114F  3               dbox9:
00114F  3               	ldy #0
00114F  3               	lda (z80_hl),y		; get character.
00114F  3               	inc z80_l		; next one.
00114F  3               	bne :+
00114F  3               	inc z80_h
00114F  3               :
00114F  3               	cmp #','		; another line?
00114F  3               	beq dbox10		; yes, do next line.
00114F  3               	cmp #13			; another line?
00114F  3               	beq dbox10		; yes, do next line.
00114F  3               	cmp #128		; end of message?
00114F  3               	bcs :+
00114F  3               	jmp dbox11		; yes, finish message.
00114F  3               :
00114F  3               	jmp dbox9
00114F  3               
00114F  3               ;---------------------------------------------------
00114F  3               ; Fill box to end of line.
00114F  3               ;---------------------------------------------------
00114F  3               
00114F  3               dboxf:
00114F  3               	lda #32			; space character.
00114F  3               	jsr pchr		; display character.
00114F  3               	dec z80_b
00114F  3               	beq :+
00114F  3               	jmp dboxf		; repeat for remaining chars on line.
00114F  3               :
00114F  3               	rts
00114F  3               dbox1:
00114F  3               	inc z80_l		; skip character.
00114F  3               	bne :+
00114F  3               	inc z80_h
00114F  3               :
00114F  3               	jsr dboxf		; fill box out to right side.
00114F  3               dbox10:
00114F  3               	inc dispy		; y coordinate down a line next position.
00114F  3               	jmp dbox2		; next line.
00114F  3               dbox7:
00114F  3               	lda z80_b		; chars remaining.
00114F  3               	bne :+			; are any left?
00114F  3               	jmp dbox11		; no, nothing to draw.
00114F  3               :
00114F  3               	jsr dboxf		; fill message to line.
00114F  3               
00114F  3               ;------------------------------------------------------
00114F  3               ; Drawn the box menu, now select option.
00114F  3               ;------------------------------------------------------
00114F  3               
00114F  3               dbox11:
00114F  3               	lda btop		; box top.
00114F  3               	sta dispy		; set bar position.
00114F  3               dbox14:
00114F  3               	jsr joykey		; get controls.
00114F  3               	cmp #$7f		; anything pressed?
00114F  3               	bne dbox14		; yes, debounce it.
00114F  3               	jsr dbar		; draw bar.
00114F  3               dbox12:
00114F  3               	jsr joykey		; get controls.
00114F  3               	cmp #$7f		; anything pressed?
00114F  3               	beq dbox12		; no, nothing.
00114F  3               	and #16			; fire button pressed?
00114F  3               	bne :+
00114F  3               mod1:
00114F  3               	jmp fstd		; yes, job done.
00114F  3               :
00114F  3               	jsr dbar		; delete bar.
00114F  3               
00114F  3               	lda joyval		; joystick reading.
00114F  3               	and #8			; going up?
00114F  3               	beq dboxu		; yes, go up.
00114F  3               
00114F  3               	ldx dispy		; vertical position of bar.
00114F  3               	inx			; look down.
00114F  3               	txa
00114F  3               	sec
00114F  3               	sbc btop		; find distance from top.
00114F  3               	cmp blen		; top of box.
00114F  3               	bne :+
00114F  3               	jmp dbox14		; yes, go no further.
00114F  3               :
00114F  3               	inc dispy		; move bar.
00114F  3               	jmp dbox14		; continue.
00114F  3               dboxu:
00114F  3               	lda dispy		; vertical position of bar.
00114F  3               	cmp btop		; are we at the top?
00114F  3               	bne :+
00114F  3               	jmp dbox14		; yes, go no further.
00114F  3               :
00114F  3               	dec dispy		; move bar.
00114F  3               	jmp dbox14		; continue.
00114F  3               fstd:
00114F  3               	lda dispy		; bar position.
00114F  3               	sec
00114F  3               	sbc btop		; find selected option.
00114F  3               	sta varopt		; store the option.
00114F  3               	jmp redraw		; redraw the screen.
00114F  3               
00114F  3               ;------------------------------------------------------
00114F  3               ; Option not available.  Skip this line.
00114F  3               ;------------------------------------------------------
00114F  3               
00114F  3               dbox13:
00114F  3               	ldy #0
00114F  3               	lda (z80_hl),y		; get character.
00114F  3               	inc z80_l		; next one.
00114F  3               	bne :+
00114F  3               	inc z80_h
00114F  3               :
00114F  3               	cmp #','		; another line?
00114F  3               	bne :+
00114F  3               	jmp dbox2		; yes, do next line.
00114F  3               :
00114F  3               	cmp #13			; another line?
00114F  3               	bne :+
00114F  3               	jmp dbox2		; yes, do next line.
00114F  3               :
00114F  3               
00114F  3               	bpl :+			; end of message?
00114F  3               	jmp dbox11		; yes, finish message.
00114F  3               :
00114F  3               	jmp dbox13
00114F  3               dbox15:
00114F  3               	lda TmpAddr		; pop message pointer from the stack.
00114F  3               	sta z80_h
00114F  3               	lda TmpAddr+1
00114F  3               	sta z80_l
00114F  3               	rts
00114F  3               
00114F  3               ;------------------------------------------------------
00114F  3               ; Invert bar
00114F  3               ;------------------------------------------------------
00114F  3               
00114F  3               dbar:
00114F  3               	lda blft		; box left.
00114F  3               	sta dispx		; set display coordinate.
00114F  3               	jsr gprad		; get printing address.
00114F  3               
00114F  3               	lda bwid		; box width.
00114F  3               	sta z80_c		; loop counter in c.
00114F  3               	lda z80_h		
00114F  3               	sta z80_d		; store screen address high byte.
00114F  3               dbar1:
00114F  3               	ldx #7			; pixel height in b.
00114F  3               dbar0:
00114F  3               	ldy scrtab,x
00114F  3               	lda (scraddr),y		; get screen byte.
00114F  3               	eor #255		; reverse all bits.
00114F  3               	sta (scraddr),y		; write back to screen.
00114F  3               	dex			; next line down.
00114F  3               	bpl dbar0		; draw rest of character.
00114F  3               
00114F  3               	clc
00114F  3               	lda scraddr		; one char right.
00114F  3               	adc #8
00114F  3               	sta scraddr
00114F  3               	bcc :+
00114F  3               	inc scraddr+1
00114F  3               :
00114F  3               
00114F  3               	dec z80_c		; decrement character counter.
00114F  3               	beq :+
00114F  3               	jmp dbar1		; repeat for whole line.
00114F  3               :
00114F  3               	rts
00114F  3               
00114F  3               ;------------------------------------------------------
00114F  3               ; Point to object
00114F  3               ;
00114F  3               ; Input:
00114F  3               ;  -
00114F  3               ;
00114F  3               ; Output:
00114F  3               ;  A = object number, A=255 if already in possession
00114F  3               ;------------------------------------------------------
00114F  3               
00114F  3               invdis:
00114F  3               	lda z80_l		; store message text pointer.
00114F  3               	pha
00114F  3               	lda z80_h
00114F  3               	pha
00114F  3               	lda combyt		; object number.
00114F  3               	inc combyt		; ready for next one.
00114F  3               	jsr gotob		; check if we have object.
00114F  3               	tay
00114F  3               	pla
00114F  3               	sta z80_h
00114F  3               	pla
00114F  3               	sta z80_l
00114F  3               	tya
00114F  3               	rts
00114F  3               
00114F  3               ;------------------------------------------------------
00114F  3               ; Find option selected.
00114F  3               ;
00114F  3               ; Input:
00114F  3               ;  -
00114F  3               ;
00114F  3               ; Output:
00114F  3               ;  OPT = selected object
00114F  3               ;------------------------------------------------------
00114F  3               
00114F  3               fopt:
00114F  3               	lda dispy
00114F  3               	sec
00114F  3               	sbc btop		; find selected option.
00114F  3               	sta tmp+2		; option selected in b register.
00114F  3               	inc tmp+2
00114F  3               
00114F  3               	lda #0			; set to first item.
00114F  3               	sta combyt		; object number.
00114F  3               fopt0:
00114F  3               	jsr fobj		; find next object in inventory.
00114F  3               	dec tmp+2
00114F  3               	bne fopt0		; repeat for relevant steps down the list.
00114F  3               
00114F  3               	lda combyt		; get option.
00114F  3               	sta varopt		; store the option.
00114F  3               	dec varopt		; one less, due to where we increment combyt.
00114F  3               	jmp redraw		; redraw the screen.
00114F  3               fobj:
00114F  3               	ldy combyt		; object number.
00114F  3               	inc combyt		; ready for next item.
00114F  3               	tya
00114F  3               	jsr gotob		; do we have this item?
00114F  3               	cmp #255
00114F  3               	bne :+
00114F  3               	rts
00114F  3               :
00114F  3               	jmp fobj		; yes, it's on the list.
00114F  3               
00114F  3               bwid:	.byte 0              ; box/menu width.
00114F  3               blen:	.byte 0              ; box/menu height.
00114F  3               btop:	.byte 0              ; box coordinates.
00114F  3               blft:	.byte 0
00114F  3               .endif
00114F  3               
00114F  3               ;----------------------------------------------------
00114F  3               ; Wait for keypress.
00114F  3               ;----------------------------------------------------
00114F  3               
00114F  3               prskey:
00114F  3  8A           	txa
001150  3  48           	pha
001151  3               prsloop:
001151  3  20 BA 11     	jsr vsync
001154  3               ; _BEEB KEYS
001154  3  A9 79        	lda #$79
001156  3  A2 01        	ldx #$01
001158  3  20 F4 FF     	jsr OSBYTE
00115B  3  E0 FF        	cpx #$ff
00115D  3  F0 F2        	beq prsloop		; wait until key pressed
00115F  3  68           	pla
001160  3  AA           	tax
001161  3  60           	rts
001162  3               
001162  3               ;----------------------------------------------------
001162  3               ; Delay routine 1/50 sec
001162  3               ;
001162  3               ; Wait 1/60 sec = 16666 usec
001162  3               ; Wait 208 x 16 =  3328 usec
001162  3               ;                 19994 usec
001162  3               ; rts           =     6 usec
001162  3               ; Total         = 20000 usec
001162  3               ;----------------------------------------------------
001162  3               
001162  3               delay:
001162  3  8D 34 19     	sta xtmp
001165  3               del_loop:
001165  3  A9 13        	lda #19
001167  3  20 F4 FF     	jsr OSBYTE		; wait for vsync _BEEB
00116A  3               
00116A  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
00116C  3               delay1:
00116C  3  61 80        	adc ($80,x)		;	 6 usec
00116E  3  61 80        	adc ($80,x)		;	 6 usec
001170  3  88           	dey			;	 2 usec
001171  3  D0 F9        	bne delay1		;	 2 usec
001173  3  EA           	nop			; 2 usec
001174  3  EA           	nop			; 2 usec
001175  3               				; tot: 20000 usec
001175  3  CE 34 19     	dec xtmp
001178  3  D0 EB        	bne del_loop
00117A  3  60           	rts
00117B  3               
00117B  3               ;----------------------------------------------------
00117B  3               ; Clear sprite table.
00117B  3               ;
00117B  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
00117B  3               ;----------------------------------------------------
00117B  3               
00117B  3               xspr:
00117B  3  A9 FF        	lda #255		; clear byte.
00117D  3  A2 00        	ldx #0			; length of table.
00117F  3               xspr0:
00117F  3  9D 4E 25     	sta sprtab,x		; sprite table.
001182  3  E8           	inx			; move to next byte.
001183  3  E0 CC        	cpx #SPRBUF
001185  3  D0 F8        	bne xspr0		; repeat for rest of table.
001187  3  60           	rts
001188  3               
001188  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
001188  3               ; Sound, NOT IMPLEMENTED!!!
001188  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
001188  3               ;
001188  3               ;silenc:
001188  3               ;	jsr silen1 		; silence channel 1.
001188  3               ;	jsr silen2 		; silence channel 2.
001188  3               ;	jsr silen3 		; silence channel 3.
001188  3               ;	jmp plsnd 		; play all channels to switch them off.
001188  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
001188  3               
001188  3               ;-------------------------------------------------------------
001188  3               ; Initialise all objects.
001188  3               ;
001188  3               ; Reset current room,y,x to start room,y,x for all objects
001188  3               ;-------------------------------------------------------------
001188  3               
001188  3               iniob:
001188  3  A9 F5        	lda #<objdta 		; objects table.
00118A  3  85 68        	sta z80_x
00118C  3  A9 34        	lda #>objdta
00118E  3  85 69        	sta z80_i
001190  3               
001190  3  AE 21 11     	ldx numob 		; number of objects in the game.
001193  3               iniob0:
001193  3  A0 23        	ldy #35
001195  3  B1 68        	lda (z80_ix),y 		; start screen.
001197  3  A0 20        	ldy #32
001199  3  91 68        	sta (z80_ix),y 		; set start screen.
00119B  3               
00119B  3  A0 24        	ldy #36
00119D  3  B1 68        	lda (z80_ix),y 		; find start y.
00119F  3  A0 21        	ldy #33
0011A1  3  91 68        	sta (z80_ix),y 		; set start y.
0011A3  3               
0011A3  3  A0 25        	ldy #37
0011A5  3  B1 68        	lda (z80_ix),y 		; get initial x.
0011A7  3  A0 22        	ldy #34
0011A9  3  91 68        	sta (z80_ix),y 		; set x coord.
0011AB  3               
0011AB  3  18           	clc 			; point to next object.
0011AC  3  A5 68        	lda z80_x
0011AE  3  69 26        	adc #38			; distance between objects.
0011B0  3  85 68        	sta z80_x
0011B2  3  90 02        	bcc :+
0011B4  3  E6 69        	inc z80_i
0011B6  3               :
0011B6  3  CA           	dex 			; repeat.
0011B7  3  D0 DA        	bne iniob0
0011B9  3               
0011B9  3  60           	rts
0011BA  3               
0011BA  3               ;-------------------------------------------------------------
0011BA  3               ; Screen synchronisation.
0011BA  3               ;
0011BA  3               ;  - read joystick/keyboard
0011BA  3               ;  - handle sound
0011BA  3               ;  - sync framerate with clock
0011BA  3               ;  - handle shrapnel every even frame
0011BA  3               ;-------------------------------------------------------------
0011BA  3               
0011BA  3               vsync:
0011BA  3  48           	pha
0011BB  3  98           	tya
0011BC  3  48           	pha
0011BD  3  8A           	txa
0011BE  3  48           	pha
0011BF  3  20 96 1C     	jsr joykey		; read joystick/keyboard.
0011C2  3               vsync1:
0011C2  3               ;	lda Timer2_High		; sync framerate with clock
0011C2  3               ;	bne vsync1
0011C2  3               ;	lda #>50000
0011C2  3               ;	sta Timer2_High
0011C2  3               ;	lda #<50000
0011C2  3               ;	sta Timer2_Low
0011C2  3               
0011C2  3  A9 13        	lda #19
0011C4  3  20 F4 FF     	jsr OSBYTE		; _BEEB vsync
0011C7  3               
0011C7  3  AD 42 11     	lda clock
0011CA  3  29 01        	and #1
0011CC  3  D0 03        	bne:+
0011CE  3  20 7F 12     	jsr proshr		; handle shrapnel every even frame
0011D1  3               :
0011D1  3  AD DC 11     	lda sndtyp
0011D4  3  F0 00        	beq sndskip
0011D6  3               ; _BEEB TODO SOUND
0011D6  3               ;sndloop:
0011D6  3               ;	lda SpeakerBit		; handle sound
0011D6  3               ;	ldy sndtyp
0011D6  3               ;sndwait:
0011D6  3               ;	dey
0011D6  3               ;	bne sndwait
0011D6  3               ;	eor #4
0011D6  3               ;	sta SpeakerBit
0011D6  3               ;	dec sndtyp
0011D6  3               ;	bne sndloop
0011D6  3               sndskip: 
0011D6  3  68           	pla
0011D7  3  AA           	tax
0011D8  3  68           	pla
0011D9  3  A8           	tay
0011DA  3  68           	pla
0011DB  3  60           	rts
0011DC  3               
0011DC  3  00           sndtyp:	.byte 0
0011DD  3               
0011DD  3               ;-----------------------------------------------
0011DD  3               ; Redraw the screen.
0011DD  3               ;
0011DD  3               ; Remove old copy of all sprites for redraw.
0011DD  3               ;-----------------------------------------------
0011DD  3               
0011DD  3               redraw:
0011DD  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
0011DF  3  48           	pha
0011E0  3  A5 68        	lda z80_x
0011E2  3  48           	pha
0011E3  3               
0011E3  3  20 6B 19     	jsr droom		; show screen layout.
0011E6  3  20 74 14     	jsr shwob		; draw objects.
0011E9  3               numsp0:
0011E9  3  A9 0C        	lda #NUMSPR		; sprites to draw.
0011EB  3  85 88        	sta tmp
0011ED  3               
0011ED  3  A9 4E        	lda #<sprtab		; sprite table.
0011EF  3  85 68        	sta z80_x
0011F1  3  A9 25        	lda #>sprtab
0011F3  3  85 69        	sta z80_i
0011F5  3               redrw0:
0011F5  3  A0 00        	ldy #0
0011F7  3  B1 68        	lda (z80_ix),y		; old sprite type.
0011F9  3  C9 FF        	cmp #255		; is it enabled?
0011FB  3  F0 0B        	beq redrw1 		; no, find next one.
0011FD  3               
0011FD  3  A0 03        	ldy #3
0011FF  3  B1 68        	lda (z80_ix),y 		; sprite y.
001201  3  C9 B1        	cmp #177		; beyond maximum?
001203  3  B0 03        	bcs redrw1		; yes, nothing to draw.
001205  3               
001205  3  20 61 20     	jsr sspria		; show single sprite.
001208  3               redrw1:
001208  3  18           	clc			; next sprite.
001209  3  A5 68        	lda z80_x
00120B  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00120D  3  85 68        	sta z80_x
00120F  3  90 02        	bcc :+
001211  3  E6 69        	inc z80_i
001213  3               :
001213  3  C6 88        	dec tmp			; repeat for remaining sprites.
001215  3  D0 DE        	bne redrw0
001217  3               rpblc1:
001217  3               ;	jsr dshrp		; redraw shrapnel.
001217  3               
001217  3  68           	pla			; retrieve sprite pointer.
001218  3  85 68        	sta z80_x
00121A  3  68           	pla
00121B  3  85 69        	sta z80_i
00121D  3               
00121D  3  60           	rts
00121E  3               
00121E  3               ;----------------------------------------------------------------------
00121E  3               ; Clear screen routine.
00121E  3               ;
00121E  3               ; Fill screenmem $8000-$97ff with ScrFillByte
00121E  3               ;----------------------------------------------------------------------
00121E  3               
00121E  3               cls:
00121E  3  A9 58        	lda #>ScreenAddr		; screen address.
001220  3  8D 29 12     	sta clsloop+2
001223  3  A9 00        	lda #ScrFillByte
001225  3  A0 00        	ldy #0
001227  3               clsloop:
001227  3  99 00 58     	sta ScreenAddr,y
00122A  3  C8           	iny
00122B  3  D0 FA        	bne clsloop
00122D  3  EE 29 12     	inc clsloop+2
001230  3  AE 29 12     	ldx clsloop+2
001233  3  E0 80        	cpx #>(ScreenAddr+ScreenSize)		; _BEEB
001235  3  D0 F0        	bne clsloop
001237  3  60           	rts
001238  3               
001238  3               ;----------------------------------------------------------------------
001238  3               ; Atomic palette is static 
001238  3               ;----------------------------------------------------------------------
001238  3               
001238  3               setpal:
001238  3  60           	rts
001239  3               
001239  3               ;----------------------------------------------------------------------
001239  3               ; FODDER check
001239  3               ;----------------------------------------------------------------------
001239  3               
001239  3               fdchk:
001239  3  A0 00        	ldy #0
00123B  3  B1 66        	lda (z80_hl),y	 	; fetch cell.
00123D  3  C9 04        	cmp #FODDER 		; is it fodder?
00123F  3  F0 01        	beq :+
001241  3  60           	rts 			; no.
001242  3               :
001242  3  A9 00        	lda #0
001244  3  A0 00        	ldy #0
001246  3  91 66        	sta (z80_hl),y 		; rewrite block type.
001248  3               
001248  3  A5 67        	lda z80_h		; store pointer to block.
00124A  3  48           	pha
00124B  3  A5 66        	lda z80_l
00124D  3  48           	pha
00124E  3               
00124E  3  38           	sec			; set carry flag for subtraction.
00124F  3  A5 66        	lda z80_l 		; find simple displacement for block.
001251  3  E9 2D        	sbc #<MAP
001253  3  85 66        	sta z80_l
001255  3  A5 67        	lda z80_h
001257  3  E9 26        	sbc #>MAP
001259  3  85 67        	sta z80_h
00125B  3               
00125B  3  A5 66        	lda z80_l		; low byte is y coordinate.
00125D  3  29 1F        	and #31 		; column position 0 - 31.
00125F  3  8D 4B 11     	sta dispx		; set up x position.
001262  3               
001262  3  06 66        	asl z80_l		; multiply displacement by 8.
001264  3  26 67        	rol z80_h
001266  3  06 66        	asl z80_l
001268  3  26 67        	rol z80_h
00126A  3  06 66        	asl z80_l
00126C  3  26 67        	rol z80_h
00126E  3               
00126E  3  A5 67        	lda z80_h		; x coordinate now in h.
001270  3  8D 4C 11     	sta dispy		; set the display coordinate.
001273  3               
001273  3  A9 00        	lda #0 			; block to write.
001275  3  20 47 18     	jsr pattr 		; write block.
001278  3               
001278  3  68           	pla 			; restore block pointer.
001279  3  85 66        	sta z80_l
00127B  3  68           	pla
00127C  3  85 67        	sta z80_h
00127E  3               
00127E  3  60           	rts
00127F  3               
00127F  3               ;----------------------------------------------------
00127F  3               ; Scrolly text and puzzle variables.
00127F  3               ;----------------------------------------------------
00127F  3               
00127F  3               .if sflag
00127F  3               txtbit:	.byte 128		; bit to write.
00127F  3               txtwid:	.byte 16		; width of ticker message.
00127F  3               txtpos:	.word msgdat
00127F  3               txtini:	.word msgdat
00127F  3               txtscr:	.word ScreenAddr
00127F  3               .endif
00127F  3               
00127F  3               ;----------------------------------------------------
00127F  3               ; Specialist routines.
00127F  3               ; Process shrapnel.
00127F  3               ;----------------------------------------------------
00127F  3               proshr:
00127F  3               .if pflag
00127F  3               	lda #<SHRAPN		; table.
00127F  3               	sta z80_x
00127F  3               	lda #>SHRAPN
00127F  3               	sta z80_i
00127F  3               
00127F  3               	lda #NUMSHR		; shrapnel pieces to process.
00127F  3               	sta shrctr
00127F  3               prosh0:
00127F  3               	ldy #0
00127F  3               	lda (z80_ix),y		; on/off marker.
00127F  3               	asl a
00127F  3               proshx:
00127F  3               	bcs :+
00127F  3               	jsr prosh1 		; on, so process it.
00127F  3               :
00127F  3               	clc
00127F  3               	lda z80_x
00127F  3               	adc #SHRSIZ
00127F  3               	sta z80_x
00127F  3               	bcc :+
00127F  3               	inc z80_i
00127F  3               :
00127F  3               	dec shrctr		; round again.
00127F  3               	bne prosh0
00127F  3               .endif
00127F  3               .if sflag
00127F  3               	jsr scrly
00127F  3               .endif
00127F  3  60           	rts
001280  3               
001280  3               .if pflag
001280  3               shrctr:	.byte 0
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Proces shrapnel piece
001280  3               ;----------------------------------------------------
001280  3               
001280  3               prosh1:
001280  3               	jsr plot 		; delete the pixel.
001280  3               
001280  3               	lda #<shrptr		; shrapnel routine pointers.
001280  3               	sta z80_l
001280  3               	lda #>shrptr
001280  3               	sta z80_h
001280  3               
001280  3               	ldy #0
001280  3               	lda (z80_ix),y		; restore shrapnel type.
001280  3               	jsr prosh2 		; run the routine.
001280  3               	jsr chkxy		; check x and y are good before we redisplay.
001280  3               
001280  3               	lda #<SHRSIZ 		; distance to next.
001280  3               	sta z80_e
001280  3               	lda #>SHRSIZ
001280  3               	sta z80_d
001280  3               	rts
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Run the routine
001280  3               ;----------------------------------------------------
001280  3               
001280  3               prosh2:
001280  3               	asl a 			; 2 bytes per address.
001280  3               	tay
001280  3               	lda shrptr,y
001280  3               	sta z80_l
001280  3               	lda shrptr+1,y 		; fetch high byte from table.
001280  3               	sta z80_h
001280  3               	jmp (z80_hl) 		; jump to routine.
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Paricle routine table
001280  3               ;----------------------------------------------------
001280  3               
001280  3               shrptr:	.word laser		; laser.
001280  3               	.word trail		; vapour trail.
001280  3               	.word shrap		; shrapnel from explosion.
001280  3               	.word dotl		; horizontal starfield left.
001280  3               	.word dotr		; horizontal starfield right.
001280  3               	.word dotu		; vertical starfield up.
001280  3               	.word dotd		; vertical starfield down.
001280  3               	.word ptcusr		; user particle.
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Explosion shrapnel.
001280  3               ;----------------------------------------------------
001280  3               
001280  3               shrap:
001280  3               	ldy #1
001280  3               	lda (z80_ix),y 		; get the angle.
001280  3               	clc
001280  3               	adc #<shrsin		; shrapnel sine table.
001280  3               	sta z80_l
001280  3               	lda #>shrsin
001280  3               	adc #0
001280  3               	sta z80_h
001280  3               
001280  3               	ldy #0
001280  3               	lda (z80_hl),y 		; fetch value from table.
001280  3               	sta z80_e
001280  3               	inc z80_l 		; next byte of table.
001280  3               	bne :+
001280  3               	inc z80_h
001280  3               :
001280  3               	ldy #0
001280  3               	lda (z80_hl),y		; fetch value from table.
001280  3               	sta z80_d
001280  3               	inc z80_l		; next byte of table.
001280  3               	bne :+
001280  3               	inc z80_h
001280  3               :
001280  3               	ldy #0
001280  3               	lda (z80_hl),y 		; fetch value from table.
001280  3               	sta z80_c
001280  3               	inc z80_l 		; next byte of table.
001280  3               	bne :+
001280  3               	inc z80_h
001280  3               :
001280  3               	ldy #0
001280  3               	lda (z80_hl),y 		; fetch value from table.
001280  3               	sta z80_b
001280  3               
001280  3               	ldy #2
001280  3               	lda (z80_ix),y 		; x coordinate in hl.
001280  3               	clc
001280  3               	adc z80_e		; add sine lb
001280  3               	sta (z80_ix),y		; store new coordinate lb.
001280  3               	ldy #3
001280  3               	lda (z80_ix),y
001280  3               	adc z80_d		; add sine hb
001280  3               	sta (z80_ix),y		; store new coordinate hb.
001280  3               
001280  3               	ldy #4
001280  3               	lda (z80_ix),y	 	; y coordinate in hl.
001280  3               	clc
001280  3               	adc z80_c		; add cosine lb
001280  3               	sta (z80_ix),y		; store new coordinate lb.
001280  3               	ldy #5
001280  3               	lda (z80_ix),y
001280  3               	adc z80_b		; add cosine lb
001280  3               	sta (z80_ix),y		; store new coordinate hb.
001280  3               
001280  3               	rts
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Move dots
001280  3               ;----------------------------------------------------
001280  3               
001280  3               dotl:
001280  3               	ldy #5
001280  3               	lda (z80_ix),y
001280  3               	sec
001280  3               	sbc #1		 	; move left.
001280  3               	sta (z80_ix),y
001280  3               	rts
001280  3               dotr:
001280  3               	ldy #5
001280  3               	lda (z80_ix),y
001280  3               	clc
001280  3               	adc #1		 	; move left.
001280  3               	sta (z80_ix),y
001280  3               	rts
001280  3               dotu:
001280  3               	ldy #3
001280  3               	lda (z80_ix),y
001280  3               	sec
001280  3               	sbc #1		 	; move up.
001280  3               	sta (z80_ix),y
001280  3               	rts
001280  3               dotd:
001280  3               	ldy #3
001280  3               	lda (z80_ix),y
001280  3               	clc
001280  3               	adc #1			; move down.
001280  3               	sta (z80_ix),y
001280  3               	rts
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Check if coordinates are ok before redrawing at new position.
001280  3               ;
001280  3               ; left:   X>L		X=L	Ok
001280  3               ; right:  R+15>X	X=R	Ok
001280  3               ; top:    Y>T		Y=T	Ok
001280  3               ; bottom: B+15>Y	Y=B	Ok
001280  3               ;----------------------------------------------------
001280  3               
001280  3               chkxy:
001280  3               
001280  3               ; top:    Y>T		Y=T	Ok
001280  3               
001280  3               	ldy #3
001280  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
001280  3               	cmp wntopx		; window top.
001280  3               	bcs :+			; compare with top window limit.
001280  3               	jmp kilshr		; out of window, kill shrapnel.
001280  3               :
001280  3               ; left:   X>L		X=L	Ok
001280  3               
001280  3               	ldy #5
001280  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
001280  3               	cmp wnlftx		; left edge.
001280  3               	bcs :+			; compare with left window limit.
001280  3               	jmp kilshr		; out of window, kill shrapnel.
001280  3               :
001280  3               ; bottom: B+15>Y	Y=B	Ok
001280  3               
001280  3               	lda wnbotx		; point to bottom.
001280  3               	clc
001280  3               	adc #15
001280  3               	ldy #3
001280  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
001280  3               	bcs :+			; compare with shrapnel x coordinate.
001280  3               	jmp kilshr		; off screen, kill shrapnel..
001280  3               :
001280  3               ; right:  R+15>X	X=R	Ok
001280  3               
001280  3               	lda wnrgtx		; point to right edge.
001280  3               	clc
001280  3               	adc #15
001280  3               	ldy #5
001280  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
001280  3               	bcs :+			; compare with window limit.
001280  3               	jmp kilshr		; off screen, kill shrapnel.
001280  3               :
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Drop through.
001280  3               ; Display shrapnel.
001280  3               ;----------------------------------------------------
001280  3               
001280  3               plot:
001280  3               	ldy #3
001280  3               	lda (z80_ix),y		; y integer.
001280  3               	sta dispy	 	; workspace coordinates.
001280  3               	ldy #5
001280  3               	lda (z80_ix),y	 	; x integer.
001280  3               	sta dispx 		; workspace coordinates.
001280  3               
001280  3               	ldy #0
001280  3               	lda (z80_ix),y 		; type.
001280  3               	bne :+			; is it a laser?
001280  3               	jmp plot1 		; yes, draw laser instead.
001280  3               :
001280  3               plot0:
001280  3               	lda dispx		; which pixel within byte do we
001280  3               	and #7			; want to set first?
001280  3               	tay
001280  3               	lda dots,y 		; table of small pixel positions.
001280  3               	sta z80_e 		; get value.
001280  3               
001280  3               	jsr scadd 		; screen address.
001280  3               	ldy #0
001280  3               	lda (scraddr),y		; see what's already there.
001280  3               	eor z80_e
001280  3               	sta (scraddr),y 	; put back on screen.
001280  3               	rts
001280  3               
001280  3               plot1:
001280  3               	jsr scadd 		; screen address.
001280  3               	ldy #0
001280  3               	lda (scraddr),y 	; fetch byte there.
001280  3               	eor #255 		; toggle all bits.
001280  3               	sta (scraddr),y 	; new byte.
001280  3               	rts
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Switch off shrapnel
001280  3               ;----------------------------------------------------
001280  3               
001280  3               kilshr:
001280  3               	lda #128
001280  3               	ldy #0
001280  3               	sta (z80_ix),y	; switch off shrapnel.
001280  3               	rts
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Sine/cosine table
001280  3               ;----------------------------------------------------
001280  3               
001280  3               shrsin:	.word 0,1024,391,946,724,724,946,391
001280  3               	.word 1024,0,946,65144,724,64811,391,64589
001280  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
001280  3               	.word 64512,0,64589,391,64811,724,65144,946
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Create trail
001280  3               ;----------------------------------------------------
001280  3               
001280  3               trail:
001280  3               	ldy #1
001280  3               	lda (z80_ix),y 	; time remaining.
001280  3               	sec
001280  3               	sbc #1
001280  3               	sta (z80_ix),y
001280  3               	bne :+
001280  3               	jmp trailk		; time to switch it off.
001280  3               :
001280  3               	jsr qrand		; get a random number.
001280  3               	lsr a 			; x or y axis?
001280  3               	bcc :+
001280  3               	jmp trailv		; use y.
001280  3               :
001280  3               ; Trail horizontal
001280  3               
001280  3               	lsr a 			; which direction?
001280  3               	bcc :+
001280  3               	jmp traill		; go left.
001280  3               :
001280  3               ; Trail right
001280  3               
001280  3               	ldy #5
001280  3               	lda (z80_ix),y
001280  3               	clc
001280  3               	adc #1	 		; go right.
001280  3               	sta (z80_ix),y
001280  3               	rts
001280  3               
001280  3               ; Trail left
001280  3               
001280  3               traill:
001280  3               	ldy #5
001280  3               	lda (z80_ix),y
001280  3               	sec
001280  3               	sbc #1 			; go left.
001280  3               	sta (z80_ix),y
001280  3               	rts
001280  3               
001280  3               ; Trail vertical
001280  3               
001280  3               trailv:
001280  3               	lsr a		 	; which direction?
001280  3               	bcc :+
001280  3               	jmp trailu		; go up.
001280  3               :
001280  3               ; Trail down
001280  3               
001280  3               	ldy #3
001280  3               	lda (z80_ix),y
001280  3               	clc
001280  3               	adc #1 			; go down.
001280  3               	sta (z80_ix),y
001280  3               	rts
001280  3               
001280  3               ; Trail up
001280  3               
001280  3               trailu:
001280  3               	ldy #3
001280  3               	lda (z80_ix),y
001280  3               	sec
001280  3               	sbc #1 			; go up.
001280  3               	sta (z80_ix),y
001280  3               	rts
001280  3               
001280  3               ; Kill trail
001280  3               
001280  3               trailk:
001280  3               	lda #200		; set off-screen to kill vapour trail.
001280  3               	ldy #3
001280  3               	sta (z80_ix),y
001280  3               	rts
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Create laser beam
001280  3               ;----------------------------------------------------
001280  3               
001280  3               laser:
001280  3               	ldy #1
001280  3               	lda (z80_ix),y 		; direction.
001280  3               	ror a 			; left or right?
001280  3               	bcs :+
001280  3               	jmp laserl		; move left.
001280  3               :
001280  3               ; Laser right
001280  3               
001280  3               	lda #8			; distance to travel.
001280  3               	sta z80_b
001280  3               	jmp laserm		; move laser.
001280  3               
001280  3               ; Laser left
001280  3               
001280  3               laserl:
001280  3               	lda #248		; distance to travel.
001280  3               	sta z80_b
001280  3               laserm:
001280  3               	ldy #5
001280  3               	lda (z80_ix),y		; x position.
001280  3               	clc
001280  3               	adc z80_b		; add distance.
001280  3               	sta (z80_ix),y		; set new x coordinate.
001280  3               
001280  3               ; Test new block.
001280  3               
001280  3               	sta dispx 		; set x for block collision detection purposes.
001280  3               	ldy #3
001280  3               	lda (z80_ix),y 		; get y.
001280  3               	sta dispy		; set coordinate for collision test.
001280  3               	jsr tstbl 		; get block type there.
001280  3               	cmp #WALL		; is it solid?
001280  3               	bne :+
001280  3               	jmp trailk		; yes, it cannot pass.
001280  3               :
001280  3               	rts
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Dots mask
001280  3               ;----------------------------------------------------
001280  3               
001280  3               dots:	.byte 128,64,32,16,8,4,2,1
001280  3               
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Plot, preserving de.
001280  3               ;----------------------------------------------------
001280  3               
001280  3               plotde:
001280  3               	lda z80_d 		; put de on stack.
001280  3               	pha
001280  3               	lda z80_e
001280  3               	pha
001280  3               
001280  3               	jsr plot 		; plot pixel.
001280  3               
001280  3               	pla			; restore de from stack.
001280  3               	sta z80_e
001280  3               	pla
001280  3               	sta z80_d
001280  3               
001280  3               	rts
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Shoot a laser.
001280  3               ;----------------------------------------------------
001280  3               
001280  3               shoot:
001280  3               	sta z80_c		; store direction in c register.
001280  3               	ldy #8
001280  3               	lda (z80_ix),y 		; y coordinate.
001280  3               shoot1:
001280  3               	clc
001280  3               	adc #7 			; down 7 pixels.
001280  3               	sta z80_l 		; puty y coordinate in l.
001280  3               
001280  3               	ldy #9
001280  3               	lda (z80_ix),y 		; x coordinate in h.
001280  3               	sta z80_h
001280  3               
001280  3               	lda z80_i		; store pointer to sprite.
001280  3               	pha
001280  3               	lda z80_x
001280  3               	pha
001280  3               
001280  3               	jsr fpslot 		; find particle slot.
001280  3               	bcs :+
001280  3               	jmp vapou2		; failed, restore ix.
001280  3               :
001280  3               	lda #0
001280  3               	ldy #0
001280  3               	sta (z80_ix),y 		; set up a laser.
001280  3               
001280  3               	lda z80_c
001280  3               	ldy #1
001280  3               	sta (z80_ix),y 		; set the direction.
001280  3               
001280  3               	lda z80_l
001280  3               	ldy #3
001280  3               	sta (z80_ix),y		; set y coordinate.
001280  3               
001280  3               	ror z80_c		; check direction we want.
001280  3               	bcc :+
001280  3               	jmp shootr		; shoot right.
001280  3               :
001280  3               	lda z80_h		; X position.
001280  3               shoot0:
001280  3               	and #248		; align on character boundary.
001280  3               	ldy #5
001280  3               	sta (z80_ix),y		; set x coordinate.
001280  3               	jmp vapou0 		; draw first image.
001280  3               shootr:
001280  3               	lda z80_h		; x position.
001280  3               	clc
001280  3               	adc #15			; look right.
001280  3               	jmp shoot0		; align and continue.
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Create a bit of vapour trail.
001280  3               ;----------------------------------------------------
001280  3               
001280  3               vapour:
001280  3               	lda z80_i		; store pointer to sprite.
001280  3               	pha
001280  3               	lda z80_x
001280  3               	pha
001280  3               
001280  3               	ldy #8
001280  3               	lda (z80_ix),y 		; y coordinate.
001280  3               	clc
001280  3               	adc #7			; mid-point of sprite.
001280  3               	sta z80_l
001280  3               
001280  3               	ldy #9
001280  3               	lda (z80_ix),y 		; x coordinate.
001280  3               	adc #7
001280  3               	sta z80_h
001280  3               
001280  3               	jsr fpslot 		; find particle slot.
001280  3               	bcc :+
001280  3               	jmp vapou1		; no, we can use it.
001280  3               :
001280  3               vapou2:
001280  3               	pla
001280  3               	sta z80_x
001280  3               	pla
001280  3               	sta z80_i
001280  3               	rts
001280  3               vapou1:
001280  3               	lda z80_l
001280  3               	ldy #3
001280  3               	sta (z80_ix),y		; set up y.
001280  3               
001280  3               	lda z80_h
001280  3               	ldy #5
001280  3               	sta (z80_ix),y 		; set up x coordinate.
001280  3               
001280  3               	jsr qrand		; get quick random number.
001280  3               	and #15			; random time.
001280  3               	clc
001280  3               	adc #15			; minimum time on screen.
001280  3               	ldy #1
001280  3               	sta (z80_ix),y		; set time on screen.
001280  3               
001280  3               	lda #1
001280  3               	ldy #0
001280  3               	sta (z80_ix),y		; define particle as vapour trail.
001280  3               vapou0:
001280  3               	jsr chkxy		; plot first position.
001280  3               	jmp vapou2
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Create a user particle.
001280  3               ;----------------------------------------------------
001280  3               
001280  3               ptusr:
001280  3               	sta z80_f		; store timer.
001280  3               
001280  3               	ldy #8
001280  3               	lda (z80_ix),y 		; y coordinate.
001280  3               	clc
001280  3               	adc #7			; mid-point of sprite.
001280  3               	sta z80_l
001280  3               
001280  3               	ldy #9
001280  3               	lda (z80_ix),y 		; x coordinate.
001280  3               	clc
001280  3               	adc #7			; mid-point of sprite.
001280  3               	sta z80_h
001280  3               
001280  3               	jsr fpslot 		; find particle slot.
001280  3               	bcs ptusr1
001280  3               	rts 			; out of slots, can't generate anything.
001280  3               ptusr1:
001280  3               	lda z80_l
001280  3               	ldy #3
001280  3               	sta (z80_ix),y 		; set up y.
001280  3               
001280  3               	lda z80_h
001280  3               	ldy #5
001280  3               	sta (z80_ix),y		; set up x coordinate.
001280  3               
001280  3               	lda z80_f 		; restore timer.
001280  3               	ldy #1
001280  3               	sta (z80_ix),y		; set time on screen.
001280  3               
001280  3               	lda #7
001280  3               	ldy #0
001280  3               	sta (z80_ix),y		; define particle as user particle.
001280  3               
001280  3               	jmp chkxy		; plot first position.
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Create a vertical or horizontal star.
001280  3               ;----------------------------------------------------
001280  3               
001280  3               star:
001280  3               	lda z80_i		; store pointer to sprite.
001280  3               	pha
001280  3               	lda z80_x
001280  3               	pha
001280  3               
001280  3               	jsr fpslot 		; find particle slot.
001280  3               	bcs star7		; found one we can use.
001280  3               star0:
001280  3               	pla 			; restore sprite pointer.
001280  3               	sta z80_x
001280  3               	pla
001280  3               	sta z80_i
001280  3               	rts 			; out of slots, can't generate anything.
001280  3               star7:
001280  3               	lda z80_c		; direction.
001280  3               	and #3 			; is it left?
001280  3               	bne :+
001280  3               	jmp star1 		; yes, it's left.
001280  3               :
001280  3               	cmp #1 			; is it right?
001280  3               	bne :+
001280  3               	jmp star2 		; yes, it's right.
001280  3               :
001280  3               	cmp #2 			; is it up?
001280  3               	bne :+
001280  3               	jmp star3 		; yes, it's up.
001280  3               :
001280  3               	ldy wntopx 		; get edge of screen.
001280  3               	iny			; down one pixel.
001280  3               	tya
001280  3               star8:
001280  3               	ldy #3
001280  3               	sta (z80_ix),y 		; set y coord.
001280  3               	jsr qrand 		; get quick random number.
001280  3               star9:
001280  3               	ldy #5
001280  3               	sta (z80_ix),y		; set x position.
001280  3               
001280  3               	lda z80_c		; direction.
001280  3               	and #3			; zero to three.
001280  3               	clc
001280  3               	adc #3			; 3 to 6 for starfield.
001280  3               	ldy #0
001280  3               	sta (z80_ix),y		; define particle as star.
001280  3               	jsr chkxy		; plot first position.
001280  3               	jmp star0
001280  3               star1:
001280  3               	jsr qrand		; get quick random number.
001280  3               	ldy #3
001280  3               	sta (z80_ix),y 		; set y coord.
001280  3               
001280  3               	lda wnrgtx 		; get edge of screen.
001280  3               	clc
001280  3               	adc #15			; add width of sprite minus 1.
001280  3               	jmp star9
001280  3               star2:
001280  3               	jsr qrand 		; get quick random number.
001280  3               	ldy #3
001280  3               	sta (z80_ix),y		; set y coord.
001280  3               
001280  3               	lda wnlftx		; get edge of screen.
001280  3               	jmp star9
001280  3               star3:
001280  3               	lda wnbotx 		; get edge of screen.
001280  3               	clc
001280  3               	adc #15 		; height of sprite minus one pixel.
001280  3               	jmp star8
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Find particle slot for lasers or vapour trail.
001280  3               ; can't use alternate accumulator.
001280  3               ;----------------------------------------------------
001280  3               
001280  3               fpslot:
001280  3               	lda #<SHRAPN 		; shrapnel table.
001280  3               	sta z80_x
001280  3               	lda #>SHRAPN
001280  3               	sta z80_i
001280  3               
001280  3               	lda #NUMSHR		; number of pieces in table.
001280  3               	sta z80_b
001280  3               fpslt0:
001280  3               	ldy #0
001280  3               	lda (z80_ix),y		; get type.
001280  3               	asl a  			; is this slot in use?
001280  3               	bcc :+
001280  3               	rts			; no, we can use it.
001280  3               :
001280  3               	clc			; point to more shrapnel.
001280  3               	lda z80_x
001280  3               	adc #SHRSIZ
001280  3               	sta z80_x
001280  3               	bcc :+
001280  3               	inc z80_i
001280  3               :
001280  3               	dec z80_b		; repeat for all shrapnel.
001280  3               	bne fpslt0
001280  3               
001280  3               	clc
001280  3               	rts 			; out of slots, can't generate anything.
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Create an explosion at sprite position.
001280  3               ;----------------------------------------------------
001280  3               
001280  3               explod:
001280  3               	sta z80_c 		; particles to create.
001280  3               
001280  3               	lda z80_i 		; store pointer to sprite.
001280  3               	pha
001280  3               	lda z80_x
001280  3               	pha
001280  3               
001280  3               	ldy #8
001280  3               	lda (z80_ix),y 		; y coordinate.
001280  3               	sta z80_l
001280  3               	ldy #9
001280  3               	lda (z80_ix),y		; x coordinate.
001280  3               	sta z80_h
001280  3               
001280  3               	lda #<SHRAPN		; shrapnel table.
001280  3               	sta z80_x
001280  3               	lda #>SHRAPN
001280  3               	sta z80_i
001280  3               
001280  3               	lda #NUMSHR		; number of pieces in table.
001280  3               	sta explcnt
001280  3               expld0:
001280  3               	ldy #0
001280  3               	lda (z80_ix),y		; get type.
001280  3               	asl a 			; is this slot in use?
001280  3               	bcs expld1		; no, we can use it.
001280  3               expld2:
001280  3               	clc
001280  3               	lda z80_x
001280  3               	adc #SHRSIZ
001280  3               	sta z80_x
001280  3               	bcc :+
001280  3               	inc z80_i
001280  3               :
001280  3               	dec explcnt		; repeat for all shrapnel.
001280  3               	bne expld0
001280  3               expld3:
001280  3               	pla			; restore sprite pointer.
001280  3               	sta z80_x
001280  3               	pla
001280  3               	sta z80_i
001280  3               	rts 			; out of slots, can't generate any more.
001280  3               
001280  3               expld1:
001280  3               	lda z80_c		; shrapnel counter.
001280  3               	and #15			; 0 to 15.
001280  3               	clc			; add to x.
001280  3               	adc z80_l
001280  3               	ldy #3
001280  3               	sta (z80_ix),y		; y coord.
001280  3               
001280  3               	lda seed3 		; crap random number.
001280  3               	and #15			; 0 to 15.
001280  3               	clc 			; add to y.
001280  3               	adc z80_h
001280  3               	ldy #5
001280  3               	sta (z80_ix),y		; x coord.
001280  3               
001280  3               	lda #2
001280  3               	ldy #0
001280  3               	sta (z80_ix),y		; switch it on.
001280  3               
001280  3               	jsr chkxy		; plot first position.
001280  3               	jsr qrand		; quick random angle.
001280  3               	and #60 		; keep within range.
001280  3               	ldy #1
001280  3               	sta (z80_ix),y		; angle.
001280  3               
001280  3               	dec z80_c		; one less piece of shrapnel to generate.
001280  3               	bne expld2 		; back to main explosion loop.
001280  3               	jmp expld3 		; restore sprite pointer and exit.
001280  3               
001280  3               explcnt:	.byte 0
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Quick random
001280  3               ;----------------------------------------------------
001280  3               
001280  3               qrand:
001280  3               	jsr random		; r register.
001280  3               	eor seed3		; combine with seed.
001280  3               	sta seed3 		; new seed.
001280  3               	rts
001280  3               
001280  3               seed3:	.byte 0
001280  3               
001280  3               ;----------------------------------------------------
001280  3               ; Display all shrapnel.
001280  3               ;----------------------------------------------------
001280  3               
001280  3               dshrp:
001280  3               	lda #<plotde		; display routine.
001280  3               	sta proshx+1
001280  3               	lda #>plotde
001280  3               	sta proshx+2
001280  3               	jsr proshr		; process shrapnel.
001280  3               
001280  3               	lda #<prosh1		; processing routine.
001280  3               	sta proshx+1
001280  3               	lda #>prosh1
001280  3               	sta proshx+2
001280  3               	rts
001280  3               
001280  3               ;------------------------------------------------------
001280  3               ; Particle engine.
001280  3               ;
001280  3               ; Init particle data for 55 particles in SHRAPN table.
001280  3               ; Every particle has 6 bytes.
001280  3               ;
001280  3               ; global:	-
001280  3               ; local:	x,y,hl
001280  3               ; calls:	-
001280  3               ;------------------------------------------------------
001280  3               
001280  3               inishr:
001280  3               	lda #<SHRAPN 		; table.
001280  3               	sta z80_l
001280  3               	lda #>SHRAPN
001280  3               	sta z80_h
001280  3               
001280  3               	ldy #0
001280  3               	ldx #NUMSHR		; shrapnel pieces to process.
001280  3               inish0:
001280  3               	lda #255 		; kill the shrapnel.
001280  3               	sta (z80_hl),y
001280  3               
001280  3               	clc 			; point there.
001280  3               	lda z80_l
001280  3               	adc #SHRSIZ		; distance to next.
001280  3               	sta z80_l
001280  3               	bcc :+
001280  3               	inc z80_h
001280  3               :
001280  3               	dex
001280  3               	bne inish0 		; round again.
001280  3               	rts
001280  3               
001280  3               ;------------------------------------------------------
001280  3               ; Check for collision between laser and sprite.
001280  3               ;------------------------------------------------------
001280  3               
001280  3               lcol:
001280  3               	lda #<SHRAPN		; shrapnel table.
001280  3               	sta z80_l
001280  3               	lda #>SHRAPN
001280  3               	sta z80_h
001280  3               
001280  3               	lda #NUMSHR		; number of pieces in table.
001280  3               	sta z80_b
001280  3               lcol0:
001280  3               	ldy #0
001280  3               	lda (z80_hl),y 		; get type.
001280  3               	beq lcol1		; yes, check collision.
001280  3               lcol3:
001280  3               	clc			; point to more shrapnel.
001280  3               	lda z80_l
001280  3               	adc #SHRSIZ
001280  3               	sta z80_l
001280  3               	bcc :+
001280  3               	inc z80_h
001280  3               :
001280  3               	dec z80_b		; repeat for all shrapnel.
001280  3               	bne lcol0
001280  3               	rts 			; no collision, carry not set.
001280  3               lcol1:
001280  3               	ldy #3
001280  3               	lda (z80_hl),y		; get y.
001280  3               	sec
001280  3               	ldy #8
001280  3               	sbc (z80_ix),y		; subtract sprite y.
001280  3               lcolh:
001280  3               	cmp #16 		; within range?
001280  3               	bcc :+
001280  3               	jmp lcol2		; no, missed.
001280  3               :
001280  3               	ldy #5
001280  3               	lda (z80_hl),y 		; get x.
001280  3               	sec
001280  3               	ldy #9
001280  3               	sbc (z80_ix),y 		; subtract sprite y.
001280  3               	cmp #16			; within range?
001280  3               	bcs :+
001280  3               	jmp lcol4 		; yes, collision occurred.
001280  3               :
001280  3               lcol2:
001280  3               	jmp lcol3
001280  3               lcol4:
001280  3               	sec
001280  3               	rts 			; return with carry set for collision.
001280  3               .endif
001280  3               
001280  3               ;------------------------------------------------------
001280  3               ; Main game engine code starts here.
001280  3               ; After initialisation, mloop is the main loop
001280  3               ;------------------------------------------------------
001280  3               
001280  3               game:
001280  3               
001280  3               ; Set up screen address table.
001280  3               
001280  3               setsat:
001280  3  A9 00        	lda #<ScreenAddr		; start of screen.
001282  3  85 80        	sta scraddr
001284  3  A9 58        	lda #>ScreenAddr
001286  3  85 81        	sta scraddr+1
001288  3               
001288  3  A0 00        	ldy #0			; vertical lines on screen.
00128A  3               setsa0:
00128A  3  A5 80        	lda scraddr
00128C  3  99 2D 29     	sta SCADTB_lb,y		; write low byte.
00128F  3  A5 81        	lda scraddr+1
001291  3  99 2D 2A     	sta SCADTB_hb,y		; write high byte.
001294  3  20 E5 20     	jsr nline		; next line down.
001297  3  C8           	iny			; next position in table.
001298  3  D0 F0        	bne setsa0
00129A  3               	
00129A  3               ; Init graphics mode
00129A  3               
00129A  3  A9 16        	lda #22
00129C  3  20 EE FF     	jsr OSWRCH		; _BEEB screen select VDU command
00129F  3  A9 04        	lda #ScrMode	; graphics mode
0012A1  3  20 EE FF     	jsr OSWRCH		; _BEEB screen mode
0012A4  3  20 38 12     	jsr setpal 		; set up palette.
0012A7  3               
0012A7  3               ; Init AtoMMC joystick
0012A7  3  20 D2 1C     	jsr joyinit		; AtoMMC joystick on PORT B
0012AA  3               
0012AA  3               rpblc2:
0012AA  3               .if pflag
0012AA  3               	jsr inishr 		; initialise particle engine.
0012AA  3               .endif
0012AA  3               evintr:
0012AA  3  20 62 2F     	jsr evnt12 		; call intro/menu event.
0012AD  3               
0012AD  3  A9 02        	lda #WALL 		; write default property.
0012AF  3  A2 00        	ldx #0
0012B1  3               clrmap:
0012B1  3  9D 2D 26     	sta MAP,x 		; block properties.
0012B4  3  9D 2D 27     	sta MAP+256,x
0012B7  3  9D 2D 28     	sta MAP+512,x
0012BA  3  E8           	inx			; next byte.
0012BB  3  D0 F4        	bne clrmap
0012BD  3               
0012BD  3  20 88 11     	jsr iniob 		; initialise objects.
0012C0  3               
0012C0  3  A9 00        	lda #0			; put zero in accumulator.
0012C2  3  8D 4A 11     	sta gamwon		; reset game won flag.
0012C5  3               
0012C5  3  20 24 14     	jsr inisc 		; init the score.
0012C8  3               mapst:
0012C8  3  AD 87 2C     	lda stmap 		; start position on map.
0012CB  3  8D 2B 26     	sta roomtb		; set up position in table, if there is one.
0012CE  3               
0012CE  3               inipbl:
0012CE  3  20 06 22     	jsr initsc 		; set up first screen.
0012D1  3               
0012D1  3  A9 1A        	lda #<ssprit 		; default to spare sprite in table.
0012D3  3  85 68        	sta z80_x
0012D5  3  A9 26        	lda #>ssprit
0012D7  3  85 69        	sta z80_i
0012D9  3               evini:
0012D9  3  20 63 2F     	jsr evnt13 		; initialisation.
0012DC  3               
0012DC  3               ; Two restarts.
0012DC  3               ; First restart - clear all sprites and initialise everything.
0012DC  3               
0012DC  3               rstrt:
0012DC  3  20 D1 13     	jsr rsevt 		; restart events.
0012DF  3  20 7B 11     	jsr xspr 		; clear sprite table.
0012E2  3  20 6C 23     	jsr sprlst 		; fetch pointer to screen sprites.
0012E5  3  20 FA 23     	jsr ispr 		; initialise sprite table.
0012E8  3               
0012E8  3  4C F7 12     	jmp rstrt0
0012EB  3               
0012EB  3               ; Second restart - clear all but player, and don't initialise him.
0012EB  3               
0012EB  3               rstrtn:
0012EB  3  20 D1 13     	jsr rsevt		; restart events.
0012EE  3  20 9A 23     	jsr nspr 		; clear all non-player sprites.
0012F1  3  20 6C 23     	jsr sprlst 		; fetch pointer to screen sprites.
0012F4  3  20 3A 24     	jsr kspr 		; initialise sprite table, no more players.
0012F7  3               
0012F7  3               ; Set up the player and/or enemy sprites.
0012F7  3               
0012F7  3               rstrt0:
0012F7  3  A9 00        	lda #0 			; zero in accumulator.
0012F9  3  8D 47 11     	sta nexlev 		; reset next level flag.
0012FC  3  8D 48 11     	sta restfl 		; reset restart flag.
0012FF  3  8D 49 11     	sta deadf 		; reset dead flag.
001302  3  20 6B 19     	jsr droom 		; show screen layout.
001305  3               rpblc0:
001305  3               .if pflag
001305  3               	jsr inishr 		; initialise particle engine.
001305  3               .endif
001305  3  20 74 14     	jsr shwob		; draw objects.
001308  3               
001308  3  A9 4E        	lda #<sprtab 		; address of sprite table, even sprites.
00130A  3  85 68        	sta z80_x
00130C  3  A9 25        	lda #>sprtab
00130E  3  85 69        	sta z80_i
001310  3  20 3E 1F     	jsr dspr 		; display sprites.
001313  3               
001313  3  A9 5F        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
001315  3  85 68        	sta z80_x
001317  3  A9 25        	lda #>(sprtab+TABSIZ)
001319  3  85 69        	sta z80_i
00131B  3  20 3E 1F     	jsr dspr 		; display sprites.
00131E  3               mloop:
00131E  3  20 BA 11     	jsr vsync 		; synchronise with display.
001321  3               
001321  3  A9 4E        	lda #<sprtab 		; address of sprite table, even sprites.
001323  3  85 68        	sta z80_x
001325  3  A9 25        	lda #>sprtab
001327  3  85 69        	sta z80_i
001329  3  20 3E 1F     	jsr dspr 		; display even sprites.
00132C  3               
00132C  3  20 73 14     	jsr plsnd 		; play sounds.
00132F  3               
00132F  3  A9 5F        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
001331  3  85 68        	sta z80_x
001333  3  A9 25        	lda #>(sprtab+TABSIZ)
001335  3  85 69        	sta z80_i
001337  3  20 3E 1F     	jsr dspr 		; display odd sprites.
00133A  3               
00133A  3  A9 1A        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
00133C  3  85 68        	sta z80_x
00133E  3  A9 26        	lda #>(ssprit)
001340  3  85 69        	sta z80_i
001342  3               evlp1:
001342  3  20 59 2E     	jsr evnt10 		; called once per main loop.
001345  3  20 B3 1E     	jsr pspr 		; process sprites.
001348  3               
001348  3               ; Main loop events.
001348  3               
001348  3  A9 1A        	lda #<ssprit 		; point to spare sprite for spawning purposes.
00134A  3  85 68        	sta z80_x
00134C  3  A9 26        	lda #>ssprit
00134E  3  85 69        	sta z80_i
001350  3               evlp2:
001350  3  20 61 2F     	jsr evnt11 		; called once per main loop.
001353  3               bsortx:
001353  3  20 26 1E     	jsr bsort 		; sort sprites.
001356  3               
001356  3  AD 47 11     	lda nexlev		; finished level flag.
001359  3  D0 21        	bne newlev		; is set, go to next level.
00135B  3  AD 4A 11     	lda gamwon		; finished game flag.
00135E  3  D0 2D        	bne evwon		; is set, finish the game.
001360  3  AD 48 11     	lda restfl 		; finished level flag.
001363  3  C9 01        	cmp #1			; has it been set?
001365  3  D0 03        	bne :+
001367  3  4C DC 12     	jmp rstrt		; yes, go to next level.
00136A  3               :
00136A  3  C9 02        	cmp #2			; has it been set?
00136C  3  D0 03        	bne :+
00136E  3  4C EB 12     	jmp rstrtn		; yes, go to next level.
001371  3               :
001371  3  AD 49 11     	lda deadf 		; dead flag.
001374  3  D0 1D        	bne pdead		; yes, player dead.
001376  3               
001376  3               ; back to start of main loop.
001376  3               
001376  3  EE 42 11     	inc clock
001379  3  4C 1E 13     	jmp mloop		; switched to a jmp mloop during test mode.
00137C  3               
00137C  3               ;----------------------------------------------------------
00137C  3               ; New level
00137C  3               ;----------------------------------------------------------
00137C  3               
00137C  3               newlev:
00137C  3  AD 26 11     	lda scno 			; current screen.
00137F  3  18           	clc
001380  3  69 01        	adc #1				; next screen.
001382  3  CD EF 34     	cmp numsc			; total number of screens.
001385  3  B0 06        	bcs evwon			; yes, game finished.
001387  3  8D 26 11     	sta scno			; set new level number.
00138A  3  4C DC 12     	jmp rstrt			; restart, clearing all aliens.
00138D  3               
00138D  3               evwon:
00138D  3  20 E4 2F     	jsr evnt18		 	; game completed.
001390  3  4C A6 13     	jmp tidyup			; tidy up and return to BASIC/calling routine.
001393  3               
001393  3               ;----------------------------------------------------------
001393  3               ; Player dead.
001393  3               ;----------------------------------------------------------
001393  3               
001393  3               pdead:
001393  3  A9 00        	lda #0				; zeroise accumulator.
001395  3  8D 49 11     	sta deadf			; reset dead flag.
001398  3               evdie:
001398  3  20 AB 2F     	jsr evnt16 			; death subroutine.
00139B  3  AD 27 11     	lda numlif			; number of lives.
00139E  3  F0 03        	beq :+
0013A0  3  4C DC 12     	jmp rstrt 			; restart game.
0013A3  3               :
0013A3  3               evfail:
0013A3  3  20 B5 2F     	jsr evnt17 			; failure event.
0013A6  3               
0013A6  3               ;----------------------------------------------------------
0013A6  3               ; Tidy things up
0013A6  3               ;----------------------------------------------------------
0013A6  3               
0013A6  3               tidyup:
0013A6  3  A0 00        	ldy #0				; digits to check.
0013A8  3               tidyu2:
0013A8  3  B9 4D 16     	lda score,y 			; get score digit.
0013AB  3  CD 53 16     	cmp hiscor 			; are we larger than high score digit?
0013AE  3  90 07        	bcc tidyu0			; high score is bigger.
0013B0  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0013B2  3  C8           	iny				; next digit of high score.
0013B3  3  C0 06        	cpy #6
0013B5  3  D0 F1        	bne tidyu2			; repeat for all digits
0013B7  3               tidyu0:
0013B7  3  A9 4D        	lda #<score			; return pointing to score.
0013B9  3  85 62        	sta z80_c
0013BB  3  A9 16        	lda #>score
0013BD  3  85 63        	sta z80_b
0013BF  3  60           	rts
0013C0  3               tidyu1:
0013C0  3  A0 05        	ldy #5
0013C2  3               tidyu3:
0013C2  3  B9 4D 16     	lda score,y			; score.
0013C5  3  99 53 16     	sta hiscor,y			; high score.
0013C8  3  88           	dey
0013C9  3  10 F7        	bpl tidyu3 			; copy score to high score.
0013CB  3               evnewh:
0013CB  3  20 E5 2F     	jsr evnt19			; new high score event.
0013CE  3  4C B7 13     	jmp tidyu0			; tidy up.
0013D1  3               
0013D1  3               ;--------------------------------------------------
0013D1  3               ; Restart event.
0013D1  3               ;--------------------------------------------------
0013D1  3               
0013D1  3               rsevt:
0013D1  3  A9 1A        	lda #<ssprit 			; default to spare element in table.
0013D3  3  85 68        	sta z80_x
0013D5  3  A9 26        	lda #>ssprit
0013D7  3  85 69        	sta z80_i
0013D9  3               evrs:
0013D9  3  4C 64 2F     	jmp evnt14	 		; call restart event.
0013DC  3               
0013DC  3               ;------------------------------------------------------------------
0013DC  3               ; Copy number passed in a to string position bc, right-justified.
0013DC  3               ;
0013DC  3               ; Input:
0013DC  3               ;  A  = number
0013DC  3               ;  BC = string address
0013DC  3               ;
0013DC  3               ; Output:
0013DC  3               ;  BC = string with number
0013DC  3               ;-----------------------------------------------------------------
0013DC  3               
0013DC  3               num2ch:
0013DC  3  85 65        	sta z80_d		; Save number
0013DE  3               
0013DE  3  A9 00        	lda #0
0013E0  3  8D 23 14     	sta flag
0013E3  3               
0013E3  3  A2 64        	ldx #100		; hundreds column.
0013E5  3  86 64        	stx z80_e
0013E7  3  20 F8 13     	jsr numdg		; show digit.
0013EA  3               
0013EA  3  A2 0A        	ldx #10			; tens column.
0013EC  3  86 64        	stx z80_e
0013EE  3  20 F8 13     	jsr numdg		; show digit.
0013F1  3               
0013F1  3  EE 23 14     	inc flag
0013F4  3  A2 01        	ldx #1			; units column.
0013F6  3  86 64        	stx z80_e
0013F8  3               numdg:
0013F8  3  A9 30        	lda #48			; clear digit.
0013FA  3  85 61        	sta z80_a
0013FC  3               numdg1:
0013FC  3  A5 65        	lda z80_d
0013FE  3  C5 64        	cmp z80_e
001400  3  90 0F        	bcc numdg0		; nothing to show.
001402  3  38           	sec
001403  3  A5 65        	lda z80_d
001405  3  E5 64        	sbc z80_e		; subtract from column.
001407  3  85 65        	sta z80_d
001409  3  E6 61        	inc z80_a		; increment digit.
00140B  3  EE 23 14     	inc flag
00140E  3  4C FC 13     	jmp numdg1		; repeat until column is zero.
001411  3               numdg0:
001411  3  A0 00        	ldy #0
001413  3  A5 61        	lda z80_a
001415  3  91 62        	sta (z80_bc),y		; write digit to buffer.
001417  3  AD 23 14     	lda flag
00141A  3  F0 06        	beq :+
00141C  3  E6 62        	inc z80_c		; next buffer position.
00141E  3  D0 02        	bne :+
001420  3  E6 63        	inc z80_b
001422  3               :
001422  3  60           	rts
001423  3               
001423  3  00           flag:	.byte 0
001424  3               
001424  3               ;---------------------------------------------------------
001424  3               ; Reset score to "000000"
001424  3               ;---------------------------------------------------------
001424  3               
001424  3               inisc:
001424  3  A9 30        	lda #'0'
001426  3  A2 05        	ldx #5			; digits to initialise.
001428  3               inisc0:
001428  3  9D 4D 16     	sta score,x 		; write zero digit.
00142B  3  CA           	dex			; next column.
00142C  3  10 FA        	bpl inisc0		; repeat for all digits.
00142E  3               
00142E  3  60           	rts
00142F  3               
00142F  3               ;-----------------------------------------------------
00142F  3               ; Multiply h by d and return in hl.
00142F  3               ;
00142F  3               ; Input:
00142F  3               ;  H = first number
00142F  3               ;  D = second number
00142F  3               ;
00142F  3               ; Output:
00142F  3               ;  HL = result H x D
00142F  3               ;-----------------------------------------------------
00142F  3               
00142F  3               imul:
00142F  3  A5 65        	lda z80_d		; HL = H * D
001431  3  85 64        	sta z80_e
001433  3  A5 67        	lda z80_h
001435  3  85 62        	sta z80_c		; make c first multiplier.
001437  3               imul0:
001437  3  A9 00        	lda #0			; zeroise total.
001439  3  85 66        	sta z80_l
00143B  3  85 67        	sta z80_h
00143D  3               
00143D  3  A5 67        	lda z80_h
00143F  3  85 65        	sta z80_d		; zeroise high byte.
001441  3               
001441  3  A9 08        	lda #8			; repeat 8 times.
001443  3  85 63        	sta z80_b
001445  3               imul1:
001445  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
001447  3  90 0E        	bcc imul2		; wasn't set.
001449  3  18           	clc			; bit was set, so add de.
00144A  3  A5 66        	lda z80_l
00144C  3  65 64        	adc z80_e
00144E  3  85 66        	sta z80_l
001450  3  A5 67        	lda z80_h
001452  3  65 65        	adc z80_d
001454  3  85 67        	sta z80_h
001456  3  18           	clc 			; reset carry.
001457  3               imul2:
001457  3  06 64        	asl z80_e 		; shift de 1 bit left.
001459  3  26 65        	rol z80_d
00145B  3  C6 63        	dec z80_b
00145D  3  D0 E6        	bne imul1		; repeat 8 times.
00145F  3               
00145F  3  60           	rts
001460  3               
001460  3               ;-----------------------------------------------
001460  3               ; Divide d by e and return in d, remainder in a.
001460  3               ;
001460  3               ; Input:
001460  3               ;  D = first number
001460  3               ;  E = second number
001460  3               ;
001460  3               ; Output:
001460  3               ;  D = result D/E
001460  3               ;  A = remainder
001460  3               ;-----------------------------------------------
001460  3               
001460  3               idiv:
001460  3  A9 00        	lda #0
001462  3  A0 08        	ldy #8		 	; bits to shift.
001464  3  06 65        	asl z80_d
001466  3               idiv0:
001466  3  2A           	rol a 			; multiply d by 2.
001467  3  C5 64        	cmp z80_e 		; test if e is smaller.
001469  3  90 02        	bcc idiv1		; e is greater, no division this time.
00146B  3  E5 64        	sbc z80_e		; subtract it.
00146D  3               idiv1:
00146D  3  26 65        	rol z80_d		; rotate into d.
00146F  3  88           	dey
001470  3  D0 F4        	bne idiv0		; repeat
001472  3  60           	rts
001473  3               
001473  3               ;---------------------------------------------------
001473  3               ; Play AY sound effect
001473  3               ;---------------------------------------------------
001473  3               
001473  3               plsnd:
001473  3  60           	rts
001474  3               
001474  3               ;---------------------------------------------------
001474  3               ; Objects handling.
001474  3               ; 32 bytes for image
001474  3               ; 3 for room, y and x
001474  3               ; 3 for starting room, y and x.
001474  3               ; 254 = disabled.
001474  3               ; 255 = object in player"s pockets.
001474  3               ;---------------------------------------------------
001474  3               
001474  3               ;---------------------------------------------------
001474  3               ; Show items present.
001474  3               ;---------------------------------------------------
001474  3               
001474  3               shwob:
001474  3  A9 F5        	lda #<objdta 			; objects table.
001476  3  85 66        	sta z80_l
001478  3  A9 34        	lda #>objdta
00147A  3  85 67        	sta z80_h
00147C  3               
00147C  3  AD 21 11     	lda numob 			; number of objects in the game.
00147F  3  8D D1 1F     	sta sprcnt
001482  3               shwob0:
001482  3  A0 20        	ldy #32 			; distance to room number.
001484  3  B1 66        	lda (z80_hl),y 			; same as an item?
001486  3  CD 26 11     	cmp scno 			; current location.
001489  3  D0 03        	bne :+
00148B  3  20 A1 14     	jsr dobj 			; yes, display object.
00148E  3               :
00148E  3  18           	clc
00148F  3  A5 66        	lda z80_l
001491  3  69 26        	adc #38 			; distance to next item.
001493  3  85 66        	sta z80_l
001495  3  A5 67        	lda z80_h
001497  3  69 00        	adc #0
001499  3  85 67        	sta z80_h	 		; point to it.
00149B  3  CE D1 1F     	dec sprcnt
00149E  3  D0 E2        	bne shwob0 			; repeat for others.
0014A0  3  60           	rts
0014A1  3               
0014A1  3               ;---------------------------------------------------
0014A1  3               ; Display object.
0014A1  3               ; hl must point to object's start address.
0014A1  3               ;
0014A1  3               ; Input:
0014A1  3               ;  HL = object address
0014A1  3               ;---------------------------------------------------
0014A1  3               
0014A1  3               dobj:
0014A1  3  A0 21        	ldy #33
0014A3  3  B1 66        	lda (z80_hl),y 			; point to y.
0014A5  3  8D 4C 11     	sta dispy
0014A8  3  C8           	iny
0014A9  3  B1 66        	lda (z80_hl),y 			; point to x.
0014AB  3  8D 4B 11     	sta dispx
0014AE  3               dobj1:
0014AE  3  4C B4 18     	jmp sprite 			; draw this sprite.
0014B1  3               
0014B1  3               ;--------------------------------------
0014B1  3               ; Remove an object.
0014B1  3               ;
0014B1  3               ; Input:
0014B1  3               ;  A = object number
0014B1  3               ;--------------------------------------
0014B1  3               
0014B1  3               remob:
0014B1  3  CD 21 11     	cmp numob			; number of objects in game.
0014B4  3  90 01        	bcc :+				; are we checking past the end?
0014B6  3  60           	rts				; yes, can't get non-existent item.
0014B7  3               :
0014B7  3  48           	pha				; remember object.
0014B8  3  20 C6 14     	jsr getob			; pick it up if we haven't already got it.
0014BB  3  68           	pla				; retrieve object number.
0014BC  3  20 F8 14     	jsr gotob			; get its address.
0014BF  3  A9 FE        	lda #254
0014C1  3  A0 20        	ldy #32
0014C3  3  91 66        	sta (z80_hl),y			; remove it.
0014C5  3  60           	rts
0014C6  3               
0014C6  3               ;---------------------------------------------------
0014C6  3               ; Pick up object number held in the accumulator.
0014C6  3               ;
0014C6  3               ; Input:
0014C6  3               ;  A = object number
0014C6  3               ;---------------------------------------------------
0014C6  3               
0014C6  3               getob:
0014C6  3  CD 21 11     	cmp numob 		; number of objects in game.
0014C9  3  90 01        	bcc :+			; are we checking past the end?
0014CB  3  60           	rts			; yes, can't get non-existent item.
0014CC  3               :
0014CC  3  20 F8 14     	jsr gotob 		; check if we already have it.
0014CF  3  C9 FF        	cmp #255
0014D1  3  D0 01        	bne :+
0014D3  3  60           	rts			; we already do.
0014D4  3               :
0014D4  3  A0 20        	ldy #32
0014D6  3  B1 66        	lda (z80_hl),y		; is it on this screen?
0014D8  3  CD 26 11     	cmp scno 		; current screen.
0014DB  3  D0 16        	bne getob0		; not on screen, so nothing to delete.
0014DD  3               
0014DD  3  A9 FF        	lda #255
0014DF  3  91 66        	sta (z80_hl),y		; pick it up.
0014E1  3  C8           	iny 			; point to y coord.
0014E2  3               getob1:
0014E2  3  A0 21        	ldy #33
0014E4  3  B1 66        	lda (z80_hl),y		; y coord.
0014E6  3  8D 4C 11     	sta dispy
0014E9  3  A0 22        	ldy #34
0014EB  3  B1 66        	lda (z80_hl),y 		; x coord.
0014ED  3  8D 4B 11     	sta dispx
0014F0  3  4C AE 14     	jmp dobj1 		; delete object sprite.
0014F3  3               getob0:
0014F3  3  A9 FF        	lda #255
0014F5  3  91 66        	sta (z80_hl),y 		; pick it up.
0014F7  3  60           	rts
0014F8  3               
0014F8  3               ;-----------------------------------------------------------------
0014F8  3               ; Got object check.
0014F8  3               ; Call with object in accumulator, returns zero set if in pockets.
0014F8  3               ;
0014F8  3               ; Input:
0014F8  3               ;  A = object number
0014F8  3               ;-----------------------------------------------------------------
0014F8  3               
0014F8  3               gotob:
0014F8  3  CD 21 11     	cmp numob 		; number of objects in game.
0014FB  3  90 03        	bcc :+ 			; are we checking past the end?
0014FD  3  4C 04 15     	jmp gotob0 		; yes, we can't have a non-existent object.
001500  3               :
001500  3  20 09 15     	jsr findob		; find the object.
001503  3               gotob1:
001503  3  60           	rts
001504  3               
001504  3               gotob0:
001504  3  A9 FE        	lda #254 		; missing.
001506  3  4C 03 15     	jmp gotob1
001509  3               
001509  3               findob:
001509  3  48           	pha			; save object number
00150A  3  A9 F5        	lda #<objdta 		; objects.
00150C  3  85 66        	sta z80_l
00150E  3  A9 34        	lda #>objdta
001510  3  85 67        	sta z80_h
001512  3  68           	pla			; retreive object number
001513  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
001515  3  AA           	tax 			; loop counter
001516  3               fndob2:
001516  3  18           	clc
001517  3  A5 66        	lda z80_l
001519  3  69 26        	adc #38 		; size of each object.
00151B  3  85 66        	sta z80_l
00151D  3  90 02        	bcc :+
00151F  3  E6 67        	inc z80_h
001521  3               :
001521  3  CA           	dex 			; repeat until we find address.
001522  3  D0 F2        	bne fndob2
001524  3               fndob1:
001524  3  A0 20        	ldy #32			; distance to room it's in.
001526  3  B1 66        	lda (z80_hl),y		; fetch status.
001528  3  60           	rts
001529  3               
001529  3               ;---------------------------------------------
001529  3               ; Drop object number at (dispx, dispy).
001529  3               ;
001529  3               ; Input:
001529  3               ;  A = object number
001529  3               ;---------------------------------------------
001529  3               
001529  3               drpob:
001529  3  CD 21 11     	cmp numob 		; are we checking past the end?
00152C  3  90 01        	bcc :+
00152E  3  60           	rts			; yes, can't drop non-existent item.
00152F  3               :
00152F  3  20 F8 14     	jsr gotob		; make sure object is in inventory.
001532  3  CD 26 11     	cmp scno		; already on this screen?
001535  3  D0 01        	bne :+
001537  3  60           	rts			; yes, nothing to do.
001538  3               :
001538  3  A0 20        	ldy #32
00153A  3  AD 26 11     	lda scno
00153D  3  91 66        	sta (z80_hl),y		; bring onto screen.
00153F  3  AD 4C 11     	lda dispy		; sprite y coordinate.
001542  3  C8           	iny 
001543  3  91 66        	sta (z80_hl),y		; point to object y.
001545  3  AD 4B 11     	lda dispx 		; sprite x coordinate.
001548  3  C8           	iny
001549  3  91 66        	sta (z80_hl),y 		; point to object x
00154B  3  4C A1 14     	jmp dobj		; draw the object sprite.
00154E  3               
00154E  3               ;-----------------------------------------------
00154E  3               ; Seek objects at sprite position.
00154E  3               ;
00154E  3               ; Output:
00154E  3               ;  A = object number, if not found A=255
00154E  3               ;-----------------------------------------------
00154E  3               
00154E  3               skobj:
00154E  3  A9 F5        	lda #<objdta 		; pointer to objects.
001550  3  85 66        	sta z80_l
001552  3  A9 34        	lda #>objdta
001554  3  85 67        	sta z80_h
001556  3               
001556  3  AD 21 11     	lda numob 		; number of objects in game.
001559  3  85 63        	sta z80_b 		; set up the loop counter.
00155B  3               skobj0:
00155B  3  AD 26 11     	lda scno		; current room number.
00155E  3  A0 20        	ldy #32
001560  3  D1 66        	cmp (z80_hl),y		; is object in here?
001562  3  D0 03        	bne :+
001564  3  20 79 15     	jsr skobj1		; yes, check coordinates.
001567  3               :
001567  3  18           	clc			; point to next object in table.
001568  3  A5 66        	lda z80_l
00156A  3  69 26        	adc #38			; size of each object.
00156C  3  85 66        	sta z80_l
00156E  3  90 02        	bcc :+
001570  3  E6 67        	inc z80_h
001572  3               :
001572  3  C6 63        	dec z80_b
001574  3  D0 E5        	bne skobj0		; repeat for all objects.
001576  3               
001576  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
001578  3  60           	rts
001579  3               
001579  3               skobj1:
001579  3  A0 21        	ldy #33			; point to y coordinate.
00157B  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
00157D  3  38           	sec
00157E  3  A0 08        	ldy #8
001580  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
001582  3  18           	clc
001583  3  69 0F        	adc #15			; add sprite height minus one.
001585  3  C9 1F        	cmp #31			; within range?
001587  3  90 03        	bcc :+
001589  3  4C A7 15     	jmp skobj2		; no, ignore object.
00158C  3               :
00158C  3  A0 22        	ldy #34			; point to x coordinate now.
00158E  3  B1 66        	lda (z80_hl),y 		; get coordinate.
001590  3  38           	sec
001591  3  A0 09        	ldy #9
001593  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
001595  3  18           	clc			; add sprite width minus one.
001596  3  69 0F        	adc #15
001598  3  C9 1F        	cmp #31			; within range?
00159A  3  90 03        	bcc :+
00159C  3  4C A7 15     	jmp skobj2		; no, ignore object.
00159F  3               :
00159F  3  68           	pla			; remove return address from stack.
0015A0  3  68           	pla
0015A1  3               
0015A1  3  AD 21 11     	lda numob 		; objects in game.
0015A4  3  38           	sec
0015A5  3  E5 63        	sbc z80_b		; subtract loop counter.
0015A7  3               skobj2:
0015A7  3  60           	rts			; accumulator now points to object.
0015A8  3               
0015A8  3               
0015A8  3               ;---------------------------------------------------------------------
0015A8  3               ; Spawn a new sprite.
0015A8  3               ;---------------------------------------------------------------------
0015A8  3               
0015A8  3               spawn:
0015A8  3  A9 4E        	lda #<sprtab		; sprite table.
0015AA  3  85 66        	sta z80_l
0015AC  3  A9 25        	lda #>sprtab
0015AE  3  85 67        	sta z80_h
0015B0  3               numsp1:
0015B0  3  A9 0C        	lda #NUMSPR		; number of sprites.
0015B2  3  8D 49 16     	sta spcnt
0015B5  3               spaw0:
0015B5  3  A0 00        	ldy #0
0015B7  3  B1 66        	lda (z80_hl),y		; get sprite type.
0015B9  3  C9 FF        	cmp #255		; is it an unused slot?
0015BB  3  F0 10        	beq spaw1 		; yes, we can use this one.
0015BD  3               
0015BD  3  18           	clc 			; point to next sprite in table.
0015BE  3  A5 66        	lda z80_l
0015C0  3  69 11        	adc #TABSIZ		; size of each entry.
0015C2  3  85 66        	sta z80_l
0015C4  3  90 02        	bcc :+
0015C6  3  E6 67        	inc z80_h
0015C8  3               :
0015C8  3  CE 49 16     	dec spcnt		; one less iteration.
0015CB  3  D0 E8        	bne spaw0		; keep going until we find a slot.
0015CD  3               
0015CD  3               ; Didn't find one but drop through and set up a dummy sprite instead.
0015CD  3               
0015CD  3               spaw1:
0015CD  3  A5 69        	lda z80_i		; address of original sprite.
0015CF  3  48           	pha
0015D0  3  A5 68        	lda z80_x
0015D2  3  48           	pha
0015D3  3               
0015D3  3  A5 66        	lda z80_l		; store spawned sprite address.
0015D5  3  8D 4A 16     	sta spptr
0015D8  3  A5 67        	lda z80_h
0015DA  3  8D 4B 16     	sta spptr+1
0015DD  3               
0015DD  3  A5 62        	lda z80_c
0015DF  3  A0 00        	ldy #0
0015E1  3  91 66        	sta (z80_hl),y 		; set the type.
0015E3  3  A0 05        	ldy #5
0015E5  3  91 66        	sta (z80_hl),y		; copy
0015E7  3               
0015E7  3  A5 63        	lda z80_b
0015E9  3  A0 01        	ldy #1
0015EB  3  91 66        	sta (z80_hl),y		; set the image.
0015ED  3  A0 06        	ldy #6
0015EF  3  91 66        	sta (z80_hl),y		; copy
0015F1  3               
0015F1  3  A9 00        	lda #0 			; frame zero.
0015F3  3  A0 02        	ldy #2
0015F5  3  91 66        	sta (z80_hl),y		; set frame.
0015F7  3  A0 07        	ldy #7
0015F9  3  91 66        	sta (z80_hl),y		; copy
0015FB  3               
0015FB  3  A0 08        	ldy #8
0015FD  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0015FF  3  A0 03        	ldy #3
001601  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
001603  3  A0 08        	ldy #8
001605  3  91 66        	sta (z80_hl),y		; copy
001607  3               
001607  3  A0 09        	ldy #9
001609  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00160B  3  A0 04        	ldy #4
00160D  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
00160F  3  A0 09        	ldy #9
001611  3  91 66        	sta (z80_hl),y		; copy
001613  3               
001613  3  A0 0A        	ldy #10			; direction of original.
001615  3  B1 68        	lda (z80_ix),y
001617  3  91 66        	sta (z80_hl),y		; direction
001619  3               
001619  3  A9 00        	lda #0
00161B  3  A0 0B        	ldy #11
00161D  3  91 66        	sta (z80_hl),y		; reset parameter.
00161F  3  C8           	iny
001620  3  91 66        	sta (z80_hl),y		; reset parameter.
001622  3  C8           	iny
001623  3  91 66        	sta (z80_hl),y		; reset parameter.
001625  3  C8           	iny
001626  3  91 66        	sta (z80_hl),y		; reset parameter.
001628  3               rtssp:
001628  3  AD 4A 16     	lda spptr		; address of new sprite.
00162B  3  85 68        	sta z80_x
00162D  3  AD 4B 16     	lda spptr+1
001630  3  85 69        	sta z80_i
001632  3               evis1:
001632  3  20 58 2E     	jsr evnt09 		; call sprite initialisation event.
001635  3               
001635  3  AD 4A 16     	lda spptr 		; address of new sprite.
001638  3  85 68        	sta z80_x
00163A  3  AD 4B 16     	lda spptr+1
00163D  3  85 69        	sta z80_i
00163F  3  20 61 20     	jsr sspria 		; display the new sprite.
001642  3               
001642  3  68           	pla			; address of original sprite.
001643  3  85 68        	sta z80_x
001645  3  68           	pla
001646  3  85 69        	sta z80_i
001648  3               
001648  3  60           	rts
001649  3               
001649  3  00           spcnt:	.byte 0
00164A  3  00 00        spptr:	.word 0			; spawned sprite pointer.
00164C  3  00           seed:	.byte 0			; seed for random numbers.
00164D  3  30 30 30 30  score:	.byte "000000"		; player"s score.
001651  3  30 30        
001653  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
001657  3  30 30        
001659  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
00165D  3  30 30        
00165F  3  00 58        grbase:	.word ScreenAddr	; graphics base address.
001661  3               
001661  3               ;----------------------------------------------------
001661  3               ; Check y-pos
001661  3               ;----------------------------------------------------
001661  3               
001661  3               checkx:
001661  3  AD 4C 11     	lda dispy		; y position.
001664  3  C9 18        	cmp #24			; off screen?
001666  3  B0 01        	bcs :+
001668  3  60           	rts			; no, it's okay.
001669  3               :
001669  3  68           	pla			; remove return address from stack.
00166A  3  85 66        	sta z80_l
00166C  3  68           	pla
00166D  3  85 67        	sta z80_h
00166F  3  60           	rts
001670  3               
001670  3               ;-----------------------------------------------
001670  3               ; Displays the current high score.
001670  3               ;-----------------------------------------------
001670  3               
001670  3               dhisc:
001670  3  A9 53        	lda #<hiscor 		; high score text.
001672  3  85 66        	sta z80_l
001674  3  A9 16        	lda #>hiscor
001676  3  85 67        	sta z80_h
001678  3  4C 83 16     	jmp dscor1		; check in printable range then show 6 digits.
00167B  3               
00167B  3               ;------------------------------------------------------
00167B  3               ; Displays the current score.
00167B  3               ;------------------------------------------------------
00167B  3               
00167B  3               dscor:
00167B  3  A9 4D        	lda #<score		; score text.
00167D  3  85 66        	sta z80_l
00167F  3  A9 16        	lda #>score
001681  3  85 67        	sta z80_h
001683  3               dscor1:
001683  3  20 F4 1D     	jsr preprt		; set up font and print position.
001686  3  20 61 16     	jsr checkx		; make sure we're in a printable range.
001689  3               
001689  3  A9 06        	lda #6			; digits to display.
00168B  3  85 63        	sta z80_b
00168D  3  AD 36 1D     	lda prtmod		; get print mode.
001690  3  F0 03        	beq :+			; standard size text?
001692  3  4C B6 16     	jmp bscor0		; no, show double-height.
001695  3               :
001695  3               dscor0:
001695  3  A0 00        	ldy #0
001697  3  B1 66        	lda (z80_hl),y 		; fetch character.
001699  3  20 04 18     	jsr pchar 		; display character.
00169C  3  EE 4B 11     	inc dispx		; move along x coordinate
00169F  3               
00169F  3  E6 66        	inc z80_l		; next score column.
0016A1  3  D0 02        	bne :+
0016A3  3  E6 67        	inc z80_h
0016A5  3               :
0016A5  3  C6 63        	dec z80_b
0016A7  3  D0 EC        	bne dscor0 		; repeat for all digits.
0016A9  3               dscor2:
0016A9  3  AD 4B 11     	lda dispx 		; set up display coordinates.
0016AC  3  8D 40 11     	sta charx
0016AF  3  AD 4C 11     	lda dispy
0016B2  3  8D 41 11     	sta chary
0016B5  3  60           	rts
0016B6  3               
0016B6  3               ;------------------------------------------------------
0016B6  3               ; Displays the current score in double-height characters.
0016B6  3               ;
0016B6  3               ; Input:
0016B6  3               ;  B  = digit number
0016B6  3               ;  HL = score string
0016B6  3               ;------------------------------------------------------
0016B6  3               
0016B6  3               bscor0:
0016B6  3  A0 00        	ldy #0
0016B8  3               
0016B8  3  B1 66        	lda (z80_hl),y 		; fetch character.
0016BA  3  20 6E 1D     	jsr bchar 		; display big char.
0016BD  3               
0016BD  3  E6 66        	inc z80_l 		; next score column.
0016BF  3  D0 02        	bne :+
0016C1  3  E6 67        	inc z80_h
0016C3  3               :
0016C3  3  C6 63        	dec z80_b
0016C5  3  F0 03        	beq :+
0016C7  3  4C B6 16     	jmp bscor0 		; repeat for all digits.
0016CA  3               :
0016CA  3  4C A9 16     	jmp dscor2 		; tidy up line and column variables.
0016CD  3               
0016CD  3               ;-----------------------------------------------------
0016CD  3               ; Adds number in the hl pair to the score.
0016CD  3               ;-----------------------------------------------------
0016CD  3               
0016CD  3               addsc:
0016CD  3  A9 4E        	lda #<(score+1) 	; ten thousands column.
0016CF  3  85 64        	sta z80_e
0016D1  3  A9 16        	lda #>(score+1)
0016D3  3  85 65        	sta z80_d
0016D5  3  A9 10        	lda #<10000		; amount to add each time.
0016D7  3  85 62        	sta z80_c
0016D9  3  A9 27        	lda #>10000
0016DB  3  85 63        	sta z80_b
0016DD  3  20 21 17     	jsr incsc		; add to score.
0016E0  3               
0016E0  3  E6 64        	inc z80_e		; thousands column.
0016E2  3  D0 02        	bne :+
0016E4  3  E6 65        	inc z80_d
0016E6  3               :
0016E6  3  A9 E8        	lda #<1000		; amount to add each time.
0016E8  3  85 62        	sta z80_c
0016EA  3  A9 03        	lda #>1000
0016EC  3  85 63        	sta z80_b
0016EE  3  20 21 17     	jsr incsc 		; add to score.
0016F1  3               
0016F1  3  E6 64        	inc z80_e		; hundreds column.
0016F3  3  D0 02        	bne :+
0016F5  3  E6 65        	inc z80_d
0016F7  3               :
0016F7  3  A9 64        	lda #<100		; amount to add each time.
0016F9  3  85 62        	sta z80_c
0016FB  3  A9 00        	lda #>100
0016FD  3  85 63        	sta z80_b
0016FF  3  20 21 17     	jsr incsc		; add to score.
001702  3               
001702  3  E6 64        	inc z80_e 		; tens column.
001704  3  D0 02        	bne :+
001706  3  E6 65        	inc z80_d
001708  3               :
001708  3  A9 0A        	lda #<10		; amount to add each time.
00170A  3  85 62        	sta z80_c
00170C  3  A9 00        	lda #>10
00170E  3  85 63        	sta z80_b
001710  3  20 21 17     	jsr incsc 		; add to score.
001713  3               
001713  3  E6 64        	inc z80_e		; units column.
001715  3  D0 02        	bne :+
001717  3  E6 65        	inc z80_d
001719  3               :
001719  3  A9 01        	lda #<1			; units.
00171B  3  85 62        	sta z80_c
00171D  3  A9 00        	lda #>1
00171F  3  85 63        	sta z80_b
001721  3               incsc:
001721  3  A5 67        	lda z80_h		; store amount to add.
001723  3  48           	pha
001724  3  A5 66        	lda z80_l
001726  3  48           	pha
001727  3               
001727  3  38           	sec			; subtract from amount to add.
001728  3  A5 66        	lda z80_l
00172A  3  E5 62        	sbc z80_c
00172C  3  85 66        	sta z80_l
00172E  3  A5 67        	lda z80_h
001730  3  E5 63        	sbc z80_b
001732  3  85 67        	sta z80_h
001734  3  90 14        	bcc incsc0		; too much, restore value.
001736  3               
001736  3  68           	pla			; delete the previous amount from the stack.
001737  3  68           	pla
001738  3               
001738  3  A5 65        	lda z80_d 		; store column position.
00173A  3  48           	pha
00173B  3  A5 64        	lda z80_e
00173D  3  48           	pha
00173E  3  20 51 17     	jsr incsc2		; do the increment.
001741  3               
001741  3  68           	pla			; restore column.
001742  3  85 64        	sta z80_e
001744  3  68           	pla
001745  3  85 65        	sta z80_d
001747  3  4C 21 17     	jmp incsc		; repeat until all added.
00174A  3               
00174A  3               incsc0:
00174A  3  68           	pla			; restore previous value.
00174B  3  85 66        	sta z80_l
00174D  3  68           	pla
00174E  3  85 67        	sta z80_h
001750  3  60           	rts
001751  3               incsc2:
001751  3  A0 00        	ldy #0
001753  3  B1 64        	lda (z80_de),y 		; get amount.
001755  3  18           	clc
001756  3  69 01        	adc #1			; add one to column.
001758  3  91 64        	sta (z80_de),y		; write new column total.
00175A  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
00175C  3  B0 01        	bcs :+
00175E  3  60           	rts			; no, carry on.
00175F  3               :
00175F  3  A9 30        	lda #'0'		; make it zero.
001761  3  91 64        	sta (z80_de),y		; write new column total.
001763  3  C6 64        	dec z80_e		; back one column.
001765  3  D0 02        	bne :+
001767  3  C6 65        	dec z80_d
001769  3               :
001769  3  4C 51 17     	jmp incsc2
00176C  3               
00176C  3               ;------------------------------------
00176C  3               ; Add bonus to score and reset bonus
00176C  3               ;------------------------------------
00176C  3               
00176C  3               addbo:
00176C  3  A2 05        	ldx #5			; last digit.
00176E  3  18           	clc			; clear carry.
00176F  3               addbo0:
00176F  3  BD 4D 16     	lda score,x		; get score.
001772  3  7D 59 16     	adc bonus,x		; add bonus.
001775  3  38           	sec			; 0 to 18.
001776  3  E9 30        	sbc #48
001778  3  48           	pha
001779  3  A9 30        	lda #'0'
00177B  3  9D 59 16     	sta bonus,x		; zeroise bonus.
00177E  3  68           	pla
00177F  3  C9 3A        	cmp #58			; carried?
001781  3  B0 07        	bcs addbo2		; no, do next one.
001783  3  38           	sec
001784  3  E9 0A        	sbc #10			; subtract 10.
001786  3  38           	sec
001787  3  4C 8B 17     	jmp addbo1
00178A  3               addbo2:
00178A  3  18           	clc
00178B  3               addbo1:
00178B  3  9D 4D 16     	sta score,x		; write new score.
00178E  3  CA           	dex			; next digit.
00178F  3  10 DE        	bpl addbo0		; repeat for all 6 digits.
001791  3  60           	rts
001792  3               
001792  3               ;------------------------------------
001792  3               ; Swap score and bonus.
001792  3               ;------------------------------------
001792  3               
001792  3               swpsb:
001792  3  A2 05        	ldx #5			; digits to add.
001794  3               swpsb0:
001794  3  BD 4D 16     	lda score,x 		; get score digits.
001797  3  48           	pha			; save digit
001798  3  BD 59 16     	lda bonus,x 		; get bonus digits.
00179B  3  9D 4D 16     	sta score,x		; switch score-bonus
00179E  3  68           	pla
00179F  3  9D 59 16     	sta bonus,x
0017A2  3  CA           	dex 			; repeat for all 6 digits.
0017A3  3  10 EF        	bpl swpsb0
0017A5  3  60           	rts
0017A6  3               
0017A6  3               ;----------------------------------------------------
0017A6  3               ; Get print address.
0017A6  3               ;----------------------------------------------------
0017A6  3               
0017A6  3               gprad:
0017A6  3  98           	tya
0017A7  3  48           	pha
0017A8  3               
0017A8  3  AD 4B 11     	lda dispx 		; x coordinate.
0017AB  3  85 80        	sta scraddr
0017AD  3  A9 00        	lda #0
0017AF  3  85 81        	sta scraddr+1
0017B1  3  06 80        	asl scraddr  	; multiply char by 8
0017B3  3  26 81        	rol scraddr+1
0017B5  3  06 80        	asl scraddr
0017B7  3  26 81        	rol scraddr+1
0017B9  3  06 80        	asl scraddr
0017BB  3  26 81        	rol scraddr+1
0017BD  3               
0017BD  3  AD 4C 11     	lda dispy		; y coordinate.
0017C0  3  0A           	asl a
0017C1  3  0A           	asl a
0017C2  3  0A           	asl a			; multiply char by 8
0017C3  3  A8           	tay
0017C4  3               
0017C4  3  18           	clc
0017C5  3  A5 80        	lda scraddr
0017C7  3  79 2D 29     	adc SCADTB_lb,y
0017CA  3  85 80        	sta scraddr
0017CC  3  A5 81        	lda scraddr+1
0017CE  3  79 2D 2A     	adc SCADTB_hb,y
0017D1  3  85 81        	sta scraddr+1
0017D3  3               
0017D3  3  68           	pla
0017D4  3  A8           	tay
0017D5  3  60           	rts
0017D6  3               
0017D6  3               ;--------------------------------------------------------------
0017D6  3               ; Get property buffer address of char at (dispx, dispy) in hl.
0017D6  3               ; 
0017D6  3               ; Output:
0017D6  3               ;  buffaddr = bufaddr = MAP + dispy*32 + dispx
0017D6  3               ;--------------------------------------------------------------
0017D6  3               
0017D6  3               pradd:
0017D6  3  AD 4C 11     	lda dispy 		; y coordinate.
0017D9  3  85 86        	sta bufaddr
0017DB  3  A9 00        	lda #0
0017DD  3  85 87        	sta bufaddr+1
0017DF  3  06 86        	asl bufaddr  		; multiply char by 32
0017E1  3  26 87        	rol bufaddr+1
0017E3  3  06 86        	asl bufaddr
0017E5  3  26 87        	rol bufaddr+1
0017E7  3  06 86        	asl bufaddr
0017E9  3  26 87        	rol bufaddr+1
0017EB  3  06 86        	asl bufaddr
0017ED  3  26 87        	rol bufaddr+1
0017EF  3  06 86        	asl bufaddr
0017F1  3  26 87        	rol bufaddr+1
0017F3  3  18           	clc			; add address of MAP graphics.
0017F4  3  A5 86        	lda bufaddr
0017F6  3  6D 4B 11     	adc dispx
0017F9  3  69 2D        	adc #<MAP
0017FB  3  85 86        	sta bufaddr
0017FD  3  A5 87        	lda bufaddr+1
0017FF  3  69 26        	adc #>MAP
001801  3  85 87        	sta bufaddr+1
001803  3  60           	rts
001804  3               
001804  3               ;----------------------------------------------------
001804  3               ; Display character in A at dispx,dispy.
001804  3               ;
001804  3               ; Input:
001804  3               ;  A 	   = character to print
001804  3               ;----------------------------------------------------
001804  3               
001804  3               pchar:
001804  3  85 82        	sta fntaddr
001806  3  A9 00        	lda #0
001808  3  85 83        	sta fntaddr+1
00180A  3  06 82        	asl fntaddr  		; multiply char by 8.
00180C  3  26 83        	rol fntaddr+1
00180E  3  06 82        	asl fntaddr
001810  3  26 83        	rol fntaddr+1
001812  3  06 82        	asl fntaddr
001814  3  26 83        	rol fntaddr+1
001816  3               
001816  3  A5 82        	lda fntaddr
001818  3  18           	clc
001819  3  6D 77 2C     	adc FontPtr
00181C  3  85 82        	sta fntaddr		; that's the low byte.
00181E  3  A5 83        	lda fntaddr+1
001820  3  6D 78 2C     	adc FontPtr+1
001823  3  85 83        	sta fntaddr+1		; add displacement.
001825  3               pchark:
001825  3  20 A6 17     	jsr gprad		; get screen address.
001828  3  A2 07        	ldx #7			; lines to write.
00182A  3               pchar0:
00182A  3  A0 00        	ldy #0
00182C  3  B1 82        	lda (fntaddr),y 	; get image byte.
00182E  3  BC 3F 18     	ldy scrtab,x		; Get rowoffset
001831  3               
001831  3  49 00        	eor #TxtInvert		; Invert
001833  3               
001833  3  91 80        	sta (scraddr),y 	; copy to screen.
001835  3  E6 82        	inc fntaddr		; next image byte.
001837  3  D0 02        	bne :+
001839  3  E6 83        	inc fntaddr+1
00183B  3               :
00183B  3  CA           	dex			; next screen row down.
00183C  3  10 EC        	bpl pchar0		; repeat.
00183E  3  60           	rts
00183F  3               
00183F  3  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
001843  3  03 02 01 00  
001847  3               ;scrtab:	.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
001847  3               
001847  3               ;----------------------------------------------
001847  3               ; Print attributes, properties and pixels.
001847  3               ;
001847  3               ; Input:
001847  3               ;  A	= tile number
001847  3               ;----------------------------------------------
001847  3               
001847  3               pattr:
001847  3  85 63        	sta z80_b		; store cell in b register for now.
001849  3  AA           	tax
00184A  3  BD 7D 30     	lda bprop,x 		; block properties.
00184D  3  85 62        	sta z80_c
00184F  3  20 D6 17     	jsr pradd 		; get property buffer address.
001852  3  A5 62        	lda z80_c
001854  3  A0 00        	ldy #0
001856  3  91 86        	sta (bufaddr),y 	; write property.
001858  3  A5 63        	lda z80_b 		; restore cell.
00185A  3               
00185A  3               ; Print attributes, no properties.
00185A  3               
00185A  3               panp:
00185A  3  85 64        	sta z80_e		; displacement in e.
00185C  3  A9 00        	lda #0
00185E  3  85 65        	sta z80_d		; no high byte.
001860  3  06 64        	asl z80_e  		; multiply char by 8.
001862  3  26 65        	rol z80_d
001864  3  06 64        	asl z80_e
001866  3  26 65        	rol z80_d
001868  3  06 64        	asl z80_e
00186A  3  26 65        	rol z80_d
00186C  3  18           	clc
00186D  3  A5 64        	lda z80_e
00186F  3  69 6D        	adc #<chgfx 		; address of graphics.
001871  3  85 84        	sta tileaddr
001873  3  A5 65        	lda z80_d
001875  3  69 30        	adc #>chgfx
001877  3  85 85        	sta tileaddr+1
001879  3  20 A6 17     	jsr gprad 		; get screen address.
00187C  3  A2 07        	ldx #7			; number of pixel rows to write.
00187E  3               panp0:
00187E  3  A0 00        	ldy #0
001880  3  B1 84        	lda (tileaddr),y 	; get image byte.
001882  3  49 00        	eor #TxtInvert		; Invert
001884  3  BC 3F 18     	ldy scrtab,x
001887  3  91 80        	sta (scraddr),y 	; copy to screen.
001889  3  E6 84        	inc tileaddr 		; next image byte.
00188B  3  D0 02        	bne :+
00188D  3  E6 85        	inc tileaddr+1
00188F  3               :
00188F  3  CA           	dex	 		; repeat for 8 pixel rows.
001890  3  10 EC        	bpl panp0
001892  3  EE 4B 11     	inc dispx 		; move along one.
001895  3  EE 40 11     	inc charx
001898  3  60           	rts
001899  3               
001899  3               ;----------------------------------------------
001899  3               ; Print character pixels, no more.
001899  3               ;
001899  3               ; Input:
001899  3               ;  A	= character to print
001899  3               ;----------------------------------------------
001899  3               
001899  3               pchr:
001899  3  20 04 18     	jsr pchar 		; show character in accumulator.
00189C  3  EE 4B 11     	inc dispx		; move along one.
00189F  3  60           	rts
0018A0  3               
0018A0  3               ;----------------------------------------------------
0018A0  3               ; Shifter sprite routine for objects.
0018A0  3               ;----------------------------------------------------
0018A0  3               
0018A0  3               sprit7:
0018A0  3  A5 63        	lda z80_b
0018A2  3  F0 0F        	beq sprit0
0018A4  3  85 61        	sta z80_a
0018A6  3               sprit3:
0018A6  3  4E 31 19     	lsr spr			; shift into position.
0018A9  3  6E 32 19     	ror spr+1
0018AC  3  6E 33 19     	ror spr+2
0018AF  3  C6 61        	dec z80_a		; one less iteration.
0018B1  3  D0 F3        	bne sprit3
0018B3  3               sprit0:
0018B3  3  60           	rts 			; now apply to screen.
0018B4  3               
0018B4  3               ;----------------------------------------------------
0018B4  3               ; Draw sprite
0018B4  3               ;----------------------------------------------------
0018B4  3               
0018B4  3               sprite:
0018B4  3  8E 34 19     	stx xtmp		; Save X-reg
0018B7  3  20 43 20     	jsr scadd 		; get screen address in scraddr.
0018BA  3               
0018BA  3  AD 4B 11     	lda dispx 		; x position.
0018BD  3  29 07        	and #7 			; position straddling cells.
0018BF  3  85 63        	sta z80_b		; store in b register.
0018C1  3               
0018C1  3  A5 66        	lda z80_l		; store sprite graphic address.
0018C3  3  8D D6 18     	sta sprit1+1
0018C6  3  8D DD 18     	sta sprit2+1
0018C9  3  A5 67        	lda z80_h
0018CB  3  8D D7 18     	sta sprit1+2
0018CE  3  8D DE 18     	sta sprit2+2
0018D1  3               
0018D1  3  A2 00        	ldx #0			; pixel height.
0018D3  3  A0 00        	ldy #0
0018D5  3               sprit1:
0018D5  3  BD F5 34     	lda objdta,x		; fetch first byte.
0018D8  3  8D 31 19     	sta spr
0018DB  3  E8           	inx
0018DC  3               sprit2:
0018DC  3  BD F5 34     	lda objdta,x
0018DF  3  8D 32 19     	sta spr+1
0018E2  3               
0018E2  3  A9 00        	lda #0
0018E4  3  8D 33 19     	sta spr+2
0018E7  3  20 A0 18     	jsr sprit7		; shift sprite
0018EA  3               
0018EA  3  AD 31 19     	lda spr			; fetch graphic.
0018ED  3  A0 00        	ldy #0			; _BEEB
0018EF  3  51 80        	eor (scraddr),y		; merge with screen image.
0018F1  3  91 80        	sta (scraddr),y		; write to screen.
0018F3  3               
0018F3  3  AD 32 19     	lda spr+1		; fetch graphic.
0018F6  3  A0 08        	ldy #8			; _BEEB
0018F8  3  51 80        	eor (scraddr),y		; merge with screen image.
0018FA  3  91 80        	sta (scraddr),y		; write to screen.
0018FC  3               
0018FC  3  AD 33 19     	lda spr+2		; fetch graphic.
0018FF  3  A0 10        	ldy #16			; _BEEB
001901  3  51 80        	eor (scraddr),y		; merge with screen image.
001903  3  91 80        	sta (scraddr),y		; write to screen.
001905  3               
001905  3  20 E5 20     	jsr nline
001908  3               
001908  3  E8           	inx			; next source byte.
001909  3  E0 20        	cpx #32
00190B  3  D0 C8        	bne sprit1		; repeat
00190D  3               
00190D  3  AE 34 19     	ldx xtmp		; retreive X-reg
001910  3  60           	rts
001911  3               
001911  3               spritetab:
001911  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
001915  3  40 41 60 61  
001919  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
00191D  3  C0 C1 E0 E1  
001921  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
001925  3  40 41 60 61  
001929  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
00192D  3  C0 C1 E0 E1  
001931  3               
001931  3  00 00 00     spr:	.byte 0,0,0
001934  3               
001934  3  00           xtmp:	.byte 0
001935  3               
001935  3               ;-----------------------------------------------------------
001935  3               ; Get room address.
001935  3               ;-----------------------------------------------------------
001935  3               
001935  3               groom:
001935  3  AE 26 11     	ldx scno 		; screen number.
001938  3  A0 00        	ldy #0
00193A  3               groomx:
00193A  3  A9 85        	lda #<scdat 		; pointer to screens.
00193C  3  85 66        	sta z80_l
00193E  3  A9 34        	lda #>scdat
001940  3  85 67        	sta z80_h
001942  3               groom1:
001942  3  E0 00        	cpx #0			; is it the first one?
001944  3  F0 15        	beq groom0 		; no more screens to skip.
001946  3               
001946  3  18           	clc
001947  3  A5 66        	lda z80_l
001949  3  79 85 34     	adc scdat,y 		; low byte of screen size.
00194C  3  85 66        	sta z80_l
00194E  3  C8           	iny			; point to high byte.
00194F  3  A5 67        	lda z80_h
001951  3  79 85 34     	adc scdat,y 		; high byte of screen size.
001954  3  85 67        	sta z80_h
001956  3  C8           	iny			; next address.
001957  3               
001957  3  CA           	dex 			; one less iteration.
001958  3  4C 42 19     	jmp groom1 		; loop until we reach the end.
00195B  3               groom0:
00195B  3  AD EF 34     	lda numsc 		; add displacement.
00195E  3  0A           	asl a
00195F  3  18           	clc			; add double displacement to address.
001960  3  65 66        	adc z80_l
001962  3  85 66        	sta z80_l
001964  3  A5 67        	lda z80_h
001966  3  69 00        	adc #0
001968  3  85 67        	sta z80_h
00196A  3  60           	rts
00196B  3               
00196B  3               ;-----------------------------------------------------------
00196B  3               ; Draw present room.
00196B  3               ;-----------------------------------------------------------
00196B  3               
00196B  3               droom:
00196B  3  AD 1D 11     	lda wintop 		; window top.
00196E  3  8D 4C 11     	sta dispy		; set cursor y position.
001971  3               droom2:
001971  3  20 35 19     	jsr groom 		; get address of current room.
001974  3  A9 00        	lda #0	 		; zero in accumulator.
001976  3  8D D3 19     	sta comcnt 		; reset compression counter.
001979  3  AD 1F 11     	lda winhgt 		; height of window.
00197C  3  8D A0 19     	sta rrow		; set row counter
00197F  3               droom0:
00197F  3  AD 1E 11     	lda winlft 		; window left edge.
001982  3  8D 4B 11     	sta dispx 		; set cursor x position.
001985  3  AD 20 11     	lda winwid 		; width of window.
001988  3  8D 9F 19     	sta rcol		; set column counter
00198B  3               droom1:
00198B  3  20 A1 19     	jsr flbyt 		; decompress next byte on the fly.
00198E  3  20 47 18     	jsr pattr 		; show attributes and block.
001991  3  CE 9F 19     	dec rcol		; one less column.
001994  3  D0 F5        	bne droom1 		; repeat for entire line.
001996  3  EE 4C 11     	inc dispy		; move down one line.
001999  3  CE A0 19     	dec rrow 		; one less row.
00199C  3  D0 E1        	bne droom0 		; repeat for all rows.
00199E  3  60           	rts
00199F  3               
00199F  3  00           rcol:	.byte 0
0019A0  3  00           rrow:	.byte 0
0019A1  3               
0019A1  3               ;----------------------------------------------
0019A1  3               ; Decompress bytes on-the-fly.
0019A1  3               ;----------------------------------------------
0019A1  3               
0019A1  3               flbyt:
0019A1  3  AD D3 19     	lda comcnt 		; compression counter.
0019A4  3  D0 22        	bne flbyt1		; any more to decompress?  yes.
0019A6  3               
0019A6  3  A0 00        	ldy #0
0019A8  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
0019AA  3  E6 66        	inc z80_l 		; point to next cell.
0019AC  3  D0 02        	bne :+
0019AE  3  E6 67        	inc z80_h
0019B0  3               :
0019B0  3  C9 FF        	cmp #255 		; is this byte a control code?
0019B2  3  F0 01        	beq :+
0019B4  3  60           	rts 			; no, this byte is uncompressed.
0019B5  3               :
0019B5  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
0019B7  3  8D D2 19     	sta combyt 		; set up the type.
0019BA  3  E6 66        	inc z80_l 		; point to quantity.
0019BC  3  D0 02        	bne :+
0019BE  3  E6 67        	inc z80_h
0019C0  3               :
0019C0  3  B1 66        	lda (z80_hl),y 		; get quantity.
0019C2  3  E6 66        	inc z80_l 		; point to next byte.
0019C4  3  D0 02        	bne :+
0019C6  3  E6 67        	inc z80_h
0019C8  3               :
0019C8  3               flbyt1:
0019C8  3  8D D3 19     	sta comcnt 		; store new quantity.
0019CB  3  CE D3 19     	dec comcnt		; one less.
0019CE  3  AD D2 19     	lda combyt 		; byte to expand.
0019D1  3  60           	rts
0019D2  3               
0019D2  3  00           combyt:	.byte 0			; byte type compressed.
0019D3  3  00           comcnt:	.byte 0			; compression counter.
0019D4  3               
0019D4  3               ;------------------------------------------
0019D4  3               ; Ladder down check.
0019D4  3               ;
0019D4  3               ; Input:
0019D4  3               ;  IX = sprite pointer
0019D4  3               ;------------------------------------------
0019D4  3               
0019D4  3               laddd:
0019D4  3  A0 09        	ldy #9
0019D6  3  B1 68        	lda (z80_ix),y		; x coordinate.
0019D8  3  8D 4B 11     	sta dispx
0019DB  3               
0019DB  3  A0 08        	ldy #8
0019DD  3  B1 68        	lda (z80_ix),y		; y coordinate.
0019DF  3  29 FE        	and #254		; make it even.
0019E1  3  91 68        	sta (z80_ix),y 		; reset it.
0019E3  3               numsp5:
0019E3  3  18           	clc 			; look down 16 pixels.
0019E4  3  69 10        	adc #16
0019E6  3  8D 4C 11     	sta dispy		; coords in dispx,dispy.
0019E9  3  4C 01 1A     	jmp laddv
0019EC  3               
0019EC  3               ;------------------------------------------
0019EC  3               ; Ladder up check.
0019EC  3               ;
0019EC  3               ; Input:
0019EC  3               ;  IX = sprite pointer
0019EC  3               ;
0019EC  3               ; Output:
0019EC  3               ;  A  = 0 is ok, A <>0 is not ok
0019EC  3               ;------------------------------------------
0019EC  3               
0019EC  3               laddu:
0019EC  3  A0 09        	ldy #9
0019EE  3  B1 68        	lda (z80_ix),y		; x coordinate.
0019F0  3  8D 4B 11     	sta dispx
0019F3  3               
0019F3  3  A0 08        	ldy #8
0019F5  3  B1 68        	lda (z80_ix),y		; y coordinate.
0019F7  3  29 FE        	and #254 		; make it even.
0019F9  3  91 68        	sta (z80_ix),y		; reset it.
0019FB  3               numsp6:
0019FB  3  18           	clc 			; look 2 pixels above feet.
0019FC  3  69 0E        	adc #14
0019FE  3  8D 4C 11     	sta dispy		; coords in dispx,dispy.
001A01  3               laddv:
001A01  3  20 E8 1B     	jsr tstbl 		; get map address.
001A04  3  20 1B 1B     	jsr ldchk 		; standard ladder check.
001A07  3  F0 01        	beq :+
001A09  3  60           	rts 			; no way through.
001A0A  3               :
001A0A  3  E6 86        	inc bufaddr 		; look right one cell.
001A0C  3  D0 02        	bne :+
001A0E  3  E6 87        	inc bufaddr+1
001A10  3               :
001A10  3  20 1B 1B     	jsr ldchk 		; do the check.
001A13  3  F0 01        	beq :+
001A15  3  60           	rts 			; impassable.
001A16  3               :
001A16  3  AD 4B 11     	lda dispx 		; y coordinate.
001A19  3  29 07        	and #7 			; position straddling block cells.
001A1B  3  D0 01        	bne :+
001A1D  3  60           	rts 			; no more checks needed.
001A1E  3               :
001A1E  3  E6 86        	inc bufaddr 		; look to third cell.
001A20  3  D0 02        	bne :+
001A22  3  E6 87        	inc bufaddr+1
001A24  3               :
001A24  3  20 1B 1B     	jsr ldchk 		; do the check.
001A27  3  60           	rts  			; return with zero flag set accordingly.
001A28  3               
001A28  3               ;---------------------------------------------------------
001A28  3               ; Can go up check.
001A28  3               ;
001A28  3               ; Input:
001A28  3               ;  IX = sprite pointer
001A28  3               ;
001A28  3               ; Output:
001A28  3               ;  A  = 0 is ok, A <>0 is not ok
001A28  3               ;---------------------------------------------------------
001A28  3               
001A28  3               cangu:
001A28  3  A0 09        	ldy #9
001A2A  3  B1 68        	lda (z80_ix),y		; x coordinate.
001A2C  3  8D 4B 11     	sta dispx
001A2F  3  A0 08        	ldy #8
001A31  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001A33  3  38           	sec
001A34  3  E9 02        	sbc #2
001A36  3  8D 4C 11     	sta dispy		; coords in dispx,dispy.
001A39  3  20 E8 1B     	jsr tstbl 		; get map address.
001A3C  3  20 E5 1A     	jsr lrchk 		; standard left/right check.
001A3F  3  F0 01        	beq :+
001A41  3  60           	rts			; no way through.
001A42  3               :
001A42  3  E6 86        	inc bufaddr		; look right one cell.
001A44  3  D0 02        	bne :+
001A46  3  E6 87        	inc bufaddr+1
001A48  3               :
001A48  3  20 E5 1A     	jsr lrchk 		; do the check.
001A4B  3  F0 01        	beq :+
001A4D  3  60           	rts			; impassable.
001A4E  3               :
001A4E  3  AD 4B 11     	lda dispx		; x coordinate.
001A51  3  29 07        	and #7			; position straddling block cells.
001A53  3  D0 01        	bne :+
001A55  3  60           	rts			; no more checks needed.
001A56  3               :
001A56  3  E6 86        	inc bufaddr		; look to third cell.
001A58  3  D0 02        	bne :+
001A5A  3  E6 87        	inc bufaddr+1
001A5C  3               :
001A5C  3  20 E5 1A     	jsr lrchk		; do the check.
001A5F  3  60           	rts 			; return with zero flag set accordingly.
001A60  3               
001A60  3               ;---------------------------------------------------------
001A60  3               ; Can go down check.
001A60  3               ;
001A60  3               ; Input:
001A60  3               ;  IX = sprite pointer
001A60  3               ;
001A60  3               ; Output:
001A60  3               ;  A  = 0 is ok, A <>0 is not ok
001A60  3               ;---------------------------------------------------------
001A60  3               
001A60  3               cangd:
001A60  3  A0 09        	ldy #9
001A62  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001A64  3  8D 4B 11     	sta dispx
001A67  3  A0 08        	ldy #8
001A69  3  B1 68        	lda (z80_ix),y		; y coordinate.
001A6B  3               numsp3:
001A6B  3  18           	clc
001A6C  3  69 10        	adc #16 		; look down 16 pixels.
001A6E  3  8D 4C 11     	sta dispy		; coords in dispx,dispy.
001A71  3  20 E8 1B     	jsr tstbl 		; get map address.
001A74  3  20 FA 1A     	jsr plchk 		; block, platform check.
001A77  3  F0 01        	beq :+
001A79  3  60           	rts			; no way through.
001A7A  3               :
001A7A  3  E6 86        	inc bufaddr		; look right one cell.
001A7C  3  D0 02        	bne :+
001A7E  3  E6 87        	inc bufaddr+1
001A80  3               :
001A80  3  20 FA 1A     	jsr plchk		; block, platform check.
001A83  3  F0 01        	beq :+
001A85  3  60           	rts			; impassable.
001A86  3               :
001A86  3  AD 4B 11     	lda dispx		; x coordinate.
001A89  3  29 07        	and #7			; position straddling block cells.
001A8B  3  D0 01        	bne :+
001A8D  3  60           	rts			; no more checks needed.
001A8E  3               :
001A8E  3  E6 86        	inc bufaddr		; look to third cell.
001A90  3  D0 02        	bne :+
001A92  3  E6 87        	inc bufaddr+1
001A94  3               :
001A94  3  20 FA 1A     	jsr plchk		; block, platform check.
001A97  3  60           	rts			; return with zero flag set accordingly.
001A98  3               
001A98  3               ;---------------------------------------------------------
001A98  3               ; Can go left check.
001A98  3               ;
001A98  3               ; Input:
001A98  3               ;  IX = sprite pointer
001A98  3               ;
001A98  3               ; Output:
001A98  3               ;  A  = 0 is ok, A <>0 is not ok
001A98  3               ;---------------------------------------------------------
001A98  3               
001A98  3               cangl:
001A98  3  A0 08        	ldy #8
001A9A  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001A9C  3  8D 4C 11     	sta dispy
001A9F  3  A0 09        	ldy #9
001AA1  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001AA3  3  38           	sec
001AA4  3  E9 02        	sbc #2			; look left 2 pixels.
001AA6  3  8D 4B 11     	sta dispx		; coords in dispx,dispy.
001AA9  3  4C BD 1A     	jmp cangh		; test if we can go there.
001AAC  3               
001AAC  3               ;---------------------------------------------------------
001AAC  3               ; Can go right check.
001AAC  3               ;
001AAC  3               ; Input:
001AAC  3               ;  IX = sprite pointer
001AAC  3               ;
001AAC  3               ; Output:
001AAC  3               ;  A  = 0 is ok, A <>0 is not ok
001AAC  3               ;---------------------------------------------------------
001AAC  3               
001AAC  3               cangr:
001AAC  3  A0 08        	ldy #8
001AAE  3  B1 68        	lda (z80_ix),y		; y coordinate.
001AB0  3  8D 4C 11     	sta dispy
001AB3  3  A0 09        	ldy #9
001AB5  3  B1 68        	lda (z80_ix),y		; x coordinate.
001AB7  3  18           	clc
001AB8  3  69 10        	adc #16			; look right 16 pixels.
001ABA  3  8D 4B 11     	sta dispx		; coords in dispx,dispy.
001ABD  3               cangh:
001ABD  3               cangh2:
001ABD  3  A9 03        	lda #3			; default rows to write.
001ABF  3  85 63        	sta z80_b
001AC1  3  AD 4C 11     	lda dispy		; y position.
001AC4  3  29 07        	and #7			; does x straddle cells?
001AC6  3  D0 02        	bne cangh0		; yes, loop counter is good.
001AC8  3  C6 63        	dec z80_b		; one less row to write.
001ACA  3               cangh0:
001ACA  3  20 E8 1B     	jsr tstbl		; get map address.
001ACD  3               cangh1:
001ACD  3  20 E5 1A     	jsr lrchk		; standard left/right check.
001AD0  3  F0 01        	beq :+
001AD2  3  60           	rts			; no way through.
001AD3  3               :
001AD3  3  48           	pha
001AD4  3  18           	clc
001AD5  3  A5 86        	lda bufaddr
001AD7  3  69 20        	adc #32			; look down.
001AD9  3  85 86        	sta bufaddr
001ADB  3  90 02        	bcc :+
001ADD  3  E6 87        	inc bufaddr+1
001ADF  3               :
001ADF  3  68           	pla
001AE0  3               
001AE0  3  C6 63        	dec z80_b
001AE2  3  D0 E9        	bne cangh1
001AE4  3  60           	rts
001AE5  3               
001AE5  3               ;-------------------------------------
001AE5  3               ; Check left/right movement is okay.
001AE5  3               ;
001AE5  3               ; Input:
001AE5  3               ;  bufaddr = MAP + x/8 + y/8*32
001AE5  3               ;
001AE5  3               ; Output:
001AE5  3               ;  A  = 0 is ok, A <>0 is not ok
001AE5  3               ;-------------------------------------
001AE5  3               
001AE5  3               lrchk:
001AE5  3  A0 00        	ldy #0
001AE7  3  B1 86        	lda (bufaddr),y		; fetch map cell.
001AE9  3  C9 02        	cmp #WALL 		; is it passable?
001AEB  3  F0 0A        	beq lrchkx		; no.
001AED  3               
001AED  3  C9 04        	cmp #FODDER		; fodder has to be dug.
001AEF  3  F0 06        	beq lrchkx		; not passable.
001AF1  3  A9 00        	lda #0
001AF3  3  60           	rts
001AF4  3               
001AF4  3               ;--------------------------------------------------------------
001AF4  3               ; Called by mmenu
001AF4  3               ;--------------------------------------------------------------
001AF4  3               
001AF4  3               always:
001AF4  3  A9 FF        	lda #255		; report it as okay.
001AF6  3  60           	rts
001AF7  3               
001AF7  3               lrchkx:
001AF7  3  A9 01        	lda #1 			; reset all bits.
001AF9  3  60           	rts
001AFA  3               
001AFA  3               
001AFA  3               ;--------------------------------------------------------------
001AFA  3               ; Check platform or solid item is not in way.
001AFA  3               ;
001AFA  3               ; Input:
001AFA  3               ;  bufaddr = MAP + x/8 + y/8*32
001AFA  3               ;
001AFA  3               ; Output:
001AFA  3               ;  A  = 0 is ok, A <>0 is not ok
001AFA  3               ;--------------------------------------------------------------
001AFA  3               
001AFA  3               plchk:
001AFA  3  A0 00        	ldy #0
001AFC  3  B1 86        	lda (bufaddr),y 	; fetch map cell.
001AFE  3  C9 02        	cmp #WALL 		; is it passable?
001B00  3  F0 F5        	beq lrchkx		; no.
001B02  3               
001B02  3  C9 04        	cmp #FODDER		; fodder has to be dug.
001B04  3  F0 F1        	beq lrchkx		; not passable.
001B06  3               
001B06  3  C9 01        	cmp #PLATFM		; platform is solid.
001B08  3  F0 07        	beq plchkx		; not passable.
001B0A  3               
001B0A  3  C9 03        	cmp #LADDER		; is it a ladder?
001B0C  3  F0 E9        	beq lrchkx		; on ladder, deny movement.
001B0E  3               plchk0:
001B0E  3  A9 00        	lda #0			; report as ok
001B10  3  60           	rts
001B11  3               plchkx:
001B11  3  AD 4C 11     	lda dispy		; x coordinate.
001B14  3  29 07        	and #7			; position straddling blocks.
001B16  3  F0 DF        	beq lrchkx		; on platform, deny movement.
001B18  3  4C 0E 1B     	jmp plchk0
001B1B  3               
001B1B  3               ;--------------------------------------------------------------
001B1B  3               ; Check ladder is available.
001B1B  3               ;
001B1B  3               ; Input:
001B1B  3               ;  bufaddr = MAP + x/8 + y/8*32
001B1B  3               ;
001B1B  3               ; Output:
001B1B  3               ;  A  = 0 is ok, A <>0 is not ok
001B1B  3               ;--------------------------------------------------------------
001B1B  3               
001B1B  3               ldchk:
001B1B  3  A0 00        	ldy #0
001B1D  3  B1 86        	lda (bufaddr),y 	; fetch cell.
001B1F  3  C9 03        	cmp #LADDER 		; is it a ladder?
001B21  3  F0 03        	beq ldchk1
001B23  3  A9 01        	lda #1
001B25  3  60           	rts  			; return with zero flag set accordingly.
001B26  3               ldchk1:
001B26  3  A9 00        	lda #0
001B28  3  60           	rts
001B29  3               
001B29  3               ;--------------------------------------------------------------
001B29  3               ; Touched deadly block check.
001B29  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
001B29  3               ;
001B29  3               ; Input:
001B29  3               ;  IX = sprite address
001B29  3               ;
001B29  3               ; Output:
001B29  3               ;  A  = 0 is ok, A=5 is not ok
001B29  3               ;--------------------------------------------------------------
001B29  3               
001B29  3               tded:
001B29  3  A0 08        	ldy #8
001B2B  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001B2D  3  8D 4C 11     	sta dispy
001B30  3  C8           	iny
001B31  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001B33  3  8D 4B 11     	sta dispx		; coords in dispx,dispy.
001B36  3  20 E8 1B     	jsr tstbl		; get map address.
001B39  3  48           	pha
001B3A  3  A9 1F        	lda #31			; default distance to next line down.
001B3C  3  85 64        	sta z80_e
001B3E  3  68           	pla
001B3F  3  C5 63        	cmp z80_b		; is this the required block?
001B41  3  D0 01        	bne :+
001B43  3  60           	rts			; yes.
001B44  3               :
001B44  3  E6 86        	inc bufaddr 		; next cell.
001B46  3  D0 02        	bne :+
001B48  3  E6 87        	inc bufaddr+1
001B4A  3               :
001B4A  3  A0 00        	ldy #0
001B4C  3  B1 86        	lda (bufaddr),y		; fetch type.
001B4E  3  C5 63        	cmp z80_b 		; is this deadly/custom?
001B50  3  D0 01        	bne :+
001B52  3  60           	rts			; yes.
001B53  3               :
001B53  3  AD 4B 11     	lda dispx		; horizontal position.
001B56  3  85 62        	sta z80_c 		; store column in c register.
001B58  3  29 07        	and #7			; is it straddling cells?
001B5A  3  D0 03        	bne :+
001B5C  3  4C 70 1B     	jmp tded0		; no.
001B5F  3               :
001B5F  3  E6 86        	inc bufaddr 		; last cell.
001B61  3  D0 02        	bne :+
001B63  3  E6 87        	inc bufaddr+1
001B65  3               :
001B65  3  A0 00        	ldy #0
001B67  3  B1 86        	lda (bufaddr),y 	; fetch type.
001B69  3  C5 63        	cmp z80_b		; is this the block?
001B6B  3  D0 01        	bne :+
001B6D  3  60           	rts			; yes.
001B6E  3               :
001B6E  3  C6 64        	dec z80_e		; one less cell to next row down.
001B70  3               tded0:
001B70  3  18           	clc 			; point to next row.
001B71  3  A5 86        	lda bufaddr
001B73  3  65 64        	adc z80_e
001B75  3  85 86        	sta bufaddr
001B77  3  90 02        	bcc :+
001B79  3  E6 87        	inc bufaddr+1
001B7B  3               :
001B7B  3  A0 00        	ldy #0
001B7D  3  B1 86        	lda (bufaddr),y		; fetch left cell block.
001B7F  3  C5 63        	cmp z80_b		; is this fatal?
001B81  3  D0 01        	bne :+
001B83  3  60           	rts			; yes.
001B84  3               :
001B84  3  E6 86        	inc bufaddr 		; next cell.
001B86  3  D0 02        	bne :+
001B88  3  E6 87        	inc bufaddr+1
001B8A  3               :
001B8A  3  A0 00        	ldy #0
001B8C  3  B1 86        	lda (bufaddr),y 	; fetch type.
001B8E  3  C5 63        	cmp z80_b		; is this fatal?
001B90  3  D0 01        	bne :+
001B92  3  60           	rts			; yes.
001B93  3               :
001B93  3  A5 62        	lda z80_c		; horizontal position.
001B95  3  29 07        	and #7			; is it straddling cells?
001B97  3  D0 03        	bne :+
001B99  3  4C AB 1B     	jmp tded1 		; no.
001B9C  3               :
001B9C  3  E6 86        	inc bufaddr		; last cell.
001B9E  3  D0 02        	bne :+
001BA0  3  E6 87        	inc bufaddr+1
001BA2  3               :
001BA2  3  A0 00        	ldy #0
001BA4  3  B1 86        	lda (bufaddr),y		; fetch type.
001BA6  3  C5 63        	cmp z80_b		; is this fatal?
001BA8  3  D0 01        	bne :+
001BAA  3  60           	rts			; yes.
001BAB  3               :
001BAB  3               tded1:
001BAB  3  AD 4C 11     	lda dispy		; vertical position.
001BAE  3  29 07        	and #7 			; is it straddling cells?
001BB0  3  D0 01        	bne :+
001BB2  3  60           	rts			; no, job done.
001BB3  3               :
001BB3  3  18           	clc			; point to next row.
001BB4  3  A5 86        	lda bufaddr
001BB6  3  65 64        	adc z80_e
001BB8  3  85 86        	sta bufaddr
001BBA  3  90 02        	bcc :+
001BBC  3  E6 87        	inc bufaddr+1
001BBE  3               :
001BBE  3  A0 00        	ldy #0
001BC0  3  B1 86        	lda (bufaddr),y 	; fetch left cell block.
001BC2  3  C5 63        	cmp z80_b		; is this fatal?
001BC4  3  D0 01        	bne :+
001BC6  3  60           	rts			; yes.
001BC7  3               :
001BC7  3  E6 86        	inc bufaddr		; next cell.
001BC9  3  D0 02        	bne :+
001BCB  3  E6 87        	inc bufaddr+1
001BCD  3               :
001BCD  3  A0 00        	ldy #0
001BCF  3  B1 86        	lda (bufaddr),y 	; fetch type.
001BD1  3  C5 63        	cmp z80_b		; is this fatal?
001BD3  3  D0 01        	bne :+
001BD5  3  60           	rts			; yes.
001BD6  3               :
001BD6  3  A5 62        	lda z80_c		; horizontal position.
001BD8  3  29 07        	and #7			; is it straddling cells?
001BDA  3  D0 01        	bne :+
001BDC  3  60           	rts			; no.
001BDD  3               :
001BDD  3  E6 86        	inc bufaddr		; last cell.
001BDF  3  D0 02        	bne :+
001BE1  3  E6 87        	inc bufaddr+1
001BE3  3               :
001BE3  3  A0 00        	ldy #0
001BE5  3  B1 86        	lda (bufaddr),y		; fetch final type.
001BE7  3  60           	rts 			; return with final type in accumulator.
001BE8  3               
001BE8  3               ;---------------------------------------------------
001BE8  3               ; Fetch block type at (dispx, dispy).
001BE8  3               ;
001BE8  3               ; Output:
001BE8  3               ;  A = block type
001BE8  3               ;---------------------------------------------------
001BE8  3               
001BE8  3               tstbl:
001BE8  3  AD 4C 11     	lda dispy 		; fetch y coord.
001BEB  3  4A           	lsr a			; bufaddr = y/8
001BEC  3  4A           	lsr a
001BED  3  4A           	lsr a
001BEE  3  85 86        	sta bufaddr
001BF0  3  A9 00        	lda #0
001BF2  3  85 87        	sta bufaddr+1
001BF4  3               
001BF4  3  06 86        	asl bufaddr  		; bufaddr = y/8 * 32
001BF6  3  26 87        	rol bufaddr+1
001BF8  3  06 86        	asl bufaddr
001BFA  3  26 87        	rol bufaddr+1
001BFC  3  06 86        	asl bufaddr
001BFE  3  26 87        	rol bufaddr+1
001C00  3  06 86        	asl bufaddr
001C02  3  26 87        	rol bufaddr+1
001C04  3  06 86        	asl bufaddr
001C06  3  26 87        	rol bufaddr+1
001C08  3               
001C08  3  AD 4B 11     	lda dispx		; x/8
001C0B  3  4A           	lsr a
001C0C  3  4A           	lsr a
001C0D  3  4A           	lsr a
001C0E  3               
001C0E  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
001C0F  3  65 86        	adc bufaddr
001C11  3  69 2D        	adc #<MAP
001C13  3  85 86        	sta bufaddr
001C15  3  A5 87        	lda bufaddr+1
001C17  3  69 26        	adc #>MAP
001C19  3  85 87        	sta bufaddr+1
001C1B  3               
001C1B  3  A0 00        	ldy #0
001C1D  3  B1 86        	lda (bufaddr),y 	; fetch byte there.
001C1F  3  60           	rts
001C20  3               
001C20  3               
001C20  3               ;-------------------------------------------------------------------
001C20  3               ; Jump - if we can.
001C20  3               ; Requires initial speed to be set up in accumulator prior to call.
001C20  3               ;
001C20  3               ; Input:
001C20  3               ;  IX = sprite address
001C20  3               ;-------------------------------------------------------------------
001C20  3               
001C20  3               jump:
001C20  3  A0 0D        	ldy #13
001C22  3  B1 68        	lda (z80_ix),y		; jump table low.
001C24  3  A0 0E        	ldy #14
001C26  3  11 68        	ora (z80_ix),y		; jump table high.
001C28  3  F0 01        	beq :+
001C2A  3  60           	rts			; already in the air.
001C2B  3               :
001C2B  3  A9 1C        	lda #>jtab
001C2D  3  A0 0E        	ldy #14
001C2F  3  91 68        	sta (z80_ix),y		; set jump high.
001C31  3  A9 38        	lda #<jtab		; jump table start.
001C33  3  A0 0D        	ldy #13
001C35  3  91 68        	sta (z80_ix),y		; set jump low.
001C37  3  60           	rts
001C38  3               
001C38  3               ; Jump table.
001C38  3               
001C38  3               jtab:
001C38  3  F8 FA FC     	.byte 248,250,252
001C3B  3  FE FE FF     	.byte 254,254,255
001C3E  3  FF FF 00 00  	.byte 255,255,0,0
001C42  3  00 01 01 01  	.byte 0,1,1,1,2,2
001C46  3  02 02        
001C48  3  04 06 08 08  	.byte 4,6,8,8,8,99
001C4C  3  08 63        
001C4E  3               
001C4E  3               ;------------------------------------------------
001C4E  3               ; Random numbers code.
001C4E  3               ; Pseudo-random number generator, 8-bit.
001C4E  3               ;
001C4E  3               ; Output:
001C4E  3               ;  RND = random number
001C4E  3               ;------------------------------------------------
001C4E  3               
001C4E  3               random:
001C4E  3  AD 4C 16     	lda seed		; get last random number.
001C51  3  0A           	asl a
001C52  3  0A           	asl a
001C53  3  18           	clc
001C54  3  6D 4C 16     	adc seed
001C57  3  18           	clc
001C58  3  69 45        	adc #$45
001C5A  3  8D 4C 16     	sta seed		; store new seed.
001C5D  3  8D 43 11     	sta varrnd		; return number in variable.
001C60  3  60           	rts
001C61  3               
001C61  3               ;--------------------------------------------------------
001C61  3               ; Keys
001C61  3               ;
001C61  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
001C61  3               ;             ||||||||
001C61  3               ;             |||||||+> Right    KEY 0  - X
001C61  3               ;             ||||||+-> Left     KEY 1  - Z
001C61  3               ;             |||||+--> Down     KEY 2  - .
001C61  3               ;             ||||+---> Up       KEY 3  - ;
001C61  3               ;             |||+----> Fire1    KEY 4  - SPC
001C61  3               ;             ||+-----> Fire2    KEY 5  - Q
001C61  3               ;             |+------> Fire3    KEY 6  - P
001C61  3               ;             +-------> Not used
001C61  3               ;
001C61  3               ;                       Option1  KEY 7  - 1
001C61  3               ;                       Option2  KEY 8  - 2
001C61  3               ;                       Option3  KEY 9  - 3
001C61  3               ;                       Option4  KEY 10 - 4
001C61  3               ;--------------------------------------------------------
001C61  3               
001C61  3               ;              X   Z   .   ;  SPC  Q   P
001C61  3  42 61 68 48  keys:   .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
001C65  3  62 10 37     
001C68  3  30 31 11 12          .byte $30,$31,$11,$12                   ; menu options.
001C6C  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
001C6C  3               ;        .byte $21,$11,$01,$92                   ; menu options.
001C6C  3               
001C6C  3  42 61 68 48  jkeys:  .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
001C70  3  62 10 37     
001C73  3  30 31 11 12          .byte $30,$31,$11,$12                   ; menu options.
001C77  3               ;jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
001C77  3               ;        .byte $21,$11,$01,$92                   ; menu options.
001C77  3               
001C77  3               ;--------------------------------------------------------
001C77  3               ; Keyboard test routine.
001C77  3               ;
001C77  3               ; Input:
001C77  3               ;  A = key to read, high nibble=row and low nibble=col
001C77  3               ;
001C77  3               ; Output:
001C77  3               ;  carry clr = key pressed
001C77  3               ;  carry set = key not pressed
001C77  3               ;--------------------------------------------------------
001C77  3               
001C77  3               ktest:
001C77  3  85 61        	sta z80_a		; save key
001C79  3  98           	tya
001C7A  3  48           	pha
001C7B  3               
001C7B  3               ; _BEEB keyboard read
001C7B  3  A5 61        	lda z80_a
001C7D  3  49 80        	eor #$80		; _BEEB just look for this key
001C7F  3  AA           	tax
001C80  3               
001C80  3  A9 79        	lda #$79
001C82  3  20 F4 FF     	jsr OSBYTE
001C85  3               
001C85  3  8A           	txa
001C86  3  30 04        	bmi pressed 	; _BEEB X is negative if key is pressed
001C88  3               
001C88  3  38           	sec			; key not pressed
001C89  3  68           	pla
001C8A  3  A8           	tay
001C8B  3  60           	rts
001C8C  3               
001C8C  3               pressed:
001C8C  3  18           	clc			; key pressed
001C8D  3  68           	pla
001C8E  3  A8           	tay
001C8F  3  60           	rts
001C90  3               
001C90  3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
001C94  3  10 20        
001C96  3               
001C96  3               ;-------------------------------------------------------
001C96  3               ; Joystick and keyboard reading routines.
001C96  3               ;
001C96  3               ; contrl = 0, Keyboard
001C96  3               ;          1, JoyKeyb
001C96  3               ;          2, JoyMMC
001C96  3               ;-------------------------------------------------------
001C96  3               
001C96  3               joykey:
001C96  3  AD 1A 11     	lda contrl 		; control flag.
001C99  3  C9 01        	cmp #1
001C9B  3  D0 03        	bne :+
001C9D  3  4C BB 1C     	jmp joyjoy 		; read keyboard joystick
001CA0  3               :
001CA0  3  C9 02        	cmp #2
001CA2  3  D0 03        	bne :+
001CA4  3  4C D3 1C     	jmp joysin 		; read MMC joystick.
001CA7  3               :
001CA7  3               ; Keyboard controls.
001CA7  3               
001CA7  3  A9 00        	lda #0		 	; zero reading.
001CA9  3  85 64        	sta z80_e
001CAB  3               
001CAB  3  A0 06        	ldy #6	 		; address of last key.
001CAD  3               joyke0:
001CAD  3  B9 61 1C     	lda keys,y 		; get key from table.
001CB0  3  20 77 1C     	jsr ktest		; being pressed?
001CB3  3  26 64        	rol z80_e 		; rotate into reading.
001CB5  3               
001CB5  3  88           	dey		 	; next key.
001CB6  3  10 F5        	bpl joyke0 		; repeat for all keys.
001CB8  3  4C CC 1C     	jmp joyjo1 		; store the value.
001CBB  3               
001CBB  3               ; Keyboard joystick controls.
001CBB  3               
001CBB  3               joyjoy:
001CBB  3  A9 00        	lda #0		 	; zero reading.
001CBD  3  85 64        	sta z80_e
001CBF  3               
001CBF  3  A0 06        	ldy #6	 		; address of last key.
001CC1  3               joyjo3:
001CC1  3  B9 6C 1C     	lda jkeys,y 		; get key from table.
001CC4  3  20 77 1C     	jsr ktest		; being pressed?
001CC7  3  26 64        	rol z80_e 		; rotate into reading.
001CC9  3               
001CC9  3  88           	dey		 	; next key.
001CCA  3  10 F5        	bpl joyjo3 		; repeat for all keys.
001CCC  3               joyjo1:
001CCC  3  A5 64        	lda z80_e 		; copy e register to accumulator.
001CCE  3               joyjo2:
001CCE  3  8D 1B 11     	sta joyval		; remember value.
001CD1  3  60           	rts
001CD2  3               
001CD2  3               
001CD2  3               ; AtoMMC joystick controls.
001CD2  3               ; _BEEB TODO
001CD2  3               ; Set PORTB direction
001CD2  3               
001CD2  3               joyinit:
001CD2  3               .if 0
001CD2  3               	lda #$ff   		; Write value to latch, bits 0-7 input
001CD2  3               	sta DatReg
001CD2  3               	jsr interwritedelay
001CD2  3               	lda #$a1   		; Write direction in latch to PORTB
001CD2  3               	sta CmdReg
001CD2  3               
001CD2  3               wait_until_not_busy:
001CD2  3               	lda CmdReg
001CD2  3               	bmi wait_until_not_busy
001CD2  3               .endif
001CD2  3  60           	rts
001CD3  3               
001CD3  3               ; Get PORTB value
001CD3  3               
001CD3  3               joysin:
001CD3  3               .if 0
001CD3  3               	lda #$a2   		; Read value PORTB in latch
001CD3  3               	sta CmdReg
001CD3  3               	jsr interwritedelay
001CD3  3               
001CD3  3               	lda DatReg		; Read joystick status
001CD3  3               	and #$7f
001CD3  3               	sta joyval
001CD3  3               	sta $f0
001CD3  3               
001CD3  3               	lda keys+5		; check fire2
001CD3  3               	jsr ktest
001CD3  3               	bcs :+
001CD3  3               	lda joyval
001CD3  3               	and #$df
001CD3  3               	sta joyval
001CD3  3               :
001CD3  3               	lda keys+6		; check fire3
001CD3  3               	jsr ktest
001CD3  3               	bcs :+
001CD3  3               	lda joyval
001CD3  3               	and #$bf
001CD3  3               	sta joyval
001CD3  3               :
001CD3  3               	rts
001CD3  3               
001CD3  3               ; Short delay
001CD3  3               ; Enough to intersperse 2 writes to the FATPIC.
001CD3  3               
001CD3  3               interwritedelay:
001CD3  3               	lda  #8
001CD3  3               	sec
001CD3  3               loop:
001CD3  3               	sbc  #1
001CD3  3               	bne  loop
001CD3  3               .endif
001CD3  3  60           	rts
001CD4  3               
001CD4  3               ;tmp_byte:   .byte 0
001CD4  3               
001CD4  3               ;---------------------------------------------------------------
001CD4  3               ; Getkey in column,row format
001CD4  3               ;
001CD4  3               ; Output:
001CD4  3               ;  A = high nibble=row and low nibble=column key in matrix
001CD4  3               ;---------------------------------------------------------------
001CD4  3               
001CD4  3               .if 0
001CD4  3               kget:
001CD4  3               ;	lda #ScrMode		; high-mono mode.
001CD4  3               ;	jsr OSWRCH			; _BEEB VDU
001CD4  3               	stx xtmp
001CD4  3               kget4:
001CD4  3               	jsr READKEY		; read key until pressed
001CD4  3               	cpy #255
001CD4  3               	beq kget4
001CD4  3               	sta rcol		; save column
001CD4  3               	stx rrow		; determine row
001CD4  3               kget3:
001CD4  3               	jsr READKEY		; wait until key released
001CD4  3               	cpy #255
001CD4  3               	bne kget3
001CD4  3               
001CD4  3               	sec			; calculate matrix row
001CD4  3               	lda #10
001CD4  3               	sbc rrow
001CD4  3               	asl a
001CD4  3               	asl a
001CD4  3               	asl a
001CD4  3               	asl a
001CD4  3               	sta rrow
001CD4  3               
001CD4  3               	ldy #255		; find column mask
001CD4  3               kget1:
001CD4  3               	iny
001CD4  3               	lda keymask,y
001CD4  3               	cmp rcol
001CD4  3               	beq kget2
001CD4  3               	jmp kget1
001CD4  3               kget2:
001CD4  3               	tya			; determine column
001CD4  3               	clc
001CD4  3               	adc rrow
001CD4  3               	ldx xtmp
001CD4  3               	rts
001CD4  3               .endif
001CD4  3               
001CD4  3               ;---------------------------------------------------------------
001CD4  3               ; Display message.
001CD4  3               ;
001CD4  3               ; Input:
001CD4  3               ;  A = message number
001CD4  3               ;---------------------------------------------------------------
001CD4  3               
001CD4  3               dmsg:
001CD4  3  AA           	tax
001CD5  3  A9 08        	lda #<msgdat		; pointer to messages.
001CD7  3  85 66        	sta z80_l
001CD9  3  A9 30        	lda #>msgdat
001CDB  3  85 67        	sta z80_h
001CDD  3  20 0D 1E     	jsr getwrd		; get message number.
001CE0  3               dmsg3:
001CE0  3  20 F4 1D     	jsr preprt		; pre-printing stuff.
001CE3  3  20 61 16     	jsr checkx		; make sure we"re in a printable range.
001CE6  3  AD 36 1D     	lda prtmod		; print mode.
001CE9  3  D0 4C        	bne bmsg1		; no, double-height text.
001CEB  3               dmsg0:
001CEB  3  A5 67        	lda z80_h		; store string pointer.
001CED  3  48           	pha
001CEE  3  A5 66        	lda z80_l
001CF0  3  48           	pha
001CF1  3               
001CF1  3  A0 00        	ldy #0
001CF3  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
001CF5  3  29 7F        	and #127		; remove any end marker.
001CF7  3  C9 0D        	cmp #13
001CF9  3  F0 24        	beq dmsg1
001CFB  3  20 04 18     	jsr pchar		; display character.
001CFE  3  20 DA 1D     	jsr nexpos 		; display position.
001D01  3  D0 03        	bne dmsg2		; not on a new line.
001D03  3  20 E3 1D     	jsr nexlin		; next line down.
001D06  3               dmsg2:
001D06  3  68           	pla			; retrieve string pointer
001D07  3  85 66        	sta z80_l
001D09  3  68           	pla
001D0A  3  85 67        	sta z80_h
001D0C  3               
001D0C  3  A0 00        	ldy #0
001D0E  3  B1 66        	lda (z80_hl),y		; fetch last character.
001D10  3  0A           	asl a  			; was it the end?
001D11  3  90 03        	bcc :+
001D13  3  4C A9 16     	jmp dscor2		; yes, job done.
001D16  3               :
001D16  3  E6 66        	inc z80_l		; next character to display.
001D18  3  D0 02        	bne :+
001D1A  3  E6 67        	inc z80_h
001D1C  3               :
001D1C  3  4C EB 1C     	jmp dmsg0
001D1F  3               dmsg1:
001D1F  3  EE 4C 11     	inc dispy
001D22  3  AD 4C 11     	lda dispy
001D25  3  C9 18        	cmp #24
001D27  3  90 05        	bcc dmsg4
001D29  3  A9 00        	lda #0
001D2B  3  8D 4C 11     	sta dispy
001D2E  3               dmsg4:
001D2E  3  A9 00        	lda #0
001D30  3  8D 4B 11     	sta dispx
001D33  3  4C 06 1D     	jmp dmsg2
001D36  3               
001D36  3  00           prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
001D37  3               
001D37  3               ;----------------------------------------------------------
001D37  3               ; Display message in big text.
001D37  3               ;
001D37  3               ; Input:
001D37  3               ;  HL = string pointer
001D37  3               ;----------------------------------------------------------
001D37  3               
001D37  3               bmsg1:
001D37  3  A0 00        	ldy #0
001D39  3  B1 66        	lda (z80_hl),y 		; get character to display.
001D3B  3  29 7F        	and #127		; only want 7 bits.
001D3D  3  C9 0D        	cmp #13
001D3F  3  F0 13        	beq bmsg2
001D41  3  20 6E 1D     	jsr bchar 		; display big char.
001D44  3               bmsg3:
001D44  3  A0 00        	ldy #0
001D46  3  B1 66        	lda (z80_hl),y 		; look at last character.
001D48  3  48           	pha
001D49  3  E6 66        	inc z80_l 		; next character in list.
001D4B  3  D0 02        	bne :+
001D4D  3  E6 67        	inc z80_h
001D4F  3               :
001D4F  3  68           	pla
001D50  3  0A           	asl a  			; was terminator flag set?
001D51  3  90 E4        	bcc bmsg1		; no, keep going.
001D53  3               :
001D53  3  60           	rts
001D54  3               bmsg2:
001D54  3  A9 00        	lda #0
001D56  3  8D 4B 11     	sta dispx
001D59  3  EE 4C 11     	inc dispy
001D5C  3  EE 4C 11     	inc dispy
001D5F  3  AD 4C 11     	lda dispy
001D62  3  C9 17        	cmp #23
001D64  3  90 DE        	bcc bmsg3
001D66  3  A9 00        	lda #0
001D68  3  8D 4C 11     	sta dispy
001D6B  3  4C 44 1D     	jmp bmsg3
001D6E  3               
001D6E  3               ;----------------------------------------------------------
001D6E  3               ; Big character display.
001D6E  3               ;
001D6E  3               ; Input:
001D6E  3               ;  A = character
001D6E  3               ;----------------------------------------------------------
001D6E  3               
001D6E  3               bchar:
001D6E  3  85 64        	sta z80_e		; save char in lb
001D70  3  A9 00        	lda #0
001D72  3  85 65        	sta z80_d		; reset hb
001D74  3               
001D74  3  06 64        	asl z80_e 		; multiply char by 8.
001D76  3  26 65        	rol z80_d
001D78  3  06 64        	asl z80_e
001D7A  3  26 65        	rol z80_d
001D7C  3  06 64        	asl z80_e
001D7E  3  26 65        	rol z80_d		; de = a*8
001D80  3               
001D80  3  18           	clc			; de = FontPtr + a*8
001D81  3  A5 64        	lda z80_e
001D83  3  6D 77 2C     	adc FontPtr 		; address of font.
001D86  3  85 64        	sta z80_e
001D88  3  A5 65        	lda z80_d
001D8A  3  6D 78 2C     	adc FontPtr+1
001D8D  3  85 65        	sta z80_d
001D8F  3               
001D8F  3  20 A6 17     	jsr gprad 		; get screen address.
001D92  3               
001D92  3  A2 00        	ldx #0			; height of character in font.
001D94  3               bchar0:
001D94  3  A0 00        	ldy #0
001D96  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
001D98  3               
001D98  3  49 00        	eor #TxtInvert		; Invert
001D9A  3               
001D9A  3  91 80        	sta (scraddr),y
001D9C  3  48           	pha
001D9D  3  20 E5 20     	jsr nline 		; next line down.
001DA0  3  68           	pla
001DA1  3  91 80        	sta (scraddr),y
001DA3  3  20 E5 20     	jsr nline 		; next line down.
001DA6  3               
001DA6  3  18           	clc
001DA7  3  E6 64        	inc z80_e 		; next line of font.
001DA9  3  D0 02        	bne :+
001DAB  3  E6 65        	inc z80_d
001DAD  3               :
001DAD  3  E8           	inx
001DAE  3  E0 08        	cpx #8
001DB0  3  D0 E2        	bne bchar0
001DB2  3               	
001DB2  3  20 DA 1D     	jsr nexpos		; display position.
001DB5  3  D0 06        	bne bchar2 		; not on a new line.
001DB7  3               bchar3:
001DB7  3  EE 4C 11     	inc dispy
001DBA  3  20 E3 1D     	jsr nexlin 		; next line check.
001DBD  3               bchar2:
001DBD  3  4C A9 16     	jmp dscor2		; tidy up line and column variables.
001DC0  3               
001DC0  3               
001DC0  3               ;-------------------------------------------------
001DC0  3               ; Display a character.
001DC0  3               ;
001DC0  3               ; Input:
001DC0  3               ;  A = character
001DC0  3               ;-------------------------------------------------
001DC0  3               
001DC0  3               achar:
001DC0  3  85 63        	sta z80_b 		; copy to b.
001DC2  3  20 F4 1D     	jsr preprt 		; get ready to print.
001DC5  3  A5 63        	lda z80_b		; character in accumulator.
001DC7  3  AE 36 1D     	ldx prtmod 		; print mode.
001DCA  3  F0 03        	beq :+
001DCC  3  4C 6E 1D     	jmp bchar 		; no, double-height text.
001DCF  3               :
001DCF  3  20 04 18     	jsr pchar 		; display character.
001DD2  3  20 DA 1D     	jsr nexpos 		; display position.
001DD5  3  F0 E0        	beq bchar3		; next line down.
001DD7  3  4C BD 1D     	jmp bchar2 		; tidy up.
001DDA  3               
001DDA  3               
001DDA  3               ;-------------------------------------------------
001DDA  3               ; Get next print column position.
001DDA  3               ;-------------------------------------------------
001DDA  3               
001DDA  3               nexpos:
001DDA  3  EE 4B 11     	inc dispx		; move along one position.
001DDD  3  AD 4B 11     	lda dispx 		; get coordinate.
001DE0  3  29 1F        	and #31
001DE2  3  60           	rts 			; return with status in zero flag.
001DE3  3               
001DE3  3               ;-------------------------------------------------
001DE3  3               ; Get next print line position.
001DE3  3               ;-------------------------------------------------
001DE3  3               
001DE3  3               nexlin:
001DE3  3  EE 4C 11     	inc dispy 		; newline.
001DE6  3  AD 4C 11     	lda dispy		; vertical position.
001DE9  3  C9 18        	cmp #24			; past screen edge?
001DEB  3  B0 01        	bcs :+
001DED  3  60           	rts			; no, still okay.
001DEE  3               :
001DEE  3  A9 00        	lda #0			; restart at top.
001DF0  3  8D 4C 11     	sta dispy
001DF3  3  60           	rts
001DF4  3               
001DF4  3               ;--------------------------------------------------------
001DF4  3               ; Pre-print preliminaries.
001DF4  3               ;--------------------------------------------------------
001DF4  3               
001DF4  3               preprt:
001DF4  3  AD 77 2C     	lda FontPtr		; font pointer.
001DF7  3  8D 5F 16     	sta grbase		; set up graphics base.
001DFA  3  AD 78 2C     	lda FontPtr+1
001DFD  3  8D 60 16     	sta grbase+1
001E00  3               prescr:
001E00  3  AD 40 11     	lda charx 		; display coordinates.
001E03  3  8D 4B 11     	sta dispx		; set up general coordinates.
001E06  3  AD 41 11     	lda chary
001E09  3  8D 4C 11     	sta dispy
001E0C  3  60           	rts
001E0D  3               
001E0D  3               ;--------------------------------------------------------------
001E0D  3               ; Get messagenr x in hl
001E0D  3               ;
001E0D  3               ; Input:
001E0D  3               ;  HL = pointer to message list
001E0D  3               ;  X  = message number.
001E0D  3               ;--------------------------------------------------------------
001E0D  3               
001E0D  3               getwrd:
001E0D  3  E0 00        	cpx #0
001E0F  3  D0 01        	bne:+ 			; first word in list?
001E11  3  60           	rts 			; yep, don't search.
001E12  3               :
001E12  3  A0 00        	ldy #0
001E14  3               getwd0:
001E14  3  B1 66        	lda (z80_hl),y
001E16  3  48           	pha
001E17  3  E6 66        	inc z80_l
001E19  3  D0 02        	bne :+
001E1B  3  E6 67        	inc z80_h
001E1D  3               :
001E1D  3  68           	pla
001E1E  3  C9 80        	cmp #128		; found end?
001E20  3  30 F2        	bmi getwd0		; no, carry on.
001E22  3  CA           	dex			; until we have right number.
001E23  3  D0 EF        	bne getwd0
001E25  3  60           	rts
001E26  3               
001E26  3               ;-----------------------------------------------------------
001E26  3               ; Bubble sort.
001E26  3               ;-----------------------------------------------------------
001E26  3               
001E26  3               bsort:
001E26  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
001E28  3  8D 5E 1E     	sta qscnt
001E2B  3               
001E2B  3  A9 4E        	lda #<sprtab 		; sprite table.
001E2D  3  85 68        	sta z80_x
001E2F  3  A9 25        	lda #>sprtab
001E31  3  85 69        	sta z80_i
001E33  3               bsort0:
001E33  3  A0 00        	ldy #0
001E35  3  B1 68        	lda (z80_ix),y 		; first sprite type.
001E37  3  C9 FF        	cmp #255 		; is it switched off?
001E39  3  F0 32        	beq swemp		; yes, may need to switch another in here.
001E3B  3               
001E3B  3  A0 11        	ldy #TABSIZ
001E3D  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
001E3F  3  C9 FF        	cmp #255 		; is it enabled?
001E41  3  F0 0A        	beq bsort2 		; no, nothing to swap.
001E43  3               
001E43  3  A0 14        	ldy #TABSIZ+3
001E45  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
001E47  3  A0 03        	ldy #3
001E49  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
001E4B  3  90 12        	bcc bsort1		; next sprite is higher - may need to switch.
001E4D  3               bsort2:
001E4D  3  18           	clc
001E4E  3  A5 68        	lda z80_x
001E50  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
001E52  3  85 68        	sta z80_x
001E54  3  90 02        	bcc :+
001E56  3  E6 69        	inc z80_i
001E58  3               :
001E58  3  CE 5E 1E     	dec qscnt 
001E5B  3  D0 D6        	bne bsort0		; repeat for remaining sprites.
001E5D  3  60           	rts
001E5E  3               
001E5E  3  00           qscnt:	.byte 0
001E5F  3               
001E5F  3               bsort1:
001E5F  3  A0 11        	ldy #TABSIZ
001E61  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
001E63  3  C9 FF        	cmp #255		; is it enabled?
001E65  3  F0 E6        	beq bsort2		; no, nothing to swap.
001E67  3  20 7B 1E     	jsr swspr		; swap positions.
001E6A  3  4C 4D 1E     	jmp bsort2
001E6D  3               swemp:
001E6D  3  A0 11        	ldy #TABSIZ
001E6F  3  B1 68        	lda (z80_ix),y		; next table entry.
001E71  3  C9 FF        	cmp #255		; is that one on?
001E73  3  F0 D8        	beq bsort2		; no, nothing to swap.
001E75  3  20 7B 1E     	jsr swspr		; swap positions.
001E78  3  4C 4D 1E     	jmp bsort2
001E7B  3               
001E7B  3               ; Swap sprites.
001E7B  3               
001E7B  3               swspr:
001E7B  3  A5 68        	lda z80_x		; table address 
001E7D  3  85 64        	sta z80_e		; copy to de pair.
001E7F  3  85 66        	sta z80_l		; copy to hl pair.
001E81  3  A5 69        	lda z80_i
001E83  3  85 67        	sta z80_h
001E85  3  85 65        	sta z80_d
001E87  3               
001E87  3  18           	clc
001E88  3  A5 66        	lda z80_l
001E8A  3  69 11        	adc #TABSIZ		; distance to second entry.
001E8C  3  85 66        	sta z80_l
001E8E  3  90 02        	bcc :+
001E90  3  E6 67        	inc z80_h
001E92  3               :
001E92  3  A9 11        	lda #TABSIZ		; bytes to swap.
001E94  3  85 63        	sta z80_b
001E96  3  A0 00        	ldy #0
001E98  3               swspr0:
001E98  3  B1 66        	lda (z80_hl),y		; fetch second byte.
001E9A  3  48           	pha
001E9B  3  B1 64        	lda (z80_de),y 		; fetch first byte.
001E9D  3  91 66        	sta (z80_hl),y 		; copy to second.
001E9F  3  68           	pla
001EA0  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
001EA2  3               
001EA2  3  E6 64        	inc z80_e 		; next byte.
001EA4  3  D0 02        	bne :+	
001EA6  3  E6 65        	inc z80_d
001EA8  3               :
001EA8  3  E6 66        	inc z80_l 		; next byte.
001EAA  3  D0 02        	bne :+
001EAC  3  E6 67        	inc z80_h
001EAE  3               :
001EAE  3  C6 63        	dec z80_b
001EB0  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
001EB2  3  60           	rts
001EB3  3               
001EB3  3               ;----------------------------------------------------
001EB3  3               ; Process sprites.
001EB3  3               ;----------------------------------------------------
001EB3  3               
001EB3  3               pspr:
001EB3  3  A9 0C        	lda #NUMSPR		; sprites to process.
001EB5  3  8D DC 1E     	sta sprptr
001EB8  3               
001EB8  3  A9 4E        	lda #<sprtab 		; sprite table.
001EBA  3  85 68        	sta z80_x
001EBC  3  A9 25        	lda #>sprtab
001EBE  3  85 69        	sta z80_i
001EC0  3               pspr1:
001EC0  3  A0 00        	ldy #0
001EC2  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
001EC4  3  C9 09        	cmp #9 			; within range of sprite types?
001EC6  3  B0 03        	bcs :+
001EC8  3  20 DD 1E     	jsr pspr2 		; yes, process this one.
001ECB  3               :
001ECB  3  18           	clc
001ECC  3  A5 68        	lda z80_x
001ECE  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
001ED0  3  85 68        	sta z80_x
001ED2  3  90 02        	bcc :+
001ED4  3  E6 69        	inc z80_i		; next sprite.
001ED6  3               :
001ED6  3  CE DC 1E     	dec sprptr 		; repeat for remaining sprites.
001ED9  3  D0 E5        	bne pspr1
001EDB  3  60           	rts
001EDC  3               
001EDC  3  00           sprptr:	.byte 0
001EDD  3               
001EDD  3               pspr2:
001EDD  3  A5 68        	lda z80_x 		; store original sprite pointer.
001EDF  3  8D 2A 1F     	sta ogptr
001EE2  3  A5 69        	lda z80_i
001EE4  3  8D 2B 1F     	sta ogptr+1
001EE7  3  20 F5 1E     	jsr pspr3		; do the routine.
001EEA  3               rtorg:
001EEA  3  AD 2A 1F     	lda ogptr 		; restore original pointer to sprite.
001EED  3  85 68        	sta z80_x
001EEF  3  AD 2B 1F     	lda ogptr+1
001EF2  3  85 69        	sta z80_i
001EF4  3               rtorg0:
001EF4  3  60           	rts
001EF5  3               
001EF5  3               pspr3:
001EF5  3  A9 2C        	lda #<evtyp0		; sprite type events list.
001EF7  3  85 66        	sta z80_l
001EF9  3  A9 1F        	lda #>evtyp0
001EFB  3  85 67        	sta z80_h
001EFD  3               pspr4:
001EFD  3  B1 68        	lda (z80_ix),y
001EFF  3  0A           	asl a			; double accumulator.
001F00  3  18           	clc
001F01  3  65 66        	adc z80_l
001F03  3  85 66        	sta z80_l
001F05  3  90 02        	bcc :+
001F07  3  E6 67        	inc z80_h
001F09  3               :
001F09  3  B1 66        	lda (z80_hl),y
001F0B  3  85 64        	sta z80_e 		; copy to de.
001F0D  3  48           	pha
001F0E  3               
001F0E  3  E6 66        	inc z80_l 		; next byte of address.
001F10  3  D0 02        	bne :+
001F12  3  E6 67        	inc z80_h
001F14  3               :
001F14  3  B1 66        	lda (z80_hl),y 		; address high.
001F16  3  85 65        	sta z80_d
001F18  3               
001F18  3  48           	pha	 		; swap address into hl.
001F19  3  A5 67        	lda z80_h
001F1B  3  85 65        	sta z80_d
001F1D  3  68           	pla
001F1E  3  85 67        	sta z80_h
001F20  3  68           	pla
001F21  3  85 66        	sta z80_l
001F23  3  A5 66        	lda z80_l
001F25  3  85 64        	sta z80_e
001F27  3               	
001F27  3  6C 66 00     	jmp (z80_hl) 		; go there.
001F2A  3               
001F2A  3  00 00        ogptr:	.word 0			; original sprite pointer.
001F2C  3               
001F2C  3               ; Address of each sprite type's routine.
001F2C  3               
001F2C  3  88 2C        evtyp0:	.word evnt00
001F2E  3  1B 2D        evtyp1:	.word evnt01
001F30  3  51 2E        evtyp2:	.word evnt02
001F32  3  52 2E        evtyp3:	.word evnt03
001F34  3  53 2E        evtyp4:	.word evnt04
001F36  3  54 2E        evtyp5:	.word evnt05
001F38  3  55 2E        evtyp6:	.word evnt06
001F3A  3  56 2E        evtyp7:	.word evnt07
001F3C  3  57 2E        evtyp8:	.word evnt08
001F3E  3               
001F3E  3               ;--------------------------------------------------------------
001F3E  3               ; Display sprites.
001F3E  3               ;
001F3E  3               ; Input:
001F3E  3               ;  IX = sprite table
001F3E  3               ;--------------------------------------------------------------
001F3E  3               
001F3E  3               dspr:
001F3E  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
001F40  3  8D D1 1F     	sta sprcnt
001F43  3               dspr0:
001F43  3  A0 00        	ldy #0
001F45  3  B1 68        	lda (z80_ix),y 		; get sprite type.
001F47  3  C9 FF        	cmp #255 		; is it enabled?
001F49  3  D0 43        	bne dspr1 		; yes, it needs deleting.
001F4B  3               dspr5:
001F4B  3  A0 05        	ldy #5
001F4D  3  B1 68        	lda (z80_ix),y 		; new type.
001F4F  3  C9 FF        	cmp #255		; is it enabled?
001F51  3  D0 78        	bne dspr3 		; yes, it needs drawing.
001F53  3               dspr2:
001F53  3  A0 05        	ldy #5
001F55  3  B1 68        	lda (z80_ix),y 		; copy new type.
001F57  3  A0 00        	ldy #0
001F59  3  91 68        	sta (z80_ix),y
001F5B  3  A0 06        	ldy #6
001F5D  3  B1 68        	lda (z80_ix),y 		; copy new image number.
001F5F  3  A0 01        	ldy #1
001F61  3  91 68        	sta (z80_ix),y
001F63  3  A0 07        	ldy #7
001F65  3  B1 68        	lda (z80_ix),y 		; copy new frame.
001F67  3  A0 02        	ldy #2
001F69  3  91 68        	sta (z80_ix),y
001F6B  3  A0 08        	ldy #8
001F6D  3  B1 68        	lda (z80_ix),y 		; copy new y.
001F6F  3  A0 03        	ldy #3
001F71  3  91 68        	sta (z80_ix),y
001F73  3  A0 09        	ldy #9
001F75  3  B1 68        	lda (z80_ix),y 		; copy new x.
001F77  3  A0 04        	ldy #4
001F79  3  91 68        	sta (z80_ix),y
001F7B  3               
001F7B  3  18           	clc
001F7C  3  A5 68        	lda z80_x
001F7E  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
001F80  3  85 68        	sta z80_x
001F82  3  A5 69        	lda z80_i
001F84  3  69 00        	adc #0
001F86  3  85 69        	sta z80_i 		; next sprite.
001F88  3  CE D1 1F     	dec sprcnt
001F8B  3  D0 B6        	bne dspr0		; repeat for remaining sprites.
001F8D  3  60           	rts
001F8E  3               dspr1:
001F8E  3  A0 05        	ldy #5
001F90  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
001F92  3  C9 FF        	cmp #255		; is this enabled?
001F94  3  D0 06        	bne dspr4 		; yes, display both.
001F96  3               dspr6:
001F96  3  20 61 20     	jsr sspria 		; show single sprite.
001F99  3  4C 53 1F     	jmp dspr2
001F9C  3               
001F9C  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
001F9C  3               
001F9C  3               dspr4:
001F9C  3  A0 04        	ldy #4
001F9E  3  B1 68        	lda (z80_ix),y		; old x.
001FA0  3  A0 09        	ldy #9
001FA2  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
001FA4  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
001FA6  3               
001FA6  3  A0 03        	ldy #3
001FA8  3  B1 68        	lda (z80_ix),y		; old y.
001FAA  3  A0 08        	ldy #8
001FAC  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001FAE  3  D0 15        	bne dspr7		; they differ, need to redraw.
001FB0  3               
001FB0  3  A0 02        	ldy #2
001FB2  3  B1 68        	lda (z80_ix),y 		; old frame.
001FB4  3  A0 07        	ldy #7
001FB6  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001FB8  3  4C C5 1F     	jmp dspr7 		; they differ, need to redraw.
001FBB  3               
001FBB  3  A0 01        	ldy #1
001FBD  3  B1 68        	lda (z80_ix),y 		; old image.
001FBF  3  A0 06        	ldy #6
001FC1  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001FC3  3  F0 8E        	beq dspr2		; everything is the same, don't redraw.
001FC5  3               dspr7:
001FC5  3  20 79 20     	jsr sspric 		; delete old sprite, draw new one simultaneously.
001FC8  3  4C 53 1F     	jmp dspr2
001FCB  3               dspr3:
001FCB  3  20 73 20     	jsr ssprib 		; show single sprite.
001FCE  3  4C 53 1F     	jmp dspr2
001FD1  3               
001FD1  3  00           sprcnt:	.byte 0
001FD2  3               
001FD2  3               ;-----------------------------------------
001FD2  3               ; Get sprite address calculations.
001FD2  3               ; gspran = new sprite, gsprad = old sprite.
001FD2  3               ;
001FD2  3               ; Input:
001FD2  3               ;  IX = sprite address
001FD2  3               ;-----------------------------------------
001FD2  3               
001FD2  3               gspran:
001FD2  3  A0 08        	ldy #8
001FD4  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
001FD6  3  8D 4C 11     	sta dispy
001FD9  3  A0 09        	ldy #9
001FDB  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
001FDD  3  8D 4B 11     	sta dispx
001FE0  3  A0 06        	ldy #6
001FE2  3  B1 68        	lda (z80_ix),y 		; new sprite image.
001FE4  3  20 5D 23     	jsr gfrm		; fetch start frame for this sprite.
001FE7  3               
001FE7  3  A0 00        	ldy #0
001FE9  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
001FEB  3  A0 07        	ldy #7
001FED  3  18           	clc
001FEE  3  71 68        	adc (z80_ix),y 		; new add frame number.
001FF0  3  4C 11 20     	jmp gspra0
001FF3  3               
001FF3  3               ;-----------------------------------------
001FF3  3               ; Calculate old sprite address
001FF3  3               ;
001FF3  3               ; Input:
001FF3  3               ;  IX = sprite address
001FF3  3               ;
001FF3  3               ; Output:
001FF3  3               ;  B  = right byte mask
001FF3  3               ;  C  = left byte mask
001FF3  3               ;  DE = spriteframe address
001FF3  3               ;  scraddr = screenaddress(dispx,dispy)
001FF3  3               ;-----------------------------------------
001FF3  3               
001FF3  3               gsprad:
001FF3  3  A0 03        	ldy #3
001FF5  3  B1 68        	lda (z80_ix),y		; y coordinate.
001FF7  3  8D 4C 11     	sta dispy
001FFA  3  A0 04        	ldy #4
001FFC  3  B1 68        	lda (z80_ix),y		; x coordinate.
001FFE  3  8D 4B 11     	sta dispx
002001  3  A0 01        	ldy #1
002003  3  B1 68        	lda (z80_ix),y 		; sprite image.
002005  3  20 5D 23     	jsr gfrm 		; fetch start frame for this sprite.
002008  3               
002008  3  A0 00        	ldy #0
00200A  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
00200C  3  A0 02        	ldy #2
00200E  3  18           	clc
00200F  3  71 68        	adc (z80_ix),y 		; add frame number.
002011  3               gspra0:
002011  3  4A           	lsr a	  		; multiply by 128.
002012  3  85 65        	sta z80_d 		; store in d.
002014  3  A9 00        	lda #0
002016  3  6A           	ror a
002017  3  85 64        	sta z80_e 		; got low byte.
002019  3               
002019  3  18           	clc 			; address of play sprites.
00201A  3  A5 64        	lda z80_e
00201C  3  69 7F        	adc #<sprgfx
00201E  3  85 64        	sta z80_e
002020  3  A5 65        	lda z80_d
002022  3  69 30        	adc #>sprgfx
002024  3  85 65        	sta z80_d
002026  3               
002026  3  AD 4B 11     	lda dispx 		; y coordinate.
002029  3  29 06        	and #6 			; position within byte boundary.
00202B  3  AA           	tax	 		; low byte of table displacement.
00202C  3               
00202C  3  0A           	asl a	  		; multiply by 32.
00202D  3  0A           	asl a  			; already a multiple
00202E  3  0A           	asl a  			; of 2, so just 4
00202F  3  0A           	asl a  			; shifts needed.
002030  3               
002030  3  18           	clc 			; add to sprite address.
002031  3  65 64        	adc z80_e
002033  3  85 64        	sta z80_e
002035  3  90 02        	bcc :+
002037  3  E6 65        	inc z80_d
002039  3               :
002039  3  BD 59 20     	lda spmask,x		 ; pointer to mask table.
00203C  3  85 62        	sta z80_c 		; left mask.
00203E  3  BD 5A 20     	lda spmask+1,x
002041  3  85 63        	sta z80_b 		; right mask.
002043  3               
002043  3               ;------------------------------------------------------------------
002043  3               ; Drop into screen address routine.
002043  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
002043  3               ;------------------------------------------------------------------
002043  3               
002043  3               scadd:
002043  3  AE 4C 11     	ldx dispy
002046  3  AD 4B 11     	lda dispx
002049  3  29 F8        	and #$f8
00204B  3  18           	clc
00204C  3  7D 2D 29     	adc SCADTB_lb,x
00204F  3  85 80        	sta scraddr
002051  3  BD 2D 2A     	lda SCADTB_hb,x
002054  3  69 00        	adc #0
002056  3  85 81        	sta scraddr+1
002058  3  60           	rts
002059  3               
002059  3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
00205D  3  0F F0 03 FC  
002061  3               
002061  3               
002061  3               ;-----------------------------------------------------------------
002061  3               ; These are the sprite routines.
002061  3               ; sspria = single sprite, old (ix).
002061  3               ; ssprib = single sprite, new (ix+5).
002061  3               ; sspric = both sprites, old (ix) and new (ix+5).
002061  3               ;-----------------------------------------------------------------
002061  3               
002061  3               sspria:
002061  3  20 F3 1F     	jsr gsprad		; get old sprite address.
002064  3               sspri2:
002064  3  A9 10        	lda #16			; vertical lines.
002066  3  8D 72 20     	sta acnt
002069  3               sspri0:
002069  3  20 9C 20     	jsr dline		; draw a line.
00206C  3  CE 72 20     	dec acnt
00206F  3  D0 F8        	bne sspri0		; repeat 16 times
002071  3  60           	rts
002072  3               
002072  3  00           acnt:	.byte 0
002073  3               
002073  3               ;-----------------------------------------------------------------
002073  3               
002073  3               ssprib:
002073  3  20 D2 1F     	jsr gspran 		; get new sprite address.
002076  3  4C 64 20     	jmp sspri2
002079  3               
002079  3               ;-----------------------------------------------------------------
002079  3               
002079  3               ccnt = $7c
002079  3               
002079  3               sspric:
002079  3  20 F3 1F     	jsr gsprad 		; get old sprite address.
00207C  3  20 74 38     	jsr exx  		; store addresses.
00207F  3  20 D2 1F     	jsr gspran 		; get new sprite addresses.
002082  3               
002082  3  A9 0F        	lda #15
002084  3  85 7C        	sta ccnt
002086  3               lloop:
002086  3  20 9C 20     	jsr dline 		; draw a line.
002089  3  20 74 38     	jsr exx  		; restore old addresses.
00208C  3  20 9C 20     	jsr dline 		; delete a line.
00208F  3  20 74 38     	jsr exx  		; flip to new sprite addresses.
002092  3  C6 7C        	dec ccnt
002094  3  D0 F0        	bne lloop
002096  3               
002096  3  20 9C 20     	jsr dline		; draw a line.
002099  3  20 74 38     	jsr exx 		; restore old addresses.
00209C  3               
00209C  3               ;-------------------------------------------------------------
00209C  3               ; Drop through.
00209C  3               ; Line drawn, now work out next target address.
00209C  3               ;
00209C  3               ; Input:
00209C  3               ;  B  = right mask
00209C  3               ;  C  = left mask
00209C  3               ;  DE = spriteaddress
00209C  3               ;  scraddr = screen address
00209C  3               ;-------------------------------------------------------------
00209C  3               
00209C  3               dline:
00209C  3  A0 00        	ldy #0
00209E  3  B1 64        	lda (z80_de),y 		; graphic data.
0020A0  3  25 62        	and z80_c 		; mask away what's not needed.
0020A2  3  51 80        	eor (scraddr),y 	; XOR with what's there.
0020A4  3  91 80        	sta (scraddr),y 	; bung it in.
0020A6  3               
0020A6  3               ; _BEEB screen arrangement
0020A6  3  18           	clc
0020A7  3  A5 80        	lda scraddr
0020A9  3  69 10        	adc #16
0020AB  3  85 80        	sta scraddr
0020AD  3  90 02        	bcc :+
0020AF  3  E6 81        	inc scraddr+1
0020B1  3               :
0020B1  3               
0020B1  3  B1 64        	lda (z80_de),y 		; fetch data.
0020B3  3  25 63        	and z80_b 		; mask away unwanted bits.
0020B5  3  51 80        	eor (scraddr),y 	; XOR with what's there.
0020B7  3  91 80        	sta (scraddr),y 	; bung it in.
0020B9  3               
0020B9  3  E6 64        	inc z80_e 		; next graphic.
0020BB  3  D0 02        	bne :+
0020BD  3  E6 65        	inc z80_d
0020BF  3               :
0020BF  3               ; _BEEB screen arrangement
0020BF  3  38           	sec
0020C0  3  A5 80        	lda scraddr 		; one character cell to the left.
0020C2  3  E9 08        	sbc #8
0020C4  3  85 80        	sta scraddr
0020C6  3  A5 81        	lda scraddr+1
0020C8  3  E9 00        	sbc #0
0020CA  3  85 81        	sta scraddr+1
0020CC  3               
0020CC  3  B1 64        	lda (z80_de),y 		; second bit of data.
0020CE  3  51 80        	eor (scraddr),y 	; XOR with what's there.
0020D0  3  91 80        	sta (scraddr),y 	; bung it in.
0020D2  3               
0020D2  3  E6 64        	inc z80_e 		; point to next line of data.
0020D4  3  D0 02        	bne :+
0020D6  3  E6 65        	inc z80_d
0020D8  3               :
0020D8  3               ; _BEEB screen arrangement
0020D8  3  38           	sec
0020D9  3  A5 80        	lda scraddr 		; another char left.
0020DB  3  E9 08        	sbc #8
0020DD  3  85 80        	sta scraddr
0020DF  3  A5 81        	lda scraddr+1
0020E1  3  E9 00        	sbc #0
0020E3  3  85 81        	sta scraddr+1
0020E5  3               
0020E5  3               ;----------------------------------------------------------------------
0020E5  3               ; Line drawn, now work out next target address.
0020E5  3               ;----------------------------------------------------------------------
0020E5  3               
0020E5  3               ; _BEEB screen arrangement
0020E5  3               
0020E5  3               nline:
0020E5  3  A5 80        	lda scraddr 		; get low byte of address.
0020E7  3  29 07        	and #7				
0020E9  3  C9 07        	cmp #7				; is this last line of row?
0020EB  3  F0 03        	beq beeb_next_row
0020ED  3               
0020ED  3               	; within same row
0020ED  3  E6 80        	inc scraddr			; new low byte of address.
0020EF  3               ;	bne :+
0020EF  3               ;	inc scraddr+1		; new high byte of address.
0020EF  3               :
0020EF  3  60           	rts
0020F0  3               
0020F0  3               beeb_next_row:
0020F0  3  18           	clc
0020F1  3  A5 80        	lda scraddr
0020F3  3  69 39        	adc #<(ScreenRowBytes-7)
0020F5  3  85 80        	sta scraddr			; new low byte of address.
0020F7  3  A5 81        	lda scraddr+1
0020F9  3  69 01        	adc #>(ScreenRowBytes-7)
0020FB  3  85 81        	sta scraddr+1		; new high byte of address.
0020FD  3  60           	rts
0020FE  3               
0020FE  3               ;-----------------------------------------------------------
0020FE  3               ; Animates a sprite.
0020FE  3               ;
0020FE  3               ; Input:
0020FE  3               ;  IX = sprite address
0020FE  3               ;  HL = last sprite address
0020FE  3               ;-----------------------------------------------------------
0020FE  3               
0020FE  3               animsp:
0020FE  3  A0 06        	ldy #6
002100  3  B1 68        	lda (z80_ix),y		; sprite image
002102  3  20 5D 23     	jsr gfrm		; get frame data.
002105  3               
002105  3  E6 66        	inc z80_l		; point to frames.
002107  3  D0 02        	bne :+
002109  3  E6 67        	inc z80_h
00210B  3               :
00210B  3  A0 07        	ldy #7
00210D  3  B1 68        	lda (z80_ix),y		; sprite frame.
00210F  3  18           	clc
002110  3  69 01        	adc #1			; next one along.
002112  3  A0 00        	ldy #0
002114  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
002116  3  90 02        	bcc anims0		; no, not yet.
002118  3  A9 00        	lda #0			; start at first frame.
00211A  3               anims0:
00211A  3  A0 07        	ldy #7
00211C  3  91 68        	sta (z80_ix),y		; new frame.
00211E  3  60           	rts
00211F  3               
00211F  3               ;--------------------------------------------------------------
00211F  3               ; Animate back
00211F  3               ;
00211F  3               ; Input:
00211F  3               ;  IX = sprite address
00211F  3               ;  HL = last sprite address
00211F  3               ;--------------------------------------------------------------
00211F  3               
00211F  3               animbk:
00211F  3  A0 06        	ldy #6
002121  3  B1 68        	lda (z80_ix),y		; sprite image.
002123  3  20 5D 23     	jsr gfrm		; get frame data.
002126  3               
002126  3  E6 66        	inc z80_l 		; point to frames.
002128  3  D0 02        	bne :+
00212A  3  E6 67        	inc z80_h
00212C  3               :
00212C  3  A0 07        	ldy #7
00212E  3  B1 68        	lda (z80_ix),y 		; sprite frame.
002130  3  F0 03        	beq :+
002132  3  4C 39 21     	jmp rtanb0 		; yes, start at end.
002135  3               :
002135  3  A0 00        	ldy #0
002137  3  B1 66        	lda (z80_hl),y 		; last sprite.
002139  3               rtanb0:
002139  3  38           	sec
00213A  3  E9 01        	sbc #1			; next one along.
00213C  3  4C 1A 21     	jmp anims0		; set new frame.
00213F  3               
00213F  3               ;--------------------------------------------------------------
00213F  3               ; Check for collision with other sprite, strict enforcement.
00213F  3               ;
00213F  3               ; Input:
00213F  3               ;  b		= sprite to test for
00213F  3               ;  ix		= current sprite pointer
00213F  3               ;
00213F  3               ; global:	b
00213F  3               ; local:	x,y,hl,de,skptr
00213F  3               ; calls:	-
00213F  3               ;--------------------------------------------------------------
00213F  3               
00213F  3               sktyp:
00213F  3  A9 4E        	lda #<sprtab				; sprite table.
002141  3  85 66        	sta z80_l
002143  3  A9 25        	lda #>sprtab
002145  3  85 67        	sta z80_h
002147  3               numsp2:
002147  3  A9 0C        	lda #NUMSPR				; number of sprites.
002149  3  8D 82 21     	sta sktptr
00214C  3               sktyp0:
00214C  3  A5 66        	lda z80_l 				; store pointer to sprite.
00214E  3  8D 80 21     	sta skptr
002151  3  A5 67        	lda z80_h
002153  3  8D 81 21     	sta skptr+1
002156  3               
002156  3  A0 00        	ldy #0
002158  3  B1 66        	lda (z80_hl),y 				; get sprite type.
00215A  3  C5 63        	cmp z80_b				; is it the type we seek?
00215C  3  F0 25        	beq coltyp				; yes, we can use this one.
00215E  3               :
00215E  3               sktyp1:
00215E  3  18           	clc
00215F  3  AD 80 21     	lda skptr				; retrieve sprite pointer.
002162  3  69 11        	adc #TABSIZ				; size of each entry.
002164  3  85 66        	sta z80_l
002166  3  AD 81 21     	lda skptr+1
002169  3  69 00        	adc #0
00216B  3  85 67        	sta z80_h
00216D  3  CE 82 21     	dec sktptr					; one less iteration.
002170  3  D0 DA        	bne sktyp0				; keep going until we find a slot.
002172  3               :
002172  3  A9 00        	lda #0					; default to ROM address - no sprite.
002174  3  85 66        	sta z80_l
002176  3  85 67        	sta z80_h
002178  3  8D 80 21     	sta skptr				; store pointer to sprite.
00217B  3  8D 81 21     	sta skptr+1
00217E  3               
00217E  3  18           	clc					; don't return with zero flag set.
00217F  3  60           	rts 					; didn't find one.
002180  3               
002180  3  00 00        skptr:	.word 0					; search pointer.
002182  3  00           sktptr:	.byte 0
002183  3               
002183  3               coltyp:
002183  3  A0 00        	ldy #0
002185  3  B1 68        	lda (z80_ix),y				; current sprite type.
002187  3  C5 63        	cmp z80_b				; seeking sprite of same type?
002189  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
00218B  3               colty0:
00218B  3  A0 09        	ldy #9					; distance to x position in table.
00218D  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
00218F  3  85 64        	sta z80_e
002191  3  88           	dey
002192  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
002194  3  85 65        	sta z80_d
002196  3               
002196  3               ; Drop into collision detection.
002196  3               
002196  3               colc16:
002196  3  A0 09        	ldy #9
002198  3  B1 68        	lda (z80_ix),y			 	; x coord.
00219A  3  38           	sec					; subtract x.
00219B  3  E5 64        	sbc z80_e
00219D  3  B0 05        	bcs  colc1a 				; result is positive.
00219F  3  49 FF        	eor #$ff				; make negative positive.
0021A1  3  18           	clc
0021A2  3  69 01        	adc #1
0021A4  3               colc1a:
0021A4  3  C9 10        	cmp #16 				; within x range?
0021A6  3  B0 B6        	bcs sktyp1				; no - they"ve missed.
0021A8  3  85 62        	sta z80_c				; store difference.
0021AA  3               
0021AA  3  A0 08        	ldy #8
0021AC  3  B1 68        	lda (z80_ix),y				; y coord.
0021AE  3  38           	sec
0021AF  3  E5 65        	sbc z80_d				; subtract y.
0021B1  3  B0 05        	bcs colc1b				; result is positive.
0021B3  3  49 FF        	eor #$ff				; make negative positive.
0021B5  3  18           	clc
0021B6  3  69 01        	adc #1
0021B8  3               colc1b:
0021B8  3  C9 10        	cmp #16					; within y range?
0021BA  3  B0 A2        	bcs sktyp1 				; no - they've missed.
0021BC  3  18           	clc					; add x difference.
0021BD  3  65 62        	adc z80_c
0021BF  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
0021C1  3  B0 02        	bcs :+
0021C3  3  38           	sec
0021C4  3  60           	rts 					; carry set if there's a collision.
0021C5  3               :
0021C5  3  4C 5E 21     	jmp sktyp1				; try next sprite in table.
0021C8  3               colty1:
0021C8  3  A5 68        	lda z80_x  				; compare the two.
0021CA  3  C5 66        	cmp z80_l
0021CC  3  D0 09        	bne end_col
0021CE  3  A5 69        	lda z80_i
0021D0  3  C5 67        	cmp z80_h
0021D2  3  D0 03        	bne end_col
0021D4  3  4C 5E 21     	jmp sktyp1 				; addresses are identical.
0021D7  3               end_col:
0021D7  3  4C 8B 21     	jmp colty0
0021DA  3               
0021DA  3               ;-----------------------------------------------------------
0021DA  3               ; Display number, left aligned
0021DA  3               ; 
0021DA  3               ; Input:
0021DA  3               ;  a		= number
0021DA  3               ;
0021DA  3               ; global:	-
0021DA  3               ; local:	a,y,bc,hl,displ0
0021DA  3               ; calls:	num2ch,dmsg3
0021DA  3               ;-----------------------------------------------------------
0021DA  3               
0021DA  3               disply:
0021DA  3  85 61        	sta z80_a
0021DC  3  A9 02        	lda #<displ0				; display workspace.
0021DE  3  85 62        	sta z80_c
0021E0  3  A9 22        	lda #>displ0
0021E2  3  85 63        	sta z80_b
0021E4  3  A5 61        	lda z80_a
0021E6  3  20 DC 13     	jsr num2ch				; convert accumulator to string.
0021E9  3               
0021E9  3  C6 62        	dec z80_c				; back one character.
0021EB  3  D0 02        	bne :+
0021ED  3  C6 63        	dec z80_b
0021EF  3               :
0021EF  3  A0 00        	ldy #0
0021F1  3  B1 62        	lda (z80_bc),y				; fetch digit.
0021F3  3  09 80        	ora #128				; insert end marker.
0021F5  3  91 62        	sta (z80_bc),y				; new value.
0021F7  3               
0021F7  3  A9 02        	lda #<displ0				; display space.
0021F9  3  85 66        	sta z80_l
0021FB  3  A9 22        	lda #>displ0
0021FD  3  85 67        	sta z80_h
0021FF  3  4C E0 1C     	jmp dmsg3				; display the string.
002202  3               
002202  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
002206  3               
002206  3               ;----------------------------------------------------------------
002206  3               ; Initialise screen.
002206  3               ;
002206  3               ; global:	roomtb,scno
002206  3               ; local:	-
002206  3               ; calls:	tstcs
002206  3               ;----------------------------------------------------------------
002206  3               
002206  3               initsc:
002206  3  AD 2B 26     	lda roomtb 			; whereabouts in the map are we?
002209  3  20 14 22     	jsr tstsc 			; find displacement.
00220C  3  C9 FF        	cmp #255 			; is it valid?
00220E  3  F0 03        	beq init_end 			; no, it's rubbish.
002210  3  8D 26 11     	sta scno			; store new room number.
002213  3               init_end:
002213  3  60           	rts
002214  3               
002214  3               ;----------------------------------------------------------------
002214  3               ; Test screen.
002214  3               ;
002214  3               ; global:	-
002214  3               ; local:	x
002214  3               ; calls:	-
002214  3               ;----------------------------------------------------------------
002214  3               
002214  3               tstsc:
002214  3  8D 1F 22     	sta tmproom
002217  3  18           	clc
002218  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
00221A  3  AA           	tax 				; add displacement to map data.
00221B  3  BD 7E 2C     	lda mapdat-MAPWID,x 		; find room number there.
00221E  3  60           	rts
00221F  3               
00221F  3  00           tmproom:	.byte 0
002220  3               
002220  3               ;--------------------------
002220  3               ; Screen left.
002220  3               ;--------------------------
002220  3               
002220  3               scrl:
002220  3  AD 2B 26     	lda roomtb 			; present room table pointer.
002223  3  38           	sec
002224  3  E9 01        	sbc #1				; room left.
002226  3               scrl0:
002226  3  20 14 22     	jsr tstsc			; test screen.
002229  3  C9 FF        	cmp #255			; is there a screen this way?
00222B  3  D0 01        	bne :+
00222D  3  60           	rts				; no, return to loop.
00222E  3               :
00222E  3  AD 1F 22     	lda tmproom			; restore room displacement.
002231  3  8D 2B 26     	sta roomtb			; new room table position.
002234  3               scrl1:
002234  3  20 06 22     	jsr initsc 			; set new screen.
002237  3  A9 02        	lda #2
002239  3  8D 48 11     	sta restfl 			; set it.
00223C  3  60           	rts
00223D  3               scrr:
00223D  3  AD 2B 26     	lda roomtb 			; room table pointer.
002240  3  18           	clc
002241  3  69 01        	adc #1				; room right.
002243  3  4C 26 22     	jmp scrl0
002246  3               scru:
002246  3  AD 2B 26     	lda roomtb 			; room table pointer.
002249  3  38           	sec
00224A  3  E9 03        	sbc #MAPWID 			; room up.
00224C  3  4C 26 22     	jmp scrl0
00224F  3               scrd:
00224F  3  AD 2B 26     	lda roomtb 			; room table pointer.
002252  3  18           	clc
002253  3  69 03        	adc #MAPWID 			; room down.
002255  3  4C 26 22     	jmp scrl0
002258  3               
002258  3               ;-----------------------------------------
002258  3               ; Jump to new screen.
002258  3               ;-----------------------------------------
002258  3               
002258  3               nwscr:
002258  3  A2 00        	ldx #0				; start of map data.
00225A  3               nwscr0:
00225A  3  DD 81 2C     	cmp mapdat,x
00225D  3  F0 06        	beq nwscr1			; have we found a match for screen?
00225F  3  E8           	inx 				; next room.
002260  3  E0 50        	cpx #80				; zero room count, 80 to search.
002262  3  D0 F6        	bne nwscr0			; keep looking.
002264  3  60           	rts
002265  3               nwscr1:
002265  3  8E 2B 26     	stx roomtb			; set the map position.
002268  3  4C 34 22     	jmp scrl1			; draw new room.
00226B  3               
00226B  3               
00226B  3               ;----------------------------------------------------------
00226B  3               ; Gravity processing.
00226B  3               ;----------------------------------------------------------
00226B  3               
00226B  3               grav:
00226B  3  A0 0D        	ldy #13
00226D  3  B1 68        	lda (z80_ix),y			; jump pointer low.
00226F  3  85 66        	sta z80_l
002271  3  A0 0E        	ldy #14
002273  3  B1 68        	lda (z80_ix),y			; jump pointer high.
002275  3  85 67        	sta z80_h
002277  3  05 66        	ora z80_l			; merge in low byte.
002279  3  D0 01        	bne :+
00227B  3  60           	rts				; if neither is set, we're not in the air.
00227C  3               :
00227C  3  A0 00        	ldy #0
00227E  3  B1 66        	lda (z80_hl),y			; pixels to move.
002280  3  85 61        	sta z80_a
002282  3  C9 63        	cmp #99				; reached the end?
002284  3  D0 06        	bne grav0			; no, continue.
002286  3               grav2:
002286  3  C6 66        	dec z80_l			; go back to previous value.
002288  3  B1 66        	lda (z80_hl),y			; fetch that from table.
00228A  3  85 61        	sta z80_a
00228C  3               grav0:
00228C  3  E6 66        	inc z80_l			; point to next table entry.
00228E  3  A5 66        	lda z80_l
002290  3  A0 0D        	ldy #13
002292  3  91 68        	sta (z80_ix),y			; store new pointer low.
002294  3  A5 67        	lda z80_h
002296  3  A0 0E        	ldy #14
002298  3  91 68        	sta (z80_ix),y			; store new pointer high.
00229A  3               grav1:
00229A  3  A5 61        	lda z80_a
00229C  3  D0 01        	bne :+				; any movement required?
00229E  3  60           	rts				; no, not this time.
00229F  3               :
00229F  3  A5 61        	lda z80_a
0022A1  3  C9 80        	cmp #128			; is it up or down?
0022A3  3  B0 15        	bcs gravu			; it's up.
0022A5  3               gravd:
0022A5  3  85 63        	sta z80_b			; set pixels to move.
0022A7  3               gravd0:
0022A7  3  20 60 1A     	jsr cangd			; can we go down?
0022AA  3  D0 28        	bne gravst			; can't move down, so stop.
0022AC  3  A0 08        	ldy #8
0022AE  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
0022B0  3  18           	clc
0022B1  3  69 01        	adc #1
0022B3  3  91 68        	sta (z80_ix),y
0022B5  3  C6 63        	dec z80_b
0022B7  3  D0 EE        	bne gravd0
0022B9  3  60           	rts
0022BA  3               gravu:
0022BA  3  49 FF        	eor #$ff			; flip the sign so it's positive.
0022BC  3  18           	clc
0022BD  3  69 01        	adc #1
0022BF  3  85 63        	sta z80_b			; set pixels to move.
0022C1  3               gravu0:
0022C1  3  20 28 1A     	jsr cangu			; can we go up?
0022C4  3  D0 71        	bne ifalls			; can't move up, go down next.
0022C6  3  A0 08        	ldy #8
0022C8  3  B1 68        	lda (z80_ix),y
0022CA  3  38           	sec
0022CB  3  E9 01        	sbc #1
0022CD  3  91 68        	sta (z80_ix),y			; adjust new x coord.
0022CF  3  C6 63        	dec z80_b
0022D1  3  D0 EE        	bne gravu0
0022D3  3  60           	rts
0022D4  3               gravst:
0022D4  3  A0 0D        	ldy #13
0022D6  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0022D8  3  85 66        	sta z80_l
0022DA  3  A0 0E        	ldy #14
0022DC  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0022DE  3  85 67        	sta z80_h
0022E0  3               
0022E0  3  A9 00        	lda #0				; null value in pointer.
0022E2  3  A0 0D        	ldy #13
0022E4  3  91 68        	sta (z80_ix),y			; store new pointer low.
0022E6  3  C8           	iny
0022E7  3  91 68        	sta (z80_ix),y			; store new pointer high.
0022E9  3               
0022E9  3  A0 00        	ldy #0
0022EB  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
0022ED  3  C9 63        	cmp #99				; is it the end marker?
0022EF  3               evftf:
0022EF  3  F0 01        	beq :+				; yes, fallen too far.
0022F1  3  60           	rts
0022F2  3               :
0022F2  3  4C AA 2F     	jmp evnt15			; EVENT FELLTOOFAR
0022F5  3               
0022F5  3               ;------------------------------------------------
0022F5  3               ; Initiate fall check.
0022F5  3               ;------------------------------------------------
0022F5  3               
0022F5  3               ifall:
0022F5  3  A0 0D        	ldy #13
0022F7  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
0022F9  3  85 66        	sta z80_l
0022FB  3  A0 0E        	ldy #14
0022FD  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
0022FF  3  85 67        	sta z80_h			; high byte in accumulator.
002301  3  05 66        	ora z80_l			; merge in low byte.
002303  3  F0 01        	beq :+
002305  3  60           	rts				; if either is set, we're already in the air.
002306  3               :
002306  3  A0 09        	ldy #9
002308  3  B1 68        	lda (z80_ix),y			; y coordinate.
00230A  3  8D 4B 11     	sta dispx
00230D  3               numsp7:
00230D  3  A0 08        	ldy #8
00230F  3  B1 68        	lda (z80_ix),y			; look x coordinate.
002311  3  18           	clc
002312  3  69 10        	adc #16				; add 16 pixels.
002314  3  8D 4C 11     	sta dispy			; set up test coordinates.
002317  3  20 E8 1B     	jsr tstbl			; get map address.
00231A  3  20 FA 1A     	jsr plchk			; block, platform check.
00231D  3  F0 01        	beq :+
00231F  3  60           	rts				; it's solid, don't fall.
002320  3               :
002320  3  E6 86        	inc bufaddr			; look right one cell.
002322  3  20 FA 1A     	jsr plchk			; block, platform check.
002325  3  F0 01        	beq :+
002327  3  60           	rts				; it's solid, don't fall.
002328  3               :
002328  3  AD 4B 11     	lda dispx			; y coordinate.
00232B  3  29 07        	and #7				; position straddling block cells.
00232D  3  F0 08        	beq ifalls			; no more checks needed.
00232F  3  E6 86        	inc bufaddr			; look to third cell.
002331  3  20 FA 1A     	jsr plchk			; block, platform check.
002334  3  F0 01        	beq :+
002336  3  60           	rts				; it's solid, don't fall.
002337  3               :
002337  3               ifalls:
002337  3  A9 38        	lda #<jtab			; jump table start.
002339  3  85 66        	sta z80_l
00233B  3  A9 1C        	lda #>jtab
00233D  3  85 67        	sta z80_h
00233F  3               ifal0:
00233F  3  E6 66        	inc z80_l			; point to next value.
002341  3  A0 00        	ldy #0
002343  3  B1 66        	lda (z80_hl),y			; fetch value.
002345  3  F0 F8        	beq ifal0			; no, get next value.
002347  3  C9 63        	cmp #99				; reached end of table?
002349  3  D0 01        	bne :+
00234B  3  60           	rts				; yes, don't fall.
00234C  3               :
00234C  3  C9 80        	cmp #128			; is it going up?
00234E  3  B0 EF        	bcs ifal0			; yes, looking for first movement down.
002350  3               
002350  3  A0 0D        	ldy #13
002352  3  A5 66        	lda z80_l
002354  3  91 68        	sta (z80_ix),y 			; set jump low.
002356  3  A0 0E        	ldy #14
002358  3  A5 67        	lda z80_h
00235A  3  91 68        	sta (z80_ix),y 			; set jump high.
00235C  3  60           	rts
00235D  3               
00235D  3               
00235D  3               ;----------------------------------------------------
00235D  3               ; Get frame data for a particular sprite.
00235D  3               ; Input:
00235D  3               ;  a		= framenumer
00235D  3               ; Output:
00235D  3               ;  hl		= frame address
00235D  3               ;
00235D  3               ; global:	hl,frmptr
00235D  3               ; local:	-
00235D  3               ; calls:	-
00235D  3               ;----------------------------------------------------
00235D  3               
00235D  3               gfrm:
00235D  3  0A           	asl a	 		 	; multiple of 2.
00235E  3  18           	clc
00235F  3  6D 4D 11     	adc frmptr 			; frames used by game.
002362  3  85 66        	sta z80_l
002364  3  AD 4E 11     	lda frmptr+1
002367  3  69 00        	adc #0
002369  3  85 67        	sta z80_h 			; point to frame start.
00236B  3  60           	rts
00236C  3               
00236C  3               ;----------------------------------------------------
00236C  3               ; Find sprite list for current room.
00236C  3               ;
00236C  3               ; global:	hl
00236C  3               ; local:	x,y
00236C  3               ; calls:	-
00236C  3               ;----------------------------------------------------
00236C  3               
00236C  3               sprlst:
00236C  3  A9 F0        	lda #<nmedat 			; list of enemy sprites.
00236E  3  85 66        	sta z80_l
002370  3  A9 34        	lda #>nmedat
002372  3  85 67        	sta z80_h
002374  3  AE 26 11     	ldx scno 			; screen number.
002377  3  D0 01        	bne sprls2 			; is it the first screen?
002379  3  60           	rts 				; yes, don't need to search data.
00237A  3               sprls2:
00237A  3  A0 00        	ldy #0
00237C  3               sprls1:
00237C  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
00237E  3  C9 FF        	cmp #255			; is it an end marker?
002380  3  F0 0E        	beq sprls0 			; yes, end of this room.
002382  3               
002382  3  18           	clc 				; point to next sprite in list.
002383  3  A5 66        	lda z80_l
002385  3  69 04        	adc #NMESIZ
002387  3  85 66        	sta z80_l
002389  3  90 02        	bcc :+
00238B  3  E6 67        	inc z80_h
00238D  3               :
00238D  3  4C 7C 23     	jmp sprls1 			; continue until end of room.
002390  3               sprls0:
002390  3  E6 66        	inc z80_l 			; point to start of next screen.s
002392  3  D0 02        	bne :+
002394  3  E6 67        	inc z80_h
002396  3               :
002396  3  CA           	dex
002397  3  D0 E3        	bne sprls1 			; continue until room found.
002399  3  60           	rts
00239A  3               
00239A  3               
00239A  3               ;----------------------------------------------------
00239A  3               ; Clear all but a single player sprite.
00239A  3               ;
00239A  3               ; global:	-
00239A  3               ; local:	x,y,ix
00239A  3               ; calls:	-
00239A  3               ;----------------------------------------------------
00239A  3               
00239A  3               nspr:
00239A  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00239C  3  8D D1 1F     	sta sprcnt
00239F  3  A9 4E        	lda #<sprtab 			; sprite table.
0023A1  3  85 68        	sta z80_x
0023A3  3  A9 25        	lda #>sprtab
0023A5  3  85 69        	sta z80_i
0023A7  3               nspr0:
0023A7  3  A0 00        	ldy #0 				; fetch sprite type.
0023A9  3  B1 68        	lda (z80_ix),y 			; is it a player?
0023AB  3  F0 1B        	beq nspr1 			; yes, keep this one.
0023AD  3               
0023AD  3  A9 FF        	lda #255
0023AF  3  A0 00        	ldy #0 				; fetch sprite type.
0023B1  3  91 68        	sta (z80_ix),y 			; delete sprite.
0023B3  3  A0 05        	ldy #5
0023B5  3  91 68        	sta (z80_ix),y 			; remove next type.
0023B7  3               
0023B7  3  18           	clc	 			; next sprite.
0023B8  3  A5 68        	lda z80_x
0023BA  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0023BC  3  85 68        	sta z80_x
0023BE  3  90 02        	bcc :+
0023C0  3  E6 69        	inc z80_i
0023C2  3               :
0023C2  3  CE D1 1F     	dec sprcnt	 			; one less space in the table.
0023C5  3  D0 E0        	bne nspr0
0023C7  3  60           	rts
0023C8  3               nspr1:
0023C8  3  A9 FF        	lda #255
0023CA  3  A0 00        	ldy #0
0023CC  3  91 68        	sta (z80_ix),y 			; delete sprite.
0023CE  3               
0023CE  3  18           	clc	 			; point to next sprite.
0023CF  3  A5 68        	lda z80_x
0023D1  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0023D3  3  85 68        	sta z80_x
0023D5  3  90 02        	bcc :+
0023D7  3  E6 69        	inc z80_i
0023D9  3               :
0023D9  3  CE D1 1F     	dec sprcnt	 			; one less to do.
0023DC  3  D0 01        	bne nspr2
0023DE  3  60           	rts
0023DF  3               nspr2:
0023DF  3  A9 FF        	lda #255
0023E1  3  A0 00        	ldy #0
0023E3  3  91 68        	sta (z80_ix),y 			; delete sprite.
0023E5  3  A0 05        	ldy #5
0023E7  3  91 68        	sta (z80_ix),y 			; remove next type.
0023E9  3               
0023E9  3  18           	clc	 			; next sprite.
0023EA  3  A5 68        	lda z80_x
0023EC  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0023EE  3  85 68        	sta z80_x
0023F0  3  90 02        	bcc :+
0023F2  3  E6 69        	inc z80_i
0023F4  3               :
0023F4  3  CE D1 1F     	dec sprcnt	 			; one less space in table.
0023F7  3  D0 E6        	bne nspr2
0023F9  3  60           	rts
0023FA  3               
0023FA  3               ;----------------------------------------------------------
0023FA  3               ; Two initialisation routines.
0023FA  3               ; Initialise sprites - copy everything from list to table.
0023FA  3               ;
0023FA  3               ; global:	-
0023FA  3               ; local:	x,y,ix
0023FA  3               ; calls:	cpsp
0023FA  3               ;----------------------------------------------------------
0023FA  3               
0023FA  3               ispr:
0023FA  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0023FC  3  8D D1 1F     	sta sprcnt
0023FF  3  A9 4E        	lda #<sprtab			; sprite table.
002401  3  85 68        	sta z80_x
002403  3  A9 25        	lda #>sprtab
002405  3  85 69        	sta z80_i
002407  3               ispr2:
002407  3  A0 00        	ldy #0
002409  3  B1 66        	lda (z80_hl),y 			; fetch byte.
00240B  3  C9 FF        	cmp #255 			; is it an end marker?
00240D  3  D0 01        	bne :+
00240F  3  60           	rts 				; yes, no more to do.
002410  3               :
002410  3               ispr1:
002410  3  A0 00        	ldy #0
002412  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
002414  3  C9 FF        	cmp #255 			; is it enabled yet?
002416  3  D0 08        	bne ispr4			; yes, try another slot.
002418  3               
002418  3  A0 05        	ldy #5
00241A  3  B1 68        	lda (z80_ix),y		 	; next type.
00241C  3  C9 FF        	cmp #255 			; is it enabled yet?
00241E  3  F0 11        	beq ispr3 			; no, process this one.
002420  3               ispr4:
002420  3  18           	clc 				; next sprite.
002421  3  A5 68        	lda z80_x
002423  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
002425  3  85 68        	sta z80_x
002427  3  90 02        	bcc :+
002429  3  E6 69        	inc z80_i
00242B  3               :
00242B  3  CE D1 1F     	dec sprcnt
00242E  3  D0 E0        	bne ispr1 			; repeat for remaining sprites.
002430  3  60           	rts  				; no more room in table.
002431  3               ispr3:
002431  3  20 85 24     	jsr cpsp			; initialise a sprite.
002434  3  CE D1 1F     	dec sprcnt			; one less space in the table.
002437  3  D0 CE        	bne ispr2
002439  3  60           	rts
00243A  3               
00243A  3               
00243A  3               ;-----------------------------------------------------------------------
00243A  3               ; Initialise sprites - but not player, we're keeping the old one.
00243A  3               ;
00243A  3               ; global:	-
00243A  3               ; local:	x,y,ix
00243A  3               ; calls:	cpsp
00243A  3               ;-----------------------------------------------------------------------
00243A  3               
00243A  3               kspr:
00243A  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
00243C  3  A9 4E        	lda #<sprtab 			; sprite table.
00243E  3  85 68        	sta z80_x
002440  3  A9 25        	lda #>sprtab
002442  3  85 69        	sta z80_i
002444  3               kspr2:
002444  3  A0 00        	ldy #0
002446  3  B1 66        	lda (z80_hl),y 			; fetch byte.
002448  3  C9 FF        	cmp #255 			; is it an end marker?
00244A  3  D0 01        	bne :+
00244C  3  60           	rts 				; yes, no more to do.
00244D  3               :
00244D  3  C9 00        	cmp #0
00244F  3  D0 0E        	bne kspr1 			; no, add to table as normal.
002451  3               
002451  3  18           	clc 				; next sprite.
002452  3  A5 66        	lda z80_l
002454  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
002456  3  85 66        	sta z80_l
002458  3  90 02        	bcc :+
00245A  3  E6 67        	inc z80_h
00245C  3               :
00245C  3  4C 44 24     	jmp kspr2
00245F  3               kspr1:
00245F  3  A0 00        	ldy #0 				; fetch sprite type.
002461  3  B1 68        	lda (z80_ix),y
002463  3  C9 FF        	cmp #255 			; is it enabled yet?
002465  3  D0 08        	bne kspr4 			; yes, try another slot.
002467  3               
002467  3  A0 05        	ldy #5 				; next type.
002469  3  B1 68        	lda (z80_ix),y
00246B  3  C9 FF        	cmp #255 			; is it enabled yet?
00246D  3  F0 0F        	beq kspr3 			; no, process this one.
00246F  3               kspr4:
00246F  3  18           	clc 				; next sprite.
002470  3  A5 68        	lda z80_x
002472  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
002474  3  85 68        	sta z80_x
002476  3  90 02        	bcc :+
002478  3  E6 69        	inc z80_i
00247A  3               :
00247A  3  CA           	dex	 			; repeat for remaining sprites.
00247B  3  D0 E2        	bne kspr1
00247D  3  60           	rts  				; no more room in table.
00247E  3               kspr3:
00247E  3  20 85 24     	jsr cpsp 			; copy sprite to table.
002481  3  CA           	dex	 			; one less space in the table.
002482  3  D0 C0        	bne kspr2
002484  3  60           	rts
002485  3               
002485  3               ;----------------------------------------------
002485  3               ; Copy sprite from list to table.
002485  3               ;
002485  3               ; global:	hl,ix
002485  3               ; local:	y
002485  3               ; calls:	evnt09
002485  3               ;----------------------------------------------
002485  3               
002485  3               cpsp:
002485  3  A0 00        	ldy #0				; fetch byte from table.
002487  3  B1 66        	lda (z80_hl),y
002489  3  91 68        	sta (z80_ix),y			; set up type.
00248B  3  A0 05        	ldy #PAM1ST
00248D  3  91 68        	sta (z80_ix),y 			; set up type.
00248F  3               
00248F  3  E6 66        	inc z80_l 			; move to next byte.
002491  3  D0 02        	bne :+
002493  3  E6 67        	inc z80_h
002495  3               :
002495  3  A0 00        	ldy #0 				; fetch byte from table.
002497  3  B1 66        	lda (z80_hl),y
002499  3  A0 06        	ldy #6
00249B  3  91 68        	sta (z80_ix),y			; set up image.
00249D  3               
00249D  3  E6 66        	inc z80_l 			; move to next byte.
00249F  3  D0 02        	bne :+
0024A1  3  E6 67        	inc z80_h
0024A3  3               :
0024A3  3  A0 00        	ldy #0
0024A5  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
0024A7  3  A0 08        	ldy #8
0024A9  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0024AB  3               
0024AB  3  A9 C8        	lda #200 			; set initial coordinate off screen.
0024AD  3  A0 03        	ldy #3
0024AF  3  91 68        	sta (z80_ix),y
0024B1  3               
0024B1  3  E6 66        	inc z80_l 			; move to next byte.
0024B3  3  D0 02        	bne :+
0024B5  3  E6 67        	inc z80_h
0024B7  3               :
0024B7  3  A0 00        	ldy #0 				; fetch byte from table.
0024B9  3  B1 66        	lda (z80_hl),y
0024BB  3  A0 09        	ldy #9
0024BD  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0024BF  3               
0024BF  3  E6 66        	inc z80_l 			; move to next byte.
0024C1  3  D0 02        	bne :+
0024C3  3  E6 67        	inc z80_h
0024C5  3               :
0024C5  3  A9 00        	lda #0				; zeroes in accumulator.
0024C7  3  A0 07        	ldy #7 				; reset frame number.
0024C9  3  91 68        	sta (z80_ix),y
0024CB  3  A0 0A        	ldy #10 			; reset direction.
0024CD  3  91 68        	sta (z80_ix),y
0024CF  3  A0 0D        	ldy #13				; reset jump pointer low.
0024D1  3  91 68        	sta (z80_ix),y
0024D3  3  A0 0E        	ldy #14	 			; reset jump pointer high.
0024D5  3  91 68        	sta (z80_ix),y
0024D7  3               
0024D7  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
0024D9  3  A0 10        	ldy #16
0024DB  3  91 68        	sta (z80_ix),y
0024DD  3               evis0:
0024DD  3  A5 69        	lda z80_i
0024DF  3  48           	pha
0024E0  3  A5 68        	lda z80_x
0024E2  3  48           	pha
0024E3  3  A5 67        	lda z80_h
0024E5  3  48           	pha
0024E6  3  A5 66        	lda z80_l
0024E8  3  48           	pha
0024E9  3               
0024E9  3  20 58 2E     	jsr evnt09 			; perform event.
0024EC  3               
0024EC  3  68           	pla
0024ED  3  85 66        	sta z80_l
0024EF  3  68           	pla
0024F0  3  85 67        	sta z80_h
0024F2  3  68           	pla
0024F3  3  85 68        	sta z80_x
0024F5  3  68           	pla
0024F6  3  85 69        	sta z80_i
0024F8  3               
0024F8  3  18           	clc
0024F9  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
0024FB  3  69 11        	adc #TABSIZ		 	; next sprite.
0024FD  3  85 68        	sta z80_x
0024FF  3  90 02        	bcc :+
002501  3  E6 69        	inc z80_i
002503  3               :
002503  3  60           	rts
002504  3               
002504  3               
002504  3               ;-------------------------------------
002504  3               ; Clear the play area window.
002504  3               ;-------------------------------------
002504  3               
002504  3               clw:
002504  3  AD 1D 11     	lda wintop			; get coordinates of window.
002507  3  8D 4C 11     	sta dispy			; put into dispx for calculation.
00250A  3  AD 1E 11     	lda winlft
00250D  3  8D 4B 11     	sta dispx
002510  3               
002510  3  AD 1F 11     	lda winhgt			; height of window.
002513  3  8D A0 19     	sta rrow			; copy to b register.
002516  3               clw3:
002516  3  AD 20 11     	lda winwid 			; width of window.
002519  3  8D 9F 19     	sta rcol
00251C  3               clw2:
00251C  3  20 A6 17     	jsr gprad 			; get print address.
00251F  3  A9 00        	lda #0				; zero byte to write.
002521  3  A2 07        	ldx #7				; pixel height of each cell.
002523  3               clw1:
002523  3  BC 3F 18     	ldy scrtab,x
002526  3  91 80        	sta (scraddr),y 			; copy to screen.
002528  3  CA           	dex				; next screen row down.
002529  3  10 F8        	bpl clw1
00252B  3               
00252B  3  EE 4B 11     	inc dispx			; next column.
00252E  3  CE 9F 19     	dec rcol			; one less to do.
002531  3  D0 E9        	bne clw2			; repeat for remaining columns.
002533  3               
002533  3  AD 1E 11     	lda winlft			; get left edge.
002536  3  8D 4B 11     	sta dispx 			; reset x.
002539  3  EE 4C 11     	inc dispy 			; next line down.
00253C  3               
00253C  3  CE A0 19     	dec rrow
00253F  3  D0 D5        	bne clw3			; repeat down the screen.
002541  3               
002541  3  AD 1D 11     	lda wintop			; get coordinates of window.
002544  3  8D 41 11     	sta chary			; put into display position.
002547  3  AD 1E 11     	lda winlft
00254A  3  8D 40 11     	sta charx
00254D  3  60           	rts
00254E  3               
00254E  3               
00254E  3               ;----------------------------------------------------------
00254E  3               ; Effects code.
00254E  3               ; Ticker routine is called 25 times per second.
00254E  3               ;
00254E  3               ; HL = txtscr = left text screen address
00254E  3               ; DE = txtscr+txtwid-1 = right text screen address
00254E  3               ; BC = txtpos = text scroller position
00254E  3               ;
00254E  3               ;----------------------------------------------------------
00254E  3               
00254E  3               .if sflag
00254E  3               scrly:
00254E  3               	rts
00254E  3               	.word txtscr         	; get left screen address.
00254E  3               	sta scr_l
00254E  3               	lda txtscr+1
00254E  3               	sta scr_l+1
00254E  3               	sta scr_r+1
00254E  3               	
00254E  3               	stx xtmp
00254E  3               
00254E  3               	clc         		; get right screen address.
00254E  3               	lda scr_l
00254E  3               	adc txtwid
00254E  3               	sta scr_r
00254E  3               	dec scr_r
00254E  3               scrly1:
00254E  3               	ldy txtwid		; set txtwide
00254E  3               	dey
00254E  3               	clc
00254E  3               scrly0:
00254E  3               	lda (scr_l),y		; scroll 1 line
00254E  3               	rol a
00254E  3               	sta (scr_l),y
00254E  3               	dey
00254E  3               	bpl scrly0
00254E  3               
00254E  3               	clc			; point to next line
00254E  3               	lda scr_l
00254E  3               	adc #32
00254E  3               	sta scr_l
00254E  3               	bcc scrly1		; repeat 8 times
00254E  3               
00254E  3               	lda txtpos 		; get text pointer.
00254E  3               	sta scr_txt
00254E  3               	lda txtpos+1
00254E  3               	sta scr_txt+1
00254E  3               
00254E  3               	ldy #0
00254E  3               	lda (scr_txt),y 		; find character we're displaying.
00254E  3               	and #127 		; remove end marker bit if applicable.
00254E  3               	cmp #13			; is it newline?
00254E  3               	bne scrly5 		; no, it's okay.
00254E  3               	lda #32			; convert to a space instead.
00254E  3               scrly5:
00254E  3               	sta fntaddr		; calculate char address
00254E  3               	lda #0
00254E  3               	sta fntaddr+1
00254E  3               	asl fntaddr  		; multiply char by 8.
00254E  3               	rol fntaddr+1
00254E  3               	asl fntaddr
00254E  3               	rol fntaddr+1
00254E  3               	asl fntaddr
00254E  3               	rol fntaddr+1
00254E  3               	lda fntaddr
00254E  3               	clc
00254E  3               	adc FontPtr
00254E  3               	sta scrly3+1		; that's the low byte.
00254E  3               	lda fntaddr+1
00254E  3               	adc FontPtr+1
00254E  3               	sta scrly3+2		; add displacement.
00254E  3               
00254E  3               	ldx #0
00254E  3               scrly3:
00254E  3               	lda $3333,x		; get image of char line.
00254E  3               	and txtbit
00254E  3               	beq scrly2		; don't plot pixel
00254E  3               	ldy scrline,x
00254E  3               	lda (scr_r),y
00254E  3               	clc
00254E  3               	ora #1
00254E  3               	sta (scr_r),y		; plot pixel
00254E  3               scrly2:
00254E  3               	inx			; next line of char.
00254E  3               	cpx #8
00254E  3               	bne scrly3
00254E  3               
00254E  3               	lsr txtbit		; bit of text to display.
00254E  3               	bcs :+
00254E  3               	rts
00254E  3               :
00254E  3               	ldy #0
00254E  3               	lda (scr_txt),y 	; what was the character?
00254E  3               	asl a	  		; end of message?
00254E  3               	bcs scrly4
00254E  3               	inc txtpos
00254E  3               	bne :+
00254E  3               	inc txtpos+1
00254E  3               :
00254E  3               	jmp scrly6 		; not yet - continue.
00254E  3               scrly4:
00254E  3               	lda txtini 		; start of scrolling message.
00254E  3               	sta txtpos
00254E  3               	lda txtini+1
00254E  3               	sta txtpos+1
00254E  3               scrly6:
00254E  3               	lda #128
00254E  3               	sta txtbit
00254E  3               	ldx xtmp
00254E  3               	rts
00254E  3               
00254E  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
00254E  3               
00254E  3               ;-------------------------------------------------------
00254E  3               ; Entry TICKER command
00254E  3               ;
00254E  3               ; Entry:
00254E  3               ;  z80_b = message nr
00254E  3               ;  z80_c = width
00254E  3               ;-------------------------------------------------------
00254E  3               
00254E  3               iscrly:
00254E  3               	jsr prescr 		; set up display position.
00254E  3               
00254E  3               	lda #<msgdat 		; text messages.
00254E  3               	sta z80_l
00254E  3               	lda #>msgdat
00254E  3               	sta z80_h
00254E  3               
00254E  3               	lda z80_c 		; width.
00254E  3               	sec
00254E  3               	sbc #1			; subtract one.
00254E  3               	cmp #32 		; is it between 1 and 32?
00254E  3               	bcc :+
00254E  3               	lda #$60
00254E  3               	jmp iscrl0		; no, disable messages.
00254E  3               :
00254E  3               	ldx z80_b		; message number.
00254E  3               	jsr getwrd 		; find message start.
00254E  3               
00254E  3               	lda z80_l		; set initial text position.
00254E  3               	sta txtini
00254E  3               	lda z80_h
00254E  3               	sta txtini+1
00254E  3               
00254E  3               	lda #$ad		; code for lda adrr
00254E  3               iscrl0:
00254E  3               	sta scrly		; enable/disable scrolling routine.
00254E  3               
00254E  3               	jsr prescr 		; set up display position.
00254E  3               	jsr gprad 		; get print address.
00254E  3               
00254E  3               	lda scraddr 		; set text screen address.
00254E  3               	sta txtscr
00254E  3               	lda scraddr+1
00254E  3               	sta txtscr+1
00254E  3               
00254E  3               	lda z80_c		; width.
00254E  3               	sta txtwid		; set width in working storage.
00254E  3               
00254E  3               	lda #128 		; start with leftmost bit.
00254E  3               	sta txtbit
00254E  3               
00254E  3               	jmp scrly4
00254E  3               .endif
00254E  3               
00254E  3               ;------------------------------------------------------------------
00254E  3               ; Sprite table 
00254E  3               ;------------------------------------------------------------------
00254E  3               
00254E  3               
00254E  3               ; ix+0  = type.
00254E  3               ; ix+1  = sprite image number.
00254E  3               ; ix+2  = frame.
00254E  3               ; ix+3  = y coord.
00254E  3               ; ix+4  = x coord.
00254E  3               
00254E  3               ; ix+5  = new type.
00254E  3               ; ix+6  = new image number.
00254E  3               ; ix+7  = new frame.
00254E  3               ; ix+8  = new y coord.
00254E  3               ; ix+9  = new x coord.
00254E  3               
00254E  3               ; ix+10 = direction.
00254E  3               ; ix+11 = parameter 1.
00254E  3               ; ix+12 = parameter 2.
00254E  3               ; ix+13 = jump pointer low.
00254E  3               ; ix+14 = jump pointer high.
00254E  3               ; ix+15 = data pointer low.
00254E  3               ; ix+16 = data pointer high.
00254E  3               
00254E  3               ; block NUMSPR * TABSIZ,255
00254E  3               
00254E  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
002552  3  FF FF FF FF  
002556  3  FF FF FF FF  
00261A  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
00261E  3  FF FF FF 00  
002622  3  C0 78 00 00  
00262B  3  07           roomtb:	.byte 7                      ; start room map offset.
00262C  3               
00262C  3               ; User routine.  Put your own code in here to be called with USER instruction.
00262C  3               ; if USER has an argument it will be passed in the accumulator.
00262C  3               
00262C  3               user:
00262C  3  60           	rts
00262D  3               
00262D  3               ;----------------------------------------------------
00262D  3               ; Missing vars 
00262D  3               ;----------------------------------------------------
00262D  3               
00262D  3  00 00 00 00  MAP: .res 3*256,0					; properties map buffer (3x256 bytes)
002631  3  00 00 00 00  
002635  3  00 00 00 00  
00292D  3  00 00 00 00  SCADTB_lb: .res 256,0				; screen address table lo-byte (256 bytes)
002931  3  00 00 00 00  
002935  3  00 00 00 00  
002A2D  3  00 00 00 00  SCADTB_hb: .res 256,0				; screen address table hi-byte (256 bytes)
002A31  3  00 00 00 00  
002A35  3  00 00 00 00  
002B2D  3  00 00 00 00  SHRAPN: .res 55*6,0					; shrapnel table (55x6 bytes)
002B31  3  00 00 00 00  
002B35  3  00 00 00 00  
002C77  3               
002C77  3  00 00        FontPtr:	.byte 0,0
002C79  3  00 00        TmpAddr:	.byte 0,0
002C7B  3               
002C7B  3  00           loopa:		.byte 0
002C7C  3  00           loopb:		.byte 0
002C7D  3  00           loopc:		.byte 0
002C7E  3               
002C7E  3               ; Everything below here will be generated by the editors.
002C7E  3               
002C7E  3               WINDOWTOP = 1
002C7E  3               WINDOWLFT = 1
002C7E  3               WINDOWHGT = 22
002C7E  3               WINDOWWID = 30 ;
002C7E  3               MAPWID = 3
002C7E  3  FF FF FF             .byte 255,255,255
002C81  3               mapdat:
002C81  3  FF 00 FF             .byte 255,0,255
002C84  3  FF FF FF             .byte 255,255,255
002C87  3  01           stmap:  .byte 1
002C88  3               
002C88  3               evnt00:
002C88  3  A9 00                lda #0
002C8A  3  8D 34 11             sta varm
002C8D  3  AD 1B 11             lda joyval
002C90  3  29 08                and #8
002C92  3  F0 03                beq :+
002C94  3  4C AD 2C             jmp a00071
002C97  3               :
002C97  3  A9 01                lda #1
002C99  3  8D 34 11             sta varm
002C9C  3  20 28 1A             jsr cangu
002C9F  3  F0 03                beq :+
002CA1  3  4C AD 2C             jmp a00071
002CA4  3               :
002CA4  3  A0 08                ldy #8
002CA6  3  B1 68                lda (z80_ix),y
002CA8  3  38                   sec
002CA9  3  E9 02                sbc #2
002CAB  3  91 68                sta (z80_ix),y
002CAD  3  AD 1B 11     a00071: lda joyval
002CB0  3  29 04                and #4
002CB2  3  F0 03                beq :+
002CB4  3  4C CD 2C             jmp a00132
002CB7  3               :
002CB7  3  A9 01                lda #1
002CB9  3  8D 34 11             sta varm
002CBC  3  20 60 1A             jsr cangd
002CBF  3  F0 03                beq :+
002CC1  3  4C CD 2C             jmp a00132
002CC4  3               :
002CC4  3  A0 08                ldy #8
002CC6  3  B1 68                lda (z80_ix),y
002CC8  3  18                   clc
002CC9  3  69 02                adc #2
002CCB  3  91 68                sta (z80_ix),y
002CCD  3  AD 1B 11     a00132: lda joyval
002CD0  3  29 02                and #2
002CD2  3  F0 03                beq :+
002CD4  3  4C ED 2C             jmp a00193
002CD7  3               :
002CD7  3  A9 01                lda #1
002CD9  3  8D 34 11             sta varm
002CDC  3  20 98 1A             jsr cangl
002CDF  3  F0 03                beq :+
002CE1  3  4C ED 2C             jmp a00193
002CE4  3               :
002CE4  3  A0 09                ldy #9
002CE6  3  B1 68                lda (z80_ix),y
002CE8  3  38                   sec
002CE9  3  E9 02                sbc #2
002CEB  3  91 68                sta (z80_ix),y
002CED  3  AD 1B 11     a00193: lda joyval
002CF0  3  29 01                and #1
002CF2  3  F0 03                beq :+
002CF4  3  4C 0D 2D             jmp a00254
002CF7  3               :
002CF7  3  A9 01                lda #1
002CF9  3  8D 34 11             sta varm
002CFC  3  20 AC 1A             jsr cangr
002CFF  3  F0 03                beq :+
002D01  3  4C 0D 2D             jmp a00254
002D04  3               :
002D04  3  A0 09                ldy #9
002D06  3  B1 68                lda (z80_ix),y
002D08  3  18                   clc
002D09  3  69 02                adc #2
002D0B  3  91 68                sta (z80_ix),y
002D0D  3  A9 00        a00254: lda #0
002D0F  3  CD 34 11             cmp varm
002D12  3  90 03                bcc *+5
002D14  3  4C 1A 2D             jmp a00275
002D17  3  20 FE 20             jsr animsp
002D1A  3               a00275: ; SPRITEINK command
002D1A  3  60                   rts
002D1B  3               evnt01:
002D1B  3  A9 00                lda #0
002D1D  3  A0 0A                ldy #10
002D1F  3  D1 68                cmp (z80_ix),y
002D21  3  F0 03                beq *+5
002D23  3  4C 49 2D             jmp b00094
002D26  3  20 28 1A             jsr cangu
002D29  3  F0 03                beq :+
002D2B  3  4C 3A 2D             jmp b00064
002D2E  3               :
002D2E  3  A0 08                ldy #8
002D30  3  B1 68                lda (z80_ix),y
002D32  3  38                   sec
002D33  3  E9 02                sbc #2
002D35  3  91 68                sta (z80_ix),y
002D37  3  4C 46 2D             jmp b00090
002D3A  3  A9 05        b00064: lda #5
002D3C  3  0A                   asl a
002D3D  3  8D DC 11             sta sndtyp
002D40  3  A9 01                lda #1
002D42  3  A0 0A                ldy #10
002D44  3  91 68                sta (z80_ix),y
002D46  3  4C 69 2D     b00090: jmp b00160
002D49  3  20 60 1A     b00094: jsr cangd
002D4C  3  F0 03                beq :+
002D4E  3  4C 5D 2D             jmp b00135
002D51  3               :
002D51  3  A0 08                ldy #8
002D53  3  B1 68                lda (z80_ix),y
002D55  3  18                   clc
002D56  3  69 02                adc #2
002D58  3  91 68                sta (z80_ix),y
002D5A  3  4C 69 2D             jmp b00160
002D5D  3  A9 05        b00135: lda #5
002D5F  3  0A                   asl a
002D60  3  8D DC 11             sta sndtyp
002D63  3  A9 00                lda #0
002D65  3  A0 0A                ldy #10
002D67  3  91 68                sta (z80_ix),y
002D69  3  A9 00        b00160: lda #0
002D6B  3  A0 0E                ldy #14
002D6D  3  D1 68                cmp (z80_ix),y
002D6F  3  90 03                bcc *+5
002D71  3  4C B6 2D             jmp b00317
002D74  3  A9 00                lda #0
002D76  3  A0 0A                ldy #10
002D78  3  D1 68                cmp (z80_ix),y
002D7A  3  F0 03                beq *+5
002D7C  3  4C 9C 2D             jmp b00263
002D7F  3  20 28 1A             jsr cangu
002D82  3  F0 03                beq :+
002D84  3  4C 93 2D             jmp b00245
002D87  3               :
002D87  3  A0 08                ldy #8
002D89  3  B1 68                lda (z80_ix),y
002D8B  3  38                   sec
002D8C  3  E9 02                sbc #2
002D8E  3  91 68                sta (z80_ix),y
002D90  3  4C 99 2D             jmp b00258
002D93  3  A9 01        b00245: lda #1
002D95  3  A0 0A                ldy #10
002D97  3  91 68                sta (z80_ix),y
002D99  3  4C B6 2D     b00258: jmp b00317
002D9C  3  20 60 1A     b00263: jsr cangd
002D9F  3  F0 03                beq :+
002DA1  3  4C B0 2D             jmp b00303
002DA4  3               :
002DA4  3  A0 08                ldy #8
002DA6  3  B1 68                lda (z80_ix),y
002DA8  3  18                   clc
002DA9  3  69 02                adc #2
002DAB  3  91 68                sta (z80_ix),y
002DAD  3  4C B6 2D             jmp b00317
002DB0  3  A9 00        b00303: lda #0
002DB2  3  A0 0A                ldy #10
002DB4  3  91 68                sta (z80_ix),y
002DB6  3  A9 00        b00317: lda #0
002DB8  3  A0 0B                ldy #11
002DBA  3  D1 68                cmp (z80_ix),y
002DBC  3  F0 03                beq *+5
002DBE  3  4C FC 2D             jmp b00455
002DC1  3  20 98 1A             jsr cangl
002DC4  3  F0 03                beq :+
002DC6  3  4C D5 2D             jmp b00379
002DC9  3               :
002DC9  3  A0 09                ldy #9
002DCB  3  B1 68                lda (z80_ix),y
002DCD  3  38                   sec
002DCE  3  E9 02                sbc #2
002DD0  3  91 68                sta (z80_ix),y
002DD2  3  4C F9 2D             jmp b00450
002DD5  3  A9 05        b00379: lda #5
002DD7  3  0A                   asl a
002DD8  3  8D DC 11             sta sndtyp
002DDB  3  A9 01                lda #1
002DDD  3  A0 0B                ldy #11
002DDF  3  91 68                sta (z80_ix),y
002DE1  3  A9 02                lda #2
002DE3  3  85 65                sta z80_d
002DE5  3  20 4E 1C             jsr random
002DE8  3  85 67                sta z80_h
002DEA  3  20 2F 14             jsr imul
002DED  3  A5 67                lda z80_h
002DEF  3  8D 43 11             sta varrnd
002DF2  3  AD 43 11             lda varrnd
002DF5  3  A0 0E                ldy #14
002DF7  3  91 68                sta (z80_ix),y
002DF9  3  4C 34 2E     b00450: jmp b00566
002DFC  3  20 AC 1A     b00455: jsr cangr
002DFF  3  F0 03                beq :+
002E01  3  4C 10 2E             jmp b00495
002E04  3               :
002E04  3  A0 09                ldy #9
002E06  3  B1 68                lda (z80_ix),y
002E08  3  18                   clc
002E09  3  69 02                adc #2
002E0B  3  91 68                sta (z80_ix),y
002E0D  3  4C 34 2E             jmp b00566
002E10  3  A9 05        b00495: lda #5
002E12  3  0A                   asl a
002E13  3  8D DC 11             sta sndtyp
002E16  3  A9 00                lda #0
002E18  3  A0 0B                ldy #11
002E1A  3  91 68                sta (z80_ix),y
002E1C  3  A9 02                lda #2
002E1E  3  85 65                sta z80_d
002E20  3  20 4E 1C             jsr random
002E23  3  85 67                sta z80_h
002E25  3  20 2F 14             jsr imul
002E28  3  A5 67                lda z80_h
002E2A  3  8D 43 11             sta varrnd
002E2D  3  AD 43 11             lda varrnd
002E30  3  A0 0E                ldy #14
002E32  3  91 68                sta (z80_ix),y
002E34  3               b00566: ; SPRITEINK command
002E34  3  A0 0C                ldy #12
002E36  3  B1 68                lda (z80_ix),y
002E38  3  A0 0E                ldy #14
002E3A  3  91 68                sta (z80_ix),y
002E3C  3  20 FE 20             jsr animsp
002E3F  3  A9 00                lda #0
002E41  3  85 63                sta z80_b
002E43  3  20 3F 21             jsr sktyp
002E46  3  B0 03                bcs :+
002E48  3  4C 50 2E             jmp b00628
002E4B  3               :
002E4B  3  A9 01                lda #1
002E4D  3  8D 49 11             sta deadf
002E50  3  60           b00628: rts
002E51  3               evnt02:
002E51  3  60                   rts
002E52  3               evnt03:
002E52  3  60                   rts
002E53  3               evnt04:
002E53  3  60                   rts
002E54  3               evnt05:
002E54  3  60                   rts
002E55  3               evnt06:
002E55  3  60                   rts
002E56  3               evnt07:
002E56  3  60                   rts
002E57  3               evnt08:
002E57  3  60                   rts
002E58  3               evnt09:
002E58  3  60                   rts
002E59  3               evnt10:
002E59  3  AD 28 11             lda vara
002E5C  3  18                   clc
002E5D  3  69 01                adc #1
002E5F  3  8D 28 11             sta vara
002E62  3  A9 0A                lda #10
002E64  3  CD 28 11             cmp vara
002E67  3  90 03                bcc *+5
002E69  3  4C 4F 2F             jmp k00475
002E6C  3  A9 0A                lda #<10
002E6E  3  85 66                sta z80_l
002E70  3  A9 00                lda #>10
002E72  3  85 67                sta z80_h
002E74  3  20 CD 16             jsr addsc
002E77  3  A9 0A                lda #10
002E79  3  85 62                sta z80_c
002E7B  3  AD 28 11             lda vara
002E7E  3  38                   sec
002E7F  3  E5 62                sbc z80_c
002E81  3  8D 28 11             sta vara
002E84  3  A9 00                lda #0
002E86  3  8D 41 11             sta chary
002E89  3  A9 0A                lda #10
002E8B  3  8D 40 11             sta charx
002E8E  3                       ; COLOUR command
002E8E  3  20 7B 16             jsr dscor
002E91  3  A9 0B                lda #11
002E93  3  CD 2C 11             cmp vare
002E96  3  90 02                bcc *+4
002E98  3  D0 03                bne *+5
002E9A  3  4C A6 2E             jmp k00144
002E9D  3  AD 29 11             lda varb
002EA0  3  18                   clc
002EA1  3  69 01                adc #1
002EA3  3  8D 29 11             sta varb
002EA6  3  A9 6E        k00144: lda #110
002EA8  3  CD 29 11             cmp varb
002EAB  3  90 03                bcc *+5
002EAD  3  4C 4F 2F             jmp k00475
002EB0  3  A9 01                lda #1
002EB2  3  85 62                sta z80_c
002EB4  3  A9 01                lda #1
002EB6  3  85 63                sta z80_b
002EB8  3  20 A8 15             jsr spawn
002EBB  3  AD 4A 16             lda spptr
002EBE  3  85 68                sta z80_x
002EC0  3  AD 4B 16             lda spptr+1
002EC3  3  85 69                sta z80_i
002EC5  3  20 56 2F             jsr read10
002EC8  3  A0 0C                ldy #12
002ECA  3  91 68                sta (z80_ix),y
002ECC  3  A9 80                lda #128
002ECE  3  85 65                sta z80_d
002ED0  3  20 4E 1C             jsr random
002ED3  3  85 67                sta z80_h
002ED5  3  20 2F 14             jsr imul
002ED8  3  A5 67                lda z80_h
002EDA  3  8D 43 11             sta varrnd
002EDD  3  AD 43 11             lda varrnd
002EE0  3  A0 09                ldy #9
002EE2  3  91 68                sta (z80_ix),y
002EE4  3  A9 10                lda #16
002EE6  3  85 62                sta z80_c
002EE8  3  A0 09                ldy #9
002EEA  3  B1 68                lda (z80_ix),y
002EEC  3  18                   clc
002EED  3  65 62                adc z80_c
002EEF  3  A0 09                ldy #9
002EF1  3  91 68                sta (z80_ix),y
002EF3  3  A9 80                lda #128
002EF5  3  85 65                sta z80_d
002EF7  3  20 4E 1C             jsr random
002EFA  3  85 67                sta z80_h
002EFC  3  20 2F 14             jsr imul
002EFF  3  A5 67                lda z80_h
002F01  3  8D 43 11             sta varrnd
002F04  3  AD 43 11             lda varrnd
002F07  3  A0 08                ldy #8
002F09  3  91 68                sta (z80_ix),y
002F0B  3  A9 38                lda #56
002F0D  3  85 62                sta z80_c
002F0F  3  A0 08                ldy #8
002F11  3  B1 68                lda (z80_ix),y
002F13  3  18                   clc
002F14  3  65 62                adc z80_c
002F16  3  A0 08                ldy #8
002F18  3  91 68                sta (z80_ix),y
002F1A  3  A9 00                lda #0
002F1C  3  85 63                sta z80_b
002F1E  3  20 3F 21             jsr sktyp
002F21  3  B0 03                bcs :+
002F23  3  4C 2F 2F             jmp k00417
002F26  3               :
002F26  3  A9 FF                lda #255
002F28  3  A0 05                ldy #5
002F2A  3  91 68                sta (z80_ix),y
002F2C  3  4C 45 2F             jmp k00457
002F2F  3  A9 14        k00417: lda #20
002F31  3  85 62                sta z80_c
002F33  3  AD 29 11             lda varb
002F36  3  38                   sec
002F37  3  E5 62                sbc z80_c
002F39  3  8D 29 11             sta varb
002F3C  3  AD 2C 11             lda vare
002F3F  3  18                   clc
002F40  3  69 01                adc #1
002F42  3  8D 2C 11             sta vare
002F45  3  AD 2A 1F     k00457: lda ogptr
002F48  3  85 68                sta z80_x
002F4A  3  AD 2B 1F             lda ogptr+1
002F4D  3  85 69                sta z80_i
002F4F  3  60           k00475: rts
002F50  3  00           rptr10: .byte 0
002F51  3  42 45 46 43  rdat10: .byte 66,69,70,67,68
002F55  3  44           
002F56  3  AC 50 2F     read10: ldy rptr10
002F59  3  EE 50 2F             inc rptr10
002F5C  3  B9 51 2F             lda rdat10,y
002F5F  3  60                   rts
002F60  3  60                   rts
002F61  3               evnt11:
002F61  3  60                   rts
002F62  3               evnt12:
002F62  3  60                   rts
002F63  3               evnt13:
002F63  3  60                   rts
002F64  3               evnt14:
002F64  3                       ; BORDER command
002F64  3  20 1E 12             jsr cls
002F67  3  A9 00                lda #0
002F69  3  8D 36 1D             sta prtmod
002F6C  3                       ; COLOUR command
002F6C  3  A9 00                lda #0
002F6E  3  8D 41 11             sta chary
002F71  3  A9 04                lda #4
002F73  3  8D 40 11             sta charx
002F76  3  A9 06                lda #6
002F78  3  20 D4 1C             jsr dmsg
002F7B  3  20 7B 16             jsr dscor
002F7E  3  A9 07                lda #7
002F80  3  20 D4 1C             jsr dmsg
002F83  3  20 70 16             jsr dhisc
002F86  3  A9 17                lda #23
002F88  3  8D 41 11             sta chary
002F8B  3  A9 0A                lda #10
002F8D  3  8D 40 11             sta charx
002F90  3  A9 08                lda #8
002F92  3  20 D4 1C             jsr dmsg
002F95  3  A9 01                lda #1
002F97  3  8D 27 11             sta numlif
002F9A  3  A9 00                lda #0
002F9C  3  8D 2C 11             sta vare
002F9F  3  A9 00                lda #0
002FA1  3  8D 28 11             sta vara
002FA4  3  A9 69                lda #105
002FA6  3  8D 29 11             sta varb
002FA9  3  60                   rts
002FAA  3               evnt15:
002FAA  3  60                   rts
002FAB  3               evnt16:
002FAB  3  AD 27 11             lda numlif
002FAE  3  38                   sec
002FAF  3  E9 01                sbc #1
002FB1  3  8D 27 11             sta numlif
002FB4  3  60                   rts
002FB5  3               evnt17:
002FB5  3  A9 01                lda #1
002FB7  3  8D 36 1D             sta prtmod
002FBA  3  A9 08                lda #8
002FBC  3  8D 41 11             sta chary
002FBF  3  A9 0D                lda #13
002FC1  3  8D 40 11             sta charx
002FC4  3                       ; COLOUR command
002FC4  3  A9 09                lda #9
002FC6  3  20 D4 1C             jsr dmsg
002FC9  3  A9 02                lda #2
002FCB  3  85 62                sta z80_c
002FCD  3  AD 41 11             lda chary
002FD0  3  18                   clc
002FD1  3  65 62                adc z80_c
002FD3  3  8D 41 11             sta chary
002FD6  3  A9 0D                lda #13
002FD8  3  8D 40 11             sta charx
002FDB  3                       ; COLOUR command
002FDB  3  A9 0A                lda #10
002FDD  3  20 D4 1C             jsr dmsg
002FE0  3  20 4F 11             jsr prskey
002FE3  3  60                   rts
002FE4  3               evnt18:
002FE4  3  60                   rts
002FE5  3               evnt19:
002FE5  3                       ; COLOUR command
002FE5  3  A9 0E                lda #14
002FE7  3  8D 41 11             sta chary
002FEA  3  A9 08                lda #8
002FEC  3  8D 40 11             sta charx
002FEF  3  A9 0B                lda #11
002FF1  3  20 D4 1C             jsr dmsg
002FF4  3  A9 00                lda #0
002FF6  3  8D 36 1D             sta prtmod
002FF9  3  A9 00                lda #0
002FFB  3  8D 41 11             sta chary
002FFE  3  A9 17                lda #23
003000  3  8D 40 11             sta charx
003003  3  20 70 16             jsr dhisc
003006  3  60                   rts
003007  3  60           ptcusr: rts
003008  3               msgdat:
003008  3  53 43 4F 52          .byte "SCOR",197
00300C  3  C5           
00300D  3  20 20 48 49          .byte "  HIG",200
003011  3  47 C8        
003013  3  44 4F 44 47          .byte "DODGY GEEZ",197
003017  3  59 20 47 45  
00301B  3  45 5A C5     
00301E  3  20 47 41 4D          .byte " GAM",197
003022  3  C5           
003023  3  20 4F 56 45          .byte " OVE",210
003027  3  D2           
003028  3  20 4E 45 57          .byte " NEW HIGH SCOR",197
00302C  3  20 48 49 47  
003030  3  48 20 53 43  
003037  3  53 43 4F 52          .byte "SCORE",160
00303B  3  45 A0        
00303D  3  20 20 48 49          .byte "  HIGH",160
003041  3  47 48 A0     
003044  3  44 4F 44 47          .byte "DODGY GEEZE",210
003048  3  59 20 47 45  
00304C  3  45 5A 45 D2  
003050  3  20 47 41 4D          .byte " GAME",160
003054  3  45 A0        
003056  3  20 4F 56 45          .byte " OVER",160
00305A  3  52 A0        
00305C  3  20 4E 45 57          .byte " NEW HIGH SCORE",160
003060  3  20 48 49 47  
003064  3  48 20 53 43  
00306C  3               nummsg:
00306C  3  0C                   .byte 12
00306D  3               chgfx:
00306D  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
003071  3  FF FF FF FF  
003075  3  01 01 01 FF          .byte 1,1,1,255,16,16,16,255
003079  3  10 10 10 FF  
00307D  3               bprop:
00307D  3  00                   .byte 0
00307E  3  02                   .byte 2
00307F  3               sprgfx:
00307F  3  11 88 73 CE          .byte 17,136,115,206,55,236,21,168,42,80,125,180,107,222,236,54,206,119,143,243,135,241,13,185,28,28,24,56,12,126,126,0
003083  3  37 EC 15 A8  
003087  3  2A 50 7D B4  
00309F  3  04 62 9C F3          .byte 4,98,156,243,13,251,5,106,10,148,31,109,154,247,187,13,243,157,227,252,97,252,67,110,7,7,6,14,131,31,31,128
0030A3  3  0D FB 05 6A  
0030A7  3  0A 94 1F 6D  
0030BF  3  81 18 E7 3C          .byte 129,24,231,60,195,126,129,90,2,165,71,219,230,189,110,195,124,231,56,255,24,127,144,219,193,193,129,131,224,199,7,224
0030C3  3  C3 7E 81 5A  
0030C7  3  02 A5 47 DB  
0030DF  3  20 46 39 CF          .byte 32,70,57,207,176,223,160,86,64,169,209,246,121,175,219,176,223,57,206,63,198,31,228,54,112,112,224,96,248,49,1,248
0030E3  3  B0 DF A0 56  
0030E7  3  40 A9 D1 F6  
0030FF  3  11 88 73 CE          .byte 17,136,115,206,55,236,21,168,10,84,45,190,123,214,108,55,238,115,223,241,187,225,185,176,12,56,126,24,0,48,0,126
003103  3  37 EC 15 A8  
003107  3  0A 54 2D BE  
00311F  3  04 62 9C F3          .byte 4,98,156,243,13,251,5,106,2,149,139,111,158,245,219,13,251,156,119,252,110,248,46,108,3,14,31,134,0,12,128,31
003123  3  0D FB 05 6A  
003127  3  02 95 8B 6F  
00313F  3  81 18 E7 3C          .byte 129,24,231,60,195,126,129,90,64,165,226,219,103,189,118,195,62,231,29,255,27,190,11,155,128,195,135,225,0,3,224,7
003143  3  C3 7E 81 5A  
003147  3  40 A5 E2 DB  
00315F  3  20 46 39 CF          .byte 32,70,57,207,176,223,160,86,80,41,248,182,89,239,221,176,207,185,199,127,134,239,194,230,224,48,97,248,192,0,248,1
003163  3  B0 DF A0 56  
003167  3  50 29 F8 B6  
00317F  3  11 88 73 CE          .byte 17,136,115,206,55,236,21,168,10,84,45,190,123,214,108,55,238,115,207,241,143,225,157,176,56,56,28,24,126,48,0,126
003183  3  37 EC 15 A8  
003187  3  0A 54 2D BE  
00319F  3  04 62 9C F3          .byte 4,98,156,243,13,251,5,106,2,149,139,111,158,245,219,13,251,156,115,252,99,248,39,108,14,14,7,6,31,140,128,31
0031A3  3  0D FB 05 6A  
0031A7  3  02 95 8B 6F  
0031BF  3  81 18 E7 3C          .byte 129,24,231,60,195,126,129,90,64,165,226,219,103,189,118,195,62,231,28,255,24,254,9,219,131,131,129,193,7,227,224,7
0031C3  3  C3 7E 81 5A  
0031C7  3  40 A5 E2 DB  
0031DF  3  20 46 39 CF          .byte 32,70,57,207,176,223,160,86,80,41,248,182,89,239,221,176,207,185,199,63,134,63,194,118,224,224,96,112,193,248,248,1
0031E3  3  B0 DF A0 56  
0031E7  3  50 29 F8 B6  
0031FF  3  11 88 73 CE          .byte 17,136,115,206,55,236,21,168,42,80,125,180,107,222,236,54,206,119,143,251,135,221,13,157,28,48,24,126,12,0,126,0
003203  3  37 EC 15 A8  
003207  3  2A 50 7D B4  
00321F  3  04 62 9C F3          .byte 4,98,156,243,13,251,5,106,10,148,31,109,154,247,187,13,243,157,227,254,97,247,67,103,7,12,134,31,3,0,31,128
003223  3  0D FB 05 6A  
003227  3  0A 94 1F 6D  
00323F  3  81 18 E7 3C          .byte 129,24,231,60,195,126,129,90,2,165,71,219,230,189,110,195,124,231,184,255,216,125,208,217,1,195,225,135,0,192,7,224
003243  3  C3 7E 81 5A  
003247  3  02 A5 47 DB  
00325F  3  20 46 39 CF          .byte 32,70,57,207,176,223,160,86,64,169,209,246,121,175,219,176,223,57,238,63,118,31,116,54,192,112,248,97,0,48,1,248
003263  3  B0 DF A0 56  
003267  3  40 A9 D1 F6  
00327F  3  3C 1C 7C 1E          .byte 60,28,124,30,254,63,254,63,255,127,63,255,15,252,7,240,15,224,63,240,255,252,254,255,252,127,252,127,120,62,56,60
003283  3  FE 3F FE 3F  
003287  3  FF 7F 3F FF  
00329F  3  0F 07 9F 07          .byte 15,7,159,7,255,143,255,143,255,223,207,255,3,255,1,252,3,248,15,252,63,255,255,191,255,31,255,31,158,15,14,15
0032A3  3  FF 8F FF 8F  
0032A7  3  FF DF CF FF  
0032BF  3  C3 C1 E7 C1          .byte 195,193,231,193,255,227,255,227,255,247,243,255,192,255,0,127,0,254,3,255,207,255,255,239,255,199,255,199,231,131,195,131
0032C3  3  FF E3 FF E3  
0032C7  3  FF F7 F3 FF  
0032DF  3  70 F0 79 F0          .byte 112,240,121,240,255,248,255,248,255,253,252,255,240,63,192,31,128,63,192,255,243,255,255,251,255,241,255,241,249,224,240,224
0032E3  3  FF F8 FF F8  
0032E7  3  FF FD FC FF  
0032FF  3  00 FC 60 FE          .byte 0,252,96,254,240,254,248,252,252,248,255,240,255,224,255,224,7,255,7,255,15,255,31,63,63,31,127,15,127,6,63,0
003303  3  F0 FE F8 FC  
003307  3  FC F8 FF F0  
00331F  3  00 3F 98 3F          .byte 0,63,152,63,188,63,62,63,63,62,63,252,63,248,63,248,193,255,193,255,195,255,199,207,207,199,223,195,159,193,15,192
003323  3  BC 3F 3E 3F  
003327  3  3F 3E 3F FC  
00333F  3  C0 0F E6 0F          .byte 192,15,230,15,239,15,207,143,143,207,15,255,15,254,15,254,240,127,240,127,240,255,241,243,243,241,247,240,103,240,3,240
003343  3  EF 0F CF 8F  
003347  3  8F CF 0F FF  
00335F  3  F0 03 F9 83          .byte 240,3,249,131,251,195,243,227,227,243,195,255,131,255,131,255,252,31,252,31,252,63,252,124,124,252,61,252,25,252,0,252
003363  3  FB C3 F3 E3  
003367  3  E3 F3 C3 FF  
00337F  3  3C 1C 7C 1E          .byte 60,28,124,30,254,63,254,63,255,127,63,255,15,252,7,240,15,224,63,240,255,252,254,255,252,127,252,127,120,62,56,60
003383  3  FE 3F FE 3F  
003387  3  FF 7F 3F FF  
00339F  3  0F 07 9F 07          .byte 15,7,159,7,255,143,255,143,255,223,207,255,3,255,1,252,3,248,15,252,63,255,255,191,255,31,255,31,158,15,14,15
0033A3  3  FF 8F FF 8F  
0033A7  3  FF DF CF FF  
0033BF  3  C3 C1 E7 C1          .byte 195,193,231,193,255,227,255,227,255,247,243,255,192,255,0,127,0,254,3,255,207,255,255,239,255,199,255,199,231,131,195,131
0033C3  3  FF E3 FF E3  
0033C7  3  FF F7 F3 FF  
0033DF  3  70 F0 79 F0          .byte 112,240,121,240,255,248,255,248,255,253,252,255,240,63,192,31,128,63,192,255,243,255,255,251,255,241,255,241,249,224,240,224
0033E3  3  FF F8 FF F8  
0033E7  3  FF FD FC FF  
0033FF  3  3F 00 7F 06          .byte 63,0,127,6,127,15,63,31,31,63,15,255,7,255,7,255,255,224,255,224,255,240,252,248,248,252,240,254,96,254,0,252
003403  3  7F 0F 3F 1F  
003407  3  1F 3F 0F FF  
00341F  3  0F C0 9F C1          .byte 15,192,159,193,223,195,207,199,199,207,195,255,193,255,193,255,63,248,63,248,63,252,63,62,62,63,188,63,152,63,0,63
003423  3  DF C3 CF C7  
003427  3  C7 CF C3 FF  
00343F  3  03 F0 67 F0          .byte 3,240,103,240,247,240,243,241,241,243,240,255,240,127,240,127,15,254,15,254,15,255,143,207,207,143,239,15,230,15,192,15
003443  3  F7 F0 F3 F1  
003447  3  F1 F3 F0 FF  
00345F  3  00 FC 19 FC          .byte 0,252,25,252,61,252,124,252,252,124,252,63,252,31,252,31,131,255,131,255,195,255,227,243,243,227,251,195,249,131,240,3
003463  3  3D FC 7C FC  
003467  3  FC 7C FC 3F  
00347F  3               frmlst:
00347F  3  00 04                .byte 0,4
003481  3  04 04 08 00          .byte 4,4,8,0
003485  3               scdat:
003485  3  68 00                .word 104
003487  3  FF 01 1F FF          .byte 255,1,31,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1
00348B  3  00 1C 01 01  
00348F  3  FF 00 1C 01  
0034A8  3  FF 00 1C 01          .byte 255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28
0034AC  3  01 FF 00 1C  
0034B0  3  01 01 FF 00  
0034C9  3  01 01 FF 00          .byte 1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28
0034CD  3  1C 01 01 FF  
0034D1  3  00 1C 01 01  
0034EC  3  FF 01 1F             .byte 255,1,31
0034EF  3               numsc:
0034EF  3  01                   .byte 1
0034F0  3               nmedat:
0034F0  3  00 00 58 80          .byte 0,0,88,128,255
0034F4  3  FF           
0034F5  3               NUMOBJ = 3
0034F5  3               objdta:
0034F5  3  00 00 7F FE          .byte 0,0,127,254,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,127,254,0,0,255,80,24,255,80,24
0034F9  3  40 02 40 02  
0034FD  3  40 02 40 02  
00351B  3  00 00 7F FE          .byte 0,0,127,254,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,127,254,0,0,255,96,26,255,96,26
00351F  3  40 02 40 02  
003523  3  40 02 40 02  
003541  3  00 00 7F FE          .byte 0,0,127,254,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,127,254,0,0,255,112,28,255,112,28
003545  3  40 02 40 02  
003549  3  40 02 40 02  
003567  3               font:
003567  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00356B  3  00 00 00 00  
00356F  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
003573  3  30 00 30 00  
003577  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
00357B  3  00 00 00 00  
00357F  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
003583  3  6C FE 6C 00  
003587  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
00358B  3  7E 1E 7E 18  
00358F  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
003593  3  30 6E CE 00  
003597  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
00359B  3  7E CC 7E 00  
00359F  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
0035A3  3  00 00 00 00  
0035A7  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
0035AB  3  18 18 0C 00  
0035AF  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
0035B3  3  30 30 60 00  
0035B7  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
0035BB  3  7E 18 3C 00  
0035BF  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
0035C3  3  7E 18 18 00  
0035C7  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0035CB  3  00 18 18 30  
0035CF  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
0035D3  3  7E 00 00 00  
0035D7  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
0035DB  3  00 38 38 00  
0035DF  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
0035E3  3  18 30 60 00  
0035E7  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
0035EB  3  F6 E6 7C 00  
0035EF  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
0035F3  3  18 18 7E 00  
0035F7  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
0035FB  3  7C C0 FE 00  
0035FF  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
003603  3  06 C6 7C 00  
003607  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
00360B  3  D8 FE 18 00  
00360F  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
003613  3  06 C6 7C 00  
003617  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
00361B  3  C6 C6 7C 00  
00361F  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
003623  3  18 30 30 00  
003627  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
00362B  3  C6 C6 7C 00  
00362F  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
003633  3  7E 06 7C 00  
003637  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
00363B  3  00 00 30 00  
00363F  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
003643  3  00 30 30 60  
003647  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
00364B  3  30 18 0C 00  
00364F  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
003653  3  00 7E 00 00  
003657  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
00365B  3  0C 18 30 00  
00365F  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
003663  3  18 00 18 00  
003667  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
00366B  3  FE C0 7C 00  
00366F  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
003673  3  FE C6 C6 00  
003677  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
00367B  3  C6 C6 FC 00  
00367F  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
003683  3  C0 C6 7C 00  
003687  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
00368B  3  C6 CC F8 00  
00368F  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
003693  3  C0 C0 FE 00  
003697  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
00369B  3  C0 C0 C0 00  
00369F  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
0036A3  3  DE C6 7C 00  
0036A7  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
0036AB  3  C6 C6 C6 00  
0036AF  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
0036B3  3  18 18 7E 00  
0036B7  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
0036BB  3  C6 C6 7C 00  
0036BF  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
0036C3  3  D8 CC C6 00  
0036C7  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
0036CB  3  C0 C0 FE 00  
0036CF  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
0036D3  3  C6 C6 C6 00  
0036D7  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
0036DB  3  DE CE C6 00  
0036DF  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
0036E3  3  C6 C6 7C 00  
0036E7  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
0036EB  3  FC C0 C0 00  
0036EF  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
0036F3  3  F6 DE 7C 00  
0036F7  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
0036FB  3  FC CC C6 00  
0036FF  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
003703  3  06 C6 7C 00  
003707  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
00370B  3  30 30 30 00  
00370F  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
003713  3  C6 C6 7C 00  
003717  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
00371B  3  C6 6C 38 00  
00371F  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
003723  3  C6 FE 6C 00  
003727  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
00372B  3  38 6C C6 00  
00372F  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
003733  3  30 30 30 00  
003737  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
00373B  3  30 60 FE 00  
00373F  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
003743  3  18 18 1E 00  
003747  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
00374B  3  30 18 0C 00  
00374F  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
003753  3  30 30 F0 00  
003757  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
00375B  3  30 30 30 00  
00375F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
003763  3  00 00 00 FF  
003767  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
00376B  3  60 60 FE 00  
00376F  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
003773  3  7C CC 7C 00  
003777  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
00377B  3  66 66 7C 00  
00377F  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
003783  3  60 60 3C 00  
003787  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
00378B  3  CC CC 7C 00  
00378F  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
003793  3  F8 C0 7C 00  
003797  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
00379B  3  30 30 30 00  
00379F  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
0037A3  3  CC 7C 0C 78  
0037A7  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
0037AB  3  CC CC CC 00  
0037AF  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
0037B3  3  30 30 78 00  
0037B7  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
0037BB  3  0C 0C 6C 38  
0037BF  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
0037C3  3  70 78 6C 00  
0037C7  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
0037CB  3  30 30 1C 00  
0037CF  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
0037D3  3  FC FC FC 00  
0037D7  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
0037DB  3  CC CC CC 00  
0037DF  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
0037E3  3  CC CC 78 00  
0037E7  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
0037EB  3  CC F8 C0 C0  
0037EF  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
0037F3  3  CC 7C 0C 0E  
0037F7  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
0037FB  3  60 60 60 00  
0037FF  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
003803  3  78 0C F8 00  
003807  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
00380B  3  30 30 1C 00  
00380F  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
003813  3  CC CC 78 00  
003817  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
00381B  3  78 78 30 00  
00381F  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
003823  3  FC FC 78 00  
003827  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
00382B  3  30 78 CC 00  
00382F  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
003833  3  CC 7C 0C 78  
003837  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
00383B  3  30 60 FC 00  
00383F  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
003843  3  18 18 1E 00  
003847  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
00384B  3  18 18 18 00  
00384F  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
003853  3  30 30 F0 00  
003857  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
00385B  3  00 00 00 00  
00385F  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
003863  3  E3 BB C6 7C  
003867  3               
003867  1               eind_asm:
003867  2               ;------------------------------------------------------
003867  2               ; z80.asm
003867  2               ; spectrum stuff
003867  2               ; adresses
003867  2               
003867  2               ;ws	 = $60
003867  2               
003867  2               ;z80_f	 = ws+$00
003867  2               ;z80_a	 = ws+$01
003867  2               ;z80_af	 = z80_f
003867  2               
003867  2               ;z80_c	 = ws+$02
003867  2               ;z80_b	 = ws+$03
003867  2               ;z80_bc	 = z80_c
003867  2               
003867  2               ;z80_e	 = ws+$04
003867  2               ;z80_d	 = ws+$05
003867  2               ;z80_de	 = z80_e
003867  2               
003867  2               ;z80_l	 = ws+$06
003867  2               ;z80_h	 = ws+$07
003867  2               ;z80_hl	 = z80_l
003867  2               
003867  2               ;z80_x    = ws+$08
003867  2               ;z80_i    = ws+$09
003867  2               ;z80_ix	 = z80_x
003867  2               
003867  2               ;z80_iy	 = ws+$0a
003867  2               
003867  2               ;z80_fp	 = ws+$0c
003867  2               ;z80_ap	 = ws+$0d
003867  2               
003867  2               ;z80_cp	 = ws+$0e
003867  2               ;z80_bp	 = ws+$0f
003867  2               ;z80_bcp = z80_cp
003867  2               
003867  2               ;z80_ep	 = ws+$10
003867  2               ;z80_dp	 = ws+$11
003867  2               ;z80_dep = z80_ep
003867  2               
003867  2               ;z80_lp	 = ws+$12
003867  2               ;z80_hp	 = ws+$13
003867  2               ;z80_hlp = z80_lp
003867  2               
003867  2               ;z80_sp   = ws+$14
003867  2               
003867  2               ;z80_reg0 = ws+$16
003867  2               ;z80_reg1 = ws+$17
003867  2               ;z80_reg2 = ws+$18
003867  2               ;z80_reg3 = ws+$19
003867  2               
003867  2               ;z80_r	 = ws+$1a
003867  2               
003867  2               ; Contains seperatly 1 bit set
003867  2               
003867  2               _bitmem0	= $f8
003867  2               _bitmem1	= $f9
003867  2               _bitmem2	= $fa
003867  2               _bitmem3	= $fb
003867  2               _bitmem4	= $fc
003867  2               _bitmem5	= $fd
003867  2               _bitmem6	= $fe
003867  2               _bitmem7	= $ff
003867  2               	
003867  2               ; constants	
003867  2               _bitvalue0	= $01	
003867  2               _bitvalue1	= $02	
003867  2               _bitvalue2	= $04	
003867  2               _bitvalue3	= $08	
003867  2               _bitvalue4	= $10	
003867  2               _bitvalue5	= $20	
003867  2               _bitvalue6	= $40	
003867  2               _bitvalue7	= $80	
003867  2               
003867  2               _notbitvalue0	= $fe	
003867  2               _notbitvalue1	= $fd	
003867  2               _notbitvalue2	= $fb	
003867  2               _notbitvalue3	= $f7	
003867  2               _notbitvalue4	= $ef	
003867  2               _notbitvalue5	= $df	
003867  2               _notbitvalue6	= $bf	
003867  2               _notbitvalue7	= $7f	
003867  2               
003867  2               
003867  2               ;add_hl_bc:
003867  2               ;		lda z80_l
003867  2               ;		clc
003867  2               ;		adc z80_c
003867  2               ;		sta z80_l
003867  2               ;		lda z80_h
003867  2               ;		adc z80_b
003867  2               ;		sta z80_h
003867  2               ;		rts
003867  2               ;		
003867  2               ;add_ix_de:
003867  2               ;		lda z80_ix
003867  2               ;		clc
003867  2               ;		adc z80_e
003867  2               ;		sta z80_ix
003867  2               ;		lda z80_ix+1
003867  2               ;		adc z80_d
003867  2               ;		sta z80_ix+1
003867  2               ;		rts
003867  2               ;		
003867  2               ;add_iy_de:
003867  2               ;		lda z80_iy
003867  2               ;		clc
003867  2               ;		adc z80_e
003867  2               ;		sta z80_iy
003867  2               ;		lda z80_iy+1
003867  2               ;		adc z80_d
003867  2               ;		sta z80_iy+1
003867  2               ;		rts
003867  2               ;		
003867  2               ;add_hl_de:
003867  2               ;		lda z80_l
003867  2               ;		clc
003867  2               ;		adc z80_e
003867  2               ;		sta z80_l
003867  2               ;		lda z80_h
003867  2               ;		adc z80_d
003867  2               ;		sta z80_h
003867  2               ;		rts
003867  2               ;
003867  2               ;add_ix_bc:
003867  2               ;		lda z80_ix
003867  2               ;		clc
003867  2               ;		adc z80_c
003867  2               ;		sta z80_ix
003867  2               ;		lda z80_ix+1
003867  2               ;		adc z80_b
003867  2               ;		sta z80_ix+1
003867  2               ;		rts
003867  2               ;		
003867  2               ;add_iy_bc:
003867  2               ;		lda z80_iy
003867  2               ;		clc
003867  2               ;		adc z80_c
003867  2               ;		sta z80_iy
003867  2               ;		lda z80_iy+1
003867  2               ;		adc z80_b
003867  2               ;		sta z80_iy+1
003867  2               ;		rts
003867  2               ;		
003867  2               sbc_hl_de:
003867  2  A5 66        		lda z80_l
003869  2  E5 64        		sbc z80_e
00386B  2  85 66        		sta z80_l
00386D  2  A5 67        		lda z80_h
00386F  2  E5 65        		sbc z80_d
003871  2  85 67        		sta z80_h
003873  2  60           		rts
003874  2               
003874  2               ;sbc_hl_bc:
003874  2               ;		lda z80_l
003874  2               ;		sbc z80_c
003874  2               ;		sta z80_l
003874  2               ;		lda z80_h
003874  2               ;		sbc z80_b
003874  2               ;		sta z80_h
003874  2               ;		rts
003874  2               ;
003874  2               ;cmp_hl_bc:
003874  2               ;		lda z80_l
003874  2               ;		cmp z80_c
003874  2               ;		bne cmp_hl_bc_end
003874  2               ;		lda z80_h
003874  2               ;		cmp z80_b
003874  2               ;cmp_hl_bc_end:
003874  2               ;		rts
003874  2               ;		
003874  2               ;cmp_iy_ix:
003874  2               ;		lda z80_iy
003874  2               ;		cmp z80_ix
003874  2               ;		bne cmp_iy_ix_end
003874  2               ;		lda z80_iy+1
003874  2               ;		cmp z80_ix+1
003874  2               ;cmp_iy_ix_end:
003874  2               ;		rts
003874  2               ;		
003874  2               ;dec_hl:
003874  2               ;		lda z80_l
003874  2               ;		bne dec_hl_no_dec_h
003874  2               ;		dec z80_h
003874  2               ;dec_hl_no_dec_h:
003874  2               ;		dec z80_l
003874  2               ;		rts
003874  2               ;	
003874  2               ;dec_ix:
003874  2               ;		lda z80_ix
003874  2               ;		bne dec_ix_no_dec_h
003874  2               ;		dec z80_ix+1
003874  2               ;dec_ix_no_dec_h:
003874  2               ;		dec z80_ix
003874  2               ;		rts
003874  2               ;		
003874  2               ;dec_bc:	
003874  2               ;		lda z80_c
003874  2               ;		bne dec_bc_no_dec_b
003874  2               ;		dec z80_b
003874  2               ;dec_bc_no_dec_b:
003874  2               ;		dec z80_c
003874  2               ;		rts
003874  2               ;	
003874  2               ;dec_de:
003874  2               ;		lda z80_e
003874  2               ;		bne dec_de_no_dec_d
003874  2               ;		dec z80_d
003874  2               ;dec_de_no_dec_d:
003874  2               ;		dec z80_e
003874  2               ;		rts
003874  2               ;		
003874  2               ;ex_af_afs:
003874  2               ;	rts
003874  2               ;ex_de_hl:
003874  2               ;		lda z80_e
003874  2               ;		ldx z80_l
003874  2               ;		stx z80_e
003874  2               ;		sta z80_l
003874  2               ;		lda z80_d
003874  2               ;		ldx z80_h
003874  2               ;		stx z80_d
003874  2               ;		sta z80_h
003874  2               ;		rts
003874  2               ;
003874  2               exx:
003874  2  A5 62        		lda z80_c
003876  2  A4 6E        		ldy z80_cp
003878  2  84 62        		sty z80_c
00387A  2  85 6E        		sta z80_cp
00387C  2  A5 63        		lda z80_b
00387E  2  A4 6F        		ldy z80_bp
003880  2  84 63        		sty z80_b
003882  2  85 6F        		sta z80_bp
003884  2  A5 64        		lda z80_e
003886  2  A4 70        		ldy z80_ep
003888  2  84 64        		sty z80_e
00388A  2  85 70        		sta z80_ep
00388C  2  A5 65        		lda z80_d
00388E  2  A4 71        		ldy z80_dp
003890  2  84 65        		sty z80_d
003892  2  85 71        		sta z80_dp		
003894  2  A5 80        		lda scraddr
003896  2  A4 72        		ldy z80_lp
003898  2  84 80        		sty scraddr
00389A  2  85 72        		sta z80_lp
00389C  2  A5 81        		lda scraddr+1
00389E  2  A4 73        		ldy z80_hp
0038A0  2  84 81        		sty scraddr+1
0038A2  2  85 73        		sta z80_hp
0038A4  2  60           		rts
0038A5  2               		
0038A5  2               ;ex_sp_hl:
0038A5  2               ;		tsx
0038A5  2               ;		lda $0103,x
0038A5  2               ;		ldy z80_h
0038A5  2               ;		sta z80_h
0038A5  2               ;		tya
0038A5  2               ;		sta $0103,x
0038A5  2               ;		lda $0104,x
0038A5  2               ;		ldy z80_l
0038A5  2               ;		sta z80_l
0038A5  2               ;		tya
0038A5  2               ;		sta $104,x
0038A5  2               ;		rts
0038A5  2               ;		
0038A5  2               ;ldi:
0038A5  2               ;	rts
0038A5  2               ;ldir:
0038A5  2               ;		ldy #$00
0038A5  2               ;		ldx z80_b
0038A5  2               ;		beq ldir_last_page
0038A5  2               ;ldir_loop:		
0038A5  2               ;		lda (z80_hl),y
0038A5  2               ;		sta (z80_de),y
0038A5  2               ;		iny
0038A5  2               ;		bne ldir_loop
0038A5  2               ;		inc z80_h
0038A5  2               ;		inc z80_d
0038A5  2               ;		dex
0038A5  2               ;		bne ldir_loop
0038A5  2               ;ldir_last_page:
0038A5  2               ;		lda z80_c
0038A5  2               ;		beq ldir_end
0038A5  2               ;ldir_last_page_loop:		
0038A5  2               ;		lda (z80_hl),y
0038A5  2               ;		sta (z80_de),y
0038A5  2               ;		iny
0038A5  2               ;		cpy z80_c
0038A5  2               ;		bne ldir_last_page_loop
0038A5  2               ;ldir_end:		
0038A5  2               ;		stx z80_c
0038A5  2               ;		stx z80_b
0038A5  2               ;		tya
0038A5  2               ;		clc
0038A5  2               ;		adc z80_l
0038A5  2               ;		sta z80_l
0038A5  2               ;		bcc *+4
0038A5  2               ;		inc z80_h
0038A5  2               ;		tya
0038A5  2               ;		clc
0038A5  2               ;		adc z80_e
0038A5  2               ;		sta z80_e
0038A5  2               ;		bcc *+4
0038A5  2               ;		inc z80_d
0038A5  2               ;		rts
0038A5  2               ;		
0038A5  2               ;lddr:		ldy #$00
0038A5  2               ;lddr_loop:
0038A5  2               ;		lda (z80_hl),y
0038A5  2               ;		sta (z80_de),y
0038A5  2               ;		jsr dec_hl
0038A5  2               ;		jsr dec_de
0038A5  2               ;		jsr dec_bc
0038A5  2               ;		lda z80_b
0038A5  2               ;		ora z80_c
0038A5  2               ;		bne lddr_loop
0038A5  2               ;		rts
0038A5  2               ;ei:
0038A5  2               ;		rts
0038A5  2               ;di:
0038A5  2               ;		rts
0038A5  2               		
0038A5  2               ;-------------------------------------------------------------
0038A5  2               ; Set bits in bitmem
0038A5  2               ;-------------------------------------------------------------
0038A5  2               	
0038A5  2               z80_init:
0038A5  2  A2 00        	ldx #$00
0038A7  2  A9 01        	lda #$01
0038A9  2               z80_init_loop:		
0038A9  2  95 F8        	sta _bitmem0,x
0038AB  2  E8           	inx
0038AC  2  0A           	asl a
0038AD  2  D0 FA        	bne z80_init_loop
0038AF  2  60           	rts
0038B0  2               
0038B0  2               push_af:
0038B0  2               push_bc:
0038B0  2               push_de:
0038B0  2               push_hl:
0038B0  2               
0038B0  2               pop_af:
0038B0  2               pop_bc:
0038B0  2               pop_de:
0038B0  2               pop_ix:
0038B0  2               pop_hl:
0038B0  2               
0038B0  2               add_hl_hl:
0038B0  2               
0038B0  2               inc_bc:
0038B0  2               inc_de:
0038B0  2               inc_hl:
0038B0  2               inc_ix:
0038B0  2               inc_sp:
0038B0  2               
0038B0  2               cpir:
0038B0  2               
0038B0  2               ex_af_af:
0038B0  2               ;	rts
0038B0  2               
0038B0  1               
