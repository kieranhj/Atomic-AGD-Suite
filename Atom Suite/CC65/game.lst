ca65 V2.9.2 - (C) Copyright 1998-2000 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $0220
000000r 1               	.DEFINE header   1		; Header Wouter Ras emulator
000000r 1               	.DEFINE filenaam "AGD"
000000r 1               
000000r 1               .org asm_code-22*header
00020A  1               
00020A  1               .IF header
00020A  1               ;********************************************************************
00020A  1               ; ATM Header for Atom emulator Wouter Ras
00020A  1               
00020A  1               name_start:
00020A  1  41 47 44     	.byte filenaam			; Filename
00020D  1               name_end:
00020D  1  00 00 00 00  	.repeat 16-name_end+name_start	; Fill with 0 till 16 chars
000211  1  00 00 00 00  
000215  1  00 00 00 00  
00021A  1               	  .byte $0
00021A  1               	.endrep
00021A  1               
00021A  1  20 02        	.word asm_code			; 2 bytes startaddress
00021C  1  20 02        	.word exec			; 2 bytes linkaddress
00021E  1  47 6D        	.word eind_asm-start_asm	; 2 bytes filelength
000220  1               
000220  1               ;********************************************************************
000220  1               .ENDIF
000220  1               
000220  1               exec:
000220  1               start_asm:
000220  1               	.include "z80-zp.inc"
000220  1               	.include "game.inc"
000220  2               .segment "ZEROPAGE"
000220  2               
000220  2               ws	 = $60
000220  2               
000220  2               z80_f	 = ws+$00
000220  2               z80_a	 = ws+$01
000220  2               z80_af	 = z80_f
000220  2               
000220  2               z80_c	 = ws+$02
000220  2               z80_b	 = ws+$03
000220  2               z80_bc	 = z80_c
000220  2               
000220  2               z80_e	 = ws+$04
000220  2               z80_d	 = ws+$05
000220  2               z80_de	 = z80_e
000220  2               
000220  2               z80_l	 = ws+$06
000220  2               z80_h	 = ws+$07
000220  2               z80_hl	 = z80_l
000220  2               
000220  2               z80_x    = ws+$08
000220  2               z80_i    = ws+$09
000220  2               z80_ix	 = z80_x
000220  2               
000220  2               z80_iy	 = ws+$0a
000220  2               
000220  2               z80_fp	 = ws+$0c
000220  2               z80_ap	 = ws+$0d
000220  2               
000220  2               z80_cp	 = ws+$0e
000220  2               z80_bp	 = ws+$0f
000220  2               z80_bcp	 = z80_cp
000220  2               
000220  2               z80_ep	 = ws+$10
000220  2               z80_dp	 = ws+$11
000220  2               z80_dep	 = z80_ep
000220  2               
000220  2               z80_lp	 = ws+$12
000220  2               z80_hp	 = ws+$13
000220  2               z80_hlp	 = z80_lp
000220  2               
000220  2               z80_sp   = ws+$14
000220  2               
000220  2               z80_reg0 = ws+$16
000220  2               z80_reg1 = ws+$17
000220  2               z80_reg2 = ws+$18
000220  2               z80_reg3 = ws+$19
000220  2               
000220  2               z80_r	 = ws+$1a
000220  2               
000220  2               
000220  1               	.include "z80.asm"
000220  2               .include "lumos.inc" 
000220  2               
000220  3               ; Game engine code --------------------------------------------------------------
000220  3               
000220  3               ; Arcade Game Designer.
000220  3               ; (C) 2008 Jonathan Cauldwell.
000220  3               ; ZX Spectrum Next Engine v0.1.
000220  3               
000220  3               ; Global definitions ------------------------------------------------------------
000220  3               
000220  3               	FONT = font		; Font address
000220  3               	SIMASK = 248		; SPRITEINK mask - default to just INK.
000220  3               ;	SHRAPN = 63926		; shrapnel table, just below screen address table.
000220  3               ;	SCADTB = 64256		; screen address table, just below map.
000220  3               ;	MAP = 22528		; properties map buffer.
000220  3               
000220  3               ;	loopa = 23681           ; loop counter system variable.
000220  3               ;	loopb = 23728           ; loop counter system variable.
000220  3               ;	loopc = 23729           ; loop counter system variable.
000220  3               
000220  3               ; Block characteristics.
000220  3               
000220  3               	PLATFM = 1		; platform.
000220  3               	WALL = PLATFM + 1	; solid wall.
000220  3               	LADDER = WALL + 1	; ladder.
000220  3               	FODDER = LADDER + 1	; fodder block.
000220  3               	DEADLY = FODDER + 1	; deadly block.
000220  3               	CUSTOM = DEADLY + 1	; custom block.
000220  3               	NUMTYP = CUSTOM + 1	; number of types.
000220  3               
000220  3               ; Sprites.
000220  3               
000220  3               	NUMSPR = 12		; number of sprites.
000220  3               	TABSIZ = 17		; size of each entry.
000220  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000220  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
000220  3               	var_X  = 8		; new x coordinate of sprite.
000220  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
000220  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
000220  3               
000220  3               ; Particle engine.
000220  3               
000220  3               	NUMSHR = 55		; pieces of shrapnel.
000220  3               	SHRSIZ = 6		; bytes per particle.
000220  3               
000220  3               ; Local vars
000220  3               
000220  3               	scraddr	= $80
000220  3               	fntaddr	= $82
000220  3               	tileaddr= $84
000220  3               	bufaddr	= $86
000220  3               	tmp     = $88
000220  3               
000220  3               ; System constants
000220  3               
000220  3               .if iflag
000220  3               	TxtInvert   = $ff	; Invert byte for character printing
000220  3               	ScrFillByte = $ff	; Screen fill byte for CLS
000220  3               .else
000220  3               	TxtInvert   = $00	; Invert byte for character printing
000220  3               	ScrFillByte = $00	; Screen fill byte for CLS
000220  3               .endif
000220  3               	ScrMode     = $f0	; Screen mode:
000220  3               				;  $d0 = CLEAR4a colour
000220  3               				;  $f0 = CLEAR4  mono
000220  3               	ScrSelAddr  = $b000	; Screen selection address
000220  3               	KeyRowAddr  = $b000	; PIA key matrix row
000220  3               	KeyColAddr  = $b001	; PIA key matrix column
000220  3               
000220  3               ; System calls
000220  3               
000220  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
000220  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
000220  3               	OSRDCH   = $fe94	; get key subroutine
000220  3                       READKEY  = $fe71	; scan key matrix subroutine
000220  3               
000220  3               ; Conditional compilation flags
000220  3               
000220  3               ;	mflag = 0 		; MENU + INV
000220  3               ;	pflag = 0		; Particle engine
000220  3               ;	sflag = 0		; scrollytext
000220  3               	fflag = 1		; Fontflag
000220  3               
000220  3               ;===============================================================
000220  3               ; Game starts here
000220  3               ;===============================================================
000220  3               
000220  3               .segment "CODE"
000220  3               
000220  3  78           	sei
000221  3               
000221  3               ;--------------------------------------------------------------
000221  3               ; If a font is required...
000221  3               ;--------------------------------------------------------------
000221  3               
000221  3  A9 1E        	lda #<(FONT-256)	; address of font.
000223  3  8D 85 18     	sta FontPtr
000226  3  A9 6B        	lda #>(FONT-256)
000228  3  8D 86 18     	sta FontPtr+1
00022B  3               
00022B  3  20 25 04     	jsr game	 	; start the game.
00022E  3  A9 0C        	lda #12			; Clear screen + exit to Basic
000230  3  4C F4 FF     	jmp $fff4
000233  3               	
000233  3  00           contrl:	.byte 0			; control, 0 = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000234  3  00           joyval:	.byte 0			; joystick reading.
000235  3  00           frmno:	.byte 0			; selected frame.
000236  3               
000236  3               ; Don't change the order of these four.  
000236  3               ; Menu routine relies on winlft following wintop.
000236  3               
000236  3  01           wintop:	.byte WINDOWTOP		; top of window.
000237  3  01           winlft:	.byte WINDOWLFT		; left edge.
000238  3  13           winhgt:	.byte WINDOWHGT		; window height.
000239  3  1E           winwid:	.byte WINDOWWID		; window width.
00023A  3  3B           numob:	.byte NUMOBJ		; number of objects in game.
00023B  3               
00023B  3               ; Variables start here.
00023B  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
00023B  3               
00023B  3  08           wntopx:	.byte (8 * WINDOWTOP)
00023C  3  08           wnlftx:	.byte (8 * WINDOWLFT)
00023D  3  90           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00023E  3  E6           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00023F  3               
00023F  3  00           scno:	.byte 0			; present screen number.
000240  3  03           numlif:	.byte 3			; number of lives.
000241  3               
000241  3  00           vara:	.byte 0			; general-purpose variable.
000242  3  00           varb:	.byte 0			; general-purpose variable.
000243  3  00           varc:	.byte 0			; general-purpose variable.
000244  3  00           vard:	.byte 0			; general-purpose variable.
000245  3  00           vare:	.byte 0			; general-purpose variable.
000246  3  00           varf:	.byte 0			; general-purpose variable.
000247  3  00           varg:	.byte 0			; general-purpose variable.
000248  3  00           varh:	.byte 0			; general-purpose variable.
000249  3  00           vari:	.byte 0			; general-purpose variable.
00024A  3  00           varj:	.byte 0			; general-purpose variable.
00024B  3  00           vark:	.byte 0			; general-purpose variable.
00024C  3  00           varl:	.byte 0			; general-purpose variable.
00024D  3  00           varm:	.byte 0			; general-purpose variable.
00024E  3  00           varn:	.byte 0			; general-purpose variable.
00024F  3  00           varo:	.byte 0			; general-purpose variable.
000250  3  00           varp:	.byte 0			; general-purpose variable.
000251  3  00           varq:	.byte 0			; general-purpose variable.
000252  3  00           varr:	.byte 0			; general-purpose variable.
000253  3  00           vars:	.byte 0			; general-purpose variable.
000254  3  00           vart:	.byte 0			; general-purpose variable.
000255  3  00           varu:	.byte 0			; general-purpose variable.
000256  3  00           varv:	.byte 0			; general-purpose variable.
000257  3  00           varw:	.byte 0			; general-purpose variable.
000258  3  00           varz:	.byte 0			; general-purpose variable.
000259  3               
000259  3  00           charx:	.byte 0			; cursor x position.
00025A  3  00           chary:	.byte 0			; cursor y position.
00025B  3               
00025B  3  00           clock:	.byte 0			; last clock reading.
00025C  3  FF           varrnd:	.byte 255		; last random number.
00025D  3  FE           varobj:	.byte 254		; last object number.
00025E  3  FF           varopt:	.byte 255		; last option chosen from menu.
00025F  3  FF           varblk:	.byte 255		; block type.
000260  3  00           nexlev:	.byte 0			; next level flag.
000261  3  00           restfl:	.byte 0			; restart screen flag.
000262  3  00           deadf:	.byte 0			; dead flag.
000263  3  00           gamwon:	.byte 0			; game won flag.
000264  3  00           dispx:	.byte 0			; cursor x position.
000265  3  00           dispy:	.byte 0			; cursor y position.
000266  3               
000266  3               ; Make sure pointers are arranged in the same order as the data itself.
000266  3               
000266  3  AD 46        frmptr:	.word frmlst         ; sprite frames.
000268  3               
000268  3               ; Assorted game routines which can go in contended memory.
000268  3               
000268  3               ;--------------------------------------------------------------
000268  3               ; Modify for inventory.
000268  3               ; called by the INV command
000268  3               ;
000268  3               ; Input:
000268  3               ;  X   = message nr with objects seperated with ,
000268  3               ;
000268  3               ; Output:
000268  3               ;  OPT = selected line nr of INV menu
000268  3               ;--------------------------------------------------------------
000268  3               
000268  3               .if mflag
000268  3               minve:
000268  3               	lda #<(invdis)		; routine address.
000268  3               	sta mod0+1		; set up menu routine.
000268  3               	sta mod2+1		; set up count routine.
000268  3               	lda #>(invdis)
000268  3               	sta mod0+2
000268  3               	sta mod2+2
000268  3               	lda #<(fopt)		; find option from available objects.
000268  3               	sta mod1+1		; set up routine.
000268  3               	lda #>(fopt)
000268  3               	sta mod1+1+1
000268  3               	jmp dbox		; do menu routine.
000268  3               
000268  3               ;--------------------------------------------------------------
000268  3               ; Modify for menu.
000268  3               ; called by the MENU command
000268  3               ;
000268  3               ; Input:
000268  3               ;  X   = message nr with menu items seperated with ,
000268  3               ;
000268  3               ; Output:
000268  3               ;  OPT = selected line nr of MENU menu
000268  3               ;--------------------------------------------------------------
000268  3               
000268  3               mmenu:
000268  3               	lda #<(always)		; routine address.
000268  3               	sta mod0+1		; set up routine.
000268  3               	sta mod2+1		; set up count routine.
000268  3               	lda #>(always)
000268  3               	sta mod0+2
000268  3               	sta mod2+2
000268  3               
000268  3               	lda #<(fstd)		; standard option selection.
000268  3               	sta mod1+1		; set up routine.
000268  3               	lda #>(fstd)
000268  3               	sta mod1+2
000268  3               
000268  3               ; Drop through into box routine.
000268  3               
000268  3               ;--------------------------------------------------------------
000268  3               ; Work out size of box for message or menu.
000268  3               ;--------------------------------------------------------------
000268  3               
000268  3               dbox:
000268  3               	lda #<(msgdat)		; pointer to messages.
000268  3               	sta z80_l
000268  3               	lda #>(msgdat)
000268  3               	sta z80_h
000268  3               	
000268  3               	jsr getwrd		; get message number.
000268  3               
000268  3               	lda z80_h		; store pointer to message.
000268  3               	sta TmpAddr
000268  3               	lda z80_l
000268  3               	sta TmpAddr+1
000268  3               
000268  3               	lda #1			; height.
000268  3               	sta z80_d
000268  3               	lda #0			; start at object zero.
000268  3               	sta combyt		; store number of object in combyt.
000268  3               	sta z80_e		; maximum width.
000268  3               dbox5:
000268  3               	lda #0			; this line"s width.
000268  3               	sta z80_b
000268  3               mod2:
000268  3               	jsr always		; item in player"s possession?
000268  3               	cmp #255
000268  3               	bne dbox6		; not in inventory, skip this line.
000268  3               	inc z80_d		; add to tally.
000268  3               dbox6:
000268  3               	ldy #0			; get character.
000268  3               	lda (z80_hl),y
000268  3               	sta z80_a
000268  3               	inc z80_l		; next character.
000268  3               	bne :+
000268  3               	inc z80_h
000268  3               :
000268  3               	lda z80_a		; reached end of line?
000268  3               	cmp #','
000268  3               	beq dbox3		; yes.
000268  3               	cmp #13
000268  3               	beq dbox3		; yes.
000268  3               	inc z80_b		; add to this line"s width.
000268  3               	lda z80_a
000268  3               	bmi dbox4		; end of message? yes, end count.
000268  3               	jmp dbox6		; repeat until we find the end.
000268  3               dbox3:
000268  3               	lda z80_e		; maximum line width.
000268  3               	cmp z80_b		; have we exceeded longest so far?
000268  3               	bpl dbox5		; no, carry on looking.
000268  3               	lda z80_b		; make this the widest so far.
000268  3               	sta z80_e
000268  3               	jmp dbox5		; keep looking.
000268  3               dbox4:
000268  3               	lda z80_e		; maximum line width.
000268  3               	cmp z80_b		; have we exceeded longest so far?
000268  3               	bpl dbox8		; no, carry on looking.
000268  3               	lda z80_b		; final line is the longest so far.
000268  3               	sta z80_e
000268  3               dbox8:
000268  3               	dec z80_d		; decrement items found.
000268  3               	bne :+			; total was zero.
000268  3               	jmp dbox15		
000268  3               :
000268  3               	lda z80_e		; longest line.
000268  3               	bne :+			; was it zero?
000268  3               	jmp dbox15		; total was zero.
000268  3               :
000268  3               	sta bwid		; set up size.
000268  3               	lda z80_d
000268  3               	sta blen
000268  3               
000268  3               ;--------------------------------------------------------------
000268  3               ; That's set up our box size.
000268  3               ;--------------------------------------------------------------
000268  3               
000268  3               	lda winhgt		; window height in characters.
000268  3               	sec
000268  3               	sbc z80_d		; subtract height of box.
000268  3               	lsr a			; divide by 2.
000268  3               	clc
000268  3               	adc wintop		; add top edge of window.
000268  3               	sta btop		; set up box top.
000268  3               
000268  3               	lda winwid		; window width in characters.
000268  3               	sec	
000268  3               	sbc z80_e		; subtract box width.
000268  3               	lsr a			; divide by 2.
000268  3               	clc
000268  3               	adc winlft		; add left edge of window.
000268  3               	sta blft		; box left.
000268  3               
000268  3               	lda FontPtr		; font.
000268  3               	sta grbase		; set up for text display.
000268  3               	lda FontPtr+1
000268  3               	sta grbase+1
000268  3               
000268  3               	lda TmpAddr+1		; restore message pointer.
000268  3               	sta z80_l
000268  3               	lda TmpAddr
000268  3               	sta z80_h
000268  3               
000268  3               	lda btop		; box top.
000268  3               	sta dispy		; set display coordinate.
000268  3               	lda #0			; start at object zero.
000268  3               	sta combyt		; store number of object in combyt.
000268  3               dbox2:
000268  3               	lda combyt		; get object number.
000268  3               	sta z80_a
000268  3               mod0:
000268  3               	jsr always		; check inventory for display.
000268  3               	cmp #255
000268  3               	beq :+			
000268  3               	jmp dbox13		; not in inventory, skip this line.
000268  3               :
000268  3               	lda blft		; box left.
000268  3               	sta dispx		; set left display position.
000268  3               	lda bwid		; box width.
000268  3               	sta z80_b		; store width.
000268  3               dbox0:
000268  3               	ldy #0			; get character.
000268  3               	lda (z80_hl),y
000268  3               	cmp #','		; end of line?
000268  3               	beq dbox1		; yes, next one.
000268  3               	cmp #13			; end of line?
000268  3               	beq dbox1		; yes, next one.
000268  3               
000268  3               	dec z80_b		; one less to display.
000268  3               	and #127		; remove terminator.
000268  3               
000268  3               	jsr pchr		; display on screen.
000268  3               
000268  3               	ldy #0
000268  3               	lda (z80_hl),y		; get character.
000268  3               	sta z80_a
000268  3               	inc z80_l		; next character.
000268  3               	bne :+
000268  3               	inc z80_h
000268  3               :
000268  3               	lda z80_a
000268  3               	cmp #128		; end of message?
000268  3               	bmi :+
000268  3               	jmp dbox7		; yes, job done.
000268  3               :
000268  3               	lda z80_b		; chars remaining.
000268  3               	beq :+			; are any left?
000268  3               	jmp dbox0		; yes, continue.
000268  3               :
000268  3               ;---------------------------------------------------
000268  3               ; Reached limit of characters per line.
000268  3               ;---------------------------------------------------
000268  3               
000268  3               dbox9:
000268  3               	ldy #0
000268  3               	lda (z80_hl),y		; get character.
000268  3               	inc z80_l		; next one.
000268  3               	bne :+
000268  3               	inc z80_h
000268  3               :
000268  3               	cmp #','		; another line?
000268  3               	beq dbox10		; yes, do next line.
000268  3               	cmp #13			; another line?
000268  3               	beq dbox10		; yes, do next line.
000268  3               	cmp #128		; end of message?
000268  3               	bcs :+
000268  3               	jmp dbox11		; yes, finish message.
000268  3               :
000268  3               	jmp dbox9
000268  3               
000268  3               ;---------------------------------------------------
000268  3               ; Fill box to end of line.
000268  3               ;---------------------------------------------------
000268  3               
000268  3               dboxf:
000268  3               	lda #32			; space character.
000268  3               	jsr pchr		; display character.
000268  3               	dec z80_b
000268  3               	beq :+
000268  3               	jmp dboxf		; repeat for remaining chars on line.
000268  3               :
000268  3               	rts
000268  3               dbox1:
000268  3               	inc z80_l		; skip character.
000268  3               	bne :+
000268  3               	inc z80_h
000268  3               :
000268  3               	jsr dboxf		; fill box out to right side.
000268  3               dbox10:
000268  3               	inc dispy		; y coordinate down a line next position.
000268  3               	jmp dbox2		; next line.
000268  3               dbox7:
000268  3               	lda z80_b		; chars remaining.
000268  3               	bne :+			; are any left?
000268  3               	jmp dbox11		; no, nothing to draw.
000268  3               :
000268  3               	jsr dboxf		; fill message to line.
000268  3               
000268  3               ;------------------------------------------------------
000268  3               ; Drawn the box menu, now select option.
000268  3               ;------------------------------------------------------
000268  3               
000268  3               dbox11:
000268  3               	lda btop		; box top.
000268  3               	sta dispy		; set bar position.
000268  3               dbox14:
000268  3               	jsr joykey		; get controls.
000268  3               	cmp #$7f		; anything pressed?
000268  3               	bne dbox14		; yes, debounce it.
000268  3               	jsr dbar		; draw bar.
000268  3               dbox12:
000268  3               	jsr joykey		; get controls.
000268  3               	cmp #$7f		; anything pressed?
000268  3               	beq dbox12		; no, nothing.
000268  3               	and #16			; fire button pressed?
000268  3               	bne :+
000268  3               mod1:
000268  3               	jmp fstd		; yes, job done.
000268  3               :
000268  3               	jsr dbar		; delete bar.
000268  3               
000268  3               	lda joyval		; joystick reading.
000268  3               	and #8			; going up?
000268  3               	beq dboxu		; yes, go up.
000268  3               
000268  3               	ldx dispy		; vertical position of bar.
000268  3               	inx			; look down.
000268  3               	txa
000268  3               	sec
000268  3               	sbc btop		; find distance from top.
000268  3               	cmp blen		; top of box.
000268  3               	bne :+
000268  3               	jmp dbox14		; yes, go no further.
000268  3               :
000268  3               	inc dispy		; move bar.
000268  3               	jmp dbox14		; continue.
000268  3               dboxu:
000268  3               	lda dispy		; vertical position of bar.
000268  3               	cmp btop		; are we at the top?
000268  3               	bne :+
000268  3               	jmp dbox14		; yes, go no further.
000268  3               :
000268  3               	dec dispy		; move bar.
000268  3               	jmp dbox14		; continue.
000268  3               fstd:
000268  3               	lda dispy		; bar position.
000268  3               	sec
000268  3               	sbc btop		; find selected option.
000268  3               	sta varopt		; store the option.
000268  3               	jmp redraw		; redraw the screen.
000268  3               
000268  3               ;------------------------------------------------------
000268  3               ; Option not available.  Skip this line.
000268  3               ;------------------------------------------------------
000268  3               
000268  3               dbox13:
000268  3               	ldy #0
000268  3               	lda (z80_hl),y		; get character.
000268  3               	inc z80_l		; next one.
000268  3               	bne :+
000268  3               	inc z80_h
000268  3               :
000268  3               	cmp #','		; another line?
000268  3               	bne :+
000268  3               	jmp dbox2		; yes, do next line.
000268  3               :
000268  3               	cmp #13			; another line?
000268  3               	bne :+
000268  3               	jmp dbox2		; yes, do next line.
000268  3               :
000268  3               
000268  3               	bpl :+			; end of message?
000268  3               	jmp dbox11		; yes, finish message.
000268  3               :
000268  3               	jmp dbox13
000268  3               dbox15:
000268  3               	lda TmpAddr		; pop message pointer from the stack.
000268  3               	sta z80_h
000268  3               	lda TmpAddr+1
000268  3               	sta z80_l
000268  3               	rts
000268  3               
000268  3               ;------------------------------------------------------
000268  3               ; Invert bar
000268  3               ;------------------------------------------------------
000268  3               
000268  3               dbar:
000268  3               	lda blft		; box left.
000268  3               	sta dispx		; set display coordinate.
000268  3               	jsr gprad		; get printing address.
000268  3               
000268  3               	lda bwid		; box width.
000268  3               	sta z80_c		; loop counter in c.
000268  3               	lda z80_h		
000268  3               	sta z80_d		; store screen address high byte.
000268  3               dbar1:
000268  3               	ldx #7			; pixel height in b.
000268  3               dbar0:
000268  3               	ldy scrtab,x
000268  3               	lda (scraddr),y		; get screen byte.
000268  3               	eor #255		; reverse all bits.
000268  3               	sta (scraddr),y		; write back to screen.
000268  3               	dex			; next line down.
000268  3               	bpl dbar0		; draw rest of character.
000268  3               
000268  3               	inc scraddr		; one char right.
000268  3               	dec z80_c		; decrement character counter.
000268  3               	beq :+
000268  3               	jmp dbar1		; repeat for whole line.
000268  3               :
000268  3               	rts
000268  3               
000268  3               ;------------------------------------------------------
000268  3               ; Point to object
000268  3               ;
000268  3               ; Input:
000268  3               ;  -
000268  3               ;
000268  3               ; Output:
000268  3               ;  A = object number, A=255 if already in possession
000268  3               ;------------------------------------------------------
000268  3               
000268  3               invdis:
000268  3               	lda z80_l		; store message text pointer.
000268  3               	pha
000268  3               	lda z80_h
000268  3               	pha
000268  3               	lda combyt		; object number.
000268  3               	inc combyt		; ready for next one.
000268  3               	jsr gotob		; check if we have object.
000268  3               	tay
000268  3               	pla
000268  3               	sta z80_h
000268  3               	pla
000268  3               	sta z80_l
000268  3               	tya
000268  3               	rts
000268  3               
000268  3               ;------------------------------------------------------
000268  3               ; Find option selected.
000268  3               ;
000268  3               ; Input:
000268  3               ;  -
000268  3               ;
000268  3               ; Output:
000268  3               ;  OPT = selected object
000268  3               ;------------------------------------------------------
000268  3               
000268  3               fopt:
000268  3               	lda dispy
000268  3               	sec
000268  3               	sbc btop		; find selected option.
000268  3               	sta tmp+2		; option selected in b register.
000268  3               	inc tmp+2
000268  3               
000268  3               	lda #0			; set to first item.
000268  3               	sta combyt		; object number.
000268  3               fopt0:
000268  3               	jsr fobj		; find next object in inventory.
000268  3               	dec tmp+2
000268  3               	bne fopt0		; repeat for relevant steps down the list.
000268  3               
000268  3               	lda combyt		; get option.
000268  3               	sta varopt		; store the option.
000268  3               	dec varopt		; one less, due to where we increment combyt.
000268  3               	jmp redraw		; redraw the screen.
000268  3               fobj:
000268  3               	ldy combyt		; object number.
000268  3               	inc combyt		; ready for next item.
000268  3               ;	cpy #0
000268  3               ;	bne :+			; in case we loop back to zero.
000268  3               ;	rts
000268  3               ;:
000268  3               	tya
000268  3               	jsr gotob		; do we have this item?
000268  3               	cmp #255
000268  3               	bne :+
000268  3               	rts
000268  3               :
000268  3               	jmp fobj		; yes, it's on the list.
000268  3               
000268  3               bwid:	.byte 0              ; box/menu width.
000268  3               blen:	.byte 0              ; box/menu height.
000268  3               btop:	.byte 0              ; box coordinates.
000268  3               blft:	.byte 0
000268  3               .endif
000268  3               
000268  3               ;----------------------------------------------------
000268  3               ; Wait for keypress.
000268  3               ;----------------------------------------------------
000268  3               
000268  3               prskey:
000268  3  98           	tya
000269  3  48           	pha
00026A  3               prsloop:
00026A  3  20 CD 02     	jsr vsync
00026D  3  20 71 FE     	jsr $fe71
000270  3  C0 FF        	cpy #255
000272  3  F0 F6        	beq prsloop		; wait until key pressed
000274  3  68           	pla
000275  3  A8           	tay
000276  3  60           	rts
000277  3               
000277  3               ;----------------------------------------------------
000277  3               ; Delay routine 1/50 sec
000277  3               ;
000277  3               ; Wait 1/60 sec = 16666 usec
000277  3               ; Wait 208 x 16 =  3328 usec
000277  3               ;                 19994 usec
000277  3               ; rts           =     6 usec
000277  3               ; Total         = 20000 usec
000277  3               ;----------------------------------------------------
000277  3               
000277  3               delay:
000277  3  8D 27 0B     	sta xtmp
00027A  3               del_loop:
00027A  3  20 66 FE     	jsr SCRSYNC		; wait for flyback
00027D  3               
00027D  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
00027F  3               delay1:
00027F  3  61 80        	adc ($80,x)		;	 6 usec
000281  3  61 80        	adc ($80,x)		;	 6 usec
000283  3  88           	dey			;	 2 usec
000284  3  D0 F9        	bne delay1		;	 2 usec
000286  3  EA           	nop			; 2 usec
000287  3  EA           	nop			; 2 usec
000288  3               				; tot: 20000 usec
000288  3  CE 27 0B     	dec xtmp
00028B  3  D0 ED        	bne del_loop
00028D  3  60           	rts
00028E  3               
00028E  3               ;----------------------------------------------------
00028E  3               ; Clear sprite table.
00028E  3               ;
00028E  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
00028E  3               ;----------------------------------------------------
00028E  3               
00028E  3               xspr:
00028E  3  A9 FF        	lda #255		; clear byte.
000290  3  A2 00        	ldx #0			; length of table.
000292  3               xspr0:
000292  3  9D A6 17     	sta sprtab,x		; sprite table.
000295  3  E8           	inx			; move to next byte.
000296  3  E0 CC        	cpx #SPRBUF
000298  3  D0 F8        	bne xspr0		; repeat for rest of table.
00029A  3  60           	rts
00029B  3               
00029B  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00029B  3               ; Sound, NOT IMPLEMENTED!!!
00029B  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00029B  3               ;
00029B  3               ;silenc:
00029B  3               ;	jsr silen1 		; silence channel 1.
00029B  3               ;	jsr silen2 		; silence channel 2.
00029B  3               ;	jsr silen3 		; silence channel 3.
00029B  3               ;	jmp plsnd 		; play all channels to switch them off.
00029B  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00029B  3               
00029B  3               ;-------------------------------------------------------------
00029B  3               ; Initialise all objects.
00029B  3               ;
00029B  3               ; Reset current room,y,x to start room,y,x for all objects
00029B  3               ;-------------------------------------------------------------
00029B  3               
00029B  3               iniob:
00029B  3  A9 1C        	lda #<objdta 		; objects table.
00029D  3  85 68        	sta z80_x
00029F  3  A9 63        	lda #>objdta
0002A1  3  85 69        	sta z80_i
0002A3  3               
0002A3  3  AE 3A 02     	ldx numob 		; number of objects in the game.
0002A6  3               iniob0:
0002A6  3  A0 23        	ldy #35
0002A8  3  B1 68        	lda (z80_ix),y 		; start screen.
0002AA  3  A0 20        	ldy #32
0002AC  3  91 68        	sta (z80_ix),y 		; set start screen.
0002AE  3               
0002AE  3  A0 24        	ldy #36
0002B0  3  B1 68        	lda (z80_ix),y 		; find start y.
0002B2  3  A0 21        	ldy #33
0002B4  3  91 68        	sta (z80_ix),y 		; set start y.
0002B6  3               
0002B6  3  A0 25        	ldy #37
0002B8  3  B1 68        	lda (z80_ix),y 		; get initial x.
0002BA  3  A0 22        	ldy #34
0002BC  3  91 68        	sta (z80_ix),y 		; set x coord.
0002BE  3               
0002BE  3  18           	clc 			; point to next object.
0002BF  3  A5 68        	lda z80_x
0002C1  3  69 26        	adc #38			; distance between objects.
0002C3  3  85 68        	sta z80_x
0002C5  3  90 02        	bcc :+
0002C7  3  E6 69        	inc z80_i
0002C9  3               :
0002C9  3  CA           	dex 			; repeat.
0002CA  3  D0 DA        	bne iniob0
0002CC  3               
0002CC  3  60           	rts
0002CD  3               
0002CD  3               ;-------------------------------------------------------------
0002CD  3               ; Screen synchronisation.
0002CD  3               ;
0002CD  3               ;  - read joystick/keyboard
0002CD  3               ;  - handle sound		NOT IMPLEMENTED!!
0002CD  3               ;  - sync framerate with clock	NOT IMPLEMENTED!!
0002CD  3               ;  - handle shrapnel		NOT IMPLEMENTED!!
0002CD  3               ;-------------------------------------------------------------
0002CD  3               
0002CD  3               vsync:
0002CD  3  48           	pha
0002CE  3  98           	tya
0002CF  3  48           	pha
0002D0  3  8A           	txa
0002D1  3  48           	pha
0002D2  3  20 8C 0E     	jsr joykey		; read joystick/keyboard.
0002D5  3               vsync1:
0002D5  3               ;	lda $b809
0002D5  3               ;	bpl vsync1
0002D5  3               ;	sei
0002D5  3               ;	lda #<20000
0002D5  3               ;	sta $b808
0002D5  3               ;	lda #>20000
0002D5  3               ;	sta $b809
0002D5  3               
0002D5  3  20 6B FE     	jsr SCRSYNC1		; Wait for flyback
0002D8  3  AD 5B 02     	lda clock
0002DB  3  29 01        	and #1
0002DD  3  D0 03        	bne:+
0002DF  3  20 24 04     	jsr proshr
0002E2  3               :
0002E2  3  AD 00 03     	lda sndtyp
0002E5  3  F0 13        	beq sndskip
0002E7  3               sndloop:
0002E7  3  AD 02 B0     	lda $b002
0002EA  3  AC 00 03     	ldy sndtyp
0002ED  3               sndwait:
0002ED  3  88           	dey
0002EE  3  D0 FD        	bne sndwait
0002F0  3  49 04        	eor #4
0002F2  3  8D 02 B0     	sta $b002
0002F5  3  CE 00 03     	dec sndtyp
0002F8  3  D0 ED        	bne sndloop
0002FA  3               sndskip: 
0002FA  3  68           	pla
0002FB  3  AA           	tax
0002FC  3  68           	pla
0002FD  3  A8           	tay
0002FE  3  68           	pla
0002FF  3  60           	rts
000300  3               
000300  3               ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
000300  3               ; Sound + border colour, NOT IMPLEMENTED!!
000300  3               ;
000300  3               ;	lda sndtyp 	; sound to play.
000300  3               ;	bne :+ 	; any sound?
000300  3               ;	jmp vsync1 	; no.
000300  3               ;:
000300  3               ;	sta z80_b 	; outer loop.
000300  3               ;	lda 23624 	; border colour.
000300  3               ;	sta z80_a
000300  3               ;
000300  3               ;	; 52.xx.xx rra
000300  3               ;	lsr z80_a  	; put border bits into d0, d1 and d2.
000300  3               ;
000300  3               ;	; 52.xx.xx rra  	
000300  3               ;	lsr z80_a
000300  3               ;
000300  3               ;	; 52.xx.xx rra  	
000300  3               ;	lsr z80_a
000300  3               ;
000300  3               ;	; 29.03.03 ld c, a 	; first value to write to speaker.
000300  3               ;	lda z80_a
000300  3               ;	sta z80_c
000300  3               ;
000300  3               ;	; 29.03.03 ld a, b 	; sound.
000300  3               ;	lda z80_b
000300  3               ;	sta z80_a
000300  3               ;
000300  3               ;	; 02.03.xx and a 	; test it.
000300  3               ;	lda z80_a
000300  3               ;	and z80_a
000300  3               ;
000300  3               ;	; 27.06.00 jp m, vsync6 	; play white noise.
000300  3               ;	bpl :+
000300  3               ;	jmp vsync6
000300  3               ;:
000300  3               ;vsync2:
000300  3               ;	; 29.03.03 ld a, c 	; get speaker value.
000300  3               ;	lda z80_c
000300  3               ;	sta z80_a
000300  3               ;
000300  3               ;	; 39.02.03 out (254), a 	; write to speaker.
000300  3               ;	lda z80_a
000300  3               ;	sta 254
000300  3               ;
000300  3               ;	; 64.05.xx xor 248 	; toggle all except the border bits.
000300  3               ;	lda z80_a
000300  3               ;	eor #248
000300  3               ;	sta z80_a
000300  3               ;
000300  3               ;	; 29.03.03 ld c, a 	; store value for next time.
000300  3               ;	lda z80_a
000300  3               ;	sta z80_c
000300  3               ;
000300  3               ;	; 29.03.03 ld d, b 	; store loop counter.
000300  3               ;	lda z80_b
000300  3               ;	sta z80_d
000300  3               ;
000300  3               ;vsync3:
000300  3               ;	; 29.04.00 ld hl, clock 	; previous clock setting.
000300  3               ;	lda #<(clock)
000300  3               ;	sta z80_l
000300  3               ;	lda #>(clock)
000300  3               ;	sta z80_h
000300  3               ;
000300  3               ;	; 29.03.02 ld a, (23672) 	; current clock setting.
000300  3               ;	lda 23672
000300  3               ;	sta z80_a
000300  3               ;
000300  3               ;	; 06.01.xx cp (hl) 	; subtract last reading.
000300  3               ;	lda z80_a
000300  3               ;	ldy #0
000300  3               ;	cmp (z80_hl),y
000300  3               ;
000300  3               ;	; 27.06.00 jp nz, vsync4 	; yes, no more processing please.
000300  3               ;	beq :+
000300  3               ;	jmp vsync4
000300  3               ;:
000300  3               ;	; 15.00.xx djnz vsync3 	; loop.
000300  3               ;	dec z80_b
000300  3               ;	beq :+
000300  3               ;	jmp vsync3
000300  3               ;:
000300  3               ;	; 29.03.03 ld b, d 	; restore loop counter.
000300  3               ;	lda z80_d
000300  3               ;	sta z80_b
000300  3               ;
000300  3               ;	; 15.00.xx djnz vsync2 	; continue noise.
000300  3               ;	dec z80_b
000300  3               ;	beq :+
000300  3               ;	jmp vsync2
000300  3               ;:
000300  3               ;vsync4:
000300  3               ;	; 29.03.03 ld a, d 	; where we got to.
000300  3               ;	lda z80_d
000300  3               ;	sta z80_a
000300  3               ;
000300  3               ;vsynca:
000300  3               ;	; 29.02.03 ld (sndtyp), a 	; remember for next time.
000300  3               ;	lda z80_a
000300  3               ;	sta sndtyp
000300  3               ;
000300  3               ;vsync1:
000300  3               ;	; 29.03.02 ld a, (23672) 	; clock low.
000300  3               ;	lda 23672
000300  3               ;	sta z80_a
000300  3               ;
000300  3               ;	; 52.xx.xx rra  	; rotate bit into carry.
000300  3               ;	lsr z80_a
000300  3               ;
000300  3               ;	; 04.06.00 call c, vsync5 	; time to play sound and do shrapnel/ticker stuff.
000300  3               ;	bcc :+
000300  3               ;	jsr vsync5
000300  3               ;:
000300  3               ;	; 29.04.00 ld hl, clock 	; last clock reading.
000300  3               ;	lda #<(clock)
000300  3               ;	sta z80_l
000300  3               ;	lda #>(clock)
000300  3               ;	sta z80_h
000300  3               ;
000300  3               ;vsync0:
000300  3               ;	; 29.03.02 ld a, (23672) 	; current clock reading.
000300  3               ;	lda 23672
000300  3               ;	sta z80_a
000300  3               ;
000300  3               ;	; 06.01.xx cp (hl) 	; are they the same?
000300  3               ;	lda z80_a
000300  3               ;	ldy #0
000300  3               ;	cmp (z80_hl),y
000300  3               ;
000300  3               ;	; 28.06.00 jr z, vsync0 	; yes, wait until clock changes.
000300  3               ;	bne :+
000300  3               ;	jmp vsync0
000300  3               ;:
000300  3               ;	; 29.01.03 ld (hl), a 	; set new clock reading.
000300  3               ;	lda z80_a
000300  3               ;	ldy #0
000300  3               ;	sta (z80_hl),y
000300  3               ;
000300  3               ;	; 43.xx.xx rts  	
000300  3               ;	rts
000300  3               ;
000300  3               ;vsync5:
000300  3               ;	; 04.00.xx call plsnd 	; play sound.
000300  3               ;	jsr plsnd
000300  3               ;
000300  3               ;	; 27.00.xx jp proshr 	; shrapnel and stuff.
000300  3               ;	jmp proshr
000300  3               ;
000300  3               ;
000300  3               ;; Play white noise.
000300  3               ;
000300  3               ;vsync6:
000300  3               ;	; 29.03.03 ld a, b 	; 128 - 255.
000300  3               ;	lda z80_b
000300  3               ;	sta z80_a
000300  3               ;
000300  3               ;	; 63.05.xx sub 127 	
000300  3               ;	sec
000300  3               ;	lda z80_a
000300  3               ;	sbc #(127)
000300  3               ;	sta z80_a
000300  3               ;
000300  3               ;	; 29.03.03 ld b, a 	
000300  3               ;	lda z80_a
000300  3               ;	sta z80_b
000300  3               ;
000300  3               ;	; 29.04.00 ld hl, clock 	; previous clock setting.
000300  3               ;	lda #<(clock)
000300  3               ;	sta z80_l
000300  3               ;	lda #>(clock)
000300  3               ;	sta z80_h
000300  3               ;
000300  3               ;vsync7:
000300  3               ;	; 29.03.03 ld a, r 	; get random speaker value.
000300  3               ;	lda z80_r
000300  3               ;	sta z80_a
000300  3               ;
000300  3               ;	; 02.05.xx and 248 	; only rtsain the speaker/earphone bits.
000300  3               ;	lda z80_a
000300  3               ;	and #248
000300  3               ;
000300  3               ;	; 36.03.xx or c 	; merge with border colour.
000300  3               ;	lda z80_a
000300  3               ;	ora z80_a
000300  3               ;	sta z80_a
000300  3               ;
000300  3               ;	; 39.02.03 out (254), a 	; write to speaker.
000300  3               ;	lda z80_a
000300  3               ;	sta 254
000300  3               ;
000300  3               ;	; 29.03.02 ld a, (23672) 	; current clock setting.
000300  3               ;	lda 23672
000300  3               ;	sta z80_a
000300  3               ;
000300  3               ;	; 06.01.xx cp (hl) 	; subtract last reading.
000300  3               ;	lda z80_a
000300  3               ;	ldy #0
000300  3               ;	cmp (z80_hl),y
000300  3               ;
000300  3               ;	; 27.06.00 jp nz, vsync8 	; yes, no more processing please.
000300  3               ;	beq :+
000300  3               ;	jmp vsync8
000300  3               ;:
000300  3               ;	; 29.03.03 ld a, b 	
000300  3               ;	lda z80_b
000300  3               ;	sta z80_a
000300  3               ;
000300  3               ;	; 02.05.xx and 127 	
000300  3               ;	lda z80_a
000300  3               ;	and #127
000300  3               ;
000300  3               ;	; 22.03.xx inc a 	
000300  3               ;	inc z80_a
000300  3               ;
000300  3               ;vsync9:
000300  3               ;	; 13.03.xx dec a 	
000300  3               ;	dec z80_a
000300  3               ;
000300  3               ;	; 28.06.00 jr nz, vsync9 	; loop.
000300  3               ;	beq :+
000300  3               ;	jmp vsync9
000300  3               ;:
000300  3               ;	; 15.00.xx djnz vsync7 	; continue noise.
000300  3               ;	dec z80_b
000300  3               ;	beq :+
000300  3               ;	jmp vsync7
000300  3               ;:
000300  3               ;vsync8:
000300  3               ;	; 64.03.xx xor a 	
000300  3               ;	lda z80_a
000300  3               ;	eor z80_a
000300  3               ;	sta z80_a
000300  3               ;
000300  3               ;	; 28.00.xx jr vsynca 	
000300  3               ;	jmp vsynca
000300  3               ;
000300  3               ;	; 98.00.00 sndtyp .byte 0
000300  3  00           sndtyp:	.byte 0
000301  3               ;
000301  3               ;
000301  3               ; clock  .byte 0              ; last clock reading.
000301  3               ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
000301  3               
000301  3               ;-----------------------------------------------
000301  3               ; Redraw the screen.
000301  3               ;
000301  3               ; Remove old copy of all sprites for redraw.
000301  3               ;-----------------------------------------------
000301  3               
000301  3               redraw:
000301  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
000303  3  48           	pha
000304  3  A5 68        	lda z80_x
000306  3  48           	pha
000307  3               
000307  3  20 5E 0B     	jsr droom		; show screen layout.
00030A  3  20 1D 06     	jsr shwob		; draw objects.
00030D  3               numsp0:
00030D  3  A9 0C        	lda #NUMSPR		; sprites to draw.
00030F  3  85 88        	sta tmp
000311  3               
000311  3  A9 A6        	lda #<sprtab		; sprite table.
000313  3  85 68        	sta z80_x
000315  3  A9 17        	lda #>sprtab
000317  3  85 69        	sta z80_i
000319  3               redrw0:
000319  3  A0 00        	ldy #0
00031B  3  B1 68        	lda (z80_ix),y		; old sprite type.
00031D  3  C9 FF        	cmp #255		; is it enabled?
00031F  3  F0 0B        	beq redrw1 		; no, find next one.
000321  3               
000321  3  A0 03        	ldy #3
000323  3  B1 68        	lda (z80_ix),y 		; sprite y.
000325  3  C9 B1        	cmp #177		; beyond maximum?
000327  3  B0 03        	bcs redrw1		; yes, nothing to draw.
000329  3               
000329  3  20 9B 12     	jsr sspria		; show single sprite.
00032C  3               redrw1:
00032C  3  18           	clc			; next sprite.
00032D  3  A5 68        	lda z80_x
00032F  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
000331  3  85 68        	sta z80_x
000333  3  90 02        	bcc :+
000335  3  E6 69        	inc z80_i
000337  3               :
000337  3  C6 88        	dec tmp			; repeat for remaining sprites.
000339  3  D0 DE        	bne redrw0
00033B  3               rpblc1:
00033B  3               ;	jsr dshrp		; redraw shrapnel.
00033B  3               
00033B  3  68           	pla			; retrieve sprite pointer.
00033C  3  85 68        	sta z80_x
00033E  3  68           	pla
00033F  3  85 69        	sta z80_i
000341  3               
000341  3  60           	rts
000342  3               
000342  3               ;----------------------------------------------------------------------
000342  3               ; Clear screen routine.
000342  3               ;
000342  3               ; Fill screenmem $8000-$97ff with ScrFillByte
000342  3               ;----------------------------------------------------------------------
000342  3               
000342  3               cls:
000342  3  A9 80        	lda #>$8000		; screen address.
000344  3  8D 4D 03     	sta clsloop+2
000347  3  A9 00        	lda #ScrFillByte
000349  3  A0 00        	ldy #0
00034B  3               clsloop:
00034B  3  99 00 80     	sta $8000,y
00034E  3  C8           	iny
00034F  3  D0 FA        	bne clsloop
000351  3  EE 4D 03     	inc clsloop+2
000354  3  AE 4D 03     	ldx clsloop+2
000357  3  E0 98        	cpx #>$9800
000359  3  D0 F0        	bne clsloop
00035B  3  60           	rts
00035C  3               
00035C  3               ;----------------------------------------------------------------------
00035C  3               ; Atomic palette is static 
00035C  3               ;----------------------------------------------------------------------
00035C  3               
00035C  3               setpal:
00035C  3  60           	rts
00035D  3               
00035D  3               ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
00035D  3               ; FODDER check
00035D  3               
00035D  3               fdchk:
00035D  3               	; 29.03.01 ld a, (hl) 	; fetch cell.
00035D  3  A0 00        	ldy #0
00035F  3  B1 66        	lda (z80_hl),y
000361  3  85 61        	sta z80_a
000363  3               
000363  3               	; 06.00.xx cp FODDER 	; is it fodder?
000363  3  A5 61        	lda z80_a
000365  3  C5 04        	cmp FODDER
000367  3               
000367  3               	; 43.06.xx rts nz 	; no.
000367  3  F0 01        	beq :+
000369  3  60           	rts
00036A  3               :
00036A  3               	; 29.01.05 ld (hl), 0 	; rewrite block type.
00036A  3  A9 00        	lda #0
00036C  3  A0 00        	ldy #0
00036E  3  91 66        	sta (z80_hl),y
000370  3               
000370  3               	; 41.04.xx push hl 	; store pointer to block.
000370  3  A5 67        	lda z80_h
000372  3  48           	pha
000373  3  A5 66        	lda z80_l
000375  3  48           	pha
000376  3               
000376  3               	; 29.04.00 ld de, MAP 	; address of map.
000376  3  A9 00        	lda #<(MAP)
000378  3  85 64        	sta z80_e
00037A  3  A9 9A        	lda #>(MAP)
00037C  3  85 65        	sta z80_d
00037E  3               
00037E  3               	; 02.03.xx and a 	; clear carry flag for subtraction.
00037E  3  A5 61        	lda z80_a
000380  3  25 61        	and z80_a
000382  3               
000382  3               	; 57.04.04 sbc hl, de 	; find simple displacement for block.
000382  3  20 1E 6F     	jsr sbc_hl_de
000385  3               
000385  3               	; 29.03.03 ld a, l 	; low byte is y coordinate.
000385  3  A5 66        	lda z80_l
000387  3  85 61        	sta z80_a
000389  3               
000389  3               	; 02.05.xx and 31 	; column position 0 - 31.
000389  3  A5 61        	lda z80_a
00038B  3  29 1F        	and #31
00038D  3               
00038D  3               	; 29.02.03 ld (dispy), a 	; set up y position.
00038D  3  A5 61        	lda z80_a
00038F  3  8D 65 02     	sta dispy
000392  3               
000392  3               	; 01.04.04 add hl, hl 	; multiply displacement by 8.
000392  3  20 67 6F     	jsr add_hl_hl
000395  3               
000395  3               	; 01.04.04 add hl, hl 	
000395  3  20 67 6F     	jsr add_hl_hl
000398  3               
000398  3               	; 01.04.04 add hl, hl 	
000398  3  20 67 6F     	jsr add_hl_hl
00039B  3               
00039B  3               	; 29.03.03 ld a, h 	; x coordinate now in h.
00039B  3  A5 67        	lda z80_h
00039D  3  85 61        	sta z80_a
00039F  3               
00039F  3               	; 29.02.03 ld (dispx), a 	; set the display coordinate.
00039F  3  A5 61        	lda z80_a
0003A1  3  8D 64 02     	sta dispx
0003A4  3               
0003A4  3               	; 64.03.xx xor a 	; block to write.
0003A4  3  A5 61        	lda z80_a
0003A6  3  45 61        	eor z80_a
0003A8  3  85 61        	sta z80_a
0003AA  3               
0003AA  3               	; 04.00.xx call pattr 	; write block.
0003AA  3  20 34 0A     	jsr pattr
0003AD  3               
0003AD  3               	; 40.04.xx pop hl 	; restore block pointer.
0003AD  3  68           	pla
0003AE  3  85 66        	sta z80_l
0003B0  3  68           	pla
0003B1  3  85 67        	sta z80_h
0003B3  3               
0003B3  3               	; 43.xx.xx rts  	
0003B3  3  60           	rts
0003B4  3               
0003B4  3               ; Colour a sprite.
0003B4  3               
0003B4  3               cspr:
0003B4  3               	; 29.03.01 ld l, (ix+8) 	; y coordinate.
0003B4  3  A0 08        	ldy #8
0003B6  3  B1 68        	lda (z80_ix),y
0003B8  3  85 66        	sta z80_l
0003BA  3               
0003BA  3               	; 29.03.01 ld h, (ix+9) 	; x coordinate.
0003BA  3  A0 09        	ldy #9
0003BC  3  B1 68        	lda (z80_ix),y
0003BE  3  85 67        	sta z80_h
0003C0  3               
0003C0  3               	; 29.03.05 ld e, 3 	; default width.
0003C0  3  A9 03        	lda #3; default width.
0003C2  3  85 64        	sta z80_e
0003C4  3               
0003C4  3               	; 29.03.03 ld a, h 	; horizontal position.
0003C4  3  A5 67        	lda z80_h
0003C6  3  85 61        	sta z80_a
0003C8  3               
0003C8  3               	; 02.05.xx and 7 	; is it straddling cells?
0003C8  3  A5 61        	lda z80_a
0003CA  3  29 07        	and #7
0003CC  3               
0003CC  3               	; 28.06.00 jr nz, cspr0 	; yes, width is okay.
0003CC  3  F0 03        	beq :+
0003CE  3  4C D3 03     	jmp cspr0
0003D1  3               :
0003D1  3               	; 13.03.xx dec e 	; decrement width as we"re aligned on char boundary.
0003D1  3  C6 64        	dec z80_e
0003D3  3               
0003D3  3               cspr0:
0003D3  3               	; 29.02.04 ld (dispx), hl 	; set up coords for calculation.
0003D3  3  A5 66        	lda z80_l
0003D5  3  8D 64 02     	sta dispx
0003D8  3  A5 67        	lda z80_h
0003DA  3  8D 65 02     	sta dispx+1
0003DD  3               
0003DD  3               	; 04.00.xx call scadd 	; find screen address.
0003DD  3  20 78 12     	jsr scadd
0003E0  3               
0003E0  3               	; 59.05.03 set 5, h 	; switch to attribute screen.
0003E0  3  A5 67        	lda z80_h
0003E2  3  09 20        	ora #_bitvalue5
0003E4  3  85 67        	sta z80_h
0003E6  3               
0003E6  3               	; 29.03.05 ld b, 16 	; height of sprite.
0003E6  3  A9 10        	lda #16; height of sprite.
0003E8  3  85 63        	sta z80_b
0003EA  3               
0003EA  3               cspr2:
0003EA  3               	; 29.03.03 ld d, e 	; copy width to d.
0003EA  3  A5 64        	lda z80_e
0003EC  3  85 65        	sta z80_d
0003EE  3               
0003EE  3               	; 41.04.xx push hl 	; store attribute address.
0003EE  3  A5 67        	lda z80_h
0003F0  3  48           	pha
0003F1  3  A5 66        	lda z80_l
0003F3  3  48           	pha
0003F4  3               
0003F4  3               cspr1:
0003F4  3               	; 29.03.01 ld a, (hl) 	; fetch screen contents.
0003F4  3  A0 00        	ldy #0
0003F6  3  B1 66        	lda (z80_hl),y
0003F8  3  85 61        	sta z80_a
0003FA  3               
0003FA  3               	; 02.00.xx and SIMASK 	; remove ink.
0003FA  3  A5 61        	lda z80_a
0003FC  3  25 F8        	and SIMASK
0003FE  3               
0003FE  3               	; 36.03.xx or c 	; put in the new ink.
0003FE  3  A5 61        	lda z80_a
000400  3  05 61        	ora z80_a
000402  3  85 61        	sta z80_a
000404  3               
000404  3               	; 29.01.03 ld (hl), a 	; write back to screen.
000404  3  A5 61        	lda z80_a
000406  3  A0 00        	ldy #0
000408  3  91 66        	sta (z80_hl),y
00040A  3               
00040A  3               	; 22.03.xx inc l 	; adjacent byte.
00040A  3  E6 66        	inc z80_l
00040C  3               
00040C  3               	; 13.03.xx dec d 	; one less byte to write.
00040C  3  C6 65        	dec z80_d
00040E  3               
00040E  3               	; 28.06.00 jr nz, cspr1 	; repeat for all columns.
00040E  3  F0 03        	beq :+
000410  3  4C F4 03     	jmp cspr1
000413  3               :
000413  3               	; 40.04.xx pop hl 	; restore attribute address.
000413  3  68           	pla
000414  3  85 66        	sta z80_l
000416  3  68           	pla
000417  3  85 67        	sta z80_h
000419  3               
000419  3               	; 04.00.xx call nattr 	; get address of next attribute cell down.
000419  3  20 0D 13     	jsr nattr
00041C  3               
00041C  3               	; 15.00.xx djnz cspr2 	; repeat for all rows.
00041C  3  C6 63        	dec z80_b
00041E  3  F0 03        	beq :+
000420  3  4C EA 03     	jmp cspr2
000423  3               :
000423  3               	; 43.xx.xx rts  	
000423  3  60           	rts
000424  3               
000424  3               
000424  3               ;----------------------------------------------------
000424  3               ; Scrolly text and puzzle variables. NOT IMPLEMENTED!!
000424  3               ;----------------------------------------------------
000424  3               
000424  3               .if sflag
000424  3               txtbit:	.byte 128		; bit to write.
000424  3               txtwid:	.byte 16		; width of ticker message.
000424  3               txtpos:	.word msgdat
000424  3               txtini:	.word msgdat
000424  3               txtscr:	.word 16406
000424  3               .endif
000424  3               
000424  3               ;----------------------------------------------------
000424  3               ; Specialist routines.
000424  3               ; Process shrapnel.
000424  3               ;----------------------------------------------------
000424  3               proshr:
000424  3               .if pflag
000424  3               	lda #<SHRAPN		; table.
000424  3               	sta z80_x
000424  3               	lda #>SHRAPN
000424  3               	sta z80_i
000424  3               
000424  3               	lda #NUMSHR		; shrapnel pieces to process.
000424  3               	sta shrctr
000424  3               prosh0:
000424  3               	ldy #0
000424  3               	lda (z80_ix),y		; on/off marker.
000424  3               	asl a
000424  3               proshx:
000424  3               	bcs :+
000424  3               	jsr prosh1 		; on, so process it.
000424  3               :
000424  3               	clc
000424  3               	lda z80_x
000424  3               	adc #SHRSIZ
000424  3               	sta z80_x
000424  3               	bcc :+
000424  3               	inc z80_i
000424  3               :
000424  3               	dec shrctr		; round again.
000424  3               	bne prosh0
000424  3               .endif
000424  3               .if sflag
000424  3               	jsr scrly
000424  3               .endif
000424  3  60           	rts
000425  3               
000425  3               .if pflag
000425  3               shrctr:	.byte 0
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Proces shrapnel piece
000425  3               ;----------------------------------------------------
000425  3               
000425  3               prosh1:
000425  3               	jsr plot 		; delete the pixel.
000425  3               
000425  3               	lda #<shrptr		; shrapnel routine pointers.
000425  3               	sta z80_l
000425  3               	lda #>shrptr
000425  3               	sta z80_h
000425  3               
000425  3               	ldy #0
000425  3               	lda (z80_ix),y		; restore shrapnel type.
000425  3               	jsr prosh2 		; run the routine.
000425  3               	jsr chkxy		; check x and y are good before we redisplay.
000425  3               
000425  3               	lda #<SHRSIZ 		; distance to next.
000425  3               	sta z80_e
000425  3               	lda #>SHRSIZ
000425  3               	sta z80_d
000425  3               	rts
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Run the routine
000425  3               ;----------------------------------------------------
000425  3               
000425  3               prosh2:
000425  3               	asl a 			; 2 bytes per address.
000425  3               	tay
000425  3               	lda shrptr,y
000425  3               	sta z80_l
000425  3               	lda shrptr+1,y 		; fetch high byte from table.
000425  3               	sta z80_h
000425  3               	jmp (z80_hl) 		; jump to routine.
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Paricle routine table
000425  3               ;----------------------------------------------------
000425  3               
000425  3               shrptr:	.word laser		; laser.
000425  3               	.word trail		; vapour trail.
000425  3               	.word shrap		; shrapnel from explosion.
000425  3               	.word dotl		; horizontal starfield left.
000425  3               	.word dotr		; horizontal starfield right.
000425  3               	.word dotu		; vertical starfield up.
000425  3               	.word dotd		; vertical starfield down.
000425  3               	.word ptcusr		; user particle.
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Explosion shrapnel.
000425  3               ;----------------------------------------------------
000425  3               
000425  3               shrap:
000425  3               	ldy #1
000425  3               	lda (z80_ix),y 		; get the angle.
000425  3               	clc
000425  3               	adc #<shrsin		; shrapnel sine table.
000425  3               	sta z80_l
000425  3               	lda #>shrsin
000425  3               	adc #0
000425  3               	sta z80_h
000425  3               
000425  3               	ldy #0
000425  3               	lda (z80_hl),y 		; fetch value from table.
000425  3               	sta z80_e
000425  3               	inc z80_l 		; next byte of table.
000425  3               	bne :+
000425  3               	inc z80_h
000425  3               :
000425  3               	ldy #0
000425  3               	lda (z80_hl),y		; fetch value from table.
000425  3               	sta z80_d
000425  3               	inc z80_l		; next byte of table.
000425  3               	bne :+
000425  3               	inc z80_h
000425  3               :
000425  3               	ldy #0
000425  3               	lda (z80_hl),y 		; fetch value from table.
000425  3               	sta z80_c
000425  3               	inc z80_l 		; next byte of table.
000425  3               	bne :+
000425  3               	inc z80_h
000425  3               :
000425  3               	ldy #0
000425  3               	lda (z80_hl),y 		; fetch value from table.
000425  3               	sta z80_b
000425  3               
000425  3               	ldy #2
000425  3               	lda (z80_ix),y 		; x coordinate in hl.
000425  3               	clc
000425  3               	adc z80_e		; add sine lb
000425  3               	sta (z80_ix),y		; store new coordinate lb.
000425  3               	ldy #3
000425  3               	lda (z80_ix),y
000425  3               	adc z80_d		; add sine hb
000425  3               	sta (z80_ix),y		; store new coordinate hb.
000425  3               
000425  3               	ldy #4
000425  3               	lda (z80_ix),y	 	; y coordinate in hl.
000425  3               	clc
000425  3               	adc z80_c		; add cosine lb
000425  3               	sta (z80_ix),y		; store new coordinate lb.
000425  3               	ldy #5
000425  3               	lda (z80_ix),y
000425  3               	adc z80_b		; add cosine lb
000425  3               	sta (z80_ix),y		; store new coordinate hb.
000425  3               
000425  3               	rts
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Move dots
000425  3               ;----------------------------------------------------
000425  3               
000425  3               dotl:
000425  3               	ldy #5
000425  3               	lda (z80_ix),y
000425  3               	sec
000425  3               	sbc #1		 	; move left.
000425  3               	sta (z80_ix),y
000425  3               	rts
000425  3               dotr:
000425  3               	ldy #5
000425  3               	lda (z80_ix),y
000425  3               	clc
000425  3               	adc #1		 	; move left.
000425  3               	sta (z80_ix),y
000425  3               	rts
000425  3               dotu:
000425  3               	ldy #3
000425  3               	lda (z80_ix),y
000425  3               	sec
000425  3               	sbc #1		 	; move up.
000425  3               	sta (z80_ix),y
000425  3               	rts
000425  3               dotd:
000425  3               	ldy #3
000425  3               	lda (z80_ix),y
000425  3               	clc
000425  3               	adc #1			; move down.
000425  3               	sta (z80_ix),y
000425  3               	rts
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Check coordinates are good before redrawing at new position.
000425  3               ;
000425  3               ; left:   X>L		X=L	Ok
000425  3               ; right:  R+15>X	X=R	Ok
000425  3               ; top:    Y>T		Y=T	Ok
000425  3               ; bottom: B+15>Y	Y=B	Ok
000425  3               ;----------------------------------------------------
000425  3               
000425  3               chkxy:
000425  3               
000425  3               ; top:    Y>T		Y=T	Ok
000425  3               
000425  3               	ldy #3
000425  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000425  3               	cmp wntopx		; window top.
000425  3               	bcs :+			; compare with top window limit.
000425  3               	jmp kilshr		; out of window, kill shrapnel.
000425  3               :
000425  3               ; left:   X>L		X=L	Ok
000425  3               
000425  3               	ldy #5
000425  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000425  3               	cmp wnlftx		; left edge.
000425  3               	bcs :+			; compare with left window limit.
000425  3               	jmp kilshr		; out of window, kill shrapnel.
000425  3               :
000425  3               ; bottom: B+15>Y	Y=B	Ok
000425  3               
000425  3               	lda wnbotx		; point to bottom.
000425  3               	clc
000425  3               	adc #15
000425  3               	ldy #3
000425  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000425  3               	bcs :+			; compare with shrapnel x coordinate.
000425  3               	jmp kilshr		; off screen, kill shrapnel..
000425  3               :
000425  3               ; right:  R+15>X	X=R	Ok
000425  3               
000425  3               	lda wnrgtx		; point to right edge.
000425  3               	clc
000425  3               	adc #15
000425  3               	ldy #5
000425  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000425  3               	bcs :+			; compare with window limit.
000425  3               	jmp kilshr		; off screen, kill shrapnel.
000425  3               :
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Drop through.
000425  3               ; Display shrapnel.
000425  3               ;----------------------------------------------------
000425  3               
000425  3               plot:
000425  3               	ldy #3
000425  3               	lda (z80_ix),y		; y integer.
000425  3               	sta dispy	 	; workspace coordinates.
000425  3               	ldy #5
000425  3               	lda (z80_ix),y	 	; x integer.
000425  3               	sta dispx 		; workspace coordinates.
000425  3               
000425  3               	ldy #0
000425  3               	lda (z80_ix),y 		; type.
000425  3               	bne :+			; is it a laser?
000425  3               	jmp plot1 		; yes, draw laser instead.
000425  3               :
000425  3               plot0:
000425  3               	lda dispx		; which pixel within byte do we
000425  3               	and #7			; want to set first?
000425  3               	tay
000425  3               	lda dots,y 		; table of small pixel positions.
000425  3               	sta z80_e 		; get value.
000425  3               
000425  3               	jsr scadd 		; screen address.
000425  3               	ldy #0
000425  3               	lda (scraddr),y		; see what's already there.
000425  3               	eor z80_e
000425  3               	sta (scraddr),y 	; put back on screen.
000425  3               	rts
000425  3               
000425  3               plot1:
000425  3               	jsr scadd 		; screen address.
000425  3               	ldy #0
000425  3               	lda (scraddr),y 	; fetch byte there.
000425  3               	eor #255 		; toggle all bits.
000425  3               	sta (scraddr),y 	; new byte.
000425  3               	rts
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Switch off shrapnel
000425  3               ;----------------------------------------------------
000425  3               
000425  3               kilshr:
000425  3               	lda #128
000425  3               	ldy #0
000425  3               	sta (z80_ix),y	; switch off shrapnel.
000425  3               	rts
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Sine/cosine table
000425  3               ;----------------------------------------------------
000425  3               
000425  3               shrsin:	.word 0,1024,391,946,724,724,946,391
000425  3               	.word 1024,0,946,65144,724,64811,391,64589
000425  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
000425  3               	.word 64512,0,64589,391,64811,724,65144,946
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Create trail
000425  3               ;----------------------------------------------------
000425  3               
000425  3               trail:
000425  3               	ldy #1
000425  3               	lda (z80_ix),y 	; time remaining.
000425  3               	sec
000425  3               	sbc #1
000425  3               	sta (z80_ix),y
000425  3               	bne :+
000425  3               	jmp trailk		; time to switch it off.
000425  3               :
000425  3               	jsr qrand		; get a random number.
000425  3               	lsr a 			; x or y axis?
000425  3               	bcc :+
000425  3               	jmp trailv		; use y.
000425  3               :
000425  3               ; Trail horizontal
000425  3               
000425  3               	lsr a 			; which direction?
000425  3               	bcc :+
000425  3               	jmp traill		; go left.
000425  3               :
000425  3               ; Trail right
000425  3               
000425  3               	ldy #5
000425  3               	lda (z80_ix),y
000425  3               	clc
000425  3               	adc #1	 		; go right.
000425  3               	sta (z80_ix),y
000425  3               	rts
000425  3               
000425  3               ; Trail left
000425  3               
000425  3               traill:
000425  3               	ldy #5
000425  3               	lda (z80_ix),y
000425  3               	sec
000425  3               	sbc #1 			; go left.
000425  3               	sta (z80_ix),y
000425  3               	rts
000425  3               
000425  3               ; Trail vertical
000425  3               
000425  3               trailv:
000425  3               	lsr a		 	; which direction?
000425  3               	bcc :+
000425  3               	jmp trailu		; go up.
000425  3               :
000425  3               ; Trail down
000425  3               
000425  3               	ldy #3
000425  3               	lda (z80_ix),y
000425  3               	clc
000425  3               	adc #1 			; go down.
000425  3               	sta (z80_ix),y
000425  3               	rts
000425  3               
000425  3               ; Trail up
000425  3               
000425  3               trailu:
000425  3               	ldy #3
000425  3               	lda (z80_ix),y
000425  3               	sec
000425  3               	sbc #1 			; go up.
000425  3               	sta (z80_ix),y
000425  3               	rts
000425  3               
000425  3               ; Kill trail
000425  3               
000425  3               trailk:
000425  3               	lda #200		; set off-screen to kill vapour trail.
000425  3               	ldy #3
000425  3               	sta (z80_ix),y
000425  3               	rts
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Create laser beam
000425  3               ;----------------------------------------------------
000425  3               
000425  3               laser:
000425  3               	ldy #1
000425  3               	lda (z80_ix),y 		; direction.
000425  3               	ror a 			; left or right?
000425  3               	bcs :+
000425  3               	jmp laserl		; move left.
000425  3               :
000425  3               ; Laser right
000425  3               
000425  3               	lda #8			; distance to travel.
000425  3               	sta z80_b
000425  3               	jmp laserm		; move laser.
000425  3               
000425  3               ; Laser left
000425  3               
000425  3               laserl:
000425  3               	lda #248		; distance to travel.
000425  3               	sta z80_b
000425  3               laserm:
000425  3               	ldy #5
000425  3               	lda (z80_ix),y		; x position.
000425  3               	clc
000425  3               	adc z80_b		; add distance.
000425  3               	sta (z80_ix),y		; set new x coordinate.
000425  3               
000425  3               ; Test new block.
000425  3               
000425  3               	sta dispx 		; set x for block collision detection purposes.
000425  3               	ldy #3
000425  3               	lda (z80_ix),y 		; get y.
000425  3               	sta dispy		; set coordinate for collision test.
000425  3               	jsr tstbl 		; get block type there.
000425  3               	cmp #WALL		; is it solid?
000425  3               	bne :+
000425  3               	jmp trailk		; yes, it cannot pass.
000425  3               :
000425  3               	rts
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Dots mask
000425  3               ;----------------------------------------------------
000425  3               
000425  3               dots:	.byte 128,64,32,16,8,4,2,1
000425  3               
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Plot, preserving de.
000425  3               ;----------------------------------------------------
000425  3               
000425  3               plotde:
000425  3               	lda z80_d 		; put de on stack.
000425  3               	pha
000425  3               	lda z80_e
000425  3               	pha
000425  3               
000425  3               	jsr plot 		; plot pixel.
000425  3               
000425  3               	pla			; restore de from stack.
000425  3               	sta z80_e
000425  3               	pla
000425  3               	sta z80_d
000425  3               
000425  3               	rts
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Shoot a laser.
000425  3               ;----------------------------------------------------
000425  3               
000425  3               shoot:
000425  3               	sta z80_c		; store direction in c register.
000425  3               	ldy #8
000425  3               	lda (z80_ix),y 		; y coordinate.
000425  3               shoot1:
000425  3               	clc
000425  3               	adc #7 			; down 7 pixels.
000425  3               	sta z80_l 		; puty y coordinate in l.
000425  3               
000425  3               	ldy #9
000425  3               	lda (z80_ix),y 		; x coordinate in h.
000425  3               	sta z80_h
000425  3               
000425  3               	lda z80_i		; store pointer to sprite.
000425  3               	pha
000425  3               	lda z80_x
000425  3               	pha
000425  3               
000425  3               	jsr fpslot 		; find particle slot.
000425  3               	bcs :+
000425  3               	jmp vapou2		; failed, restore ix.
000425  3               :
000425  3               	lda #0
000425  3               	ldy #0
000425  3               	sta (z80_ix),y 		; set up a laser.
000425  3               
000425  3               	lda z80_c
000425  3               	ldy #1
000425  3               	sta (z80_ix),y 		; set the direction.
000425  3               
000425  3               	lda z80_l
000425  3               	ldy #3
000425  3               	sta (z80_ix),y		; set y coordinate.
000425  3               
000425  3               	ror z80_c		; check direction we want.
000425  3               	bcc :+
000425  3               	jmp shootr		; shoot right.
000425  3               :
000425  3               	lda z80_h		; X position.
000425  3               shoot0:
000425  3               	and #248		; align on character boundary.
000425  3               	ldy #5
000425  3               	sta (z80_ix),y		; set x coordinate.
000425  3               	jmp vapou0 		; draw first image.
000425  3               shootr:
000425  3               	lda z80_h		; x position.
000425  3               	clc
000425  3               	adc #15			; look right.
000425  3               	jmp shoot0		; align and continue.
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Create a bit of vapour trail.
000425  3               ;----------------------------------------------------
000425  3               
000425  3               vapour:
000425  3               	lda z80_i		; store pointer to sprite.
000425  3               	pha
000425  3               	lda z80_x
000425  3               	pha
000425  3               
000425  3               	ldy #8
000425  3               	lda (z80_ix),y 		; y coordinate.
000425  3               	clc
000425  3               	adc #7			; mid-point of sprite.
000425  3               	sta z80_l
000425  3               
000425  3               	ldy #9
000425  3               	lda (z80_ix),y 		; x coordinate.
000425  3               	adc #7
000425  3               	sta z80_h
000425  3               
000425  3               	jsr fpslot 		; find particle slot.
000425  3               	bcc :+
000425  3               	jmp vapou1		; no, we can use it.
000425  3               :
000425  3               vapou2:
000425  3               	pla
000425  3               	sta z80_x
000425  3               	pla
000425  3               	sta z80_i
000425  3               	rts
000425  3               vapou1:
000425  3               	lda z80_l
000425  3               	ldy #3
000425  3               	sta (z80_ix),y		; set up y.
000425  3               
000425  3               	lda z80_h
000425  3               	ldy #5
000425  3               	sta (z80_ix),y 		; set up x coordinate.
000425  3               
000425  3               	jsr qrand		; get quick random number.
000425  3               	and #15			; random time.
000425  3               	clc
000425  3               	adc #15			; minimum time on screen.
000425  3               	ldy #1
000425  3               	sta (z80_ix),y		; set time on screen.
000425  3               
000425  3               	lda #1
000425  3               	ldy #0
000425  3               	sta (z80_ix),y		; define particle as vapour trail.
000425  3               vapou0:
000425  3               	jsr chkxy		; plot first position.
000425  3               	jmp vapou2
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Create a user particle.
000425  3               ;----------------------------------------------------
000425  3               
000425  3               ptusr:
000425  3               	sta z80_f		; store timer.
000425  3               
000425  3               	ldy #8
000425  3               	lda (z80_ix),y 		; y coordinate.
000425  3               	clc
000425  3               	adc #7			; mid-point of sprite.
000425  3               	sta z80_l
000425  3               
000425  3               	ldy #9
000425  3               	lda (z80_ix),y 		; x coordinate.
000425  3               	clc
000425  3               	adc #7			; mid-point of sprite.
000425  3               	sta z80_h
000425  3               
000425  3               	jsr fpslot 		; find particle slot.
000425  3               	bcs ptusr1
000425  3               	rts 			; out of slots, can't generate anything.
000425  3               ptusr1:
000425  3               	lda z80_l
000425  3               	ldy #3
000425  3               	sta (z80_ix),y 		; set up y.
000425  3               
000425  3               	lda z80_h
000425  3               	ldy #5
000425  3               	sta (z80_ix),y		; set up x coordinate.
000425  3               
000425  3               	lda z80_f 		; restore timer.
000425  3               	ldy #1
000425  3               	sta (z80_ix),y		; set time on screen.
000425  3               
000425  3               	lda #7
000425  3               	ldy #0
000425  3               	sta (z80_ix),y		; define particle as user particle.
000425  3               
000425  3               	jmp chkxy		; plot first position.
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Create a vertical or horizontal star.
000425  3               ;----------------------------------------------------
000425  3               
000425  3               star:
000425  3               	lda z80_i		; store pointer to sprite.
000425  3               	pha
000425  3               	lda z80_x
000425  3               	pha
000425  3               
000425  3               	jsr fpslot 		; find particle slot.
000425  3               	bcs star7		; found one we can use.
000425  3               star0:
000425  3               	pla 			; restore sprite pointer.
000425  3               	sta z80_x
000425  3               	pla
000425  3               	sta z80_i
000425  3               	rts 			; out of slots, can't generate anything.
000425  3               star7:
000425  3               	lda z80_c		; direction.
000425  3               	and #3 			; is it left?
000425  3               	bne :+
000425  3               	jmp star1 		; yes, it's left.
000425  3               :
000425  3               	cmp #1 			; is it right?
000425  3               	bne :+
000425  3               	jmp star2 		; yes, it's right.
000425  3               :
000425  3               	cmp #2 			; is it up?
000425  3               	bne :+
000425  3               	jmp star3 		; yes, it's up.
000425  3               :
000425  3               	ldy wntopx 		; get edge of screen.
000425  3               	iny			; down one pixel.
000425  3               	tya
000425  3               star8:
000425  3               	ldy #3
000425  3               	sta (z80_ix),y 		; set y coord.
000425  3               	jsr qrand 		; get quick random number.
000425  3               star9:
000425  3               	ldy #5
000425  3               	sta (z80_ix),y		; set x position.
000425  3               
000425  3               	lda z80_c		; direction.
000425  3               	and #3			; zero to three.
000425  3               	clc
000425  3               	adc #3			; 3 to 6 for starfield.
000425  3               	ldy #0
000425  3               	sta (z80_ix),y		; define particle as star.
000425  3               	jsr chkxy		; plot first position.
000425  3               	jmp star0
000425  3               star1:
000425  3               	jsr qrand		; get quick random number.
000425  3               	ldy #3
000425  3               	sta (z80_ix),y 		; set y coord.
000425  3               
000425  3               	lda wnrgtx 		; get edge of screen.
000425  3               	clc
000425  3               	adc #15			; add width of sprite minus 1.
000425  3               	jmp star9
000425  3               star2:
000425  3               	jsr qrand 		; get quick random number.
000425  3               	ldy #3
000425  3               	sta (z80_ix),y		; set y coord.
000425  3               
000425  3               	lda wnlftx		; get edge of screen.
000425  3               	jmp star9
000425  3               star3:
000425  3               	lda wnbotx 		; get edge of screen.
000425  3               	clc
000425  3               	adc #15 		; height of sprite minus one pixel.
000425  3               	jmp star8
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Find particle slot for lasers or vapour trail.
000425  3               ; can't use alternate accumulator.
000425  3               ;----------------------------------------------------
000425  3               
000425  3               fpslot:
000425  3               	lda #<SHRAPN 		; shrapnel table.
000425  3               	sta z80_x
000425  3               	lda #>SHRAPN
000425  3               	sta z80_i
000425  3               
000425  3               	lda #NUMSHR		; number of pieces in table.
000425  3               	sta z80_b
000425  3               fpslt0:
000425  3               	ldy #0
000425  3               	lda (z80_ix),y		; get type.
000425  3               	asl a  			; is this slot in use?
000425  3               	bcc :+
000425  3               	rts			; no, we can use it.
000425  3               :
000425  3               	clc			; point to more shrapnel.
000425  3               	lda z80_x
000425  3               	adc #SHRSIZ
000425  3               	sta z80_x
000425  3               	bcc :+
000425  3               	inc z80_i
000425  3               :
000425  3               	dec z80_b		; repeat for all shrapnel.
000425  3               	bne fpslt0
000425  3               
000425  3               	clc
000425  3               	rts 			; out of slots, can't generate anything.
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Create an explosion at sprite position.
000425  3               ;----------------------------------------------------
000425  3               
000425  3               explod:
000425  3               	sta z80_c 		; particles to create.
000425  3               
000425  3               	lda z80_i 		; store pointer to sprite.
000425  3               	pha
000425  3               	lda z80_x
000425  3               	pha
000425  3               
000425  3               	ldy #8
000425  3               	lda (z80_ix),y 		; y coordinate.
000425  3               	sta z80_l
000425  3               	ldy #9
000425  3               	lda (z80_ix),y		; x coordinate.
000425  3               	sta z80_h
000425  3               
000425  3               	lda #<SHRAPN		; shrapnel table.
000425  3               	sta z80_x
000425  3               	lda #>SHRAPN
000425  3               	sta z80_i
000425  3               
000425  3               	lda #NUMSHR		; number of pieces in table.
000425  3               	sta explcnt
000425  3               expld0:
000425  3               	ldy #0
000425  3               	lda (z80_ix),y		; get type.
000425  3               	asl a 			; is this slot in use?
000425  3               	bcs expld1		; no, we can use it.
000425  3               expld2:
000425  3               	clc
000425  3               	lda z80_x
000425  3               	adc #SHRSIZ
000425  3               	sta z80_x
000425  3               	bcc :+
000425  3               	inc z80_i
000425  3               :
000425  3               	dec explcnt		; repeat for all shrapnel.
000425  3               	bne expld0
000425  3               expld3:
000425  3               	pla			; restore sprite pointer.
000425  3               	sta z80_x
000425  3               	pla
000425  3               	sta z80_i
000425  3               	rts 			; out of slots, can't generate any more.
000425  3               
000425  3               expld1:
000425  3               	lda z80_c		; shrapnel counter.
000425  3               	and #15			; 0 to 15.
000425  3               	clc			; add to x.
000425  3               	adc z80_l
000425  3               	ldy #3
000425  3               	sta (z80_ix),y		; y coord.
000425  3               
000425  3               	lda seed3 		; crap random number.
000425  3               	and #15			; 0 to 15.
000425  3               	clc 			; add to y.
000425  3               	adc z80_h
000425  3               	ldy #5
000425  3               	sta (z80_ix),y		; x coord.
000425  3               
000425  3               	lda #2
000425  3               	ldy #0
000425  3               	sta (z80_ix),y		; switch it on.
000425  3               
000425  3               ;	jsr exx 		; store coordinates.
000425  3               	jsr chkxy		; plot first position.
000425  3               	jsr qrand		; quick random angle.
000425  3               	and #60 		; keep within range.
000425  3               	ldy #1
000425  3               	sta (z80_ix),y		; angle.
000425  3               ;	jsr exx			; restore coordinates.
000425  3               
000425  3               	dec z80_c		; one less piece of shrapnel to generate.
000425  3               	bne expld2 		; back to main explosion loop.
000425  3               	jmp expld3 		; restore sprite pointer and exit.
000425  3               
000425  3               explcnt:	.byte 0
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Quick random
000425  3               ;----------------------------------------------------
000425  3               
000425  3               qrand:
000425  3               	jsr random		; r register.
000425  3               	eor seed3		; combine with seed.
000425  3               	sta seed3 		; new seed.
000425  3               	rts
000425  3               
000425  3               seed3:	.byte 0
000425  3               
000425  3               ;----------------------------------------------------
000425  3               ; Display all shrapnel.
000425  3               ;----------------------------------------------------
000425  3               
000425  3               dshrp:
000425  3               	lda #<plotde		; display routine.
000425  3               	sta proshx+1
000425  3               	lda #>plotde
000425  3               	sta proshx+2
000425  3               	jsr proshr		; process shrapnel.
000425  3               
000425  3               	lda #<prosh1		; processing routine.
000425  3               	sta proshx+1
000425  3               	lda #>prosh1
000425  3               	sta proshx+2
000425  3               	rts
000425  3               
000425  3               ;------------------------------------------------------
000425  3               ; Particle engine.
000425  3               ;
000425  3               ; Init particle data for 55 particles in SHRAPN table.
000425  3               ; Every particle has 6 bytes.
000425  3               ;
000425  3               ; global:	-
000425  3               ; local:	x,y,hl
000425  3               ; calls:	-
000425  3               ;------------------------------------------------------
000425  3               
000425  3               inishr:
000425  3               	lda #<SHRAPN 		; table.
000425  3               	sta z80_l
000425  3               	lda #>SHRAPN
000425  3               	sta z80_h
000425  3               
000425  3               	ldy #0
000425  3               	ldx #NUMSHR		; shrapnel pieces to process.
000425  3               inish0:
000425  3               	lda #255 		; kill the shrapnel.
000425  3               	sta (z80_hl),y
000425  3               
000425  3               	clc 			; point there.
000425  3               	lda z80_l
000425  3               	adc #SHRSIZ		; distance to next.
000425  3               	sta z80_l
000425  3               	bcc :+
000425  3               	inc z80_h
000425  3               :
000425  3               	dex
000425  3               	bne inish0 		; round again.
000425  3               	rts
000425  3               
000425  3               ;------------------------------------------------------
000425  3               ; Check for collision between laser and sprite.
000425  3               ;------------------------------------------------------
000425  3               
000425  3               lcol:
000425  3               	lda #<SHRAPN		; shrapnel table.
000425  3               	sta z80_l
000425  3               	lda #>SHRAPN
000425  3               	sta z80_h
000425  3               
000425  3               	lda #NUMSHR		; number of pieces in table.
000425  3               	sta z80_b
000425  3               lcol0:
000425  3               	ldy #0
000425  3               	lda (z80_hl),y 		; get type.
000425  3               	beq lcol1		; yes, check collision.
000425  3               lcol3:
000425  3               	clc			; point to more shrapnel.
000425  3               	lda z80_l
000425  3               	adc #SHRSIZ
000425  3               	sta z80_l
000425  3               	bcc :+
000425  3               	inc z80_h
000425  3               :
000425  3               	dec z80_b		; repeat for all shrapnel.
000425  3               	bne lcol0
000425  3               	rts 			; no collision, carry not set.
000425  3               lcol1:
000425  3               	ldy #3
000425  3               	lda (z80_hl),y		; get y.
000425  3               	sec
000425  3               	ldy #8
000425  3               	sbc (z80_ix),y		; subtract sprite y.
000425  3               lcolh:
000425  3               	cmp #16 		; within range?
000425  3               	bcc :+
000425  3               	jmp lcol2		; no, missed.
000425  3               :
000425  3               	ldy #5
000425  3               	lda (z80_hl),y 		; get x.
000425  3               	sec
000425  3               	ldy #9
000425  3               	sbc (z80_ix),y 		; subtract sprite y.
000425  3               	cmp #16			; within range?
000425  3               	bcs :+
000425  3               	jmp lcol4 		; yes, collision occurred.
000425  3               :
000425  3               lcol2:
000425  3               	jmp lcol3
000425  3               lcol4:
000425  3               	sec
000425  3               	rts 			; return with carry set for collision.
000425  3               .endif
000425  3               
000425  3               ;------------------------------------------------------
000425  3               ; Main game engine code starts here.
000425  3               ; After initialisation, mloop is the main loop
000425  3               ;------------------------------------------------------
000425  3               
000425  3               game:
000425  3               
000425  3               ; Set up screen address table.
000425  3               
000425  3               setsat:
000425  3  A9 00        	lda #<$8000		; start of screen.
000427  3  85 80        	sta scraddr
000429  3  A9 80        	lda #>$8000
00042B  3  85 81        	sta scraddr+1
00042D  3               
00042D  3  A0 00        	ldy #0			; vertical lines on screen.
00042F  3               setsa0:
00042F  3  A5 80        	lda scraddr
000431  3  99 00 9D     	sta SCADTB_lb,y		; write low byte.
000434  3  A5 81        	lda scraddr+1
000436  3  C0 C0        	cpy #192		; vertical lines on screen.
000438  3  90 02        	bcc :+
00043A  3  09 28        	ora #40
00043C  3               :
00043C  3  99 00 9E     	sta SCADTB_hb,y		; write high byte.
00043F  3  20 01 13     	jsr nline		; next line down.
000442  3  C8           	iny			; next position in table.
000443  3  D0 EA        	bne setsa0
000445  3               	
000445  3               ; Init graphics mode
000445  3               
000445  3  A9 F0        	lda #ScrMode		; graphics mode
000447  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
00044A  3  20 42 03     	jsr cls
00044D  3               
00044D  3  20 5C 03     	jsr setpal 		; set up palette.
000450  3               rpblc2:
000450  3               .if pflag
000450  3               	jsr inishr 		; initialise particle engine.
000450  3               .endif
000450  3               evintr:
000450  3  20 96 22     	jsr evnt12 		; call intro/menu event.
000453  3               
000453  3  A9 02        	lda #WALL 		; write default property.
000455  3  A2 00        	ldx #0
000457  3               clrmap:
000457  3  9D 00 9A     	sta MAP,x 		; block properties.
00045A  3  9D 00 9B     	sta MAP+256,x
00045D  3  9D 00 9C     	sta MAP+512,x
000460  3  E8           	inx			; next byte.
000461  3  D0 F4        	bne clrmap
000463  3               
000463  3  20 9B 02     	jsr iniob 		; initialise objects.
000466  3               
000466  3  A9 00        	lda #0			; put zero in accumulator.
000468  3  8D 63 02     	sta gamwon		; reset game won flag.
00046B  3               
00046B  3  20 CD 05     	jsr inisc 		; init the score.
00046E  3               mapst:
00046E  3  AD E4 18     	lda stmap 		; start position on map.
000471  3  8D 83 18     	sta roomtb		; set up position in table, if there is one.
000474  3               
000474  3               inipbl:
000474  3  20 5E 14     	jsr initsc 		; set up first screen.
000477  3               
000477  3  A9 72        	lda #<ssprit 		; default to spare sprite in table.
000479  3  85 68        	sta z80_x
00047B  3  A9 18        	lda #>ssprit
00047D  3  85 69        	sta z80_i
00047F  3               evini:
00047F  3  20 53 23     	jsr evnt13 		; initialisation.
000482  3               
000482  3               ; Two restarts.
000482  3               ; First restart - clear all sprites and initialise everything.
000482  3               
000482  3               rstrt:
000482  3  20 7A 05     	jsr rsevt 		; restart events.
000485  3  20 8E 02     	jsr xspr 		; clear sprite table.
000488  3  20 C4 15     	jsr sprlst 		; fetch pointer to screen sprites.
00048B  3  20 52 16     	jsr ispr 		; initialise sprite table.
00048E  3               
00048E  3  4C 9D 04     	jmp rstrt0
000491  3               
000491  3               ; Second restart - clear all but player, and don't initialise him.
000491  3               
000491  3               rstrtn:
000491  3  20 7A 05     	jsr rsevt		; restart events.
000494  3  20 F2 15     	jsr nspr 		; clear all non-player sprites.
000497  3  20 C4 15     	jsr sprlst 		; fetch pointer to screen sprites.
00049A  3  20 92 16     	jsr kspr 		; initialise sprite table, no more players.
00049D  3               
00049D  3               ; Set up the player and/or enemy sprites.
00049D  3               
00049D  3               rstrt0:
00049D  3  A9 00        	lda #0 			; zero in accumulator.
00049F  3  8D 60 02     	sta nexlev 		; reset next level flag.
0004A2  3  8D 61 02     	sta restfl 		; reset restart flag.
0004A5  3  8D 62 02     	sta deadf 		; reset dead flag.
0004A8  3  20 5E 0B     	jsr droom 		; show screen layout.
0004AB  3               rpblc0:
0004AB  3               .if pflag
0004AB  3               	jsr inishr 		; initialise particle engine.
0004AB  3               .endif
0004AB  3  20 1D 06     	jsr shwob		; draw objects.
0004AE  3               
0004AE  3  A9 A6        	lda #<sprtab 		; address of sprite table, even sprites.
0004B0  3  85 68        	sta z80_x
0004B2  3  A9 17        	lda #>sprtab
0004B4  3  85 69        	sta z80_i
0004B6  3  20 73 11     	jsr dspr 		; display sprites.
0004B9  3               
0004B9  3  A9 B7        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0004BB  3  85 68        	sta z80_x
0004BD  3  A9 17        	lda #>(sprtab+TABSIZ)
0004BF  3  85 69        	sta z80_i
0004C1  3  20 73 11     	jsr dspr 		; display sprites.
0004C4  3               mloop:
0004C4  3  20 CD 02     	jsr vsync 		; synchronise with display.
0004C7  3               
0004C7  3  A9 A6        	lda #<sprtab 		; address of sprite table, even sprites.
0004C9  3  85 68        	sta z80_x
0004CB  3  A9 17        	lda #>sprtab
0004CD  3  85 69        	sta z80_i
0004CF  3  20 73 11     	jsr dspr 		; display even sprites.
0004D2  3               
0004D2  3               ;
0004D2  3  20 1C 06     	jsr plsnd 		; play sounds.
0004D5  3  20 CD 02     	jsr vsync 		; synchronise with display.
0004D8  3               
0004D8  3  A9 B7        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0004DA  3  85 68        	sta z80_x
0004DC  3  A9 17        	lda #>(sprtab+TABSIZ)
0004DE  3  85 69        	sta z80_i
0004E0  3  20 73 11     	jsr dspr 		; display odd sprites.
0004E3  3               
0004E3  3  A9 72        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
0004E5  3  85 68        	sta z80_x
0004E7  3  A9 18        	lda #>(ssprit)
0004E9  3  85 69        	sta z80_i
0004EB  3               evlp1:
0004EB  3  20 62 22     	jsr evnt10 		; called once per main loop.
0004EE  3  20 E8 10     	jsr pspr 		; process sprites.
0004F1  3               
0004F1  3               ; Main loop events.
0004F1  3               
0004F1  3  A9 72        	lda #<ssprit 		; point to spare sprite for spawning purposes.
0004F3  3  85 68        	sta z80_x
0004F5  3  A9 18        	lda #>ssprit
0004F7  3  85 69        	sta z80_i
0004F9  3               evlp2:
0004F9  3  20 63 22     	jsr evnt11 		; called once per main loop.
0004FC  3               bsortx:
0004FC  3  20 5B 10     	jsr bsort 		; sort sprites.
0004FF  3               
0004FF  3  AD 60 02     	lda nexlev		; finished level flag.
000502  3  D0 21        	bne newlev		; is set, go to next level.
000504  3  AD 63 02     	lda gamwon		; finished game flag.
000507  3  D0 2D        	bne evwon		; is set, finish the game.
000509  3  AD 61 02     	lda restfl 		; finished level flag.
00050C  3  C9 01        	cmp #1			; has it been set?
00050E  3  D0 03        	bne :+
000510  3  4C 82 04     	jmp rstrt		; yes, go to next level.
000513  3               :
000513  3  C9 02        	cmp #2			; has it been set?
000515  3  D0 03        	bne :+
000517  3  4C 91 04     	jmp rstrtn		; yes, go to next level.
00051A  3               :
00051A  3  AD 62 02     	lda deadf 		; dead flag.
00051D  3  D0 1D        	bne pdead		; yes, player dead.
00051F  3               
00051F  3               ; back to start of main loop.
00051F  3               
00051F  3  EE 5B 02     	inc clock
000522  3  4C C4 04     	jmp mloop		; switched to a jmp mloop during test mode.
000525  3               
000525  3               ;----------------------------------------------------------
000525  3               ; New level
000525  3               ;----------------------------------------------------------
000525  3               
000525  3               newlev:
000525  3  AD 3F 02     	lda scno 			; current screen.
000528  3  18           	clc
000529  3  69 01        	adc #1				; next screen.
00052B  3  CD 96 60     	cmp numsc			; total number of screens.
00052E  3  B0 06        	bcs evwon			; yes, game finished.
000530  3  8D 3F 02     	sta scno			; set new level number.
000533  3  4C 82 04     	jmp rstrt			; restart, clearing all aliens.
000536  3               
000536  3               evwon:
000536  3  20 E8 24     	jsr evnt18		 	; game completed.
000539  3  4C 4F 05     	jmp tidyup			; tidy up and return to BASIC/calling routine.
00053C  3               
00053C  3               ;----------------------------------------------------------
00053C  3               ; Player dead.
00053C  3               ;----------------------------------------------------------
00053C  3               
00053C  3               pdead:
00053C  3  A9 00        	lda #0				; zeroise accumulator.
00053E  3  8D 62 02     	sta deadf			; reset dead flag.
000541  3               evdie:
000541  3  20 6A 24     	jsr evnt16 			; death subroutine.
000544  3  AD 40 02     	lda numlif			; number of lives.
000547  3  F0 03        	beq :+
000549  3  4C 82 04     	jmp rstrt 			; restart game.
00054C  3               :
00054C  3               evfail:
00054C  3  20 A7 24     	jsr evnt17 			; failure event.
00054F  3               
00054F  3               ;----------------------------------------------------------
00054F  3               ; Tidy things up
00054F  3               ;----------------------------------------------------------
00054F  3               
00054F  3               tidyup:
00054F  3  A0 00        	ldy #0				; digits to check.
000551  3               tidyu2:
000551  3  B9 5D 08     	lda score,y 			; get score digit.
000554  3  CD 63 08     	cmp hiscor 			; are we larger than high score digit?
000557  3  90 07        	bcc tidyu0			; high score is bigger.
000559  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
00055B  3  C8           	iny				; next digit of high score.
00055C  3  C0 06        	cpy #6
00055E  3  D0 F1        	bne tidyu2			; repeat for all digits
000560  3               tidyu0:
000560  3  A9 5D        	lda #<score			; return pointing to score.
000562  3  85 62        	sta z80_c
000564  3  A9 08        	lda #>score
000566  3  85 63        	sta z80_b
000568  3  60           	rts
000569  3               tidyu1:
000569  3  A0 05        	ldy #5
00056B  3               tidyu3:
00056B  3  B9 5D 08     	lda score,y			; score.
00056E  3  99 63 08     	sta hiscor,y			; high score.
000571  3  88           	dey
000572  3  10 F7        	bpl tidyu3 			; copy score to high score.
000574  3               evnewh:
000574  3  20 29 25     	jsr evnt19			; new high score event.
000577  3  4C 60 05     	jmp tidyu0			; tidy up.
00057A  3               
00057A  3               ;--------------------------------------------------
00057A  3               ; Restart event.
00057A  3               ;--------------------------------------------------
00057A  3               
00057A  3               rsevt:
00057A  3  A9 72        	lda #<ssprit 			; default to spare element in table.
00057C  3  85 68        	sta z80_x
00057E  3  A9 18        	lda #>ssprit
000580  3  85 69        	sta z80_i
000582  3               evrs:
000582  3  4C EF 23     	jmp evnt14	 		; call restart event.
000585  3               
000585  3               ;------------------------------------------------------------------
000585  3               ; Copy number passed in a to string position bc, right-justified.
000585  3               ;
000585  3               ; Input:
000585  3               ;  A  = number
000585  3               ;  BC = string address
000585  3               ;
000585  3               ; Output:
000585  3               ;  BC = string with number
000585  3               ;-----------------------------------------------------------------
000585  3               
000585  3               num2ch:
000585  3  85 65        	sta z80_d		; Save number
000587  3               
000587  3  A9 00        	lda #0
000589  3  8D CC 05     	sta flag
00058C  3               
00058C  3  A2 64        	ldx #100		; hundreds column.
00058E  3  86 64        	stx z80_e
000590  3  20 A1 05     	jsr numdg		; show digit.
000593  3               
000593  3  A2 0A        	ldx #10			; tens column.
000595  3  86 64        	stx z80_e
000597  3  20 A1 05     	jsr numdg		; show digit.
00059A  3               
00059A  3  EE CC 05     	inc flag
00059D  3  A2 01        	ldx #1			; units column.
00059F  3  86 64        	stx z80_e
0005A1  3               numdg:
0005A1  3  A9 30        	lda #48			; clear digit.
0005A3  3  85 61        	sta z80_a
0005A5  3               numdg1:
0005A5  3  A5 65        	lda z80_d
0005A7  3  C5 64        	cmp z80_e
0005A9  3  90 0F        	bcc numdg0		; nothing to show.
0005AB  3  38           	sec
0005AC  3  A5 65        	lda z80_d
0005AE  3  E5 64        	sbc z80_e		; subtract from column.
0005B0  3  85 65        	sta z80_d
0005B2  3  E6 61        	inc z80_a		; increment digit.
0005B4  3  EE CC 05     	inc flag
0005B7  3  4C A5 05     	jmp numdg1		; repeat until column is zero.
0005BA  3               numdg0:
0005BA  3  A0 00        	ldy #0
0005BC  3  A5 61        	lda z80_a
0005BE  3  91 62        	sta (z80_bc),y		; write digit to buffer.
0005C0  3  AD CC 05     	lda flag
0005C3  3  F0 06        	beq :+
0005C5  3  E6 62        	inc z80_c		; next buffer position.
0005C7  3  D0 02        	bne :+
0005C9  3  E6 63        	inc z80_b
0005CB  3               :
0005CB  3  60           	rts
0005CC  3               
0005CC  3  00           flag:	.byte 0
0005CD  3               
0005CD  3               ;---------------------------------------------------------
0005CD  3               ; Reset score to "000000"
0005CD  3               ;---------------------------------------------------------
0005CD  3               
0005CD  3               inisc:
0005CD  3  A9 30        	lda #'0'
0005CF  3  A2 05        	ldx #5			; digits to initialise.
0005D1  3               inisc0:
0005D1  3  9D 5D 08     	sta score,x 		; write zero digit.
0005D4  3  CA           	dex			; next column.
0005D5  3  10 FA        	bpl inisc0		; repeat for all digits.
0005D7  3               
0005D7  3  60           	rts
0005D8  3               
0005D8  3               ;-----------------------------------------------------
0005D8  3               ; Multiply h by d and return in hl.
0005D8  3               ;
0005D8  3               ; Input:
0005D8  3               ;  H = first number
0005D8  3               ;  D = second number
0005D8  3               ;
0005D8  3               ; Output:
0005D8  3               ;  L = result H x D
0005D8  3               ;-----------------------------------------------------
0005D8  3               
0005D8  3               imul:
0005D8  3  A5 65        	lda z80_d		; HL = H * D
0005DA  3  85 64        	sta z80_e
0005DC  3  A5 67        	lda z80_h
0005DE  3  85 62        	sta z80_c		; make c first multiplier.
0005E0  3               imul0:
0005E0  3  A9 00        	lda #0			; zeroise total.
0005E2  3  85 66        	sta z80_l
0005E4  3  85 67        	sta z80_h
0005E6  3               
0005E6  3  A5 67        	lda z80_h
0005E8  3  85 65        	sta z80_d		; zeroise high byte.
0005EA  3               
0005EA  3  A9 08        	lda #8			; repeat 8 times.
0005EC  3  85 63        	sta z80_b
0005EE  3               imul1:
0005EE  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
0005F0  3  90 0E        	bcc imul2		; wasn't set.
0005F2  3  18           	clc			; bit was set, so add de.
0005F3  3  A5 66        	lda z80_l
0005F5  3  65 64        	adc z80_e
0005F7  3  85 66        	sta z80_l
0005F9  3  A5 67        	lda z80_h
0005FB  3  65 65        	adc z80_d
0005FD  3  85 67        	sta z80_h
0005FF  3  18           	clc 			; reset carry.
000600  3               imul2:
000600  3  06 64        	asl z80_e 		; shift de 1 bit left.
000602  3  26 65        	rol z80_d
000604  3  C6 63        	dec z80_b
000606  3  D0 E6        	bne imul1		; repeat 8 times.
000608  3               
000608  3  60           	rts
000609  3               
000609  3               ;-----------------------------------------------
000609  3               ; Divide d by e and return in d, remainder in a.
000609  3               ;
000609  3               ; Input:
000609  3               ;  D = first number
000609  3               ;  E = second number
000609  3               ;
000609  3               ; Output:
000609  3               ;  D = result D/E
000609  3               ;  A = remainder
000609  3               ;-----------------------------------------------
000609  3               
000609  3               idiv:
000609  3  A9 00        	lda #0
00060B  3  A0 08        	ldy #8		 	; bits to shift.
00060D  3  06 65        	asl z80_d
00060F  3               idiv0:
00060F  3  2A           	rol a 			; multiply d by 2.
000610  3  C5 64        	cmp z80_e 		; test if e is smaller.
000612  3  90 02        	bcc idiv1		; e is greater, no division this time.
000614  3  E5 64        	sbc z80_e		; subtract it.
000616  3               idiv1:
000616  3  26 65        	rol z80_d		; rotate into d.
000618  3  88           	dey
000619  3  D0 F4        	bne idiv0		; repeat
00061B  3  60           	rts
00061C  3               
00061C  3               ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
00061C  3               ; Initialise a sound.
00061C  3               ;
00061C  3               ;isnd:
00061C  3               ;	; 29.04.02 ld de, (ch1ptr) 	; first pointer.
00061C  3               ;	lda ch1ptr
00061C  3               ;	sta z80_e
00061C  3               ;	lda ch1ptr+1
00061C  3               ;	sta z80_d
00061C  3               ;
00061C  3               ;	; 29.03.01 ld a, (de) 	; get first byte.
00061C  3               ;	ldy #0
00061C  3               ;	lda (z80_de),y
00061C  3               ;	sta z80_a
00061C  3               ;
00061C  3               ;	; 22.03.xx inc a 	; reached the end?
00061C  3               ;	inc z80_a
00061C  3               ;
00061C  3               ;	; 28.06.00 jr z, isnd1 	; that"ll do.
00061C  3               ;	bne :+
00061C  3               ;	jmp isnd1
00061C  3               ;:
00061C  3               ;	; 29.04.02 ld de, (ch2ptr) 	; second pointer.
00061C  3               ;	lda ch2ptr
00061C  3               ;	sta z80_e
00061C  3               ;	lda ch2ptr+1
00061C  3               ;	sta z80_d
00061C  3               ;
00061C  3               ;	; 29.03.01 ld a, (de) 	; get first byte.
00061C  3               ;	ldy #0
00061C  3               ;	lda (z80_de),y
00061C  3               ;	sta z80_a
00061C  3               ;
00061C  3               ;	; 22.03.xx inc a 	; reached the end?
00061C  3               ;	inc z80_a
00061C  3               ;
00061C  3               ;	; 28.06.00 jr z, isnd2 	; that"ll do.
00061C  3               ;	bne :+
00061C  3               ;	jmp isnd2
00061C  3               ;:
00061C  3               ;	; 29.04.02 ld de, (ch3ptr) 	; final pointer.
00061C  3               ;	lda ch3ptr
00061C  3               ;	sta z80_e
00061C  3               ;	lda ch3ptr+1
00061C  3               ;	sta z80_d
00061C  3               ;
00061C  3               ;	; 29.03.01 ld a, (de) 	; get first byte.
00061C  3               ;	ldy #0
00061C  3               ;	lda (z80_de),y
00061C  3               ;	sta z80_a
00061C  3               ;
00061C  3               ;	; 22.03.xx inc a 	; reached the end?
00061C  3               ;	inc z80_a
00061C  3               ;
00061C  3               ;	; 28.06.00 jr z, isnd3 	; that"ll do.
00061C  3               ;	bne :+
00061C  3               ;	jmp isnd3
00061C  3               ;:
00061C  3               ;	; 43.xx.xx rts  	
00061C  3               ;	rts
00061C  3               ;
00061C  3               ;isnd1:
00061C  3               ;	; 29.02.04 ld (ch1ptr), hl 	; set up the sound.
00061C  3               ;	lda z80_l
00061C  3               ;	sta ch1ptr
00061C  3               ;	lda z80_h
00061C  3               ;	sta ch1ptr+1
00061C  3               ;
00061C  3               ;	; 43.xx.xx rts  	
00061C  3               ;	rts
00061C  3               ;
00061C  3               ;isnd2:
00061C  3               ;	; 29.02.04 ld (ch2ptr), hl 	; set up the sound.
00061C  3               ;	lda z80_l
00061C  3               ;	sta ch2ptr
00061C  3               ;	lda z80_h
00061C  3               ;	sta ch2ptr+1
00061C  3               ;
00061C  3               ;	; 43.xx.xx rts  	
00061C  3               ;	rts
00061C  3               ;
00061C  3               ;isnd3:
00061C  3               ;	; 29.02.04 ld (ch3ptr), hl 	; set up the sound.
00061C  3               ;	lda z80_l
00061C  3               ;	sta ch3ptr
00061C  3               ;	lda z80_h
00061C  3               ;	sta ch3ptr+1
00061C  3               ;
00061C  3               ;	; 43.xx.xx rts  	
00061C  3               ;	rts
00061C  3               ;
00061C  3               ;	; 98.00.01 ch1ptr .word spmask
00061C  3               ;ch1ptr:	.word spmask
00061C  3               ;
00061C  3               ;	; 98.00.01 ch2ptr .word spmask
00061C  3               ;ch2ptr:	.word spmask
00061C  3               ;
00061C  3               ;	; 98.00.01 ch3ptr .word spmask
00061C  3               ;ch3ptr:	.word spmask
00061C  3               ;
00061C  3               
00061C  3               plsnd:
00061C  3  60           	rts
00061D  3               
00061D  3               ;	; 04.00.xx call plsnd1 	; first channel.
00061D  3               ;	jsr plsnd1
00061D  3               ;
00061D  3               ;	; 04.00.xx call plsnd2 	; second one.
00061D  3               ;	jsr plsnd2
00061D  3               ;
00061D  3               ;	; 04.00.xx call plsnd3 	; final channel.
00061D  3               ;	jsr plsnd3
00061D  3               ;
00061D  3               
00061D  3               ; Write the contents of our AY buffer to the AY registers.
00061D  3               ;
00061D  3               ;w8912:
00061D  3               ;	; 29.04.00 ld hl, snddat 	; start of AY-3-8912 register data.
00061D  3               ;	lda #<(snddat)
00061D  3               ;	sta z80_l
00061D  3               ;	lda #>(snddat)
00061D  3               ;	sta z80_h
00061D  3               ;
00061D  3               ;	; 29.04.00 ld de, 14*256 	; start with register 0, 14 to write.
00061D  3               ;	lda #<(14*256)
00061D  3               ;	sta z80_e
00061D  3               ;	lda #>(14*256)
00061D  3               ;	sta z80_d
00061D  3               ;
00061D  3               ;	; 29.03.05 ld c, 253 	; low byte of port to write.
00061D  3               ;	lda #253; low byte of port to write.
00061D  3               ;	sta z80_c
00061D  3               ;
00061D  3               ;w8912a:
00061D  3               ;	; 29.03.05 ld b, 255 	; port 65533=select soundchip register.
00061D  3               ;	lda #255; port 65533=select soundchip register.
00061D  3               ;	sta z80_b
00061D  3               ;
00061D  3               ;	; 39.02.03 out (c), e 	; tell chip which register we"re writing.
00061D  3               ;	lda z80_e
00061D  3               ;	sta z80_c
00061D  3               ;
00061D  3               ;	; 29.03.01 ld a, (hl) 	; value to write.
00061D  3               ;	ldy #0
00061D  3               ;	lda (z80_hl),y
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 29.03.05 ld b, 191 	; port 49149=write value to register.
00061D  3               ;	lda #191; port 49149=write value to register.
00061D  3               ;	sta z80_b
00061D  3               ;
00061D  3               ;	; 39.02.03 out (c), a 	; this is what we"re putting there.
00061D  3               ;	lda z80_a
00061D  3               ;	sta z80_c
00061D  3               ;
00061D  3               ;	; 22.03.xx inc e 	; next sound chip register.
00061D  3               ;	inc z80_e
00061D  3               ;
00061D  3               ;	; 22.04.xx inc hl 	; next byte to write.
00061D  3               ;	inc z80_l
00061D  3               ;	bne :+
00061D  3               ;	inc z80_h
00061D  3               ;:
00061D  3               ;	; 13.03.xx dec d 	; decrement loop counter.
00061D  3               ;	dec z80_d
00061D  3               ;
00061D  3               ;	; 27.06.00 jp nz, w8912a 	; repeat until done.
00061D  3               ;	beq :+
00061D  3               ;	jmp w8912a
00061D  3               ;:
00061D  3               ;	; 43.xx.xx rts  	
00061D  3               ;	rts
00061D  3               ;
00061D  3               ;	; 98.00.01 snddat .word 0              ; tone registers, channel A.
00061D  3               ;snddat:	.word 0              ; tone registers, channel A.
00061D  3               ;
00061D  3               ;	; 98.00.01 .word 0              ; channel B tone registers.
00061D  3               ;	.word 0              ; channel B tone registers.
00061D  3               ;
00061D  3               ;	; 98.00.01 .word 0              ; as above, channel C.
00061D  3               ;	.word 0              ; as above, channel C.
00061D  3               ;
00061D  3               ;	; 98.00.00 sndwnp .byte 0              ; white noise period.
00061D  3               ;sndwnp:	.byte 0              ; white noise period.
00061D  3               ;
00061D  3               ;	; 98.00.00 sndmix .byte 60             ; tone/noise mixer control.
00061D  3               ;sndmix:	.byte 60             ; tone/noise mixer control.
00061D  3               ;
00061D  3               ;	; 98.00.00 sndv1  .byte 0              ; channel A amplitude/envelope generator.
00061D  3               ;sndv1:	.byte 0              ; channel A amplitude/envelope generator.
00061D  3               ;
00061D  3               ;	; 98.00.00 sndv2  .byte 0              ; channel B amplitude/envelope.
00061D  3               ;sndv2:	.byte 0              ; channel B amplitude/envelope.
00061D  3               ;
00061D  3               ;	; 98.00.00 sndv3  .byte 0              ; channel C amplitude/envelope.
00061D  3               ;sndv3:	.byte 0              ; channel C amplitude/envelope.
00061D  3               ;
00061D  3               ;	; 98.00.01 .word 0              ; duration of each note.
00061D  3               ;	.word 0              ; duration of each note.
00061D  3               ;
00061D  3               ;	; 98.00.00 .byte 0
00061D  3               ;	.byte 0
00061D  3               ;
00061D  3               ;plwn:
00061D  3               ;	; 22.04.xx inc hl 	; next byte of sound.
00061D  3               ;	inc z80_l
00061D  3               ;	bne :+
00061D  3               ;	inc z80_h
00061D  3               ;:
00061D  3               ;	; 02.05.xx and 56 	; check if we"re bothering with white noise.
00061D  3               ;	lda z80_a
00061D  3               ;	and #56
00061D  3               ;
00061D  3               ;	; 43.06.xx rts nz 	; we"re not.
00061D  3               ;	beq :+
00061D  3               ;	rts
00061D  3               ;:
00061D  3               ;	; 29.03.01 ld a, (hl) 	; fetch byte.
00061D  3               ;	ldy #0
00061D  3               ;	lda (z80_hl),y
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 29.02.03 ld (sndwnp), a 	; set white noise period.
00061D  3               ;	lda z80_a
00061D  3               ;	sta sndwnp
00061D  3               ;
00061D  3               ;	; 43.xx.xx rts  	
00061D  3               ;	rts
00061D  3               ;
00061D  3               ;plsnd2:
00061D  3               ;	; 04.00.xx call cksnd2 	; check sound for first channel.
00061D  3               ;	jsr cksnd2
00061D  3               ;
00061D  3               ;	; 06.05.xx cp 255 	; reached end?
00061D  3               ;	lda z80_a
00061D  3               ;	cmp #255
00061D  3               ;
00061D  3               ;	; 28.06.00 jr z, silen2 	; silence this channel.
00061D  3               ;	bne :+
00061D  3               ;	jmp silen2
00061D  3               ;:
00061D  3               ;	; 02.05.xx and 15 	; sound bits.
00061D  3               ;	lda z80_a
00061D  3               ;	and #15
00061D  3               ;
00061D  3               ;	; 29.02.03 ld (sndv2), a 	; set volume for channel.
00061D  3               ;	lda z80_a
00061D  3               ;	sta sndv2
00061D  3               ;
00061D  3               ;	; 29.03.02 ld a, (sndmix) 	; mixer byte.
00061D  3               ;	lda sndmix
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 02.05.xx and 237 	; remove bits for this channel.
00061D  3               ;	lda z80_a
00061D  3               ;	and #237
00061D  3               ;
00061D  3               ;	; 29.03.03 ld b, a 	; store in b register.
00061D  3               ;	lda z80_a
00061D  3               ;	sta z80_b
00061D  3               ;
00061D  3               ;	; 04.00.xx call plmix 	; fetch mixer details.
00061D  3               ;	jsr plmix
00061D  3               ;
00061D  3               ;	; 02.05.xx and 18 	; mixer bits we want.
00061D  3               ;	lda z80_a
00061D  3               ;	and #18
00061D  3               ;
00061D  3               ;	; 36.03.xx or b 	; combine with mixer bits.
00061D  3               ;	lda z80_a
00061D  3               ;	ora z80_a
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 29.02.03 ld (sndmix), a 	; new mixer value.
00061D  3               ;	lda z80_a
00061D  3               ;	sta sndmix
00061D  3               ;
00061D  3               ;	; 04.00.xx call plwn 	; white noise check.
00061D  3               ;	jsr plwn
00061D  3               ;
00061D  3               ;	; 22.04.xx inc hl 	; tone low.
00061D  3               ;	inc z80_l
00061D  3               ;	bne :+
00061D  3               ;	inc z80_h
00061D  3               ;:
00061D  3               ;	; 29.03.01 ld e, (hl) 	; fetch value.
00061D  3               ;	ldy #0
00061D  3               ;	lda (z80_hl),y
00061D  3               ;	sta z80_e
00061D  3               ;
00061D  3               ;	; 22.04.xx inc hl 	; tone high.
00061D  3               ;	inc z80_l
00061D  3               ;	bne :+
00061D  3               ;	inc z80_h
00061D  3               ;:
00061D  3               ;	; 29.03.01 ld d, (hl) 	; fetch value.
00061D  3               ;	ldy #0
00061D  3               ;	lda (z80_hl),y
00061D  3               ;	sta z80_d
00061D  3               ;
00061D  3               ;	; 29.02.04 ld (snddat+2), de 	; set tone.
00061D  3               ;	lda z80_e
00061D  3               ;	sta snddat+2
00061D  3               ;	lda z80_d
00061D  3               ;	sta snddat+2+1
00061D  3               ;
00061D  3               ;	; 22.04.xx inc hl 	; next bit of sound.
00061D  3               ;	inc z80_l
00061D  3               ;	bne :+
00061D  3               ;	inc z80_h
00061D  3               ;:
00061D  3               ;	; 29.02.04 ld (ch2ptr), hl 	; set pointer.
00061D  3               ;	lda z80_l
00061D  3               ;	sta ch2ptr
00061D  3               ;	lda z80_h
00061D  3               ;	sta ch2ptr+1
00061D  3               ;
00061D  3               ;	; 43.xx.xx rts  	
00061D  3               ;	rts
00061D  3               ;
00061D  3               ;plsnd3:
00061D  3               ;	; 04.00.xx call cksnd3 	; check sound for first channel.
00061D  3               ;	jsr cksnd3
00061D  3               ;
00061D  3               ;	; 06.05.xx cp 255 	; reached end?
00061D  3               ;	lda z80_a
00061D  3               ;	cmp #255
00061D  3               ;
00061D  3               ;	; 28.06.00 jr z, silen3 	; silence last channel.
00061D  3               ;	bne :+
00061D  3               ;	jmp silen3
00061D  3               ;:
00061D  3               ;	; 02.05.xx and 15 	; sound bits.
00061D  3               ;	lda z80_a
00061D  3               ;	and #15
00061D  3               ;
00061D  3               ;	; 29.02.03 ld (sndv3), a 	; set volume for channel.
00061D  3               ;	lda z80_a
00061D  3               ;	sta sndv3
00061D  3               ;
00061D  3               ;	; 29.03.02 ld a, (sndmix) 	; mixer byte.
00061D  3               ;	lda sndmix
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 02.05.xx and 219 	; remove bits for this channel.
00061D  3               ;	lda z80_a
00061D  3               ;	and #219
00061D  3               ;
00061D  3               ;	; 29.03.03 ld b, a 	; store in b register.
00061D  3               ;	lda z80_a
00061D  3               ;	sta z80_b
00061D  3               ;
00061D  3               ;	; 04.00.xx call plmix 	; fetch mixer details.
00061D  3               ;	jsr plmix
00061D  3               ;
00061D  3               ;	; 02.05.xx and 36 	; mixer bits we want.
00061D  3               ;	lda z80_a
00061D  3               ;	and #36
00061D  3               ;
00061D  3               ;	; 36.03.xx or b 	; combine with mixer bits.
00061D  3               ;	lda z80_a
00061D  3               ;	ora z80_a
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 29.02.03 ld (sndmix), a 	; new mixer value.
00061D  3               ;	lda z80_a
00061D  3               ;	sta sndmix
00061D  3               ;
00061D  3               ;	; 04.00.xx call plwn 	; white noise check.
00061D  3               ;	jsr plwn
00061D  3               ;
00061D  3               ;	; 22.04.xx inc hl 	; tone low.
00061D  3               ;	inc z80_l
00061D  3               ;	bne :+
00061D  3               ;	inc z80_h
00061D  3               ;:
00061D  3               ;	; 29.03.01 ld e, (hl) 	; fetch value.
00061D  3               ;	ldy #0
00061D  3               ;	lda (z80_hl),y
00061D  3               ;	sta z80_e
00061D  3               ;
00061D  3               ;	; 22.04.xx inc hl 	; tone high.
00061D  3               ;	inc z80_l
00061D  3               ;	bne :+
00061D  3               ;	inc z80_h
00061D  3               ;:
00061D  3               ;	; 29.03.01 ld d, (hl) 	; fetch value.
00061D  3               ;	ldy #0
00061D  3               ;	lda (z80_hl),y
00061D  3               ;	sta z80_d
00061D  3               ;
00061D  3               ;	; 29.02.04 ld (snddat+4), de 	; set tone.
00061D  3               ;	lda z80_e
00061D  3               ;	sta snddat+4
00061D  3               ;	lda z80_d
00061D  3               ;	sta snddat+4+1
00061D  3               ;
00061D  3               ;	; 22.04.xx inc hl 	; next bit of sound.
00061D  3               ;	inc z80_l
00061D  3               ;	bne :+
00061D  3               ;	inc z80_h
00061D  3               ;:
00061D  3               ;	; 29.02.04 ld (ch3ptr), hl 	; set pointer.
00061D  3               ;	lda z80_l
00061D  3               ;	sta ch3ptr
00061D  3               ;	lda z80_h
00061D  3               ;	sta ch3ptr+1
00061D  3               ;
00061D  3               ;	; 43.xx.xx rts  	
00061D  3               ;	rts
00061D  3               ;
00061D  3               ;plmix:
00061D  3               ;	; 29.03.01 ld a, (hl) 	; fetch mixer byte.
00061D  3               ;	ldy #0
00061D  3               ;	lda (z80_hl),y
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 02.05.xx and 192 	; mix bits are d6 and d7.
00061D  3               ;	lda z80_a
00061D  3               ;	and #192
00061D  3               ;
00061D  3               ;	; 49.xx.xx rlca  	; rotate into d0 and d1.
00061D  3               ;	rol z80_a
00061D  3               ;
00061D  3               ;	; 49.xx.xx rlca  	
00061D  3               ;	rol z80_a
00061D  3               ;
00061D  3               ;	; 29.03.03 ld e, a 	; displacement in de.
00061D  3               ;	lda z80_a
00061D  3               ;	sta z80_e
00061D  3               ;
00061D  3               ;	; 29.03.05 ld d, 0 	
00061D  3               ;	lda #0
00061D  3               ;	sta z80_d
00061D  3               ;
00061D  3               ;	; 41.04.xx push hl 	; store pointer on stack.
00061D  3               ;	lda z80_h
00061D  3               ;	pha
00061D  3               ;	lda z80_l
00061D  3               ;	pha
00061D  3               ;
00061D  3               ;	; 29.04.00 ld hl, mixtab 	; mixer table.
00061D  3               ;	lda #<(mixtab)
00061D  3               ;	sta z80_l
00061D  3               ;	lda #>(mixtab)
00061D  3               ;	sta z80_h
00061D  3               ;
00061D  3               ;	; 01.04.04 add hl, de 	; point to mixer byte.
00061D  3               ;	jsr add_hl_de
00061D  3               ;
00061D  3               ;	; 29.03.01 ld a, (hl) 	; fetch mixer value.
00061D  3               ;	ldy #0
00061D  3               ;	lda (z80_hl),y
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 40.04.xx pop hl 	; restore pointer.
00061D  3               ;	pla
00061D  3               ;	sta z80_l
00061D  3               ;	pla
00061D  3               ;	sta z80_h
00061D  3               ;
00061D  3               ;	; 43.xx.xx rts  	
00061D  3               ;	rts
00061D  3               ;
00061D  3               ;	; 98.00.00 mixtab .byte 63,56,7,0      ; mixer byte settings.
00061D  3               ;mixtab:	.byte 63,56,7,0      ; mixer byte settings.
00061D  3               ;
00061D  3               ;silen1:
00061D  3               ;	; 64.03.xx xor a 	; zero.
00061D  3               ;	lda z80_a
00061D  3               ;	eor z80_a
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 29.02.03 ld (sndv1), a 	; sound off.
00061D  3               ;	lda z80_a
00061D  3               ;	sta sndv1
00061D  3               ;
00061D  3               ;	; 29.03.02 ld a, (sndmix) 	; mixer byte.
00061D  3               ;	lda sndmix
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 36.05.xx or 9 	; mix bits off.
00061D  3               ;	lda z80_a
00061D  3               ;	ora #9
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 29.02.03 ld (sndmix), a 	; mixer setting for channel.
00061D  3               ;	lda z80_a
00061D  3               ;	sta sndmix
00061D  3               ;
00061D  3               ;	; 43.xx.xx rts  	
00061D  3               ;	rts
00061D  3               ;
00061D  3               ;silen2:
00061D  3               ;	; 64.03.xx xor a 	; zero.
00061D  3               ;	lda z80_a
00061D  3               ;	eor z80_a
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 29.02.03 ld (sndv2), a 	; sound off.
00061D  3               ;	lda z80_a
00061D  3               ;	sta sndv2
00061D  3               ;
00061D  3               ;	; 29.03.02 ld a, (sndmix) 	; mixer byte.
00061D  3               ;	lda sndmix
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 36.05.xx or 18 	; mix bits off.
00061D  3               ;	lda z80_a
00061D  3               ;	ora #18
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 29.02.03 ld (sndmix), a 	; mixer setting for channel.
00061D  3               ;	lda z80_a
00061D  3               ;	sta sndmix
00061D  3               ;
00061D  3               ;	; 43.xx.xx rts  	
00061D  3               ;	rts
00061D  3               ;
00061D  3               ;silen3:
00061D  3               ;	; 64.03.xx xor a 	; zero.
00061D  3               ;	lda z80_a
00061D  3               ;	eor z80_a
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 29.02.03 ld (sndv3), a 	; sound off.
00061D  3               ;	lda z80_a
00061D  3               ;	sta sndv3
00061D  3               ;
00061D  3               ;	; 29.03.02 ld a, (sndmix) 	; mixer byte.
00061D  3               ;	lda sndmix
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 36.05.xx or 36 	; mix bits off.
00061D  3               ;	lda z80_a
00061D  3               ;	ora #36
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 29.02.03 ld (sndmix), a 	; mixer setting for channel.
00061D  3               ;	lda z80_a
00061D  3               ;	sta sndmix
00061D  3               ;
00061D  3               ;	; 43.xx.xx rts  	
00061D  3               ;	rts
00061D  3               ;
00061D  3               ;cksnd1:
00061D  3               ;	; 29.04.02 ld hl, (ch1ptr) 	; pointer to sound.
00061D  3               ;	lda ch1ptr
00061D  3               ;	sta z80_l
00061D  3               ;	lda ch1ptr+1
00061D  3               ;	sta z80_h
00061D  3               ;
00061D  3               ;	; 29.03.01 ld a, (hl) 	; fetch mixer/flag.
00061D  3               ;	ldy #0
00061D  3               ;	lda (z80_hl),y
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 43.xx.xx rts  	
00061D  3               ;	rts
00061D  3               ;
00061D  3               ;cksnd2:
00061D  3               ;	; 29.04.02 ld hl, (ch2ptr) 	; pointer to sound.
00061D  3               ;	lda ch2ptr
00061D  3               ;	sta z80_l
00061D  3               ;	lda ch2ptr+1
00061D  3               ;	sta z80_h
00061D  3               ;
00061D  3               ;	; 29.03.01 ld a, (hl) 	; fetch mixer/flag.
00061D  3               ;	ldy #0
00061D  3               ;	lda (z80_hl),y
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 43.xx.xx rts  	
00061D  3               ;	rts
00061D  3               ;
00061D  3               ;cksnd3:
00061D  3               ;	; 29.04.02 ld hl, (ch3ptr) 	; pointer to sound.
00061D  3               ;	lda ch3ptr
00061D  3               ;	sta z80_l
00061D  3               ;	lda ch3ptr+1
00061D  3               ;	sta z80_h
00061D  3               ;
00061D  3               ;	; 29.03.01 ld a, (hl) 	; fetch mixer/flag.
00061D  3               ;	ldy #0
00061D  3               ;	lda (z80_hl),y
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 43.xx.xx rts  	
00061D  3               ;	rts
00061D  3               ;
00061D  3               ;plsnd1:
00061D  3               ;	; 04.00.xx call cksnd1 	; check sound for first channel.
00061D  3               ;	jsr cksnd1
00061D  3               ;
00061D  3               ;	; 06.05.xx cp 255 	; reached end?
00061D  3               ;	lda z80_a
00061D  3               ;	cmp #255
00061D  3               ;
00061D  3               ;	; 28.06.00 jr z, silen1 	; silence first channel.
00061D  3               ;	bne :+
00061D  3               ;	jmp silen1
00061D  3               ;:
00061D  3               ;	; 02.05.xx and 15 	; sound bits.
00061D  3               ;	lda z80_a
00061D  3               ;	and #15
00061D  3               ;
00061D  3               ;	; 29.02.03 ld (sndv1), a 	; set volume for channel.
00061D  3               ;	lda z80_a
00061D  3               ;	sta sndv1
00061D  3               ;
00061D  3               ;	; 29.03.02 ld a, (sndmix) 	; mixer byte.
00061D  3               ;	lda sndmix
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 02.05.xx and 246 	; remove bits for this channel.
00061D  3               ;	lda z80_a
00061D  3               ;	and #246
00061D  3               ;
00061D  3               ;	; 29.03.03 ld b, a 	; store in b register.
00061D  3               ;	lda z80_a
00061D  3               ;	sta z80_b
00061D  3               ;
00061D  3               ;	; 04.00.xx call plmix 	; fetch mixer details.
00061D  3               ;	jsr plmix
00061D  3               ;
00061D  3               ;	; 02.05.xx and 9 	; mixer bits we want.
00061D  3               ;	lda z80_a
00061D  3               ;	and #9
00061D  3               ;
00061D  3               ;	; 36.03.xx or b 	; combine with mixer bits.
00061D  3               ;	lda z80_a
00061D  3               ;	ora z80_a
00061D  3               ;	sta z80_a
00061D  3               ;
00061D  3               ;	; 29.02.03 ld (sndmix), a 	; new mixer value.
00061D  3               ;	lda z80_a
00061D  3               ;	sta sndmix
00061D  3               ;
00061D  3               ;	; 04.00.xx call plwn 	; white noise check.
00061D  3               ;	jsr plwn
00061D  3               ;
00061D  3               ;	; 22.04.xx inc hl 	; tone low.
00061D  3               ;	inc z80_l
00061D  3               ;	bne :+
00061D  3               ;	inc z80_h
00061D  3               ;:
00061D  3               ;	; 29.03.01 ld e, (hl) 	; fetch value.
00061D  3               ;	ldy #0
00061D  3               ;	lda (z80_hl),y
00061D  3               ;	sta z80_e
00061D  3               ;
00061D  3               ;	; 22.04.xx inc hl 	; tone high.
00061D  3               ;	inc z80_l
00061D  3               ;	bne :+
00061D  3               ;	inc z80_h
00061D  3               ;:
00061D  3               ;	; 29.03.01 ld d, (hl) 	; fetch value.
00061D  3               ;	ldy #0
00061D  3               ;	lda (z80_hl),y
00061D  3               ;	sta z80_d
00061D  3               ;
00061D  3               ;	; 29.02.04 ld (snddat), de 	; set tone.
00061D  3               ;	lda z80_e
00061D  3               ;	sta snddat
00061D  3               ;	lda z80_d
00061D  3               ;	sta snddat+1
00061D  3               ;
00061D  3               ;	; 22.04.xx inc hl 	; next bit of sound.
00061D  3               ;	inc z80_l
00061D  3               ;	bne :+
00061D  3               ;	inc z80_h
00061D  3               ;:
00061D  3               ;	; 29.02.04 ld (ch1ptr), hl 	; set pointer.
00061D  3               ;	lda z80_l
00061D  3               ;	sta ch1ptr
00061D  3               ;	lda z80_h
00061D  3               ;	sta ch1ptr+1
00061D  3               ;
00061D  3               ;	; 43.xx.xx rts  	
00061D  3               ;	rts
00061D  3               ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
00061D  3               
00061D  3               
00061D  3               ;---------------------------------------------------
00061D  3               ; Objects handling.
00061D  3               ; 32 bytes for image
00061D  3               ; 3 for room, y and x
00061D  3               ; 3 for starting room, y and x.
00061D  3               ; 254 = disabled.
00061D  3               ; 255 = object in player"s pockets.
00061D  3               ;---------------------------------------------------
00061D  3               
00061D  3               ;---------------------------------------------------
00061D  3               ; Show items present.
00061D  3               ;---------------------------------------------------
00061D  3               
00061D  3               shwob:
00061D  3  A9 1C        	lda #<objdta 			; objects table.
00061F  3  85 66        	sta z80_l
000621  3  A9 63        	lda #>objdta
000623  3  85 67        	sta z80_h
000625  3               
000625  3  AD 3A 02     	lda numob 			; number of objects in the game.
000628  3  8D 06 12     	sta sprcnt
00062B  3               shwob0:
00062B  3  A0 20        	ldy #32 			; distance to room number.
00062D  3  B1 66        	lda (z80_hl),y 			; same as an item?
00062F  3  CD 3F 02     	cmp scno 			; current location.
000632  3  D0 03        	bne :+
000634  3  20 4A 06     	jsr dobj 			; yes, display object.
000637  3               :
000637  3  18           	clc
000638  3  A5 66        	lda z80_l
00063A  3  69 26        	adc #38 			; distance to next item.
00063C  3  85 66        	sta z80_l
00063E  3  A5 67        	lda z80_h
000640  3  69 00        	adc #0
000642  3  85 67        	sta z80_h	 		; point to it.
000644  3  CE 06 12     	dec sprcnt
000647  3  D0 E2        	bne shwob0 			; repeat for others.
000649  3  60           	rts
00064A  3               
00064A  3               ;---------------------------------------------------
00064A  3               ; Display object.
00064A  3               ; hl must point to object's start address.
00064A  3               ;
00064A  3               ; Input:
00064A  3               ;  HL = object address
00064A  3               ;---------------------------------------------------
00064A  3               
00064A  3               dobj:
00064A  3  A0 21        	ldy #33
00064C  3  B1 66        	lda (z80_hl),y 			; point to y.
00064E  3  8D 65 02     	sta dispy
000651  3  C8           	iny
000652  3  B1 66        	lda (z80_hl),y 			; point to x.
000654  3  8D 64 02     	sta dispx
000657  3               dobj1:
000657  3  4C A1 0A     	jmp sprite 			; draw this sprite.
00065A  3               
00065A  3               
00065A  3               ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
00065A  3               ; Colour an object/sprite at dispx, dispy.
00065A  3               ; set up colour in c register first.
00065A  3               
00065A  3               cobj:
00065A  3               	; 41.04.xx push hl 	; store sprite graphic address.
00065A  3  A5 67        	lda z80_h
00065C  3  48           	pha
00065D  3  A5 66        	lda z80_l
00065F  3  48           	pha
000660  3               
000660  3               	; 04.00.xx call scadd 	; get screen address in hl.
000660  3  20 78 12     	jsr scadd
000663  3               
000663  3               	; 59.05.03 set 5, h 	; switch to attribute screen.
000663  3  A5 67        	lda z80_h
000665  3  09 20        	ora #_bitvalue5
000667  3  85 67        	sta z80_h
000669  3               
000669  3               	; 29.03.05 ld d, 3 	; default columns to write.
000669  3  A9 03        	lda #3; default columns to write.
00066B  3  85 65        	sta z80_d
00066D  3               
00066D  3               	; 29.03.02 ld a, (dispy) 	; y position.
00066D  3  AD 65 02     	lda dispy
000670  3  85 61        	sta z80_a
000672  3               
000672  3               	; 02.05.xx and 7 	; does y straddle cells?
000672  3  A5 61        	lda z80_a
000674  3  29 07        	and #7
000676  3               
000676  3               	; 28.06.00 jr nz, cobj0 	; yes, loop counter is good.
000676  3  F0 03        	beq :+
000678  3  4C 7D 06     	jmp cobj0
00067B  3               :
00067B  3               	; 13.03.xx dec d 	; one less column to write.
00067B  3  C6 65        	dec z80_d
00067D  3               
00067D  3               cobj0:
00067D  3               	; 29.03.05 ld b, 16 	; rows to write.
00067D  3  A9 10        	lda #16; rows to write.
00067F  3  85 63        	sta z80_b
000681  3               
000681  3               cobj2:
000681  3               	; 41.04.xx push bc 	; store row counter.
000681  3  A5 63        	lda z80_b
000683  3  48           	pha
000684  3  A5 62        	lda z80_c
000686  3  48           	pha
000687  3               
000687  3               	; 29.03.03 ld b, d 	; column counter.
000687  3  A5 65        	lda z80_d
000689  3  85 63        	sta z80_b
00068B  3               
00068B  3               	; 41.04.xx push hl 	; store address.
00068B  3  A5 67        	lda z80_h
00068D  3  48           	pha
00068E  3  A5 66        	lda z80_l
000690  3  48           	pha
000691  3               
000691  3               cobj1:
000691  3               	; 29.01.03 ld (hl), c 	; write attribute.
000691  3  A5 62        	lda z80_c
000693  3  A0 00        	ldy #0
000695  3  91 66        	sta (z80_hl),y
000697  3               
000697  3               	; 22.04.xx inc hl 	; next cell.
000697  3  E6 66        	inc z80_l
000699  3  D0 02        	bne :+
00069B  3  E6 67        	inc z80_h
00069D  3               :
00069D  3               	; 15.00.xx djnz cobj1 	; repeat for columns.
00069D  3  C6 63        	dec z80_b
00069F  3  F0 03        	beq :+
0006A1  3  4C 91 06     	jmp cobj1
0006A4  3               :
0006A4  3               	; 40.04.xx pop hl 	; restore attribute address.
0006A4  3  68           	pla
0006A5  3  85 66        	sta z80_l
0006A7  3  68           	pla
0006A8  3  85 67        	sta z80_h
0006AA  3               
0006AA  3               	; 04.00.xx call nattr 	; next attribute address in hl.
0006AA  3  20 0D 13     	jsr nattr
0006AD  3               
0006AD  3               	; 40.04.xx pop bc 	; restore row counter.
0006AD  3  68           	pla
0006AE  3  85 62        	sta z80_c
0006B0  3  68           	pla
0006B1  3  85 63        	sta z80_b
0006B3  3               
0006B3  3               	; 15.00.xx djnz cobj2 	; repeat for all rows.
0006B3  3  C6 63        	dec z80_b
0006B5  3  F0 03        	beq :+
0006B7  3  4C 81 06     	jmp cobj2
0006BA  3               :
0006BA  3               	; 40.04.xx pop hl 	
0006BA  3  68           	pla
0006BB  3  85 66        	sta z80_l
0006BD  3  68           	pla
0006BE  3  85 67        	sta z80_h
0006C0  3               
0006C0  3               	; 43.xx.xx rts  	
0006C0  3  60           	rts
0006C1  3               ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
0006C1  3               
0006C1  3               
0006C1  3               ;--------------------------------------
0006C1  3               ; Remove an object.
0006C1  3               ;
0006C1  3               ; Input:
0006C1  3               ;  A = object number
0006C1  3               ;--------------------------------------
0006C1  3               
0006C1  3               remob:
0006C1  3  CD 3A 02     	cmp numob			; number of objects in game.
0006C4  3  90 01        	bcc :+				; are we checking past the end?
0006C6  3  60           	rts				; yes, can't get non-existent item.
0006C7  3               :
0006C7  3  48           	pha				; remember object.
0006C8  3  20 D6 06     	jsr getob			; pick it up if we haven't already got it.
0006CB  3  68           	pla				; retrieve object number.
0006CC  3  20 08 07     	jsr gotob			; get its address.
0006CF  3  A9 FE        	lda #254
0006D1  3  A0 20        	ldy #32
0006D3  3  91 66        	sta (z80_hl),y			; remove it.
0006D5  3  60           	rts
0006D6  3               
0006D6  3               ;---------------------------------------------------
0006D6  3               ; Pick up object number held in the accumulator.
0006D6  3               ;
0006D6  3               ; Input:
0006D6  3               ;  A = object number
0006D6  3               ;---------------------------------------------------
0006D6  3               
0006D6  3               getob:
0006D6  3  CD 3A 02     	cmp numob 		; number of objects in game.
0006D9  3  90 01        	bcc :+			; are we checking past the end?
0006DB  3  60           	rts			; yes, can't get non-existent item.
0006DC  3               :
0006DC  3  20 08 07     	jsr gotob 		; check if we already have it.
0006DF  3  C9 FF        	cmp #255
0006E1  3  D0 01        	bne :+
0006E3  3  60           	rts			; we already do.
0006E4  3               :
0006E4  3  A0 20        	ldy #32
0006E6  3  B1 66        	lda (z80_hl),y		; is it on this screen?
0006E8  3  CD 3F 02     	cmp scno 		; current screen.
0006EB  3  D0 16        	bne getob0		; not on screen, so nothing to delete.
0006ED  3               
0006ED  3  A9 FF        	lda #255
0006EF  3  91 66        	sta (z80_hl),y		; pick it up.
0006F1  3  C8           	iny 			; point to y coord.
0006F2  3               getob1:
0006F2  3  A0 21        	ldy #33
0006F4  3  B1 66        	lda (z80_hl),y		; y coord.
0006F6  3  8D 65 02     	sta dispy
0006F9  3  A0 22        	ldy #34
0006FB  3  B1 66        	lda (z80_hl),y 		; x coord.
0006FD  3  8D 64 02     	sta dispx
000700  3  4C 57 06     	jmp dobj1 		; delete object sprite.
000703  3               getob0:
000703  3  A9 FF        	lda #255
000705  3  91 66        	sta (z80_hl),y 		; pick it up.
000707  3  60           	rts
000708  3               
000708  3               ;-----------------------------------------------------------------
000708  3               ; Got object check.
000708  3               ; Call with object in accumulator, returns zero set if in pockets.
000708  3               ;
000708  3               ; Input:
000708  3               ;  A = object number
000708  3               ;-----------------------------------------------------------------
000708  3               
000708  3               gotob:
000708  3  CD 3A 02     	cmp numob 		; number of objects in game.
00070B  3  90 03        	bcc :+ 			; are we checking past the end?
00070D  3  4C 14 07     	jmp gotob0 		; yes, we can't have a non-existent object.
000710  3               :
000710  3  20 19 07     	jsr findob		; find the object.
000713  3               gotob1:
000713  3  60           	rts
000714  3               
000714  3               gotob0:
000714  3  A9 FE        	lda #254 		; missing.
000716  3  4C 13 07     	jmp gotob1
000719  3               
000719  3               findob:
000719  3  48           	pha			; save object number
00071A  3  A9 1C        	lda #<objdta 		; objects.
00071C  3  85 66        	sta z80_l
00071E  3  A9 63        	lda #>objdta
000720  3  85 67        	sta z80_h
000722  3  68           	pla			; retreive object number
000723  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
000725  3  AA           	tax 			; loop counter
000726  3               fndob2:
000726  3  18           	clc
000727  3  A5 66        	lda z80_l
000729  3  69 26        	adc #38 		; size of each object.
00072B  3  85 66        	sta z80_l
00072D  3  90 02        	bcc :+
00072F  3  E6 67        	inc z80_h
000731  3               :
000731  3  CA           	dex 			; repeat until we find address.
000732  3  D0 F2        	bne fndob2
000734  3               fndob1:
000734  3  A0 20        	ldy #32			; distance to room it's in.
000736  3  B1 66        	lda (z80_hl),y		; fetch status.
000738  3  60           	rts
000739  3               
000739  3               ;---------------------------------------------
000739  3               ; Drop object number at (dispx, dispy).
000739  3               ;
000739  3               ; Input:
000739  3               ;  A = object number
000739  3               ;---------------------------------------------
000739  3               
000739  3               drpob:
000739  3  CD 3A 02     	cmp numob 		; are we checking past the end?
00073C  3  90 01        	bcc :+
00073E  3  60           	rts			; yes, can't drop non-existent item.
00073F  3               :
00073F  3  20 08 07     	jsr gotob		; make sure object is in inventory.
000742  3  CD 3F 02     	cmp scno		; already on this screen?
000745  3  D0 01        	bne :+
000747  3  60           	rts			; yes, nothing to do.
000748  3               :
000748  3  A0 20        	ldy #32
00074A  3  AD 3F 02     	lda scno
00074D  3  91 66        	sta (z80_hl),y		; bring onto screen.
00074F  3  AD 65 02     	lda dispy		; sprite y coordinate.
000752  3  C8           	iny 
000753  3  91 66        	sta (z80_hl),y		; point to object y.
000755  3  AD 64 02     	lda dispx 		; sprite x coordinate.
000758  3  C8           	iny
000759  3  91 66        	sta (z80_hl),y 		; point to object x
00075B  3  4C 4A 06     	jmp dobj		; draw the object sprite.
00075E  3               
00075E  3               ;-----------------------------------------------
00075E  3               ; Seek objects at sprite position.
00075E  3               ;
00075E  3               ; Output:
00075E  3               ;  A = object number, if not found A=255
00075E  3               ;-----------------------------------------------
00075E  3               
00075E  3               skobj:
00075E  3  A9 1C        	lda #<objdta 		; pointer to objects.
000760  3  85 66        	sta z80_l
000762  3  A9 63        	lda #>objdta
000764  3  85 67        	sta z80_h
000766  3               
000766  3  AD 3A 02     	lda numob 		; number of objects in game.
000769  3  85 63        	sta z80_b 		; set up the loop counter.
00076B  3               skobj0:
00076B  3  AD 3F 02     	lda scno		; current room number.
00076E  3  A0 20        	ldy #32
000770  3  D1 66        	cmp (z80_hl),y		; is object in here?
000772  3  D0 03        	bne :+
000774  3  20 89 07     	jsr skobj1		; yes, check coordinates.
000777  3               :
000777  3  18           	clc			; point to next object in table.
000778  3  A5 66        	lda z80_l
00077A  3  69 26        	adc #38			; size of each object.
00077C  3  85 66        	sta z80_l
00077E  3  90 02        	bcc :+
000780  3  E6 67        	inc z80_h
000782  3               :
000782  3  C6 63        	dec z80_b
000784  3  D0 E5        	bne skobj0		; repeat for all objects.
000786  3               
000786  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
000788  3  60           	rts
000789  3               
000789  3               skobj1:
000789  3  A0 21        	ldy #33			; point to y coordinate.
00078B  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
00078D  3  38           	sec
00078E  3  A0 08        	ldy #8
000790  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
000792  3  18           	clc
000793  3  69 0F        	adc #15			; add sprite height minus one.
000795  3  C9 1F        	cmp #31			; within range?
000797  3  90 03        	bcc :+
000799  3  4C B7 07     	jmp skobj2		; no, ignore object.
00079C  3               :
00079C  3  A0 22        	ldy #34			; point to x coordinate now.
00079E  3  B1 66        	lda (z80_hl),y 		; get coordinate.
0007A0  3  38           	sec
0007A1  3  A0 09        	ldy #9
0007A3  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
0007A5  3  18           	clc			; add sprite width minus one.
0007A6  3  69 0F        	adc #15
0007A8  3  C9 1F        	cmp #31			; within range?
0007AA  3  90 03        	bcc :+
0007AC  3  4C B7 07     	jmp skobj2		; no, ignore object.
0007AF  3               :
0007AF  3  68           	pla			; remove return address from stack.
0007B0  3  68           	pla
0007B1  3               
0007B1  3  AD 3A 02     	lda numob 		; objects in game.
0007B4  3  38           	sec
0007B5  3  E5 63        	sbc z80_b		; subtract loop counter.
0007B7  3               skobj2:
0007B7  3  60           	rts			; accumulator now points to object.
0007B8  3               
0007B8  3               
0007B8  3               ;---------------------------------------------------------------------
0007B8  3               ; Spawn a new sprite.
0007B8  3               ;---------------------------------------------------------------------
0007B8  3               
0007B8  3               spawn:
0007B8  3  A9 A6        	lda #<sprtab		; sprite table.
0007BA  3  85 66        	sta z80_l
0007BC  3  A9 17        	lda #>sprtab
0007BE  3  85 67        	sta z80_h
0007C0  3               numsp1:
0007C0  3  A9 0C        	lda #NUMSPR		; number of sprites.
0007C2  3  8D 59 08     	sta spcnt
0007C5  3               spaw0:
0007C5  3  A0 00        	ldy #0
0007C7  3  B1 66        	lda (z80_hl),y		; get sprite type.
0007C9  3  C9 FF        	cmp #255		; is it an unused slot?
0007CB  3  F0 10        	beq spaw1 		; yes, we can use this one.
0007CD  3               
0007CD  3  18           	clc 			; point to next sprite in table.
0007CE  3  A5 66        	lda z80_l
0007D0  3  69 11        	adc #TABSIZ		; size of each entry.
0007D2  3  85 66        	sta z80_l
0007D4  3  90 02        	bcc :+
0007D6  3  E6 67        	inc z80_h
0007D8  3               :
0007D8  3  CE 59 08     	dec spcnt		; one less iteration.
0007DB  3  D0 E8        	bne spaw0		; keep going until we find a slot.
0007DD  3               
0007DD  3               ; Didn't find one but drop through and set up a dummy sprite instead.
0007DD  3               
0007DD  3               spaw1:
0007DD  3  A5 69        	lda z80_i		; address of original sprite.
0007DF  3  48           	pha
0007E0  3  A5 68        	lda z80_x
0007E2  3  48           	pha
0007E3  3               
0007E3  3  A5 66        	lda z80_l		; store spawned sprite address.
0007E5  3  8D 5A 08     	sta spptr
0007E8  3  A5 67        	lda z80_h
0007EA  3  8D 5B 08     	sta spptr+1
0007ED  3               
0007ED  3  A5 62        	lda z80_c
0007EF  3  A0 00        	ldy #0
0007F1  3  91 66        	sta (z80_hl),y 		; set the type.
0007F3  3  A0 05        	ldy #5
0007F5  3  91 66        	sta (z80_hl),y		; copy
0007F7  3               
0007F7  3  A5 63        	lda z80_b
0007F9  3  A0 01        	ldy #1
0007FB  3  91 66        	sta (z80_hl),y		; set the image.
0007FD  3  A0 06        	ldy #6
0007FF  3  91 66        	sta (z80_hl),y		; copy
000801  3               
000801  3  A9 00        	lda #0 			; frame zero.
000803  3  A0 02        	ldy #2
000805  3  91 66        	sta (z80_hl),y		; set frame.
000807  3  A0 07        	ldy #7
000809  3  91 66        	sta (z80_hl),y		; copy
00080B  3               
00080B  3  A0 08        	ldy #8
00080D  3  B1 68        	lda (z80_ix),y 		; x coordinate.
00080F  3  A0 03        	ldy #3
000811  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
000813  3  A0 08        	ldy #8
000815  3  91 66        	sta (z80_hl),y		; copy
000817  3               
000817  3  A0 09        	ldy #9
000819  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00081B  3  A0 04        	ldy #4
00081D  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
00081F  3  A0 09        	ldy #9
000821  3  91 66        	sta (z80_hl),y		; copy
000823  3               
000823  3  A0 0A        	ldy #10			; direction of original.
000825  3  B1 68        	lda (z80_ix),y
000827  3  91 66        	sta (z80_hl),y		; direction
000829  3               
000829  3  A9 00        	lda #0
00082B  3  A0 0B        	ldy #11
00082D  3  91 66        	sta (z80_hl),y		; reset parameter.
00082F  3  C8           	iny
000830  3  91 66        	sta (z80_hl),y		; reset parameter.
000832  3  C8           	iny
000833  3  91 66        	sta (z80_hl),y		; reset parameter.
000835  3  C8           	iny
000836  3  91 66        	sta (z80_hl),y		; reset parameter.
000838  3               rtssp:
000838  3  AD 5A 08     	lda spptr		; address of new sprite.
00083B  3  85 68        	sta z80_x
00083D  3  AD 5B 08     	lda spptr+1
000840  3  85 69        	sta z80_i
000842  3               evis1:
000842  3  20 61 22     	jsr evnt09 		; call sprite initialisation event.
000845  3               
000845  3  AD 5A 08     	lda spptr 		; address of new sprite.
000848  3  85 68        	sta z80_x
00084A  3  AD 5B 08     	lda spptr+1
00084D  3  85 69        	sta z80_i
00084F  3  20 9B 12     	jsr sspria 		; display the new sprite.
000852  3               
000852  3  68           	pla			; address of original sprite.
000853  3  85 68        	sta z80_x
000855  3  68           	pla
000856  3  85 69        	sta z80_i
000858  3               
000858  3  60           	rts
000859  3               
000859  3  00           spcnt:	.byte 0
00085A  3  00 00        spptr:	.word 0			; spawned sprite pointer.
00085C  3  00           seed:	.byte 0			; seed for random numbers.
00085D  3  30 30 30 30  score:	.byte "000000"		; player"s score.
000861  3  30 30        
000863  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
000867  3  30 30        
000869  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
00086D  3  30 30        
00086F  3  00 3C        grbase:	.word 15360		; graphics base address.
000871  3               
000871  3               ;----------------------------------------------------
000871  3               ; Check y-pos
000871  3               ;----------------------------------------------------
000871  3               
000871  3               checkx:
000871  3  AD 65 02     	lda dispy		; y position.
000874  3  C9 18        	cmp #24			; off screen?
000876  3  B0 01        	bcs :+
000878  3  60           	rts			; no, it's okay.
000879  3               :
000879  3  68           	pla					; remove return address from stack.
00087A  3  85 66        	sta z80_l
00087C  3  68           	pla
00087D  3  85 67        	sta z80_h
00087F  3  60           	rts
000880  3               
000880  3               ;-----------------------------------------------
000880  3               ; Displays the current high score.
000880  3               ;-----------------------------------------------
000880  3               
000880  3               dhisc:
000880  3  A9 63        	lda #<hiscor 		; high score text.
000882  3  85 66        	sta z80_l
000884  3  A9 08        	lda #>hiscor
000886  3  85 67        	sta z80_h
000888  3  4C 93 08     	jmp dscor1		; check in printable range then show 6 digits.
00088B  3               
00088B  3               ;------------------------------------------------------
00088B  3               ; Displays the current score.
00088B  3               ;------------------------------------------------------
00088B  3               
00088B  3               dscor:
00088B  3  A9 5D        	lda #<score		; score text.
00088D  3  85 66        	sta z80_l
00088F  3  A9 08        	lda #>score
000891  3  85 67        	sta z80_h
000893  3               dscor1:
000893  3  20 29 10     	jsr preprt		; set up font and print position.
000896  3  20 71 08     	jsr checkx		; make sure we're in a printable range.
000899  3               
000899  3  A9 06        	lda #6			; digits to display.
00089B  3  85 63        	sta z80_b
00089D  3  AD 6B 0F     	lda prtmod		; get print mode.
0008A0  3  F0 03        	beq :+			; standard size text?
0008A2  3  4C C6 08     	jmp bscor0		; no, show double-height.
0008A5  3               :
0008A5  3               dscor0:
0008A5  3  A0 00        	ldy #0
0008A7  3  B1 66        	lda (z80_hl),y 		; fetch character.
0008A9  3  20 F1 09     	jsr pchar 		; display character.
0008AC  3  EE 64 02     	inc dispx		; move along x coordinate
0008AF  3               
0008AF  3  E6 66        	inc z80_l		; next score column.
0008B1  3  D0 02        	bne :+
0008B3  3  E6 67        	inc z80_h
0008B5  3               :
0008B5  3  C6 63        	dec z80_b
0008B7  3  D0 EC        	bne dscor0 		; repeat for all digits.
0008B9  3               dscor2:
0008B9  3  AD 64 02     	lda dispx 		; set up display coordinates.
0008BC  3  8D 59 02     	sta charx
0008BF  3  AD 65 02     	lda dispy
0008C2  3  8D 5A 02     	sta chary
0008C5  3  60           	rts
0008C6  3               
0008C6  3               ;------------------------------------------------------
0008C6  3               ; Displays the current score in double-height characters.
0008C6  3               ;
0008C6  3               ; Input:
0008C6  3               ;  B  = digit number
0008C6  3               ;  HL = score string
0008C6  3               ;------------------------------------------------------
0008C6  3               
0008C6  3               bscor0:
0008C6  3  A0 00        	ldy #0
0008C8  3               
0008C8  3  B1 66        	lda (z80_hl),y 		; fetch character.
0008CA  3  20 A3 0F     	jsr bchar 		; display big char.
0008CD  3               
0008CD  3  E6 66        	inc z80_l 		; next score column.
0008CF  3  D0 02        	bne :+
0008D1  3  E6 67        	inc z80_h
0008D3  3               :
0008D3  3  C6 63        	dec z80_b
0008D5  3  F0 03        	beq :+
0008D7  3  4C C6 08     	jmp bscor0 		; repeat for all digits.
0008DA  3               :
0008DA  3  4C B9 08     	jmp dscor2 		; tidy up line and column variables.
0008DD  3               
0008DD  3               ;-----------------------------------------------------
0008DD  3               ; Adds number in the hl pair to the score.
0008DD  3               ;-----------------------------------------------------
0008DD  3               
0008DD  3               addsc:
0008DD  3  A9 5E        	lda #<(score+1) 	; ten thousands column.
0008DF  3  85 64        	sta z80_e
0008E1  3  A9 08        	lda #>(score+1)
0008E3  3  85 65        	sta z80_d
0008E5  3  A9 10        	lda #<10000		; amount to add each time.
0008E7  3  85 62        	sta z80_c
0008E9  3  A9 27        	lda #>10000
0008EB  3  85 63        	sta z80_b
0008ED  3  20 31 09     	jsr incsc		; add to score.
0008F0  3               
0008F0  3  E6 64        	inc z80_e		; thousands column.
0008F2  3  D0 02        	bne :+
0008F4  3  E6 65        	inc z80_d
0008F6  3               :
0008F6  3  A9 E8        	lda #<1000		; amount to add each time.
0008F8  3  85 62        	sta z80_c
0008FA  3  A9 03        	lda #>1000
0008FC  3  85 63        	sta z80_b
0008FE  3  20 31 09     	jsr incsc 		; add to score.
000901  3               
000901  3  E6 64        	inc z80_e		; hundreds column.
000903  3  D0 02        	bne :+
000905  3  E6 65        	inc z80_d
000907  3               :
000907  3  A9 64        	lda #<100		; amount to add each time.
000909  3  85 62        	sta z80_c
00090B  3  A9 00        	lda #>100
00090D  3  85 63        	sta z80_b
00090F  3  20 31 09     	jsr incsc		; add to score.
000912  3               
000912  3  E6 64        	inc z80_e 		; tens column.
000914  3  D0 02        	bne :+
000916  3  E6 65        	inc z80_d
000918  3               :
000918  3  A9 0A        	lda #<10		; amount to add each time.
00091A  3  85 62        	sta z80_c
00091C  3  A9 00        	lda #>10
00091E  3  85 63        	sta z80_b
000920  3  20 31 09     	jsr incsc 		; add to score.
000923  3               
000923  3  E6 64        	inc z80_e		; units column.
000925  3  D0 02        	bne :+
000927  3  E6 65        	inc z80_d
000929  3               :
000929  3  A9 01        	lda #<1			; units.
00092B  3  85 62        	sta z80_c
00092D  3  A9 00        	lda #>1
00092F  3  85 63        	sta z80_b
000931  3               incsc:
000931  3  A5 67        	lda z80_h		; store amount to add.
000933  3  48           	pha
000934  3  A5 66        	lda z80_l
000936  3  48           	pha
000937  3               
000937  3  38           	sec			; subtract from amount to add.
000938  3  A5 66        	lda z80_l
00093A  3  E5 62        	sbc z80_c
00093C  3  85 66        	sta z80_l
00093E  3  A5 67        	lda z80_h
000940  3  E5 63        	sbc z80_b
000942  3  85 67        	sta z80_h
000944  3  90 14        	bcc incsc0		; too much, restore value.
000946  3               
000946  3  68           	pla			; delete the previous amount from the stack.
000947  3  68           	pla
000948  3               
000948  3  A5 65        	lda z80_d 		; store column position.
00094A  3  48           	pha
00094B  3  A5 64        	lda z80_e
00094D  3  48           	pha
00094E  3  20 61 09     	jsr incsc2		; do the increment.
000951  3               
000951  3  68           	pla			; restore column.
000952  3  85 64        	sta z80_e
000954  3  68           	pla
000955  3  85 65        	sta z80_d
000957  3  4C 31 09     	jmp incsc		; repeat until all added.
00095A  3               
00095A  3               incsc0:
00095A  3  68           	pla			; restore previous value.
00095B  3  85 66        	sta z80_l
00095D  3  68           	pla
00095E  3  85 67        	sta z80_h
000960  3  60           	rts
000961  3               incsc2:
000961  3  A0 00        	ldy #0
000963  3  B1 64        	lda (z80_de),y 		; get amount.
000965  3  18           	clc
000966  3  69 01        	adc #1			; add one to column.
000968  3  91 64        	sta (z80_de),y		; write new column total.
00096A  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
00096C  3  B0 01        	bcs :+
00096E  3  60           	rts			; no, carry on.
00096F  3               :
00096F  3  A9 30        	lda #'0'		; make it zero.
000971  3  91 64        	sta (z80_de),y		; write new column total.
000973  3  C6 64        	dec z80_e		; back one column.
000975  3  D0 02        	bne :+
000977  3  C6 65        	dec z80_d
000979  3               :
000979  3  4C 61 09     	jmp incsc2
00097C  3               
00097C  3               ;------------------------------------
00097C  3               ; Add bonus to score and reset bonus
00097C  3               ; NEEDS TO BE TESTED!!!!!!!!!!!!!!!!!
00097C  3               ;------------------------------------
00097C  3               
00097C  3               addbo:
00097C  3  A2 05        	ldx #5			; last digit.
00097E  3  18           	clc			; clear carry.
00097F  3               addbo0:
00097F  3  BD 5D 08     	lda score,x		; get score.
000982  3  7D 69 08     	adc bonus,x		; add bonus.
000985  3  38           	sec			; 0 to 18.
000986  3  E9 30        	sbc #48
000988  3  48           	pha
000989  3  A9 30        	lda #'0'
00098B  3  9D 69 08     	sta bonus,x		; zeroise bonus.
00098E  3  68           	pla
00098F  3  C9 3A        	cmp #58			; carried?
000991  3  B0 07        	bcs addbo2		; no, do next one.
000993  3  38           	sec
000994  3  E9 0A        	sbc #10			; subtract 10.
000996  3  38           	sec
000997  3  4C 9B 09     	jmp addbo1
00099A  3               addbo2:
00099A  3  18           	clc
00099B  3               addbo1:
00099B  3  9D 5D 08     	sta score,x		; write new score.
00099E  3  CA           	dex			; next digit.
00099F  3  10 DE        	bpl addbo0		; repeat for all 6 digits.
0009A1  3  60           	rts
0009A2  3               
0009A2  3               ;------------------------------------
0009A2  3               ; Swap score and bonus.
0009A2  3               ;------------------------------------
0009A2  3               
0009A2  3               swpsb:
0009A2  3  A2 05        	ldx #5			; digits to add.
0009A4  3               swpsb0:
0009A4  3  BD 5D 08     	lda score,x 		; get score digits.
0009A7  3  48           	pha			; save digit
0009A8  3  BD 69 08     	lda bonus,x 		; get bonus digits.
0009AB  3  9D 5D 08     	sta score,x		; switch score-bonus
0009AE  3  68           	pla
0009AF  3  9D 69 08     	sta bonus,x
0009B2  3  CA           	dex 			; repeat for all 6 digits.
0009B3  3  10 EF        	bpl swpsb0
0009B5  3  60           	rts
0009B6  3               
0009B6  3               ;----------------------------------------------------
0009B6  3               ; Get print address.
0009B6  3               ;----------------------------------------------------
0009B6  3               
0009B6  3               gprad:
0009B6  3  AD 64 02     	lda dispx		; get x
0009B9  3  85 80        	sta scraddr		; store lb address
0009BB  3  AD 65 02     	lda dispy		; get y
0009BE  3  09 80        	ora #$80		; add $80
0009C0  3  85 81        	sta scraddr+1		; store hb address
0009C2  3  60           	rts
0009C3  3               
0009C3  3               ;--------------------------------------------------------------
0009C3  3               ; Get property buffer address of char at (dispx, dispy) in hl.
0009C3  3               ; 
0009C3  3               ; Output:
0009C3  3               ;  buffaddr = bufaddr = MAP + dispy*32 + dispx
0009C3  3               ;--------------------------------------------------------------
0009C3  3               
0009C3  3               pradd:
0009C3  3  AD 65 02     	lda dispy 		; y coordinate.
0009C6  3  85 86        	sta bufaddr
0009C8  3  A9 00        	lda #0
0009CA  3  85 87        	sta bufaddr+1
0009CC  3  06 86        	asl bufaddr  		; multiply char by 32
0009CE  3  26 87        	rol bufaddr+1
0009D0  3  06 86        	asl bufaddr
0009D2  3  26 87        	rol bufaddr+1
0009D4  3  06 86        	asl bufaddr
0009D6  3  26 87        	rol bufaddr+1
0009D8  3  06 86        	asl bufaddr
0009DA  3  26 87        	rol bufaddr+1
0009DC  3  06 86        	asl bufaddr
0009DE  3  26 87        	rol bufaddr+1
0009E0  3  18           	clc			; add address of MAP graphics.
0009E1  3  A5 86        	lda bufaddr
0009E3  3  6D 64 02     	adc dispx
0009E6  3  69 00        	adc #<MAP
0009E8  3  85 86        	sta bufaddr
0009EA  3  A5 87        	lda bufaddr+1
0009EC  3  69 9A        	adc #>MAP
0009EE  3  85 87        	sta bufaddr+1
0009F0  3  60           	rts
0009F1  3               
0009F1  3               ;----------------------------------------------------
0009F1  3               ; Display character in A at dispx,dispy.
0009F1  3               ;
0009F1  3               ; Input:
0009F1  3               ;  A 	   = character to print
0009F1  3               ;----------------------------------------------------
0009F1  3               
0009F1  3               pchar:
0009F1  3  85 82        	sta fntaddr
0009F3  3  A9 00        	lda #0
0009F5  3  85 83        	sta fntaddr+1
0009F7  3  06 82        	asl fntaddr  		; multiply char by 8.
0009F9  3  26 83        	rol fntaddr+1
0009FB  3  06 82        	asl fntaddr
0009FD  3  26 83        	rol fntaddr+1
0009FF  3  06 82        	asl fntaddr
000A01  3  26 83        	rol fntaddr+1
000A03  3               
000A03  3  A5 82        	lda fntaddr
000A05  3  18           	clc
000A06  3  6D 85 18     	adc FontPtr
000A09  3  85 82        	sta fntaddr		; that's the low byte.
000A0B  3  A5 83        	lda fntaddr+1
000A0D  3  6D 86 18     	adc FontPtr+1
000A10  3  85 83        	sta fntaddr+1		; add displacement.
000A12  3               pchark:
000A12  3  20 B6 09     	jsr gprad		; get screen address.
000A15  3  A2 07        	ldx #7			; lines to write.
000A17  3               pchar0:
000A17  3  A0 00        	ldy #0
000A19  3  B1 82        	lda (fntaddr),y 	; get image byte.
000A1B  3  BC 2C 0A     	ldy scrtab,x		; Get rowoffset
000A1E  3               
000A1E  3  49 00        	eor #TxtInvert		; Invert
000A20  3               
000A20  3  91 80        	sta (scraddr),y 	; copy to screen.
000A22  3  E6 82        	inc fntaddr		; next image byte.
000A24  3  D0 02        	bne :+
000A26  3  E6 83        	inc fntaddr+1
000A28  3               :
000A28  3  CA           	dex			; next screen row down.
000A29  3  10 EC        	bpl pchar0		; repeat.
000A2B  3  60           	rts
000A2C  3               
000A2C  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
000A30  3  60 40 20 00  
000A34  3               
000A34  3               ;----------------------------------------------
000A34  3               ; Print attributes, properties and pixels.
000A34  3               ;
000A34  3               ; Input:
000A34  3               ;  A		= tile number
000A34  3               ;----------------------------------------------
000A34  3               
000A34  3               pattr:
000A34  3  85 63        	sta z80_b		; store cell in b register for now.
000A36  3  AA           	tax
000A37  3  BD 75 2C     	lda bprop,x 		; block properties.
000A3A  3  85 62        	sta z80_c
000A3C  3  20 C3 09     	jsr pradd 		; get property buffer address.
000A3F  3  A5 62        	lda z80_c
000A41  3  A0 00        	ldy #0
000A43  3  91 86        	sta (bufaddr),y 	; write property.
000A45  3  A5 63        	lda z80_b 		; restore cell.
000A47  3               
000A47  3               ; Print attributes, no properties.
000A47  3               
000A47  3               panp:
000A47  3  85 64        	sta z80_e		; displacement in e.
000A49  3  A9 00        	lda #0
000A4B  3  85 65        	sta z80_d		; no high byte.
000A4D  3  06 64        	asl z80_e  		; multiply char by 8.
000A4F  3  26 65        	rol z80_d
000A51  3  06 64        	asl z80_e
000A53  3  26 65        	rol z80_d
000A55  3  06 64        	asl z80_e
000A57  3  26 65        	rol z80_d
000A59  3  18           	clc
000A5A  3  A5 64        	lda z80_e
000A5C  3  69 B5        	adc #<chgfx 		; address of graphics.
000A5E  3  85 84        	sta tileaddr
000A60  3  A5 65        	lda z80_d
000A62  3  69 2A        	adc #>chgfx
000A64  3  85 85        	sta tileaddr+1
000A66  3  20 B6 09     	jsr gprad 		; get screen address.
000A69  3  A2 07        	ldx #7			; number of pixel rows to write.
000A6B  3               panp0:
000A6B  3  A0 00        	ldy #0
000A6D  3  B1 84        	lda (tileaddr),y 	; get image byte.
000A6F  3  49 00        	eor #TxtInvert		; Invert
000A71  3  BC 2C 0A     	ldy scrtab,x
000A74  3  91 80        	sta (scraddr),y 	; copy to screen.
000A76  3  E6 84        	inc tileaddr 		; next image byte.
000A78  3  D0 02        	bne :+
000A7A  3  E6 85        	inc tileaddr+1
000A7C  3               :
000A7C  3  CA           	dex	 		; repeat for 8 pixel rows.
000A7D  3  10 EC        	bpl panp0
000A7F  3  EE 64 02     	inc dispx 		; move along one.
000A82  3  EE 59 02     	inc charx
000A85  3  60           	rts
000A86  3               
000A86  3               ;----------------------------------------------
000A86  3               ; Print character pixels, no more.
000A86  3               ;
000A86  3               ; Input:
000A86  3               ;  A		= character to print
000A86  3               ;----------------------------------------------
000A86  3               
000A86  3               pchr:
000A86  3  20 F1 09     	jsr pchar 		; show character in accumulator.
000A89  3  EE 64 02     	inc dispx		; move along one.
000A8C  3  60           	rts
000A8D  3               
000A8D  3               ;----------------------------------------------------
000A8D  3               ; Shifter sprite routine for objects.
000A8D  3               ;----------------------------------------------------
000A8D  3               
000A8D  3               sprit7:
000A8D  3  A5 63        	lda z80_b
000A8F  3  F0 0F        	beq sprit0
000A91  3  85 61        	sta z80_a
000A93  3               sprit3:
000A93  3  4E 24 0B     	lsr spr			; shift into position.
000A96  3  6E 25 0B     	ror spr+1
000A99  3  6E 26 0B     	ror spr+2
000A9C  3  C6 61        	dec z80_a		; one less iteration.
000A9E  3  D0 F3        	bne sprit3
000AA0  3               sprit0:
000AA0  3  60           	rts 			; now apply to screen.
000AA1  3               
000AA1  3               ;----------------------------------------------------
000AA1  3               ; Draw sprite
000AA1  3               ;----------------------------------------------------
000AA1  3               
000AA1  3               sprite:
000AA1  3  8E 27 0B     	stx xtmp		; Save X-reg
000AA4  3  20 78 12     	jsr scadd 		; get screen address in scraddr.
000AA7  3               
000AA7  3  AD 64 02     	lda dispx 		; x position.
000AAA  3  29 07        	and #7 			; position straddling cells.
000AAC  3  85 63        	sta z80_b		; store in b register.
000AAE  3               
000AAE  3  A5 66        	lda z80_l		; store sprite graphic address.
000AB0  3  8D C3 0A     	sta sprit1+1
000AB3  3  8D CA 0A     	sta sprit2+1
000AB6  3  A5 67        	lda z80_h
000AB8  3  8D C4 0A     	sta sprit1+2
000ABB  3  8D CB 0A     	sta sprit2+2
000ABE  3               
000ABE  3  A2 00        	ldx #0			; pixel height.
000AC0  3  A0 00        	ldy #0
000AC2  3               sprit1:
000AC2  3  BD 1C 63     	lda objdta,x		; fetch first byte.
000AC5  3  8D 24 0B     	sta spr
000AC8  3  E8           	inx
000AC9  3               sprit2:
000AC9  3  BD 1C 63     	lda objdta,x
000ACC  3  8D 25 0B     	sta spr+1
000ACF  3               
000ACF  3  A9 00        	lda #0
000AD1  3  8D 26 0B     	sta spr+2
000AD4  3  20 8D 0A     	jsr sprit7		; shift sprite
000AD7  3               
000AD7  3  CA           	dex
000AD8  3  AD 24 0B     	lda spr			; fetch graphic.
000ADB  3  BC 04 0B     	ldy spritetab,x
000ADE  3  51 80        	eor (scraddr),y		; merge with screen image.
000AE0  3  91 80        	sta (scraddr),y		; write to screen.
000AE2  3  E8           	inx			; next screen byte.
000AE3  3               
000AE3  3  AD 25 0B     	lda spr+1		; fetch graphic.
000AE6  3  BC 04 0B     	ldy spritetab,x
000AE9  3  51 80        	eor (scraddr),y		; merge with screen image.
000AEB  3  91 80        	sta (scraddr),y		; write to screen.
000AED  3  C8           	iny
000AEE  3               
000AEE  3  AD 26 0B     	lda spr+2		; fetch graphic.
000AF1  3  51 80        	eor (scraddr),y		; merge with screen image.
000AF3  3  91 80        	sta (scraddr),y		; write to screen.
000AF5  3               
000AF5  3  E8           	inx			; next source byte.
000AF6  3  E0 10        	cpx #16
000AF8  3  D0 02        	bne :+
000AFA  3  E6 81        	inc scraddr+1
000AFC  3               :
000AFC  3  E0 20        	cpx #32
000AFE  3  D0 C2        	bne sprit1		; repeat
000B00  3               
000B00  3  AE 27 0B     	ldx xtmp		; retreive X-reg
000B03  3  60           	rts
000B04  3               
000B04  3               spritetab:
000B04  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
000B08  3  40 41 60 61  
000B0C  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
000B10  3  C0 C1 E0 E1  
000B14  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
000B18  3  40 41 60 61  
000B1C  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
000B20  3  C0 C1 E0 E1  
000B24  3               
000B24  3  00 00 00     spr:	.byte 0,0,0
000B27  3               
000B27  3  00           xtmp:	.byte 0
000B28  3               
000B28  3               ;-----------------------------------------------------------
000B28  3               ; Get room address.
000B28  3               ;-----------------------------------------------------------
000B28  3               
000B28  3               groom:
000B28  3  AE 3F 02     	ldx scno 		; screen number.
000B2B  3  A0 00        	ldy #0
000B2D  3               groomx:
000B2D  3  A9 D9        	lda #<scdat 		; pointer to screens.
000B2F  3  85 66        	sta z80_l
000B31  3  A9 46        	lda #>scdat
000B33  3  85 67        	sta z80_h
000B35  3               groom1:
000B35  3  E0 00        	cpx #0			; is it the first one?
000B37  3  F0 15        	beq groom0 		; no more screens to skip.
000B39  3               
000B39  3  18           	clc
000B3A  3  A5 66        	lda z80_l
000B3C  3  79 D9 46     	adc scdat,y 		; low byte of screen size.
000B3F  3  85 66        	sta z80_l
000B41  3  C8           	iny			; point to high byte.
000B42  3  A5 67        	lda z80_h
000B44  3  79 D9 46     	adc scdat,y 		; high byte of screen size.
000B47  3  85 67        	sta z80_h
000B49  3  C8           	iny			; next address.
000B4A  3               
000B4A  3  CA           	dex 			; one less iteration.
000B4B  3  4C 35 0B     	jmp groom1 		; loop until we reach the end.
000B4E  3               groom0:
000B4E  3  AD 96 60     	lda numsc 		; add displacement.
000B51  3  0A           	asl a
000B52  3  18           	clc			; add double displacement to address.
000B53  3  65 66        	adc z80_l
000B55  3  85 66        	sta z80_l
000B57  3  A5 67        	lda z80_h
000B59  3  69 00        	adc #0
000B5B  3  85 67        	sta z80_h
000B5D  3  60           	rts
000B5E  3               
000B5E  3               ;-----------------------------------------------------------
000B5E  3               ; Draw present room.
000B5E  3               ;-----------------------------------------------------------
000B5E  3               
000B5E  3               droom:
000B5E  3  AD 36 02     	lda wintop 		; window top.
000B61  3  8D 65 02     	sta dispy		; set cursor y position.
000B64  3               droom2:
000B64  3  20 28 0B     	jsr groom 		; get address of current room.
000B67  3  A9 00        	lda #0	 		; zero in accumulator.
000B69  3  8D C6 0B     	sta comcnt 		; reset compression counter.
000B6C  3  AD 38 02     	lda winhgt 		; height of window.
000B6F  3  8D 93 0B     	sta rrow		; set row counter
000B72  3               droom0:
000B72  3  AD 37 02     	lda winlft 		; window left edge.
000B75  3  8D 64 02     	sta dispx 		; set cursor x position.
000B78  3  AD 39 02     	lda winwid 		; width of window.
000B7B  3  8D 92 0B     	sta rcol		; set column counter
000B7E  3               droom1:
000B7E  3  20 94 0B     	jsr flbyt 		; decompress next byte on the fly.
000B81  3  20 34 0A     	jsr pattr 		; show attributes and block.
000B84  3  CE 92 0B     	dec rcol		; one less column.
000B87  3  D0 F5        	bne droom1 		; repeat for entire line.
000B89  3  EE 65 02     	inc dispy		; move down one line.
000B8C  3  CE 93 0B     	dec rrow 		; one less row.
000B8F  3  D0 E1        	bne droom0 		; repeat for all rows.
000B91  3  60           	rts
000B92  3               
000B92  3  00           rcol:	.byte 0
000B93  3  00           rrow:	.byte 0
000B94  3               
000B94  3               ;----------------------------------------------
000B94  3               ; Decompress bytes on-the-fly.
000B94  3               ;----------------------------------------------
000B94  3               
000B94  3               flbyt:
000B94  3  AD C6 0B     	lda comcnt 		; compression counter.
000B97  3  D0 22        	bne flbyt1		; any more to decompress?  yes.
000B99  3               
000B99  3  A0 00        	ldy #0
000B9B  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
000B9D  3  E6 66        	inc z80_l 		; point to next cell.
000B9F  3  D0 02        	bne :+
000BA1  3  E6 67        	inc z80_h
000BA3  3               :
000BA3  3  C9 FF        	cmp #255 		; is this byte a control code?
000BA5  3  F0 01        	beq :+
000BA7  3  60           	rts 			; no, this byte is uncompressed.
000BA8  3               :
000BA8  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
000BAA  3  8D C5 0B     	sta combyt 		; set up the type.
000BAD  3  E6 66        	inc z80_l 		; point to quantity.
000BAF  3  D0 02        	bne :+
000BB1  3  E6 67        	inc z80_h
000BB3  3               :
000BB3  3  B1 66        	lda (z80_hl),y 		; get quantity.
000BB5  3  E6 66        	inc z80_l 		; point to next byte.
000BB7  3  D0 02        	bne :+
000BB9  3  E6 67        	inc z80_h
000BBB  3               :
000BBB  3               flbyt1:
000BBB  3  8D C6 0B     	sta comcnt 		; store new quantity.
000BBE  3  CE C6 0B     	dec comcnt		; one less.
000BC1  3  AD C5 0B     	lda combyt 		; byte to expand.
000BC4  3  60           	rts
000BC5  3               
000BC5  3  00           combyt:	.byte 0			; byte type compressed.
000BC6  3  00           comcnt:	.byte 0			; compression counter.
000BC7  3               
000BC7  3               ;------------------------------------------
000BC7  3               ; Ladder down check.
000BC7  3               ;
000BC7  3               ; Input:
000BC7  3               ;  IX = sprite pointer
000BC7  3               ;------------------------------------------
000BC7  3               
000BC7  3               laddd:
000BC7  3  A0 09        	ldy #9
000BC9  3  B1 68        	lda (z80_ix),y		; x coordinate.
000BCB  3  8D 64 02     	sta dispx
000BCE  3               
000BCE  3  A0 08        	ldy #8
000BD0  3  B1 68        	lda (z80_ix),y		; y coordinate.
000BD2  3  29 FE        	and #254		; make it even.
000BD4  3  91 68        	sta (z80_ix),y 		; reset it.
000BD6  3               numsp5:
000BD6  3  18           	clc 			; look down 16 pixels.
000BD7  3  69 10        	adc #16
000BD9  3  8D 65 02     	sta dispy		; coords in dispx,dispy.
000BDC  3  4C F4 0B     	jmp laddv
000BDF  3               
000BDF  3               ;------------------------------------------
000BDF  3               ; Ladder up check.
000BDF  3               ;
000BDF  3               ; Input:
000BDF  3               ;  IX = sprite pointer
000BDF  3               ;
000BDF  3               ; Output:
000BDF  3               ;  A  = 0 is ok, A <>0 is not ok
000BDF  3               ;------------------------------------------
000BDF  3               
000BDF  3               laddu:
000BDF  3  A0 09        	ldy #9
000BE1  3  B1 68        	lda (z80_ix),y		; x coordinate.
000BE3  3  8D 64 02     	sta dispx
000BE6  3               
000BE6  3  A0 08        	ldy #8
000BE8  3  B1 68        	lda (z80_ix),y		; y coordinate.
000BEA  3  29 FE        	and #254 		; make it even.
000BEC  3  91 68        	sta (z80_ix),y		; reset it.
000BEE  3               numsp6:
000BEE  3  18           	clc 			; look 2 pixels above feet.
000BEF  3  69 0E        	adc #14
000BF1  3  8D 65 02     	sta dispy		; coords in dispx,dispy.
000BF4  3               laddv:
000BF4  3  20 DB 0D     	jsr tstbl 		; get map address.
000BF7  3  20 0E 0D     	jsr ldchk 		; standard ladder check.
000BFA  3  F0 01        	beq :+
000BFC  3  60           	rts 			; no way through.
000BFD  3               :
000BFD  3  E6 86        	inc bufaddr 		; look right one cell.
000BFF  3  D0 02        	bne :+
000C01  3  E6 87        	inc bufaddr+1
000C03  3               :
000C03  3  20 0E 0D     	jsr ldchk 		; do the check.
000C06  3  F0 01        	beq :+
000C08  3  60           	rts 			; impassable.
000C09  3               :
000C09  3  AD 64 02     	lda dispx 		; y coordinate.
000C0C  3  29 07        	and #7 			; position straddling block cells.
000C0E  3  D0 01        	bne :+
000C10  3  60           	rts 			; no more checks needed.
000C11  3               :
000C11  3  E6 86        	inc bufaddr 		; look to third cell.
000C13  3  D0 02        	bne :+
000C15  3  E6 87        	inc bufaddr+1
000C17  3               :
000C17  3  20 0E 0D     	jsr ldchk 		; do the check.
000C1A  3  60           	rts  			; return with zero flag set accordingly.
000C1B  3               
000C1B  3               ;---------------------------------------------------------
000C1B  3               ; Can go up check.
000C1B  3               ;
000C1B  3               ; Input:
000C1B  3               ;  IX = sprite pointer
000C1B  3               ;
000C1B  3               ; Output:
000C1B  3               ;  A  = 0 is ok, A <>0 is not ok
000C1B  3               ;---------------------------------------------------------
000C1B  3               
000C1B  3               cangu:
000C1B  3  A0 09        	ldy #9
000C1D  3  B1 68        	lda (z80_ix),y		; x coordinate.
000C1F  3  8D 64 02     	sta dispx
000C22  3  A0 08        	ldy #8
000C24  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000C26  3  38           	sec
000C27  3  E9 02        	sbc #2
000C29  3  8D 65 02     	sta dispy		; coords in dispx,dispy.
000C2C  3  20 DB 0D     	jsr tstbl 		; get map address.
000C2F  3  20 D8 0C     	jsr lrchk 		; standard left/right check.
000C32  3  F0 01        	beq :+
000C34  3  60           	rts			; no way through.
000C35  3               :
000C35  3  E6 86        	inc bufaddr		; look right one cell.
000C37  3  D0 02        	bne :+
000C39  3  E6 87        	inc bufaddr+1
000C3B  3               :
000C3B  3  20 D8 0C     	jsr lrchk 		; do the check.
000C3E  3  F0 01        	beq :+
000C40  3  60           	rts			; impassable.
000C41  3               :
000C41  3  AD 64 02     	lda dispx		; x coordinate.
000C44  3  29 07        	and #7			; position straddling block cells.
000C46  3  D0 01        	bne :+
000C48  3  60           	rts			; no more checks needed.
000C49  3               :
000C49  3  E6 86        	inc bufaddr		; look to third cell.
000C4B  3  D0 02        	bne :+
000C4D  3  E6 87        	inc bufaddr+1
000C4F  3               :
000C4F  3  20 D8 0C     	jsr lrchk		; do the check.
000C52  3  60           	rts 			; return with zero flag set accordingly.
000C53  3               
000C53  3               ;---------------------------------------------------------
000C53  3               ; Can go down check.
000C53  3               ;
000C53  3               ; Input:
000C53  3               ;  IX = sprite pointer
000C53  3               ;
000C53  3               ; Output:
000C53  3               ;  A  = 0 is ok, A <>0 is not ok
000C53  3               ;---------------------------------------------------------
000C53  3               
000C53  3               cangd:
000C53  3  A0 09        	ldy #9
000C55  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000C57  3  8D 64 02     	sta dispx
000C5A  3  A0 08        	ldy #8
000C5C  3  B1 68        	lda (z80_ix),y		; y coordinate.
000C5E  3               numsp3:
000C5E  3  18           	clc
000C5F  3  69 10        	adc #16 		; look down 16 pixels.
000C61  3  8D 65 02     	sta dispy		; coords in dispx,dispy.
000C64  3  20 DB 0D     	jsr tstbl 		; get map address.
000C67  3  20 ED 0C     	jsr plchk 		; block, platform check.
000C6A  3  F0 01        	beq :+
000C6C  3  60           	rts			; no way through.
000C6D  3               :
000C6D  3  E6 86        	inc bufaddr		; look right one cell.
000C6F  3  D0 02        	bne :+
000C71  3  E6 87        	inc bufaddr+1
000C73  3               :
000C73  3  20 ED 0C     	jsr plchk		; block, platform check.
000C76  3  F0 01        	beq :+
000C78  3  60           	rts			; impassable.
000C79  3               :
000C79  3  AD 64 02     	lda dispx		; x coordinate.
000C7C  3  29 07        	and #7			; position straddling block cells.
000C7E  3  D0 01        	bne :+
000C80  3  60           	rts			; no more checks needed.
000C81  3               :
000C81  3  E6 86        	inc bufaddr		; look to third cell.
000C83  3  D0 02        	bne :+
000C85  3  E6 87        	inc bufaddr+1
000C87  3               :
000C87  3  20 ED 0C     	jsr plchk		; block, platform check.
000C8A  3  60           	rts			; return with zero flag set accordingly.
000C8B  3               
000C8B  3               ;---------------------------------------------------------
000C8B  3               ; Can go left check.
000C8B  3               ;
000C8B  3               ; Input:
000C8B  3               ;  IX = sprite pointer
000C8B  3               ;
000C8B  3               ; Output:
000C8B  3               ;  A  = 0 is ok, A <>0 is not ok
000C8B  3               ;---------------------------------------------------------
000C8B  3               
000C8B  3               cangl:
000C8B  3  A0 08        	ldy #8
000C8D  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000C8F  3  8D 65 02     	sta dispy
000C92  3  A0 09        	ldy #9
000C94  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000C96  3  38           	sec
000C97  3  E9 02        	sbc #2			; look left 2 pixels.
000C99  3  8D 64 02     	sta dispx		; coords in dispx,dispy.
000C9C  3  4C B0 0C     	jmp cangh		; test if we can go there.
000C9F  3               
000C9F  3               ;---------------------------------------------------------
000C9F  3               ; Can go right check.
000C9F  3               ;
000C9F  3               ; Input:
000C9F  3               ;  IX = sprite pointer
000C9F  3               ;
000C9F  3               ; Output:
000C9F  3               ;  A  = 0 is ok, A <>0 is not ok
000C9F  3               ;---------------------------------------------------------
000C9F  3               
000C9F  3               cangr:
000C9F  3  A0 08        	ldy #8
000CA1  3  B1 68        	lda (z80_ix),y		; y coordinate.
000CA3  3  8D 65 02     	sta dispy
000CA6  3  A0 09        	ldy #9
000CA8  3  B1 68        	lda (z80_ix),y		; x coordinate.
000CAA  3  18           	clc
000CAB  3  69 10        	adc #16			; look right 16 pixels.
000CAD  3  8D 64 02     	sta dispx		; coords in dispx,dispy.
000CB0  3               cangh:
000CB0  3               cangh2:
000CB0  3  A9 03        	lda #3			; default rows to write.
000CB2  3  85 63        	sta z80_b
000CB4  3  AD 65 02     	lda dispy		; y position.
000CB7  3  29 07        	and #7			; does x straddle cells?
000CB9  3  D0 02        	bne cangh0		; yes, loop counter is good.
000CBB  3  C6 63        	dec z80_b		; one less row to write.
000CBD  3               cangh0:
000CBD  3  20 DB 0D     	jsr tstbl		; get map address.
000CC0  3               cangh1:
000CC0  3  20 D8 0C     	jsr lrchk		; standard left/right check.
000CC3  3  F0 01        	beq :+
000CC5  3  60           	rts			; no way through.
000CC6  3               :
000CC6  3  48           	pha
000CC7  3  18           	clc
000CC8  3  A5 86        	lda bufaddr
000CCA  3  69 20        	adc #32			; look down.
000CCC  3  85 86        	sta bufaddr
000CCE  3  90 02        	bcc :+
000CD0  3  E6 87        	inc bufaddr+1
000CD2  3               :
000CD2  3  68           	pla
000CD3  3               
000CD3  3  C6 63        	dec z80_b
000CD5  3  D0 E9        	bne cangh1
000CD7  3  60           	rts
000CD8  3               
000CD8  3               ;-------------------------------------
000CD8  3               ; Check left/right movement is okay.
000CD8  3               ;
000CD8  3               ; Input:
000CD8  3               ;  bufaddr = MAP + x/8 + y/8*32
000CD8  3               ;
000CD8  3               ; Output:
000CD8  3               ;  A  = 0 is ok, A <>0 is not ok
000CD8  3               ;-------------------------------------
000CD8  3               
000CD8  3               lrchk:
000CD8  3  A0 00        	ldy #0
000CDA  3  B1 86        	lda (bufaddr),y		; fetch map cell.
000CDC  3  C9 02        	cmp #WALL 		; is it passable?
000CDE  3  F0 0A        	beq lrchkx		; no.
000CE0  3               
000CE0  3  C9 04        	cmp #FODDER		; fodder has to be dug.
000CE2  3  F0 06        	beq lrchkx		; not passable.
000CE4  3  A9 00        	lda #0
000CE6  3  60           	rts
000CE7  3               
000CE7  3               ;--------------------------------------------------------------
000CE7  3               ; Called by mmenu
000CE7  3               ;--------------------------------------------------------------
000CE7  3               
000CE7  3               always:
000CE7  3  A9 FF        	lda #255		; report it as okay.
000CE9  3  60           	rts
000CEA  3               
000CEA  3               lrchkx:
000CEA  3  A9 01        	lda #1 			; reset all bits.
000CEC  3  60           	rts
000CED  3               
000CED  3               
000CED  3               ;--------------------------------------------------------------
000CED  3               ; Check platform or solid item is not in way.
000CED  3               ;
000CED  3               ; Input:
000CED  3               ;  bufaddr = MAP + x/8 + y/8*32
000CED  3               ;
000CED  3               ; Output:
000CED  3               ;  A  = 0 is ok, A <>0 is not ok
000CED  3               ;--------------------------------------------------------------
000CED  3               
000CED  3               plchk:
000CED  3  A0 00        	ldy #0
000CEF  3  B1 86        	lda (bufaddr),y 	; fetch map cell.
000CF1  3  C9 02        	cmp #WALL 		; is it passable?
000CF3  3  F0 F5        	beq lrchkx		; no.
000CF5  3               
000CF5  3  C9 04        	cmp #FODDER		; fodder has to be dug.
000CF7  3  F0 F1        	beq lrchkx		; not passable.
000CF9  3               
000CF9  3  C9 01        	cmp #PLATFM		; platform is solid.
000CFB  3  F0 07        	beq plchkx		; not passable.
000CFD  3               
000CFD  3  C9 03        	cmp #LADDER		; is it a ladder?
000CFF  3  F0 E9        	beq lrchkx		; on ladder, deny movement.
000D01  3               plchk0:
000D01  3  A9 00        	lda #0			; report as ok
000D03  3  60           	rts
000D04  3               plchkx:
000D04  3  AD 65 02     	lda dispy		; x coordinate.
000D07  3  29 07        	and #7			; position straddling blocks.
000D09  3  F0 DF        	beq lrchkx		; on platform, deny movement.
000D0B  3  4C 01 0D     	jmp plchk0
000D0E  3               
000D0E  3               ;--------------------------------------------------------------
000D0E  3               ; Check ladder is available.
000D0E  3               ;
000D0E  3               ; Input:
000D0E  3               ;  bufaddr = MAP + x/8 + y/8*32
000D0E  3               ;
000D0E  3               ; Output:
000D0E  3               ;  A  = 0 is ok, A <>0 is not ok
000D0E  3               ;--------------------------------------------------------------
000D0E  3               
000D0E  3               ldchk:
000D0E  3  A0 00        	ldy #0
000D10  3  B1 86        	lda (bufaddr),y 	; fetch cell.
000D12  3  C9 03        	cmp #LADDER 		; is it a ladder?
000D14  3  F0 03        	beq ldchk1
000D16  3  A9 01        	lda #1
000D18  3  60           	rts  			; return with zero flag set accordingly.
000D19  3               ldchk1:
000D19  3  A9 00        	lda #0
000D1B  3  60           	rts
000D1C  3               
000D1C  3               ;--------------------------------------------------------------
000D1C  3               ; Touched deadly block check.
000D1C  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
000D1C  3               ;
000D1C  3               ; Input:
000D1C  3               ;  IX = sprite address
000D1C  3               ;
000D1C  3               ; Output:
000D1C  3               ;  A  = 0 is ok, A=5 is not ok
000D1C  3               ;--------------------------------------------------------------
000D1C  3               
000D1C  3               tded:
000D1C  3  A0 08        	ldy #8
000D1E  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000D20  3  8D 65 02     	sta dispy
000D23  3  C8           	iny
000D24  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000D26  3  8D 64 02     	sta dispx		; coords in dispx,dispy.
000D29  3  20 DB 0D     	jsr tstbl		; get map address.
000D2C  3  48           	pha
000D2D  3  A9 1F        	lda #31			; default distance to next line down.
000D2F  3  85 64        	sta z80_e
000D31  3  68           	pla
000D32  3  C5 63        	cmp z80_b		; is this the required block?
000D34  3  D0 01        	bne :+
000D36  3  60           	rts			; yes.
000D37  3               :
000D37  3  E6 86        	inc bufaddr 		; next cell.
000D39  3  D0 02        	bne :+
000D3B  3  E6 87        	inc bufaddr+1
000D3D  3               :
000D3D  3  A0 00        	ldy #0
000D3F  3  B1 86        	lda (bufaddr),y		; fetch type.
000D41  3  C5 63        	cmp z80_b 		; is this deadly/custom?
000D43  3  D0 01        	bne :+
000D45  3  60           	rts			; yes.
000D46  3               :
000D46  3  AD 64 02     	lda dispx		; horizontal position.
000D49  3  85 62        	sta z80_c 		; store column in c register.
000D4B  3  29 07        	and #7			; is it straddling cells?
000D4D  3  D0 03        	bne :+
000D4F  3  4C 63 0D     	jmp tded0		; no.
000D52  3               :
000D52  3  E6 86        	inc bufaddr 		; last cell.
000D54  3  D0 02        	bne :+
000D56  3  E6 87        	inc bufaddr+1
000D58  3               :
000D58  3  A0 00        	ldy #0
000D5A  3  B1 86        	lda (bufaddr),y 	; fetch type.
000D5C  3  C5 63        	cmp z80_b		; is this the block?
000D5E  3  D0 01        	bne :+
000D60  3  60           	rts			; yes.
000D61  3               :
000D61  3  C6 64        	dec z80_e		; one less cell to next row down.
000D63  3               tded0:
000D63  3  18           	clc 			; point to next row.
000D64  3  A5 86        	lda bufaddr
000D66  3  65 64        	adc z80_e
000D68  3  85 86        	sta bufaddr
000D6A  3  90 02        	bcc :+
000D6C  3  E6 87        	inc bufaddr+1
000D6E  3               :
000D6E  3  A0 00        	ldy #0
000D70  3  B1 86        	lda (bufaddr),y		; fetch left cell block.
000D72  3  C5 63        	cmp z80_b		; is this fatal?
000D74  3  D0 01        	bne :+
000D76  3  60           	rts			; yes.
000D77  3               :
000D77  3  E6 86        	inc bufaddr 		; next cell.
000D79  3  D0 02        	bne :+
000D7B  3  E6 87        	inc bufaddr+1
000D7D  3               :
000D7D  3  A0 00        	ldy #0
000D7F  3  B1 86        	lda (bufaddr),y 	; fetch type.
000D81  3  C5 63        	cmp z80_b		; is this fatal?
000D83  3  D0 01        	bne :+
000D85  3  60           	rts			; yes.
000D86  3               :
000D86  3  A5 62        	lda z80_c		; horizontal position.
000D88  3  29 07        	and #7			; is it straddling cells?
000D8A  3  D0 03        	bne :+
000D8C  3  4C 9E 0D     	jmp tded1 		; no.
000D8F  3               :
000D8F  3  E6 86        	inc bufaddr		; last cell.
000D91  3  D0 02        	bne :+
000D93  3  E6 87        	inc bufaddr+1
000D95  3               :
000D95  3  A0 00        	ldy #0
000D97  3  B1 86        	lda (bufaddr),y		; fetch type.
000D99  3  C5 63        	cmp z80_b		; is this fatal?
000D9B  3  D0 01        	bne :+
000D9D  3  60           	rts			; yes.
000D9E  3               :
000D9E  3               tded1:
000D9E  3  AD 65 02     	lda dispy		; vertical position.
000DA1  3  29 07        	and #7 			; is it straddling cells?
000DA3  3  D0 01        	bne :+
000DA5  3  60           	rts			; no, job done.
000DA6  3               :
000DA6  3  18           	clc			; point to next row.
000DA7  3  A5 86        	lda bufaddr
000DA9  3  65 64        	adc z80_e
000DAB  3  85 86        	sta bufaddr
000DAD  3  90 02        	bcc :+
000DAF  3  E6 87        	inc bufaddr+1
000DB1  3               :
000DB1  3  A0 00        	ldy #0
000DB3  3  B1 86        	lda (bufaddr),y 	; fetch left cell block.
000DB5  3  C5 63        	cmp z80_b		; is this fatal?
000DB7  3  D0 01        	bne :+
000DB9  3  60           	rts			; yes.
000DBA  3               :
000DBA  3  E6 86        	inc bufaddr		; next cell.
000DBC  3  D0 02        	bne :+
000DBE  3  E6 87        	inc bufaddr+1
000DC0  3               :
000DC0  3  A0 00        	ldy #0
000DC2  3  B1 86        	lda (bufaddr),y 	; fetch type.
000DC4  3  C5 63        	cmp z80_b		; is this fatal?
000DC6  3  D0 01        	bne :+
000DC8  3  60           	rts			; yes.
000DC9  3               :
000DC9  3  A5 62        	lda z80_c		; horizontal position.
000DCB  3  29 07        	and #7			; is it straddling cells?
000DCD  3  D0 01        	bne :+
000DCF  3  60           	rts			; no.
000DD0  3               :
000DD0  3  E6 86        	inc bufaddr		; last cell.
000DD2  3  D0 02        	bne :+
000DD4  3  E6 87        	inc bufaddr+1
000DD6  3               :
000DD6  3  A0 00        	ldy #0
000DD8  3  B1 86        	lda (bufaddr),y		; fetch final type.
000DDA  3  60           	rts 			; return with final type in accumulator.
000DDB  3               
000DDB  3               ;---------------------------------------------------
000DDB  3               ; Fetch block type at (dispx, dispy).
000DDB  3               ;
000DDB  3               ; Output:
000DDB  3               ;  A = block type
000DDB  3               ;---------------------------------------------------
000DDB  3               
000DDB  3               tstbl:
000DDB  3  AD 65 02     	lda dispy 		; fetch y coord.
000DDE  3  4A           	lsr a			; bufaddr = y/8
000DDF  3  4A           	lsr a
000DE0  3  4A           	lsr a
000DE1  3  85 86        	sta bufaddr
000DE3  3  A9 00        	lda #0
000DE5  3  85 87        	sta bufaddr+1
000DE7  3               
000DE7  3  06 86        	asl bufaddr  		; bufaddr = y/8 * 32
000DE9  3  26 87        	rol bufaddr+1
000DEB  3  06 86        	asl bufaddr
000DED  3  26 87        	rol bufaddr+1
000DEF  3  06 86        	asl bufaddr
000DF1  3  26 87        	rol bufaddr+1
000DF3  3  06 86        	asl bufaddr
000DF5  3  26 87        	rol bufaddr+1
000DF7  3  06 86        	asl bufaddr
000DF9  3  26 87        	rol bufaddr+1
000DFB  3               
000DFB  3  AD 64 02     	lda dispx		; x/8
000DFE  3  4A           	lsr a
000DFF  3  4A           	lsr a
000E00  3  4A           	lsr a
000E01  3               
000E01  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
000E02  3  65 86        	adc bufaddr
000E04  3  69 00        	adc #<MAP
000E06  3  85 86        	sta bufaddr
000E08  3  A5 87        	lda bufaddr+1
000E0A  3  69 9A        	adc #>MAP
000E0C  3  85 87        	sta bufaddr+1
000E0E  3               
000E0E  3  A0 00        	ldy #0
000E10  3  B1 86        	lda (bufaddr),y 	; fetch byte there.
000E12  3  60           	rts
000E13  3               
000E13  3               
000E13  3               ;-------------------------------------------------------------------
000E13  3               ; Jump - if we can.
000E13  3               ; Requires initial speed to be set up in accumulator prior to call.
000E13  3               ;
000E13  3               ; Input:
000E13  3               ;  IX = sprite address
000E13  3               ;-------------------------------------------------------------------
000E13  3               
000E13  3               jump:
000E13  3  A0 0D        	ldy #13
000E15  3  B1 68        	lda (z80_ix),y		; jump table low.
000E17  3  A0 0E        	ldy #14
000E19  3  11 68        	ora (z80_ix),y		; jump table high.
000E1B  3  F0 01        	beq :+
000E1D  3  60           	rts			; already in the air.
000E1E  3               :
000E1E  3  A9 0E        	lda #>jtab
000E20  3  A0 0E        	ldy #14
000E22  3  91 68        	sta (z80_ix),y		; set jump high.
000E24  3  A9 2B        	lda #<jtab		; jump table start.
000E26  3  A0 0D        	ldy #13
000E28  3  91 68        	sta (z80_ix),y		; set jump low.
000E2A  3  60           	rts
000E2B  3               
000E2B  3               ; Jump table.
000E2B  3               
000E2B  3               jtab:
000E2B  3  F8 FA FC     	.byte 248,250,252
000E2E  3  FE FE FF     	.byte 254,254,255
000E31  3  FF FF 00 00  	.byte 255,255,0,0
000E35  3  00 01 01 01  	.byte 0,1,1,1,2,2
000E39  3  02 02        
000E3B  3  04 06 08 08  	.byte 4,6,8,8,8,99
000E3F  3  08 63        
000E41  3               
000E41  3               ;------------------------------------------------
000E41  3               ; Random numbers code.
000E41  3               ; Pseudo-random number generator, 8-bit.
000E41  3               ;
000E41  3               ; Output:
000E41  3               ;  RND = random number
000E41  3               ;------------------------------------------------
000E41  3               
000E41  3               random:
000E41  3  AD 5C 08     	lda seed		; get last random number.
000E44  3  0A           	asl a
000E45  3  0A           	asl a
000E46  3  18           	clc
000E47  3  6D 5C 08     	adc seed
000E4A  3  18           	clc
000E4B  3  69 45        	adc #$45
000E4D  3  8D 5C 08     	sta seed		; store new seed.
000E50  3  8D 5C 02     	sta varrnd		; return number in variable.
000E53  3  60           	rts
000E54  3               
000E54  3               ;--------------------------------------------------------
000E54  3               ; Keys
000E54  3               ;
000E54  3               ; Out: joyval=x65FUDLR (bit set if key pressed)
000E54  3               ;             ||||||||
000E54  3               ;             |||||||+> Right    KEY 0  - X
000E54  3               ;             ||||||+-> Left     KEY 1  - Z
000E54  3               ;             |||||+--> Down     KEY 2  - .
000E54  3               ;             ||||+---> Up       KEY 3  - ;
000E54  3               ;             |||+----> Fire1    KEY 4  - SPC
000E54  3               ;             ||+-----> Fire2    KEY 5  - Q
000E54  3               ;             |+------> Fire3    KEY 6  - P
000E54  3               ;             +-------> Not used
000E54  3               ;
000E54  3               ;                       Option1  KEY 7  - 1
000E54  3               ;                       Option2  KEY 8  - 2
000E54  3               ;                       Option3  KEY 9  - 3
000E54  3               ;                       Option4  KEY 10 - 4
000E54  3               ;--------------------------------------------------------
000E54  3               
000E54  3               ;              X   Z   .   ;  SPC  Q   P
000E54  3  35 15 93 22  keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
000E58  3  90 04 14     
000E5B  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
000E5F  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
000E63  3  00 04 14     
000E66  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
000E6A  3               
000E6A  3               ;--------------------------------------------------------
000E6A  3               ; Keyboard test routine.
000E6A  3               ;
000E6A  3               ; Input:
000E6A  3               ;  A = key to read, high nibble=row and low nibble=col
000E6A  3               ;
000E6A  3               ; Output:
000E6A  3               ;  carry set = key pressed
000E6A  3               ;  carry clr = key not pressed
000E6A  3               ;--------------------------------------------------------
000E6A  3               
000E6A  3               ktest:
000E6A  3  85 61        	sta z80_a		; save key
000E6C  3               
000E6C  3  4A           	lsr a			; set row
000E6D  3  4A           	lsr a
000E6E  3  4A           	lsr a
000E6F  3  4A           	lsr a
000E70  3  09 F0        	ora #ScrMode		; don't flip screenmode
000E72  3  8D 00 B0     	sta ScrSelAddr
000E75  3               
000E75  3  A5 61        	lda z80_a
000E77  3  29 0F        	and #$0f
000E79  3  AA           	tax
000E7A  3  AD 01 B0     	lda $b001		; read column
000E7D  3               
000E7D  3  3D 86 0E     	and keymask,x		; check key pressed
000E80  3  F0 02        	beq no_press
000E82  3  38           	sec			; key pressed
000E83  3  60           	rts
000E84  3               no_press:
000E84  3  18           	clc			; key not pressed
000E85  3  60           	rts
000E86  3               
000E86  3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
000E8A  3  10 20        
000E8C  3               
000E8C  3               ;-------------------------------------------------------
000E8C  3               ; Joystick and keyboard reading routines.
000E8C  3               ;
000E8C  3               ; contrl = 0, Keyboard
000E8C  3               ;          1, JoyKeyb
000E8C  3               ;          2, JoyMMC
000E8C  3               ;-------------------------------------------------------
000E8C  3               
000E8C  3               joykey:
000E8C  3  AD 33 02     	lda contrl 		; control flag.
000E8F  3  C9 01        	cmp #1
000E91  3  D0 03        	bne :+
000E93  3  4C B1 0E     	jmp joyjoy 		; read keyboard joystick
000E96  3               :
000E96  3  C9 02        	cmp #2
000E98  3  D0 03        	bne :+
000E9A  3  4C C8 0E     	jmp joysin 		; read MMC joystick.
000E9D  3               :
000E9D  3               ; Keyboard controls.
000E9D  3               
000E9D  3  A9 00        	lda #0		 	; zero reading.
000E9F  3  85 64        	sta z80_e
000EA1  3               
000EA1  3  A0 06        	ldy #6	 		; address of last key.
000EA3  3               joyke0:
000EA3  3  B9 54 0E     	lda keys,y 		; get key from table.
000EA6  3  20 6A 0E     	jsr ktest		; being pressed?
000EA9  3  26 64        	rol z80_e 		; rotate into reading.
000EAB  3               
000EAB  3  88           	dey		 	; next key.
000EAC  3  10 F5        	bpl joyke0 		; repeat for all keys.
000EAE  3  4C C2 0E     	jmp joyjo1 		; store the value.
000EB1  3               
000EB1  3               ; Keyboard joystick controls.
000EB1  3               
000EB1  3               joyjoy:
000EB1  3  A9 00        	lda #0		 	; zero reading.
000EB3  3  85 64        	sta z80_e
000EB5  3               
000EB5  3  A0 06        	ldy #6	 		; address of last key.
000EB7  3               joyjo3:
000EB7  3  B9 5F 0E     	lda jkeys,y 		; get key from table.
000EBA  3  20 6A 0E     	jsr ktest		; being pressed?
000EBD  3  26 64        	rol z80_e 		; rotate into reading.
000EBF  3               
000EBF  3  88           	dey		 	; next key.
000EC0  3  10 F5        	bpl joyjo3 		; repeat for all keys.
000EC2  3               joyjo1:
000EC2  3  A5 64        	lda z80_e 		; copy e register to accumulator.
000EC4  3               joyjo2:
000EC4  3  8D 34 02     	sta joyval		; remember value.
000EC7  3  60           	rts
000EC8  3               
000EC8  3               
000EC8  3               ; AtoMMC joystick controls.
000EC8  3               
000EC8  3               joysin:
000EC8  3  60           	rts
000EC9  3               
000EC9  3               ;---------------------------------------------------------------
000EC9  3               ; Getkey in column,row format
000EC9  3               ;
000EC9  3               ; Output:
000EC9  3               ;  A = high nibble=row and low nibble=column key in matrix
000EC9  3               ;---------------------------------------------------------------
000EC9  3               
000EC9  3               kget:
000EC9  3  A9 F0        	lda #ScrMode		; high-mono mode.
000ECB  3  8D 00 B0     	sta ScrSelAddr		; screen select port
000ECE  3  8E 27 0B     	stx xtmp
000ED1  3               kget4:
000ED1  3  20 71 FE     	jsr READKEY		; read key until pressed
000ED4  3  C0 FF        	cpy #255
000ED6  3  F0 F9        	beq kget4
000ED8  3  8D 92 0B     	sta rcol		; save column
000EDB  3  8E 93 0B     	stx rrow		; determine row
000EDE  3               kget3:
000EDE  3  20 71 FE     	jsr READKEY		; wait until key released
000EE1  3  C0 FF        	cpy #255
000EE3  3  D0 F9        	bne kget3
000EE5  3               
000EE5  3  38           	sec			; calculate matrix row
000EE6  3  A9 0A        	lda #10
000EE8  3  ED 93 0B     	sbc rrow
000EEB  3  0A           	asl a
000EEC  3  0A           	asl a
000EED  3  0A           	asl a
000EEE  3  0A           	asl a
000EEF  3  8D 93 0B     	sta rrow
000EF2  3               
000EF2  3  A0 FF        	ldy #255		; find column mask
000EF4  3               kget1:
000EF4  3  C8           	iny
000EF5  3  B9 86 0E     	lda keymask,y
000EF8  3  CD 92 0B     	cmp rcol
000EFB  3  F0 03        	beq kget2
000EFD  3  4C F4 0E     	jmp kget1
000F00  3               kget2:
000F00  3  98           	tya			; determine column
000F01  3  18           	clc
000F02  3  6D 93 0B     	adc rrow
000F05  3  AE 27 0B     	ldx xtmp
000F08  3  60           	rts
000F09  3               
000F09  3               ;---------------------------------------------------------------
000F09  3               ; Display message.
000F09  3               ;
000F09  3               ; Input:
000F09  3               ;  A = message number
000F09  3               ;---------------------------------------------------------------
000F09  3               
000F09  3               dmsg:
000F09  3  AA           	tax
000F0A  3  A9 2B        	lda #<msgdat		; pointer to messages.
000F0C  3  85 66        	sta z80_l
000F0E  3  A9 25        	lda #>msgdat
000F10  3  85 67        	sta z80_h
000F12  3  20 42 10     	jsr getwrd		; get message number.
000F15  3               dmsg3:
000F15  3  20 29 10     	jsr preprt		; pre-printing stuff.
000F18  3  20 71 08     	jsr checkx		; make sure we"re in a printable range.
000F1B  3  AD 6B 0F     	lda prtmod		; print mode.
000F1E  3  D0 4C        	bne bmsg1		; no, double-height text.
000F20  3               dmsg0:
000F20  3  A5 67        	lda z80_h		; store string pointer.
000F22  3  48           	pha
000F23  3  A5 66        	lda z80_l
000F25  3  48           	pha
000F26  3               
000F26  3  A0 00        	ldy #0
000F28  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
000F2A  3  29 7F        	and #127		; remove any end marker.
000F2C  3  C9 0D        	cmp #13
000F2E  3  F0 24        	beq dmsg1
000F30  3  20 F1 09     	jsr pchar		; display character.
000F33  3  20 0F 10     	jsr nexpos 		; display position.
000F36  3  D0 03        	bne dmsg2		; not on a new line.
000F38  3  20 18 10     	jsr nexlin		; next line down.
000F3B  3               dmsg2:
000F3B  3  68           	pla			; retrieve string pointer
000F3C  3  85 66        	sta z80_l
000F3E  3  68           	pla
000F3F  3  85 67        	sta z80_h
000F41  3               
000F41  3  A0 00        	ldy #0
000F43  3  B1 66        	lda (z80_hl),y		; fetch last character.
000F45  3  0A           	asl a  			; was it the end?
000F46  3  90 03        	bcc :+
000F48  3  4C B9 08     	jmp dscor2		; yes, job done.
000F4B  3               :
000F4B  3  E6 66        	inc z80_l		; next character to display.
000F4D  3  D0 02        	bne :+
000F4F  3  E6 67        	inc z80_h
000F51  3               :
000F51  3  4C 20 0F     	jmp dmsg0
000F54  3               dmsg1:
000F54  3  EE 65 02     	inc dispy
000F57  3  AD 65 02     	lda dispy
000F5A  3  C9 18        	cmp #24
000F5C  3  90 05        	bcc dmsg4
000F5E  3  A9 00        	lda #0
000F60  3  8D 65 02     	sta dispy
000F63  3               dmsg4:
000F63  3  A9 00        	lda #0
000F65  3  8D 64 02     	sta dispx
000F68  3  4C 3B 0F     	jmp dmsg2
000F6B  3               
000F6B  3  00           prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
000F6C  3               
000F6C  3               ;----------------------------------------------------------
000F6C  3               ; Display message in big text.
000F6C  3               ;
000F6C  3               ; Input:
000F6C  3               ;  HL = string pointer
000F6C  3               ;----------------------------------------------------------
000F6C  3               
000F6C  3               bmsg1:
000F6C  3  A0 00        	ldy #0
000F6E  3  B1 66        	lda (z80_hl),y 		; get character to display.
000F70  3  29 7F        	and #127		; only want 7 bits.
000F72  3  C9 0D        	cmp #13
000F74  3  F0 13        	beq bmsg2
000F76  3  20 A3 0F     	jsr bchar 		; display big char.
000F79  3               bmsg3:
000F79  3  A0 00        	ldy #0
000F7B  3  B1 66        	lda (z80_hl),y 		; look at last character.
000F7D  3  48           	pha
000F7E  3  E6 66        	inc z80_l 		; next character in list.
000F80  3  D0 02        	bne :+
000F82  3  E6 67        	inc z80_h
000F84  3               :
000F84  3  68           	pla
000F85  3  0A           	asl a  			; was terminator flag set?
000F86  3  90 E4        	bcc bmsg1		; no, keep going.
000F88  3               :
000F88  3  60           	rts
000F89  3               bmsg2:
000F89  3  A9 00        	lda #0
000F8B  3  8D 64 02     	sta dispx
000F8E  3  EE 65 02     	inc dispy
000F91  3  EE 65 02     	inc dispy
000F94  3  AD 65 02     	lda dispy
000F97  3  C9 17        	cmp #23
000F99  3  90 DE        	bcc bmsg3
000F9B  3  A9 00        	lda #0
000F9D  3  8D 65 02     	sta dispy
000FA0  3  4C 79 0F     	jmp bmsg3
000FA3  3               
000FA3  3               ;----------------------------------------------------------
000FA3  3               ; Big character display.
000FA3  3               ;
000FA3  3               ; Input:
000FA3  3               ;  A = character
000FA3  3               ;----------------------------------------------------------
000FA3  3               
000FA3  3               bchar:
000FA3  3  85 64        	sta z80_e		; save char in lb
000FA5  3  A9 00        	lda #0
000FA7  3  85 65        	sta z80_d		; reset hb
000FA9  3               
000FA9  3  06 64        	asl z80_e 		; multiply char by 8.
000FAB  3  26 65        	rol z80_d
000FAD  3  06 64        	asl z80_e
000FAF  3  26 65        	rol z80_d
000FB1  3  06 64        	asl z80_e
000FB3  3  26 65        	rol z80_d		; de = a*8
000FB5  3               
000FB5  3  18           	clc			; de = FontPtr + a*8
000FB6  3  A5 64        	lda z80_e
000FB8  3  6D 85 18     	adc FontPtr 		; address of font.
000FBB  3  85 64        	sta z80_e
000FBD  3  A5 65        	lda z80_d
000FBF  3  6D 86 18     	adc FontPtr+1
000FC2  3  85 65        	sta z80_d
000FC4  3               
000FC4  3  20 B6 09     	jsr gprad 		; get screen address.
000FC7  3               
000FC7  3  A2 00        	ldx #0			; height of character in font.
000FC9  3               bchar0:
000FC9  3  A0 00        	ldy #0
000FCB  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
000FCD  3               
000FCD  3  49 00        	eor #TxtInvert		; Invert
000FCF  3               
000FCF  3  91 80        	sta (scraddr),y
000FD1  3  48           	pha
000FD2  3  20 01 13     	jsr nline 		; next line down.
000FD5  3  68           	pla
000FD6  3  91 80        	sta (scraddr),y
000FD8  3  20 01 13     	jsr nline 		; next line down.
000FDB  3               
000FDB  3  18           	clc
000FDC  3  E6 64        	inc z80_e 		; next line of font.
000FDE  3  D0 02        	bne :+
000FE0  3  E6 65        	inc z80_d
000FE2  3               :
000FE2  3  E8           	inx
000FE3  3  E0 08        	cpx #8
000FE5  3  D0 E2        	bne bchar0
000FE7  3               	
000FE7  3  20 0F 10     	jsr nexpos		; display position.
000FEA  3  D0 06        	bne bchar2 		; not on a new line.
000FEC  3               bchar3:
000FEC  3  EE 65 02     	inc dispy
000FEF  3  20 18 10     	jsr nexlin 		; next line check.
000FF2  3               bchar2:
000FF2  3  4C B9 08     	jmp dscor2		; tidy up line and column variables.
000FF5  3               
000FF5  3               
000FF5  3               ;-------------------------------------------------
000FF5  3               ; Display a character.
000FF5  3               ;
000FF5  3               ; Input:
000FF5  3               ;  A = character
000FF5  3               ;-------------------------------------------------
000FF5  3               
000FF5  3               achar:
000FF5  3  85 63        	sta z80_b 		; copy to b.
000FF7  3  20 29 10     	jsr preprt 		; get ready to print.
000FFA  3  A5 63        	lda z80_b		; character in accumulator.
000FFC  3  AE 6B 0F     	ldx prtmod 		; print mode.
000FFF  3  F0 03        	beq :+
001001  3  4C A3 0F     	jmp bchar 		; no, double-height text.
001004  3               :
001004  3  20 F1 09     	jsr pchar 		; display character.
001007  3  20 0F 10     	jsr nexpos 		; display position.
00100A  3  F0 E0        	beq bchar3		; next line down.
00100C  3  4C F2 0F     	jmp bchar2 		; tidy up.
00100F  3               
00100F  3               
00100F  3               ;-------------------------------------------------
00100F  3               ; Get next print column position.
00100F  3               ;-------------------------------------------------
00100F  3               
00100F  3               nexpos:
00100F  3  EE 64 02     	inc dispx		; move along one position.
001012  3  AD 64 02     	lda dispx 		; get coordinate.
001015  3  29 1F        	and #31
001017  3  60           	rts 			; return with status in zero flag.
001018  3               
001018  3               ;-------------------------------------------------
001018  3               ; Get next print line position.
001018  3               ;-------------------------------------------------
001018  3               
001018  3               nexlin:
001018  3  EE 65 02     	inc dispy 		; newline.
00101B  3  AD 65 02     	lda dispy		; vertical position.
00101E  3  C9 18        	cmp #24			; past screen edge?
001020  3  B0 01        	bcs :+
001022  3  60           	rts			; no, still okay.
001023  3               :
001023  3  A9 00        	lda #0			; restart at top.
001025  3  8D 65 02     	sta dispy
001028  3  60           	rts
001029  3               
001029  3               ;--------------------------------------------------------
001029  3               ; Pre-print preliminaries.
001029  3               ;--------------------------------------------------------
001029  3               
001029  3               preprt:
001029  3  AD 85 18     	lda FontPtr		; font pointer.
00102C  3  8D 6F 08     	sta grbase		; set up graphics base.
00102F  3  AD 86 18     	lda FontPtr+1
001032  3  8D 70 08     	sta grbase+1
001035  3               prescr:
001035  3  AD 59 02     	lda charx 		; display coordinates.
001038  3  8D 64 02     	sta dispx		; set up general coordinates.
00103B  3  AD 5A 02     	lda chary
00103E  3  8D 65 02     	sta dispy
001041  3  60           	rts
001042  3               
001042  3               ;--------------------------------------------------------------
001042  3               ; Get messagenr x in hl
001042  3               ;
001042  3               ; Input:
001042  3               ;  HL = pointer to message list
001042  3               ;  X  = message number.
001042  3               ;--------------------------------------------------------------
001042  3               
001042  3               getwrd:
001042  3  E0 00        	cpx #0
001044  3  D0 01        	bne:+ 			; first word in list?
001046  3  60           	rts 			; yep, don't search.
001047  3               :
001047  3  A0 00        	ldy #0
001049  3               getwd0:
001049  3  B1 66        	lda (z80_hl),y
00104B  3  48           	pha
00104C  3  E6 66        	inc z80_l
00104E  3  D0 02        	bne :+
001050  3  E6 67        	inc z80_h
001052  3               :
001052  3  68           	pla
001053  3  C9 80        	cmp #128		; found end?
001055  3  30 F2        	bmi getwd0		; no, carry on.
001057  3  CA           	dex			; until we have right number.
001058  3  D0 EF        	bne getwd0
00105A  3  60           	rts
00105B  3               
00105B  3               ;-----------------------------------------------------------
00105B  3               ; Bubble sort.
00105B  3               ;-----------------------------------------------------------
00105B  3               
00105B  3               bsort:
00105B  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
00105D  3  8D 93 10     	sta qscnt
001060  3               
001060  3  A9 A6        	lda #<sprtab 		; sprite table.
001062  3  85 68        	sta z80_x
001064  3  A9 17        	lda #>sprtab
001066  3  85 69        	sta z80_i
001068  3               bsort0:
001068  3  A0 00        	ldy #0
00106A  3  B1 68        	lda (z80_ix),y 		; first sprite type.
00106C  3  C9 FF        	cmp #255 		; is it switched off?
00106E  3  F0 32        	beq swemp		; yes, may need to switch another in here.
001070  3               
001070  3  A0 11        	ldy #TABSIZ
001072  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
001074  3  C9 FF        	cmp #255 		; is it enabled?
001076  3  F0 0A        	beq bsort2 		; no, nothing to swap.
001078  3               
001078  3  A0 14        	ldy #TABSIZ+3
00107A  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
00107C  3  A0 03        	ldy #3
00107E  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
001080  3  B0 12        	bcs bsort1		; next sprite is higher - may need to switch.
001082  3               bsort2:
001082  3  18           	clc
001083  3  A5 68        	lda z80_x
001085  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
001087  3  85 68        	sta z80_x
001089  3  90 02        	bcc :+
00108B  3  E6 69        	inc z80_i
00108D  3               :
00108D  3  CE 93 10     	dec qscnt 
001090  3  D0 D6        	bne bsort0		; repeat for remaining sprites.
001092  3  60           	rts
001093  3               
001093  3  00           qscnt:	.byte 0
001094  3               
001094  3               bsort1:
001094  3  A0 11        	ldy #TABSIZ
001096  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
001098  3  C9 FF        	cmp #255		; is it enabled?
00109A  3  F0 E6        	beq bsort2		; no, nothing to swap.
00109C  3  20 B0 10     	jsr swspr		; swap positions.
00109F  3  4C 82 10     	jmp bsort2
0010A2  3               swemp:
0010A2  3  A0 11        	ldy #TABSIZ
0010A4  3  B1 68        	lda (z80_ix),y		; next table entry.
0010A6  3  C9 FF        	cmp #255		; is that one on?
0010A8  3  F0 D8        	beq bsort2		; no, nothing to swap.
0010AA  3  20 B0 10     	jsr swspr		; swap positions.
0010AD  3  4C 82 10     	jmp bsort2
0010B0  3               
0010B0  3               ; Swap sprites.
0010B0  3               
0010B0  3               swspr:
0010B0  3  A5 68        	lda z80_x		; table address 
0010B2  3  85 64        	sta z80_e		; copy to de pair.
0010B4  3  85 66        	sta z80_l		; copy to hl pair.
0010B6  3  A5 69        	lda z80_i
0010B8  3  85 67        	sta z80_h
0010BA  3  85 65        	sta z80_d
0010BC  3               
0010BC  3  18           	clc
0010BD  3  A5 66        	lda z80_l
0010BF  3  69 11        	adc #TABSIZ		; distance to second entry.
0010C1  3  85 66        	sta z80_l
0010C3  3  90 02        	bcc :+
0010C5  3  E6 67        	inc z80_h
0010C7  3               :
0010C7  3  A9 11        	lda #TABSIZ		; bytes to swap.
0010C9  3  85 63        	sta z80_b
0010CB  3  A0 00        	ldy #0
0010CD  3               swspr0:
0010CD  3  B1 66        	lda (z80_hl),y		; fetch second byte.
0010CF  3  48           	pha
0010D0  3  B1 64        	lda (z80_de),y 		; fetch first byte.
0010D2  3  91 66        	sta (z80_hl),y 		; copy to second.
0010D4  3  68           	pla
0010D5  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
0010D7  3               
0010D7  3  E6 64        	inc z80_e 		; next byte.
0010D9  3  D0 02        	bne :+	
0010DB  3  E6 65        	inc z80_d
0010DD  3               :
0010DD  3  E6 66        	inc z80_l 		; next byte.
0010DF  3  D0 02        	bne :+
0010E1  3  E6 67        	inc z80_h
0010E3  3               :
0010E3  3  C6 63        	dec z80_b
0010E5  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
0010E7  3  60           	rts
0010E8  3               
0010E8  3               ;----------------------------------------------------
0010E8  3               ; Process sprites.
0010E8  3               ;----------------------------------------------------
0010E8  3               
0010E8  3               pspr:
0010E8  3  A9 0C        	lda #NUMSPR		; sprites to process.
0010EA  3  8D 11 11     	sta sprptr
0010ED  3               
0010ED  3  A9 A6        	lda #<sprtab 		; sprite table.
0010EF  3  85 68        	sta z80_x
0010F1  3  A9 17        	lda #>sprtab
0010F3  3  85 69        	sta z80_i
0010F5  3               pspr1:
0010F5  3  A0 00        	ldy #0
0010F7  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
0010F9  3  C9 09        	cmp #9 			; within range of sprite types?
0010FB  3  B0 03        	bcs :+
0010FD  3  20 12 11     	jsr pspr2 		; yes, process this one.
001100  3               :
001100  3  18           	clc
001101  3  A5 68        	lda z80_x
001103  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
001105  3  85 68        	sta z80_x
001107  3  90 02        	bcc :+
001109  3  E6 69        	inc z80_i		; next sprite.
00110B  3               :
00110B  3  CE 11 11     	dec sprptr 		; repeat for remaining sprites.
00110E  3  D0 E5        	bne pspr1
001110  3  60           	rts
001111  3               
001111  3  00           sprptr:	.byte 0
001112  3               
001112  3               pspr2:
001112  3  A5 68        	lda z80_x 		; store original sprite pointer.
001114  3  8D 5F 11     	sta ogptr
001117  3  A5 69        	lda z80_i
001119  3  8D 60 11     	sta ogptr+1
00111C  3  20 2A 11     	jsr pspr3		; do the routine.
00111F  3               rtorg:
00111F  3  AD 5F 11     	lda ogptr 		; restore original pointer to sprite.
001122  3  85 68        	sta z80_x
001124  3  AD 60 11     	lda ogptr+1
001127  3  85 69        	sta z80_i
001129  3               rtorg0:
001129  3  60           	rts
00112A  3               
00112A  3               pspr3:
00112A  3  A9 61        	lda #<evtyp0		; sprite type events list.
00112C  3  85 66        	sta z80_l
00112E  3  A9 11        	lda #>evtyp0
001130  3  85 67        	sta z80_h
001132  3               pspr4:
001132  3  B1 68        	lda (z80_ix),y
001134  3  0A           	asl a			; double accumulator.
001135  3  18           	clc
001136  3  65 66        	adc z80_l
001138  3  85 66        	sta z80_l
00113A  3  90 02        	bcc :+
00113C  3  E6 67        	inc z80_h
00113E  3               :
00113E  3  B1 66        	lda (z80_hl),y
001140  3  85 64        	sta z80_e 		; copy to de.
001142  3  48           	pha
001143  3               
001143  3  E6 66        	inc z80_l 		; next byte of address.
001145  3  D0 02        	bne :+
001147  3  E6 67        	inc z80_h
001149  3               :
001149  3  B1 66        	lda (z80_hl),y 		; address high.
00114B  3  85 65        	sta z80_d
00114D  3               
00114D  3  48           	pha	 		; swap address into hl.
00114E  3  A5 67        	lda z80_h
001150  3  85 65        	sta z80_d
001152  3  68           	pla
001153  3  85 67        	sta z80_h
001155  3  68           	pla
001156  3  85 66        	sta z80_l
001158  3  A5 66        	lda z80_l
00115A  3  85 64        	sta z80_e
00115C  3               	
00115C  3  6C 66 00     	jmp (z80_hl) 		; go there.
00115F  3               
00115F  3  00 00        ogptr:	.word 0			; original sprite pointer.
001161  3               
001161  3               ; Address of each sprite type's routine.
001161  3               
001161  3  E5 18        evtyp0:	.word evnt00
001163  3  7C 1E        evtyp1:	.word evnt01
001165  3  D3 1E        evtyp2:	.word evnt02
001167  3  82 1F        evtyp3:	.word evnt03
001169  3  1B 20        evtyp4:	.word evnt04
00116B  3  17 21        evtyp5:	.word evnt05
00116D  3  8D 21        evtyp6:	.word evnt06
00116F  3  FA 21        evtyp7:	.word evnt07
001171  3  23 22        evtyp8:	.word evnt08
001173  3               
001173  3               ;--------------------------------------------------------------
001173  3               ; Display sprites.
001173  3               ;
001173  3               ; Input:
001173  3               ;  IX = sprite table
001173  3               ;--------------------------------------------------------------
001173  3               
001173  3               dspr:
001173  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
001175  3  8D 06 12     	sta sprcnt
001178  3               dspr0:
001178  3  A0 00        	ldy #0
00117A  3  B1 68        	lda (z80_ix),y 		; get sprite type.
00117C  3  C9 FF        	cmp #255 		; is it enabled?
00117E  3  D0 43        	bne dspr1 		; yes, it needs deleting.
001180  3               dspr5:
001180  3  A0 05        	ldy #5
001182  3  B1 68        	lda (z80_ix),y 		; new type.
001184  3  C9 FF        	cmp #255		; is it enabled?
001186  3  D0 78        	bne dspr3 		; yes, it needs drawing.
001188  3               dspr2:
001188  3  A0 05        	ldy #5
00118A  3  B1 68        	lda (z80_ix),y 		; copy new type.
00118C  3  A0 00        	ldy #0
00118E  3  91 68        	sta (z80_ix),y
001190  3  A0 06        	ldy #6
001192  3  B1 68        	lda (z80_ix),y 		; copy new image number.
001194  3  A0 01        	ldy #1
001196  3  91 68        	sta (z80_ix),y
001198  3  A0 07        	ldy #7
00119A  3  B1 68        	lda (z80_ix),y 		; copy new frame.
00119C  3  A0 02        	ldy #2
00119E  3  91 68        	sta (z80_ix),y
0011A0  3  A0 08        	ldy #8
0011A2  3  B1 68        	lda (z80_ix),y 		; copy new y.
0011A4  3  A0 03        	ldy #3
0011A6  3  91 68        	sta (z80_ix),y
0011A8  3  A0 09        	ldy #9
0011AA  3  B1 68        	lda (z80_ix),y 		; copy new x.
0011AC  3  A0 04        	ldy #4
0011AE  3  91 68        	sta (z80_ix),y
0011B0  3               
0011B0  3  18           	clc
0011B1  3  A5 68        	lda z80_x
0011B3  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
0011B5  3  85 68        	sta z80_x
0011B7  3  A5 69        	lda z80_i
0011B9  3  69 00        	adc #0
0011BB  3  85 69        	sta z80_i 		; next sprite.
0011BD  3  CE 06 12     	dec sprcnt
0011C0  3  D0 B6        	bne dspr0		; repeat for remaining sprites.
0011C2  3  60           	rts
0011C3  3               dspr1:
0011C3  3  A0 05        	ldy #5
0011C5  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
0011C7  3  C9 FF        	cmp #255		; is this enabled?
0011C9  3  D0 06        	bne dspr4 		; yes, display both.
0011CB  3               dspr6:
0011CB  3  20 9B 12     	jsr sspria 		; show single sprite.
0011CE  3  4C 88 11     	jmp dspr2
0011D1  3               
0011D1  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
0011D1  3               
0011D1  3               dspr4:
0011D1  3  A0 04        	ldy #4
0011D3  3  B1 68        	lda (z80_ix),y		; old x.
0011D5  3  A0 09        	ldy #9
0011D7  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
0011D9  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
0011DB  3               
0011DB  3  A0 03        	ldy #3
0011DD  3  B1 68        	lda (z80_ix),y		; old y.
0011DF  3  A0 08        	ldy #8
0011E1  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0011E3  3  D0 15        	bne dspr7		; they differ, need to redraw.
0011E5  3               
0011E5  3  A0 02        	ldy #2
0011E7  3  B1 68        	lda (z80_ix),y 		; old frame.
0011E9  3  A0 07        	ldy #7
0011EB  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0011ED  3  4C FA 11     	jmp dspr7 		; they differ, need to redraw.
0011F0  3               
0011F0  3  A0 01        	ldy #1
0011F2  3  B1 68        	lda (z80_ix),y 		; old image.
0011F4  3  A0 06        	ldy #6
0011F6  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0011F8  3  F0 8E        	beq dspr2		; everything is the same, don't redraw.
0011FA  3               dspr7:
0011FA  3  20 B2 12     	jsr sspric 		; delete old sprite, draw new one simultaneously.
0011FD  3  4C 88 11     	jmp dspr2
001200  3               dspr3:
001200  3  20 AC 12     	jsr ssprib 		; show single sprite.
001203  3  4C 88 11     	jmp dspr2
001206  3               
001206  3  00           sprcnt:	.byte 0
001207  3               
001207  3               ;-----------------------------------------
001207  3               ; Get sprite address calculations.
001207  3               ; gspran = new sprite, gsprad = old sprite.
001207  3               ;
001207  3               ; Input:
001207  3               ;  IX = sprite address
001207  3               ;-----------------------------------------
001207  3               
001207  3               gspran:
001207  3  A0 08        	ldy #8
001209  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
00120B  3  8D 65 02     	sta dispy
00120E  3  A0 09        	ldy #9
001210  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
001212  3  8D 64 02     	sta dispx
001215  3  A0 06        	ldy #6
001217  3  B1 68        	lda (z80_ix),y 		; new sprite image.
001219  3  20 B5 15     	jsr gfrm		; fetch start frame for this sprite.
00121C  3               
00121C  3  A0 00        	ldy #0
00121E  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
001220  3  A0 07        	ldy #7
001222  3  18           	clc
001223  3  71 68        	adc (z80_ix),y 		; new add frame number.
001225  3  4C 46 12     	jmp gspra0
001228  3               
001228  3               ;-----------------------------------------
001228  3               ; Calculate old sprite address
001228  3               ;
001228  3               ; Input:
001228  3               ;  IX = sprite address
001228  3               ;
001228  3               ; Output:
001228  3               ;  B  = right byte mask
001228  3               ;  C  = left byte mask
001228  3               ;  DE = spriteframe address
001228  3               ;  scraddr = screenaddress(dispx,dispy)
001228  3               ;-----------------------------------------
001228  3               
001228  3               gsprad:
001228  3  A0 03        	ldy #3
00122A  3  B1 68        	lda (z80_ix),y		; y coordinate.
00122C  3  8D 65 02     	sta dispy
00122F  3  A0 04        	ldy #4
001231  3  B1 68        	lda (z80_ix),y		; x coordinate.
001233  3  8D 64 02     	sta dispx
001236  3  A0 01        	ldy #1
001238  3  B1 68        	lda (z80_ix),y 		; sprite image.
00123A  3  20 B5 15     	jsr gfrm 		; fetch start frame for this sprite.
00123D  3               
00123D  3  A0 00        	ldy #0
00123F  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
001241  3  A0 02        	ldy #2
001243  3  18           	clc
001244  3  71 68        	adc (z80_ix),y 		; add frame number.
001246  3               gspra0:
001246  3  4A           	lsr a	  		; multiply by 128.
001247  3  85 65        	sta z80_d 		; store in d.
001249  3  A9 00        	lda #0
00124B  3  6A           	ror a
00124C  3  85 64        	sta z80_e 		; got low byte.
00124E  3               
00124E  3  18           	clc 			; address of play sprites.
00124F  3  A5 64        	lda z80_e
001251  3  69 AD        	adc #<sprgfx
001253  3  85 64        	sta z80_e
001255  3  A5 65        	lda z80_d
001257  3  69 2C        	adc #>sprgfx
001259  3  85 65        	sta z80_d
00125B  3               
00125B  3  AD 64 02     	lda dispx 		; y coordinate.
00125E  3  29 06        	and #6 			; position within byte boundary.
001260  3  AA           	tax	 		; low byte of table displacement.
001261  3               
001261  3  0A           	asl a	  		; multiply by 32.
001262  3  0A           	asl a  			; already a multiple
001263  3  0A           	asl a  			; of 2, so just 4
001264  3  0A           	asl a  			; shifts needed.
001265  3               
001265  3  18           	clc 			; add to sprite address.
001266  3  65 64        	adc z80_e
001268  3  85 64        	sta z80_e
00126A  3  90 02        	bcc :+
00126C  3  E6 65        	inc z80_d
00126E  3               :
00126E  3  BD 93 12     	lda spmask,x		 ; pointer to mask table.
001271  3  85 62        	sta z80_c 		; left mask.
001273  3  BD 94 12     	lda spmask+1,x
001276  3  85 63        	sta z80_b 		; right mask.
001278  3               
001278  3               ;------------------------------------------------------------------
001278  3               ; Drop into screen address routine.
001278  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
001278  3               ;------------------------------------------------------------------
001278  3               
001278  3               scadd:
001278  3  AE 65 02     	ldx dispy
00127B  3  E0 C0        	cpx #192
00127D  3  90 02        	bcc :+
00127F  3  A2 C0        	ldx #192
001281  3               :
001281  3  AD 64 02     	lda dispx
001284  3  4A           	lsr a
001285  3  4A           	lsr a
001286  3  4A           	lsr a
001287  3  18           	clc
001288  3  7D 00 9D     	adc SCADTB_lb,x
00128B  3  85 80        	sta scraddr
00128D  3  BD 00 9E     	lda SCADTB_hb,x
001290  3  85 81        	sta scraddr+1
001292  3  60           	rts
001293  3               
001293  3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
001297  3  0F F0 03 FC  
00129B  3               
00129B  3               
00129B  3               ;-----------------------------------------------------------------
00129B  3               ; These are the sprite routines.
00129B  3               ; sspria = single sprite, old (ix).
00129B  3               ; ssprib = single sprite, new (ix+5).
00129B  3               ; sspric = both sprites, old (ix) and new (ix+5).
00129B  3               ;-----------------------------------------------------------------
00129B  3               
00129B  3               sspria:
00129B  3  20 28 12     	jsr gsprad		; get old sprite address.
00129E  3               sspri2:
00129E  3  A9 10        	lda #16			; vertical lines.
0012A0  3  8D 7B 00     	sta acnt
0012A3  3               sspri0:
0012A3  3  20 D5 12     	jsr dline		; draw a line.
0012A6  3  CE 7B 00     	dec acnt
0012A9  3  D0 F8        	bne sspri0		; repeat 16 times
0012AB  3  60           	rts
0012AC  3               
0012AC  3               acnt = $7b
0012AC  3               
0012AC  3               ;-----------------------------------------------------------------
0012AC  3               
0012AC  3               ssprib:
0012AC  3  20 07 12     	jsr gspran 		; get new sprite address.
0012AF  3  4C 9E 12     	jmp sspri2
0012B2  3               
0012B2  3               ;-----------------------------------------------------------------
0012B2  3               
0012B2  3               ccnt = $7c
0012B2  3               
0012B2  3               sspric:
0012B2  3  20 28 12     	jsr gsprad 		; get old sprite address.
0012B5  3  20 2B 6F     	jsr exx  		; store addresses.
0012B8  3  20 07 12     	jsr gspran 		; get new sprite addresses.
0012BB  3               
0012BB  3  A9 0F        	lda #15
0012BD  3  85 7C        	sta ccnt
0012BF  3               lloop:
0012BF  3  20 D5 12     	jsr dline 		; draw a line.
0012C2  3  20 2B 6F     	jsr exx  		; restore old addresses.
0012C5  3  20 D5 12     	jsr dline 		; delete a line.
0012C8  3  20 2B 6F     	jsr exx  		; flip to new sprite addresses.
0012CB  3  C6 7C        	dec ccnt
0012CD  3  D0 F0        	bne lloop
0012CF  3               
0012CF  3  20 D5 12     	jsr dline		; draw a line.
0012D2  3  20 2B 6F     	jsr exx 		; restore old addresses.
0012D5  3               
0012D5  3               ;-------------------------------------------------------------
0012D5  3               ; Drop through.
0012D5  3               ; Line drawn, now work out next target address.
0012D5  3               ;
0012D5  3               ; Input:
0012D5  3               ;  B  = right mask
0012D5  3               ;  C  = left mask
0012D5  3               ;  DE = spriteaddress
0012D5  3               ;  scraddr = screen address
0012D5  3               ;-------------------------------------------------------------
0012D5  3               
0012D5  3               dline:
0012D5  3  A0 00        	ldy #0
0012D7  3  B1 64        	lda (z80_de),y 		; graphic data.
0012D9  3  25 62        	and z80_c 		; mask away what's not needed.
0012DB  3  51 80        	eor (scraddr),y 	; XOR with what's there.
0012DD  3  91 80        	sta (scraddr),y 	; bung it in.
0012DF  3               
0012DF  3  E6 80        	inc scraddr 		; next screen address.
0012E1  3  E6 80        	inc scraddr 		; next screen address.
0012E3  3               
0012E3  3  B1 64        	lda (z80_de),y 		; fetch data.
0012E5  3  25 63        	and z80_b 		; mask away unwanted bits.
0012E7  3  51 80        	eor (scraddr),y 	; XOR with what's there.
0012E9  3  91 80        	sta (scraddr),y 	; bung it in.
0012EB  3               
0012EB  3  E6 64        	inc z80_e 		; next graphic.
0012ED  3  D0 02        	bne :+
0012EF  3  E6 65        	inc z80_d
0012F1  3               :
0012F1  3  C6 80        	dec scraddr 		; one character cell to the left.
0012F3  3               
0012F3  3  B1 64        	lda (z80_de),y 		; second bit of data.
0012F5  3  51 80        	eor (scraddr),y 	; XOR with what's there.
0012F7  3  91 80        	sta (scraddr),y 	; bung it in.
0012F9  3               
0012F9  3  E6 64        	inc z80_e 		; point to next line of data.
0012FB  3  D0 02        	bne :+
0012FD  3  E6 65        	inc z80_d
0012FF  3               :
0012FF  3  C6 80        	dec scraddr 		; another char left.
001301  3               
001301  3               ;----------------------------------------------------------------------
001301  3               ; Line drawn, now work out next target address.
001301  3               ;----------------------------------------------------------------------
001301  3               
001301  3               nline:
001301  3  18           	clc
001302  3  A5 80        	lda scraddr 		; get low byte of address.
001304  3  69 20        	adc #$20
001306  3  85 80        	sta scraddr 		; new low byte of address.
001308  3  90 02        	bcc :+
00130A  3  E6 81        	inc scraddr+1 		; new high byte of address.
00130C  3               :
00130C  3  60           	rts
00130D  3               
00130D  3               ; Attributes filled, now work out next attribute address.
00130D  3               
00130D  3               nattr:
00130D  3               	; 22.03.xx inc h 	; increment pixel.
00130D  3  E6 67        	inc z80_h
00130F  3               
00130F  3               	; 29.03.03 ld a, h 	; get pixel address.
00130F  3  A5 67        	lda z80_h
001311  3  85 61        	sta z80_a
001313  3               
001313  3               	; 02.05.xx and 7 	; straddling character position?
001313  3  A5 61        	lda z80_a
001315  3  29 07        	and #7
001317  3               
001317  3               	; 43.06.xx rts nz 	; no, we"re on next line already.
001317  3  F0 01        	beq :+
001319  3  60           	rts
00131A  3               :
00131A  3               	; 29.03.03 ld a, h 	; get pixel address.
00131A  3  A5 67        	lda z80_h
00131C  3  85 61        	sta z80_a
00131E  3               
00131E  3               	; 63.05.xx sub 8 	; subtract 8 for start of segment.
00131E  3  38           	sec
00131F  3  A5 61        	lda z80_a
001321  3  E9 08        	sbc #(8)
001323  3  85 61        	sta z80_a
001325  3               
001325  3               	; 29.03.03 ld h, a 	; new high byte of address.
001325  3  A5 61        	lda z80_a
001327  3  85 67        	sta z80_h
001329  3               
001329  3               	; 29.03.03 ld a, l 	; get low byte of address.
001329  3  A5 66        	lda z80_l
00132B  3  85 61        	sta z80_a
00132D  3               
00132D  3               	; 01.03.05 add a, 32 	; one line down.
00132D  3  A9 20        	lda #(32)
00132F  3  18           	clc
001330  3  65 61        	adc z80_a
001332  3  85 61        	sta z80_a
001334  3               
001334  3               	; 29.03.03 ld l, a 	; new low byte.
001334  3  A5 61        	lda z80_a
001336  3  85 66        	sta z80_l
001338  3               
001338  3               	; 43.06.xx rts nc 	; not reached next segment yet.
001338  3  B0 01        	bcs :+
00133A  3  60           	rts
00133B  3               :
00133B  3               	; 29.03.03 ld a, h 	; address high.
00133B  3  A5 67        	lda z80_h
00133D  3  85 61        	sta z80_a
00133F  3               
00133F  3               	; 01.03.05 add a, 8 	; add 8 to next segment.
00133F  3  A9 08        	lda #(8)
001341  3  18           	clc
001342  3  65 61        	adc z80_a
001344  3  85 61        	sta z80_a
001346  3               
001346  3               	; 29.03.03 ld h, a 	; new high byte.
001346  3  A5 61        	lda z80_a
001348  3  85 67        	sta z80_h
00134A  3               
00134A  3               	; 06.05.xx cp 120 	; reached end of screen?
00134A  3  A5 61        	lda z80_a
00134C  3  C9 78        	cmp #120
00134E  3               
00134E  3               	; 43.06.xx rts c 	; not yet.
00134E  3  90 01        	bcc :+
001350  3  60           	rts
001351  3               :
001351  3               	; 29.03.05 ld h, 0 	; back to ROM.
001351  3  A9 00        	lda #0; back to ROM.
001353  3  85 67        	sta z80_h
001355  3               
001355  3               	; 43.xx.xx rts  	
001355  3  60           	rts
001356  3               
001356  3               
001356  3               ;-----------------------------------------------------------
001356  3               ; Animates a sprite.
001356  3               ;
001356  3               ; Input:
001356  3               ;  IX = sprite address
001356  3               ;  HL = last sprite address
001356  3               ;-----------------------------------------------------------
001356  3               
001356  3               animsp:
001356  3  A0 06        	ldy #6
001358  3  B1 68        	lda (z80_ix),y		; sprite image
00135A  3  20 B5 15     	jsr gfrm		; get frame data.
00135D  3               
00135D  3  E6 66        	inc z80_l		; point to frames.
00135F  3  D0 02        	bne :+
001361  3  E6 67        	inc z80_h
001363  3               :
001363  3  A0 07        	ldy #7
001365  3  B1 68        	lda (z80_ix),y		; sprite frame.
001367  3  18           	clc
001368  3  69 01        	adc #1			; next one along.
00136A  3  A0 00        	ldy #0
00136C  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
00136E  3  90 02        	bcc anims0		; no, not yet.
001370  3  A9 00        	lda #0			; start at first frame.
001372  3               anims0:
001372  3  A0 07        	ldy #7
001374  3  91 68        	sta (z80_ix),y		; new frame.
001376  3  60           	rts
001377  3               
001377  3               ;--------------------------------------------------------------
001377  3               ; Animate back
001377  3               ;
001377  3               ; Input:
001377  3               ;  IX = sprite address
001377  3               ;  HL = last sprite address
001377  3               ;--------------------------------------------------------------
001377  3               
001377  3               animbk:
001377  3  A0 06        	ldy #6
001379  3  B1 68        	lda (z80_ix),y		; sprite image.
00137B  3  20 B5 15     	jsr gfrm		; get frame data.
00137E  3               
00137E  3  E6 66        	inc z80_l 		; point to frames.
001380  3  D0 02        	bne :+
001382  3  E6 67        	inc z80_h
001384  3               :
001384  3  A0 07        	ldy #7
001386  3  B1 68        	lda (z80_ix),y 		; sprite frame.
001388  3  F0 03        	beq :+
00138A  3  4C 91 13     	jmp rtanb0 		; yes, start at end.
00138D  3               :
00138D  3  A0 00        	ldy #0
00138F  3  B1 66        	lda (z80_hl),y 		; last sprite.
001391  3               rtanb0:
001391  3  38           	sec
001392  3  E9 01        	sbc #1			; next one along.
001394  3  4C 72 13     	jmp anims0		; set new frame.
001397  3               
001397  3               ;--------------------------------------------------------------
001397  3               ; Check for collision with other sprite, strict enforcement.
001397  3               ;
001397  3               ; Input:
001397  3               ;  b		= sprite to test for
001397  3               ;  ix		= current sprite pointer
001397  3               ;
001397  3               ; global:	b
001397  3               ; local:	x,y,hl,de,skptr
001397  3               ; calls:	-
001397  3               ;--------------------------------------------------------------
001397  3               
001397  3               sktyp:
001397  3  A9 A6        	lda #<sprtab				; sprite table.
001399  3  85 66        	sta z80_l
00139B  3  A9 17        	lda #>sprtab
00139D  3  85 67        	sta z80_h
00139F  3               numsp2:
00139F  3  A9 0C        	lda #NUMSPR				; number of sprites.
0013A1  3  8D DA 13     	sta sktptr
0013A4  3               sktyp0:
0013A4  3  A5 66        	lda z80_l 				; store pointer to sprite.
0013A6  3  8D D8 13     	sta skptr
0013A9  3  A5 67        	lda z80_h
0013AB  3  8D D9 13     	sta skptr+1
0013AE  3               
0013AE  3  A0 00        	ldy #0
0013B0  3  B1 66        	lda (z80_hl),y 				; get sprite type.
0013B2  3  C5 63        	cmp z80_b				; is it the type we seek?
0013B4  3  F0 25        	beq coltyp				; yes, we can use this one.
0013B6  3               :
0013B6  3               sktyp1:
0013B6  3  18           	clc
0013B7  3  AD D8 13     	lda skptr				; retrieve sprite pointer.
0013BA  3  69 11        	adc #TABSIZ				; size of each entry.
0013BC  3  85 66        	sta z80_l
0013BE  3  AD D9 13     	lda skptr+1
0013C1  3  69 00        	adc #0
0013C3  3  85 67        	sta z80_h
0013C5  3  CE DA 13     	dec sktptr					; one less iteration.
0013C8  3  D0 DA        	bne sktyp0				; keep going until we find a slot.
0013CA  3               :
0013CA  3  A9 00        	lda #0					; default to ROM address - no sprite.
0013CC  3  85 66        	sta z80_l
0013CE  3  85 67        	sta z80_h
0013D0  3  8D D8 13     	sta skptr				; store pointer to sprite.
0013D3  3  8D D9 13     	sta skptr+1
0013D6  3               
0013D6  3  18           	clc					; don't return with zero flag set.
0013D7  3  60           	rts 					; didn't find one.
0013D8  3               
0013D8  3  00 00        skptr:	.word 0					; search pointer.
0013DA  3  00           sktptr:	.byte 0
0013DB  3               
0013DB  3               coltyp:
0013DB  3  A0 00        	ldy #0
0013DD  3  B1 68        	lda (z80_ix),y				; current sprite type.
0013DF  3  C5 63        	cmp z80_b				; seeking sprite of same type?
0013E1  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
0013E3  3               colty0:
0013E3  3  A0 09        	ldy #9					; distance to x position in table.
0013E5  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
0013E7  3  85 64        	sta z80_e
0013E9  3  88           	dey
0013EA  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
0013EC  3  85 65        	sta z80_d
0013EE  3               
0013EE  3               ;	clc
0013EE  3               ;	lda z80_l
0013EE  3               ;	adc #9
0013EE  3               ;	sta z80_l
0013EE  3               ;	bcc :+
0013EE  3               ;	inc z80_h
0013EE  3               :
0013EE  3               ; Drop into collision detection.
0013EE  3               
0013EE  3               colc16:
0013EE  3  A0 09        	ldy #9
0013F0  3  B1 68        	lda (z80_ix),y			 	; x coord.
0013F2  3  38           	sec					; subtract x.
0013F3  3  E5 64        	sbc z80_e
0013F5  3  B0 05        	bcs  colc1a 				; result is positive.
0013F7  3  49 FF        	eor #$ff				; make negative positive.
0013F9  3  18           	clc
0013FA  3  69 01        	adc #1
0013FC  3               colc1a:
0013FC  3  C9 10        	cmp #16 				; within x range?
0013FE  3  B0 B6        	bcs sktyp1				; no - they"ve missed.
001400  3  85 62        	sta z80_c				; store difference.
001402  3               
001402  3  A0 08        	ldy #8
001404  3  B1 68        	lda (z80_ix),y				; y coord.
001406  3  38           	sec
001407  3  E5 65        	sbc z80_d				; subtract y.
001409  3  B0 05        	bcs colc1b				; result is positive.
00140B  3  49 FF        	eor #$ff				; make negative positive.
00140D  3  18           	clc
00140E  3  69 01        	adc #1
001410  3               colc1b:
001410  3  C9 10        	cmp #16					; within y range?
001412  3  B0 A2        	bcs sktyp1 				; no - they've missed.
001414  3  18           	clc					; add x difference.
001415  3  65 62        	adc z80_c
001417  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
001419  3  B0 02        	bcs :+
00141B  3  38           	sec
00141C  3  60           	rts 					; carry set if there's a collision.
00141D  3               :
00141D  3  4C B6 13     	jmp sktyp1				; try next sprite in table.
001420  3               colty1:
001420  3  A5 68        	lda z80_x  				; compare the two.
001422  3  C5 66        	cmp z80_l
001424  3  D0 09        	bne end_col
001426  3  A5 69        	lda z80_i
001428  3  C5 67        	cmp z80_h
00142A  3  D0 03        	bne end_col
00142C  3  4C B6 13     	jmp sktyp1 				; addresses are identical.
00142F  3               end_col:
00142F  3  4C E3 13     	jmp colty0
001432  3               
001432  3               ;-----------------------------------------------------------
001432  3               ; Display number, left aligned
001432  3               ; 
001432  3               ; Input:
001432  3               ;  a		= number
001432  3               ;
001432  3               ; global:	-
001432  3               ; local:	a,y,bc,hl,displ0
001432  3               ; calls:	num2ch,dmsg3
001432  3               ;-----------------------------------------------------------
001432  3               
001432  3               disply:
001432  3  85 61        	sta z80_a
001434  3  A9 5A        	lda #<displ0				; display workspace.
001436  3  85 62        	sta z80_c
001438  3  A9 14        	lda #>displ0
00143A  3  85 63        	sta z80_b
00143C  3  A5 61        	lda z80_a
00143E  3  20 85 05     	jsr num2ch				; convert accumulator to string.
001441  3               
001441  3  C6 62        	dec z80_c				; back one character.
001443  3  D0 02        	bne :+
001445  3  C6 63        	dec z80_b
001447  3               :
001447  3  A0 00        	ldy #0
001449  3  B1 62        	lda (z80_bc),y				; fetch digit.
00144B  3  09 80        	ora #128				; insert end marker.
00144D  3  91 62        	sta (z80_bc),y				; new value.
00144F  3               
00144F  3  A9 5A        	lda #<displ0				; display space.
001451  3  85 66        	sta z80_l
001453  3  A9 14        	lda #>displ0
001455  3  85 67        	sta z80_h
001457  3  4C 15 0F     	jmp dmsg3				; display the string.
00145A  3               
00145A  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
00145E  3               
00145E  3               ;----------------------------------------------------------------
00145E  3               ; Initialise screen.
00145E  3               ;
00145E  3               ; global:	roomtb,scno
00145E  3               ; local:	-
00145E  3               ; calls:	tstcs
00145E  3               ;----------------------------------------------------------------
00145E  3               
00145E  3               initsc:
00145E  3  AD 83 18     	lda roomtb 			; whereabouts in the map are we?
001461  3  20 6C 14     	jsr tstsc 			; find displacement.
001464  3  C9 FF        	cmp #255 			; is it valid?
001466  3  F0 03        	beq init_end 			; no, it's rubbish.
001468  3  8D 3F 02     	sta scno			; store new room number.
00146B  3               init_end:
00146B  3  60           	rts
00146C  3               
00146C  3               ;----------------------------------------------------------------
00146C  3               ; Test screen.
00146C  3               ;
00146C  3               ; global:	-
00146C  3               ; local:	x
00146C  3               ; calls:	-
00146C  3               ;----------------------------------------------------------------
00146C  3               
00146C  3               tstsc:
00146C  3  8D 77 14     	sta tmproom
00146F  3  18           	clc
001470  3  69 0B        	adc #MAPWID 			; add width in case we"re negative.
001472  3  AA           	tax 				; add displacement to map data.
001473  3  BD 8C 18     	lda mapdat-MAPWID,x 		; find room number there.
001476  3  60           	rts
001477  3               
001477  3  00           tmproom:	.byte 0
001478  3               
001478  3               ;--------------------------
001478  3               ; Screen left.
001478  3               ;--------------------------
001478  3               
001478  3               scrl:
001478  3  AD 83 18     	lda roomtb 			; present room table pointer.
00147B  3  38           	sec
00147C  3  E9 01        	sbc #1				; room left.
00147E  3               scrl0:
00147E  3  20 6C 14     	jsr tstsc			; test screen.
001481  3  C9 FF        	cmp #255			; is there a screen this way?
001483  3  D0 01        	bne :+
001485  3  60           	rts				; no, return to loop.
001486  3               :
001486  3  AD 77 14     	lda tmproom			; restore room displacement.
001489  3  8D 83 18     	sta roomtb			; new room table position.
00148C  3               scrl1:
00148C  3  20 5E 14     	jsr initsc 			; set new screen.
00148F  3  A9 02        	lda #2
001491  3  8D 61 02     	sta restfl 			; set it.
001494  3  60           	rts
001495  3               scrr:
001495  3  AD 83 18     	lda roomtb 			; room table pointer.
001498  3  18           	clc
001499  3  69 01        	adc #1				; room right.
00149B  3  4C 7E 14     	jmp scrl0
00149E  3               scru:
00149E  3  AD 83 18     	lda roomtb 			; room table pointer.
0014A1  3  38           	sec
0014A2  3  E9 0B        	sbc #MAPWID 			; room up.
0014A4  3  4C 7E 14     	jmp scrl0
0014A7  3               scrd:
0014A7  3  AD 83 18     	lda roomtb 			; room table pointer.
0014AA  3  18           	clc
0014AB  3  69 0B        	adc #MAPWID 			; room down.
0014AD  3  4C 7E 14     	jmp scrl0
0014B0  3               
0014B0  3               ;-----------------------------------------
0014B0  3               ; Jump to new screen.
0014B0  3               ;-----------------------------------------
0014B0  3               
0014B0  3               nwscr:
0014B0  3  A2 00        	ldx #0				; start of map data.
0014B2  3               nwscr0:
0014B2  3  DD 97 18     	cmp mapdat,x
0014B5  3  F0 06        	beq nwscr1			; have we found a match for screen?
0014B7  3  E8           	inx 				; next room.
0014B8  3  E0 50        	cpx #80				; zero room count, 80 to search.
0014BA  3  D0 F6        	bne nwscr0			; keep looking.
0014BC  3  60           	rts
0014BD  3               nwscr1:
0014BD  3  8E 83 18     	stx roomtb			; set the map position.
0014C0  3  4C 8C 14     	jmp scrl1			; draw new room.
0014C3  3               
0014C3  3               
0014C3  3               ;----------------------------------------------------------
0014C3  3               ; Gravity processing.
0014C3  3               ;----------------------------------------------------------
0014C3  3               
0014C3  3               grav:
0014C3  3  A0 0D        	ldy #13
0014C5  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0014C7  3  85 66        	sta z80_l
0014C9  3  A0 0E        	ldy #14
0014CB  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0014CD  3  85 67        	sta z80_h
0014CF  3  05 66        	ora z80_l			; merge in low byte.
0014D1  3  D0 01        	bne :+
0014D3  3  60           	rts				; if neither is set, we're not in the air.
0014D4  3               :
0014D4  3  A0 00        	ldy #0
0014D6  3  B1 66        	lda (z80_hl),y			; pixels to move.
0014D8  3  85 61        	sta z80_a
0014DA  3               ;	cmp #98				; reached the end?
0014DA  3               ;	beq grav2			; yes, continue.
0014DA  3  C9 63        	cmp #99				; reached the end?
0014DC  3  D0 06        	bne grav0			; no, continue.
0014DE  3               grav2:
0014DE  3  C6 66        	dec z80_l			; go back to previous value.
0014E0  3  B1 66        	lda (z80_hl),y			; fetch that from table.
0014E2  3  85 61        	sta z80_a
0014E4  3               grav0:
0014E4  3  E6 66        	inc z80_l			; point to next table entry.
0014E6  3  A5 66        	lda z80_l
0014E8  3  A0 0D        	ldy #13
0014EA  3  91 68        	sta (z80_ix),y			; store new pointer low.
0014EC  3  A5 67        	lda z80_h
0014EE  3  A0 0E        	ldy #14
0014F0  3  91 68        	sta (z80_ix),y			; store new pointer high.
0014F2  3               grav1:
0014F2  3  A5 61        	lda z80_a
0014F4  3  D0 01        	bne :+				; any movement required?
0014F6  3  60           	rts				; no, not this time.
0014F7  3               :
0014F7  3  A5 61        	lda z80_a
0014F9  3  C9 80        	cmp #128			; is it up or down?
0014FB  3  B0 15        	bcs gravu			; it's up.
0014FD  3               gravd:
0014FD  3  85 63        	sta z80_b			; set pixels to move.
0014FF  3               gravd0:
0014FF  3  20 53 0C     	jsr cangd			; can we go down?
001502  3  D0 28        	bne gravst			; can't move down, so stop.
001504  3  A0 08        	ldy #8
001506  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
001508  3  18           	clc
001509  3  69 01        	adc #1
00150B  3  91 68        	sta (z80_ix),y
00150D  3  C6 63        	dec z80_b
00150F  3  D0 EE        	bne gravd0
001511  3  60           	rts
001512  3               gravu:
001512  3  49 FF        	eor #$ff			; flip the sign so it's positive.
001514  3  18           	clc
001515  3  69 01        	adc #1
001517  3  85 63        	sta z80_b			; set pixels to move.
001519  3               gravu0:
001519  3  20 1B 0C     	jsr cangu			; can we go up?
00151C  3  D0 71        	bne ifalls			; can't move up, go down next.
00151E  3  A0 08        	ldy #8
001520  3  B1 68        	lda (z80_ix),y
001522  3  38           	sec
001523  3  E9 01        	sbc #1
001525  3  91 68        	sta (z80_ix),y			; adjust new x coord.
001527  3  C6 63        	dec z80_b
001529  3  D0 EE        	bne gravu0
00152B  3  60           	rts
00152C  3               gravst:
00152C  3  A0 0D        	ldy #13
00152E  3  B1 68        	lda (z80_ix),y			; jump pointer low.
001530  3  85 66        	sta z80_l
001532  3  A0 0E        	ldy #14
001534  3  B1 68        	lda (z80_ix),y			; jump pointer high.
001536  3  85 67        	sta z80_h
001538  3               
001538  3  A9 00        	lda #0				; null value in pointer.
00153A  3  A0 0D        	ldy #13
00153C  3  91 68        	sta (z80_ix),y			; store new pointer low.
00153E  3  C8           	iny
00153F  3  91 68        	sta (z80_ix),y			; store new pointer high.
001541  3               
001541  3  A0 00        	ldy #0
001543  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
001545  3  C9 63        	cmp #99				; is it the end marker?
001547  3               evftf:
001547  3  F0 01        	beq :+				; yes, fallen too far.
001549  3  60           	rts
00154A  3               :
00154A  3  4C 69 24     	jmp evnt15			; EVENT FELLTOOFAR
00154D  3               
00154D  3               ;------------------------------------------------
00154D  3               ; Initiate fall check.
00154D  3               ;------------------------------------------------
00154D  3               
00154D  3               ifall:
00154D  3  A0 0D        	ldy #13
00154F  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
001551  3  85 66        	sta z80_l
001553  3  A0 0E        	ldy #14
001555  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
001557  3  85 67        	sta z80_h			; high byte in accumulator.
001559  3  05 66        	ora z80_l			; merge in low byte.
00155B  3  F0 01        	beq :+
00155D  3  60           	rts				; if either is set, we're already in the air.
00155E  3               :
00155E  3  A0 09        	ldy #9
001560  3  B1 68        	lda (z80_ix),y			; y coordinate.
001562  3  8D 64 02     	sta dispx
001565  3               numsp7:
001565  3  A0 08        	ldy #8
001567  3  B1 68        	lda (z80_ix),y			; look x coordinate.
001569  3  18           	clc
00156A  3  69 10        	adc #16				; add 16 pixels.
00156C  3  8D 65 02     	sta dispy			; set up test coordinates.
00156F  3  20 DB 0D     	jsr tstbl			; get map address.
001572  3  20 ED 0C     	jsr plchk			; block, platform check.
001575  3  F0 01        	beq :+
001577  3  60           	rts				; it's solid, don't fall.
001578  3               :
001578  3  E6 86        	inc bufaddr			; look right one cell.
00157A  3  20 ED 0C     	jsr plchk			; block, platform check.
00157D  3  F0 01        	beq :+
00157F  3  60           	rts				; it's solid, don't fall.
001580  3               :
001580  3  AD 64 02     	lda dispx			; y coordinate.
001583  3  29 07        	and #7				; position straddling block cells.
001585  3  F0 08        	beq ifalls			; no more checks needed.
001587  3  E6 86        	inc bufaddr			; look to third cell.
001589  3  20 ED 0C     	jsr plchk			; block, platform check.
00158C  3  F0 01        	beq :+
00158E  3  60           	rts				; it's solid, don't fall.
00158F  3               :
00158F  3               ifalls:
00158F  3  A9 2B        	lda #<jtab			; jump table start.
001591  3  85 66        	sta z80_l
001593  3  A9 0E        	lda #>jtab
001595  3  85 67        	sta z80_h
001597  3               ifal0:
001597  3  E6 66        	inc z80_l			; point to next value.
001599  3  A0 00        	ldy #0
00159B  3  B1 66        	lda (z80_hl),y			; fetch value.
00159D  3  F0 F8        	beq ifal0			; no, get next value.
00159F  3  C9 63        	cmp #99				; reached end of table?
0015A1  3  D0 01        	bne :+
0015A3  3  60           	rts				; yes, don't fall.
0015A4  3               :
0015A4  3  C9 80        	cmp #128			; is it going up?
0015A6  3  B0 EF        	bcs ifal0			; yes, looking for first movement down.
0015A8  3               
0015A8  3  A0 0D        	ldy #13
0015AA  3  A5 66        	lda z80_l
0015AC  3  91 68        	sta (z80_ix),y 			; set jump low.
0015AE  3  A0 0E        	ldy #14
0015B0  3  A5 67        	lda z80_h
0015B2  3  91 68        	sta (z80_ix),y 			; set jump high.
0015B4  3  60           	rts
0015B5  3               
0015B5  3               
0015B5  3               ;----------------------------------------------------
0015B5  3               ; Get frame data for a particular sprite.
0015B5  3               ; Input:
0015B5  3               ;  a		= framenumer
0015B5  3               ; Output:
0015B5  3               ;  hl		= frame address
0015B5  3               ;
0015B5  3               ; global:	hl,frmptr
0015B5  3               ; local:	-
0015B5  3               ; calls:	-
0015B5  3               ;----------------------------------------------------
0015B5  3               
0015B5  3               gfrm:
0015B5  3  0A           	asl a	 		 	; multiple of 2.
0015B6  3  18           	clc
0015B7  3  6D 66 02     	adc frmptr 			; frames used by game.
0015BA  3  85 66        	sta z80_l
0015BC  3  AD 67 02     	lda frmptr+1
0015BF  3  69 00        	adc #0
0015C1  3  85 67        	sta z80_h 			; point to frame start.
0015C3  3  60           	rts
0015C4  3               
0015C4  3               ;----------------------------------------------------
0015C4  3               ; Find sprite list for current room.
0015C4  3               ;
0015C4  3               ; global:	hl
0015C4  3               ; local:	x,y
0015C4  3               ; calls:	-
0015C4  3               ;----------------------------------------------------
0015C4  3               
0015C4  3               sprlst:
0015C4  3  A9 97        	lda #<nmedat 			; list of enemy sprites.
0015C6  3  85 66        	sta z80_l
0015C8  3  A9 60        	lda #>nmedat
0015CA  3  85 67        	sta z80_h
0015CC  3  AE 3F 02     	ldx scno 			; screen number.
0015CF  3  D0 01        	bne sprls2 			; is it the first screen?
0015D1  3  60           	rts 				; yes, don't need to search data.
0015D2  3               sprls2:
0015D2  3  A0 00        	ldy #0
0015D4  3               sprls1:
0015D4  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
0015D6  3  C9 FF        	cmp #255			; is it an end marker?
0015D8  3  F0 0E        	beq sprls0 			; yes, end of this room.
0015DA  3               
0015DA  3  18           	clc 				; point to next sprite in list.
0015DB  3  A5 66        	lda z80_l
0015DD  3  69 04        	adc #NMESIZ
0015DF  3  85 66        	sta z80_l
0015E1  3  90 02        	bcc :+
0015E3  3  E6 67        	inc z80_h
0015E5  3               :
0015E5  3  4C D4 15     	jmp sprls1 			; continue until end of room.
0015E8  3               sprls0:
0015E8  3  E6 66        	inc z80_l 			; point to start of next screen.s
0015EA  3  D0 02        	bne :+
0015EC  3  E6 67        	inc z80_h
0015EE  3               :
0015EE  3  CA           	dex
0015EF  3  D0 E3        	bne sprls1 			; continue until room found.
0015F1  3  60           	rts
0015F2  3               
0015F2  3               
0015F2  3               ;----------------------------------------------------
0015F2  3               ; Clear all but a single player sprite.
0015F2  3               ;
0015F2  3               ; global:	-
0015F2  3               ; local:	x,y,ix
0015F2  3               ; calls:	-
0015F2  3               ;----------------------------------------------------
0015F2  3               
0015F2  3               nspr:
0015F2  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0015F4  3  8D 06 12     	sta sprcnt
0015F7  3  A9 A6        	lda #<sprtab 			; sprite table.
0015F9  3  85 68        	sta z80_x
0015FB  3  A9 17        	lda #>sprtab
0015FD  3  85 69        	sta z80_i
0015FF  3               nspr0:
0015FF  3  A0 00        	ldy #0 				; fetch sprite type.
001601  3  B1 68        	lda (z80_ix),y 			; is it a player?
001603  3  F0 1B        	beq nspr1 			; yes, keep this one.
001605  3               
001605  3  A9 FF        	lda #255
001607  3  A0 00        	ldy #0 				; fetch sprite type.
001609  3  91 68        	sta (z80_ix),y 			; delete sprite.
00160B  3  A0 05        	ldy #5
00160D  3  91 68        	sta (z80_ix),y 			; remove next type.
00160F  3               
00160F  3  18           	clc	 			; next sprite.
001610  3  A5 68        	lda z80_x
001612  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001614  3  85 68        	sta z80_x
001616  3  90 02        	bcc :+
001618  3  E6 69        	inc z80_i
00161A  3               :
00161A  3  CE 06 12     	dec sprcnt	 			; one less space in the table.
00161D  3  D0 E0        	bne nspr0
00161F  3  60           	rts
001620  3               nspr1:
001620  3  A9 FF        	lda #255
001622  3  A0 00        	ldy #0
001624  3  91 68        	sta (z80_ix),y 			; delete sprite.
001626  3               
001626  3  18           	clc	 			; point to next sprite.
001627  3  A5 68        	lda z80_x
001629  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00162B  3  85 68        	sta z80_x
00162D  3  90 02        	bcc :+
00162F  3  E6 69        	inc z80_i
001631  3               :
001631  3  CE 06 12     	dec sprcnt	 			; one less to do.
001634  3  D0 01        	bne nspr2
001636  3  60           	rts
001637  3               nspr2:
001637  3  A9 FF        	lda #255
001639  3  A0 00        	ldy #0
00163B  3  91 68        	sta (z80_ix),y 			; delete sprite.
00163D  3  A0 05        	ldy #5
00163F  3  91 68        	sta (z80_ix),y 			; remove next type.
001641  3               
001641  3  18           	clc	 			; next sprite.
001642  3  A5 68        	lda z80_x
001644  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001646  3  85 68        	sta z80_x
001648  3  90 02        	bcc :+
00164A  3  E6 69        	inc z80_i
00164C  3               :
00164C  3  CE 06 12     	dec sprcnt	 			; one less space in table.
00164F  3  D0 E6        	bne nspr2
001651  3  60           	rts
001652  3               
001652  3               ;----------------------------------------------------------
001652  3               ; Two initialisation routines.
001652  3               ; Initialise sprites - copy everything from list to table.
001652  3               ;
001652  3               ; global:	-
001652  3               ; local:	x,y,ix
001652  3               ; calls:	cpsp
001652  3               ;----------------------------------------------------------
001652  3               
001652  3               ispr:
001652  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001654  3  8D 06 12     	sta sprcnt
001657  3  A9 A6        	lda #<sprtab			; sprite table.
001659  3  85 68        	sta z80_x
00165B  3  A9 17        	lda #>sprtab
00165D  3  85 69        	sta z80_i
00165F  3               ispr2:
00165F  3  A0 00        	ldy #0
001661  3  B1 66        	lda (z80_hl),y 			; fetch byte.
001663  3  C9 FF        	cmp #255 			; is it an end marker?
001665  3  D0 01        	bne :+
001667  3  60           	rts 				; yes, no more to do.
001668  3               :
001668  3               ispr1:
001668  3  A0 00        	ldy #0
00166A  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
00166C  3  C9 FF        	cmp #255 			; is it enabled yet?
00166E  3  D0 08        	bne ispr4			; yes, try another slot.
001670  3               
001670  3  A0 05        	ldy #5
001672  3  B1 68        	lda (z80_ix),y		 	; next type.
001674  3  C9 FF        	cmp #255 			; is it enabled yet?
001676  3  F0 11        	beq ispr3 			; no, process this one.
001678  3               ispr4:
001678  3  18           	clc 				; next sprite.
001679  3  A5 68        	lda z80_x
00167B  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00167D  3  85 68        	sta z80_x
00167F  3  90 02        	bcc :+
001681  3  E6 69        	inc z80_i
001683  3               :
001683  3  CE 06 12     	dec sprcnt
001686  3  D0 E0        	bne ispr1 			; repeat for remaining sprites.
001688  3  60           	rts  				; no more room in table.
001689  3               ispr3:
001689  3  20 DD 16     	jsr cpsp			; initialise a sprite.
00168C  3  CE 06 12     	dec sprcnt			; one less space in the table.
00168F  3  D0 CE        	bne ispr2
001691  3  60           	rts
001692  3               
001692  3               
001692  3               ;-----------------------------------------------------------------------
001692  3               ; Initialise sprites - but not player, we're keeping the old one.
001692  3               ;
001692  3               ; global:	-
001692  3               ; local:	x,y,ix
001692  3               ; calls:	cpsp
001692  3               ;-----------------------------------------------------------------------
001692  3               
001692  3               kspr:
001692  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
001694  3  A9 A6        	lda #<sprtab 			; sprite table.
001696  3  85 68        	sta z80_x
001698  3  A9 17        	lda #>sprtab
00169A  3  85 69        	sta z80_i
00169C  3               kspr2:
00169C  3  A0 00        	ldy #0
00169E  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0016A0  3  C9 FF        	cmp #255 			; is it an end marker?
0016A2  3  D0 01        	bne :+
0016A4  3  60           	rts 				; yes, no more to do.
0016A5  3               :
0016A5  3  C9 00        	cmp #0
0016A7  3  D0 0E        	bne kspr1 			; no, add to table as normal.
0016A9  3               
0016A9  3  18           	clc 				; next sprite.
0016AA  3  A5 66        	lda z80_l
0016AC  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
0016AE  3  85 66        	sta z80_l
0016B0  3  90 02        	bcc :+
0016B2  3  E6 67        	inc z80_h
0016B4  3               :
0016B4  3  4C 9C 16     	jmp kspr2
0016B7  3               kspr1:
0016B7  3  A0 00        	ldy #0 				; fetch sprite type.
0016B9  3  B1 68        	lda (z80_ix),y
0016BB  3  C9 FF        	cmp #255 			; is it enabled yet?
0016BD  3  D0 08        	bne kspr4 			; yes, try another slot.
0016BF  3               
0016BF  3  A0 05        	ldy #5 				; next type.
0016C1  3  B1 68        	lda (z80_ix),y
0016C3  3  C9 FF        	cmp #255 			; is it enabled yet?
0016C5  3  F0 0F        	beq kspr3 			; no, process this one.
0016C7  3               kspr4:
0016C7  3  18           	clc 				; next sprite.
0016C8  3  A5 68        	lda z80_x
0016CA  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0016CC  3  85 68        	sta z80_x
0016CE  3  90 02        	bcc :+
0016D0  3  E6 69        	inc z80_i
0016D2  3               :
0016D2  3  CA           	dex	 			; repeat for remaining sprites.
0016D3  3  D0 E2        	bne kspr1
0016D5  3  60           	rts  				; no more room in table.
0016D6  3               kspr3:
0016D6  3  20 DD 16     	jsr cpsp 			; copy sprite to table.
0016D9  3  CA           	dex	 			; one less space in the table.
0016DA  3  D0 C0        	bne kspr2
0016DC  3  60           	rts
0016DD  3               
0016DD  3               ;----------------------------------------------
0016DD  3               ; Copy sprite from list to table.
0016DD  3               ;
0016DD  3               ; global:	hl,ix
0016DD  3               ; local:	y
0016DD  3               ; calls:	evnt09
0016DD  3               ;----------------------------------------------
0016DD  3               
0016DD  3               cpsp:
0016DD  3  A0 00        	ldy #0				; fetch byte from table.
0016DF  3  B1 66        	lda (z80_hl),y
0016E1  3  91 68        	sta (z80_ix),y			; set up type.
0016E3  3  A0 05        	ldy #PAM1ST
0016E5  3  91 68        	sta (z80_ix),y 			; set up type.
0016E7  3               
0016E7  3  E6 66        	inc z80_l 			; move to next byte.
0016E9  3  D0 02        	bne :+
0016EB  3  E6 67        	inc z80_h
0016ED  3               :
0016ED  3  A0 00        	ldy #0 				; fetch byte from table.
0016EF  3  B1 66        	lda (z80_hl),y
0016F1  3  A0 06        	ldy #6
0016F3  3  91 68        	sta (z80_ix),y			; set up image.
0016F5  3               
0016F5  3  E6 66        	inc z80_l 			; move to next byte.
0016F7  3  D0 02        	bne :+
0016F9  3  E6 67        	inc z80_h
0016FB  3               :
0016FB  3  A0 00        	ldy #0
0016FD  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
0016FF  3  A0 08        	ldy #8
001701  3  91 68        	sta (z80_ix),y 			; set up coordinate.
001703  3               
001703  3  A9 C8        	lda #200 			; set initial coordinate off screen.
001705  3  A0 03        	ldy #3
001707  3  91 68        	sta (z80_ix),y
001709  3               
001709  3  E6 66        	inc z80_l 			; move to next byte.
00170B  3  D0 02        	bne :+
00170D  3  E6 67        	inc z80_h
00170F  3               :
00170F  3  A0 00        	ldy #0 				; fetch byte from table.
001711  3  B1 66        	lda (z80_hl),y
001713  3  A0 09        	ldy #9
001715  3  91 68        	sta (z80_ix),y 			; set up coordinate.
001717  3               
001717  3  E6 66        	inc z80_l 			; move to next byte.
001719  3  D0 02        	bne :+
00171B  3  E6 67        	inc z80_h
00171D  3               :
00171D  3  A9 00        	lda #0				; zeroes in accumulator.
00171F  3  A0 07        	ldy #7 				; reset frame number.
001721  3  91 68        	sta (z80_ix),y
001723  3  A0 0A        	ldy #10 			; reset direction.
001725  3  91 68        	sta (z80_ix),y
001727  3  A0 0D        	ldy #13				; reset jump pointer low.
001729  3  91 68        	sta (z80_ix),y
00172B  3  A0 0E        	ldy #14	 			; reset jump pointer high.
00172D  3  91 68        	sta (z80_ix),y
00172F  3               
00172F  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
001731  3  A0 10        	ldy #16
001733  3  91 68        	sta (z80_ix),y
001735  3               evis0:
001735  3  A5 69        	lda z80_i
001737  3  48           	pha
001738  3  A5 68        	lda z80_x
00173A  3  48           	pha
00173B  3  A5 67        	lda z80_h
00173D  3  48           	pha
00173E  3  A5 66        	lda z80_l
001740  3  48           	pha
001741  3               
001741  3  20 61 22     	jsr evnt09 			; perform event.
001744  3               
001744  3  68           	pla
001745  3  85 66        	sta z80_l
001747  3  68           	pla
001748  3  85 67        	sta z80_h
00174A  3  68           	pla
00174B  3  85 68        	sta z80_x
00174D  3  68           	pla
00174E  3  85 69        	sta z80_i
001750  3               
001750  3  18           	clc
001751  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
001753  3  69 11        	adc #TABSIZ		 	; next sprite.
001755  3  85 68        	sta z80_x
001757  3  90 02        	bcc :+
001759  3  E6 69        	inc z80_i
00175B  3               :
00175B  3  60           	rts
00175C  3               
00175C  3               
00175C  3               ;-------------------------------------
00175C  3               ; Clear the play area window.
00175C  3               ;-------------------------------------
00175C  3               
00175C  3               clw:
00175C  3  AD 36 02     	lda wintop			; get coordinates of window.
00175F  3  8D 65 02     	sta dispy			; put into dispx for calculation.
001762  3  AD 37 02     	lda winlft
001765  3  8D 64 02     	sta dispx
001768  3               
001768  3  AD 38 02     	lda winhgt			; height of window.
00176B  3  8D 93 0B     	sta rrow			; copy to b register.
00176E  3               clw3:
00176E  3  AD 39 02     	lda winwid 			; width of window.
001771  3  8D 92 0B     	sta rcol
001774  3               clw2:
001774  3  20 B6 09     	jsr gprad 			; get print address.
001777  3  A9 00        	lda #0				; zero byte to write.
001779  3  A2 07        	ldx #7				; pixel height of each cell.
00177B  3               clw1:
00177B  3  BC 2C 0A     	ldy scrtab,x
00177E  3  91 80        	sta (scraddr),y 			; copy to screen.
001780  3  CA           	dex				; next screen row down.
001781  3  10 F8        	bpl clw1
001783  3               
001783  3  EE 64 02     	inc dispx			; next column.
001786  3  CE 92 0B     	dec rcol			; one less to do.
001789  3  D0 E9        	bne clw2			; repeat for remaining columns.
00178B  3               
00178B  3  AD 37 02     	lda winlft			; get left edge.
00178E  3  8D 64 02     	sta dispx 			; reset x.
001791  3  EE 65 02     	inc dispy 			; next line down.
001794  3               
001794  3  CE 93 0B     	dec rrow
001797  3  D0 D5        	bne clw3			; repeat down the screen.
001799  3               
001799  3  AD 36 02     	lda wintop			; get coordinates of window.
00179C  3  8D 5A 02     	sta chary			; put into display position.
00179F  3  AD 37 02     	lda winlft
0017A2  3  8D 59 02     	sta charx
0017A5  3  60           	rts
0017A6  3               
0017A6  3               
0017A6  3               ;----------------------------------------------------------
0017A6  3               ; Effects code.
0017A6  3               ; Ticker routine is called 25 times per second.
0017A6  3               ;
0017A6  3               ; HL = txtscr = left text screen address
0017A6  3               ; DE = txtscr+txtwid-1 = right text screen address
0017A6  3               ; BC = txtpos = text scroller position
0017A6  3               ;
0017A6  3               ;----------------------------------------------------------
0017A6  3               scr_l	= $90
0017A6  3               scr_r	= $92
0017A6  3               scr_txt	= $94
0017A6  3               
0017A6  3               .if sflag
0017A6  3               scrly:
0017A6  3               	rts
0017A6  3               	.word txtscr         	; get left screen address.
0017A6  3               	sta scr_l
0017A6  3               	lda txtscr+1
0017A6  3               	sta scr_l+1
0017A6  3               	sta scr_r+1
0017A6  3               	
0017A6  3               	stx xtmp
0017A6  3               
0017A6  3               	clc         		; get right screen address.
0017A6  3               	lda scr_l
0017A6  3               	adc txtwid
0017A6  3               	sta scr_r
0017A6  3               	dec scr_r
0017A6  3               scrly1:
0017A6  3               	ldy txtwid		; set txtwide
0017A6  3               	dey
0017A6  3               	clc
0017A6  3               scrly0:
0017A6  3               	lda (scr_l),y		; scroll 1 line
0017A6  3               	rol a
0017A6  3               	sta (scr_l),y
0017A6  3               	dey
0017A6  3               	bpl scrly0
0017A6  3               
0017A6  3               	clc			; point to next line
0017A6  3               	lda scr_l
0017A6  3               	adc #32
0017A6  3               	sta scr_l
0017A6  3               	bcc scrly1		; repeat 8 times
0017A6  3               
0017A6  3               	lda txtpos 		; get text pointer.
0017A6  3               	sta scr_txt
0017A6  3               	lda txtpos+1
0017A6  3               	sta scr_txt+1
0017A6  3               
0017A6  3               	ldy #0
0017A6  3               	lda (scr_txt),y 		; find character we're displaying.
0017A6  3               	and #127 		; remove end marker bit if applicable.
0017A6  3               	cmp #13			; is it newline?
0017A6  3               	bne scrly5 		; no, it's okay.
0017A6  3               	lda #32			; convert to a space instead.
0017A6  3               scrly5:
0017A6  3               	sta fntaddr		; calculate char address
0017A6  3               	lda #0
0017A6  3               	sta fntaddr+1
0017A6  3               	asl fntaddr  		; multiply char by 8.
0017A6  3               	rol fntaddr+1
0017A6  3               	asl fntaddr
0017A6  3               	rol fntaddr+1
0017A6  3               	asl fntaddr
0017A6  3               	rol fntaddr+1
0017A6  3               	lda fntaddr
0017A6  3               	clc
0017A6  3               	adc FontPtr
0017A6  3               	sta scrly3+1		; that's the low byte.
0017A6  3               	lda fntaddr+1
0017A6  3               	adc FontPtr+1
0017A6  3               	sta scrly3+2		; add displacement.
0017A6  3               
0017A6  3               	ldx #0
0017A6  3               scrly3:
0017A6  3               	lda $3333,x		; get image of char line.
0017A6  3               	and txtbit
0017A6  3               	beq scrly2		; don't plot pixel
0017A6  3               	ldy scrline,x
0017A6  3               	lda (scr_r),y
0017A6  3               	clc
0017A6  3               	ora #1
0017A6  3               	sta (scr_r),y		; plot pixel
0017A6  3               scrly2:
0017A6  3               	inx			; next line of char.
0017A6  3               	cpx #8
0017A6  3               	bne scrly3
0017A6  3               
0017A6  3               	lsr txtbit		; bit of text to display.
0017A6  3               	bcs :+
0017A6  3               	rts
0017A6  3               :
0017A6  3               	ldy #0
0017A6  3               	lda (scr_txt),y 	; what was the character?
0017A6  3               	asl a	  		; end of message?
0017A6  3               	bcs scrly4
0017A6  3               	inc txtpos
0017A6  3               	bne :+
0017A6  3               	inc txtpos+1
0017A6  3               :
0017A6  3               	jmp scrly6 		; not yet - continue.
0017A6  3               scrly4:
0017A6  3               	lda txtini 		; start of scrolling message.
0017A6  3               	sta txtpos
0017A6  3               	lda txtini+1
0017A6  3               	sta txtpos+1
0017A6  3               scrly6:
0017A6  3               	lda #128
0017A6  3               	sta txtbit
0017A6  3               	ldx xtmp
0017A6  3               	rts
0017A6  3               
0017A6  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
0017A6  3               
0017A6  3               ;-------------------------------------------------------
0017A6  3               ; Entry TICKER command
0017A6  3               ;
0017A6  3               ; Entry:
0017A6  3               ;  z80_b = message nr
0017A6  3               ;  z80_c = width
0017A6  3               ;-------------------------------------------------------
0017A6  3               
0017A6  3               iscrly:
0017A6  3               	jsr prescr 		; set up display position.
0017A6  3               
0017A6  3               	lda #<msgdat 		; text messages.
0017A6  3               	sta z80_l
0017A6  3               	lda #>msgdat
0017A6  3               	sta z80_h
0017A6  3               
0017A6  3               	lda z80_c 		; width.
0017A6  3               	sec
0017A6  3               	sbc #1			; subtract one.
0017A6  3               	cmp #32 		; is it between 1 and 32?
0017A6  3               	bcc :+
0017A6  3               	lda #$60
0017A6  3               	jmp iscrl0		; no, disable messages.
0017A6  3               :
0017A6  3               	ldx z80_b		; message number.
0017A6  3               	jsr getwrd 		; find message start.
0017A6  3               
0017A6  3               	lda z80_l		; set initial text position.
0017A6  3               	sta txtini
0017A6  3               	lda z80_h
0017A6  3               	sta txtini+1
0017A6  3               
0017A6  3               	lda #$ad		; code for lda adrr
0017A6  3               iscrl0:
0017A6  3               	sta scrly		; enable/disable scrolling routine.
0017A6  3               
0017A6  3               	jsr prescr 		; set up display position.
0017A6  3               	jsr gprad 		; get print address.
0017A6  3               
0017A6  3               	lda scraddr 		; set text screen address.
0017A6  3               	sta txtscr
0017A6  3               	lda scraddr+1
0017A6  3               	sta txtscr+1
0017A6  3               
0017A6  3               	lda z80_c		; width.
0017A6  3               	sta txtwid		; set width in working storage.
0017A6  3               
0017A6  3               	lda #128 		; start with leftmost bit.
0017A6  3               	sta txtbit
0017A6  3               
0017A6  3               	jmp scrly4
0017A6  3               .endif
0017A6  3               
0017A6  3               ;------------------------------------------------------------------
0017A6  3               ; Sprite table 
0017A6  3               ;------------------------------------------------------------------
0017A6  3               
0017A6  3               
0017A6  3               ; ix+0  = type.
0017A6  3               ; ix+1  = sprite image number.
0017A6  3               ; ix+2  = frame.
0017A6  3               ; ix+3  = y coord.
0017A6  3               ; ix+4  = x coord.
0017A6  3               
0017A6  3               
0017A6  3               ; ix+5  = new type.
0017A6  3               ; ix+6  = new image number.
0017A6  3               ; ix+7  = new frame.
0017A6  3               ; ix+8  = new y coord.
0017A6  3               ; ix+9  = new x coord.
0017A6  3               
0017A6  3               
0017A6  3               ; ix+10 = direction.
0017A6  3               ; ix+11 = parameter 1.
0017A6  3               ; ix+12 = parameter 2.
0017A6  3               ; ix+13 = jump pointer low.
0017A6  3               ; ix+14 = jump pointer high.
0017A6  3               ; ix+15 = data pointer low.
0017A6  3               ; ix+16 = data pointer high.
0017A6  3               
0017A6  3               ; block NUMSPR * TABSIZ,255
0017A6  3               sprtab:
0017A6  3  FF FF FF FF  	.res NUMSPR*TABSIZ,255
0017AA  3  FF FF FF FF  
0017AE  3  FF FF FF FF  
001872  3               
001872  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
001876  3  FF FF FF 00  
00187A  3  C0 78 00 00  
001883  3               
001883  3               	; 98.00.00 roomtb .byte 0                      ; start room map offset.
001883  3  07           roomtb:	.byte 7                      ; start room map offset.
001884  3               
001884  3               
001884  3               ; Everything below here will be generated by the editors.
001884  3               
001884  3               
001884  3               ; Sounds.
001884  3               ;
001884  3               ;	; 98.00.00 fx1    .byte 128+15         ; volume and mixer.
001884  3               ;fx1:	.byte 128+15         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 31             ; white noise.
001884  3               ;	.byte 31             ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 1000           ; tone register.
001884  3               ;	.word 1000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 128+15         ; volume and mixer.
001884  3               ;	.byte 128+15         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 25             ; white noise.
001884  3               ;	.byte 25             ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 1000           ; tone register.
001884  3               ;	.word 1000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 128+14         ; volume and mixer.
001884  3               ;	.byte 128+14         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 19             ; white noise.
001884  3               ;	.byte 19             ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 1000           ; tone register.
001884  3               ;	.word 1000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 128+13         ; volume and mixer.
001884  3               ;	.byte 128+13         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 13             ; white noise.
001884  3               ;	.byte 13             ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 1000           ; tone register.
001884  3               ;	.word 1000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 128+12         ; volume and mixer.
001884  3               ;	.byte 128+12         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 7              ; white noise.
001884  3               ;	.byte 7              ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 1000           ; tone register.
001884  3               ;	.word 1000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 128+11         ; volume and mixer.
001884  3               ;	.byte 128+11         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 0              ; white noise.
001884  3               ;	.byte 0              ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 1000           ; tone register.
001884  3               ;	.word 1000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 128+10         ; volume and mixer.
001884  3               ;	.byte 128+10         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 6              ; white noise.
001884  3               ;	.byte 6              ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 1000           ; tone register.
001884  3               ;	.word 1000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 128+8          ; volume and mixer.
001884  3               ;	.byte 128+8          ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 12             ; white noise.
001884  3               ;	.byte 12             ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 1000           ; tone register.
001884  3               ;	.word 1000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 128+6          ; volume and mixer.
001884  3               ;	.byte 128+6          ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 18             ; white noise.
001884  3               ;	.byte 18             ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 1000           ; tone register.
001884  3               ;	.word 1000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 128+3          ; volume and mixer.
001884  3               ;	.byte 128+3          ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 24             ; white noise.
001884  3               ;	.byte 24             ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 1000           ; tone register.
001884  3               ;	.word 1000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 255
001884  3               ;	.byte 255
001884  3               ;
001884  3               ;	; 98.00.00 fx2    .byte 064+15         ; volume and mixer.
001884  3               ;fx2:	.byte 064+15         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 27             ; white noise.
001884  3               ;	.byte 27             ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 1000           ; tone register.
001884  3               ;	.word 1000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+14         ; volume and mixer.
001884  3               ;	.byte 064+14         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 31             ; white noise.
001884  3               ;	.byte 31             ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 2000           ; tone register.
001884  3               ;	.word 2000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+13         ; volume and mixer.
001884  3               ;	.byte 064+13         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 28             ; white noise.
001884  3               ;	.byte 28             ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 3000           ; tone register.
001884  3               ;	.word 3000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+12         ; volume and mixer.
001884  3               ;	.byte 064+12         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 31             ; white noise.
001884  3               ;	.byte 31             ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 2000           ; tone register.
001884  3               ;	.word 2000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+11         ; volume and mixer.
001884  3               ;	.byte 064+11         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 29             ; white noise.
001884  3               ;	.byte 29             ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 1000           ; tone register.
001884  3               ;	.word 1000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+10         ; volume and mixer.
001884  3               ;	.byte 064+10         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 31             ; white noise.
001884  3               ;	.byte 31             ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 2000           ; tone register.
001884  3               ;	.word 2000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+9          ; volume and mixer.
001884  3               ;	.byte 064+9          ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 30             ; white noise.
001884  3               ;	.byte 30             ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 3000           ; tone register.
001884  3               ;	.word 3000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+8          ; volume and mixer.
001884  3               ;	.byte 064+8          ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 31             ; white noise.
001884  3               ;	.byte 31             ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 2000           ; tone register.
001884  3               ;	.word 2000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+7          ; volume and mixer.
001884  3               ;	.byte 064+7          ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 31             ; white noise.
001884  3               ;	.byte 31             ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 1000           ; tone register.
001884  3               ;	.word 1000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+6          ; volume and mixer.
001884  3               ;	.byte 064+6          ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 31             ; white noise.
001884  3               ;	.byte 31             ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 2000           ; tone register.
001884  3               ;	.word 2000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 255
001884  3               ;	.byte 255
001884  3               ;
001884  3               ;	; 98.00.00 fx3    .byte 064+15         ; volume and mixer.
001884  3               ;fx3:	.byte 064+15         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 0              ; white noise.
001884  3               ;	.byte 0              ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 4000           ; tone register.
001884  3               ;	.word 4000           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+15         ; volume and mixer.
001884  3               ;	.byte 064+15         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 0              ; white noise.
001884  3               ;	.byte 0              ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 4100           ; tone register.
001884  3               ;	.word 4100           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+14         ; volume and mixer.
001884  3               ;	.byte 064+14         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 0              ; white noise.
001884  3               ;	.byte 0              ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 4200           ; tone register.
001884  3               ;	.word 4200           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+14         ; volume and mixer.
001884  3               ;	.byte 064+14         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 0              ; white noise.
001884  3               ;	.byte 0              ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 4300           ; tone register.
001884  3               ;	.word 4300           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+13         ; volume and mixer.
001884  3               ;	.byte 064+13         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 0              ; white noise.
001884  3               ;	.byte 0              ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 4400           ; tone register.
001884  3               ;	.word 4400           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+13         ; volume and mixer.
001884  3               ;	.byte 064+13         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 0              ; white noise.
001884  3               ;	.byte 0              ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 4500           ; tone register.
001884  3               ;	.word 4500           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+12         ; volume and mixer.
001884  3               ;	.byte 064+12         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 0              ; white noise.
001884  3               ;	.byte 0              ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 4600           ; tone register.
001884  3               ;	.word 4600           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+12         ; volume and mixer.
001884  3               ;	.byte 064+12         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 0              ; white noise.
001884  3               ;	.byte 0              ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 4700           ; tone register.
001884  3               ;	.word 4700           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+11         ; volume and mixer.
001884  3               ;	.byte 064+11         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 0              ; white noise.
001884  3               ;	.byte 0              ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 4800           ; tone register.
001884  3               ;	.word 4800           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 064+10         ; volume and mixer.
001884  3               ;	.byte 064+10         ; volume and mixer.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 0              ; white noise.
001884  3               ;	.byte 0              ; white noise.
001884  3               ;
001884  3               ;	; 98.00.01 .word 4900           ; tone register.
001884  3               ;	.word 4900           ; tone register.
001884  3               ;
001884  3               ;	; 98.00.00 .byte 255
001884  3               ;	.byte 255
001884  3               ;
001884  3               ;	; 98.00.00 .byte 99             ; temporary marker.
001884  3               ;	.byte 99             ; temporary marker.
001884  3               ;
001884  3               
001884  3               ; User routine.  Put your own code in here to be called with USER instruction.
001884  3               ; if USER has an argument it will be passed in the accumulator.
001884  3               
001884  3               user:
001884  3               	; 43.xx.xx rts  	
001884  3  60           	rts
001885  3               
001885  3               ;----------------------------------------------------
001885  3               ; Missing vars 
001885  3               ;----------------------------------------------------
001885  3               
001885  3               ;MAP:		.res 3*256	; properties map buffer.
001885  3               ;SCADTB_lb:	.res 193	; screen address table, just below map.
001885  3               ;SCADTB_hb:	.res 193
001885  3               ;SHRAPN:		.res 55*6	; shrapnel table, just below screen address table.
001885  3               
001885  3               MAP 		= $9a00
001885  3               SCADTB_lb 	= MAP+3*256
001885  3               SCADTB_hb 	= SCADTB_lb+256
001885  3               SHRAPN 		= SCADTB_hb+256
001885  3               
001885  3  00 00        FontPtr:	.byte 0,0
001887  3  00 00        TmpAddr:	.byte 0,0
001889  3               
001889  3  00           loopa:		.byte 0
00188A  3  00           loopb:		.byte 0
00188B  3  00           loopc:		.byte 0
00188C  3               
00188C  3               
00188C  3               WINDOWTOP = 1
00188C  3               WINDOWLFT = 1
00188C  3               WINDOWHGT = 19
00188C  3               WINDOWWID = 30 ;"
00188C  3               MAPWID = 11
00188C  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255
001890  3  FF FF FF FF  
001894  3  FF FF FF     
001897  3               mapdat:
001897  3  00 01 02 03          .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,255,255,255,255,17,16,255,255,19,18,255,255,255,255,255,255,255,255,22,20,23,255,255,255,255,255,255,255,255,28,21,24,255,255,255,255,255,255,255,255,27,26,25,255,255,255,255,255,255,255
00189B  3  04 05 06 07  
00189F  3  08 09 0A 0B  
0018D9  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255
0018DD  3  FF FF FF FF  
0018E1  3  FF FF FF     
0018E4  3  00           stmap:  .byte 0
0018E5  3               
0018E5  3               evnt00:
0018E5  3  A9 08                lda #8
0018E7  3  A0 08                ldy #8
0018E9  3  D1 68                cmp (z80_ix),y
0018EB  3  B0 03                bcs *+5
0018ED  3  4C F9 18             jmp a00042
0018F0  3  20 9E 14             jsr scru
0018F3  3  A9 88                lda #136
0018F5  3  A0 08                ldy #8
0018F7  3  91 68                sta (z80_ix),y
0018F9  3  A9 8E        a00042: lda #142
0018FB  3  A0 08                ldy #8
0018FD  3  D1 68                cmp (z80_ix),y
0018FF  3  90 03                bcc *+5
001901  3  4C 0D 19             jmp a00082
001904  3  20 A7 14             jsr scrd
001907  3  A9 0C                lda #12
001909  3  A0 08                ldy #8
00190B  3  91 68                sta (z80_ix),y
00190D  3  A9 06        a00082: lda #CUSTOM
00190F  3  85 63                sta z80_b
001911  3  20 1C 0D             jsr tded
001914  3  C5 63                cmp z80_b
001916  3  F0 03                beq :+
001918  3  4C 2E 19             jmp a00148
00191B  3               :
00191B  3  A9 04                lda #4
00191D  3  CD 3F 02             cmp scno
001920  3  F0 03                beq *+5
001922  3  4C 2E 19             jmp a00148
001925  3  A0 09                ldy #9
001927  3  B1 68                lda (z80_ix),y
001929  3  18                   clc
00192A  3  69 02                adc #2
00192C  3  91 68                sta (z80_ix),y
00192E  3  20 5E 07     a00148: jsr skobj
001931  3  8D 5D 02             sta varobj
001934  3  A9 05                lda #5
001936  3  CD 5D 02             cmp varobj
001939  3  F0 03                beq *+5
00193B  3  4C 61 19             jmp a00235
00193E  3  AD 5D 02             lda varobj
001941  3  20 D6 06             jsr getob
001944  3  A9 14                lda #<20
001946  3  85 66                sta z80_l
001948  3  A9 00                lda #>20
00194A  3  85 67                sta z80_h
00194C  3  20 DD 08             jsr addsc
00194F  3  A9 01                lda #1
001951  3  8D 5A 02             sta chary
001954  3  A9 04                lda #4
001956  3  8D 59 02             sta charx
001959  3  A9 12                lda #18
00195B  3  20 09 0F             jsr dmsg
00195E  3  4C 44 1A             jmp a00631
001961  3  A9 06        a00235: lda #6
001963  3  CD 5D 02             cmp varobj
001966  3  F0 03                beq *+5
001968  3  4C 8E 19             jmp a00313
00196B  3  AD 5D 02             lda varobj
00196E  3  20 D6 06             jsr getob
001971  3  A9 14                lda #<20
001973  3  85 66                sta z80_l
001975  3  A9 00                lda #>20
001977  3  85 67                sta z80_h
001979  3  20 DD 08             jsr addsc
00197C  3  A9 01                lda #1
00197E  3  8D 5A 02             sta chary
001981  3  A9 04                lda #4
001983  3  8D 59 02             sta charx
001986  3  A9 14                lda #20
001988  3  20 09 0F             jsr dmsg
00198B  3  4C 44 1A             jmp a00631
00198E  3  A9 34        a00313: lda #52
001990  3  CD 5D 02             cmp varobj
001993  3  F0 03                beq *+5
001995  3  4C BB 19             jmp a00391
001998  3  AD 5D 02             lda varobj
00199B  3  20 D6 06             jsr getob
00199E  3  A9 14                lda #<20
0019A0  3  85 66                sta z80_l
0019A2  3  A9 00                lda #>20
0019A4  3  85 67                sta z80_h
0019A6  3  20 DD 08             jsr addsc
0019A9  3  A9 01                lda #1
0019AB  3  8D 5A 02             sta chary
0019AE  3  A9 04                lda #4
0019B0  3  8D 59 02             sta charx
0019B3  3  A9 16                lda #22
0019B5  3  20 09 0F             jsr dmsg
0019B8  3  4C 44 1A             jmp a00631
0019BB  3  A9 36        a00391: lda #54
0019BD  3  CD 5D 02             cmp varobj
0019C0  3  F0 03                beq *+5
0019C2  3  4C E8 19             jmp a00470
0019C5  3  AD 5D 02             lda varobj
0019C8  3  20 D6 06             jsr getob
0019CB  3  A9 14                lda #<20
0019CD  3  85 66                sta z80_l
0019CF  3  A9 00                lda #>20
0019D1  3  85 67                sta z80_h
0019D3  3  20 DD 08             jsr addsc
0019D6  3  A9 01                lda #1
0019D8  3  8D 5A 02             sta chary
0019DB  3  A9 04                lda #4
0019DD  3  8D 59 02             sta charx
0019E0  3  A9 1A                lda #26
0019E2  3  20 09 0F             jsr dmsg
0019E5  3  4C 44 1A             jmp a00631
0019E8  3  A9 1A        a00470: lda #26
0019EA  3  CD 5D 02             cmp varobj
0019ED  3  F0 03                beq *+5
0019EF  3  4C 15 1A             jmp a00548
0019F2  3  AD 5D 02             lda varobj
0019F5  3  20 D6 06             jsr getob
0019F8  3  A9 14                lda #<20
0019FA  3  85 66                sta z80_l
0019FC  3  A9 00                lda #>20
0019FE  3  85 67                sta z80_h
001A00  3  20 DD 08             jsr addsc
001A03  3  A9 01                lda #1
001A05  3  8D 5A 02             sta chary
001A08  3  A9 01                lda #1
001A0A  3  8D 59 02             sta charx
001A0D  3  A9 18                lda #24
001A0F  3  20 09 0F             jsr dmsg
001A12  3  4C 44 1A             jmp a00631
001A15  3  A9 37        a00548: lda #55
001A17  3  CD 5D 02             cmp varobj
001A1A  3  F0 03                beq *+5
001A1C  3  4C 2E 1A             jmp a00592
001A1F  3  AD 5D 02             lda varobj
001A22  3  20 D6 06             jsr getob
001A25  3  A9 5A                lda #90
001A27  3  0A                   asl a
001A28  3  8D 00 03             sta sndtyp
001A2B  3  4C 44 1A             jmp a00631
001A2E  3  A9 3A        a00592: lda #58
001A30  3  CD 5D 02             cmp varobj
001A33  3  F0 03                beq *+5
001A35  3  4C 44 1A             jmp a00631
001A38  3  AD 5D 02             lda varobj
001A3B  3  20 D6 06             jsr getob
001A3E  3  A9 5A                lda #90
001A40  3  0A                   asl a
001A41  3  8D 00 03             sta sndtyp
001A44  3  20 5E 07     a00631: jsr skobj
001A47  3  8D 5D 02             sta varobj
001A4A  3  A9 15                lda #21
001A4C  3  8D 5A 02             sta chary
001A4F  3  A9 19                lda #25
001A51  3  8D 59 02             sta charx
001A54  3  20 8B 08             jsr dscor
001A57  3  A9 15                lda #21
001A59  3  8D 5A 02             sta chary
001A5C  3  A9 10                lda #16
001A5E  3  8D 59 02             sta charx
001A61  3  AD 4F 02             lda varo
001A64  3  20 32 14             jsr disply
001A67  3  A9 01                lda #1
001A69  3  CD 5D 02             cmp varobj
001A6C  3  F0 03                beq *+5
001A6E  3  4C 9B 1A             jmp a00782
001A71  3  A9 05                lda #5
001A73  3  20 08 07             jsr gotob
001A76  3  C9 FF                cmp #255
001A78  3  F0 03                beq :+
001A7A  3  4C 80 1A             jmp a00731
001A7D  3               :
001A7D  3  4C 98 1A             jmp a00778
001A80  3  A9 01        a00731: lda #1
001A82  3  8D 5A 02             sta chary
001A85  3  A9 02                lda #2
001A87  3  8D 59 02             sta charx
001A8A  3  A9 13                lda #19
001A8C  3  20 09 0F             jsr dmsg
001A8F  3  A0 09                ldy #9
001A91  3  B1 68                lda (z80_ix),y
001A93  3  18                   clc
001A94  3  69 02                adc #2
001A96  3  91 68                sta (z80_ix),y
001A98  3  4C 17 1C     a00778: jmp a01463
001A9B  3  A9 02        a00782: lda #2
001A9D  3  CD 5D 02             cmp varobj
001AA0  3  F0 03                beq *+5
001AA2  3  4C CF 1A             jmp a00877
001AA5  3  A9 06                lda #6
001AA7  3  20 08 07             jsr gotob
001AAA  3  C9 FF                cmp #255
001AAC  3  F0 03                beq :+
001AAE  3  4C B4 1A             jmp a00826
001AB1  3               :
001AB1  3  4C CC 1A             jmp a00873
001AB4  3  A9 01        a00826: lda #1
001AB6  3  8D 5A 02             sta chary
001AB9  3  A9 02                lda #2
001ABB  3  8D 59 02             sta charx
001ABE  3  A9 11                lda #17
001AC0  3  20 09 0F             jsr dmsg
001AC3  3  A0 09                ldy #9
001AC5  3  B1 68                lda (z80_ix),y
001AC7  3  38                   sec
001AC8  3  E9 02                sbc #2
001ACA  3  91 68                sta (z80_ix),y
001ACC  3  4C 17 1C     a00873: jmp a01463
001ACF  3  A9 1B        a00877: lda #27
001AD1  3  CD 5D 02             cmp varobj
001AD4  3  F0 03                beq *+5
001AD6  3  4C 03 1B             jmp a00973
001AD9  3  A9 1A                lda #26
001ADB  3  20 08 07             jsr gotob
001ADE  3  C9 FF                cmp #255
001AE0  3  F0 03                beq :+
001AE2  3  4C E8 1A             jmp a00921
001AE5  3               :
001AE5  3  4C 00 1B             jmp a00968
001AE8  3  A9 01        a00921: lda #1
001AEA  3  8D 5A 02             sta chary
001AED  3  A9 01                lda #1
001AEF  3  8D 59 02             sta charx
001AF2  3  A9 17                lda #23
001AF4  3  20 09 0F             jsr dmsg
001AF7  3  A0 09                ldy #9
001AF9  3  B1 68                lda (z80_ix),y
001AFB  3  38                   sec
001AFC  3  E9 02                sbc #2
001AFE  3  91 68                sta (z80_ix),y
001B00  3  4C 17 1C     a00968: jmp a01463
001B03  3  A9 33        a00973: lda #51
001B05  3  CD 5D 02             cmp varobj
001B08  3  F0 03                beq *+5
001B0A  3  4C 37 1B             jmp a01068
001B0D  3  A9 34                lda #52
001B0F  3  20 08 07             jsr gotob
001B12  3  C9 FF                cmp #255
001B14  3  F0 03                beq :+
001B16  3  4C 1C 1B             jmp a01017
001B19  3               :
001B19  3  4C 34 1B             jmp a01064
001B1C  3  A9 01        a01017: lda #1
001B1E  3  8D 5A 02             sta chary
001B21  3  A9 02                lda #2
001B23  3  8D 59 02             sta charx
001B26  3  A9 15                lda #21
001B28  3  20 09 0F             jsr dmsg
001B2B  3  A0 09                ldy #9
001B2D  3  B1 68                lda (z80_ix),y
001B2F  3  38                   sec
001B30  3  E9 02                sbc #2
001B32  3  91 68                sta (z80_ix),y
001B34  3  4C 17 1C     a01064: jmp a01463
001B37  3  A9 09        a01068: lda #9
001B39  3  CD 5D 02             cmp varobj
001B3C  3  F0 03                beq *+5
001B3E  3  4C 7E 1B             jmp a01192
001B41  3  AD 5D 02             lda varobj
001B44  3  20 D6 06             jsr getob
001B47  3  AD 54 02             lda vart
001B4A  3  18                   clc
001B4B  3  69 01                adc #1
001B4D  3  8D 54 02             sta vart
001B50  3  A9 64                lda #<100
001B52  3  85 66                sta z80_l
001B54  3  A9 00                lda #>100
001B56  3  85 67                sta z80_h
001B58  3  20 DD 08             jsr addsc
001B5B  3  A9 32                lda #50
001B5D  3  0A                   asl a
001B5E  3  8D 00 03             sta sndtyp
001B61  3  20 42 03             jsr cls
001B64  3  A9 0A                lda #10
001B66  3  8D 5A 02             sta chary
001B69  3  A9 03                lda #3
001B6B  3  8D 59 02             sta charx
001B6E  3  A9 0B                lda #11
001B70  3  20 09 0F             jsr dmsg
001B73  3  20 68 02             jsr prskey
001B76  3  A9 01                lda #1
001B78  3  8D 61 02             sta restfl
001B7B  3  4C 17 1C             jmp a01463
001B7E  3  A9 35        a01192: lda #53
001B80  3  CD 5D 02             cmp varobj
001B83  3  F0 03                beq *+5
001B85  3  4C B2 1B             jmp a01287
001B88  3  A9 36                lda #54
001B8A  3  20 08 07             jsr gotob
001B8D  3  C9 FF                cmp #255
001B8F  3  F0 03                beq :+
001B91  3  4C 97 1B             jmp a01236
001B94  3               :
001B94  3  4C AF 1B             jmp a01283
001B97  3  A9 01        a01236: lda #1
001B99  3  8D 5A 02             sta chary
001B9C  3  A9 02                lda #2
001B9E  3  8D 59 02             sta charx
001BA1  3  A9 19                lda #25
001BA3  3  20 09 0F             jsr dmsg
001BA6  3  A0 09                ldy #9
001BA8  3  B1 68                lda (z80_ix),y
001BAA  3  18                   clc
001BAB  3  69 02                adc #2
001BAD  3  91 68                sta (z80_ix),y
001BAF  3  4C 17 1C     a01283: jmp a01463
001BB2  3  A9 32        a01287: lda #50
001BB4  3  CD 5D 02             cmp varobj
001BB7  3  F0 03                beq *+5
001BB9  3  4C F3 1B             jmp a01398
001BBC  3  AD 5D 02             lda varobj
001BBF  3  20 D6 06             jsr getob
001BC2  3  AD 40 02             lda numlif
001BC5  3  18                   clc
001BC6  3  69 01                adc #1
001BC8  3  8D 40 02             sta numlif
001BCB  3  A9 15                lda #21
001BCD  3  8D 5A 02             sta chary
001BD0  3  A9 07                lda #7
001BD2  3  8D 59 02             sta charx
001BD5  3  AD 40 02             lda numlif
001BD8  3  20 32 14             jsr disply
001BDB  3  A9 0A                lda #10
001BDD  3  0A                   asl a
001BDE  3  8D 00 03             sta sndtyp
001BE1  3  A9 01                lda #1
001BE3  3  8D 5A 02             sta chary
001BE6  3  A9 02                lda #2
001BE8  3  8D 59 02             sta charx
001BEB  3  A9 0C                lda #12
001BED  3  20 09 0F             jsr dmsg
001BF0  3  4C 17 1C             jmp a01463
001BF3  3  A9 FF        a01398: lda #255
001BF5  3  CD 5D 02             cmp varobj
001BF8  3  D0 03                bne *+5
001BFA  3  4C 17 1C             jmp a01463
001BFD  3  AD 5D 02             lda varobj
001C00  3  20 D6 06             jsr getob
001C03  3  A9 0A                lda #<10
001C05  3  85 66                sta z80_l
001C07  3  A9 00                lda #>10
001C09  3  85 67                sta z80_h
001C0B  3  20 DD 08             jsr addsc
001C0E  3  AD 4F 02             lda varo
001C11  3  18                   clc
001C12  3  69 01                adc #1
001C14  3  8D 4F 02             sta varo
001C17  3  A9 0E        a01463: lda #14
001C19  3  CD 3F 02             cmp scno
001C1C  3  F0 03                beq *+5
001C1E  3  4C 63 1C             jmp a01588
001C21  3  A9 37                lda #55
001C23  3  20 08 07             jsr gotob
001C26  3  C9 FF                cmp #255
001C28  3  F0 03                beq :+
001C2A  3  4C 63 1C             jmp a01588
001C2D  3               :
001C2D  3  A9 13                lda #19
001C2F  3  8D 5A 02             sta chary
001C32  3  A9 0A                lda #10
001C34  3  8D 59 02             sta charx
001C37  3  AD 59 02             lda charx
001C3A  3  8D 64 02             sta dispx
001C3D  3  AD 5A 02             lda chary
001C40  3  8D 65 02             sta dispy
001C43  3  A9 0A                lda #10
001C45  3  20 34 0A             jsr pattr
001C48  3  A9 13                lda #19
001C4A  3  8D 5A 02             sta chary
001C4D  3  A9 0B                lda #11
001C4F  3  8D 59 02             sta charx
001C52  3  AD 59 02             lda charx
001C55  3  8D 64 02             sta dispx
001C58  3  AD 5A 02             lda chary
001C5B  3  8D 65 02             sta dispy
001C5E  3  A9 0B                lda #11
001C60  3  20 34 0A             jsr pattr
001C63  3  A9 12        a01588: lda #18
001C65  3  CD 3F 02             cmp scno
001C68  3  F0 03                beq *+5
001C6A  3  4C AF 1C             jmp a01714
001C6D  3  A9 3A                lda #58
001C6F  3  20 08 07             jsr gotob
001C72  3  C9 FF                cmp #255
001C74  3  F0 03                beq :+
001C76  3  4C AF 1C             jmp a01714
001C79  3               :
001C79  3  A9 0A                lda #10
001C7B  3  8D 5A 02             sta chary
001C7E  3  A9 17                lda #23
001C80  3  8D 59 02             sta charx
001C83  3  AD 59 02             lda charx
001C86  3  8D 64 02             sta dispx
001C89  3  AD 5A 02             lda chary
001C8C  3  8D 65 02             sta dispy
001C8F  3  A9 00                lda #0
001C91  3  20 34 0A             jsr pattr
001C94  3  A9 0B                lda #11
001C96  3  8D 5A 02             sta chary
001C99  3  A9 17                lda #23
001C9B  3  8D 59 02             sta charx
001C9E  3  AD 59 02             lda charx
001CA1  3  8D 64 02             sta dispx
001CA4  3  AD 5A 02             lda chary
001CA7  3  8D 65 02             sta dispy
001CAA  3  A9 00                lda #0
001CAC  3  20 34 0A             jsr pattr
001CAF  3  AD 34 02     a01714: lda joyval
001CB2  3  29 01                and #1
001CB4  3  F0 03                beq :+
001CB6  3  4C 36 1D             jmp a01978
001CB9  3               :
001CB9  3  A9 E6                lda #230
001CBB  3  A0 09                ldy #9
001CBD  3  D1 68                cmp (z80_ix),y
001CBF  3  90 03                bcc *+5
001CC1  3  4C D0 1C             jmp a01776
001CC4  3  20 95 14             jsr scrr
001CC7  3  A9 08                lda #8
001CC9  3  A0 09                ldy #9
001CCB  3  91 68                sta (z80_ix),y
001CCD  3  4C 36 1D             jmp a01978
001CD0  3  20 9F 0C     a01776: jsr cangr
001CD3  3  F0 03                beq :+
001CD5  3  4C 36 1D             jmp a01978
001CD8  3               :
001CD8  3  AD 34 02             lda joyval
001CDB  3  29 08                and #8
001CDD  3  F0 03                beq :+
001CDF  3  4C 13 1D             jmp a01904
001CE2  3               :
001CE2  3  20 DF 0B             jsr laddu
001CE5  3  F0 03                beq :+
001CE7  3  4C ED 1C             jmp a01825
001CEA  3               :
001CEA  3  4C 10 1D             jmp a01899
001CED  3  A9 01        a01825: lda #1
001CEF  3  A0 06                ldy #6
001CF1  3  91 68                sta (z80_ix),y
001CF3  3  20 56 13             jsr animsp
001CF6  3  A9 00                lda #0
001CF8  3  A0 07                ldy #7
001CFA  3  D1 68                cmp (z80_ix),y
001CFC  3  F0 03                beq *+5
001CFE  3  4C 07 1D             jmp a01877
001D01  3  A9 03                lda #3
001D03  3  0A                   asl a
001D04  3  8D 00 03             sta sndtyp
001D07  3  A0 09        a01877: ldy #9
001D09  3  B1 68                lda (z80_ix),y
001D0B  3  18                   clc
001D0C  3  69 02                adc #2
001D0E  3  91 68                sta (z80_ix),y
001D10  3  4C 36 1D     a01899: jmp a01978
001D13  3  A9 01        a01904: lda #1
001D15  3  A0 06                ldy #6
001D17  3  91 68                sta (z80_ix),y
001D19  3  20 56 13             jsr animsp
001D1C  3  A9 00                lda #0
001D1E  3  A0 07                ldy #7
001D20  3  D1 68                cmp (z80_ix),y
001D22  3  F0 03                beq *+5
001D24  3  4C 2D 1D             jmp a01956
001D27  3  A9 03                lda #3
001D29  3  0A                   asl a
001D2A  3  8D 00 03             sta sndtyp
001D2D  3  A0 09        a01956: ldy #9
001D2F  3  B1 68                lda (z80_ix),y
001D31  3  18                   clc
001D32  3  69 02                adc #2
001D34  3  91 68                sta (z80_ix),y
001D36  3  AD 34 02     a01978: lda joyval
001D39  3  29 02                and #2
001D3B  3  F0 03                beq :+
001D3D  3  4C BD 1D             jmp a02242
001D40  3               :
001D40  3  A9 08                lda #8
001D42  3  A0 09                ldy #9
001D44  3  D1 68                cmp (z80_ix),y
001D46  3  B0 03                bcs *+5
001D48  3  4C 57 1D             jmp a02040
001D4B  3  20 78 14             jsr scrl
001D4E  3  A9 E6                lda #230
001D50  3  A0 09                ldy #9
001D52  3  91 68                sta (z80_ix),y
001D54  3  4C BD 1D             jmp a02242
001D57  3  20 8B 0C     a02040: jsr cangl
001D5A  3  F0 03                beq :+
001D5C  3  4C BD 1D             jmp a02242
001D5F  3               :
001D5F  3  AD 34 02             lda joyval
001D62  3  29 08                and #8
001D64  3  F0 03                beq :+
001D66  3  4C 9A 1D             jmp a02168
001D69  3               :
001D69  3  20 DF 0B             jsr laddu
001D6C  3  F0 03                beq :+
001D6E  3  4C 74 1D             jmp a02089
001D71  3               :
001D71  3  4C 97 1D             jmp a02163
001D74  3  A9 00        a02089: lda #0
001D76  3  A0 06                ldy #6
001D78  3  91 68                sta (z80_ix),y
001D7A  3  20 56 13             jsr animsp
001D7D  3  A9 01                lda #1
001D7F  3  A0 07                ldy #7
001D81  3  D1 68                cmp (z80_ix),y
001D83  3  F0 03                beq *+5
001D85  3  4C 8E 1D             jmp a02141
001D88  3  A9 03                lda #3
001D8A  3  0A                   asl a
001D8B  3  8D 00 03             sta sndtyp
001D8E  3  A0 09        a02141: ldy #9
001D90  3  B1 68                lda (z80_ix),y
001D92  3  38                   sec
001D93  3  E9 02                sbc #2
001D95  3  91 68                sta (z80_ix),y
001D97  3  4C BD 1D     a02163: jmp a02242
001D9A  3  A9 00        a02168: lda #0
001D9C  3  A0 06                ldy #6
001D9E  3  91 68                sta (z80_ix),y
001DA0  3  20 56 13             jsr animsp
001DA3  3  A9 01                lda #1
001DA5  3  A0 07                ldy #7
001DA7  3  D1 68                cmp (z80_ix),y
001DA9  3  F0 03                beq *+5
001DAB  3  4C B4 1D             jmp a02220
001DAE  3  A9 03                lda #3
001DB0  3  0A                   asl a
001DB1  3  8D 00 03             sta sndtyp
001DB4  3  A0 09        a02220: ldy #9
001DB6  3  B1 68                lda (z80_ix),y
001DB8  3  38                   sec
001DB9  3  E9 02                sbc #2
001DBB  3  91 68                sta (z80_ix),y
001DBD  3  AD 34 02     a02242: lda joyval
001DC0  3  29 08                and #8
001DC2  3  F0 03                beq :+
001DC4  3  4C F2 1D             jmp a02347
001DC7  3               :
001DC7  3  20 DF 0B             jsr laddu
001DCA  3  F0 03                beq :+
001DCC  3  4C F2 1D             jmp a02347
001DCF  3               :
001DCF  3  A0 08                ldy #8
001DD1  3  B1 68                lda (z80_ix),y
001DD3  3  38                   sec
001DD4  3  E9 02                sbc #2
001DD6  3  91 68                sta (z80_ix),y
001DD8  3  A9 02                lda #2
001DDA  3  A0 06                ldy #6
001DDC  3  91 68                sta (z80_ix),y
001DDE  3  20 56 13             jsr animsp
001DE1  3  A9 00                lda #0
001DE3  3  A0 07                ldy #7
001DE5  3  D1 68                cmp (z80_ix),y
001DE7  3  F0 03                beq *+5
001DE9  3  4C F2 1D             jmp a02347
001DEC  3  A9 03                lda #3
001DEE  3  0A                   asl a
001DEF  3  8D 00 03             sta sndtyp
001DF2  3  AD 34 02     a02347: lda joyval
001DF5  3  29 04                and #4
001DF7  3  F0 03                beq :+
001DF9  3  4C 27 1E             jmp a02452
001DFC  3               :
001DFC  3  20 C7 0B             jsr laddd
001DFF  3  F0 03                beq :+
001E01  3  4C 27 1E             jmp a02452
001E04  3               :
001E04  3  A0 08                ldy #8
001E06  3  B1 68                lda (z80_ix),y
001E08  3  18                   clc
001E09  3  69 02                adc #2
001E0B  3  91 68                sta (z80_ix),y
001E0D  3  A9 02                lda #2
001E0F  3  A0 06                ldy #6
001E11  3  91 68                sta (z80_ix),y
001E13  3  20 56 13             jsr animsp
001E16  3  A9 00                lda #0
001E18  3  A0 07                ldy #7
001E1A  3  D1 68                cmp (z80_ix),y
001E1C  3  F0 03                beq *+5
001E1E  3  4C 27 1E             jmp a02452
001E21  3  A9 03                lda #3
001E23  3  0A                   asl a
001E24  3  8D 00 03             sta sndtyp
001E27  3  AD 34 02     a02452: lda joyval
001E2A  3  29 10                and #16
001E2C  3  F0 03                beq :+
001E2E  3  4C 3A 1E             jmp a02486
001E31  3               :
001E31  3  20 13 0E             jsr jump
001E34  3  A9 1E                lda #30
001E36  3  0A                   asl a
001E37  3  8D 00 03             sta sndtyp
001E3A  3  20 53 0C     a02486: jsr cangd
001E3D  3  F0 03                beq :+
001E3F  3  4C 61 1E             jmp a02555
001E42  3               :
001E42  3  20 C7 0B             jsr laddd
001E45  3  F0 03                beq :+
001E47  3  4C 4D 1E             jmp a02518
001E4A  3               :
001E4A  3  4C 61 1E             jmp a02555
001E4D  3  A9 06        a02518: lda #CUSTOM
001E4F  3  85 63                sta z80_b
001E51  3  20 1C 0D             jsr tded
001E54  3  C5 63                cmp z80_b
001E56  3  F0 03                beq :+
001E58  3  4C 5E 1E             jmp a02550
001E5B  3               :
001E5B  3  4C 61 1E             jmp a02555
001E5E  3  20 4D 15     a02550: jsr ifall
001E61  3  A9 05        a02555: lda #DEADLY
001E63  3  85 63                sta z80_b
001E65  3  20 1C 0D             jsr tded
001E68  3  C5 63                cmp z80_b
001E6A  3  F0 03                beq :+
001E6C  3  4C 79 1E             jmp a02599
001E6F  3               :
001E6F  3  A9 01                lda #1
001E71  3  8D 62 02             sta deadf
001E74  3  A9 32                lda #50
001E76  3  20 77 02             jsr delay
001E79  3  4C C3 14     a02599: jmp grav
001E7C  3               evnt01:
001E7C  3  A9 00                lda #0
001E7E  3  A0 0B                ldy #11
001E80  3  D1 68                cmp (z80_ix),y
001E82  3  F0 03                beq *+5
001E84  3  4C A4 1E             jmp b00082
001E87  3  20 1B 0C             jsr cangu
001E8A  3  F0 03                beq :+
001E8C  3  4C 9B 1E             jmp b00064
001E8F  3               :
001E8F  3  A0 08                ldy #8
001E91  3  B1 68                lda (z80_ix),y
001E93  3  38                   sec
001E94  3  E9 02                sbc #2
001E96  3  91 68                sta (z80_ix),y
001E98  3  4C A1 1E             jmp b00078
001E9B  3  A9 01        b00064: lda #1
001E9D  3  A0 0B                ldy #11
001E9F  3  91 68                sta (z80_ix),y
001EA1  3  4C BE 1E     b00078: jmp b00136
001EA4  3  20 53 0C     b00082: jsr cangd
001EA7  3  F0 03                beq :+
001EA9  3  4C B8 1E             jmp b00123
001EAC  3               :
001EAC  3  A0 08                ldy #8
001EAE  3  B1 68                lda (z80_ix),y
001EB0  3  18                   clc
001EB1  3  69 02                adc #2
001EB3  3  91 68                sta (z80_ix),y
001EB5  3  4C BE 1E             jmp b00136
001EB8  3  A9 00        b00123: lda #0
001EBA  3  A0 0B                ldy #11
001EBC  3  91 68                sta (z80_ix),y
001EBE  3  20 56 13     b00136: jsr animsp
001EC1  3  A9 00                lda #0
001EC3  3  85 63                sta z80_b
001EC5  3  20 97 13             jsr sktyp
001EC8  3  B0 03                bcs :+
001ECA  3  4C D2 1E             jmp b00171
001ECD  3               :
001ECD  3  A9 01                lda #1
001ECF  3  8D 62 02             sta deadf
001ED2  3  60           b00171: rts
001ED3  3               evnt02:
001ED3  3  A9 00                lda #0
001ED5  3  A0 0B                ldy #11
001ED7  3  D1 68                cmp (z80_ix),y
001ED9  3  F0 03                beq *+5
001EDB  3  4C 27 1F             jmp c00179
001EDE  3  20 8B 0C             jsr cangl
001EE1  3  F0 03                beq :+
001EE3  3  4C 1E 1F             jmp c00161
001EE6  3               :
001EE6  3  A0 09                ldy #9
001EE8  3  B1 68                lda (z80_ix),y
001EEA  3  38                   sec
001EEB  3  E9 02                sbc #2
001EED  3  91 68                sta (z80_ix),y
001EEF  3  A9 10                lda #16
001EF1  3  85 62                sta z80_c
001EF3  3  A0 09                ldy #9
001EF5  3  B1 68                lda (z80_ix),y
001EF7  3  38                   sec
001EF8  3  E5 62                sbc z80_c
001EFA  3  A0 09                ldy #9
001EFC  3  91 68                sta (z80_ix),y
001EFE  3  20 53 0C             jsr cangd
001F01  3  F0 03                beq :+
001F03  3  4C 0C 1F             jmp c00121
001F06  3               :
001F06  3  A9 01                lda #1
001F08  3  A0 0B                ldy #11
001F0A  3  91 68                sta (z80_ix),y
001F0C  3  A9 10        c00121: lda #16
001F0E  3  85 62                sta z80_c
001F10  3  A0 09                ldy #9
001F12  3  B1 68                lda (z80_ix),y
001F14  3  18                   clc
001F15  3  65 62                adc z80_c
001F17  3  A0 09                ldy #9
001F19  3  91 68                sta (z80_ix),y
001F1B  3  4C 24 1F             jmp c00175
001F1E  3  A9 01        c00161: lda #1
001F20  3  A0 0B                ldy #11
001F22  3  91 68                sta (z80_ix),y
001F24  3  4C 6D 1F     c00175: jmp c00330
001F27  3  20 9F 0C     c00179: jsr cangr
001F2A  3  F0 03                beq :+
001F2C  3  4C 67 1F             jmp c00317
001F2F  3               :
001F2F  3  A0 09                ldy #9
001F31  3  B1 68                lda (z80_ix),y
001F33  3  18                   clc
001F34  3  69 02                adc #2
001F36  3  91 68                sta (z80_ix),y
001F38  3  A9 10                lda #16
001F3A  3  85 62                sta z80_c
001F3C  3  A0 09                ldy #9
001F3E  3  B1 68                lda (z80_ix),y
001F40  3  18                   clc
001F41  3  65 62                adc z80_c
001F43  3  A0 09                ldy #9
001F45  3  91 68                sta (z80_ix),y
001F47  3  20 53 0C             jsr cangd
001F4A  3  F0 03                beq :+
001F4C  3  4C 55 1F             jmp c00277
001F4F  3               :
001F4F  3  A9 00                lda #0
001F51  3  A0 0B                ldy #11
001F53  3  91 68                sta (z80_ix),y
001F55  3  A9 10        c00277: lda #16
001F57  3  85 62                sta z80_c
001F59  3  A0 09                ldy #9
001F5B  3  B1 68                lda (z80_ix),y
001F5D  3  38                   sec
001F5E  3  E5 62                sbc z80_c
001F60  3  A0 09                ldy #9
001F62  3  91 68                sta (z80_ix),y
001F64  3  4C 6D 1F             jmp c00330
001F67  3  A9 00        c00317: lda #0
001F69  3  A0 0B                ldy #11
001F6B  3  91 68                sta (z80_ix),y
001F6D  3  20 56 13     c00330: jsr animsp
001F70  3  A9 00                lda #0
001F72  3  85 63                sta z80_b
001F74  3  20 97 13             jsr sktyp
001F77  3  B0 03                bcs :+
001F79  3  4C 81 1F             jmp c00365
001F7C  3               :
001F7C  3  A9 01                lda #1
001F7E  3  8D 62 02             sta deadf
001F81  3  60           c00365: rts
001F82  3               evnt03:
001F82  3  A9 00                lda #0
001F84  3  A0 0B                ldy #11
001F86  3  D1 68                cmp (z80_ix),y
001F88  3  F0 03                beq *+5
001F8A  3  4C AA 1F             jmp d00082
001F8D  3  20 8B 0C             jsr cangl
001F90  3  F0 03                beq :+
001F92  3  4C A1 1F             jmp d00064
001F95  3               :
001F95  3  A0 09                ldy #9
001F97  3  B1 68                lda (z80_ix),y
001F99  3  38                   sec
001F9A  3  E9 02                sbc #2
001F9C  3  91 68                sta (z80_ix),y
001F9E  3  4C A7 1F             jmp d00078
001FA1  3  A9 01        d00064: lda #1
001FA3  3  A0 0B                ldy #11
001FA5  3  91 68                sta (z80_ix),y
001FA7  3  4C C4 1F     d00078: jmp d00136
001FAA  3  20 9F 0C     d00082: jsr cangr
001FAD  3  F0 03                beq :+
001FAF  3  4C BE 1F             jmp d00123
001FB2  3               :
001FB2  3  A0 09                ldy #9
001FB4  3  B1 68                lda (z80_ix),y
001FB6  3  18                   clc
001FB7  3  69 02                adc #2
001FB9  3  91 68                sta (z80_ix),y
001FBB  3  4C C4 1F             jmp d00136
001FBE  3  A9 00        d00123: lda #0
001FC0  3  A0 0B                ldy #11
001FC2  3  91 68                sta (z80_ix),y
001FC4  3  A9 00        d00136: lda #0
001FC6  3  A0 0A                ldy #10
001FC8  3  D1 68                cmp (z80_ix),y
001FCA  3  F0 03                beq *+5
001FCC  3  4C EC 1F             jmp d00217
001FCF  3  20 1B 0C             jsr cangu
001FD2  3  F0 03                beq :+
001FD4  3  4C E3 1F             jmp d00199
001FD7  3               :
001FD7  3  A0 08                ldy #8
001FD9  3  B1 68                lda (z80_ix),y
001FDB  3  38                   sec
001FDC  3  E9 02                sbc #2
001FDE  3  91 68                sta (z80_ix),y
001FE0  3  4C E9 1F             jmp d00212
001FE3  3  A9 01        d00199: lda #1
001FE5  3  A0 0A                ldy #10
001FE7  3  91 68                sta (z80_ix),y
001FE9  3  4C 06 20     d00212: jmp d00271
001FEC  3  20 53 0C     d00217: jsr cangd
001FEF  3  F0 03                beq :+
001FF1  3  4C 00 20             jmp d00257
001FF4  3               :
001FF4  3  A0 08                ldy #8
001FF6  3  B1 68                lda (z80_ix),y
001FF8  3  18                   clc
001FF9  3  69 02                adc #2
001FFB  3  91 68                sta (z80_ix),y
001FFD  3  4C 06 20             jmp d00271
002000  3  A9 00        d00257: lda #0
002002  3  A0 0A                ldy #10
002004  3  91 68                sta (z80_ix),y
002006  3  20 56 13     d00271: jsr animsp
002009  3  A9 00                lda #0
00200B  3  85 63                sta z80_b
00200D  3  20 97 13             jsr sktyp
002010  3  B0 03                bcs :+
002012  3  4C 1A 20             jmp d00305
002015  3               :
002015  3  A9 01                lda #1
002017  3  8D 62 02             sta deadf
00201A  3  60           d00305: rts
00201B  3               evnt04:
00201B  3  A9 05                lda #DEADLY
00201D  3  85 63                sta z80_b
00201F  3  20 1C 0D             jsr tded
002022  3  C5 63                cmp z80_b
002024  3  F0 03                beq :+
002026  3  4C 2C 20             jmp e00034
002029  3               :
002029  3  4C 2C 20             jmp e00034
00202C  3  A9 00        e00034: lda #0
00202E  3  A0 0A                ldy #10
002030  3  D1 68                cmp (z80_ix),y
002032  3  F0 03                beq *+5
002034  3  4C 78 20             jmp e00197
002037  3  A9 10                lda #16
002039  3  85 62                sta z80_c
00203B  3  A0 08                ldy #8
00203D  3  B1 68                lda (z80_ix),y
00203F  3  38                   sec
002040  3  E5 62                sbc z80_c
002042  3  A0 08                ldy #8
002044  3  91 68                sta (z80_ix),y
002046  3  20 1B 0C             jsr cangu
002049  3  F0 03                beq :+
00204B  3  4C 60 20             jmp e00144
00204E  3               :
00204E  3  A9 0F                lda #15
002050  3  85 62                sta z80_c
002052  3  A0 08                ldy #8
002054  3  B1 68                lda (z80_ix),y
002056  3  18                   clc
002057  3  65 62                adc z80_c
002059  3  A0 08                ldy #8
00205B  3  91 68                sta (z80_ix),y
00205D  3  4C 75 20             jmp e00193
002060  3  A9 10        e00144: lda #16
002062  3  85 62                sta z80_c
002064  3  A0 08                ldy #8
002066  3  B1 68                lda (z80_ix),y
002068  3  18                   clc
002069  3  65 62                adc z80_c
00206B  3  A0 08                ldy #8
00206D  3  91 68                sta (z80_ix),y
00206F  3  A9 01                lda #1
002071  3  A0 0A                ldy #10
002073  3  91 68                sta (z80_ix),y
002075  3  4C 94 20     e00193: jmp e00255
002078  3  20 53 0C     e00197: jsr cangd
00207B  3  F0 03                beq :+
00207D  3  4C 8E 20             jmp e00241
002080  3               :
002080  3  A0 08                ldy #8
002082  3  B1 68                lda (z80_ix),y
002084  3  18                   clc
002085  3  69 01                adc #1
002087  3  A0 08                ldy #8
002089  3  91 68                sta (z80_ix),y
00208B  3  4C 94 20             jmp e00255
00208E  3  A9 00        e00241: lda #0
002090  3  A0 0A                ldy #10
002092  3  91 68                sta (z80_ix),y
002094  3  A9 00        e00255: lda #0
002096  3  85 63                sta z80_b
002098  3  20 97 13             jsr sktyp
00209B  3  B0 03                bcs :+
00209D  3  4C 08 21             jmp e00480
0020A0  3               :
0020A0  3  A0 08                ldy #8
0020A2  3  B1 68                lda (z80_ix),y
0020A4  3  8D 50 02             sta varp
0020A7  3  AD D8 13             lda skptr
0020AA  3  85 68                sta z80_x
0020AC  3  AD D9 13             lda skptr+1
0020AF  3  85 69                sta z80_i
0020B1  3  A0 08                ldy #8
0020B3  3  B1 68                lda (z80_ix),y
0020B5  3  CD 50 02             cmp varp
0020B8  3  90 03                bcc *+5
0020BA  3  4C 08 21             jmp e00480
0020BD  3  A0 08                ldy #8
0020BF  3  B1 68                lda (z80_ix),y
0020C1  3  85 62                sta z80_c
0020C3  3  AD 50 02             lda varp
0020C6  3  38                   sec
0020C7  3  E5 62                sbc z80_c
0020C9  3  8D 50 02             sta varp
0020CC  3  A9 08                lda #8
0020CE  3  CD 50 02             cmp varp
0020D1  3  90 03                bcc *+5
0020D3  3  4C FE 20             jmp e00462
0020D6  3  A0 08                ldy #8
0020D8  3  B1 68                lda (z80_ix),y
0020DA  3  85 62                sta z80_c
0020DC  3  AD 50 02             lda varp
0020DF  3  18                   clc
0020E0  3  65 62                adc z80_c
0020E2  3  8D 50 02             sta varp
0020E5  3  AD 50 02             lda varp
0020E8  3  A0 08                ldy #8
0020EA  3  91 68                sta (z80_ix),y
0020EC  3  A9 10                lda #16
0020EE  3  85 62                sta z80_c
0020F0  3  A0 08                ldy #8
0020F2  3  B1 68                lda (z80_ix),y
0020F4  3  38                   sec
0020F5  3  E5 62                sbc z80_c
0020F7  3  A0 08                ldy #8
0020F9  3  91 68                sta (z80_ix),y
0020FB  3  20 2C 15             jsr gravst
0020FE  3  AD 5F 11     e00462: lda ogptr
002101  3  85 68                sta z80_x
002103  3  AD 60 11             lda ogptr+1
002106  3  85 69                sta z80_i
002108  3  20 56 13     e00480: jsr animsp
00210B  3  A9 09                lda #9
00210D  3  A0 06                ldy #6
00210F  3  D1 68                cmp (z80_ix),y
002111  3  F0 03                beq *+5
002113  3  4C 16 21             jmp e00507
002116  3  60           e00507: rts
002117  3               evnt05:
002117  3  20 56 13             jsr animsp
00211A  3  A9 05                lda #5
00211C  3  A0 06                ldy #6
00211E  3  D1 68                cmp (z80_ix),y
002120  3  F0 03                beq *+5
002122  3  4C 36 21             jmp f00058
002125  3  A9 00                lda #0
002127  3  85 63                sta z80_b
002129  3  20 97 13             jsr sktyp
00212C  3  B0 03                bcs :+
00212E  3  4C 36 21             jmp f00058
002131  3               :
002131  3  A9 01                lda #1
002133  3  8D 62 02             sta deadf
002136  3  A9 08        f00058: lda #8
002138  3  A0 06                ldy #6
00213A  3  D1 68                cmp (z80_ix),y
00213C  3  F0 03                beq *+5
00213E  3  4C 8C 21             jmp f00213
002141  3  A9 1A                lda #26
002143  3  CD 3F 02             cmp scno
002146  3  F0 03                beq *+5
002148  3  4C 68 21             jmp f00149
00214B  3  A9 00                lda #0
00214D  3  85 63                sta z80_b
00214F  3  20 97 13             jsr sktyp
002152  3  B0 03                bcs :+
002154  3  4C 65 21             jmp f00144
002157  3               :
002157  3  A9 19                lda #25
002159  3  0A                   asl a
00215A  3  8D 00 03             sta sndtyp
00215D  3  A9 1C                lda #28
00215F  3  8D 3F 02             sta scno
002162  3  20 B0 14             jsr nwscr
002165  3  4C 8C 21     f00144: jmp f00213
002168  3  A9 1C        f00149: lda #28
00216A  3  CD 3F 02             cmp scno
00216D  3  F0 03                beq *+5
00216F  3  4C 8C 21             jmp f00213
002172  3  A9 00                lda #0
002174  3  85 63                sta z80_b
002176  3  20 97 13             jsr sktyp
002179  3  B0 03                bcs :+
00217B  3  4C 8C 21             jmp f00213
00217E  3               :
00217E  3  A9 19                lda #25
002180  3  0A                   asl a
002181  3  8D 00 03             sta sndtyp
002184  3  A9 1A                lda #26
002186  3  8D 3F 02             sta scno
002189  3  20 B0 14             jsr nwscr
00218C  3  60           f00213: rts
00218D  3               evnt06:
00218D  3  20 53 0C             jsr cangd
002190  3  F0 03                beq :+
002192  3  4C A4 21             jmp g00047
002195  3               :
002195  3  20 56 13             jsr animsp
002198  3  A0 08                ldy #8
00219A  3  B1 68                lda (z80_ix),y
00219C  3  18                   clc
00219D  3  69 02                adc #2
00219F  3  91 68                sta (z80_ix),y
0021A1  3  4C E8 21             jmp g00188
0021A4  3  A9 FF        g00047: lda #255
0021A6  3  A0 05                ldy #5
0021A8  3  91 68                sta (z80_ix),y
0021AA  3  A9 28                lda #40
0021AC  3  0A                   asl a
0021AD  3  8D 00 03             sta sndtyp
0021B0  3  A9 96                lda #150
0021B2  3  85 65                sta z80_d
0021B4  3  20 41 0E             jsr random
0021B7  3  85 67                sta z80_h
0021B9  3  20 D8 05             jsr imul
0021BC  3  A5 67                lda z80_h
0021BE  3  8D 5C 02             sta varrnd
0021C1  3  AD 5C 02             lda varrnd
0021C4  3  A0 09                ldy #9
0021C6  3  91 68                sta (z80_ix),y
0021C8  3  A9 28                lda #40
0021CA  3  85 62                sta z80_c
0021CC  3  A0 09                ldy #9
0021CE  3  B1 68                lda (z80_ix),y
0021D0  3  18                   clc
0021D1  3  65 62                adc z80_c
0021D3  3  A0 09                ldy #9
0021D5  3  91 68                sta (z80_ix),y
0021D7  3  A9 14                lda #20
0021D9  3  A0 08                ldy #8
0021DB  3  91 68                sta (z80_ix),y
0021DD  3  A9 06                lda #6
0021DF  3  85 62                sta z80_c
0021E1  3  A9 0C                lda #12
0021E3  3  85 63                sta z80_b
0021E5  3  20 B8 07             jsr spawn
0021E8  3  A9 00        g00188: lda #0
0021EA  3  85 63                sta z80_b
0021EC  3  20 97 13             jsr sktyp
0021EF  3  B0 03                bcs :+
0021F1  3  4C F9 21             jmp g00218
0021F4  3               :
0021F4  3  A9 01                lda #1
0021F6  3  8D 62 02             sta deadf
0021F9  3  60           g00218: rts
0021FA  3               evnt07:
0021FA  3  A9 00                lda #0
0021FC  3  85 63                sta z80_b
0021FE  3  20 97 13             jsr sktyp
002201  3  B0 03                bcs :+
002203  3  4C 22 22             jmp h00075
002206  3               :
002206  3  A9 09                lda #9
002208  3  20 08 07             jsr gotob
00220B  3  C9 FF                cmp #255
00220D  3  F0 03                beq :+
00220F  3  4C 22 22             jmp h00075
002212  3               :
002212  3  A9 64                lda #100
002214  3  0A                   asl a
002215  3  8D 00 03             sta sndtyp
002218  3  A9 64                lda #100
00221A  3  20 77 02             jsr delay
00221D  3  A9 01                lda #1
00221F  3  8D 63 02             sta gamwon
002222  3  60           h00075: rts
002223  3               evnt08:
002223  3  A9 0B                lda #11
002225  3  A0 06                ldy #6
002227  3  91 68                sta (z80_ix),y
002229  3  A9 00                lda #0
00222B  3  CD 42 02             cmp varb
00222E  3  F0 03                beq *+5
002230  3  4C 36 22             jmp i00037
002233  3  20 56 13             jsr animsp
002236  3  A9 46        i00037: lda #70
002238  3  85 65                sta z80_d
00223A  3  20 41 0E             jsr random
00223D  3  85 67                sta z80_h
00223F  3  20 D8 05             jsr imul
002242  3  A5 67                lda z80_h
002244  3  8D 5C 02             sta varrnd
002247  3  AD 5C 02             lda varrnd
00224A  3  A0 0B                ldy #11
00224C  3  91 68                sta (z80_ix),y
00224E  3  A9 00                lda #0
002250  3  85 63                sta z80_b
002252  3  20 97 13             jsr sktyp
002255  3  B0 03                bcs :+
002257  3  4C 60 22             jmp i00118
00225A  3               :
00225A  3  A9 FF                lda #255
00225C  3  A0 05                ldy #5
00225E  3  91 68                sta (z80_ix),y
002260  3  60           i00118: rts
002261  3               evnt09:
002261  3  60                   rts
002262  3               evnt10:
002262  3  60                   rts
002263  3               evnt11:
002263  3  A9 00                lda #0
002265  3  CD 3F 02             cmp scno
002268  3  F0 03                beq *+5
00226A  3  4C 7C 22             jmp l00043
00226D  3  A9 02                lda #2
00226F  3  8D 5A 02             sta chary
002272  3  A9 07                lda #7
002274  3  8D 59 02             sta charx
002277  3  A9 10                lda #16
002279  3  20 09 0F             jsr dmsg
00227C  3  A9 1B        l00043: lda #27
00227E  3  CD 3F 02             cmp scno
002281  3  F0 03                beq *+5
002283  3  4C 95 22             jmp l00085
002286  3  A9 05                lda #5
002288  3  8D 5A 02             sta chary
00228B  3  A9 06                lda #6
00228D  3  8D 59 02             sta charx
002290  3  A9 06                lda #6
002292  3  20 09 0F             jsr dmsg
002295  3  60           l00085: rts
002296  3               evnt12:
002296  3  20 42 03             jsr cls
002299  3  A9 01                lda #1
00229B  3  8D 5A 02             sta chary
00229E  3  A9 04                lda #4
0022A0  3  8D 59 02             sta charx
0022A3  3  A9 08                lda #8
0022A5  3  20 09 0F             jsr dmsg
0022A8  3  A9 02                lda #2
0022AA  3  8D 5A 02             sta chary
0022AD  3  A9 05                lda #5
0022AF  3  8D 59 02             sta charx
0022B2  3  A9 0F                lda #15
0022B4  3  20 09 0F             jsr dmsg
0022B7  3  A9 05                lda #5
0022B9  3  8D 5A 02             sta chary
0022BC  3  A9 00                lda #0
0022BE  3  8D 59 02             sta charx
0022C1  3  A9 0D                lda #13
0022C3  3  20 09 0F             jsr dmsg
0022C6  3  A9 17                lda #23
0022C8  3  8D 5A 02             sta chary
0022CB  3  A9 03                lda #3
0022CD  3  8D 59 02             sta charx
0022D0  3  A9 0A                lda #10
0022D2  3  20 09 0F             jsr dmsg
0022D5  3  20 68 02             jsr prskey
0022D8  3  20 42 03             jsr cls
0022DB  3  A9 01                lda #1
0022DD  3  8D 5A 02             sta chary
0022E0  3  A9 04                lda #4
0022E2  3  8D 59 02             sta charx
0022E5  3  A9 08                lda #8
0022E7  3  20 09 0F             jsr dmsg
0022EA  3  A9 02                lda #2
0022EC  3  8D 5A 02             sta chary
0022EF  3  A9 05                lda #5
0022F1  3  8D 59 02             sta charx
0022F4  3  A9 0F                lda #15
0022F6  3  20 09 0F             jsr dmsg
0022F9  3  A9 05                lda #5
0022FB  3  8D 5A 02             sta chary
0022FE  3  A9 00                lda #0
002300  3  8D 59 02             sta charx
002303  3  A9 09                lda #9
002305  3  20 09 0F             jsr dmsg
002308  3  A9 0F                lda #15
00230A  3  8D 5A 02             sta chary
00230D  3  A9 00                lda #0
00230F  3  8D 59 02             sta charx
002312  3  A9 1B                lda #27
002314  3  20 09 0F             jsr dmsg
002317  3  A9 17                lda #23
002319  3  8D 5A 02             sta chary
00231C  3  A9 04                lda #4
00231E  3  8D 59 02             sta charx
002321  3  A9 1C                lda #28
002323  3  20 09 0F             jsr dmsg
002326  3  20 68 02             jsr prskey
002329  3  AD 34 02             lda joyval
00232C  3  29 40                and #64
00232E  3  F0 03                beq :+
002330  3  4C 3B 23             jmp m00272
002333  3               :
002333  3  A9 08                lda #8
002335  3  8D 4C 02             sta varl
002338  3  4C 40 23             jmp m00280
00233B  3  A9 05        m00272: lda #5
00233D  3  8D 4C 02             sta varl
002340  3  A9 17        m00280: lda #23
002342  3  8D 5A 02             sta chary
002345  3  A9 00                lda #0
002347  3  8D 59 02             sta charx
00234A  3  A9 0E                lda #14
00234C  3  20 09 0F             jsr dmsg
00234F  3  20 68 02             jsr prskey
002352  3  60                   rts
002353  3               evnt13:
002353  3  AD 4C 02             lda varl
002356  3  8D 40 02             sta numlif
002359  3  20 42 03             jsr cls
00235C  3  A9 00                lda #0
00235E  3  8D 41 02             sta vara
002361  3  A9 00                lda #0
002363  3  8D 42 02             sta varb
002366  3  A9 00                lda #0
002368  3  8D 43 02             sta varc
00236B  3  A9 00                lda #0
00236D  3  8D 4F 02             sta varo
002370  3  A9 00                lda #0
002372  3  8D 54 02             sta vart
002375  3  A9 15                lda #21
002377  3  8D 5A 02             sta chary
00237A  3  A9 01                lda #1
00237C  3  8D 59 02             sta charx
00237F  3  A9 01                lda #1
002381  3  20 09 0F             jsr dmsg
002384  3  A9 15                lda #21
002386  3  8D 5A 02             sta chary
002389  3  A9 07                lda #7
00238B  3  8D 59 02             sta charx
00238E  3  AD 40 02             lda numlif
002391  3  20 32 14             jsr disply
002394  3  A9 15                lda #21
002396  3  8D 5A 02             sta chary
002399  3  A9 13                lda #19
00239B  3  8D 59 02             sta charx
00239E  3  A9 02                lda #2
0023A0  3  20 09 0F             jsr dmsg
0023A3  3  A9 15                lda #21
0023A5  3  8D 5A 02             sta chary
0023A8  3  A9 19                lda #25
0023AA  3  8D 59 02             sta charx
0023AD  3  20 8B 08             jsr dscor
0023B0  3  A9 15                lda #21
0023B2  3  8D 5A 02             sta chary
0023B5  3  A9 09                lda #9
0023B7  3  8D 59 02             sta charx
0023BA  3  A9 04                lda #4
0023BC  3  20 09 0F             jsr dmsg
0023BF  3  A9 15                lda #21
0023C1  3  8D 5A 02             sta chary
0023C4  3  A9 10                lda #16
0023C6  3  8D 59 02             sta charx
0023C9  3  AD 4F 02             lda varo
0023CC  3  20 32 14             jsr disply
0023CF  3  A9 17                lda #23
0023D1  3  8D 5A 02             sta chary
0023D4  3  A9 09                lda #9
0023D6  3  8D 59 02             sta charx
0023D9  3  A9 07                lda #7
0023DB  3  20 09 0F             jsr dmsg
0023DE  3  A9 17                lda #23
0023E0  3  8D 5A 02             sta chary
0023E3  3  A9 12                lda #18
0023E5  3  8D 59 02             sta charx
0023E8  3  AD 54 02             lda vart
0023EB  3  20 32 14             jsr disply
0023EE  3  60                   rts
0023EF  3               evnt14:
0023EF  3  A9 15                lda #21
0023F1  3  8D 5A 02             sta chary
0023F4  3  A9 01                lda #1
0023F6  3  8D 59 02             sta charx
0023F9  3  A9 01                lda #1
0023FB  3  20 09 0F             jsr dmsg
0023FE  3  A9 15                lda #21
002400  3  8D 5A 02             sta chary
002403  3  A9 07                lda #7
002405  3  8D 59 02             sta charx
002408  3  AD 40 02             lda numlif
00240B  3  20 32 14             jsr disply
00240E  3  A9 15                lda #21
002410  3  8D 5A 02             sta chary
002413  3  A9 09                lda #9
002415  3  8D 59 02             sta charx
002418  3  A9 04                lda #4
00241A  3  20 09 0F             jsr dmsg
00241D  3  A9 15                lda #21
00241F  3  8D 5A 02             sta chary
002422  3  A9 10                lda #16
002424  3  8D 59 02             sta charx
002427  3  AD 4F 02             lda varo
00242A  3  20 32 14             jsr disply
00242D  3  A9 15                lda #21
00242F  3  8D 5A 02             sta chary
002432  3  A9 13                lda #19
002434  3  8D 59 02             sta charx
002437  3  A9 02                lda #2
002439  3  20 09 0F             jsr dmsg
00243C  3  A9 15                lda #21
00243E  3  8D 5A 02             sta chary
002441  3  A9 19                lda #25
002443  3  8D 59 02             sta charx
002446  3  20 8B 08             jsr dscor
002449  3  A9 17                lda #23
00244B  3  8D 5A 02             sta chary
00244E  3  A9 09                lda #9
002450  3  8D 59 02             sta charx
002453  3  A9 07                lda #7
002455  3  20 09 0F             jsr dmsg
002458  3  A9 17                lda #23
00245A  3  8D 5A 02             sta chary
00245D  3  A9 12                lda #18
00245F  3  8D 59 02             sta charx
002462  3  AD 54 02             lda vart
002465  3  20 32 14             jsr disply
002468  3  60                   rts
002469  3               evnt15:
002469  3  60                   rts
00246A  3               evnt16:
00246A  3  A9 32                lda #50
00246C  3  20 77 02             jsr delay
00246F  3  AD 40 02             lda numlif
002472  3  38                   sec
002473  3  E9 01                sbc #1
002475  3  8D 40 02             sta numlif
002478  3  A9 15                lda #21
00247A  3  8D 5A 02             sta chary
00247D  3  A9 07                lda #7
00247F  3  8D 59 02             sta charx
002482  3  AD 40 02             lda numlif
002485  3  20 32 14             jsr disply
002488  3  A9 00                lda #0
00248A  3  CD 40 02             cmp numlif
00248D  3  F0 03                beq *+5
00248F  3  4C A6 24             jmp q00103
002492  3  A9 0A                lda #10
002494  3  8D 5A 02             sta chary
002497  3  A9 08                lda #8
002499  3  8D 59 02             sta charx
00249C  3  A9 00                lda #0
00249E  3  20 09 0F             jsr dmsg
0024A1  3  A9 5A                lda #90
0024A3  3  20 77 02             jsr delay
0024A6  3  60           q00103: rts
0024A7  3               evnt17:
0024A7  3  20 42 03             jsr cls
0024AA  3  A9 0A                lda #10
0024AC  3  8D 5A 02             sta chary
0024AF  3  A9 08                lda #8
0024B1  3  8D 59 02             sta charx
0024B4  3  A9 00                lda #0
0024B6  3  20 09 0F             jsr dmsg
0024B9  3  A9 0C                lda #12
0024BB  3  8D 5A 02             sta chary
0024BE  3  A9 0A                lda #10
0024C0  3  8D 59 02             sta charx
0024C3  3  A9 03                lda #3
0024C5  3  20 09 0F             jsr dmsg
0024C8  3  A9 0D                lda #13
0024CA  3  8D 5A 02             sta chary
0024CD  3  A9 0D                lda #13
0024CF  3  8D 59 02             sta charx
0024D2  3  20 8B 08             jsr dscor
0024D5  3  A9 17                lda #23
0024D7  3  8D 5A 02             sta chary
0024DA  3  A9 03                lda #3
0024DC  3  8D 59 02             sta charx
0024DF  3  A9 0A                lda #10
0024E1  3  20 09 0F             jsr dmsg
0024E4  3  20 68 02             jsr prskey
0024E7  3  60                   rts
0024E8  3               evnt18:
0024E8  3  20 42 03             jsr cls
0024EB  3  A9 08                lda #8
0024ED  3  8D 5A 02             sta chary
0024F0  3  A9 08                lda #8
0024F2  3  8D 59 02             sta charx
0024F5  3  A9 05                lda #5
0024F7  3  20 09 0F             jsr dmsg
0024FA  3  A9 0C                lda #12
0024FC  3  8D 5A 02             sta chary
0024FF  3  A9 0A                lda #10
002501  3  8D 59 02             sta charx
002504  3  A9 03                lda #3
002506  3  20 09 0F             jsr dmsg
002509  3  A9 0D                lda #13
00250B  3  8D 5A 02             sta chary
00250E  3  A9 0D                lda #13
002510  3  8D 59 02             sta charx
002513  3  20 8B 08             jsr dscor
002516  3  A9 17                lda #23
002518  3  8D 5A 02             sta chary
00251B  3  A9 03                lda #3
00251D  3  8D 59 02             sta charx
002520  3  A9 0A                lda #10
002522  3  20 09 0F             jsr dmsg
002525  3  20 68 02             jsr prskey
002528  3  60                   rts
002529  3               evnt19:
002529  3  60                   rts
00252A  3  60           ptcusr: rts
00252B  3               msgdat:
00252B  3  45 4E 44 20          .byte "END OF THE GAME!",141
00252F  3  4F 46 20 54  
002533  3  48 45 20 47  
00253C  3  4C 49 56 45          .byte "LIVES:",141
002540  3  53 3A 8D     
002543  3  53 43 4F 52          .byte "SCORE:",141
002547  3  45 3A 8D     
00254A  3  46 49 4E 41          .byte "FINAL SCORE:",141
00254E  3  4C 20 53 43  
002552  3  4F 52 45 3A  
002557  3  52 45 4C 49          .byte "RELICS:",141
00255B  3  43 53 3A 8D  
00255F  3  43 4F 4E 47          .byte "CONGRATULATIONS!",13
002563  3  52 41 54 55  
002567  3  4C 41 54 49  
002570  3  20 20 20 20          .byte "    YOU",39
002574  3  59 4F 55 27  
002578  3  56 45 20 46          .byte "VE FINISHED THE GAME",13
00257C  3  49 4E 49 53  
002580  3  48 45 44 20  
00258D  3  20 20 20 20          .byte "          WITH SUCCESS!",141
002591  3  20 20 20 20  
002595  3  20 20 57 49  
0025A5  3  2E 2E 2E 2E          .byte "............",13
0025A9  3  2E 2E 2E 2E  
0025AD  3  2E 2E 2E 2E  
0025B2  3  20 20 20 20          .byte "      .GOLD COINS.",13
0025B6  3  20 20 2E 47  
0025BA  3  4F 4C 44 20  
0025C5  3  20 20 20 20          .byte "      ............",13
0025C9  3  20 20 2E 2E  
0025CD  3  2E 2E 2E 2E  
0025D8  3  20 20 20 20          .byte "      .GEMSTONES .",13
0025DC  3  20 20 2E 47  
0025E0  3  45 4D 53 54  
0025EB  3  20 20 20 20          .byte "      ............",13
0025EF  3  20 20 2E 2E  
0025F3  3  2E 2E 2E 2E  
0025FE  3  20 20 20 20          .byte "      .WAY OUT!!!.",13
002602  3  20 20 2E 57  
002606  3  41 59 20 4F  
002611  3  20 20 20 20          .byte "      ............",141
002615  3  20 20 2E 2E  
002619  3  2E 2E 2E 2E  
002624  3  54 52 45 41          .byte "TREASURE:",141
002628  3  53 55 52 45  
00262C  3  3A 8D        
00262E  3  54 48 45 20          .byte "THE TREASURE OF LUMOS ",141
002632  3  54 52 45 41  
002636  3  53 55 52 45  
002646  3  55 53 45 20          .byte "USE THE KEYBOARD TO CONTROL JACK",13
00264A  3  54 48 45 20  
00264E  3  4B 45 59 42  
002667  3  0D                   .byte 13
002668  3  20 20 20 20          .byte "          Q - UP",13
00266C  3  20 20 20 20  
002670  3  20 20 51 20  
002679  3  20 20 20 20          .byte "          A - DOWN",13
00267D  3  20 20 20 20  
002681  3  20 20 41 20  
00268C  3  20 20 20 20          .byte "          O - LEFT",13
002690  3  20 20 20 20  
002694  3  20 20 4F 20  
00269F  3  20 20 20 20          .byte "          P - RIGHT",13
0026A3  3  20 20 20 20  
0026A7  3  20 20 50 20  
0026B3  3  20 20 20 20          .byte "          M - JUMP",13
0026B7  3  20 20 20 20  
0026BB  3  20 20 4D 20  
0026C6  3  0D                   .byte 13
0026C7  3  20 20 20 20          .byte "         GOOD LUCK!!!",141
0026CB  3  20 20 20 20  
0026CF  3  20 47 4F 4F  
0026DD  3  50 52 45 53          .byte "PRESS ANY KEY TO CONTINUE!",141
0026E1  3  53 20 41 4E  
0026E5  3  59 20 4B 45  
0026F8  3  20 20 20 20          .byte "     CONGRATULATIONS!",13
0026FC  3  20 43 4F 4E  
002700  3  47 52 41 54  
00270E  3  20 20 20 20          .byte "         YOU HAVE FOUND",13
002712  3  20 20 20 20  
002716  3  20 59 4F 55  
002726  3  20 20 20 20          .byte "     THE TREASURE OF LUMOS!",141
00272A  3  20 54 48 45  
00272E  3  20 54 52 45  
002742  3  59 4F 55 27          .byte "YOU",39
002746  3  56 45 20 45          .byte "VE EARNED AN EXTRA LIVE!",141
00274A  3  41 52 4E 45  
00274E  3  44 20 41 4E  
00275F  3  20 42 65 63          .byte " Become JACK SCAVENGER, the new",13
002763  3  6F 6D 65 20  
002767  3  4A 41 43 4B  
00277F  3  20 74 72 65          .byte " treasure hunter in the market.",13
002783  3  61 73 75 72  
002787  3  65 20 68 75  
00279F  3  0D                   .byte 13
0027A0  3  20 59 6F 75          .byte " Your mission is to explore the",13
0027A4  3  72 20 6D 69  
0027A8  3  73 73 69 6F  
0027C0  3  20 43 61 76          .byte " Cave of Lune Mountain and find",13
0027C4  3  65 20 6F 66  
0027C8  3  20 4C 75 6E  
0027E0  3  20 74 68 65          .byte " the TREASURE OF LUMOS!",13
0027E4  3  20 54 52 45  
0027E8  3  41 53 55 52  
0027F8  3  0D                   .byte 13
0027F9  3  20 49 6E 20          .byte " In the cave there",39
0027FD  3  74 68 65 20  
002801  3  63 61 76 65  
00280C  3  73 20 34 35          .byte "s 45 relics.",13
002810  3  20 72 65 6C  
002814  3  69 63 73 2E  
002819  3  20 50 69 63          .byte " Pick them to earn points.",13
00281D  3  6B 20 74 68  
002821  3  65 6D 20 74  
002834  3  0D                   .byte 13
002835  3  20 41 6C 73          .byte " Also you have to find keys to",13
002839  3  6F 20 79 6F  
00283D  3  75 20 68 61  
002854  3  20 6F 70 65          .byte " open doors.",13
002858  3  6E 20 64 6F  
00285C  3  6F 72 73 2E  
002861  3  0D                   .byte 13
002862  3  20 42 75 74          .byte " But the task is not easy...",13
002866  3  20 74 68 65  
00286A  3  20 74 61 73  
00287F  3  20 49 6E 20          .byte " In your way you will find many",13
002883  3  79 6F 75 72  
002887  3  20 77 61 79  
00289F  3  20 63 61 76          .byte " cave hazards that kills you.",13
0028A3  3  65 20 68 61  
0028A7  3  7A 61 72 64  
0028BD  3  8D                   .byte 141
0028BE  3  50 52 45 53          .byte "PRESS ANY KEY TO BEGIN THE GAME!",13
0028C2  3  53 20 41 4E  
0028C6  3  59 20 4B 45  
0028DF  3  8D                   .byte 141
0028E0  3  42 79 20 4A          .byte "By Jaime Grilo (2017)",141
0028E4  3  61 69 6D 65  
0028E8  3  20 47 72 69  
0028F6  3  54 48 45 20          .byte "THE TREASURE OF",141
0028FA  3  54 52 45 41  
0028FE  3  53 55 52 45  
002906  3  59 4F 55 20          .byte "YOU NEED KEY #2 TO OPEN DOOR!",141
00290A  3  4E 45 45 44  
00290E  3  20 4B 45 59  
002924  3  59 4F 55 27          .byte "YOU",39
002928  3  56 45 20 46          .byte "VE FOUND THE KEY #1!",141
00292C  3  4F 55 4E 44  
002930  3  20 54 48 45  
00293D  3  59 4F 55 20          .byte "YOU NEED KEY #1 TO OPEN DOOR!",141
002941  3  4E 45 45 44  
002945  3  20 4B 45 59  
00295B  3  59 4F 55 27          .byte "YOU",39
00295F  3  56 45 20 46          .byte "VE FOUND THE KEY #2!",141
002963  3  4F 55 4E 44  
002967  3  20 54 48 45  
002974  3  59 4F 55 20          .byte "YOU NEED KEY #3 TO OPEN DOOR!",141
002978  3  4E 45 45 44  
00297C  3  20 4B 45 59  
002992  3  59 4F 55 27          .byte "YOU",39
002996  3  56 45 20 46          .byte "VE FOUND THE KEY#3!",141
00299A  3  4F 55 4E 44  
00299E  3  20 54 48 45  
0029AA  3  44 4F 4F 52          .byte "DOOR LOCKED!",13
0029AE  3  20 4C 4F 43  
0029B2  3  4B 45 44 21  
0029B7  3  20 59 4F 55          .byte " YOU NEED THE MAIN DOOR KEY!",141
0029BB  3  20 4E 45 45  
0029BF  3  44 20 54 48  
0029D4  3  59 4F 55 27          .byte "YOU",39
0029D8  3  56 45 20 46          .byte "VE FOUND THE MAIN DOOR KEY",141
0029DC  3  4F 55 4E 44  
0029E0  3  20 54 48 45  
0029F3  3  59 4F 55 20          .byte "YOU NEED KEY #4 TO OPEN DOOR!",141
0029F7  3  4E 45 45 44  
0029FB  3  20 4B 45 59  
002A11  3  59 4F 55 20          .byte "YOU FOUND THE KEY #4!",141
002A15  3  46 4F 55 4E  
002A19  3  44 20 54 48  
002A27  3  43 52 45 44          .byte "CREDITS:",13
002A2B  3  49 54 53 3A  
002A2F  3  0D           
002A30  3  47 61 6D 65          .byte "Game made by Jaime Grilo",13
002A34  3  20 6D 61 64  
002A38  3  65 20 62 79  
002A49  3  55 73 69 6E          .byte "Using AGD by Jonathan Cauldwell",13
002A4D  3  67 20 41 47  
002A51  3  44 20 62 79  
002A69  3  4D 75 73 69          .byte "Music by Riskej",13
002A6D  3  63 20 62 79  
002A71  3  20 52 69 73  
002A79  3  41 64 64 69          .byte "Additional code by David Saphier",13
002A7D  3  74 69 6F 6E  
002A81  3  61 6C 20 63  
002A9A  3  8D                   .byte 141
002A9B  3  42 45 47 49          .byte "BEGIN WITH 5 OR 8 LIVES?",141
002A9F  3  4E 20 57 49  
002AA3  3  54 48 20 35  
002AB4  3               nummsg:
002AB4  3  1D                   .byte 29
002AB5  3               chgfx:
002AB5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002AB9  3  00 00 00 00  
002ABD  3  00 DF DB DB          .byte 0,223,219,219,0,219,251,251
002AC1  3  00 DB FB FB  
002AC5  3  00 FF FF 00          .byte 0,255,255,0,255,85,170,85
002AC9  3  FF 55 AA 55  
002ACD  3  00 FF 99 DD          .byte 0,255,153,221,255,0,0,0
002AD1  3  FF 00 00 00  
002AD5  3  3C 24 42 52          .byte 60,36,66,82,82,145,165,255
002AD9  3  52 91 A5 FF  
002ADD  3  48 48 90 90          .byte 72,72,144,144,72,72,36,72
002AE1  3  48 48 24 48  
002AE5  3  00 AA 55 55          .byte 0,170,85,85,170,170,85,170
002AE9  3  AA AA 55 AA  
002AED  3  BF DD FF 6D          .byte 191,221,255,109,219,255,102,251
002AF1  3  DB FF 66 FB  
002AF5  3  81 5A 24 81          .byte 129,90,36,129,90,36,129,90
002AF9  3  5A 24 81 5A  
002AFD  3  24 DB 00 24          .byte 36,219,0,36,219,0,36,219
002B01  3  DB 00 24 DB  
002B05  3  C0 C0 C0 80          .byte 192,192,192,128,213,128,192,192
002B09  3  D5 80 C0 C0  
002B0D  3  03 03 03 01          .byte 3,3,3,1,171,1,3,3
002B11  3  AB 01 03 03  
002B15  3  00 00 55 55          .byte 0,0,85,85,170,170,0,0
002B19  3  AA AA 00 00  
002B1D  3  92 00 02 11          .byte 146,0,2,17,128,32,8,0
002B21  3  80 20 08 00  
002B25  3  00 FF 00 00          .byte 0,255,0,0,0,238,0,0
002B29  3  00 EE 00 00  
002B2D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002B31  3  00 00 00 00  
002B35  3  FF 81 FF C3          .byte 255,129,255,195,165,153,153,255
002B39  3  A5 99 99 FF  
002B3D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,1
002B41  3  00 00 00 01  
002B45  3  10 00 00 00          .byte 16,0,0,0,0,0,0,130
002B49  3  00 00 00 82  
002B4D  3  49 41 20 20          .byte 73,65,32,32,65,65,32,32
002B51  3  41 41 20 20  
002B55  3  92 82 04 04          .byte 146,130,4,4,130,130,4,4
002B59  3  82 82 04 04  
002B5D  3  49 43 24 22          .byte 73,67,36,34,65,65,32,32
002B61  3  41 41 20 20  
002B65  3  92 C2 24 44          .byte 146,194,36,68,130,130,4,4
002B69  3  82 82 04 04  
002B6D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002B71  3  00 00 00 00  
002B75  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002B79  3  00 00 00 00  
002B7D  3  00 DF DB DB          .byte 0,223,219,219,64,91,59,27
002B81  3  40 5B 3B 1B  
002B85  3  00 DF DB DB          .byte 0,223,219,219,2,222,252,248
002B89  3  02 DE FC F8  
002B8D  3  00 3F 7F 00          .byte 0,63,127,0,255,85,170,85
002B91  3  FF 55 AA 55  
002B95  3  00 FC FE 00          .byte 0,252,254,0,255,85,170,85
002B99  3  FF 55 AA 55  
002B9D  3  B0 DC FE 6E          .byte 176,220,254,110,219,255,102,251
002BA1  3  DB FF 66 FB  
002BA5  3  00 DF DB DB          .byte 0,223,219,219,0,219,251,251
002BA9  3  00 DB FB FB  
002BAD  3  00 FF FF 00          .byte 0,255,255,0,255,85,170,85
002BB1  3  FF 55 AA 55  
002BB5  3  00 DF DB DB          .byte 0,223,219,219,64,91,59,27
002BB9  3  40 5B 3B 1B  
002BBD  3  00 DF DB DB          .byte 0,223,219,219,2,222,252,248
002BC1  3  02 DE FC F8  
002BC5  3  00 3F 7F 00          .byte 0,63,127,0,255,85,170,85
002BC9  3  FF 55 AA 55  
002BCD  3  00 FC FE 00          .byte 0,252,254,0,255,85,170,85
002BD1  3  FF 55 AA 55  
002BD5  3  C0 C0 C0 80          .byte 192,192,192,128,213,128,192,192
002BD9  3  D5 80 C0 C0  
002BDD  3  03 03 03 01          .byte 3,3,3,1,171,1,3,3
002BE1  3  AB 01 03 03  
002BE5  3  00 FF 7E 42          .byte 0,255,126,66,255,165,165,219
002BE9  3  FF A5 A5 DB  
002BED  3  70 DF FB DB          .byte 112,223,251,219,0,219,255,251
002BF1  3  00 DB FF FB  
002BF5  3  00 0A 1F 30          .byte 0,10,31,48,99,196,137,146
002BF9  3  63 C4 89 92  
002BFD  3  94 92 89 C4          .byte 148,146,137,196,99,48,31,5
002C01  3  63 30 1F 05  
002C05  3  00 AA FF 00          .byte 0,170,255,0,128,64,32,144
002C09  3  80 40 20 90  
002C0D  3  50 90 20 40          .byte 80,144,32,64,128,0,255,85
002C11  3  80 00 FF 55  
002C15  3  00 AA FF 00          .byte 0,170,255,0,3,4,9,18
002C19  3  03 04 09 12  
002C1D  3  14 12 09 04          .byte 20,18,9,4,3,0,255,85
002C21  3  03 00 FF 55  
002C25  3  00 AA FF 00          .byte 0,170,255,0,128,64,32,144
002C29  3  80 40 20 90  
002C2D  3  50 90 20 40          .byte 80,144,32,64,128,0,255,85
002C31  3  80 00 FF 55  
002C35  3  00 55 FF 00          .byte 0,85,255,0,1,2,4,9
002C39  3  01 02 04 09  
002C3D  3  0A 09 04 02          .byte 10,9,4,2,1,0,255,170
002C41  3  01 00 FF AA  
002C45  3  00 50 F8 0C          .byte 0,80,248,12,198,35,145,73
002C49  3  C6 23 91 49  
002C4D  3  29 49 91 23          .byte 41,73,145,35,198,12,248,160
002C51  3  C6 0C F8 A0  
002C55  3  70 DF FB DB          .byte 112,223,251,219,0,219,255,251
002C59  3  00 DB FF FB  
002C5D  3  92 00 02 11          .byte 146,0,2,17,128,32,8,0
002C61  3  80 20 08 00  
002C65  3  70 DF FB DB          .byte 112,223,251,219,0,218,252,248
002C69  3  00 DA FC F8  
002C6D  3  70 DF FB DB          .byte 112,223,251,219,0,91,63,27
002C71  3  00 5B 3F 1B  
002C75  3               bprop:
002C75  3  00                   .byte 0
002C76  3  02                   .byte 2
002C77  3  02                   .byte 2
002C78  3  01                   .byte 1
002C79  3  05                   .byte 5
002C7A  3  00                   .byte 0
002C7B  3  04                   .byte 4
002C7C  3  02                   .byte 2
002C7D  3  05                   .byte 5
002C7E  3  00                   .byte 0
002C7F  3  03                   .byte 3
002C80  3  03                   .byte 3
002C81  3  03                   .byte 3
002C82  3  00                   .byte 0
002C83  3  02                   .byte 2
002C84  3  02                   .byte 2
002C85  3  02                   .byte 2
002C86  3  06                   .byte 6
002C87  3  06                   .byte 6
002C88  3  03                   .byte 3
002C89  3  03                   .byte 3
002C8A  3  02                   .byte 2
002C8B  3  02                   .byte 2
002C8C  3  00                   .byte 0
002C8D  3  00                   .byte 0
002C8E  3  02                   .byte 2
002C8F  3  02                   .byte 2
002C90  3  02                   .byte 2
002C91  3  02                   .byte 2
002C92  3  02                   .byte 2
002C93  3  02                   .byte 2
002C94  3  02                   .byte 2
002C95  3  02                   .byte 2
002C96  3  02                   .byte 2
002C97  3  02                   .byte 2
002C98  3  02                   .byte 2
002C99  3  03                   .byte 3
002C9A  3  03                   .byte 3
002C9B  3  02                   .byte 2
002C9C  3  00                   .byte 0
002C9D  3  02                   .byte 2
002C9E  3  02                   .byte 2
002C9F  3  02                   .byte 2
002CA0  3  02                   .byte 2
002CA1  3  02                   .byte 2
002CA2  3  02                   .byte 2
002CA3  3  02                   .byte 2
002CA4  3  02                   .byte 2
002CA5  3  02                   .byte 2
002CA6  3  02                   .byte 2
002CA7  3  02                   .byte 2
002CA8  3  02                   .byte 2
002CA9  3  00                   .byte 0
002CAA  3  00                   .byte 0
002CAB  3  00                   .byte 0
002CAC  3  00                   .byte 0
002CAD  3               sprgfx:
002CAD  3  03 00 01 C0          .byte 3,0,1,192,2,192,1,192,0,0,1,64,3,224,5,208,25,200,1,200,0,0,1,192,3,192,2,120,2,8,6,0
002CB1  3  02 C0 01 C0  
002CB5  3  00 00 01 40  
002CCD  3  00 C0 00 70          .byte 0,192,0,112,0,176,0,112,0,0,0,80,0,248,1,116,6,114,0,114,0,0,0,112,0,240,0,158,0,130,1,128
002CD1  3  00 B0 00 70  
002CD5  3  00 00 00 50  
002CED  3  00 30 00 1C          .byte 0,48,0,28,0,44,0,28,0,0,0,20,0,62,0,93,129,156,128,28,0,0,0,28,0,60,128,39,128,32,0,96
002CF1  3  00 2C 00 1C  
002CF5  3  00 00 00 14  
002D0D  3  00 0C 00 07          .byte 0,12,0,7,0,11,0,7,0,0,0,5,128,15,64,23,32,103,32,7,0,0,0,7,0,15,224,9,32,8,0,24
002D11  3  00 0B 00 07  
002D15  3  00 00 00 05  
002D2D  3  03 00 01 C0          .byte 3,0,1,192,2,192,1,192,0,0,1,64,1,192,1,64,1,64,1,64,0,128,1,192,1,192,1,64,1,64,3,192
002D31  3  02 C0 01 C0  
002D35  3  00 00 01 40  
002D4D  3  00 C0 00 70          .byte 0,192,0,112,0,176,0,112,0,0,0,80,0,112,0,80,0,80,0,80,0,32,0,112,0,112,0,80,0,80,0,240
002D51  3  00 B0 00 70  
002D55  3  00 00 00 50  
002D6D  3  00 30 00 1C          .byte 0,48,0,28,0,44,0,28,0,0,0,20,0,28,0,20,0,20,0,20,0,8,0,28,0,28,0,20,0,20,0,60
002D71  3  00 2C 00 1C  
002D75  3  00 00 00 14  
002D8D  3  00 0C 00 07          .byte 0,12,0,7,0,11,0,7,0,0,0,5,0,7,0,5,0,5,0,5,0,2,0,7,0,7,0,5,0,5,0,15
002D91  3  00 0B 00 07  
002D95  3  00 00 00 05  
002DAD  3  00 C0 03 80          .byte 0,192,3,128,3,64,3,128,0,0,2,128,7,192,11,160,19,152,19,128,0,0,3,128,3,192,30,64,16,64,0,96
002DB1  3  03 40 03 80  
002DB5  3  00 00 02 80  
002DCD  3  00 30 00 E0          .byte 0,48,0,224,0,208,0,224,0,0,0,160,1,240,2,232,4,230,4,224,0,0,0,224,0,240,7,144,4,16,0,24
002DD1  3  00 D0 00 E0  
002DD5  3  00 00 00 A0  
002DED  3  00 0C 00 38          .byte 0,12,0,56,0,52,0,56,0,0,0,40,0,124,0,186,129,57,1,56,0,0,0,56,0,60,1,228,1,4,0,6
002DF1  3  00 34 00 38  
002DF5  3  00 00 00 28  
002E0D  3  00 03 00 0E          .byte 0,3,0,14,0,13,0,14,0,0,0,10,0,31,128,46,96,78,0,78,0,0,0,14,0,15,0,121,0,65,128,1
002E11  3  00 0D 00 0E  
002E15  3  00 00 00 0A  
002E2D  3  00 C0 03 80          .byte 0,192,3,128,3,64,3,128,0,0,2,128,3,128,2,128,2,128,2,128,1,0,3,128,3,128,2,128,2,128,3,192
002E31  3  03 40 03 80  
002E35  3  00 00 02 80  
002E4D  3  00 30 00 E0          .byte 0,48,0,224,0,208,0,224,0,0,0,160,0,224,0,160,0,160,0,160,0,64,0,224,0,224,0,160,0,160,0,240
002E51  3  00 D0 00 E0  
002E55  3  00 00 00 A0  
002E6D  3  00 0C 00 38          .byte 0,12,0,56,0,52,0,56,0,0,0,40,0,56,0,40,0,40,0,40,0,16,0,56,0,56,0,40,0,40,0,60
002E71  3  00 34 00 38  
002E75  3  00 00 00 28  
002E8D  3  00 03 00 0E          .byte 0,3,0,14,0,13,0,14,0,0,0,10,0,14,0,10,0,10,0,10,0,4,0,14,0,14,0,10,0,10,0,15
002E91  3  00 0D 00 0E  
002E95  3  00 00 00 0A  
002EAD  3  01 80 03 C0          .byte 1,128,3,192,19,192,17,128,8,8,7,232,3,216,3,192,3,192,3,192,0,0,3,240,3,208,2,24,2,0,6,0
002EB1  3  13 C0 11 80  
002EB5  3  08 08 07 E8  
002ECD  3  00 60 00 F0          .byte 0,96,0,240,4,240,4,96,2,2,1,250,0,246,0,240,0,240,0,240,0,0,0,252,0,244,0,134,0,128,1,128
002ED1  3  04 F0 04 60  
002ED5  3  02 02 01 FA  
002EED  3  00 18 00 3C          .byte 0,24,0,60,1,60,1,24,128,128,128,126,128,61,0,60,0,60,0,60,0,0,0,63,0,61,128,33,0,32,0,96
002EF1  3  01 3C 01 18  
002EF5  3  80 80 80 7E  
002F0D  3  00 06 00 0F          .byte 0,6,0,15,0,79,0,70,32,32,160,31,96,15,0,15,0,15,0,15,0,0,192,15,64,15,96,8,0,8,0,24
002F11  3  00 4F 00 46  
002F15  3  20 20 A0 1F  
002F2D  3  01 80 03 C0          .byte 1,128,3,192,3,192,1,128,16,8,23,232,27,216,3,192,3,192,3,192,0,0,3,192,3,192,2,64,2,64,6,96
002F31  3  03 C0 01 80  
002F35  3  10 08 17 E8  
002F4D  3  00 60 00 F0          .byte 0,96,0,240,0,240,0,96,4,2,5,250,6,246,0,240,0,240,0,240,0,0,0,240,0,240,0,144,0,144,1,152
002F51  3  00 F0 00 60  
002F55  3  04 02 05 FA  
002F6D  3  00 18 00 3C          .byte 0,24,0,60,0,60,0,24,129,0,129,126,129,189,0,60,0,60,0,60,0,0,0,60,0,60,0,36,0,36,0,102
002F71  3  00 3C 00 18  
002F75  3  81 00 81 7E  
002F8D  3  00 06 00 0F          .byte 0,6,0,15,0,15,0,6,32,64,160,95,96,111,0,15,0,15,0,15,0,0,0,15,0,15,0,9,0,9,128,25
002F91  3  00 0F 00 06  
002F95  3  20 40 A0 5F  
002FAD  3  01 80 03 C0          .byte 1,128,3,192,3,200,1,136,16,16,23,224,27,192,3,192,3,192,3,192,0,0,15,192,11,192,24,64,0,64,0,96
002FB1  3  03 C8 01 88  
002FB5  3  10 10 17 E0  
002FCD  3  00 60 00 F0          .byte 0,96,0,240,0,242,0,98,4,4,5,248,6,240,0,240,0,240,0,240,0,0,3,240,2,240,6,16,0,16,0,24
002FD1  3  00 F2 00 62  
002FD5  3  04 04 05 F8  
002FED  3  00 18 00 3C          .byte 0,24,0,60,128,60,128,24,1,1,1,126,1,188,0,60,0,60,0,60,0,0,0,252,0,188,1,132,0,4,0,6
002FF1  3  80 3C 80 18  
002FF5  3  01 01 01 7E  
00300D  3  00 06 00 0F          .byte 0,6,0,15,32,15,32,6,64,64,128,95,0,111,0,15,0,15,0,15,0,0,0,63,0,47,0,97,0,1,128,1
003011  3  20 0F 20 06  
003015  3  40 40 80 5F  
00302D  3  01 80 03 C0          .byte 1,128,3,192,3,192,1,128,16,8,23,232,27,216,3,192,3,192,3,192,0,0,3,192,3,192,2,64,2,64,6,96
003031  3  03 C0 01 80  
003035  3  10 08 17 E8  
00304D  3  00 60 00 F0          .byte 0,96,0,240,0,240,0,96,4,2,5,250,6,246,0,240,0,240,0,240,0,0,0,240,0,240,0,144,0,144,1,152
003051  3  00 F0 00 60  
003055  3  04 02 05 FA  
00306D  3  00 18 00 3C          .byte 0,24,0,60,0,60,0,24,129,0,129,126,129,189,0,60,0,60,0,60,0,0,0,60,0,60,0,36,0,36,0,102
003071  3  00 3C 00 18  
003075  3  81 00 81 7E  
00308D  3  00 06 00 0F          .byte 0,6,0,15,0,15,0,6,32,64,160,95,96,111,0,15,0,15,0,15,0,0,0,15,0,15,0,9,0,9,128,25
003091  3  00 0F 00 06  
003095  3  20 40 A0 5F  
0030AD  3  0F F0 11 80          .byte 15,240,17,128,19,192,33,128,33,128,71,224,79,240,249,144,249,144,79,240,71,224,33,128,33,128,19,192,17,128,15,240
0030B1  3  13 C0 21 80  
0030B5  3  21 80 47 E0  
0030CD  3  03 FC 04 60          .byte 3,252,4,96,4,240,8,96,8,96,17,248,19,252,62,100,62,100,19,252,17,248,8,96,8,96,4,240,4,96,3,252
0030D1  3  04 F0 08 60  
0030D5  3  08 60 11 F8  
0030ED  3  00 FF 01 18          .byte 0,255,1,24,1,60,2,24,2,24,4,126,4,255,15,153,15,153,4,255,4,126,2,24,2,24,1,60,1,24,0,255
0030F1  3  01 3C 02 18  
0030F5  3  02 18 04 7E  
00310D  3  C0 3F 00 46          .byte 192,63,0,70,0,79,0,134,0,134,129,31,193,63,67,230,67,230,193,63,129,31,0,134,0,134,0,79,0,70,192,63
003111  3  00 4F 00 86  
003115  3  00 86 81 1F  
00312D  3  0F F0 01 80          .byte 15,240,1,128,3,192,1,128,1,128,7,224,15,240,9,144,9,144,15,240,7,224,1,128,1,128,3,192,1,128,15,240
003131  3  03 C0 01 80  
003135  3  01 80 07 E0  
00314D  3  03 FC 00 60          .byte 3,252,0,96,0,240,0,96,0,96,1,248,3,252,2,100,2,100,3,252,1,248,0,96,0,96,0,240,0,96,3,252
003151  3  00 F0 00 60  
003155  3  00 60 01 F8  
00316D  3  00 FF 00 18          .byte 0,255,0,24,0,60,0,24,0,24,0,126,0,255,0,153,0,153,0,255,0,126,0,24,0,24,0,60,0,24,0,255
003171  3  00 3C 00 18  
003175  3  00 18 00 7E  
00318D  3  C0 3F 00 06          .byte 192,63,0,6,0,15,0,6,0,6,128,31,192,63,64,38,64,38,192,63,128,31,0,6,0,6,0,15,0,6,192,63
003191  3  00 0F 00 06  
003195  3  00 06 80 1F  
0031AD  3  0F F0 01 88          .byte 15,240,1,136,3,200,1,132,1,132,7,226,15,242,9,159,9,159,15,242,7,226,1,132,1,132,3,200,1,136,15,240
0031B1  3  03 C8 01 84  
0031B5  3  01 84 07 E2  
0031CD  3  03 FC 00 62          .byte 3,252,0,98,0,242,0,97,0,97,129,248,131,252,194,103,194,103,131,252,129,248,0,97,0,97,0,242,0,98,3,252
0031D1  3  00 F2 00 61  
0031D5  3  00 61 81 F8  
0031ED  3  00 FF 80 18          .byte 0,255,128,24,128,60,64,24,64,24,32,126,32,255,240,153,240,153,32,255,32,126,64,24,64,24,128,60,128,24,0,255
0031F1  3  80 3C 40 18  
0031F5  3  40 18 20 7E  
00320D  3  C0 3F 20 06          .byte 192,63,32,6,32,15,16,6,16,6,136,31,200,63,124,38,124,38,200,63,136,31,16,6,16,6,32,15,32,6,192,63
003211  3  20 0F 10 06  
003215  3  10 06 88 1F  
00322D  3  0F F0 01 80          .byte 15,240,1,128,3,192,1,128,1,128,7,224,15,240,9,144,9,144,15,240,7,224,1,128,1,128,3,192,1,128,15,240
003231  3  03 C0 01 80  
003235  3  01 80 07 E0  
00324D  3  03 FC 00 60          .byte 3,252,0,96,0,240,0,96,0,96,1,248,3,252,2,100,2,100,3,252,1,248,0,96,0,96,0,240,0,96,3,252
003251  3  00 F0 00 60  
003255  3  00 60 01 F8  
00326D  3  00 FF 00 18          .byte 0,255,0,24,0,60,0,24,0,24,0,126,0,255,0,153,0,153,0,255,0,126,0,24,0,24,0,60,0,24,0,255
003271  3  00 3C 00 18  
003275  3  00 18 00 7E  
00328D  3  C0 3F 00 06          .byte 192,63,0,6,0,15,0,6,0,6,128,31,192,63,64,38,64,38,192,63,128,31,0,6,0,6,0,15,0,6,192,63
003291  3  00 0F 00 06  
003295  3  00 06 80 1F  
0032AD  3  03 C0 0E 70          .byte 3,192,14,112,8,16,122,94,144,9,185,157,200,19,203,211,200,19,206,115,7,224,6,96,6,96,6,96,30,120,30,120
0032B1  3  08 10 7A 5E  
0032B5  3  90 09 B9 9D  
0032CD  3  00 F0 03 9C          .byte 0,240,3,156,2,4,158,151,100,2,110,103,242,4,242,244,242,4,243,156,1,248,1,152,1,152,1,152,7,158,7,158
0032D1  3  02 04 9E 97  
0032D5  3  64 02 6E 67  
0032ED  3  00 3C 00 E7          .byte 0,60,0,231,0,129,231,165,153,0,219,153,60,129,60,189,60,129,60,231,0,126,0,102,0,102,0,102,129,231,129,231
0032F1  3  00 81 E7 A5  
0032F5  3  99 00 DB 99  
00330D  3  00 0F C0 39          .byte 0,15,192,57,64,32,121,233,38,64,118,230,79,32,79,47,79,32,207,57,128,31,128,25,128,25,128,25,224,121,224,121
003311  3  40 20 79 E9  
003315  3  26 40 76 E6  
00332D  3  03 C0 0E 70          .byte 3,192,14,112,8,16,122,94,144,9,185,157,200,19,201,147,104,22,110,118,15,240,14,112,12,48,12,48,60,60,60,60
003331  3  08 10 7A 5E  
003335  3  90 09 B9 9D  
00334D  3  00 F0 03 9C          .byte 0,240,3,156,2,4,158,151,100,2,110,103,242,4,242,100,154,5,155,157,3,252,3,156,3,12,3,12,15,15,15,15
003351  3  02 04 9E 97  
003355  3  64 02 6E 67  
00336D  3  00 3C 00 E7          .byte 0,60,0,231,0,129,231,165,153,0,219,153,60,129,60,153,102,129,102,231,0,255,0,231,0,195,0,195,195,195,195,195
003371  3  00 81 E7 A5  
003375  3  99 00 DB 99  
00338D  3  00 0F C0 39          .byte 0,15,192,57,64,32,121,233,38,64,118,230,79,32,79,38,89,160,217,185,192,63,192,57,192,48,192,48,240,240,240,240
003391  3  40 20 79 E9  
003395  3  26 40 76 E6  
0033AD  3  03 C0 0E 70          .byte 3,192,14,112,8,16,122,94,144,9,185,157,200,19,248,31,56,28,14,112,15,240,14,112,24,24,24,24,120,30,120,30
0033B1  3  08 10 7A 5E  
0033B5  3  90 09 B9 9D  
0033CD  3  00 F0 03 9C          .byte 0,240,3,156,2,4,158,151,100,2,110,103,242,4,254,7,14,7,3,156,3,252,3,156,6,6,6,6,158,7,158,7
0033D1  3  02 04 9E 97  
0033D5  3  64 02 6E 67  
0033ED  3  00 3C 00 E7          .byte 0,60,0,231,0,129,231,165,153,0,219,153,60,129,255,129,195,129,0,231,0,255,0,231,129,129,129,129,231,129,231,129
0033F1  3  00 81 E7 A5  
0033F5  3  99 00 DB 99  
00340D  3  00 0F C0 39          .byte 0,15,192,57,64,32,121,233,38,64,118,230,79,32,127,224,112,224,192,57,192,63,192,57,96,96,96,96,121,224,121,224
003411  3  40 20 79 E9  
003415  3  26 40 76 E6  
00342D  3  03 C0 0E 70          .byte 3,192,14,112,8,16,122,94,144,9,185,157,200,19,201,147,104,22,110,118,15,240,14,112,12,48,12,48,60,60,60,60
003431  3  08 10 7A 5E  
003435  3  90 09 B9 9D  
00344D  3  00 F0 03 9C          .byte 0,240,3,156,2,4,158,151,100,2,110,103,242,4,242,100,154,5,155,157,3,252,3,156,3,12,3,12,15,15,15,15
003451  3  02 04 9E 97  
003455  3  64 02 6E 67  
00346D  3  00 3C 00 E7          .byte 0,60,0,231,0,129,231,165,153,0,219,153,60,129,60,153,102,129,102,231,0,255,0,231,0,195,0,195,195,195,195,195
003471  3  00 81 E7 A5  
003475  3  99 00 DB 99  
00348D  3  00 0F C0 39          .byte 0,15,192,57,64,32,121,233,38,64,118,230,79,32,79,38,89,160,217,185,192,63,192,57,192,48,192,48,240,240,240,240
003491  3  40 20 79 E9  
003495  3  26 40 76 E6  
0034AD  3  00 00 00 00          .byte 0,0,0,0,0,0,2,73,2,73,4,146,4,146,9,36,9,36,18,72,146,73,255,255,146,73,255,255,146,73,255,255
0034B1  3  00 00 02 49  
0034B5  3  02 49 04 92  
0034CD  3  00 00 00 00          .byte 0,0,0,0,0,0,64,146,64,146,129,36,129,36,2,73,2,73,4,146,100,146,255,255,100,146,255,255,100,146,255,255
0034D1  3  00 00 40 92  
0034D5  3  40 92 81 24  
0034ED  3  00 00 00 00          .byte 0,0,0,0,0,0,144,36,144,36,32,73,32,73,64,146,64,146,129,36,153,36,255,255,153,36,255,255,153,36,255,255
0034F1  3  00 00 90 24  
0034F5  3  90 24 20 49  
00350D  3  00 00 00 00          .byte 0,0,0,0,0,0,36,9,36,9,72,18,72,18,144,36,144,36,32,73,38,73,255,255,38,73,255,255,38,73,255,255
003511  3  00 00 24 09  
003515  3  24 09 48 12  
00352D  3  00 00 00 00          .byte 0,0,0,0,0,0,18,72,18,72,18,72,18,72,18,72,18,72,18,72,146,73,255,255,146,73,255,255,146,73,255,255
003531  3  00 00 12 48  
003535  3  12 48 12 48  
00354D  3  00 00 00 00          .byte 0,0,0,0,0,0,4,146,4,146,4,146,4,146,4,146,4,146,4,146,100,146,255,255,100,146,255,255,100,146,255,255
003551  3  00 00 04 92  
003555  3  04 92 04 92  
00356D  3  00 00 00 00          .byte 0,0,0,0,0,0,129,36,129,36,129,36,129,36,129,36,129,36,129,36,153,36,255,255,153,36,255,255,153,36,255,255
003571  3  00 00 81 24  
003575  3  81 24 81 24  
00358D  3  00 00 00 00          .byte 0,0,0,0,0,0,32,73,32,73,32,73,32,73,32,73,32,73,32,73,38,73,255,255,38,73,255,255,38,73,255,255
003591  3  00 00 20 49  
003595  3  20 49 20 49  
0035AD  3  00 00 00 00          .byte 0,0,0,0,0,0,146,64,146,64,73,32,73,32,36,144,36,144,18,72,146,73,255,255,146,73,255,255,146,73,255,255
0035B1  3  00 00 92 40  
0035B5  3  92 40 49 20  
0035CD  3  00 00 00 00          .byte 0,0,0,0,0,0,36,144,36,144,18,72,18,72,9,36,9,36,4,146,100,146,255,255,100,146,255,255,100,146,255,255
0035D1  3  00 00 24 90  
0035D5  3  24 90 12 48  
0035ED  3  00 00 00 00          .byte 0,0,0,0,0,0,9,36,9,36,4,146,4,146,2,73,2,73,129,36,153,36,255,255,153,36,255,255,153,36,255,255
0035F1  3  00 00 09 24  
0035F5  3  09 24 04 92  
00360D  3  00 00 00 00          .byte 0,0,0,0,0,0,2,73,2,73,129,36,129,36,64,146,64,146,32,73,38,73,255,255,38,73,255,255,38,73,255,255
003611  3  00 00 02 49  
003615  3  02 49 81 24  
00362D  3  00 00 00 00          .byte 0,0,0,0,0,0,18,72,18,72,18,72,18,72,18,72,18,72,18,72,146,73,255,255,146,73,255,255,146,73,255,255
003631  3  00 00 12 48  
003635  3  12 48 12 48  
00364D  3  00 00 00 00          .byte 0,0,0,0,0,0,4,146,4,146,4,146,4,146,4,146,4,146,4,146,100,146,255,255,100,146,255,255,100,146,255,255
003651  3  00 00 04 92  
003655  3  04 92 04 92  
00366D  3  00 00 00 00          .byte 0,0,0,0,0,0,129,36,129,36,129,36,129,36,129,36,129,36,129,36,153,36,255,255,153,36,255,255,153,36,255,255
003671  3  00 00 81 24  
003675  3  81 24 81 24  
00368D  3  00 00 00 00          .byte 0,0,0,0,0,0,32,73,32,73,32,73,32,73,32,73,32,73,32,73,38,73,255,255,38,73,255,255,38,73,255,255
003691  3  00 00 20 49  
003695  3  20 49 20 49  
0036AD  3  07 C0 18 30          .byte 7,192,24,48,32,8,64,68,64,36,128,18,128,18,128,2,144,2,144,2,72,4,68,4,32,8,24,48,7,192,0,0
0036B1  3  20 08 40 44  
0036B5  3  40 24 80 12  
0036CD  3  01 F0 06 0C          .byte 1,240,6,12,8,2,16,17,16,9,160,4,160,4,160,0,164,0,164,0,18,1,17,1,8,2,6,12,1,240,0,0
0036D1  3  08 02 10 11  
0036D5  3  10 09 A0 04  
0036ED  3  00 7C 01 83          .byte 0,124,1,131,130,0,68,4,68,2,40,1,40,1,40,0,41,0,41,0,68,128,68,64,130,0,1,131,0,124,0,0
0036F1  3  82 00 44 04  
0036F5  3  44 02 28 01  
00370D  3  00 1F C0 60          .byte 0,31,192,96,32,128,17,1,145,0,74,0,74,0,10,0,10,64,10,64,17,32,17,16,32,128,192,96,0,31,0,0
003711  3  20 80 11 01  
003715  3  91 00 4A 00  
00372D  3  07 C0 18 30          .byte 7,192,24,48,32,8,76,4,80,4,144,2,128,2,128,2,128,2,128,18,64,20,64,100,32,8,24,48,7,192,0,0
003731  3  20 08 4C 04  
003735  3  50 04 90 02  
00374D  3  01 F0 06 0C          .byte 1,240,6,12,8,2,19,1,20,1,164,0,160,0,160,0,160,0,160,4,16,5,16,25,8,2,6,12,1,240,0,0
003751  3  08 02 13 01  
003755  3  14 01 A4 00  
00376D  3  00 7C 01 83          .byte 0,124,1,131,130,0,68,192,69,0,41,0,40,0,40,0,40,0,40,1,68,1,68,6,130,0,1,131,0,124,0,0
003771  3  82 00 44 C0  
003775  3  45 00 29 00  
00378D  3  00 1F C0 60          .byte 0,31,192,96,32,128,17,48,17,64,10,64,10,0,10,0,10,0,74,0,81,0,145,1,32,128,192,96,0,31,0,0
003791  3  20 80 11 30  
003795  3  11 40 0A 40  
0037AD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,112,28,216,54,15,224,5,64,7,192,8,32,11,160,7,192,8,32,16,16,16,16,0,0
0037B1  3  00 00 00 00  
0037B5  3  70 1C D8 36  
0037CD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,28,7,182,13,3,248,1,80,1,240,2,8,2,232,1,240,2,8,4,4,4,4,0,0
0037D1  3  00 00 00 00  
0037D5  3  1C 07 B6 0D  
0037ED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,199,1,109,131,0,254,0,84,0,124,0,130,0,186,0,124,0,130,1,1,1,1,0,0
0037F1  3  00 00 00 00  
0037F5  3  C7 01 6D 83  
00380D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,113,192,219,96,128,63,0,21,0,31,128,32,128,46,0,31,128,32,64,64,64,64,0,0
003811  3  00 00 00 00  
003815  3  71 C0 DB 60  
00382D  3  00 00 00 00          .byte 0,0,0,0,0,0,64,4,112,28,24,48,15,224,5,64,7,192,8,32,8,32,7,192,8,32,16,16,32,8,0,0
003831  3  00 00 40 04  
003835  3  70 1C 18 30  
00384D  3  00 00 00 00          .byte 0,0,0,0,0,0,16,1,28,7,6,12,3,248,1,80,1,240,2,8,2,8,1,240,2,8,4,4,8,2,0,0
003851  3  00 00 10 01  
003855  3  1C 07 06 0C  
00386D  3  00 00 00 00          .byte 0,0,0,0,0,0,68,0,199,1,1,131,0,254,0,84,0,124,0,130,0,130,0,124,0,130,1,1,130,0,0,0
003871  3  00 00 44 00  
003875  3  C7 01 01 83  
00388D  3  00 00 00 00          .byte 0,0,0,0,0,0,17,0,113,192,192,96,128,63,0,21,0,31,128,32,128,32,0,31,128,32,64,64,32,128,0,0
003891  3  00 00 11 00  
003895  3  71 C0 C0 60  
0038AD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,112,28,216,54,15,224,5,64,7,192,8,32,11,160,7,192,8,32,16,16,16,16,0,0
0038B1  3  00 00 00 00  
0038B5  3  70 1C D8 36  
0038CD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,28,7,182,13,3,248,1,80,1,240,2,8,2,232,1,240,2,8,4,4,4,4,0,0
0038D1  3  00 00 00 00  
0038D5  3  1C 07 B6 0D  
0038ED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,199,1,109,131,0,254,0,84,0,124,0,130,0,186,0,124,0,130,1,1,1,1,0,0
0038F1  3  00 00 00 00  
0038F5  3  C7 01 6D 83  
00390D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,113,192,219,96,128,63,0,21,0,31,128,32,128,46,0,31,128,32,64,64,64,64,0,0
003911  3  00 00 00 00  
003915  3  71 C0 DB 60  
00392D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,56,56,111,236,69,68,71,196,12,96,14,224,7,192,8,32,8,32,8,32,0,0
003931  3  00 00 00 00  
003935  3  00 00 38 38  
00394D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,14,14,27,251,17,81,17,241,3,24,3,184,1,240,2,8,2,8,2,8,0,0
003951  3  00 00 00 00  
003955  3  00 00 0E 0E  
00396D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,131,131,198,254,68,84,68,124,0,198,0,238,0,124,0,130,0,130,0,130,0,0
003971  3  00 00 00 00  
003975  3  00 00 83 83  
00398D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,224,224,177,191,17,21,17,31,128,49,128,59,0,31,128,32,128,32,128,32,0,0
003991  3  00 00 00 00  
003995  3  00 00 E0 E0  
0039AD  3  FF FF 9F F9          .byte 255,255,159,249,8,16,128,1,64,2,66,18,128,1,0,128,130,1,66,18,8,16,64,2,128,1,8,16,159,249,255,255
0039B1  3  08 10 80 01  
0039B5  3  40 02 42 12  
0039CD  3  FF FF 67 FE          .byte 255,255,103,254,2,4,96,0,144,0,144,132,96,0,0,32,96,128,144,132,2,4,144,0,96,0,2,4,103,254,255,255
0039D1  3  02 04 60 00  
0039D5  3  90 00 90 84  
0039ED  3  FF FF 99 FF          .byte 255,255,153,255,0,129,24,0,36,0,36,33,24,0,0,8,24,32,36,33,0,129,36,0,24,0,0,129,153,255,255,255
0039F1  3  00 81 18 00  
0039F5  3  24 00 24 21  
003A0D  3  FF FF E6 7F          .byte 255,255,230,127,64,32,6,0,9,0,73,8,6,0,0,2,6,8,73,8,64,32,9,0,6,0,64,32,230,127,255,255
003A11  3  40 20 06 00  
003A15  3  09 00 49 08  
003A2D  3  FF FF 9F F9          .byte 255,255,159,249,8,16,128,1,72,2,64,66,128,65,0,16,128,1,72,2,0,64,64,2,130,1,8,16,159,249,255,255
003A31  3  08 10 80 01  
003A35  3  48 02 40 42  
003A4D  3  FF FF 67 FE          .byte 255,255,103,254,2,4,96,0,146,0,144,16,96,16,0,4,96,0,146,0,0,16,144,0,96,128,2,4,103,254,255,255
003A51  3  02 04 60 00  
003A55  3  92 00 90 10  
003A6D  3  FF FF 99 FF          .byte 255,255,153,255,0,129,24,0,36,128,36,4,24,4,0,1,24,0,36,128,0,4,36,0,24,32,0,129,153,255,255,255
003A71  3  00 81 18 00  
003A75  3  24 80 24 04  
003A8D  3  FF FF E6 7F          .byte 255,255,230,127,64,32,6,0,9,32,9,1,6,1,64,0,6,0,9,32,0,1,9,0,6,8,64,32,230,127,255,255
003A91  3  40 20 06 00  
003A95  3  09 20 09 01  
003AAD  3  FF FF 9F F9          .byte 255,255,159,249,8,16,130,1,66,2,64,18,128,17,0,0,128,1,64,18,0,0,72,66,130,1,8,16,159,249,255,255
003AB1  3  08 10 82 01  
003AB5  3  42 02 40 12  
003ACD  3  FF FF 67 FE          .byte 255,255,103,254,2,4,96,128,144,128,144,4,96,4,0,0,96,0,144,4,0,0,146,16,96,128,2,4,103,254,255,255
003AD1  3  02 04 60 80  
003AD5  3  90 80 90 04  
003AED  3  FF FF 99 FF          .byte 255,255,153,255,0,129,24,32,36,32,36,1,24,1,0,0,24,0,36,1,0,0,36,132,24,32,0,129,153,255,255,255
003AF1  3  00 81 18 20  
003AF5  3  24 20 24 01  
003B0D  3  FF FF E6 7F          .byte 255,255,230,127,64,32,6,8,9,8,73,0,70,0,0,0,6,0,73,0,0,0,9,33,6,8,64,32,230,127,255,255
003B11  3  40 20 06 08  
003B15  3  09 08 49 00  
003B2D  3  FF FF 9F F9          .byte 255,255,159,249,8,16,130,33,64,2,64,2,128,1,8,0,136,1,64,66,8,0,64,18,128,129,8,16,159,249,255,255
003B31  3  08 10 82 21  
003B35  3  40 02 40 02  
003B4D  3  FF FF 67 FE          .byte 255,255,103,254,2,4,96,136,144,0,144,0,96,0,2,0,98,0,144,16,2,0,144,4,96,32,2,4,103,254,255,255
003B51  3  02 04 60 88  
003B55  3  90 00 90 00  
003B6D  3  FF FF 99 FF          .byte 255,255,153,255,0,129,24,34,36,0,36,0,24,0,0,128,24,128,36,4,0,128,36,1,24,8,0,129,153,255,255,255
003B71  3  00 81 18 22  
003B75  3  24 00 24 00  
003B8D  3  FF FF E6 7F          .byte 255,255,230,127,64,32,134,8,9,0,9,0,6,0,0,32,6,32,9,1,0,32,73,0,6,2,64,32,230,127,255,255
003B91  3  40 20 86 08  
003B95  3  09 00 09 00  
003BAD  3  FB DF 84 21          .byte 251,223,132,33,161,9,144,133,132,33,107,214,84,42,77,178,69,162,36,33,35,193,36,33,11,208,28,56,15,240,0,0
003BB1  3  A1 09 90 85  
003BB5  3  84 21 6B D6  
003BCD  3  FE F7 61 08          .byte 254,247,97,8,104,66,100,33,97,8,154,245,149,10,147,108,145,104,73,8,72,240,73,8,2,244,7,14,3,252,0,0
003BD1  3  68 42 64 21  
003BD5  3  61 08 9A F5  
003BED  3  FF BD 18 42          .byte 255,189,24,66,154,16,89,8,24,66,102,189,165,66,36,219,36,90,18,66,18,60,18,66,0,189,129,195,0,255,0,0
003BF1  3  9A 10 59 08  
003BF5  3  18 42 66 BD  
003C0D  3  7F EF 86 10          .byte 127,239,134,16,38,132,22,66,134,16,89,175,169,80,201,54,137,22,132,144,4,143,132,144,64,47,224,112,192,63,0,0
003C11  3  26 84 16 42  
003C15  3  86 10 59 AF  
003C2D  3  FB DF 84 21          .byte 251,223,132,33,144,133,161,9,132,33,107,214,84,42,77,178,69,162,68,34,67,194,68,34,11,208,28,56,15,240,0,0
003C31  3  90 85 A1 09  
003C35  3  84 21 6B D6  
003C4D  3  FE F7 61 08          .byte 254,247,97,8,100,33,104,66,97,8,154,245,149,10,147,108,145,104,145,8,144,240,145,8,2,244,7,14,3,252,0,0
003C51  3  64 21 68 42  
003C55  3  61 08 9A F5  
003C6D  3  FF BD 18 42          .byte 255,189,24,66,89,8,154,16,24,66,102,189,165,66,36,219,36,90,36,66,36,60,36,66,0,189,129,195,0,255,0,0
003C71  3  59 08 9A 10  
003C75  3  18 42 66 BD  
003C8D  3  7F EF 86 10          .byte 127,239,134,16,22,66,38,132,134,16,89,175,169,80,201,54,137,22,137,16,9,15,137,16,64,47,224,112,192,63,0,0
003C91  3  16 42 26 84  
003C95  3  86 10 59 AF  
003CAD  3  FB DF 84 21          .byte 251,223,132,33,161,9,144,133,132,33,107,214,84,42,77,178,69,162,132,36,131,196,132,36,11,208,28,56,15,240,0,0
003CB1  3  A1 09 90 85  
003CB5  3  84 21 6B D6  
003CCD  3  FE F7 61 08          .byte 254,247,97,8,104,66,100,33,97,8,154,245,149,10,147,108,145,104,33,9,32,241,33,9,2,244,7,14,3,252,0,0
003CD1  3  68 42 64 21  
003CD5  3  61 08 9A F5  
003CED  3  FF BD 18 42          .byte 255,189,24,66,154,16,89,8,24,66,102,189,165,66,36,219,36,90,72,66,72,60,72,66,0,189,129,195,0,255,0,0
003CF1  3  9A 10 59 08  
003CF5  3  18 42 66 BD  
003D0D  3  7F EF 86 10          .byte 127,239,134,16,38,132,22,66,134,16,89,175,169,80,201,54,137,22,146,16,18,15,146,16,64,47,224,112,192,63,0,0
003D11  3  26 84 16 42  
003D15  3  86 10 59 AF  
003D2D  3  FB DF 84 21          .byte 251,223,132,33,144,133,161,9,132,33,107,214,84,42,77,178,69,162,68,34,67,194,68,34,11,208,28,56,15,240,0,0
003D31  3  90 85 A1 09  
003D35  3  84 21 6B D6  
003D4D  3  FE F7 61 08          .byte 254,247,97,8,100,33,104,66,97,8,154,245,149,10,147,108,145,104,145,8,144,240,145,8,2,244,7,14,3,252,0,0
003D51  3  64 21 68 42  
003D55  3  61 08 9A F5  
003D6D  3  FF BD 18 42          .byte 255,189,24,66,89,8,154,16,24,66,102,189,165,66,36,219,36,90,36,66,36,60,36,66,0,189,129,195,0,255,0,0
003D71  3  59 08 9A 10  
003D75  3  18 42 66 BD  
003D8D  3  7F EF 86 10          .byte 127,239,134,16,22,66,38,132,134,16,89,175,169,80,201,54,137,22,137,16,9,15,137,16,64,47,224,112,192,63,0,0
003D91  3  16 42 26 84  
003D95  3  86 10 59 AF  
003DAD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,80,2,160,7,240,15,216,27,236,6,240,25,12,17,4,0,0
003DB1  3  00 00 00 00  
003DB5  3  00 00 00 00  
003DCD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,84,0,168,1,252,3,246,6,251,1,188,6,67,4,65,0,0
003DD1  3  00 00 00 00  
003DD5  3  00 00 00 00  
003DED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,42,0,127,128,253,193,190,0,111,193,144,65,16,0,0
003DF1  3  00 00 00 00  
003DF5  3  00 00 00 00  
003E0D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,21,128,10,192,31,96,63,176,111,192,27,48,100,16,68,0,0
003E11  3  00 00 00 00  
003E15  3  00 00 00 00  
003E2D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,80,2,160,7,240,15,216,27,236,23,116,8,136,8,136,0,0
003E31  3  00 00 00 00  
003E35  3  00 00 00 00  
003E4D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,84,0,168,1,252,3,246,6,251,5,221,2,34,2,34,0,0
003E51  3  00 00 00 00  
003E55  3  00 00 00 00  
003E6D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,42,0,127,128,253,193,190,65,119,128,136,128,136,0,0
003E71  3  00 00 00 00  
003E75  3  00 00 00 00  
003E8D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,21,128,10,192,31,96,63,176,111,208,93,32,34,32,34,0,0
003E91  3  00 00 00 00  
003E95  3  00 00 00 00  
003EAD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,80,2,160,7,240,15,216,27,236,23,180,8,72,4,80,0,0
003EB1  3  00 00 00 00  
003EB5  3  00 00 00 00  
003ECD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,84,0,168,1,252,3,246,6,251,5,237,2,18,1,20,0,0
003ED1  3  00 00 00 00  
003ED5  3  00 00 00 00  
003EED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,42,0,127,128,253,193,190,65,123,128,132,0,69,0,0
003EF1  3  00 00 00 00  
003EF5  3  00 00 00 00  
003F0D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,21,128,10,192,31,96,63,176,111,208,94,32,33,64,17,0,0
003F11  3  00 00 00 00  
003F15  3  00 00 00 00  
003F2D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,80,2,160,7,240,15,216,27,236,23,116,8,136,8,136,0,0
003F31  3  00 00 00 00  
003F35  3  00 00 00 00  
003F4D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,84,0,168,1,252,3,246,6,251,5,221,2,34,2,34,0,0
003F51  3  00 00 00 00  
003F55  3  00 00 00 00  
003F6D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,42,0,127,128,253,193,190,65,119,128,136,128,136,0,0
003F71  3  00 00 00 00  
003F75  3  00 00 00 00  
003F8D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,21,128,10,192,31,96,63,176,111,208,93,32,34,32,34,0,0
003F91  3  00 00 00 00  
003F95  3  00 00 00 00  
003FAD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003FB1  3  00 00 00 00  
003FB5  3  00 00 00 00  
003FCD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003FD1  3  00 00 00 00  
003FD5  3  00 00 00 00  
003FED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003FF1  3  00 00 00 00  
003FF5  3  00 00 00 00  
00400D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004011  3  00 00 00 00  
004015  3  00 00 00 00  
00402D  3  08 40 00 42          .byte 8,64,0,66,8,224,71,18,72,12,18,2,34,4,33,2,64,132,32,8,16,8,16,16,11,32,4,192,0,0,0,0
004031  3  08 E0 47 12  
004035  3  48 0C 12 02  
00404D  3  02 10 80 10          .byte 2,16,128,16,2,56,145,196,18,3,132,128,8,129,136,64,16,33,8,2,4,2,4,4,2,200,1,48,0,0,0,0
004051  3  02 38 91 C4  
004055  3  12 03 84 80  
00406D  3  00 84 20 04          .byte 0,132,32,4,0,142,36,113,196,128,33,32,66,32,34,16,68,8,130,0,129,0,1,1,0,178,0,76,0,0,0,0
004071  3  00 8E 24 71  
004075  3  C4 80 21 20  
00408D  3  00 21 08 01          .byte 0,33,8,1,128,35,73,28,49,32,8,72,16,136,8,132,17,2,32,128,32,64,64,64,128,44,0,19,0,0,0,0
004091  3  80 23 49 1C  
004095  3  31 20 08 48  
0040AD  3  05 08 24 04          .byte 5,8,36,4,0,224,39,18,8,12,17,2,34,4,34,2,65,4,32,8,16,8,16,16,11,32,4,192,0,0,0,0
0040B1  3  00 E0 27 12  
0040B5  3  08 0C 11 02  
0040CD  3  01 42 09 01          .byte 1,66,9,1,0,56,137,196,2,3,132,64,8,129,136,128,16,65,8,2,4,2,4,4,2,200,1,48,0,0,0,0
0040D1  3  00 38 89 C4  
0040D5  3  02 03 84 40  
0040ED  3  80 50 42 40          .byte 128,80,66,64,0,14,34,113,192,128,33,16,66,32,34,32,68,16,130,0,129,0,1,1,0,178,0,76,0,0,0,0
0040F1  3  00 0E 22 71  
0040F5  3  C0 80 21 10  
00410D  3  20 14 10 90          .byte 32,20,16,144,128,3,72,156,48,32,8,68,16,136,8,136,17,4,32,128,32,64,64,64,128,44,0,19,0,0,0,0
004111  3  80 03 48 9C  
004115  3  30 20 08 44  
00412D  3  10 08 28 14          .byte 16,8,40,20,68,34,254,127,170,85,40,20,56,28,40,20,40,20,56,28,40,20,170,85,254,127,68,34,40,20,16,8
004131  3  44 22 FE 7F  
004135  3  AA 55 28 14  
00414D  3  04 02 0A 05          .byte 4,2,10,5,145,8,255,159,106,149,10,5,14,7,10,5,10,5,14,7,10,5,106,149,255,159,145,8,10,5,4,2
004151  3  91 08 FF 9F  
004155  3  6A 95 0A 05  
00416D  3  81 00 42 81          .byte 129,0,66,129,36,66,255,231,90,165,66,129,195,129,66,129,66,129,195,129,66,129,90,165,255,231,36,66,66,129,129,0
004171  3  24 42 FF E7  
004175  3  5A A5 42 81  
00418D  3  20 40 50 A0          .byte 32,64,80,160,137,16,255,249,86,169,80,160,112,224,80,160,80,160,112,224,80,160,86,169,255,249,137,16,80,160,32,64
004191  3  89 10 FF F9  
004195  3  56 A9 50 A0  
0041AD  3  00 77 00 8B          .byte 0,119,0,139,0,114,0,138,0,115,0,139,0,119,0,139,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0041B1  3  00 72 00 8A  
0041B5  3  00 73 00 8B  
0041CD  3  C0 1D C0 22          .byte 192,29,192,34,128,28,128,34,192,28,192,34,192,29,192,34,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0041D1  3  80 1C 80 22  
0041D5  3  C0 1C C0 22  
0041ED  3  70 07 B0 08          .byte 112,7,176,8,32,7,160,8,48,7,176,8,112,7,176,8,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0041F1  3  20 07 A0 08  
0041F5  3  30 07 B0 08  
00420D  3  DC 01 2C 02          .byte 220,1,44,2,200,1,40,2,204,1,44,2,220,1,44,2,192,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004211  3  C8 01 28 02  
004215  3  CC 01 2C 02  
00422D  3  9A 00 FD FF          .byte 154,0,253,255,1,31,253,255,254,255,193,127,128,191,42,94,62,32,235,191,85,32,227,191,85,0,235,128,62,0,42,0
004231  3  01 1F FD FF  
004235  3  FE FF C1 7F  
00424D  3  26 80 FF 7F          .byte 38,128,255,127,192,71,255,127,255,191,240,95,224,47,138,151,15,136,250,239,21,72,248,239,21,64,58,224,15,128,10,128
004251  3  C0 47 FF 7F  
004255  3  FF BF F0 5F  
00426D  3  09 A0 FF DF          .byte 9,160,255,223,240,17,255,223,255,239,252,23,248,11,226,165,3,226,254,187,5,82,254,59,5,80,14,184,3,224,2,160
004271  3  F0 11 FF DF  
004275  3  FF EF FC 17  
00428D  3  02 68 FF F7          .byte 2,104,255,247,124,4,255,247,255,251,255,5,254,2,120,169,128,248,255,174,129,84,255,142,1,84,3,174,0,248,0,168
004291  3  7C 04 FF F7  
004295  3  FF FB FF 05  
0042AD  3  FF F4 80 04          .byte 255,244,128,4,191,244,160,8,111,248,120,28,224,12,229,76,199,192,93,112,202,160,28,112,10,160,29,112,7,192,5,64
0042B1  3  BF F4 A0 08  
0042B5  3  6F F8 78 1C  
0042CD  3  3F FD 20 01          .byte 63,253,32,1,47,253,40,2,27,254,30,7,56,3,57,83,49,240,23,92,50,168,7,28,2,168,7,92,1,240,1,80
0042D1  3  2F FD 28 02  
0042D5  3  1B FE 1E 07  
0042ED  3  4F FF 48 00          .byte 79,255,72,0,75,255,138,0,134,255,199,129,206,0,206,84,12,124,5,215,12,170,1,199,0,170,1,215,0,124,0,84
0042F1  3  4B FF 8A 00  
0042F5  3  86 FF C7 81  
00430D  3  D3 FF 12 00          .byte 211,255,18,0,210,255,34,128,225,191,113,224,51,128,51,149,3,31,193,117,131,42,192,113,128,42,192,117,0,31,0,21
004311  3  D2 FF 22 80  
004315  3  E1 BF 71 E0  
00432D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,235,248
004331  3  00 00 00 00  
004335  3  00 00 00 00  
00434D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,58,254
004351  3  00 00 00 00  
004355  3  00 00 00 00  
00436D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,64,142,191
004371  3  00 00 00 00  
004375  3  00 00 00 00  
00438D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,80,227,175
004391  3  00 00 00 00  
004395  3  00 00 00 00  
0043AD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,8,52,12,106,230,91,251,173
0043B1  3  00 00 00 00  
0043B5  3  00 00 00 00  
0043CD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,13,131,26,249,150,126,235
0043D1  3  00 00 00 00  
0043D5  3  00 00 00 00  
0043ED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,64,131,160,198,190,101,223,186
0043F1  3  00 00 00 00  
0043F5  3  00 00 00 00  
00440D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,208,32,168,49,111,153,183,238
004411  3  00 00 00 00  
004415  3  00 00 00 00  
00442D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,5,0,7,0,3
004431  3  00 00 00 00  
004435  3  00 00 00 00  
00444D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,1,64,1,192,1,192,0
004451  3  00 00 00 00  
004455  3  00 00 00 00  
00446D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,0,80,0,112,0,48,0
004471  3  00 00 00 00  
004475  3  00 00 00 00  
00448D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,20,0,28,0,12,0
004491  3  00 00 00 00  
004495  3  00 00 00 00  
0044AD  3  00 00 AA AA          .byte 0,0,170,170,255,255,128,1,131,129,132,65,136,33,144,17,148,17,146,17,137,33,132,65,131,129,128,1,255,255,85,85
0044B1  3  FF FF 80 01  
0044B5  3  83 81 84 41  
0044CD  3  00 00 AA AA          .byte 0,0,170,170,255,255,96,0,96,224,97,16,98,8,100,4,101,4,100,132,98,72,97,16,96,224,96,0,255,255,85,85
0044D1  3  FF FF 60 00  
0044D5  3  60 E0 61 10  
0044ED  3  00 00 AA AA          .byte 0,0,170,170,255,255,24,0,24,56,24,68,24,130,25,1,25,65,25,33,24,146,24,68,24,56,24,0,255,255,85,85
0044F1  3  FF FF 18 00  
0044F5  3  18 38 18 44  
00450D  3  00 00 AA AA          .byte 0,0,170,170,255,255,6,0,6,14,6,17,134,32,70,64,70,80,70,72,134,36,6,17,6,14,6,0,255,255,85,85
004511  3  FF FF 06 00  
004515  3  06 0E 06 11  
00452D  3  00 00 55 55          .byte 0,0,85,85,255,255,128,1,131,129,132,65,137,33,146,17,148,17,144,17,136,33,132,65,131,129,128,1,255,255,170,170
004531  3  FF FF 80 01  
004535  3  83 81 84 41  
00454D  3  00 00 55 55          .byte 0,0,85,85,255,255,96,0,96,224,97,16,98,72,100,132,101,4,100,4,98,8,97,16,96,224,96,0,255,255,170,170
004551  3  FF FF 60 00  
004555  3  60 E0 61 10  
00456D  3  00 00 55 55          .byte 0,0,85,85,255,255,24,0,24,56,24,68,24,146,25,33,25,65,25,1,24,130,24,68,24,56,24,0,255,255,170,170
004571  3  FF FF 18 00  
004575  3  18 38 18 44  
00458D  3  00 00 55 55          .byte 0,0,85,85,255,255,6,0,6,14,6,17,134,36,70,72,70,80,70,64,134,32,6,17,6,14,6,0,255,255,170,170
004591  3  FF FF 06 00  
004595  3  06 0E 06 11  
0045AD  3  00 00 AA AA          .byte 0,0,170,170,255,255,128,1,131,129,132,65,137,33,144,145,144,81,144,17,136,33,132,65,131,129,128,1,255,255,85,85
0045B1  3  FF FF 80 01  
0045B5  3  83 81 84 41  
0045CD  3  00 00 AA AA          .byte 0,0,170,170,255,255,96,0,96,224,97,16,98,72,100,36,100,20,100,4,98,8,97,16,96,224,96,0,255,255,85,85
0045D1  3  FF FF 60 00  
0045D5  3  60 E0 61 10  
0045ED  3  00 00 AA AA          .byte 0,0,170,170,255,255,24,0,24,56,24,68,24,146,25,9,25,5,25,1,24,130,24,68,24,56,24,0,255,255,85,85
0045F1  3  FF FF 18 00  
0045F5  3  18 38 18 44  
00460D  3  00 00 AA AA          .byte 0,0,170,170,255,255,6,0,6,14,6,17,134,36,70,66,70,65,70,64,134,32,6,17,6,14,6,0,255,255,85,85
004611  3  FF FF 06 00  
004615  3  06 0E 06 11  
00462D  3  00 00 55 55          .byte 0,0,85,85,255,255,128,1,131,129,132,65,136,33,144,17,144,81,144,145,137,33,132,65,131,129,128,1,255,255,170,170
004631  3  FF FF 80 01  
004635  3  83 81 84 41  
00464D  3  00 00 55 55          .byte 0,0,85,85,255,255,96,0,96,224,97,16,98,8,100,4,100,20,100,36,98,72,97,16,96,224,96,0,255,255,170,170
004651  3  FF FF 60 00  
004655  3  60 E0 61 10  
00466D  3  00 00 55 55          .byte 0,0,85,85,255,255,24,0,24,56,24,68,24,130,25,1,25,5,25,9,24,146,24,68,24,56,24,0,255,255,170,170
004671  3  FF FF 18 00  
004675  3  18 38 18 44  
00468D  3  00 00 55 55          .byte 0,0,85,85,255,255,6,0,6,14,6,17,134,32,70,64,70,65,70,66,134,36,6,17,6,14,6,0,255,255,170,170
004691  3  FF FF 06 00  
004695  3  06 0E 06 11  
0046AD  3               frmlst:
0046AD  3  00 02                .byte 0,2
0046AF  3  02 02                .byte 2,2
0046B1  3  04 04                .byte 4,4
0046B3  3  08 04                .byte 8,4
0046B5  3  0C 04                .byte 12,4
0046B7  3  10 04                .byte 16,4
0046B9  3  14 02                .byte 20,2
0046BB  3  16 04                .byte 22,4
0046BD  3  1A 04                .byte 26,4
0046BF  3  1E 04                .byte 30,4
0046C1  3  22 04                .byte 34,4
0046C3  3  26 01                .byte 38,1
0046C5  3  27 02                .byte 39,2
0046C7  3  29 01                .byte 41,1
0046C9  3  2A 01                .byte 42,1
0046CB  3  2B 01                .byte 43,1
0046CD  3  2C 01                .byte 44,1
0046CF  3  2D 01                .byte 45,1
0046D1  3  2E 01                .byte 46,1
0046D3  3  2F 01                .byte 47,1
0046D5  3  30 04 34 00          .byte 48,4,52,0
0046D9  3               scdat:
0046D9  3  FE 00 B9 00          .word 254,185,169,255,261,241,293,234,246,184,281,173,159,240,230,236,288,197,250,172,441,371,144,151,87,163
0046DD  3  A9 00 FF 00  
0046E1  3  05 01 F1 00  
00470D  3  DE 00 99 00          .word 222,153,251
004711  3  FB 00        
004713  3  FF 00 1B 05          .byte 255,0,27,5,7,7,255,0,27,5,7,7,255,0,27,5,7,7,0,23,255,0,4,23,0,0,23,0,23,0,0,0,23
004717  3  07 07 FF 00  
00471B  3  1B 05 07 07  
004734  3  00 FF 17 04          .byte 0,255,23,4,0,255,23,4,0,5,7,7,0,23,255,0,4,23,0,0,23,0,23,23,0,23,23,0,23,0,0,23,0
004738  3  00 FF 17 04  
00473C  3  00 05 07 07  
004755  3  17 FF 00 04          .byte 23,255,0,4,5,7,7,0,23,255,0,4,23,0,0,23,0,23,0,23,0,23,0,23,0,0,23,0,255,23,4,0,5
004759  3  05 07 07 00  
00475D  3  17 FF 00 04  
004776  3  07 07 00 17          .byte 7,7,0,23,255,0,4,23,0,0,23,0,23,0,0,0,23,0,23,0,0,23,255,0,4,23,0,5,7,7,0,255,23,4
00477A  3  FF 00 04 17  
00477E  3  00 00 17 00  
004798  3  00 FF 17 04          .byte 0,255,23,4,0,23,0,0,0,23,0,255,23,4,0,255,23,4,0,5,7,7,255,0,27,5,7,7,255,0,27,5,7,7
00479C  3  00 17 00 00  
0047A0  3  00 17 00 FF  
0047BA  3  FF 00 1B 05          .byte 255,0,27,5,7,7,255,0,27,5,7,7,255,15,6,255,0,21,5,7,7,255,15,6,255,0,21,5,7,7,255,15,6
0047BE  3  07 07 FF 00  
0047C2  3  1B 05 07 07  
0047DB  3  FF 00 15 05          .byte 255,0,21,5,5,5,255,15,6,255,0,9,27,28,0,0,0,27,28,255,0,5,5,5,5,255,14,6,255,2,7,6,6
0047DF  3  05 05 FF 0F  
0047E3  3  06 FF 00 09  
0047FC  3  01 01 09 09          .byte 1,1,9,9,9,1,1,255,6,6,2,2,255,7,16,255,1,5,255,7,39
004800  3  09 01 01 FF  
004804  3  06 06 02 02  
004811  3  FF 01 3E 1A          .byte 255,1,62,26,13,255,0,7,13,25,1,1,26,13,255,0,9,13,25,255,1,4,13,255,0,9,13,1,1,13,255,0,11
004815  3  0D FF 00 07  
004819  3  0D 19 01 01  
004832  3  0D FF 01 04          .byte 13,255,1,4,255,0,11,25,26,255,0,13,255,1,4,255,0,26,255,1,4,255,0,26,255,1,4,255,0,26,255,1,4
004836  3  FF 00 0B 19  
00483A  3  1A FF 00 0D  
004853  3  FF 00 05 1B          .byte 255,0,5,27,2,2,28,255,0,6,27,2,2,28,255,0,7,255,1,4,255,0,4,3,25,1,1,26,3,255,0,4,3
004857  3  02 02 1C FF  
00485B  3  00 06 1B 02  
004874  3  19 01 01 1A          .byte 25,1,1,26,3,255,0,5,3,255,1,4,255,0,6,1,1,255,0,8,1,1,255,0,7,3,25,1,1,1,3,3,255,0,4
004878  3  03 FF 00 05  
00487C  3  03 FF 01 04  
004897  3  19 1A FF 00          .byte 25,26,255,0,8,25,26,255,0,9,5,1,1,255,0,27,5,1,26,255,3,4,255,0,20,27,2,2,2,22,255,0,23
00489B  3  08 19 1A FF  
00489F  3  00 09 05 01  
0048B8  3  1B 02 FF 01          .byte 27,2,255,1,4,22,255,0,23,255,1,6,255,2,24,255,1,66
0048BC  3  04 16 FF 00  
0048C0  3  17 FF 01 06  
0048CA  3  FF 01 3D 0D          .byte 255,1,61,13,1,13,0,0,0,13,0,0,0,13,0,0,13,13,0,0,13,0,0,0,13,0,0,0,13,1,13,1,1
0048CE  3  01 0D 00 00  
0048D2  3  00 0D 00 00  
0048EB  3  FF 00 1C 01          .byte 255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,5,1,255,0,28,5,1,255,0,26,27,2,2,1,255,0,4
0048EF  3  01 FF 00 1C  
0048F3  3  01 01 FF 00  
00490E  3  1B FF 02 0D          .byte 27,255,2,13,28,255,0,7,25,1,1,1,3,3,0,0,255,1,14,26,3,3,3,255,0,5,13,1,5,255,0,4,1,1
004912  3  1C FF 00 07  
004916  3  19 01 01 01  
004930  3  0D FF 00 0B          .byte 13,255,0,11,13,255,0,9,1,5,255,0,4,1,1,255,0,22,1,255,2,5,1,1,255,0,18,27,255,2,4,255,1,6
004934  3  0D FF 00 09  
004938  3  01 05 FF 00  
004952  3  1A FF 00 12          .byte 26,255,0,18,255,1,10,255,0,17,27,2,2,255,1,10,255,0,17,255,1,13,255,2,12,0,0,2,2,2,255,1,38
004956  3  FF 01 0A FF  
00495A  3  00 11 1B 02  
004973  3  FF 01 1F 0D          .byte 255,1,31,13,1,13,1,13,1,13,1,13,1,13,1,13,25,1,1,26,13,1,13,1,13,1,13,1,13,1,13,1,1
004977  3  01 0D 01 0D  
00497B  3  01 0D 01 0D  
004994  3  FF 00 1C 01          .byte 255,0,28,1,1,255,0,28,1,1,255,0,28,1,26,255,0,15,4,255,0,10,3,3,1,5,255,0,12,27,2,2,1
004998  3  01 FF 00 1C  
00499C  3  01 01 FF 00  
0049B5  3  FF 00 0C 01          .byte 255,0,12,1,5,255,0,12,255,1,4,255,0,12,1,2,2,2,28,0,0,27,2,2,10,11,2,2,1,1,1,26,255,0,10
0049B9  3  05 FF 00 0C  
0049BD  3  FF 01 04 FF  
0049D8  3  03 03 FF 01          .byte 3,3,255,1,5,0,0,1,1,1,10,11,255,1,4,13,255,0,13,255,1,4,26,0,0,1,1,1,10,11,1,1,1
0049DC  3  05 00 00 01  
0049E0  3  01 01 0A 0B  
0049F9  3  1A FF 00 0E          .byte 26,255,0,14,1,1,255,0,5,1,1,13,10,11,13,0,0,13,255,0,11,3,3,3,1,1,255,0,5,1,1,0,10
0049FD  3  01 01 FF 00  
004A01  3  05 01 01 0D  
004A1A  3  0B FF 00 12          .byte 11,255,0,18,1,1,4,4,4,1,1,1,26,0,10,11,255,0,18,255,1,7,26,13,0,10,11,255,0,12,27,28,255,0,4
004A1E  3  01 01 04 04  
004A22  3  04 01 01 01  
004A3D  3  FF 01 06 FF          .byte 255,1,6,255,0,4,10,11,255,0,12,1,1,255,0,4,5,255,1,5,255,0,4,10,11,255,0,12,1,1,255,0,4
004A41  3  00 04 0A 0B  
004A45  3  FF 00 0C 01  
004A5E  3  05 FF 01 05          .byte 5,255,1,5,255,2,11,4,4,255,2,5,1,1,255,2,5,255,1,30
004A62  3  FF 02 0B 04  
004A66  3  04 FF 02 05  
004A72  3  FF 01 1F 0D          .byte 255,1,31,13,1,13,255,0,17,1,255,0,4,13,1,13,1,1,255,0,20,1,255,0,7,1,1,1,255,12,18,1,26
004A76  3  01 0D FF 00  
004A7A  3  11 01 FF 00  
004A93  3  FF 00 06 1B          .byte 255,0,6,27,1,1,255,0,27,1,1,1,255,0,28,5,1,255,0,6,255,17,11,255,0,11,5,1,2,10,11,2,2
004A97  3  01 01 FF 00  
004A9B  3  1B 01 01 01  
004AB4  3  1C 28 2A 2C          .byte 28,40,42,44,46,44,46,44,46,44,46,48,50,27,2,2,28,0,0,0,10,11,2,2,1,1,10,11,1,1,1,41,43
004AB8  3  2E 2C 2E 2C  
004ABC  3  2E 2C 2E 30  
004AD5  3  2D 2F 2D 2F          .byte 45,47,45,47,45,47,45,47,49,51,1,1,1,26,0,0,0,10,11,255,1,4,10,11,255,1,18,255,0,4,10,11,255,1,4
004AD9  3  2D 2F 2D 2F  
004ADD  3  31 33 01 01  
004AF8  3  0A 0B 01 01          .byte 10,11,1,1,1,13,255,1,10,13,1,1,1,255,0,4,10,11,255,1,4,10,11,1,1,1,0,4,255,0,8,4,0
004AFC  3  01 0D FF 01  
004B00  3  0A 0D 01 01  
004B19  3  19 01 1A FF          .byte 25,1,26,255,0,4,10,11,255,1,4,10,11,1,1,1,255,0,19,10,11,255,1,4,10,11,1,1,1,255,0,19,10
004B1D  3  00 04 0A 0B  
004B21  3  FF 01 04 0A  
004B3A  3  0B FF 01 04          .byte 11,255,1,4,10,11,1,1,1,255,0,19,10,11,25,1,5,0,10,11,1,1,1,255,0,19,10,11,5,39,5,0,10
004B3E  3  0A 0B 01 01  
004B42  3  01 FF 00 13  
004B5B  3  0B 01 01 01          .byte 11,1,1,1,255,0,19,10,11,5,39,255,2,4,1,1,1,255,2,14,4,4,255,2,7,255,1,30
004B5F  3  FF 00 13 0A  
004B63  3  0B 05 27 FF  
004B77  3  FF 01 20 0D          .byte 255,1,32,13,255,0,4,13,13,255,0,4,13,1,13,255,0,5,13,255,0,5,13,255,1,4,255,0,12,1,255,0,13
004B7B  3  FF 00 04 0D  
004B7F  3  0D FF 00 04  
004B98  3  FF 01 04 FF          .byte 255,1,4,255,0,12,1,255,0,13,1,1,1,26,255,0,12,1,255,0,13,25,1,5,255,0,13,1,255,0,14,5,5
004B9C  3  00 0C 01 FF  
004BA0  3  00 0D 01 01  
004BB9  3  FF 00 0D 01          .byte 255,0,13,1,2,28,255,0,12,5,255,2,5,28,255,0,8,1,1,26,255,0,10,27,2,2,255,1,6,255,0,8,1
004BBD  3  02 1C FF 00  
004BC1  3  0C 05 FF 02  
004BDA  3  FF 00 0C 19          .byte 255,0,12,25,255,1,8,0,0,4,255,0,5,1,255,0,13,255,1,4,26,25,1,1,0,0,1,2,2,2,10,11,1
004BDE  3  FF 01 08 00  
004BE2  3  00 04 FF 00  
004BFB  3  FF 02 05 1C          .byte 255,2,5,28,255,0,7,255,1,4,0,0,1,1,0,0,25,1,1,1,10,11,255,1,6,26,255,0,7,255,1,4,0,0
004BFF  3  FF 00 07 FF  
004C03  3  01 04 00 00  
004C1D  3  01 01 FF 00          .byte 1,1,255,0,4,13,0,10,11,0,13,255,0,12,255,1,4,0,0,1,1,255,0,6,10,11,255,0,14,255,1,4,10
004C21  3  04 0D 00 0A  
004C25  3  0B 00 0D FF  
004C3E  3  0B 01 1A FF          .byte 11,1,26,255,0,6,10,11,255,0,14,1,1,39,5,10,11,255,0,24,1,1,39,5,10,11,255,0,24,1,1,255,2,8
004C42  3  00 06 0A 0B  
004C46  3  FF 00 0E 01  
004C60  3  04 04 FF 02          .byte 4,4,255,2,18,255,1,32
004C64  3  12 FF 01 20  
004C68  3  FF 01 20 0D          .byte 255,1,32,13,255,0,12,13,1,13,255,0,10,13,1,1,255,0,15,1,255,0,12,1,1,255,0,15,1,255,0,12,1,1
004C6C  3  FF 00 0C 0D  
004C70  3  01 0D FF 00  
004C8A  3  FF 00 0F 01          .byte 255,0,15,1,10,11,255,2,5,28,255,0,4,1,5,255,0,15,1,10,11,255,1,6,255,0,4,1,5,0,0,0,27
004C8E  3  0A 0B FF 02  
004C92  3  05 1C FF 00  
004CAB  3  FF 02 09 0A          .byte 255,2,9,10,11,1,10,11,0,0,5,5,1,1,255,0,4,1,2,2,3,3,25,255,1,9,10,11,1,10,11,255,0,4
004CAF  3  0B 01 0A 0B  
004CB3  3  00 00 05 05  
004CCD  3  01 01 FF 00          .byte 1,1,255,0,4,1,1,1,255,0,12,10,11,1,10,11,255,0,4,1,1,255,0,4,5,1,1,255,0,12,10,11,1
004CD1  3  04 01 01 01  
004CD5  3  FF 00 0C 0A  
004CEE  3  0A 0B FF 00          .byte 10,11,255,0,4,1,1,255,0,4,5,1,1,255,0,12,2,2,1,255,2,4,10,11,1,1,0,0,0,27,2,1,1
004CF2  3  04 01 01 FF  
004CF6  3  00 04 05 01  
004D0F  3  FF 00 0C FF          .byte 255,0,12,255,1,6,26,10,11,1,1,0,0,0,25,1,1,1,255,0,12,1,26,255,0,5,10,11,1,1,255,0,4
004D13  3  01 06 1A 0A  
004D17  3  0B 01 01 00  
004D30  3  01 01 01 0A          .byte 1,1,1,10,11,2,2,28,255,0,4,27,2,2,1,255,0,6,10,11,1,1,255,0,4,1,1,1,10,11,1,1,26
004D34  3  0B 02 02 1C  
004D38  3  FF 00 04 1B  
004D51  3  FF 00 04 19          .byte 255,0,4,25,1,1,26,255,0,8,1,1,255,0,4,1,1,1,10,11,255,0,19,1,1,255,0,4,1,1,1,10,11
004D55  3  01 01 1A FF  
004D59  3  00 08 01 01  
004D72  3  FF 00 13 01          .byte 255,0,19,1,1,255,0,4,1,1,1,255,2,16,4,4,2,2,2,1,1,255,0,4,255,1,31
004D76  3  01 FF 00 04  
004D7A  3  01 01 01 FF  
004D8D  3  FF 01 1F 0D          .byte 255,1,31,13,0,5,0,0,13,0,0,13,0,0,13,0,5,5,0,13,0,0,13,0,0,13,0,0,5,0,13,1,1
004D91  3  00 05 00 00  
004D95  3  0D 00 00 0D  
004DAE  3  FF 00 1C 01          .byte 255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,2,2,28,255,0,4,27,28,255,0,4,27,28
004DB2  3  01 FF 00 1C  
004DB6  3  01 01 FF 00  
004DCF  3  FF 00 04 1B          .byte 255,0,4,27,28,0,0,27,255,2,4,255,1,4,26,255,0,4,25,26,255,0,4,25,26,255,0,4,25,26,0,0,25
004DD3  3  1C 00 00 1B  
004DD7  3  FF 02 04 FF  
004DF0  3  FF 01 05 05          .byte 255,1,5,5,255,0,27,13,1,5,255,0,28,1,255,2,6,10,11,2,28,255,0,19,255,1,7,10,11,1,1,2,28
004DF4  3  FF 00 1B 0D  
004DF8  3  01 05 FF 00  
004E11  3  FF 00 0F 03          .byte 255,0,15,3,3,1,1,13,255,0,4,10,11,0,0,25,1,2,28,255,0,15,1,1,255,0,5,10,11,255,0,4,25
004E15  3  03 01 01 0D  
004E19  3  FF 00 04 0A  
004E32  3  01 02 1C FF          .byte 1,2,28,255,0,11,3,3,1,1,255,0,5,10,11,255,0,6,25,26,255,0,4,27,28,255,0,7,1,1,255,0,19
004E36  3  00 0B 03 03  
004E3A  3  01 01 FF 00  
004E53  3  01 01 FF 00          .byte 1,1,255,0,7,5,1,255,0,19,1,1,2,2,28,255,0,4,5,1,255,2,15,28,0,0,27,255,1,5,255,2,5
004E57  3  07 05 01 FF  
004E5B  3  00 13 01 01  
004E74  3  FF 01 1E             .byte 255,1,30
004E77  3  FF 01 1F 1A          .byte 255,1,31,26,0,13,0,13,0,13,0,13,0,13,0,13,0,13,0,13,0,13,0,13,0,13,0,13,0,13,1,1,1
004E7B  3  00 0D 00 0D  
004E7F  3  00 0D 00 0D  
004E98  3  FF 00 1A 15          .byte 255,0,26,21,22,1,1,255,0,26,21,22,1,1,255,0,26,19,20,1,1,255,0,26,19,20,1,1,10,11,28,0,0
004E9C  3  16 01 01 FF  
004EA0  3  00 1A 15 16  
004EB9  3  1B 1C 00 00          .byte 27,28,0,0,27,28,0,0,27,28,0,0,27,28,0,0,27,28,0,0,27,19,20,1,1,10,11,26,0,0,25,26,0,0
004EBD  3  1B 1C 00 00  
004EC1  3  1B 1C 00 00  
004EDB  3  19 1A 00 00          .byte 25,26,0,0,25,26,0,0,25,26,0,0,25,26,0,0,25,19,20,1,1,10,11,255,0,24,19,20,1,1,10,11,255,0,24
004EDF  3  19 1A 00 00  
004EE3  3  19 1A 00 00  
004EFE  3  13 14 01 01          .byte 19,20,1,1,255,2,5,10,11,255,0,19,19,20,255,1,7,10,11,255,0,19,19,20,1,1,13,0,13,0,13,10,11
004F02  3  FF 02 05 0A  
004F06  3  0B FF 00 13  
004F1F  3  FF 00 13 13          .byte 255,0,19,19,20,1,1,255,0,5,10,11,255,0,19,19,20,1,1,255,0,5,10,11,255,0,19,19,20,1,5,255,0,28
004F23  3  14 01 01 FF  
004F27  3  00 05 0A 0B  
004F41  3  05 05 FF 00          .byte 5,5,255,0,13,4,4,0,0,4,4,0,0,27,2,2,28,0,0,0,5,255,2,11,28,0,0,1,1,0,0,1,1
004F45  3  0D 04 04 00  
004F49  3  00 04 04 00  
004F62  3  00 00 FF 01          .byte 0,0,255,1,4,255,2,4,255,1,30
004F66  3  04 FF 02 04  
004F6A  3  FF 01 1E     
004F6D  3  FF 01 1F FF          .byte 255,1,31,255,16,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,26,4,4,1,1,255,0,28,1,1,2,2,28
004F71  3  10 1C 01 01  
004F75  3  FF 00 1C 01  
004F8E  3  FF 00 19 FF          .byte 255,0,25,255,1,4,26,255,0,23,3,3,1,1,255,0,28,1,1,255,0,28,1,1,2,2,2,10,11,2,28,255,0,19
004F92  3  01 04 1A FF  
004F96  3  00 17 03 03  
004FB0  3  03 03 FF 01          .byte 3,3,255,1,5,10,11,1,26,0,0,27,28,255,0,17,1,1,13,0,13,10,11,255,0,4,25,26,0,0,27,28,255,0,11
004FB4  3  05 0A 0B 01  
004FB8  3  1A 00 00 1B  
004FD3  3  0A 0B 01 01          .byte 10,11,1,1,0,0,0,10,11,255,0,8,25,26,0,0,27,28,255,0,7,10,11,1,1,0,0,0,10,11,255,0,12
004FD7  3  00 00 00 0A  
004FDB  3  0B FF 00 08  
004FF4  3  19 1A 00 00          .byte 25,26,0,0,27,28,0,0,0,10,11,1,5,0,0,0,10,11,255,0,16,25,26,255,0,5,5,5,0,0,0,10,11
004FF8  3  1B 1C 00 00  
004FFC  3  00 0A 0B 01  
005015  3  FF 00 17 05          .byte 255,0,23,5,255,2,10,255,4,12,255,2,8,255,1,30
005019  3  FF 02 0A FF  
00501D  3  04 0C FF 02  
005025  3  FF 01 1F 1A          .byte 255,1,31,26,255,0,26,25,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,5,1,255,0,11,27,2,2,28,255,0,13
005029  3  FF 00 1A 19  
00502D  3  01 01 FF 00  
005048  3  05 01 0A 0B          .byte 5,1,10,11,2,2,28,255,0,4,27,2,255,1,4,2,2,10,11,255,0,5,10,11,2,2,2,1,10,11,1,1,26
00504C  3  02 02 1C FF  
005050  3  00 04 1B 02  
005069  3  FF 00 04 19          .byte 255,0,4,25,1,1,8,8,1,1,1,10,11,255,0,5,10,11,255,1,4,10,11,255,0,9,25,8,8,26,255,0,9
00506D  3  01 01 08 08  
005071  3  01 01 01 0A  
00508A  3  0A 0B 0D 0D          .byte 10,11,13,13,1,1,10,11,255,0,10,8,8,255,0,10,10,11,0,0,1,1,2,2,2,10,11,255,0,7,8,8,255,0,10
00508E  3  01 01 0A 0B  
005092  3  FF 00 0A 08  
0050AD  3  0A 0B 00 00          .byte 10,11,0,0,255,1,5,10,11,255,0,7,8,8,0,27,2,10,11,2,28,255,0,7,1,1,13,13,13,10,11,255,0,7
0050B1  3  FF 01 05 0A  
0050B5  3  0B FF 00 07  
0050CF  3  08 08 00 19          .byte 8,8,0,25,1,10,11,1,26,255,0,7,1,1,0,0,0,10,11,255,0,7,8,8,0,0,0,10,11,255,0,9,1,1
0050D3  3  01 0A 0B 01  
0050D7  3  1A FF 00 07  
0050F1  3  00 00 00 0A          .byte 0,0,0,10,11,255,0,7,8,8,0,0,0,10,11,255,0,9,1,5,255,0,12,8,8,0,0,0,10,11,255,0,9
0050F5  3  0B FF 00 07  
0050F9  3  08 08 00 00  
005112  3  01 05 FF 00          .byte 1,5,255,0,12,8,8,0,0,0,10,11,255,0,7,3,3,1,255,2,13,8,8,2,2,2,10,11,255,2,10,255,1,13
005116  3  0C 08 08 00  
00511A  3  00 00 0A 0B  
005134  3  08 08 01 01          .byte 8,8,1,1,1,10,11,255,1,10
005138  3  01 0A 0B FF  
00513C  3  01 0A        
00513E  3  FF 01 1F FF          .byte 255,1,31,255,16,28,1,1,255,0,28,1,1,255,0,28,1,5,255,0,28,1,5,255,0,28,1,2,2,2,10,11,255,0,24
005142  3  10 1C 01 01  
005146  3  FF 00 1C 01  
005161  3  FF 01 04 0A          .byte 255,1,4,10,11,255,0,22,3,3,1,1,0,0,10,11,255,0,24,1,1,0,0,10,11,255,0,24,5,1,2,2,10
005165  3  0B FF 00 16  
005169  3  03 03 01 01  
005182  3  0B FF 00 18          .byte 11,255,0,24,5,1,1,1,10,11,255,0,21,27,2,2,2,1,13,0,10,11,255,0,17,27,28,0,0,25,255,1,4
005186  3  05 01 01 01  
00518A  3  0A 0B FF 00  
0051A3  3  00 00 0A 0B          .byte 0,0,10,11,255,0,13,27,28,0,0,25,26,255,0,4,13,1,1,0,0,10,11,255,0,9,27,28,0,0,25,26,255,0,9
0051A7  3  FF 00 0D 1B  
0051AB  3  1C 00 00 19  
0051C6  3  01 01 FF 00          .byte 1,1,255,0,13,25,26,255,0,13,1,1,255,0,6,27,2,2,2,28,255,0,17,1,1,255,2,6,255,1,5,255,4,17
0051CA  3  0D 19 1A FF  
0051CE  3  00 0D 01 01  
0051E8  3  FF 01 1F             .byte 255,1,31
0051EB  3  FF 01 1F FF          .byte 255,1,31,255,16,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,5,1,255,0,28,5,1
0051EF  3  10 1C 01 01  
0051F3  3  FF 00 1C 01  
00520C  3  FF 00 19 0A          .byte 255,0,25,10,11,2,2,1,255,0,25,10,11,1,1,5,255,0,25,10,11,1,8,5,255,0,12,27,255,2,4,28,255,0,7
005210  3  0B 02 02 01  
005214  3  FF 00 19 0A  
00522F  3  0A 0B 01 08          .byte 10,11,1,8,255,2,8,28,255,0,4,25,255,1,4,26,255,0,4,10,11,2,2,2,1,8,255,1,8,26,255,0,14
005233  3  FF 02 08 1C  
005237  3  FF 00 04 19  
005250  3  0A 0B FF 01          .byte 10,11,255,1,4,8,1,255,0,22,10,11,255,0,4,8,1,255,0,22,10,11,255,0,4,8,1,255,0,22,10,11,255,0,4
005254  3  04 08 01 FF  
005258  3  00 16 0A 0B  
005273  3  08 01 02 02          .byte 8,1,2,2,2,28,255,0,24,8,255,1,5,255,2,16,28,255,8,8,255,1,30
005277  3  02 1C FF 00  
00527B  3  18 08 FF 01  
00528A  3  FF 01 1F 0D          .byte 255,1,31,13,1,13,1,13,1,13,1,13,1,13,1,13,1,1,4,4,1,1,13,1,13,1,13,1,13,1,13,1,1
00528E  3  01 0D 01 0D  
005292  3  01 0D 01 0D  
0052AB  3  FF 00 07 10          .byte 255,0,7,16,255,0,16,16,0,0,0,1,1,255,0,7,16,255,0,16,16,0,0,0,1,1,255,0,7,16,255,0,16
0052AF  3  FF 00 10 10  
0052B3  3  00 00 00 01  
0052CC  3  10 00 00 00          .byte 16,0,0,0,1,5,255,0,7,16,255,0,16,16,0,0,0,1,5,255,0,7,16,255,0,16,16,0,0,0,1,2,2
0052D0  3  01 05 FF 00  
0052D4  3  07 10 FF 00  
0052ED  3  0A 0B FF 00          .byte 10,11,255,0,4,16,0,0,0,27,28,255,0,6,27,28,0,0,0,16,0,0,0,1,1,1,10,11,255,0,4,16,0,0,0
0052F1  3  04 10 00 00  
0052F5  3  00 1B 1C FF  
005310  3  19 1A FF 00          .byte 25,26,255,0,6,25,26,0,0,0,16,0,0,0,1,8,1,10,11,255,0,4,4,255,0,16,4,0,0,0,1,8,0
005314  3  06 19 1A 00  
005318  3  00 00 10 00  
005331  3  0A 0B FF 00          .byte 10,11,255,0,25,1,8,0,10,11,255,0,25,1,8,0,10,11,255,0,25,1,8,0,10,11,255,0,25,1,8,255,0,28
005335  3  19 01 08 00  
005339  3  0A 0B FF 00  
005353  3  05 08 FF 00          .byte 5,8,255,0,28,5,8,27,2,2,28,255,0,5,27,28,0,0,27,255,2,4,28,0,0,27,28,0,0,27,2,2,2
005357  3  1C 05 08 1B  
00535B  3  02 02 1C FF  
005374  3  FF 08 1A FF          .byte 255,8,26,255,1,34
005378  3  01 22        
00537A  3  FF 01 1F 1A          .byte 255,1,31,26,0,13,0,13,0,13,0,13,0,13,0,13,0,13,13,0,13,0,13,0,13,0,13,0,13,0,25,1,1
00537E  3  00 0D 00 0D  
005382  3  00 0D 00 0D  
00539B  3  FF 00 1C 01          .byte 255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,0,0,10,11,255,2,18,28,255,0,5,1,1
00539F  3  01 FF 00 1C  
0053A3  3  01 01 FF 00  
0053BC  3  00 00 0A 0B          .byte 0,0,10,11,255,1,18,26,255,0,5,1,1,0,0,10,11,1,255,0,23,1,1,0,0,10,11,1,255,0,21,3,3
0053C0  3  FF 01 12 1A  
0053C4  3  FF 00 05 01  
0053DD  3  01 01 03 03          .byte 1,1,3,3,10,11,1,0,0,0,10,11,255,2,18,1,1,0,0,10,11,1,0,0,0,10,11,255,1,20,0,0,10
0053E1  3  0A 0B 01 00  
0053E5  3  00 00 0A 0B  
0053FE  3  0B 01 00 00          .byte 11,1,0,0,0,10,11,255,0,6,25,1,26,255,0,8,25,1,1,0,0,10,11,1,0,0,0,10,11,255,0,7,4
005402  3  00 0A 0B FF  
005406  3  00 06 19 01  
00541F  3  FF 00 0A 05          .byte 255,0,10,5,5,0,0,10,11,1,255,0,23,5,5,0,0,10,11,1,255,0,23,5,255,2,5,1,255,0,8,4,255,0,7
005423  3  05 00 00 0A  
005427  3  0B 01 FF 00  
005442  3  04 00 00 00          .byte 4,0,0,0,27,2,2,2,255,1,6,2,2,2,10,11,2,2,2,1,255,2,7,1,2,2,2,255,1,34
005446  3  1B 02 02 02  
00544A  3  FF 01 06 02  
005460  3  07 07 1D FF          .byte 7,7,29,255,0,27,1,1,255,7,8,29,255,0,19,255,1,10,7,29,255,0,18,1,26,255,0,8,25,7,29,255,0,17
005464  3  00 1B 01 01  
005468  3  FF 07 08 1D  
005482  3  01 FF 00 0A          .byte 1,255,0,10,25,7,29,255,0,16,1,13,255,0,10,1,7,29,255,0,15,1,1,255,12,10,1,1,7,7,29,255,0,13
005486  3  19 07 1D FF  
00548A  3  00 10 01 0D  
0054A4  3  01 1A FF 00          .byte 1,26,255,0,10,25,1,1,1,7,255,0,13,1,255,0,14,1,7,255,0,13,1,13,0,0,0,4,4,4,255,0,7
0054A8  3  0A 19 01 01  
0054AC  3  01 07 FF 00  
0054C5  3  01 07 FF 00          .byte 1,7,255,0,13,1,255,2,4,1,1,1,2,10,11,255,2,4,1,7,29,255,0,12,255,1,9,10,11,255,1,5,7,7
0054C9  3  0D 01 FF 02  
0054CD  3  04 01 01 01  
0054E7  3  1D FF 00 0B          .byte 29,255,0,11,1,26,255,0,7,10,11,0,0,0,25,1,1,7,7,255,0,11,5,255,0,8,10,11,255,0,5,25,1
0054EB  3  01 1A FF 00  
0054EF  3  07 0A 0B 00  
005508  3  07 00 00 00          .byte 7,0,0,0,255,15,5,0,0,0,5,255,0,8,10,11,255,0,6,24,24,0,0,0,255,15,5,0,0,0,5,255,0,8
00550C  3  FF 0F 05 00  
005510  3  00 00 05 FF  
00552A  3  0A 0B FF 00          .byte 10,11,255,0,6,24,24,0,0,0,255,15,5,0,0,0,255,2,21,255,14,9,255,1,19,255,7,11,255,1,19,255,7,11
00552E  3  06 18 18 00  
005532  3  00 00 FF 0F  
00554C  3  FF 01 12 0A          .byte 255,1,18,10,11,255,1,11,0,1,0,1,0,1,0,1,0,1,0,1,8,8,1,0,1,10,11,0,1,0,1,0,1
005550  3  0B FF 01 0B  
005554  3  00 01 00 01  
00556D  3  00 01 00 01          .byte 0,1,0,1,1,255,0,12,8,8,0,0,0,10,11,255,0,9,1,1,255,0,12,8,8,0,0,0,10,11,255,0,9
005571  3  01 FF 00 0C  
005575  3  08 08 00 00  
00558E  3  01 01 FF 00          .byte 1,1,255,0,12,8,8,0,0,0,10,11,255,0,9,1,5,255,0,12,8,8,0,0,0,10,11,255,0,9,1,5,255,0,12
005592  3  0C 08 08 00  
005596  3  00 00 0A 0B  
0055B1  3  08 08 00 00          .byte 8,8,0,0,0,10,11,255,0,9,1,2,2,28,255,0,10,8,8,0,0,0,10,11,255,0,9,1,1,1,26,3,3
0055B5  3  00 0A 0B FF  
0055B9  3  00 09 01 02  
0055D2  3  FF 00 08 08          .byte 255,0,8,8,8,0,0,0,10,11,255,0,9,1,1,1,255,0,11,8,8,0,0,0,10,11,255,0,9,1,1,1,255,0,5
0055D6  3  08 00 00 00  
0055DA  3  0A 0B FF 00  
0055F5  3  1B 02 02 1C          .byte 27,2,2,28,0,0,8,8,0,0,27,2,2,2,28,255,0,7,1,1,1,0,0,0,3,3,255,1,4,255,8,6,255,1,5
0055F9  3  00 00 08 08  
0055FD  3  00 00 1B 02  
005618  3  03 03 FF 00          .byte 3,3,255,0,5,1,1,1,255,0,5,25,1,1,1,255,8,6,255,1,4,26,255,0,7,1,1,1,255,0,8,25,255,1,6
00561C  3  05 01 01 01  
005620  3  FF 00 05 19  
00563B  3  1A FF 00 09          .byte 26,255,0,9,27,2,1,1,26,3,3,3,255,0,6,25,0,1,1,0,26,255,0,8,3,3,1,1,1,13,255,0,26
00563F  3  1B 02 01 01  
005643  3  1A 03 03 03  
00565C  3  01 01 01 0D          .byte 1,1,1,13,255,0,26,1,1,1,255,2,27,255,1,33
005660  3  FF 00 1A 01  
005664  3  01 01 FF 02  
00566C  3  FF 00 0B FF          .byte 255,0,11,255,1,19,255,0,11,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,255,0,11,1,255,0,17
005670  3  01 13 FF 00  
005674  3  0B 01 0D 01  
00568F  3  01 FF 00 0B          .byte 1,255,0,11,1,255,0,17,1,255,0,11,1,255,0,17,1,255,0,11,1,255,0,17,5,255,0,11,1,255,0,17,5
005693  3  01 FF 00 11  
005697  3  01 FF 00 0B  
0056B0  3  FF 00 0B 01          .byte 255,0,11,1,255,0,15,27,2,2,255,0,11,1,255,0,15,25,1,1,255,0,7,255,1,5,255,0,12,255,3,4,1,1
0056B4  3  FF 00 0F 1B  
0056B8  3  02 02 FF 00  
0056D2  3  FF 00 07 01          .byte 255,0,7,1,13,0,0,13,255,0,16,1,1,255,0,7,1,13,0,13,255,0,17,1,1,255,0,7,1,255,2,4,255,3,4
0056D6  3  0D 00 00 0D  
0056DA  3  FF 00 10 01  
0056F5  3  FF 02 04 FF          .byte 255,2,4,255,3,4,255,2,4,255,1,34,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13
0056F9  3  03 04 FF 02  
0056FD  3  04 FF 01 22  
005716  3  01 0D 01 0D          .byte 1,13,1,13,1,13,1,1,1,255,0,27,5,1,1,255,0,27,5,1,1,255,2,28,255,1,30
00571A  3  01 0D 01 01  
00571E  3  01 FF 00 1B  
005731  3  FF 01 09 0A          .byte 255,1,9,10,11,255,1,20,26,13,255,0,6,10,11,0,13,25,1,26,13,0,0,0,13,25,1,26,13,0,0,13,25
005735  3  0B FF 01 14  
005739  3  1A 0D FF 00  
005752  3  01 05 FF 00          .byte 1,5,255,0,8,10,11,0,0,0,1,255,0,7,1,255,0,6,1,5,255,0,13,1,255,0,7,1,255,0,6,1,5
005756  3  08 0A 0B 00  
00575A  3  00 00 01 FF  
005773  3  FF 00 0D 01          .byte 255,0,13,1,13,255,0,6,1,255,0,5,13,1,255,2,14,1,13,0,13,13,0,0,13,1,13,255,0,4,3,255,1,16
005777  3  0D FF 00 06  
00577B  3  01 FF 00 05  
005795  3  FF 02 04 0A          .byte 255,2,4,10,11,2,1,28,255,0,5,255,1,20,10,11,1,1,26,255,0,4,13,1,1,1,26,5,13,0,13,0,255,13,5
005799  3  0B 02 01 1C  
00579D  3  FF 00 05 FF  
0057B8  3  00 0D 00 00          .byte 0,13,0,0,0,13,10,11,13,1,255,0,5,3,1,1,1,13,0,0,0,13,255,0,15,1,255,0,6,1,1,1,0
0057BC  3  00 0D 0A 0B  
0057C0  3  0D 01 FF 00  
0057D9  3  0D 00 00 0D          .byte 13,0,0,13,255,0,15,1,255,0,6,1,1,1,255,2,24,28,10,11,255,1,28,10,11,255,1,10,26,13,0,0,13
0057DD  3  FF 00 0F 01  
0057E1  3  FF 00 06 01  
0057FA  3  00 00 0D 19          .byte 0,0,13,25,255,1,9,10,11,1,5,255,0,18,13,13,24,24,13,13,0,0,10,11,1,5,255,0,19,13,24,24,13
0057FE  3  FF 01 09 0A  
005802  3  0B 01 05 FF  
00581B  3  00 00 00 0A          .byte 0,0,0,10,11,1,255,9,13,27,255,2,15,255,1,61
00581F  3  0B 01 FF 09  
005823  3  0D 1B FF 02  
00582B  3  FF 01 1F 1A          .byte 255,1,31,26,255,0,26,25,1,1,255,0,28,5,1,255,0,28,5,1,255,0,28,5,1,3,3,255,0,23,3,3,3
00582F  3  FF 00 1A 19  
005833  3  01 01 FF 00  
00584C  3  02 01 FF 00          .byte 2,1,255,0,27,1,1,1,3,255,0,26,1,1,1,255,0,25,3,3,1,1,1,255,0,25,3,3,255,1,4,3,255,0,25
005850  3  1B 01 01 01  
005854  3  03 FF 00 1A  
00586F  3  FF 01 04 FF          .byte 255,1,4,255,0,26,255,1,4,255,0,24,3,3,255,1,4,255,2,6,10,11,255,2,10,28,255,0,7,255,1,10,10
005873  3  00 1A FF 01  
005877  3  04 FF 00 18  
005890  3  0B FF 01 0B          .byte 11,255,1,11,2,28,255,0,6,5,1,255,0,7,10,11,0,0,255,1,11,255,0,6,5,1,255,0,7,10,11,0,0
005894  3  02 1C FF 00  
005898  3  06 05 01 FF  
0058B1  3  01 01 08 08          .byte 1,1,8,8,255,1,7,2,2,28,255,9,4,1,255,2,7,10,11,2,2,1,1,8,8,255,1,22,10,11,255,1,4
0058B5  3  FF 01 07 02  
0058B9  3  02 1C FF 09  
0058D2  3  08 08 FF 01          .byte 8,8,255,1,14
0058D6  3  0E           
0058D7  3  FF 01 08 0A          .byte 255,1,8,10,11,255,1,4,8,8,255,1,15,26,255,0,6,10,11,255,1,4,8,8,255,1,15,255,0,7,10,11,1,1,1
0058DB  3  0B FF 01 04  
0058DF  3  08 08 FF 01  
0058FA  3  FF 08 04 FF          .byte 255,8,4,255,1,9,21,22,1,1,1,0,10,11,255,2,6,1,1,255,8,6,255,1,8,21,22,1,1,1,0,10,11
0058FE  3  01 09 15 16  
005902  3  01 01 01 00  
00591B  3  FF 01 07 08          .byte 255,1,7,8,8,1,8,8,1,8,8,255,1,6,0,19,20,0,5,1,0,10,11,0,1,1,1,255,8,4,1,1,8,8
00591F  3  08 01 08 08  
005923  3  01 08 08 FF  
00593D  3  01 01 FF 08          .byte 1,1,255,8,4,1,1,1,0,19,20,0,5,1,0,10,11,0,1,8,8,8,255,1,5,8,8,255,1,5,8,8,8
005941  3  04 01 01 01  
005945  3  00 13 14 00  
00595E  3  01 00 13 14          .byte 1,0,19,20,0,5,1,0,10,11,0,1,8,255,1,6,255,8,4,255,1,6,8,1,0,19,20,2,2,1,0,10,11
005962  3  00 05 01 00  
005966  3  0A 0B 00 01  
00597F  3  00 19 08 1A          .byte 0,25,8,26,0,0,0,25,8,8,1,1,8,8,26,0,0,0,25,8,26,0,19,20,25,1,1,1,10,11,0,0,8
005983  3  00 00 00 19  
005987  3  08 08 01 01  
0059A0  3  FF 00 05 08          .byte 255,0,5,8,255,1,4,8,255,0,4,15,8,0,0,19,20,0,1,13,13,255,0,4,8,255,0,5,8,25,1,1,26
0059A4  3  FF 01 04 08  
0059A8  3  FF 00 04 0F  
0059C1  3  08 FF 00 05          .byte 8,255,0,5,8,0,0,19,20,0,1,24,24,255,0,4,8,255,0,5,8,0,21,22,0,8,255,0,5,8,255,0,5
0059C5  3  08 00 00 13  
0059C9  3  14 00 01 18  
0059E2  3  01 18 18 FF          .byte 1,24,24,255,0,4,8,255,0,5,8,0,21,22,0,8,255,0,5,8,255,0,5,1,2,2,10,11,2,2,8,2,28
0059E6  3  00 04 08 FF  
0059EA  3  00 05 08 00  
005A03  3  00 00 00 08          .byte 0,0,0,8,0,19,20,0,8,0,0,0,27,2,8,2,2,10,11,0,1,1,1,10,11,1,1,8,1,1,3,0,0
005A07  3  00 13 14 00  
005A0B  3  08 00 00 00  
005A24  3  08 00 13 14          .byte 8,0,19,20,0,8,0,0,3,1,1,8,1,1,10,11,0,1,1,0,10,11,255,1,4,26,3,0,0,8,0,19,20
005A28  3  00 08 00 00  
005A2C  3  03 01 01 08  
005A45  3  00 08 00 00          .byte 0,8,0,0,3,25,255,1,4,10,11,0,1,1,0,10,11,255,0,8,8,0,19,20,0,8,255,0,8,10,11,0,1,1
005A49  3  03 19 FF 01  
005A4D  3  04 0A 0B 00  
005A67  3  00 0A 0B FF          .byte 0,10,11,255,0,8,8,0,19,20,0,8,255,0,8,10,11,0,1,1,0,10,11,255,2,7,28,8,0,19,20,0,8
005A6B  3  00 08 08 00  
005A6F  3  13 14 00 08  
005A88  3  1B FF 02 07          .byte 27,255,2,7,10,11,0,1
005A8C  3  0A 0B 00 01  
005A90  3  01 00 0A 0B          .byte 1,0,10,11,255,1,8,8,0,19,20,0,8,255,1,8,10,11,1,1,1,0,10,11,255,0,6,1,1,8,0,19,20
005A94  3  FF 01 08 08  
005A98  3  00 13 14 00  
005AB1  3  00 08 FF 01          .byte 0,8,255,1,7,0,10,11,0,1,1,0,10,11,255,0,6,1,1,8,0,19,20,0,8,255,1,7,0,10,11,0,1,1
005AB5  3  07 00 0A 0B  
005AB9  3  00 01 01 00  
005AD3  3  00 0A 0B FF          .byte 0,10,11,255,2,6,1,1,8,0,19,20,0,8,255,1,8,10,11,1,1,1,0,10,11,255,1,8,8,1,19,20,1
005AD7  3  02 06 01 01  
005ADB  3  08 00 13 14  
005AF4  3  08 FF 01 07          .byte 8,255,1,7,255,0,4,1,1,0,10,11,255,0,4,21,22,0,39,8,1,19,20,1,8,39,0,21,22,0,39,1,255,0,4
005AF8  3  FF 00 04 01  
005AFC  3  01 00 0A 0B  
005B17  3  01 01 00 0A          .byte 1,1,0,10,11,255,0,4,21,22,0,55,1,54,19,20,55,1,54,0,21,22,0,55,54,0,10,11,1,1,1,0,10
005B1B  3  0B FF 00 04  
005B1F  3  15 16 00 37  
005B38  3  0B FF 00 04          .byte 11,255,0,4,19,20,255,0,4,19,20,255,0,4,19,20,255,0,4,10,11,0,1,1,0,10,11,255,0,4,19,20,255,0,4
005B3C  3  13 14 FF 00  
005B40  3  04 13 14 FF  
005B5B  3  13 14 FF 00          .byte 19,20,255,0,4,19,20,255,0,4,10,11,0,1,1,0,10,11,255,0,4,19,20,255,0,4,19,20,255,0,4,19,20
005B5F  3  04 13 14 FF  
005B63  3  00 04 0A 0B  
005B7C  3  0F 00 00 00          .byte 15,0,0,0,10,11,0,1,1,1,10,11,255,0,4,19,20,255,0,4,19,20,255,0,4,19,20,255,0,4,10,11,0
005B80  3  0A 0B 00 01  
005B84  3  01 01 0A 0B  
005B9D  3  01 01 FF 00          .byte 1,1,255,0,7,19,20,255,0,4,19,20,255,0,4,19,20,255,0,4,10,11,0,1,1,255,0,7,19,20,255,0,4
005BA1  3  07 13 14 FF  
005BA5  3  00 04 13 14  
005BBE  3  13 14 FF 00          .byte 19,20,255,0,4,19,20,255,0,4,10,11,0,1,1,255,4,4,28,0,0,19,20,255,0,10,19,20,255,0,4,10,11
005BC2  3  04 13 14 FF  
005BC6  3  00 04 0A 0B  
005BDF  3  FF 01 07 1A          .byte 255,1,7,26,255,0,22,24,24,255,1,5,255,0,23,24,24,255,1,5,4,27,255,2,6,28,255,4,10,27,255,2,5
005BE3  3  FF 00 16 18  
005BE7  3  18 FF 01 05  
005C00  3  FF 01 3C             .byte 255,1,60
005C03  3  FF 00 0F FF          .byte 255,0,15,255,1,15,255,0,15,1,39,39,39,26,255,0,8,25,1,255,0,15,1,39,39,39,255,0,10,1,255,0,15
005C07  3  01 0F FF 00  
005C0B  3  0F 01 27 27  
005C24  3  01 27 27 27          .byte 1,39,39,39,255,0,10,1,255,0,15,255,1,4,255,6,5,29,255,0,4,1,255,0,15,25,255,1,9,255,12,4,1
005C28  3  FF 00 0A 01  
005C2C  3  FF 00 0F FF  
005C45  3  FF 00 17 19          .byte 255,0,23,25,1,255,0,4,1,255,0,24,1,255,0,4,1,255,0,24,1,0,0,0,3,1,255,0,24,1,255,0,4
005C49  3  01 FF 00 04  
005C4D  3  01 FF 00 18  
005C66  3  01 FF 00 18          .byte 1,255,0,24,1,255,0,4,5,255,0,24,1,3,0,0,0,5,255,0,24,1,255,0,4,5,255,0,24,1,4,4,2,2,2
005C6A  3  01 FF 00 04  
005C6E  3  05 FF 00 18  
005C89  3  FF 00 18 19          .byte 255,0,24,25,255,1,5,255,0,120
005C8D  3  FF 01 05 FF  
005C91  3  00 78        
005C93  3  FF 01 1F 1A          .byte 255,1,31,26,255,0,26,25,1,1,255,0,28,1,1,255,0,28,1,5,255,0,28,1,5,255,0,26,3,3,1,5,255,0,28
005C97  3  FF 00 1A 19  
005C9B  3  01 01 FF 00  
005CB6  3  01 02 02 1C          .byte 1,2,2,28,255,0,26,255,1,4,255,0,24,3,3,255,1,4,2,2,28,255,0,23,255,1,7,2,2,28,255,0,4
005CBA  3  FF 00 1A FF  
005CBE  3  01 04 FF 00  
005CD7  3  1B 1C FF 00          .byte 27,28,255,0,4,27,28,255,0,8,1,1,26,0,0,0,25,1,1,26,255,0,4,25,26,255,0,4,25,26,255,0,4
005CDB  3  04 1B 1C FF  
005CDF  3  00 08 01 01  
005CF8  3  1B 02 0A 0B          .byte 27,2,10,11,1,1,255,0,24,25,1,10,11,1,1,255,0,26,10,11,1,1,255,0,26,10,11,1,1,2,2,28,255,0,25
005CFC  3  01 01 FF 00  
005D00  3  18 19 01 0A  
005D1B  3  FF 01 05 FF          .byte 255,1,5,255,0,25,255,1,5,255,2,25,255,1,31
005D1F  3  00 19 FF 01  
005D23  3  05 FF 02 19  
005D2A  3  FF 00 00 00          .byte 255,0,0,0,255,30,4,255,0,25,30,33,0,0,32,30,255,0,8,255,30,16,33,255,0,4,32,255,30,11,33,255,0,24
005D2E  3  FF 1E 04 FF  
005D32  3  00 19 1E 21  
005D4C  3  20 1E 1E 21          .byte 32,30,30,33,255,0,27,30,255,0,29,30,255,0,29,30,255,0,29,30,255,31,15,36,255,0,7,34,35,255,0,4,255,30,16
005D50  3  FF 00 1B 1E  
005D54  3  FF 00 1D 1E  
005D6F  3  24 25 FF 1F          .byte 36,37,255,31,6,30,30,255,31,4,255,30,16,36,37,255,30,13
005D73  3  06 1E 1E FF  
005D77  3  1F 04 FF 1E  
005D81  3  FF 00 04 FF          .byte 255,0,4,255,30,11,36,37,30,255,0,16,30,33,255,0,9,36,37,30,255,0,16,30,255,0,10,36,37,30,255,0,16
005D85  3  1E 0B 24 25  
005D89  3  1E FF 00 10  
005DA2  3  1E FF 00 0A          .byte 30,255,0,10,36,37,255,30,6,255,0,11,30,255,0,5,34,31,30,255,31,4,30,255,0,4,30,255,0,11,30,255,0,5
005DA6  3  24 25 FF 1E  
005DAA  3  06 FF 00 0B  
005DC4  3  20 FF 1E 06          .byte 32,255,30,6,33,255,0,4,30,255,0,11,30,3,3,255,0,15,30,255,0,11,30,255,0,17,30,255,0,11,30,255,0,17
005DC8  3  21 FF 00 04  
005DCC  3  1E FF 00 0B  
005DE6  3  1E FF 00 07          .byte 30,255,0,7,255,30,5,255,31,4,30,255,31,4,30,255,31,4,30,36,37,30,255,0,7,30,33,0,0,32,255,30,15
005DEA  3  FF 1E 05 FF  
005DEE  3  1F 04 1E FF  
005E07  3  24 25 1E FF          .byte 36,37,30,255,0,27,36,37,30,255,0,29,30,255,0,29,30,255,0,7,3,3,3,255,30,20,255,0,127
005E0B  3  00 1B 24 25  
005E0F  3  1E FF 00 1D  
005E24  3  1E FF 00 1B          .byte 30,255,0,27,30,30,30,255,0,27,30,30,30,255,0,27,30,30,30,255,0,27,30,30,30,255,0,27,30,30,30,255,0,27
005E28  3  1E 1E 1E FF  
005E2C  3  00 1B 1E 1E  
005E46  3  1E 1E 1E FF          .byte 30,30,30,255,0,27,30,30,30,255,0,27,30,30,30,35,255,0,9,34,31,31,31,36,37,255,31,4,30,30,31,30,30
005E4A  3  00 1B 1E 1E  
005E4E  3  1E FF 00 1B  
005E67  3  1F 1F FF 1E          .byte 31,31,255,30,4,255,0,9,32,30,30,30,36,37,255,30,14,33,0,255,38,4,255,0,7,30,36,37,0,32,32,30,33
005E6B  3  04 FF 00 09  
005E6F  3  20 1E 1E 1E  
005E88  3  FF 00 06 20          .byte 255,0,6,32,30,53,53,0,32,30,30,33,255,0,7,30,36,37,255,0,13,24,24,255,0,12,30,36,37,255,0,13,24,24
005E8C  3  1E 35 35 00  
005E90  3  20 1E 1E 21  
005EAA  3  FF 00 0C 1E          .byte 255,0,12,30,36,37,255,0,13,3,3,255,30,6,36,37,255,30,5,36,37,255,0,9,34,3,3,3,30,30,33,255,0,5
005EAE  3  24 25 FF 00  
005EB2  3  0D 03 03 FF  
005ECC  3  24 25 FF 00          .byte 36,37,255,0,4,30,255,0,10,34,255,30,6,255,0,6,36,37,255,0,4,30,255,0,9,34,30,30,33,0,0,30,30
005ED0  3  04 1E FF 00  
005ED4  3  0A 22 FF 1E  
005EED  3  FF 1F 0C 1E          .byte 255,31,12,30,255,31,9,30,30,30,0,0,0,255,30,25,33,33,0,0,0
005EF1  3  FF 1F 09 1E  
005EF5  3  1E 1E 00 00  
005F02  3  FF 00 1D 1E          .byte 255,0,29,30,255,0,29,30,255,0,29,30,255,0,29,30,255,0,29,30,255,0,29,30,255,0,29,30,255,0,29,30,255,0,27
005F06  3  FF 00 1D 1E  
005F0A  3  FF 00 1D 1E  
005F25  3  22 1E 1E FF          .byte 34,30,30,255,0,22,34,255,30,7,255,0,20,34,30,33,255,53,4,32,30,30,255,0,18,34,30,33,255,0,6,53,53,53
005F29  3  00 16 22 FF  
005F2D  3  1E 07 FF 00  
005F47  3  FF 00 10 22          .byte 255,0,16,34,30,33,53,255,0,24,34,30,33,255,0,18,34,255,30,8,33,53,255,0,7,34,255,30,6,255,0,5,30
005F4B  3  1E 21 35 FF  
005F4F  3  00 18 22 1E  
005F68  3  FF 34 04 FF          .byte 255,52,4,255,53,4,255,0,7,34,30,33,255,0,11,30,255,52,4,53,255,0,8,34,30,33,255,0,13,30,255,52,4
005F6C  3  35 04 FF 00  
005F70  3  07 22 1E 21  
005F89  3  35 FF 00 06          .byte 53,255,0,6,34,30,33,255,0,15,32,255,30,12,33,255,0,11
005F8D  3  22 1E 21 FF  
005F91  3  00 0F 20 FF  
005F9B  3  22 FF 1E 16          .byte 34,255,30,22,35,255,0,6,30,33,255,0,8,32,30,30,33,255,0,8,32,30,255,0,6,30,255,0,22,30,255,0,6
005F9F  3  23 FF 00 06  
005FA3  3  1E 21 FF 00  
005FBC  3  1E 24 FF 00          .byte 30,36,255,0,20,37,30,255,0,6,30,36,37,0,34,30,30,35,255,0,8,34,30,30,35,0,36,37,30,255,0,6,30
005FC0  3  14 25 1E FF  
005FC4  3  00 06 1E 24  
005FDD  3  24 25 00 20          .byte 36,37,0,32,30,30,33,255,0,8,32,30,30,33,0,36,37,30,255,0,6,30,36,37,255,0,18,36,37,30,255,0,6
005FE1  3  1E 1E 21 FF  
005FE5  3  00 08 20 1E  
005FFE  3  1E FF 00 16          .byte 30,255,0,22,30,255,0,6,30,255,0,22,30,255,0,6,30,36,255,0,20,37,30,255,0,6,30,36,37,0,34,30,30
006002  3  1E FF 00 06  
006006  3  1E FF 00 16  
00601F  3  23 FF 00 08          .byte 35,255,0,8,34,30,30,35,0,36,37,30,255,0,6,30,36,37,0,32,30,30,33,255,0,8,32,30,30,33,0,36,37
006023  3  22 1E 1E 23  
006027  3  00 24 25 1E  
006040  3  1E FF 00 06          .byte 30,255,0,6,30,36,37,255,0,18,36,37,30,255,0,6,30,255,0,22,30,255,0,6,30,255,0,22,30,255,0,6,30
006044  3  1E 24 25 FF  
006048  3  00 12 24 25  
006061  3  1F 1F FF 1E          .byte 31,31,255,30,4,35,255,0,8,34,255,30,4,31,31,30,255,0,6,32,255,30,7,35,255,0,6,34,255,30,7,33,255,0,14
006065  3  04 23 FF 00  
006069  3  08 22 FF 1E  
006084  3  20 1F FF 26          .byte 32,31,255,38,4,31,33,255,0,23,32,255,30,4,33,255,0,15
006088  3  04 1F 21 FF  
00608C  3  00 17 20 FF  
006096  3               numsc:
006096  3  1D                   .byte 29
006097  3               nmedat:
006097  3  00 01 78 50          .byte 0,1,120,80,5,14,120,8,5,15,120,24,5,16,120,40,5,17,104,40,5,18,104,24,5,19,104,8,255
00609B  3  05 0E 78 08  
00609F  3  05 0F 78 18  
0060B4  3  00 01 78 18          .byte 0,1,120,24,8,11,56,72,8,11,56,152,1,3,64,112,255
0060B8  3  08 0B 38 48  
0060BC  3  08 0B 38 98  
0060C5  3  00 01 60 08          .byte 0,1,96,8,5,5,136,144,2,20,64,80,2,4,128,80,8,11,40,104,8,11,128,48,255
0060C9  3  05 05 88 90  
0060CD  3  02 14 40 50  
0060DE  3  00 01 38 08          .byte 0,1,56,8,1,6,80,40,3,6,48,176,8,11,40,120,8,11,32,224,255
0060E2  3  01 06 50 28  
0060E6  3  03 06 30 B0  
0060F3  3  00 01 80 08          .byte 0,1,128,8,1,7,72,192,2,7,16,128,2,7,128,96,8,11,128,72,8,11,16,104,255
0060F7  3  01 07 48 C0  
0060FB  3  02 07 10 80  
00610C  3  00 01 30 08          .byte 0,1,48,8,1,13,96,56,2,20,128,128,4,9,72,160,4,9,48,192,8,11,72,128,8,11,104,24,8,11,40,128,255
006110  3  01 0D 60 38  
006114  3  02 14 80 80  
00612D  3  00 01 30 08          .byte 0,1,48,8,2,20,40,72,1,7,112,72,4,9,72,208,5,5,136,208,5,5,136,224,255
006131  3  02 14 28 48  
006135  3  01 07 70 48  
006146  3  00 01 48 08          .byte 0,1,72,8,2,20,128,88,1,3,88,144,1,6,56,104,4,9,40,184,5,5,136,144,8,11,128,16,8,11,40,16,8,11,80,224,255
00614A  3  02 14 80 58  
00614E  3  01 03 58 90  
00616B  3  00 01 80 08          .byte 0,1,128,8,1,3,96,168,1,13,64,104,1,7,88,136,1,4,72,200,1,20,80,72,5,5,136,104,5,5,136,136,5,5,136,168,8,11,128,72,8,11,120,192,255
00616F  3  01 03 60 A8  
006173  3  01 0D 40 68  
006198  3  00 01 80 08          .byte 0,1,128,8,6,12,24,88,6,12,24,152,8,11,72,16,8,11,48,224,255
00619C  3  06 0C 18 58  
0061A0  3  06 0C 18 98  
0061AD  3  00 01 80 08          .byte 0,1,128,8,3,6,24,112,8,11,120,224,1,6,72,184,255
0061B1  3  03 06 18 70  
0061B5  3  08 0B 78 E0  
0061BE  3  00 01 28 08          .byte 0,1,40,8,6,12,24,72,6,12,24,128,6,12,24,184,8,11,48,224,8,11,72,16,255
0061C2  3  06 0C 18 48  
0061C6  3  06 0C 18 80  
0061D7  3  00 01 50 08          .byte 0,1,80,8,6,12,24,64,6,12,24,136,1,6,24,168,2,4,128,136,8,11,120,24,8,11,72,128,255
0061DB  3  06 0C 18 40  
0061DF  3  06 0C 18 88  
0061F4  3  00 01 30 08          .byte 0,1,48,8,4,9,88,136,1,7,64,88,1,7,104,184,8,11,48,104,8,11,48,168,255
0061F8  3  04 09 58 88  
0061FC  3  01 07 40 58  
00620D  3  00 01 78 08          .byte 0,1,120,8,2,4,40,80,2,4,40,152,8,11,72,16,255
006211  3  02 04 28 50  
006215  3  02 04 28 98  
00621E  3  00 01 78 08          .byte 0,1,120,8,7,15,120,192,7,14,120,176,7,16,120,208,7,17,104,208,7,18,104,192,7,19,104,176,8,11,72,112,8,11,32,48,255
006222  3  07 0F 78 C0  
006226  3  07 0E 78 B0  
006243  3  00 00 48 98          .byte 0,0,72,152,2,4,128,112,8,11,72,72,255
006247  3  02 04 80 70  
00624B  3  08 0B 48 48  
006250  3  00 00 80 E8          .byte 0,0,128,232,1,3,24,144,3,6,56,112,8,11,128,24,255
006254  3  01 03 18 90  
006258  3  03 06 38 70  
006261  3  00 00 20 50          .byte 0,0,32,80,1,7,24,208,8,11,80,40,255
006265  3  01 07 18 D0  
006269  3  08 0B 50 28  
00626E  3  00 00 20 E8          .byte 0,0,32,232,2,4,96,120,3,7,56,16,8,11,128,16,8,11,32,16,255
006272  3  02 04 60 78  
006276  3  03 07 38 10  
006283  3  00 00 10 38          .byte 0,0,16,56,8,11,96,64,8,11,96,176,255
006287  3  08 0B 60 40  
00628B  3  08 0B 60 B0  
006290  3  00 00 10 28          .byte 0,0,16,40,2,10,120,96,8,11,16,72,255
006294  3  02 0A 78 60  
006298  3  08 0B 10 48  
00629D  3  00 00 60 E8          .byte 0,0,96,232,8,11,24,176,255
0062A1  3  08 0B 18 B0  
0062A5  3  FF           
0062A6  3  00 01 30 08          .byte 0,1,48,8,2,4,128,56,1,7,88,136,1,13,48,184,6,12,16,88,6,12,16,160,8,11,112,16,255
0062AA  3  02 04 80 38  
0062AE  3  01 07 58 88  
0062C3  3  00 01 78 08          .byte 0,1,120,8,1,7,80,152,2,10,120,80,8,11,128,216,255
0062C7  3  01 07 50 98  
0062CB  3  02 0A 78 50  
0062D4  3  00 00 18 70          .byte 0,0,24,112,2,20,64,120,255
0062D8  3  02 14 40 78  
0062DC  3  FF           
0062DD  3  00 00 68 E8          .byte 0,0,104,232,5,8,128,104,2,10,56,136,8,11,128,32,8,11,56,216,1,20,104,160,3,7,32,72,255
0062E1  3  05 08 80 68  
0062E5  3  02 0A 38 88  
0062FA  3  00 00 88 70          .byte 0,0,136,112,8,11,136,96,255
0062FE  3  08 0B 88 60  
006302  3  FF           
006303  3  00 01 80 60          .byte 0,1,128,96,5,8,72,48,8,11,24,48,8,11,24,144,8,11,72,144,3,7,40,96,255
006307  3  05 08 48 30  
00630B  3  08 0B 18 30  
00631C  3               NUMOBJ = 59
00631C  3               objdta:
00631C  3  00 00 00 00          .byte 0,0,0,0,68,68,170,170,68,68,36,72,36,72,31,240,17,16,21,80,19,144,9,32,15,224,10,160,15,224,0,0,12,120,24,12,120,24
006320  3  44 44 AA AA  
006324  3  44 44 24 48  
006342  3  FF FF 82 41          .byte 255,255,130,65,164,33,168,21,168,21,160,133,161,133,35,132,33,132,161,133,160,5,168,21,168,21,132,33,130,65,255,255,20,96,8,20,96,8
006346  3  A4 21 A8 15  
00634A  3  A8 15 A0 85  
006368  3  FF FF 82 41          .byte 255,255,130,65,164,33,168,21,168,21,163,197,160,69,35,196,34,4,163,197,160,5,168,21,168,21,132,33,130,65,255,255,18,120,176,18,120,176
00636C  3  A4 21 A8 15  
006370  3  A8 15 A3 C5  
00638E  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,68,68,170,170,68,68,68,68,63,248,32,8,18,144,8,32,10,160,8,32,15,224,0,0,12,72,128,12,72,128
006392  3  00 00 00 00  
006396  3  44 44 AA AA  
0063B4  3  00 00 00 00          .byte 0,0,0,0,0,12,28,18,15,225,7,225,6,97,12,50,13,180,24,24,27,216,48,12,55,236,48,12,31,248,15,240,19,128,16,19,128,16
0063B8  3  00 0C 1C 12  
0063BC  3  0F E1 07 E1  
0063DA  3  00 00 FF FF          .byte 0,0,255,255,213,85,128,1,152,1,164,1,167,253,164,21,152,149,129,129,128,129,128,129,128,129,128,1,170,171,255,255,17,88,80,17,88,80
0063DE  3  D5 55 80 01  
0063E2  3  98 01 A4 01  
006400  3  00 00 FF FF          .byte 0,0,255,255,213,85,128,1,152,1,164,1,167,253,164,21,153,213,128,65,129,193,129,1,129,193,128,1,170,171,255,255,23,32,224,23,32,224
006404  3  D5 55 80 01  
006408  3  98 01 A4 01  
006426  3  00 00 7F FE          .byte 0,0,127,254,53,172,36,36,36,36,39,228,32,4,39,228,37,164,39,228,32,4,39,228,36,36,36,36,53,172,127,254,13,48,104,13,48,104
00642A  3  35 AC 24 24  
00642E  3  24 24 27 E4  
00644C  3  00 00 7F FE          .byte 0,0,127,254,53,172,36,36,36,36,39,228,32,4,39,228,37,164,39,228,32,4,39,228,36,36,36,36,53,172,127,254,13,48,168,13,48,168
006450  3  35 AC 24 24  
006454  3  24 24 27 E4  
006472  3  00 80 1F F8          .byte 0,128,31,248,32,4,16,2,13,85,72,1,114,242,61,126,43,106,85,82,255,226,142,34,132,34,128,36,128,40,255,240,27,136,96,27,136,96
006476  3  20 04 10 02  
00647A  3  0D 55 48 01  
006498  3  01 00 C3 86          .byte 1,0,195,134,189,122,129,82,157,82,137,82,65,84,127,252,85,4,85,116,85,36,53,8,21,16,13,32,7,192,3,128,28,24,48,28,24,48
00649C  3  BD 7A 81 52  
0064A0  3  9D 52 89 52  
0064BE  3  00 00 00 00          .byte 0,0,0,0,0,0,31,248,16,8,27,216,15,224,10,80,31,248,20,40,30,120,14,112,4,32,4,32,7,224,0,0,9,48,224,9,48,224
0064C2  3  00 00 1F F8  
0064C6  3  10 08 1B D8  
0064E4  3  01 00 C3 86          .byte 1,0,195,134,189,122,129,2,149,34,137,2,65,4,127,252,65,4,65,84,69,36,33,8,17,16,9,32,7,192,3,128,28,24,144,28,24,144
0064E8  3  BD 7A 81 02  
0064EC  3  95 22 89 02  
00650A  3  01 00 C3 86          .byte 1,0,195,134,189,254,129,254,157,142,145,238,73,252,127,252,127,4,127,116,99,68,59,40,31,16,15,32,7,192,3,128,28,72,144,28,72,144
00650E  3  BD FE 81 FE  
006512  3  9D 8E 91 EE  
006530  3  00 43 00 C5          .byte 0,67,0,197,0,202,0,212,0,232,0,80,0,191,1,94,2,128,5,0,10,0,20,0,40,0,80,0,160,0,192,0,1,56,152,1,56,152
006534  3  00 CA 00 D4  
006538  3  00 E8 00 50  
006556  3  C2 00 A3 00          .byte 194,0,163,0,83,0,43,0,23,0,10,0,253,0,122,128,1,64,0,160,0,80,0,40,0,20,0,10,0,5,0,3,1,56,72,1,56,72
00655A  3  53 00 2B 00  
00655E  3  17 00 0A 00  
00657C  3  00 00 00 00          .byte 0,0,0,0,0,0,15,224,19,144,34,136,85,84,50,152,31,240,18,144,9,32,9,32,4,64,2,128,1,0,0,0,2,128,48,2,128,48
006580  3  00 00 0F E0  
006584  3  13 90 22 88  
0065A2  3  00 00 00 00          .byte 0,0,0,0,0,0,54,108,20,40,20,40,31,248,2,96,13,176,9,144,6,96,3,192,2,64,1,128,0,0,0,0,2,40,104,2,40,104
0065A6  3  00 00 36 6C  
0065AA  3  14 28 14 28  
0065C8  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,20,40,20,40,31,248,2,96,13,176,14,112,6,96,7,224,2,64,1,128,0,0,0,0,15,32,48,15,32,48
0065CC  3  00 00 00 00  
0065D0  3  14 28 14 28  
0065EE  3  00 00 00 00          .byte 0,0,0,0,1,0,2,128,13,96,18,144,31,240,31,240,32,8,47,232,32,8,23,208,16,16,8,32,7,192,0,0,3,40,120,3,40,120
0065F2  3  01 00 02 80  
0065F6  3  0D 60 12 90  
006614  3  00 00 30 18          .byte 0,0,48,24,40,40,36,72,34,136,33,8,40,44,32,4,41,36,32,12,41,40,32,8,41,40,32,8,63,248,0,0,3,32,224,3,32,224
006618  3  28 28 24 48  
00661C  3  22 88 21 08  
00663A  3  00 00 03 80          .byte 0,0,3,128,7,192,8,32,19,144,36,72,72,36,209,22,210,150,209,22,72,36,36,72,19,144,8,32,7,192,3,128,4,128,72,4,128,72
00663E  3  07 C0 08 20  
006642  3  13 90 24 48  
006660  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,3,192,4,32,8,16,15,240,48,12,55,236,8,16,8,16,7,224,0,0,0,0,0,0,4,16,104,4,16,104
006664  3  00 00 00 00  
006668  3  03 C0 04 20  
006686  3  01 80 01 80          .byte 1,128,1,128,2,64,1,128,1,128,1,128,2,64,4,32,9,16,18,8,20,40,16,72,8,144,8,16,4,32,7,224,5,104,24,5,104,24
00668A  3  02 40 01 80  
00668E  3  01 80 01 80  
0066AC  3  00 00 00 00          .byte 0,0,0,0,0,0,1,128,1,128,1,128,2,64,4,32,5,160,8,16,11,208,16,8,23,232,16,8,15,240,0,0,5,40,128,5,40,128
0066B0  3  00 00 01 80  
0066B4  3  01 80 01 80  
0066D2  3  00 00 00 00          .byte 0,0,0,0,1,128,2,64,5,32,4,160,2,64,4,32,5,160,8,16,11,208,16,8,23,232,16,8,15,240,0,0,5,72,128,5,72,128
0066D6  3  01 80 02 40  
0066DA  3  05 20 04 A0  
0066F8  3  00 00 FF FF          .byte 0,0,255,255,213,85,128,1,128,1,136,1,148,1,162,1,161,253,162,21,148,21,136,21,128,1,128,1,170,171,255,255,27,136,56,27,136,56
0066FC  3  D5 55 80 01  
006700  3  80 01 88 01  
00671E  3  FF FF 82 41          .byte 255,255,130,65,164,33,169,149,169,149,164,37,162,69,113,142,113,142,162,69,164,37,169,149,169,149,132,33,130,65,255,255,15,120,144,15,120,144
006722  3  A4 21 A9 95  
006726  3  A9 95 A4 25  
006744  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,48,140,77,50,39,228,84,42,39,228,72,146,49,12,0,0,0,0,0,0,0,0,8,128,72,8,128,72
006748  3  00 00 00 00  
00674C  3  00 00 30 8C  
00676A  3  60 06 90 09          .byte 96,6,144,9,175,245,80,10,23,8,18,8,19,104,16,8,21,88,16,8,21,104,16,8,95,250,160,5,144,9,96,6,26,128,32,26,128,32
00676E  3  AF F5 50 0A  
006772  3  17 08 12 08  
006790  3  00 00 00 00          .byte 0,0,0,0,1,192,63,254,121,207,115,231,98,163,5,208,15,120,21,212,18,164,19,228,16,132,16,132,31,252,0,0,9,72,16,9,72,16
006794  3  01 C0 3F FE  
006798  3  79 CF 73 E7  
0067B6  3  00 00 00 00          .byte 0,0,0,0,1,128,2,64,5,160,24,24,19,200,10,80,9,144,10,80,18,72,11,208,8,16,9,144,6,96,0,0,8,120,192,8,120,192
0067BA  3  01 80 02 40  
0067BE  3  05 A0 18 18  
0067DC  3  00 00 1F F8          .byte 0,0,31,248,19,200,57,156,69,162,147,201,69,162,41,148,19,200,3,192,57,156,69,162,147,201,69,162,43,212,23,232,22,24,176,22,24,176
0067E0  3  13 C8 39 9C  
0067E4  3  45 A2 93 C9  
006802  3  00 00 00 00          .byte 0,0,0,0,1,128,15,240,9,144,1,128,2,64,4,32,5,160,8,16,9,144,16,8,17,136,16,8,15,240,0,0,14,72,16,14,72,16
006806  3  01 80 0F F0  
00680A  3  09 90 01 80  
006828  3  00 00 01 00          .byte 0,0,1,0,2,128,4,64,10,160,16,16,41,40,64,4,182,218,64,4,41,40,16,16,10,160,4,64,2,128,1,0,7,128,16,7,128,16
00682C  3  02 80 04 40  
006830  3  0A A0 10 10  
00684E  3  00 00 05 A0          .byte 0,0,5,160,5,160,7,224,3,192,2,64,4,32,9,16,18,8,20,8,16,40,16,72,8,144,4,32,3,192,0,0,7,80,224,7,80,224
006852  3  05 A0 07 E0  
006856  3  03 C0 02 40  
006874  3  03 C0 0D B0          .byte 3,192,13,176,27,216,31,248,57,156,49,140,25,152,28,56,62,124,46,116,54,108,30,120,10,80,6,96,0,0,0,0,7,40,16,7,40,16
006878  3  1B D8 1F F8  
00687C  3  39 9C 31 8C  
00689A  3  00 00 00 00          .byte 0,0,0,0,0,0,27,236,22,180,16,4,22,180,20,20,28,156,9,200,8,8,25,76,19,228,30,60,0,0,0,0,10,120,224,10,120,224
00689E  3  00 00 1B EC  
0068A2  3  16 B4 10 04  
0068C0  3  03 C0 02 40          .byte 3,192,2,64,7,224,12,48,9,144,8,16,13,176,6,96,3,192,1,128,1,128,3,192,1,128,3,192,5,160,7,224,11,48,224,11,48,224
0068C4  3  07 E0 0C 30  
0068C8  3  09 90 08 10  
0068E6  3  00 00 00 00          .byte 0,0,0,0,30,120,33,132,40,20,35,196,25,152,5,160,5,160,5,160,4,32,2,64,2,64,4,32,9,144,14,112,11,72,16,11,72,16
0068EA  3  1E 78 21 84  
0068EE  3  28 14 23 C4  
00690C  3  00 00 03 C0          .byte 0,0,3,192,62,124,66,66,67,194,64,2,63,252,97,134,63,252,64,2,67,194,94,122,64,2,126,126,99,198,0,0,17,128,24,17,128,24
006910  3  3E 7C 42 42  
006914  3  43 C2 40 02  
006932  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,96,3,90,173,74,169,106,171,63,254,24,12,8,8,10,168,8,8,8,8,15,248,0,0,24,128,216,24,128,216
006936  3  00 00 00 00  
00693A  3  60 03 5A AD  
006958  3  00 00 00 00          .byte 0,0,0,0,15,192,16,32,32,80,64,40,129,148,130,76,132,148,130,36,65,72,32,144,16,32,15,192,0,0,0,0,16,72,72,16,72,72
00695C  3  0F C0 10 20  
006960  3  20 50 40 28  
00697E  3  00 00 00 00          .byte 0,0,0,0,0,0,0,24,0,56,1,208,1,160,1,96,2,224,13,0,10,0,22,0,40,0,48,0,0,0,0,0,21,16,72,21,16,72
006982  3  00 00 00 18  
006986  3  00 38 01 D0  
0069A4  3  00 00 00 00          .byte 0,0,0,0,15,240,16,8,23,232,16,8,11,208,8,16,5,160,8,16,11,208,16,8,23,232,16,8,15,240,0,0,23,112,16,23,112,16
0069A8  3  0F F0 10 08  
0069AC  3  17 E8 10 08  
0069CA  3  00 00 00 00          .byte 0,0,0,0,31,248,16,8,31,248,16,8,23,232,9,144,9,144,8,16,6,96,1,128,1,128,3,192,3,192,15,240,15,72,112,15,72,112
0069CE  3  1F F8 10 08  
0069D2  3  1F F8 10 08  
0069F0  3  00 00 0F F0          .byte 0,0,15,240,24,24,16,8,53,76,224,7,138,161,128,1,149,85,128,1,138,161,224,7,53,76,16,8,24,24,15,240,20,112,120,20,112,120
0069F4  3  18 18 10 08  
0069F8  3  35 4C E0 07  
006A16  3  00 00 00 00          .byte 0,0,0,0,3,192,4,32,5,160,2,64,2,64,5,160,4,32,8,16,10,80,16,8,16,8,11,208,12,48,0,0,20,96,64,20,96,64
006A1A  3  03 C0 04 20  
006A1E  3  05 A0 02 40  
006A3C  3  00 00 00 00          .byte 0,0,0,0,3,192,4,32,5,160,2,64,2,64,5,160,4,32,8,16,10,80,16,8,16,8,11,208,12,48,0,0,20,96,176,20,96,176
006A40  3  03 C0 04 20  
006A44  3  05 A0 02 40  
006A62  3  00 00 00 00          .byte 0,0,0,0,0,0,15,240,8,16,15,240,7,224,12,48,31,248,28,56,31,248,12,48,15,240,4,32,7,224,0,0,26,56,216,26,56,216
006A66  3  00 00 0F F0  
006A6A  3  08 10 0F F0  
006A88  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,24,3,248,7,240,15,32,31,64,29,32,28,48,14,160,14,96,4,64,7,192,0,0,19,96,24,19,96,24
006A8C  3  00 00 00 00  
006A90  3  00 18 03 F8  
006AAE  3  FF FF 82 41          .byte 255,255,130,65,164,33,168,21,168,21,163,197,160,69,35,196,32,68,163,197,160,5,168,21,168,21,132,33,130,65,255,255,21,120,232,21,120,232
006AB2  3  A4 21 A8 15  
006AB6  3  A8 15 A3 C5  
006AD4  3  00 00 FF FF          .byte 0,0,255,255,213,85,128,1,152,1,164,1,167,253,164,21,153,213,128,65,129,193,128,65,129,193,128,1,170,171,255,255,18,40,136,18,40,136
006AD8  3  D5 55 80 01  
006ADC  3  98 01 A4 01  
006AFA  3  FF FF 82 41          .byte 255,255,130,65,164,33,168,21,168,21,162,69,162,69,35,196,32,68,160,69,160,5,168,21,168,21,132,33,130,65,255,255,26,104,8,26,104,8
006AFE  3  A4 21 A8 15  
006B02  3  A8 15 A2 45  
006B20  3  00 00 FF FF          .byte 0,0,255,255,213,85,128,1,152,1,164,1,167,253,164,21,153,85,129,65,129,193,128,65,128,65,128,1,170,171,255,255,22,24,136,22,24,136
006B24  3  D5 55 80 01  
006B28  3  98 01 A4 01  
006B46  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,24,0,232,0,184,0,232,0,24,0,8,0,0,0,0,0,15,72,16,15,72,16
006B4A  3  00 00 00 00  
006B4E  3  00 00 00 00  
006B6C  3  07 FC 08 02          .byte 7,252,8,2,9,194,10,34,12,146,10,34,17,68,33,74,127,242,71,18,66,18,64,18,64,20,64,24,127,240,0,0,18,80,40,18,80,40
006B70  3  09 C2 0A 22  
006B74  3  0C 92 0A 22  
006B92  3  00 00 00 00          .byte 0,0,0,0,12,96,11,160,105,44,144,18,146,146,139,162,73,36,41,40,19,144,18,144,8,32,5,64,3,128,0,0,19,32,16,19,32,16
006B96  3  0C 60 0B A0  
006B9A  3  69 2C 90 12  
006BB8  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,24,0,23,0,29,0,23,0,24,0,16,0,0,0,0,18,32,224,18,32,224
006BBC  3  00 00 00 00  
006BC0  3  00 00 00 00  
006BDE  3               palett:
006BDE  3  00 02 14 13          .byte 0,2,20,19,128,227,200,146,0,2,20,19,128,227,200,146
006BE2  3  80 E3 C8 92  
006BE6  3  00 02 14 13  
006BEE  3  00 23 3C 3F          .byte 0,35,60,63,224,227,252,255,0,35,60,63,224,227,252,255
006BF2  3  E0 E3 FC FF  
006BF6  3  00 23 3C 3F  
006BFE  3  00 21 27 A2          .byte 0,33,39,162,243,64,128,244,0,33,39,162,243,64,128,244
006C02  3  F3 40 80 F4  
006C06  3  00 21 27 A2  
006C0E  3  00 2C 50 78          .byte 0,44,80,120,108,109,146,219,0,44,80,120,108,109,146,219
006C12  3  6C 6D 92 DB  
006C16  3  00 2C 50 78  
006C1E  3               font:
006C1E  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
006C22  3  00 00 00 00  
006C26  3  00 10 10 10          .byte 0,16,16,16,16,0,16,0
006C2A  3  10 00 10 00  
006C2E  3  00 24 24 00          .byte 0,36,36,0,0,0,0,0
006C32  3  00 00 00 00  
006C36  3  00 24 7E 24          .byte 0,36,126,36,36,126,36,0
006C3A  3  24 7E 24 00  
006C3E  3  00 08 3E 28          .byte 0,8,62,40,62,10,62,8
006C42  3  3E 0A 3E 08  
006C46  3  00 62 64 08          .byte 0,98,100,8,16,38,70,0
006C4A  3  10 26 46 00  
006C4E  3  00 10 28 10          .byte 0,16,40,16,42,68,58,0
006C52  3  2A 44 3A 00  
006C56  3  00 08 10 00          .byte 0,8,16,0,0,0,0,0
006C5A  3  00 00 00 00  
006C5E  3  00 04 08 08          .byte 0,4,8,8,8,8,4,0
006C62  3  08 08 04 00  
006C66  3  00 20 10 10          .byte 0,32,16,16,16,16,32,0
006C6A  3  10 10 20 00  
006C6E  3  00 00 14 08          .byte 0,0,20,8,62,8,20,0
006C72  3  3E 08 14 00  
006C76  3  00 00 08 08          .byte 0,0,8,8,62,8,8,0
006C7A  3  3E 08 08 00  
006C7E  3  00 00 00 00          .byte 0,0,0,0,0,8,8,16
006C82  3  00 08 08 10  
006C86  3  00 00 00 00          .byte 0,0,0,0,62,0,0,0
006C8A  3  3E 00 00 00  
006C8E  3  00 00 00 00          .byte 0,0,0,0,0,24,24,0
006C92  3  00 18 18 00  
006C96  3  00 00 02 04          .byte 0,0,2,4,8,16,32,0
006C9A  3  08 10 20 00  
006C9E  3  00 3C 46 4A          .byte 0,60,70,74,82,98,60,0
006CA2  3  52 62 3C 00  
006CA6  3  00 18 28 08          .byte 0,24,40,8,8,8,62,0
006CAA  3  08 08 3E 00  
006CAE  3  00 3C 42 02          .byte 0,60,66,2,60,64,126,0
006CB2  3  3C 40 7E 00  
006CB6  3  00 3C 42 0C          .byte 0,60,66,12,2,66,60,0
006CBA  3  02 42 3C 00  
006CBE  3  00 08 18 28          .byte 0,8,24,40,72,126,8,0
006CC2  3  48 7E 08 00  
006CC6  3  00 7E 40 7C          .byte 0,126,64,124,2,66,60,0
006CCA  3  02 42 3C 00  
006CCE  3  00 3C 40 7C          .byte 0,60,64,124,66,66,60,0
006CD2  3  42 42 3C 00  
006CD6  3  00 7E 02 04          .byte 0,126,2,4,8,16,16,0
006CDA  3  08 10 10 00  
006CDE  3  00 3C 42 3C          .byte 0,60,66,60,66,66,60,0
006CE2  3  42 42 3C 00  
006CE6  3  00 3C 42 42          .byte 0,60,66,66,62,2,60,0
006CEA  3  3E 02 3C 00  
006CEE  3  00 00 00 10          .byte 0,0,0,16,0,0,16,0
006CF2  3  00 00 10 00  
006CF6  3  00 00 10 00          .byte 0,0,16,0,0,16,16,32
006CFA  3  00 10 10 20  
006CFE  3  00 00 04 08          .byte 0,0,4,8,16,8,4,0
006D02  3  10 08 04 00  
006D06  3  00 00 00 3E          .byte 0,0,0,62,0,62,0,0
006D0A  3  00 3E 00 00  
006D0E  3  00 00 10 08          .byte 0,0,16,8,4,8,16,0
006D12  3  04 08 10 00  
006D16  3  00 3C 42 04          .byte 0,60,66,4,8,0,8,0
006D1A  3  08 00 08 00  
006D1E  3  00 3C 4A 56          .byte 0,60,74,86,94,64,60,0
006D22  3  5E 40 3C 00  
006D26  3  00 3C 42 42          .byte 0,60,66,66,126,66,66,0
006D2A  3  7E 42 42 00  
006D2E  3  00 7C 42 7C          .byte 0,124,66,124,66,66,124,0
006D32  3  42 42 7C 00  
006D36  3  00 3C 42 40          .byte 0,60,66,64,64,66,60,0
006D3A  3  40 42 3C 00  
006D3E  3  00 78 44 42          .byte 0,120,68,66,66,68,120,0
006D42  3  42 44 78 00  
006D46  3  00 7E 40 7C          .byte 0,126,64,124,64,64,126,0
006D4A  3  40 40 7E 00  
006D4E  3  00 7E 40 7C          .byte 0,126,64,124,64,64,64,0
006D52  3  40 40 40 00  
006D56  3  00 3C 42 40          .byte 0,60,66,64,78,66,60,0
006D5A  3  4E 42 3C 00  
006D5E  3  00 42 42 7E          .byte 0,66,66,126,66,66,66,0
006D62  3  42 42 42 00  
006D66  3  00 3E 08 08          .byte 0,62,8,8,8,8,62,0
006D6A  3  08 08 3E 00  
006D6E  3  00 02 02 02          .byte 0,2,2,2,66,66,60,0
006D72  3  42 42 3C 00  
006D76  3  00 44 48 70          .byte 0,68,72,112,72,68,66,0
006D7A  3  48 44 42 00  
006D7E  3  00 40 40 40          .byte 0,64,64,64,64,64,126,0
006D82  3  40 40 7E 00  
006D86  3  00 42 66 5A          .byte 0,66,102,90,66,66,66,0
006D8A  3  42 42 42 00  
006D8E  3  00 42 62 52          .byte 0,66,98,82,74,70,66,0
006D92  3  4A 46 42 00  
006D96  3  00 3C 42 42          .byte 0,60,66,66,66,66,60,0
006D9A  3  42 42 3C 00  
006D9E  3  00 7C 42 42          .byte 0,124,66,66,124,64,64,0
006DA2  3  7C 40 40 00  
006DA6  3  00 3C 42 42          .byte 0,60,66,66,82,74,60,0
006DAA  3  52 4A 3C 00  
006DAE  3  00 7C 42 42          .byte 0,124,66,66,124,68,66,0
006DB2  3  7C 44 42 00  
006DB6  3  00 3C 40 3C          .byte 0,60,64,60,2,66,60,0
006DBA  3  02 42 3C 00  
006DBE  3  00 FE 10 10          .byte 0,254,16,16,16,16,16,0
006DC2  3  10 10 10 00  
006DC6  3  00 42 42 42          .byte 0,66,66,66,66,66,60,0
006DCA  3  42 42 3C 00  
006DCE  3  00 42 42 42          .byte 0,66,66,66,66,36,24,0
006DD2  3  42 24 18 00  
006DD6  3  00 42 42 42          .byte 0,66,66,66,66,90,36,0
006DDA  3  42 5A 24 00  
006DDE  3  00 42 24 18          .byte 0,66,36,24,24,36,66,0
006DE2  3  18 24 42 00  
006DE6  3  00 82 44 28          .byte 0,130,68,40,16,16,16,0
006DEA  3  10 10 10 00  
006DEE  3  00 7E 04 08          .byte 0,126,4,8,16,32,126,0
006DF2  3  10 20 7E 00  
006DF6  3  00 0E 08 08          .byte 0,14,8,8,8,8,14,0
006DFA  3  08 08 0E 00  
006DFE  3  00 00 40 20          .byte 0,0,64,32,16,8,4,0
006E02  3  10 08 04 00  
006E06  3  00 70 10 10          .byte 0,112,16,16,16,16,112,0
006E0A  3  10 10 70 00  
006E0E  3  00 10 38 54          .byte 0,16,56,84,16,16,16,0
006E12  3  10 10 10 00  
006E16  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
006E1A  3  00 00 00 FF  
006E1E  3  00 1C 22 78          .byte 0,28,34,120,32,32,126,0
006E22  3  20 20 7E 00  
006E26  3  00 00 38 04          .byte 0,0,56,4,60,68,60,0
006E2A  3  3C 44 3C 00  
006E2E  3  00 20 20 3C          .byte 0,32,32,60,34,34,60,0
006E32  3  22 22 3C 00  
006E36  3  00 00 1C 20          .byte 0,0,28,32,32,32,28,0
006E3A  3  20 20 1C 00  
006E3E  3  00 04 04 3C          .byte 0,4,4,60,68,68,60,0
006E42  3  44 44 3C 00  
006E46  3  00 00 38 44          .byte 0,0,56,68,120,64,60,0
006E4A  3  78 40 3C 00  
006E4E  3  00 0C 10 18          .byte 0,12,16,24,16,16,16,0
006E52  3  10 10 10 00  
006E56  3  00 00 3C 44          .byte 0,0,60,68,68,60,4,56
006E5A  3  44 3C 04 38  
006E5E  3  00 40 40 78          .byte 0,64,64,120,68,68,68,0
006E62  3  44 44 44 00  
006E66  3  00 10 00 30          .byte 0,16,0,48,16,16,56,0
006E6A  3  10 10 38 00  
006E6E  3  00 04 00 04          .byte 0,4,0,4,4,4,36,24
006E72  3  04 04 24 18  
006E76  3  00 20 28 30          .byte 0,32,40,48,48,40,36,0
006E7A  3  30 28 24 00  
006E7E  3  00 10 10 10          .byte 0,16,16,16,16,16,12,0
006E82  3  10 10 0C 00  
006E86  3  00 00 68 54          .byte 0,0,104,84,84,84,84,0
006E8A  3  54 54 54 00  
006E8E  3  00 00 78 44          .byte 0,0,120,68,68,68,68,0
006E92  3  44 44 44 00  
006E96  3  00 00 38 44          .byte 0,0,56,68,68,68,56,0
006E9A  3  44 44 38 00  
006E9E  3  00 00 78 44          .byte 0,0,120,68,68,120,64,64
006EA2  3  44 78 40 40  
006EA6  3  00 00 3C 44          .byte 0,0,60,68,68,60,4,6
006EAA  3  44 3C 04 06  
006EAE  3  00 00 1C 20          .byte 0,0,28,32,32,32,32,0
006EB2  3  20 20 20 00  
006EB6  3  00 00 38 40          .byte 0,0,56,64,56,4,120,0
006EBA  3  38 04 78 00  
006EBE  3  00 10 38 10          .byte 0,16,56,16,16,16,12,0
006EC2  3  10 10 0C 00  
006EC6  3  00 00 44 44          .byte 0,0,68,68,68,68,56,0
006ECA  3  44 44 38 00  
006ECE  3  00 00 44 44          .byte 0,0,68,68,40,40,16,0
006ED2  3  28 28 10 00  
006ED6  3  00 00 44 54          .byte 0,0,68,84,84,84,40,0
006EDA  3  54 54 28 00  
006EDE  3  00 00 44 28          .byte 0,0,68,40,16,40,68,0
006EE2  3  10 28 44 00  
006EE6  3  00 00 44 44          .byte 0,0,68,68,68,60,4,56
006EEA  3  44 3C 04 38  
006EEE  3  00 00 7C 08          .byte 0,0,124,8,16,32,124,0
006EF2  3  10 20 7C 00  
006EF6  3  00 0E 08 30          .byte 0,14,8,48,8,8,14,0
006EFA  3  08 08 0E 00  
006EFE  3  00 08 08 08          .byte 0,8,8,8,8,8,8,0
006F02  3  08 08 08 00  
006F06  3  00 70 10 0C          .byte 0,112,16,12,16,16,112,0
006F0A  3  10 10 70 00  
006F0E  3  00 14 28 00          .byte 0,20,40,0,0,0,0,0
006F12  3  00 00 00 00  
006F16  3  3C 42 99 A1          .byte 60,66,153,161,161,153,66,60
006F1A  3  A1 99 42 3C  
006F1E  3               
006F1E  1               eind_asm:
006F1E  2               ;------------------------------------------------------
006F1E  2               ; z80.asm
006F1E  2               ; spectrum stuff
006F1E  2               ; adresses
006F1E  2               
006F1E  2               ;ws	 = $60
006F1E  2               
006F1E  2               ;z80_f	 = ws+$00
006F1E  2               ;z80_a	 = ws+$01
006F1E  2               ;z80_af	 = z80_f
006F1E  2               
006F1E  2               ;z80_c	 = ws+$02
006F1E  2               ;z80_b	 = ws+$03
006F1E  2               ;z80_bc	 = z80_c
006F1E  2               
006F1E  2               ;z80_e	 = ws+$04
006F1E  2               ;z80_d	 = ws+$05
006F1E  2               ;z80_de	 = z80_e
006F1E  2               
006F1E  2               ;z80_l	 = ws+$06
006F1E  2               ;z80_h	 = ws+$07
006F1E  2               ;z80_hl	 = z80_l
006F1E  2               
006F1E  2               ;z80_x    = ws+$08
006F1E  2               ;z80_i    = ws+$09
006F1E  2               ;z80_ix	 = z80_x
006F1E  2               
006F1E  2               ;z80_iy	 = ws+$0a
006F1E  2               
006F1E  2               ;z80_fp	 = ws+$0c
006F1E  2               ;z80_ap	 = ws+$0d
006F1E  2               
006F1E  2               ;z80_cp	 = ws+$0e
006F1E  2               ;z80_bp	 = ws+$0f
006F1E  2               ;z80_bcp = z80_cp
006F1E  2               
006F1E  2               ;z80_ep	 = ws+$10
006F1E  2               ;z80_dp	 = ws+$11
006F1E  2               ;z80_dep = z80_ep
006F1E  2               
006F1E  2               ;z80_lp	 = ws+$12
006F1E  2               ;z80_hp	 = ws+$13
006F1E  2               ;z80_hlp = z80_lp
006F1E  2               
006F1E  2               ;z80_sp   = ws+$14
006F1E  2               
006F1E  2               ;z80_reg0 = ws+$16
006F1E  2               ;z80_reg1 = ws+$17
006F1E  2               ;z80_reg2 = ws+$18
006F1E  2               ;z80_reg3 = ws+$19
006F1E  2               
006F1E  2               ;z80_r	 = ws+$1a
006F1E  2               
006F1E  2               ; Contains seperatly 1 bit set
006F1E  2               
006F1E  2               _bitmem0	= $f8
006F1E  2               _bitmem1	= $f9
006F1E  2               _bitmem2	= $fa
006F1E  2               _bitmem3	= $fb
006F1E  2               _bitmem4	= $fc
006F1E  2               _bitmem5	= $fd
006F1E  2               _bitmem6	= $fe
006F1E  2               _bitmem7	= $ff
006F1E  2               	
006F1E  2               ; constants	
006F1E  2               _bitvalue0	= $01	
006F1E  2               _bitvalue1	= $02	
006F1E  2               _bitvalue2	= $04	
006F1E  2               _bitvalue3	= $08	
006F1E  2               _bitvalue4	= $10	
006F1E  2               _bitvalue5	= $20	
006F1E  2               _bitvalue6	= $40	
006F1E  2               _bitvalue7	= $80	
006F1E  2               
006F1E  2               _notbitvalue0	= $fe	
006F1E  2               _notbitvalue1	= $fd	
006F1E  2               _notbitvalue2	= $fb	
006F1E  2               _notbitvalue3	= $f7	
006F1E  2               _notbitvalue4	= $ef	
006F1E  2               _notbitvalue5	= $df	
006F1E  2               _notbitvalue6	= $bf	
006F1E  2               _notbitvalue7	= $7f	
006F1E  2               
006F1E  2               
006F1E  2               ;add_hl_bc:
006F1E  2               ;		lda z80_l
006F1E  2               ;		clc
006F1E  2               ;		adc z80_c
006F1E  2               ;		sta z80_l
006F1E  2               ;		lda z80_h
006F1E  2               ;		adc z80_b
006F1E  2               ;		sta z80_h
006F1E  2               ;		rts
006F1E  2               ;		
006F1E  2               ;add_ix_de:
006F1E  2               ;		lda z80_ix
006F1E  2               ;		clc
006F1E  2               ;		adc z80_e
006F1E  2               ;		sta z80_ix
006F1E  2               ;		lda z80_ix+1
006F1E  2               ;		adc z80_d
006F1E  2               ;		sta z80_ix+1
006F1E  2               ;		rts
006F1E  2               ;		
006F1E  2               ;add_iy_de:
006F1E  2               ;		lda z80_iy
006F1E  2               ;		clc
006F1E  2               ;		adc z80_e
006F1E  2               ;		sta z80_iy
006F1E  2               ;		lda z80_iy+1
006F1E  2               ;		adc z80_d
006F1E  2               ;		sta z80_iy+1
006F1E  2               ;		rts
006F1E  2               ;		
006F1E  2               ;add_hl_de:
006F1E  2               ;		lda z80_l
006F1E  2               ;		clc
006F1E  2               ;		adc z80_e
006F1E  2               ;		sta z80_l
006F1E  2               ;		lda z80_h
006F1E  2               ;		adc z80_d
006F1E  2               ;		sta z80_h
006F1E  2               ;		rts
006F1E  2               ;
006F1E  2               ;add_ix_bc:
006F1E  2               ;		lda z80_ix
006F1E  2               ;		clc
006F1E  2               ;		adc z80_c
006F1E  2               ;		sta z80_ix
006F1E  2               ;		lda z80_ix+1
006F1E  2               ;		adc z80_b
006F1E  2               ;		sta z80_ix+1
006F1E  2               ;		rts
006F1E  2               ;		
006F1E  2               ;add_iy_bc:
006F1E  2               ;		lda z80_iy
006F1E  2               ;		clc
006F1E  2               ;		adc z80_c
006F1E  2               ;		sta z80_iy
006F1E  2               ;		lda z80_iy+1
006F1E  2               ;		adc z80_b
006F1E  2               ;		sta z80_iy+1
006F1E  2               ;		rts
006F1E  2               ;		
006F1E  2               sbc_hl_de:
006F1E  2  A5 66        		lda z80_l
006F20  2  E5 64        		sbc z80_e
006F22  2  85 66        		sta z80_l
006F24  2  A5 67        		lda z80_h
006F26  2  E5 65        		sbc z80_d
006F28  2  85 67        		sta z80_h
006F2A  2  60           		rts
006F2B  2               
006F2B  2               ;sbc_hl_bc:
006F2B  2               ;		lda z80_l
006F2B  2               ;		sbc z80_c
006F2B  2               ;		sta z80_l
006F2B  2               ;		lda z80_h
006F2B  2               ;		sbc z80_b
006F2B  2               ;		sta z80_h
006F2B  2               ;		rts
006F2B  2               ;
006F2B  2               ;cmp_hl_bc:
006F2B  2               ;		lda z80_l
006F2B  2               ;		cmp z80_c
006F2B  2               ;		bne cmp_hl_bc_end
006F2B  2               ;		lda z80_h
006F2B  2               ;		cmp z80_b
006F2B  2               ;cmp_hl_bc_end:
006F2B  2               ;		rts
006F2B  2               ;		
006F2B  2               ;cmp_iy_ix:
006F2B  2               ;		lda z80_iy
006F2B  2               ;		cmp z80_ix
006F2B  2               ;		bne cmp_iy_ix_end
006F2B  2               ;		lda z80_iy+1
006F2B  2               ;		cmp z80_ix+1
006F2B  2               ;cmp_iy_ix_end:
006F2B  2               ;		rts
006F2B  2               ;		
006F2B  2               ;dec_hl:
006F2B  2               ;		lda z80_l
006F2B  2               ;		bne dec_hl_no_dec_h
006F2B  2               ;		dec z80_h
006F2B  2               ;dec_hl_no_dec_h:
006F2B  2               ;		dec z80_l
006F2B  2               ;		rts
006F2B  2               ;	
006F2B  2               ;dec_ix:
006F2B  2               ;		lda z80_ix
006F2B  2               ;		bne dec_ix_no_dec_h
006F2B  2               ;		dec z80_ix+1
006F2B  2               ;dec_ix_no_dec_h:
006F2B  2               ;		dec z80_ix
006F2B  2               ;		rts
006F2B  2               ;		
006F2B  2               ;dec_bc:	
006F2B  2               ;		lda z80_c
006F2B  2               ;		bne dec_bc_no_dec_b
006F2B  2               ;		dec z80_b
006F2B  2               ;dec_bc_no_dec_b:
006F2B  2               ;		dec z80_c
006F2B  2               ;		rts
006F2B  2               ;	
006F2B  2               ;dec_de:
006F2B  2               ;		lda z80_e
006F2B  2               ;		bne dec_de_no_dec_d
006F2B  2               ;		dec z80_d
006F2B  2               ;dec_de_no_dec_d:
006F2B  2               ;		dec z80_e
006F2B  2               ;		rts
006F2B  2               ;		
006F2B  2               ;ex_af_afs:
006F2B  2               ;	rts
006F2B  2               ;ex_de_hl:
006F2B  2               ;		lda z80_e
006F2B  2               ;		ldx z80_l
006F2B  2               ;		stx z80_e
006F2B  2               ;		sta z80_l
006F2B  2               ;		lda z80_d
006F2B  2               ;		ldx z80_h
006F2B  2               ;		stx z80_d
006F2B  2               ;		sta z80_h
006F2B  2               ;		rts
006F2B  2               ;
006F2B  2               exx:
006F2B  2  A5 62        		lda z80_c
006F2D  2  A4 6E        		ldy z80_cp
006F2F  2  84 62        		sty z80_c
006F31  2  85 6E        		sta z80_cp
006F33  2  A5 63        		lda z80_b
006F35  2  A4 6F        		ldy z80_bp
006F37  2  84 63        		sty z80_b
006F39  2  85 6F        		sta z80_bp
006F3B  2  A5 64        		lda z80_e
006F3D  2  A4 70        		ldy z80_ep
006F3F  2  84 64        		sty z80_e
006F41  2  85 70        		sta z80_ep
006F43  2  A5 65        		lda z80_d
006F45  2  A4 71        		ldy z80_dp
006F47  2  84 65        		sty z80_d
006F49  2  85 71        		sta z80_dp		
006F4B  2  A5 80        		lda scraddr
006F4D  2  A4 72        		ldy z80_lp
006F4F  2  84 80        		sty scraddr
006F51  2  85 72        		sta z80_lp
006F53  2  A5 81        		lda scraddr+1
006F55  2  A4 73        		ldy z80_hp
006F57  2  84 81        		sty scraddr+1
006F59  2  85 73        		sta z80_hp
006F5B  2  60           		rts
006F5C  2               		
006F5C  2               ;ex_sp_hl:
006F5C  2               ;		tsx
006F5C  2               ;		lda $0103,x
006F5C  2               ;		ldy z80_h
006F5C  2               ;		sta z80_h
006F5C  2               ;		tya
006F5C  2               ;		sta $0103,x
006F5C  2               ;		lda $0104,x
006F5C  2               ;		ldy z80_l
006F5C  2               ;		sta z80_l
006F5C  2               ;		tya
006F5C  2               ;		sta $104,x
006F5C  2               ;		rts
006F5C  2               ;		
006F5C  2               ;ldi:
006F5C  2               ;	rts
006F5C  2               ;ldir:
006F5C  2               ;		ldy #$00
006F5C  2               ;		ldx z80_b
006F5C  2               ;		beq ldir_last_page
006F5C  2               ;ldir_loop:		
006F5C  2               ;		lda (z80_hl),y
006F5C  2               ;		sta (z80_de),y
006F5C  2               ;		iny
006F5C  2               ;		bne ldir_loop
006F5C  2               ;		inc z80_h
006F5C  2               ;		inc z80_d
006F5C  2               ;		dex
006F5C  2               ;		bne ldir_loop
006F5C  2               ;ldir_last_page:
006F5C  2               ;		lda z80_c
006F5C  2               ;		beq ldir_end
006F5C  2               ;ldir_last_page_loop:		
006F5C  2               ;		lda (z80_hl),y
006F5C  2               ;		sta (z80_de),y
006F5C  2               ;		iny
006F5C  2               ;		cpy z80_c
006F5C  2               ;		bne ldir_last_page_loop
006F5C  2               ;ldir_end:		
006F5C  2               ;		stx z80_c
006F5C  2               ;		stx z80_b
006F5C  2               ;		tya
006F5C  2               ;		clc
006F5C  2               ;		adc z80_l
006F5C  2               ;		sta z80_l
006F5C  2               ;		bcc *+4
006F5C  2               ;		inc z80_h
006F5C  2               ;		tya
006F5C  2               ;		clc
006F5C  2               ;		adc z80_e
006F5C  2               ;		sta z80_e
006F5C  2               ;		bcc *+4
006F5C  2               ;		inc z80_d
006F5C  2               ;		rts
006F5C  2               ;		
006F5C  2               ;lddr:		ldy #$00
006F5C  2               ;lddr_loop:
006F5C  2               ;		lda (z80_hl),y
006F5C  2               ;		sta (z80_de),y
006F5C  2               ;		jsr dec_hl
006F5C  2               ;		jsr dec_de
006F5C  2               ;		jsr dec_bc
006F5C  2               ;		lda z80_b
006F5C  2               ;		ora z80_c
006F5C  2               ;		bne lddr_loop
006F5C  2               ;		rts
006F5C  2               ;ei:
006F5C  2               ;		rts
006F5C  2               ;di:
006F5C  2               ;		rts
006F5C  2               		
006F5C  2               ;-------------------------------------------------------------
006F5C  2               ; Set bits in bitmem
006F5C  2               ;-------------------------------------------------------------
006F5C  2               	
006F5C  2               z80_init:
006F5C  2  A2 00        	ldx #$00
006F5E  2  A9 01        	lda #$01
006F60  2               z80_init_loop:		
006F60  2  95 F8        	sta _bitmem0,x
006F62  2  E8           	inx
006F63  2  0A           	asl a
006F64  2  D0 FA        	bne z80_init_loop
006F66  2  60           	rts
006F67  2               
006F67  2               push_af:
006F67  2               push_bc:
006F67  2               push_de:
006F67  2               push_hl:
006F67  2               
006F67  2               pop_af:
006F67  2               pop_bc:
006F67  2               pop_de:
006F67  2               pop_ix:
006F67  2               pop_hl:
006F67  2               
006F67  2               add_hl_hl:
006F67  2               
006F67  2               inc_bc:
006F67  2               inc_de:
006F67  2               inc_hl:
006F67  2               inc_ix:
006F67  2               inc_sp:
006F67  2               
006F67  2               cpir:
006F67  2               
006F67  2               ex_af_af:
006F67  2               ;	rts
006F67  2               
006F67  1               
