ca65 V2.9.2 - (C) Copyright 1998-2000 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $0220
000000r 1               	.DEFINE header   1		; Header Wouter Ras emulator
000000r 1               	.DEFINE filenaam "AGD"
000000r 1               
000000r 1               .org asm_code-22*header
00020A  1               
00020A  1               .IF header
00020A  1               ;********************************************************************
00020A  1               ; ATM Header for Atom emulator Wouter Ras
00020A  1               
00020A  1               name_start:
00020A  1  41 47 44     	.byte filenaam			; Filename
00020D  1               name_end:
00020D  1  00 00 00 00  	.repeat 16-name_end+name_start	; Fill with 0 till 16 chars
000211  1  00 00 00 00  
000215  1  00 00 00 00  
00021A  1               	  .byte $0
00021A  1               	.endrep
00021A  1               
00021A  1  20 02        	.word asm_code			; 2 bytes startaddress
00021C  1  20 02        	.word exec			; 2 bytes linkaddress
00021E  1  EB 1E        	.word eind_asm-start_asm	; 2 bytes filelength
000220  1               
000220  1               ;********************************************************************
000220  1               .ENDIF
000220  1               
000220  1               exec:
000220  1               start_asm:
000220  1               	.include "z80-zp.inc"
000220  1               	.include "game.inc"
000220  2               .segment "ZEROPAGE"
000220  2               
000220  2               ws	 = $60
000220  2               
000220  2               z80_f	 = ws+$00
000220  2               z80_a	 = ws+$01
000220  2               z80_af	 = z80_f
000220  2               
000220  2               z80_c	 = ws+$02
000220  2               z80_b	 = ws+$03
000220  2               z80_bc	 = z80_c
000220  2               
000220  2               z80_e	 = ws+$04
000220  2               z80_d	 = ws+$05
000220  2               z80_de	 = z80_e
000220  2               
000220  2               z80_l	 = ws+$06
000220  2               z80_h	 = ws+$07
000220  2               z80_hl	 = z80_l
000220  2               
000220  2               z80_x    = ws+$08
000220  2               z80_i    = ws+$09
000220  2               z80_ix	 = z80_x
000220  2               
000220  2               z80_iy	 = ws+$0a
000220  2               
000220  2               z80_fp	 = ws+$0c
000220  2               z80_ap	 = ws+$0d
000220  2               
000220  2               z80_cp	 = ws+$0e
000220  2               z80_bp	 = ws+$0f
000220  2               z80_bcp	 = z80_cp
000220  2               
000220  2               z80_ep	 = ws+$10
000220  2               z80_dp	 = ws+$11
000220  2               z80_dep	 = z80_ep
000220  2               
000220  2               z80_lp	 = ws+$12
000220  2               z80_hp	 = ws+$13
000220  2               z80_hlp	 = z80_lp
000220  2               
000220  2               z80_sp   = ws+$14
000220  2               
000220  2               z80_reg0 = ws+$16
000220  2               z80_reg1 = ws+$17
000220  2               z80_reg2 = ws+$18
000220  2               z80_reg3 = ws+$19
000220  2               
000220  2               z80_r	 = ws+$1a
000220  2               
000220  2               
000220  1               	.include "z80.asm"
000220  2               .include "testdig.inc" 
000220  2               
000220  3               ; Game engine code --------------------------------------------------------------
000220  3               
000220  3               ; Arcade Game Designer.
000220  3               ; (C) 2008 Jonathan Cauldwell.
000220  3               ; ZX Spectrum Next Engine v0.1.
000220  3               
000220  3               ; Global definitions ------------------------------------------------------------
000220  3               
000220  3               	FONT = font		; Font address
000220  3               
000220  3               ; Block characteristics.
000220  3               
000220  3               	PLATFM = 1		; platform.
000220  3               	WALL = PLATFM + 1	; solid wall.
000220  3               	LADDER = WALL + 1	; ladder.
000220  3               	FODDER = LADDER + 1	; fodder block.
000220  3               	DEADLY = FODDER + 1	; deadly block.
000220  3               	CUSTOM = DEADLY + 1	; custom block.
000220  3               	WATER  = CUSTOM + 1	; water block.
000220  3                       COLECT = WATER + 1      ; collectable block.
000220  3                       NUMTYP = COLECT + 1     ; number of types.
000220  3               
000220  3               ; Sprites.
000220  3               
000220  3               	NUMSPR = 12		; number of sprites.
000220  3               	TABSIZ = 17		; size of each entry.
000220  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000220  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
000220  3               	var_X  = 8		; new x coordinate of sprite.
000220  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
000220  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
000220  3               
000220  3               ; Particle engine.
000220  3               
000220  3               	NUMSHR = 55		; pieces of shrapnel.
000220  3               	SHRSIZ = 6		; bytes per particle.
000220  3               
000220  3               ; Local vars
000220  3               
000220  3               	scraddr	= $80
000220  3               	fntaddr	= $82
000220  3               	tileaddr= $84
000220  3               	bufaddr	= $86
000220  3               	tmp     = $88
000220  3               
000220  3               	scr_l	= $90
000220  3               	scr_r	= $92
000220  3               	scr_txt	= $94
000220  3               	pbptr	= $96
000220  3               
000220  3               ; System constants
000220  3               
000220  3               	ScreenAddr  = $8000	; Startaddress video RAM
000220  3               	ScrSelAddr  = $b000	; Screen selection address
000220  3               	KeyRowAddr  = $b000	; PIA key matrix row
000220  3               	KeyColAddr  = $b001	; PIA key matrix column
000220  3               	SpeakerBit  = $b002	; Speaker bit
000220  3               	CmdReg      = $b400	; Command register AtoMMC
000220  3               	DatReg      = $b401	; Data register AtoMMC 
000220  3               	Timer2_Low  = $b808	; Timer 2 low byte
000220  3               	Timer2_High = $b809	; Timer 2 high byte
000220  3               
000220  3               ; System calls
000220  3               
000220  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
000220  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
000220  3               	OSRDCH   = $fe94	; get key subroutine
000220  3                       READKEY  = $fe71	; scan key matrix subroutine
000220  3               
000220  3               ; Conditional compilation flags
000220  3               ; Flags are set in commandline assembly
000220  3               
000220  3               ;	mflag = 0 		; MENU + INV
000220  3               ;	pflag = 0		; Particle engine
000220  3               ;	sflag = 0		; scrollytext
000220  3               ;	fflag = 1		; Fontflag
000220  3               .if iflag
000220  3               	TxtInvert   = $ff	; Invert byte for character printing
000220  3               	ScrFillByte = $ff	; Screen fill byte for CLS
000220  3               .else
000220  3               	TxtInvert   = $00	; Invert byte for character printing
000220  3               	ScrFillByte = $00	; Screen fill byte for CLS
000220  3               .endif
000220  3               
000220  3               	ScrMode     = $f0	; Screen mode:
000220  3               				;  $d0 = CLEAR4a colour
000220  3               				;  $f0 = CLEAR4  mono
000220  3               
000220  3               ;===============================================================
000220  3               ; Game starts here
000220  3               ;===============================================================
000220  3               
000220  3               .segment "CODE"
000220  3               
000220  3               ;--------------------------------------------------------------
000220  3               ; If a font is required...
000220  3               ;--------------------------------------------------------------
000220  3               
000220  3  A9 B6        	lda #<(FONT-256)	; address of font.
000222  3  8D 0C 19     	sta FontPtr
000225  3  A9 1C        	lda #>(FONT-256)
000227  3  8D 0D 19     	sta FontPtr+1
00022A  3               
00022A  3  20 96 03     	jsr game	 	; start the game.
00022D  3  A9 0C        	lda #12			; Clear screen + exit to Basic
00022F  3  4C F4 FF     	jmp $fff4
000232  3               	
000232  3  00           contrl:	.byte 0			; control, 0 = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000233  3  00           joyval:	.byte 0			; joystick reading.
000234  3  00           frmno:	.byte 0			; selected frame.
000235  3               
000235  3               ; Don't change the order of these four.  
000235  3               ; Menu routine relies on winlft following wintop.
000235  3               
000235  3  01           wintop:	.byte WINDOWTOP		; top of window.
000236  3  01           winlft:	.byte WINDOWLFT		; left edge.
000237  3  16           winhgt:	.byte WINDOWHGT		; window height.
000238  3  1E           winwid:	.byte WINDOWWID		; window width.
000239  3  01           numob:	.byte NUMOBJ		; number of objects in game.
00023A  3               
00023A  3               ; Variables start here.
00023A  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
00023A  3               
00023A  3  08           wntopx:	.byte (8 * WINDOWTOP)
00023B  3  08           wnlftx:	.byte (8 * WINDOWLFT)
00023C  3  A8           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00023D  3  E6           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00023E  3               
00023E  3  00           scno:	.byte 0			; present screen number.
00023F  3  03           numlif:	.byte 3			; number of lives.
000240  3               
000240  3  00           vara:	.byte 0			; general-purpose variable.
000241  3  00           varb:	.byte 0			; general-purpose variable.
000242  3  00           varc:	.byte 0			; general-purpose variable.
000243  3  00           vard:	.byte 0			; general-purpose variable.
000244  3  00           vare:	.byte 0			; general-purpose variable.
000245  3  00           varf:	.byte 0			; general-purpose variable.
000246  3  00           varg:	.byte 0			; general-purpose variable.
000247  3  00           varh:	.byte 0			; general-purpose variable.
000248  3  00           vari:	.byte 0			; general-purpose variable.
000249  3  00           varj:	.byte 0			; general-purpose variable.
00024A  3  00           vark:	.byte 0			; general-purpose variable.
00024B  3  00           varl:	.byte 0			; general-purpose variable.
00024C  3  00           varm:	.byte 0			; general-purpose variable.
00024D  3  00           varn:	.byte 0			; general-purpose variable.
00024E  3  00           varo:	.byte 0			; general-purpose variable.
00024F  3  00           varp:	.byte 0			; general-purpose variable.
000250  3  00           varq:	.byte 0			; general-purpose variable.
000251  3  00           varr:	.byte 0			; general-purpose variable.
000252  3  00           vars:	.byte 0			; general-purpose variable.
000253  3  00           vart:	.byte 0			; general-purpose variable.
000254  3  00           varu:	.byte 0			; general-purpose variable.
000255  3  00           varv:	.byte 0			; general-purpose variable.
000256  3  00           varw:	.byte 0			; general-purpose variable.
000257  3  00           varz:	.byte 0			; general-purpose variable.
000258  3               
000258  3  00           charx:	.byte 0			; cursor x position.
000259  3  00           chary:	.byte 0			; cursor y position.
00025A  3               
00025A  3  00           clock:	.byte 0			; last clock reading.
00025B  3  FF           varrnd:	.byte 255		; last random number.
00025C  3  FE           varobj:	.byte 254		; last object number.
00025D  3  FF           varopt:	.byte 255		; last option chosen from menu.
00025E  3  FF           varblk:	.byte 255		; block type.
00025F  3  00           nexlev:	.byte 0			; next level flag.
000260  3  00           restfl:	.byte 0			; restart screen flag.
000261  3  00           deadf:	.byte 0			; dead flag.
000262  3  00           gamwon:	.byte 0			; game won flag.
000263  3  00           dispx:	.byte 0			; cursor x position.
000264  3  00           dispy:	.byte 0			; cursor y position.
000265  3               
000265  3               ; Make sure pointers are arranged in the same order as the data itself.
000265  3               
000265  3  39 1C        frmptr:	.word frmlst         ; sprite frames.
000267  3               
000267  3               ; Assorted game routines which can go in contended memory.
000267  3               
000267  3               ;--------------------------------------------------------------
000267  3               ; Modify for inventory.
000267  3               ; called by the INV command
000267  3               ;
000267  3               ; Input:
000267  3               ;  X   = message nr with objects seperated with ,
000267  3               ;
000267  3               ; Output:
000267  3               ;  OPT = selected line nr of INV menu
000267  3               ;--------------------------------------------------------------
000267  3               
000267  3               .if mflag
000267  3               minve:
000267  3               	lda #<(invdis)		; routine address.
000267  3               	sta mod0+1		; set up menu routine.
000267  3               	sta mod2+1		; set up count routine.
000267  3               	lda #>(invdis)
000267  3               	sta mod0+2
000267  3               	sta mod2+2
000267  3               	lda #<(fopt)		; find option from available objects.
000267  3               	sta mod1+1		; set up routine.
000267  3               	lda #>(fopt)
000267  3               	sta mod1+1+1
000267  3               	jmp dbox		; do menu routine.
000267  3               
000267  3               ;--------------------------------------------------------------
000267  3               ; Modify for menu.
000267  3               ; called by the MENU command
000267  3               ;
000267  3               ; Input:
000267  3               ;  X   = message nr with menu items seperated with ,
000267  3               ;
000267  3               ; Output:
000267  3               ;  OPT = selected line nr of MENU menu
000267  3               ;--------------------------------------------------------------
000267  3               
000267  3               mmenu:
000267  3               	lda #<(always)		; routine address.
000267  3               	sta mod0+1		; set up routine.
000267  3               	sta mod2+1		; set up count routine.
000267  3               	lda #>(always)
000267  3               	sta mod0+2
000267  3               	sta mod2+2
000267  3               
000267  3               	lda #<(fstd)		; standard option selection.
000267  3               	sta mod1+1		; set up routine.
000267  3               	lda #>(fstd)
000267  3               	sta mod1+2
000267  3               
000267  3               ; Drop through into box routine.
000267  3               
000267  3               ;--------------------------------------------------------------
000267  3               ; Work out size of box for message or menu.
000267  3               ;--------------------------------------------------------------
000267  3               
000267  3               dbox:
000267  3               	lda #<(msgdat)		; pointer to messages.
000267  3               	sta z80_l
000267  3               	lda #>(msgdat)
000267  3               	sta z80_h
000267  3               	
000267  3               	jsr getwrd		; get message number.
000267  3               
000267  3               	lda z80_h		; store pointer to message.
000267  3               	sta TmpAddr
000267  3               	lda z80_l
000267  3               	sta TmpAddr+1
000267  3               
000267  3               	lda #1			; height.
000267  3               	sta z80_d
000267  3               	lda #0			; start at object zero.
000267  3               	sta combyt		; store number of object in combyt.
000267  3               	sta z80_e		; maximum width.
000267  3               dbox5:
000267  3               	lda #0			; this line"s width.
000267  3               	sta z80_b
000267  3               mod2:
000267  3               	jsr always		; item in player"s possession?
000267  3               	cmp #255
000267  3               	bne dbox6		; not in inventory, skip this line.
000267  3               	inc z80_d		; add to tally.
000267  3               dbox6:
000267  3               	ldy #0			; get character.
000267  3               	lda (z80_hl),y
000267  3               	sta z80_a
000267  3               	inc z80_l		; next character.
000267  3               	bne :+
000267  3               	inc z80_h
000267  3               :
000267  3               	lda z80_a		; reached end of line?
000267  3               	cmp #','
000267  3               	beq dbox3		; yes.
000267  3               	cmp #13
000267  3               	beq dbox3		; yes.
000267  3               	inc z80_b		; add to this line"s width.
000267  3               	lda z80_a
000267  3               	bmi dbox4		; end of message? yes, end count.
000267  3               	jmp dbox6		; repeat until we find the end.
000267  3               dbox3:
000267  3               	lda z80_e		; maximum line width.
000267  3               	cmp z80_b		; have we exceeded longest so far?
000267  3               	bpl dbox5		; no, carry on looking.
000267  3               	lda z80_b		; make this the widest so far.
000267  3               	sta z80_e
000267  3               	jmp dbox5		; keep looking.
000267  3               dbox4:
000267  3               	lda z80_e		; maximum line width.
000267  3               	cmp z80_b		; have we exceeded longest so far?
000267  3               	bpl dbox8		; no, carry on looking.
000267  3               	lda z80_b		; final line is the longest so far.
000267  3               	sta z80_e
000267  3               dbox8:
000267  3               	dec z80_d		; decrement items found.
000267  3               	bne :+			; total was zero.
000267  3               	jmp dbox15		
000267  3               :
000267  3               	lda z80_e		; longest line.
000267  3               	bne :+			; was it zero?
000267  3               	jmp dbox15		; total was zero.
000267  3               :
000267  3               	sta bwid		; set up size.
000267  3               	lda z80_d
000267  3               	sta blen
000267  3               
000267  3               ;--------------------------------------------------------------
000267  3               ; That's set up our box size.
000267  3               ;--------------------------------------------------------------
000267  3               
000267  3               	lda winhgt		; window height in characters.
000267  3               	sec
000267  3               	sbc z80_d		; subtract height of box.
000267  3               	lsr a			; divide by 2.
000267  3               	clc
000267  3               	adc wintop		; add top edge of window.
000267  3               	sta btop		; set up box top.
000267  3               
000267  3               	lda winwid		; window width in characters.
000267  3               	sec	
000267  3               	sbc z80_e		; subtract box width.
000267  3               	lsr a			; divide by 2.
000267  3               	clc
000267  3               	adc winlft		; add left edge of window.
000267  3               	sta blft		; box left.
000267  3               
000267  3               	lda FontPtr		; font.
000267  3               	sta grbase		; set up for text display.
000267  3               	lda FontPtr+1
000267  3               	sta grbase+1
000267  3               
000267  3               	lda TmpAddr+1		; restore message pointer.
000267  3               	sta z80_l
000267  3               	lda TmpAddr
000267  3               	sta z80_h
000267  3               
000267  3               	lda btop		; box top.
000267  3               	sta dispy		; set display coordinate.
000267  3               	lda #0			; start at object zero.
000267  3               	sta combyt		; store number of object in combyt.
000267  3               dbox2:
000267  3               	lda combyt		; get object number.
000267  3               	sta z80_a
000267  3               mod0:
000267  3               	jsr always		; check inventory for display.
000267  3               	cmp #255
000267  3               	beq :+			
000267  3               	jmp dbox13		; not in inventory, skip this line.
000267  3               :
000267  3               	lda blft		; box left.
000267  3               	sta dispx		; set left display position.
000267  3               	lda bwid		; box width.
000267  3               	sta z80_b		; store width.
000267  3               dbox0:
000267  3               	ldy #0			; get character.
000267  3               	lda (z80_hl),y
000267  3               	cmp #','		; end of line?
000267  3               	beq dbox1		; yes, next one.
000267  3               	cmp #13			; end of line?
000267  3               	beq dbox1		; yes, next one.
000267  3               
000267  3               	dec z80_b		; one less to display.
000267  3               	and #127		; remove terminator.
000267  3               
000267  3               	jsr pchr		; display on screen.
000267  3               
000267  3               	ldy #0
000267  3               	lda (z80_hl),y		; get character.
000267  3               	sta z80_a
000267  3               	inc z80_l		; next character.
000267  3               	bne :+
000267  3               	inc z80_h
000267  3               :
000267  3               	lda z80_a
000267  3               	cmp #128		; end of message?
000267  3               	bmi :+
000267  3               	jmp dbox7		; yes, job done.
000267  3               :
000267  3               	lda z80_b		; chars remaining.
000267  3               	beq :+			; are any left?
000267  3               	jmp dbox0		; yes, continue.
000267  3               :
000267  3               ;---------------------------------------------------
000267  3               ; Reached limit of characters per line.
000267  3               ;---------------------------------------------------
000267  3               
000267  3               dbox9:
000267  3               	ldy #0
000267  3               	lda (z80_hl),y		; get character.
000267  3               	inc z80_l		; next one.
000267  3               	bne :+
000267  3               	inc z80_h
000267  3               :
000267  3               	cmp #','		; another line?
000267  3               	beq dbox10		; yes, do next line.
000267  3               	cmp #13			; another line?
000267  3               	beq dbox10		; yes, do next line.
000267  3               	cmp #128		; end of message?
000267  3               	bcs :+
000267  3               	jmp dbox11		; yes, finish message.
000267  3               :
000267  3               	jmp dbox9
000267  3               
000267  3               ;---------------------------------------------------
000267  3               ; Fill box to end of line.
000267  3               ;---------------------------------------------------
000267  3               
000267  3               dboxf:
000267  3               	lda #32			; space character.
000267  3               	jsr pchr		; display character.
000267  3               	dec z80_b
000267  3               	beq :+
000267  3               	jmp dboxf		; repeat for remaining chars on line.
000267  3               :
000267  3               	rts
000267  3               dbox1:
000267  3               	inc z80_l		; skip character.
000267  3               	bne :+
000267  3               	inc z80_h
000267  3               :
000267  3               	jsr dboxf		; fill box out to right side.
000267  3               dbox10:
000267  3               	inc dispy		; y coordinate down a line next position.
000267  3               	jmp dbox2		; next line.
000267  3               dbox7:
000267  3               	lda z80_b		; chars remaining.
000267  3               	bne :+			; are any left?
000267  3               	jmp dbox11		; no, nothing to draw.
000267  3               :
000267  3               	jsr dboxf		; fill message to line.
000267  3               
000267  3               ;------------------------------------------------------
000267  3               ; Drawn the box menu, now select option.
000267  3               ;------------------------------------------------------
000267  3               
000267  3               dbox11:
000267  3               	lda btop		; box top.
000267  3               	sta dispy		; set bar position.
000267  3               dbox14:
000267  3               	jsr joykey		; get controls.
000267  3               	cmp #$7f		; anything pressed?
000267  3               	bne dbox14		; yes, debounce it.
000267  3               	jsr dbar		; draw bar.
000267  3               dbox12:
000267  3               	jsr joykey		; get controls.
000267  3               	cmp #$7f		; anything pressed?
000267  3               	beq dbox12		; no, nothing.
000267  3               	and #16			; fire button pressed?
000267  3               	bne :+
000267  3               mod1:
000267  3               	jmp fstd		; yes, job done.
000267  3               :
000267  3               	jsr dbar		; delete bar.
000267  3               
000267  3               	lda joyval		; joystick reading.
000267  3               	and #8			; going up?
000267  3               	beq dboxu		; yes, go up.
000267  3               
000267  3               	ldx dispy		; vertical position of bar.
000267  3               	inx			; look down.
000267  3               	txa
000267  3               	sec
000267  3               	sbc btop		; find distance from top.
000267  3               	cmp blen		; top of box.
000267  3               	bne :+
000267  3               	jmp dbox14		; yes, go no further.
000267  3               :
000267  3               	inc dispy		; move bar.
000267  3               	jmp dbox14		; continue.
000267  3               dboxu:
000267  3               	lda dispy		; vertical position of bar.
000267  3               	cmp btop		; are we at the top?
000267  3               	bne :+
000267  3               	jmp dbox14		; yes, go no further.
000267  3               :
000267  3               	dec dispy		; move bar.
000267  3               	jmp dbox14		; continue.
000267  3               fstd:
000267  3               	lda dispy		; bar position.
000267  3               	sec
000267  3               	sbc btop		; find selected option.
000267  3               	sta varopt		; store the option.
000267  3               	jmp redraw		; redraw the screen.
000267  3               
000267  3               ;------------------------------------------------------
000267  3               ; Option not available.  Skip this line.
000267  3               ;------------------------------------------------------
000267  3               
000267  3               dbox13:
000267  3               	ldy #0
000267  3               	lda (z80_hl),y		; get character.
000267  3               	inc z80_l		; next one.
000267  3               	bne :+
000267  3               	inc z80_h
000267  3               :
000267  3               	cmp #','		; another line?
000267  3               	bne :+
000267  3               	jmp dbox2		; yes, do next line.
000267  3               :
000267  3               	cmp #13			; another line?
000267  3               	bne :+
000267  3               	jmp dbox2		; yes, do next line.
000267  3               :
000267  3               
000267  3               	bpl :+			; end of message?
000267  3               	jmp dbox11		; yes, finish message.
000267  3               :
000267  3               	jmp dbox13
000267  3               dbox15:
000267  3               	lda TmpAddr		; pop message pointer from the stack.
000267  3               	sta z80_h
000267  3               	lda TmpAddr+1
000267  3               	sta z80_l
000267  3               	rts
000267  3               
000267  3               ;------------------------------------------------------
000267  3               ; Invert bar
000267  3               ;------------------------------------------------------
000267  3               
000267  3               dbar:
000267  3               	lda blft		; box left.
000267  3               	sta dispx		; set display coordinate.
000267  3               	jsr gprad		; get printing address.
000267  3               
000267  3               	lda bwid		; box width.
000267  3               	sta z80_c		; loop counter in c.
000267  3               	lda z80_h		
000267  3               	sta z80_d		; store screen address high byte.
000267  3               dbar1:
000267  3               	ldx #7			; pixel height in b.
000267  3               dbar0:
000267  3               	ldy scrtab,x
000267  3               	lda (scraddr),y		; get screen byte.
000267  3               	eor #255		; reverse all bits.
000267  3               	sta (scraddr),y		; write back to screen.
000267  3               	dex			; next line down.
000267  3               	bpl dbar0		; draw rest of character.
000267  3               
000267  3               	inc scraddr		; one char right.
000267  3               	dec z80_c		; decrement character counter.
000267  3               	beq :+
000267  3               	jmp dbar1		; repeat for whole line.
000267  3               :
000267  3               	rts
000267  3               
000267  3               ;------------------------------------------------------
000267  3               ; Point to object
000267  3               ;
000267  3               ; Input:
000267  3               ;  -
000267  3               ;
000267  3               ; Output:
000267  3               ;  A = object number, A=255 if already in possession
000267  3               ;------------------------------------------------------
000267  3               
000267  3               invdis:
000267  3               	lda z80_l		; store message text pointer.
000267  3               	pha
000267  3               	lda z80_h
000267  3               	pha
000267  3               	lda combyt		; object number.
000267  3               	inc combyt		; ready for next one.
000267  3               	jsr gotob		; check if we have object.
000267  3               	tay
000267  3               	pla
000267  3               	sta z80_h
000267  3               	pla
000267  3               	sta z80_l
000267  3               	tya
000267  3               	rts
000267  3               
000267  3               ;------------------------------------------------------
000267  3               ; Find option selected.
000267  3               ;
000267  3               ; Input:
000267  3               ;  -
000267  3               ;
000267  3               ; Output:
000267  3               ;  OPT = selected object
000267  3               ;------------------------------------------------------
000267  3               
000267  3               fopt:
000267  3               	lda dispy
000267  3               	sec
000267  3               	sbc btop		; find selected option.
000267  3               	sta tmp+2		; option selected in b register.
000267  3               	inc tmp+2
000267  3               
000267  3               	lda #0			; set to first item.
000267  3               	sta combyt		; object number.
000267  3               fopt0:
000267  3               	jsr fobj		; find next object in inventory.
000267  3               	dec tmp+2
000267  3               	bne fopt0		; repeat for relevant steps down the list.
000267  3               
000267  3               	lda combyt		; get option.
000267  3               	sta varopt		; store the option.
000267  3               	dec varopt		; one less, due to where we increment combyt.
000267  3               	jmp redraw		; redraw the screen.
000267  3               fobj:
000267  3               	ldy combyt		; object number.
000267  3               	inc combyt		; ready for next item.
000267  3               	tya
000267  3               	jsr gotob		; do we have this item?
000267  3               	cmp #255
000267  3               	bne :+
000267  3               	rts
000267  3               :
000267  3               	jmp fobj		; yes, it's on the list.
000267  3               
000267  3               bwid:	.byte 0              ; box/menu width.
000267  3               blen:	.byte 0              ; box/menu height.
000267  3               btop:	.byte 0              ; box coordinates.
000267  3               blft:	.byte 0
000267  3               .endif
000267  3               
000267  3               ;----------------------------------------------------
000267  3               ; Wait for keypress.
000267  3               ;----------------------------------------------------
000267  3               
000267  3               prskey:
000267  3  98           	tya
000268  3  48           	pha
000269  3               prsloop:
000269  3  20 CC 02     	jsr vsync
00026C  3  20 71 FE     	jsr READKEY
00026F  3  C0 FF        	cpy #255
000271  3  F0 F6        	beq prsloop		; wait until key pressed
000273  3  68           	pla
000274  3  A8           	tay
000275  3  60           	rts
000276  3               
000276  3               ;----------------------------------------------------
000276  3               ; Delay routine 1/50 sec
000276  3               ;
000276  3               ; Wait 1/60 sec = 16666 usec
000276  3               ; Wait 208 x 16 =  3328 usec
000276  3               ;                 19994 usec
000276  3               ; rts           =     6 usec
000276  3               ; Total         = 20000 usec
000276  3               ;----------------------------------------------------
000276  3               
000276  3               delay:
000276  3  8D 52 0A     	sta xtmp
000279  3               del_loop:
000279  3  20 66 FE     	jsr SCRSYNC		; wait for flyback
00027C  3               
00027C  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
00027E  3               delay1:
00027E  3  61 80        	adc ($80,x)		;	 6 usec
000280  3  61 80        	adc ($80,x)		;	 6 usec
000282  3  88           	dey			;	 2 usec
000283  3  D0 F9        	bne delay1		;	 2 usec
000285  3  EA           	nop			; 2 usec
000286  3  EA           	nop			; 2 usec
000287  3               				; tot: 20000 usec
000287  3  CE 52 0A     	dec xtmp
00028A  3  D0 ED        	bne del_loop
00028C  3  60           	rts
00028D  3               
00028D  3               ;----------------------------------------------------
00028D  3               ; Clear sprite table.
00028D  3               ;
00028D  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
00028D  3               ;----------------------------------------------------
00028D  3               
00028D  3               xspr:
00028D  3  A9 FF        	lda #255		; clear byte.
00028F  3  A2 00        	ldx #0			; length of table.
000291  3               xspr0:
000291  3  9D 2D 18     	sta sprtab,x		; sprite table.
000294  3  E8           	inx			; move to next byte.
000295  3  E0 CC        	cpx #SPRBUF
000297  3  D0 F8        	bne xspr0		; repeat for rest of table.
000299  3  60           	rts
00029A  3               
00029A  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00029A  3               ; Sound, NOT IMPLEMENTED!!!
00029A  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00029A  3               ;
00029A  3               ;silenc:
00029A  3               ;	jsr silen1 		; silence channel 1.
00029A  3               ;	jsr silen2 		; silence channel 2.
00029A  3               ;	jsr silen3 		; silence channel 3.
00029A  3               ;	jmp plsnd 		; play all channels to switch them off.
00029A  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00029A  3               
00029A  3               ;-------------------------------------------------------------
00029A  3               ; Initialise all objects.
00029A  3               ;
00029A  3               ; Reset current room,y,x to start room,y,x for all objects
00029A  3               ;-------------------------------------------------------------
00029A  3               
00029A  3               iniob:
00029A  3  A9 90        	lda #<objdta 		; objects table.
00029C  3  85 68        	sta z80_x
00029E  3  A9 1D        	lda #>objdta
0002A0  3  85 69        	sta z80_i
0002A2  3               
0002A2  3  AE 39 02     	ldx numob 		; number of objects in the game.
0002A5  3               iniob0:
0002A5  3  A0 23        	ldy #35
0002A7  3  B1 68        	lda (z80_ix),y 		; start screen.
0002A9  3  A0 20        	ldy #32
0002AB  3  91 68        	sta (z80_ix),y 		; set start screen.
0002AD  3               
0002AD  3  A0 24        	ldy #36
0002AF  3  B1 68        	lda (z80_ix),y 		; find start y.
0002B1  3  A0 21        	ldy #33
0002B3  3  91 68        	sta (z80_ix),y 		; set start y.
0002B5  3               
0002B5  3  A0 25        	ldy #37
0002B7  3  B1 68        	lda (z80_ix),y 		; get initial x.
0002B9  3  A0 22        	ldy #34
0002BB  3  91 68        	sta (z80_ix),y 		; set x coord.
0002BD  3               
0002BD  3  18           	clc 			; point to next object.
0002BE  3  A5 68        	lda z80_x
0002C0  3  69 26        	adc #38			; distance between objects.
0002C2  3  85 68        	sta z80_x
0002C4  3  90 02        	bcc :+
0002C6  3  E6 69        	inc z80_i
0002C8  3               :
0002C8  3  CA           	dex 			; repeat.
0002C9  3  D0 DA        	bne iniob0
0002CB  3               
0002CB  3  60           	rts
0002CC  3               
0002CC  3               ;-------------------------------------------------------------
0002CC  3               ; Screen synchronisation.
0002CC  3               ;
0002CC  3               ;  - read joystick/keyboard
0002CC  3               ;  - handle sound
0002CC  3               ;  - sync framerate with clock
0002CC  3               ;  - handle shrapnel every even frame
0002CC  3               ;-------------------------------------------------------------
0002CC  3               
0002CC  3               vsync:
0002CC  3  48           	pha
0002CD  3  98           	tya
0002CE  3  48           	pha
0002CF  3  8A           	txa
0002D0  3  48           	pha
0002D1  3  20 16 0E     	jsr joykey		; read joystick/keyboard.
0002D4  3               vsync1:
0002D4  3  AD 09 B8     	lda Timer2_High		; sync framerate with clock
0002D7  3  D0 FB        	bne vsync1
0002D9  3  A9 C3        	lda #>50000
0002DB  3  8D 09 B8     	sta Timer2_High
0002DE  3  A9 50        	lda #<50000
0002E0  3  8D 08 B8     	sta Timer2_Low
0002E3  3               
0002E3  3  AD 5A 02     	lda clock
0002E6  3  29 01        	and #1
0002E8  3  D0 03        	bne:+
0002EA  3  20 95 03     	jsr proshr		; handle shrapnel every even frame
0002ED  3               :
0002ED  3  AD 0B 03     	lda sndtyp
0002F0  3  F0 13        	beq sndskip
0002F2  3               sndloop:
0002F2  3  AD 02 B0     	lda SpeakerBit		; handle sound
0002F5  3  AC 0B 03     	ldy sndtyp
0002F8  3               sndwait:
0002F8  3  88           	dey
0002F9  3  D0 FD        	bne sndwait
0002FB  3  49 04        	eor #4
0002FD  3  8D 02 B0     	sta SpeakerBit
000300  3  CE 0B 03     	dec sndtyp
000303  3  D0 ED        	bne sndloop
000305  3               sndskip: 
000305  3  68           	pla
000306  3  AA           	tax
000307  3  68           	pla
000308  3  A8           	tay
000309  3  68           	pla
00030A  3  60           	rts
00030B  3               
00030B  3  00           sndtyp:	.byte 0
00030C  3               
00030C  3               ;-----------------------------------------------
00030C  3               ; Redraw the screen.
00030C  3               ;
00030C  3               ; Remove old copy of all sprites for redraw.
00030C  3               ;-----------------------------------------------
00030C  3               
00030C  3               redraw:
00030C  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
00030E  3  48           	pha
00030F  3  A5 68        	lda z80_x
000311  3  48           	pha
000312  3               
000312  3  20 89 0A     	jsr droom		; show screen layout.
000315  3  20 A5 05     	jsr shwob		; draw objects.
000318  3               numsp0:
000318  3  A9 0C        	lda #NUMSPR		; sprites to draw.
00031A  3  85 88        	sta tmp
00031C  3               
00031C  3  A9 2D        	lda #<sprtab		; sprite table.
00031E  3  85 68        	sta z80_x
000320  3  A9 18        	lda #>sprtab
000322  3  85 69        	sta z80_i
000324  3               redrw0:
000324  3  A0 00        	ldy #0
000326  3  B1 68        	lda (z80_ix),y		; old sprite type.
000328  3  C9 FF        	cmp #255		; is it enabled?
00032A  3  F0 0B        	beq redrw1 		; no, find next one.
00032C  3               
00032C  3  A0 03        	ldy #3
00032E  3  B1 68        	lda (z80_ix),y 		; sprite y.
000330  3  C9 B1        	cmp #177		; beyond maximum?
000332  3  B0 03        	bcs redrw1		; yes, nothing to draw.
000334  3               
000334  3  20 72 12     	jsr sspria		; show single sprite.
000337  3               redrw1:
000337  3  18           	clc			; next sprite.
000338  3  A5 68        	lda z80_x
00033A  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00033C  3  85 68        	sta z80_x
00033E  3  90 02        	bcc :+
000340  3  E6 69        	inc z80_i
000342  3               :
000342  3  C6 88        	dec tmp			; repeat for remaining sprites.
000344  3  D0 DE        	bne redrw0
000346  3               rpblc1:
000346  3               ;	jsr dshrp		; redraw shrapnel.
000346  3               
000346  3  68           	pla			; retrieve sprite pointer.
000347  3  85 68        	sta z80_x
000349  3  68           	pla
00034A  3  85 69        	sta z80_i
00034C  3               
00034C  3  60           	rts
00034D  3               
00034D  3               ;----------------------------------------------------------------------
00034D  3               ; Clear screen routine.
00034D  3               ;
00034D  3               ; Fill screenmem $8000-$97ff with ScrFillByte
00034D  3               ;----------------------------------------------------------------------
00034D  3               
00034D  3               cls:
00034D  3  A9 80        	lda #>ScreenAddr		; screen address.
00034F  3  8D 58 03     	sta clsloop+2
000352  3  A9 00        	lda #ScrFillByte
000354  3  A0 00        	ldy #0
000356  3               clsloop:
000356  3  99 00 80     	sta ScreenAddr,y
000359  3  C8           	iny
00035A  3  D0 FA        	bne clsloop
00035C  3  EE 58 03     	inc clsloop+2
00035F  3  AE 58 03     	ldx clsloop+2
000362  3  E0 98        	cpx #>(ScreenAddr+$1800)
000364  3  D0 F0        	bne clsloop
000366  3  60           	rts
000367  3               
000367  3               ;----------------------------------------------------------------------
000367  3               ; Atomic palette is static 
000367  3               ;----------------------------------------------------------------------
000367  3               
000367  3               setpal:
000367  3  60           	rts
000368  3               
000368  3               ;----------------------------------------------------------------------
000368  3               ; FODDER check
000368  3               ;----------------------------------------------------------------------
000368  3               
000368  3               fdchk:
000368  3  C9 04        	cmp #FODDER 		; is it fodder?
00036A  3  F0 01        	beq :+
00036C  3  60           	rts 			; no.
00036D  3               :
00036D  3  A9 00        	lda #0			; wipe fodder in MAP
00036F  3  A0 00        	ldy #0
000371  3  91 86        	sta (bufaddr),y 	; rewrite block type.
000373  3               
000373  3  AD 63 02     	lda dispx		; x=x/8
000376  3  48           	pha
000377  3  4A           	lsr a
000378  3  4A           	lsr a
000379  3  4A           	lsr a
00037A  3  8D 63 02     	sta dispx
00037D  3               
00037D  3  AD 64 02     	lda dispy		; y=y/8
000380  3  48           	pha
000381  3  4A           	lsr a
000382  3  4A           	lsr a
000383  3  4A           	lsr a
000384  3  8D 64 02     	sta dispy
000387  3               
000387  3  A9 00        	lda #0 			; block to write.
000389  3  20 56 09     	jsr pattr 		; write block.
00038C  3               
00038C  3  68           	pla
00038D  3  8D 64 02     	sta dispy
000390  3  68           	pla
000391  3  8D 63 02     	sta dispx
000394  3  60           	rts
000395  3               
000395  3               ;----------------------------------------------------
000395  3               ; Scrolly text and puzzle variables.
000395  3               ;----------------------------------------------------
000395  3               
000395  3               .if sflag
000395  3               txtbit:	.byte 128		; bit to write.
000395  3               txtwid:	.byte 16		; width of ticker message.
000395  3               txtpos:	.word msgdat
000395  3               txtini:	.word msgdat
000395  3               txtscr:	.word ScreenAddr
000395  3               .endif
000395  3               
000395  3               ;----------------------------------------------------
000395  3               ; Specialist routines.
000395  3               ; Process shrapnel.
000395  3               ;----------------------------------------------------
000395  3               proshr:
000395  3               .if pflag
000395  3               	lda #<SHRAPN		; table.
000395  3               	sta z80_x
000395  3               	lda #>SHRAPN
000395  3               	sta z80_i
000395  3               
000395  3               	lda #NUMSHR		; shrapnel pieces to process.
000395  3               	sta shrctr
000395  3               prosh0:
000395  3               	ldy #0
000395  3               	lda (z80_ix),y		; on/off marker.
000395  3               	asl a
000395  3               proshx:
000395  3               	bcs :+
000395  3               	jsr prosh1 		; on, so process it.
000395  3               :
000395  3               	clc
000395  3               	lda z80_x
000395  3               	adc #SHRSIZ
000395  3               	sta z80_x
000395  3               	bcc :+
000395  3               	inc z80_i
000395  3               :
000395  3               	dec shrctr		; round again.
000395  3               	bne prosh0
000395  3               .endif
000395  3               .if sflag
000395  3               	jsr scrly
000395  3               .endif
000395  3  60           	rts
000396  3               
000396  3               .if pflag
000396  3               shrctr:	.byte 0
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Proces shrapnel piece
000396  3               ;----------------------------------------------------
000396  3               
000396  3               prosh1:
000396  3               	jsr plot 		; delete the pixel.
000396  3               
000396  3               	lda #<shrptr		; shrapnel routine pointers.
000396  3               	sta z80_l
000396  3               	lda #>shrptr
000396  3               	sta z80_h
000396  3               
000396  3               	ldy #0
000396  3               	lda (z80_ix),y		; restore shrapnel type.
000396  3               	jsr prosh2 		; run the routine.
000396  3               	jsr chkxy		; check x and y are good before we redisplay.
000396  3               
000396  3               	lda #<SHRSIZ 		; distance to next.
000396  3               	sta z80_e
000396  3               	lda #>SHRSIZ
000396  3               	sta z80_d
000396  3               	rts
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Run the routine
000396  3               ;----------------------------------------------------
000396  3               
000396  3               prosh2:
000396  3               	asl a 			; 2 bytes per address.
000396  3               	tay
000396  3               	lda shrptr,y
000396  3               	sta z80_l
000396  3               	lda shrptr+1,y 		; fetch high byte from table.
000396  3               	sta z80_h
000396  3               	jmp (z80_hl) 		; jump to routine.
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Paricle routine table
000396  3               ;----------------------------------------------------
000396  3               
000396  3               shrptr:	.word laser		; laser.
000396  3               	.word trail		; vapour trail.
000396  3               	.word shrap		; shrapnel from explosion.
000396  3               	.word dotl		; horizontal starfield left.
000396  3               	.word dotr		; horizontal starfield right.
000396  3               	.word dotu		; vertical starfield up.
000396  3               	.word dotd		; vertical starfield down.
000396  3               	.word ptcusr		; user particle.
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Explosion shrapnel.
000396  3               ;----------------------------------------------------
000396  3               
000396  3               shrap:
000396  3               	ldy #1
000396  3               	lda (z80_ix),y 		; get the angle.
000396  3               	clc
000396  3               	adc #<shrsin		; shrapnel sine table.
000396  3               	sta z80_l
000396  3               	lda #>shrsin
000396  3               	adc #0
000396  3               	sta z80_h
000396  3               
000396  3               	ldy #0
000396  3               	lda (z80_hl),y 		; fetch value from table.
000396  3               	sta z80_e
000396  3               	inc z80_l 		; next byte of table.
000396  3               	bne :+
000396  3               	inc z80_h
000396  3               :
000396  3               	ldy #0
000396  3               	lda (z80_hl),y		; fetch value from table.
000396  3               	sta z80_d
000396  3               	inc z80_l		; next byte of table.
000396  3               	bne :+
000396  3               	inc z80_h
000396  3               :
000396  3               	ldy #0
000396  3               	lda (z80_hl),y 		; fetch value from table.
000396  3               	sta z80_c
000396  3               	inc z80_l 		; next byte of table.
000396  3               	bne :+
000396  3               	inc z80_h
000396  3               :
000396  3               	ldy #0
000396  3               	lda (z80_hl),y 		; fetch value from table.
000396  3               	sta z80_b
000396  3               
000396  3               	ldy #2
000396  3               	lda (z80_ix),y 		; x coordinate in hl.
000396  3               	clc
000396  3               	adc z80_e		; add sine lb
000396  3               	sta (z80_ix),y		; store new coordinate lb.
000396  3               	ldy #3
000396  3               	lda (z80_ix),y
000396  3               	adc z80_d		; add sine hb
000396  3               	sta (z80_ix),y		; store new coordinate hb.
000396  3               
000396  3               	ldy #4
000396  3               	lda (z80_ix),y	 	; y coordinate in hl.
000396  3               	clc
000396  3               	adc z80_c		; add cosine lb
000396  3               	sta (z80_ix),y		; store new coordinate lb.
000396  3               	ldy #5
000396  3               	lda (z80_ix),y
000396  3               	adc z80_b		; add cosine lb
000396  3               	sta (z80_ix),y		; store new coordinate hb.
000396  3               
000396  3               	rts
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Move dots
000396  3               ;----------------------------------------------------
000396  3               
000396  3               dotl:
000396  3               	ldy #5
000396  3               	lda (z80_ix),y
000396  3               	sec
000396  3               	sbc #1		 	; move left.
000396  3               	sta (z80_ix),y
000396  3               	rts
000396  3               dotr:
000396  3               	ldy #5
000396  3               	lda (z80_ix),y
000396  3               	clc
000396  3               	adc #1		 	; move left.
000396  3               	sta (z80_ix),y
000396  3               	rts
000396  3               dotu:
000396  3               	ldy #3
000396  3               	lda (z80_ix),y
000396  3               	sec
000396  3               	sbc #1		 	; move up.
000396  3               	sta (z80_ix),y
000396  3               	rts
000396  3               dotd:
000396  3               	ldy #3
000396  3               	lda (z80_ix),y
000396  3               	clc
000396  3               	adc #1			; move down.
000396  3               	sta (z80_ix),y
000396  3               	rts
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Check if coordinates are ok before redrawing at new position.
000396  3               ;
000396  3               ; left:   X>L		X=L	Ok
000396  3               ; right:  R+15>X	X=R	Ok
000396  3               ; top:    Y>T		Y=T	Ok
000396  3               ; bottom: B+15>Y	Y=B	Ok
000396  3               ;----------------------------------------------------
000396  3               
000396  3               chkxy:
000396  3               
000396  3               ; top:    Y>T		Y=T	Ok
000396  3               
000396  3               	ldy #3
000396  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000396  3               	cmp wntopx		; window top.
000396  3               	bcs :+			; compare with top window limit.
000396  3               	jmp kilshr		; out of window, kill shrapnel.
000396  3               :
000396  3               ; left:   X>L		X=L	Ok
000396  3               
000396  3               	ldy #5
000396  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000396  3               	cmp wnlftx		; left edge.
000396  3               	bcs :+			; compare with left window limit.
000396  3               	jmp kilshr		; out of window, kill shrapnel.
000396  3               :
000396  3               ; bottom: B+15>Y	Y=B	Ok
000396  3               
000396  3               	lda wnbotx		; point to bottom.
000396  3               	clc
000396  3               	adc #15
000396  3               	ldy #3
000396  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000396  3               	bcs :+			; compare with shrapnel x coordinate.
000396  3               	jmp kilshr		; off screen, kill shrapnel..
000396  3               :
000396  3               ; right:  R+15>X	X=R	Ok
000396  3               
000396  3               	lda wnrgtx		; point to right edge.
000396  3               	clc
000396  3               	adc #15
000396  3               	ldy #5
000396  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000396  3               	bcs :+			; compare with window limit.
000396  3               	jmp kilshr		; off screen, kill shrapnel.
000396  3               :
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Drop through.
000396  3               ; Display shrapnel.
000396  3               ;----------------------------------------------------
000396  3               
000396  3               plot:
000396  3               	ldy #3
000396  3               	lda (z80_ix),y		; y integer.
000396  3               	sta dispy	 	; workspace coordinates.
000396  3               	ldy #5
000396  3               	lda (z80_ix),y	 	; x integer.
000396  3               	sta dispx 		; workspace coordinates.
000396  3               
000396  3               	ldy #0
000396  3               	lda (z80_ix),y 		; type.
000396  3               	bne :+			; is it a laser?
000396  3               	jmp plot1 		; yes, draw laser instead.
000396  3               :
000396  3               plot0:
000396  3               	lda dispx		; which pixel within byte do we
000396  3               	and #7			; want to set first?
000396  3               	tay
000396  3               	lda dots,y 		; table of small pixel positions.
000396  3               	sta z80_e 		; get value.
000396  3               
000396  3               	jsr scadd 		; screen address.
000396  3               	ldy #0
000396  3               	lda (scraddr),y		; see what's already there.
000396  3               	eor z80_e
000396  3               	sta (scraddr),y 	; put back on screen.
000396  3               	rts
000396  3               
000396  3               plot1:
000396  3               	jsr scadd 		; screen address.
000396  3               	ldy #0
000396  3               	lda (scraddr),y 	; fetch byte there.
000396  3               	eor #255 		; toggle all bits.
000396  3               	sta (scraddr),y 	; new byte.
000396  3               	rts
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Switch off shrapnel
000396  3               ;----------------------------------------------------
000396  3               
000396  3               kilshr:
000396  3               	lda #128
000396  3               	ldy #0
000396  3               	sta (z80_ix),y	; switch off shrapnel.
000396  3               	rts
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Sine/cosine table
000396  3               ;----------------------------------------------------
000396  3               
000396  3               shrsin:	.word 0,1024,391,946,724,724,946,391
000396  3               	.word 1024,0,946,65144,724,64811,391,64589
000396  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
000396  3               	.word 64512,0,64589,391,64811,724,65144,946
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Create trail
000396  3               ;----------------------------------------------------
000396  3               
000396  3               trail:
000396  3               	ldy #1
000396  3               	lda (z80_ix),y 	; time remaining.
000396  3               	sec
000396  3               	sbc #1
000396  3               	sta (z80_ix),y
000396  3               	bne :+
000396  3               	jmp trailk		; time to switch it off.
000396  3               :
000396  3               	jsr qrand		; get a random number.
000396  3               	lsr a 			; x or y axis?
000396  3               	bcc :+
000396  3               	jmp trailv		; use y.
000396  3               :
000396  3               ; Trail horizontal
000396  3               
000396  3               	lsr a 			; which direction?
000396  3               	bcc :+
000396  3               	jmp traill		; go left.
000396  3               :
000396  3               ; Trail right
000396  3               
000396  3               	ldy #5
000396  3               	lda (z80_ix),y
000396  3               	clc
000396  3               	adc #1	 		; go right.
000396  3               	sta (z80_ix),y
000396  3               	rts
000396  3               
000396  3               ; Trail left
000396  3               
000396  3               traill:
000396  3               	ldy #5
000396  3               	lda (z80_ix),y
000396  3               	sec
000396  3               	sbc #1 			; go left.
000396  3               	sta (z80_ix),y
000396  3               	rts
000396  3               
000396  3               ; Trail vertical
000396  3               
000396  3               trailv:
000396  3               	lsr a		 	; which direction?
000396  3               	bcc :+
000396  3               	jmp trailu		; go up.
000396  3               :
000396  3               ; Trail down
000396  3               
000396  3               	ldy #3
000396  3               	lda (z80_ix),y
000396  3               	clc
000396  3               	adc #1 			; go down.
000396  3               	sta (z80_ix),y
000396  3               	rts
000396  3               
000396  3               ; Trail up
000396  3               
000396  3               trailu:
000396  3               	ldy #3
000396  3               	lda (z80_ix),y
000396  3               	sec
000396  3               	sbc #1 			; go up.
000396  3               	sta (z80_ix),y
000396  3               	rts
000396  3               
000396  3               ; Kill trail
000396  3               
000396  3               trailk:
000396  3               	lda #200		; set off-screen to kill vapour trail.
000396  3               	ldy #3
000396  3               	sta (z80_ix),y
000396  3               	rts
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Create laser beam
000396  3               ;----------------------------------------------------
000396  3               
000396  3               laser:
000396  3               	ldy #1
000396  3               	lda (z80_ix),y 		; direction.
000396  3               	ror a 			; left or right?
000396  3               	bcs :+
000396  3               	jmp laserl		; move left.
000396  3               :
000396  3               ; Laser right
000396  3               
000396  3               	lda #8			; distance to travel.
000396  3               	sta z80_b
000396  3               	jmp laserm		; move laser.
000396  3               
000396  3               ; Laser left
000396  3               
000396  3               laserl:
000396  3               	lda #248		; distance to travel.
000396  3               	sta z80_b
000396  3               laserm:
000396  3               	ldy #5
000396  3               	lda (z80_ix),y		; x position.
000396  3               	clc
000396  3               	adc z80_b		; add distance.
000396  3               	sta (z80_ix),y		; set new x coordinate.
000396  3               
000396  3               ; Test new block.
000396  3               
000396  3               	sta dispx 		; set x for block collision detection purposes.
000396  3               	ldy #3
000396  3               	lda (z80_ix),y 		; get y.
000396  3               	sta dispy		; set coordinate for collision test.
000396  3               	jsr tstbl 		; get block type there.
000396  3               	cmp #WALL		; is it solid?
000396  3               	bne :+
000396  3               	jmp trailk		; yes, it cannot pass.
000396  3               :
000396  3                       cmp #FODDER             ; is it fodder?
000396  3                       bne :+
000396  3                       jsr fdchk               ; remove fodder block.
000396  3                       jmp trailk              ; destroy laser.
000396  3               :
000396  3                       rts                     ; no, ignore it.
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Dots mask
000396  3               ;----------------------------------------------------
000396  3               
000396  3               dots:	.byte 128,64,32,16,8,4,2,1
000396  3               
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Plot, preserving de.
000396  3               ;----------------------------------------------------
000396  3               
000396  3               plotde:
000396  3               	lda z80_d 		; put de on stack.
000396  3               	pha
000396  3               	lda z80_e
000396  3               	pha
000396  3               
000396  3               	jsr plot 		; plot pixel.
000396  3               
000396  3               	pla			; restore de from stack.
000396  3               	sta z80_e
000396  3               	pla
000396  3               	sta z80_d
000396  3               
000396  3               	rts
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Shoot a laser.
000396  3               ;----------------------------------------------------
000396  3               
000396  3               shoot:
000396  3               	sta z80_c		; store direction in c register.
000396  3               	ldy #8
000396  3               	lda (z80_ix),y 		; y coordinate.
000396  3               shoot1:
000396  3               	clc
000396  3               	adc #7 			; down 7 pixels.
000396  3               	sta z80_l 		; puty y coordinate in l.
000396  3               
000396  3               	ldy #9
000396  3               	lda (z80_ix),y 		; x coordinate in h.
000396  3               	sta z80_h
000396  3               
000396  3               	lda z80_i		; store pointer to sprite.
000396  3               	pha
000396  3               	lda z80_x
000396  3               	pha
000396  3               
000396  3               	jsr fpslot 		; find particle slot.
000396  3               	bcs :+
000396  3               	jmp vapou2		; failed, restore ix.
000396  3               :
000396  3               	lda #0
000396  3               	ldy #0
000396  3               	sta (z80_ix),y 		; set up a laser.
000396  3               
000396  3               	lda z80_c
000396  3               	ldy #1
000396  3               	sta (z80_ix),y 		; set the direction.
000396  3               
000396  3               	lda z80_l
000396  3               	ldy #3
000396  3               	sta (z80_ix),y		; set y coordinate.
000396  3               
000396  3               	ror z80_c		; check direction we want.
000396  3               	bcc :+
000396  3               	jmp shootr		; shoot right.
000396  3               :
000396  3               	lda z80_h		; X position.
000396  3               shoot0:
000396  3               	and #248		; align on character boundary.
000396  3               	ldy #5
000396  3               	sta (z80_ix),y		; set x coordinate.
000396  3               	jmp vapou0 		; draw first image.
000396  3               shootr:
000396  3               	lda z80_h		; x position.
000396  3               	clc
000396  3               	adc #15			; look right.
000396  3               	jmp shoot0		; align and continue.
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Create a bit of vapour trail.
000396  3               ;----------------------------------------------------
000396  3               
000396  3               vapour:
000396  3               	lda z80_i		; store pointer to sprite.
000396  3               	pha
000396  3               	lda z80_x
000396  3               	pha
000396  3               
000396  3               	ldy #8
000396  3               	lda (z80_ix),y 		; y coordinate.
000396  3               	clc
000396  3               	adc #7			; mid-point of sprite.
000396  3               	sta z80_l
000396  3               
000396  3               	ldy #9
000396  3               	lda (z80_ix),y 		; x coordinate.
000396  3               	adc #7
000396  3               	sta z80_h
000396  3               
000396  3               	jsr fpslot 		; find particle slot.
000396  3               	bcc :+
000396  3               	jmp vapou1		; no, we can use it.
000396  3               :
000396  3               vapou2:
000396  3               	pla
000396  3               	sta z80_x
000396  3               	pla
000396  3               	sta z80_i
000396  3               	rts
000396  3               vapou1:
000396  3               	lda z80_l
000396  3               	ldy #3
000396  3               	sta (z80_ix),y		; set up y.
000396  3               
000396  3               	lda z80_h
000396  3               	ldy #5
000396  3               	sta (z80_ix),y 		; set up x coordinate.
000396  3               
000396  3               	jsr qrand		; get quick random number.
000396  3               	and #15			; random time.
000396  3               	clc
000396  3               	adc #15			; minimum time on screen.
000396  3               	ldy #1
000396  3               	sta (z80_ix),y		; set time on screen.
000396  3               
000396  3               	lda #1
000396  3               	ldy #0
000396  3               	sta (z80_ix),y		; define particle as vapour trail.
000396  3               vapou0:
000396  3               	jsr chkxy		; plot first position.
000396  3               	jmp vapou2
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Create a user particle.
000396  3               ;----------------------------------------------------
000396  3               
000396  3               ptusr:
000396  3               	sta z80_f		; store timer.
000396  3               
000396  3               	ldy #8
000396  3               	lda (z80_ix),y 		; y coordinate.
000396  3               	clc
000396  3               	adc #7			; mid-point of sprite.
000396  3               	sta z80_l
000396  3               
000396  3               	ldy #9
000396  3               	lda (z80_ix),y 		; x coordinate.
000396  3               	clc
000396  3               	adc #7			; mid-point of sprite.
000396  3               	sta z80_h
000396  3               
000396  3               	jsr fpslot 		; find particle slot.
000396  3               	bcs ptusr1
000396  3               	rts 			; out of slots, can't generate anything.
000396  3               ptusr1:
000396  3               	lda z80_l
000396  3               	ldy #3
000396  3               	sta (z80_ix),y 		; set up y.
000396  3               
000396  3               	lda z80_h
000396  3               	ldy #5
000396  3               	sta (z80_ix),y		; set up x coordinate.
000396  3               
000396  3               	lda z80_f 		; restore timer.
000396  3               	ldy #1
000396  3               	sta (z80_ix),y		; set time on screen.
000396  3               
000396  3               	lda #7
000396  3               	ldy #0
000396  3               	sta (z80_ix),y		; define particle as user particle.
000396  3               
000396  3               	jmp chkxy		; plot first position.
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Create a vertical or horizontal star.
000396  3               ;----------------------------------------------------
000396  3               
000396  3               star:
000396  3               	lda z80_i		; store pointer to sprite.
000396  3               	pha
000396  3               	lda z80_x
000396  3               	pha
000396  3               
000396  3               	jsr fpslot 		; find particle slot.
000396  3               	bcs star7		; found one we can use.
000396  3               star0:
000396  3               	pla 			; restore sprite pointer.
000396  3               	sta z80_x
000396  3               	pla
000396  3               	sta z80_i
000396  3               	rts 			; out of slots, can't generate anything.
000396  3               star7:
000396  3               	lda z80_c		; direction.
000396  3               	and #3 			; is it left?
000396  3               	bne :+
000396  3               	jmp star1 		; yes, it's left.
000396  3               :
000396  3               	cmp #1 			; is it right?
000396  3               	bne :+
000396  3               	jmp star2 		; yes, it's right.
000396  3               :
000396  3               	cmp #2 			; is it up?
000396  3               	bne :+
000396  3               	jmp star3 		; yes, it's up.
000396  3               :
000396  3               	ldy wntopx 		; get edge of screen.
000396  3               	iny			; down one pixel.
000396  3               	tya
000396  3               star8:
000396  3               	ldy #3
000396  3               	sta (z80_ix),y 		; set y coord.
000396  3               	jsr qrand 		; get quick random number.
000396  3               star9:
000396  3               	ldy #5
000396  3               	sta (z80_ix),y		; set x position.
000396  3               
000396  3               	lda z80_c		; direction.
000396  3               	and #3			; zero to three.
000396  3               	clc
000396  3               	adc #3			; 3 to 6 for starfield.
000396  3               	ldy #0
000396  3               	sta (z80_ix),y		; define particle as star.
000396  3               	jsr chkxy		; plot first position.
000396  3               	jmp star0
000396  3               star1:
000396  3               	jsr qrand		; get quick random number.
000396  3               	ldy #3
000396  3               	sta (z80_ix),y 		; set y coord.
000396  3               
000396  3               	lda wnrgtx 		; get edge of screen.
000396  3               	clc
000396  3               	adc #15			; add width of sprite minus 1.
000396  3               	jmp star9
000396  3               star2:
000396  3               	jsr qrand 		; get quick random number.
000396  3               	ldy #3
000396  3               	sta (z80_ix),y		; set y coord.
000396  3               
000396  3               	lda wnlftx		; get edge of screen.
000396  3               	jmp star9
000396  3               star3:
000396  3               	lda wnbotx 		; get edge of screen.
000396  3               	clc
000396  3               	adc #15 		; height of sprite minus one pixel.
000396  3               	jmp star8
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Find particle slot for lasers or vapour trail.
000396  3               ; can't use alternate accumulator.
000396  3               ;----------------------------------------------------
000396  3               
000396  3               fpslot:
000396  3               	lda #<SHRAPN 		; shrapnel table.
000396  3               	sta z80_x
000396  3               	lda #>SHRAPN
000396  3               	sta z80_i
000396  3               
000396  3               	lda #NUMSHR		; number of pieces in table.
000396  3               	sta z80_b
000396  3               fpslt0:
000396  3               	ldy #0
000396  3               	lda (z80_ix),y		; get type.
000396  3               	asl a  			; is this slot in use?
000396  3               	bcc :+
000396  3               	rts			; no, we can use it.
000396  3               :
000396  3               	clc			; point to more shrapnel.
000396  3               	lda z80_x
000396  3               	adc #SHRSIZ
000396  3               	sta z80_x
000396  3               	bcc :+
000396  3               	inc z80_i
000396  3               :
000396  3               	dec z80_b		; repeat for all shrapnel.
000396  3               	bne fpslt0
000396  3               
000396  3               	clc
000396  3               	rts 			; out of slots, can't generate anything.
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Create an explosion at sprite position.
000396  3               ;----------------------------------------------------
000396  3               
000396  3               explod:
000396  3               	sta z80_c 		; particles to create.
000396  3               
000396  3               	lda z80_i 		; store pointer to sprite.
000396  3               	pha
000396  3               	lda z80_x
000396  3               	pha
000396  3               
000396  3               	ldy #8
000396  3               	lda (z80_ix),y 		; y coordinate.
000396  3               	sta z80_l
000396  3               	ldy #9
000396  3               	lda (z80_ix),y		; x coordinate.
000396  3               	sta z80_h
000396  3               
000396  3               	lda #<SHRAPN		; shrapnel table.
000396  3               	sta z80_x
000396  3               	lda #>SHRAPN
000396  3               	sta z80_i
000396  3               
000396  3               	lda #NUMSHR		; number of pieces in table.
000396  3               	sta explcnt
000396  3               expld0:
000396  3               	ldy #0
000396  3               	lda (z80_ix),y		; get type.
000396  3               	asl a 			; is this slot in use?
000396  3               	bcs expld1		; no, we can use it.
000396  3               expld2:
000396  3               	clc
000396  3               	lda z80_x
000396  3               	adc #SHRSIZ
000396  3               	sta z80_x
000396  3               	bcc :+
000396  3               	inc z80_i
000396  3               :
000396  3               	dec explcnt		; repeat for all shrapnel.
000396  3               	bne expld0
000396  3               expld3:
000396  3               	pla			; restore sprite pointer.
000396  3               	sta z80_x
000396  3               	pla
000396  3               	sta z80_i
000396  3               	rts 			; out of slots, can't generate any more.
000396  3               
000396  3               expld1:
000396  3               	lda z80_c		; shrapnel counter.
000396  3               	and #15			; 0 to 15.
000396  3               	clc			; add to x.
000396  3               	adc z80_l
000396  3               	ldy #3
000396  3               	sta (z80_ix),y		; y coord.
000396  3               
000396  3               	lda seed3 		; crap random number.
000396  3               	and #15			; 0 to 15.
000396  3               	clc 			; add to y.
000396  3               	adc z80_h
000396  3               	ldy #5
000396  3               	sta (z80_ix),y		; x coord.
000396  3               
000396  3               	lda #2
000396  3               	ldy #0
000396  3               	sta (z80_ix),y		; switch it on.
000396  3               
000396  3               	jsr chkxy		; plot first position.
000396  3               	jsr qrand		; quick random angle.
000396  3               	and #60 		; keep within range.
000396  3               	ldy #1
000396  3               	sta (z80_ix),y		; angle.
000396  3               
000396  3               	dec z80_c		; one less piece of shrapnel to generate.
000396  3               	bne expld2 		; back to main explosion loop.
000396  3               	jmp expld3 		; restore sprite pointer and exit.
000396  3               
000396  3               explcnt:	.byte 0
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Quick random
000396  3               ;----------------------------------------------------
000396  3               
000396  3               qrand:
000396  3               	jsr random		; r register.
000396  3               	eor seed3		; combine with seed.
000396  3               	sta seed3 		; new seed.
000396  3               	rts
000396  3               
000396  3               seed3:	.byte 0
000396  3               
000396  3               ;----------------------------------------------------
000396  3               ; Display all shrapnel.
000396  3               ;----------------------------------------------------
000396  3               
000396  3               dshrp:
000396  3               	lda #<plotde		; display routine.
000396  3               	sta proshx+1
000396  3               	lda #>plotde
000396  3               	sta proshx+2
000396  3               	jsr proshr		; process shrapnel.
000396  3               
000396  3               	lda #<prosh1		; processing routine.
000396  3               	sta proshx+1
000396  3               	lda #>prosh1
000396  3               	sta proshx+2
000396  3               	rts
000396  3               
000396  3               ;------------------------------------------------------
000396  3               ; Particle engine.
000396  3               ;
000396  3               ; Init particle data for 55 particles in SHRAPN table.
000396  3               ; Every particle has 6 bytes.
000396  3               ;
000396  3               ; global:	-
000396  3               ; local:	x,y,hl
000396  3               ; calls:	-
000396  3               ;------------------------------------------------------
000396  3               
000396  3               inishr:
000396  3               	lda #<SHRAPN 		; table.
000396  3               	sta z80_l
000396  3               	lda #>SHRAPN
000396  3               	sta z80_h
000396  3               
000396  3               	ldy #0
000396  3               	ldx #NUMSHR		; shrapnel pieces to process.
000396  3               inish0:
000396  3               	lda #255 		; kill the shrapnel.
000396  3               	sta (z80_hl),y
000396  3               
000396  3               	clc 			; point there.
000396  3               	lda z80_l
000396  3               	adc #SHRSIZ		; distance to next.
000396  3               	sta z80_l
000396  3               	bcc :+
000396  3               	inc z80_h
000396  3               :
000396  3               	dex
000396  3               	bne inish0 		; round again.
000396  3               	rts
000396  3               
000396  3               ;------------------------------------------------------
000396  3               ; Check for collision between laser and sprite.
000396  3               ;------------------------------------------------------
000396  3               
000396  3               lcol:
000396  3               	lda #<SHRAPN		; shrapnel table.
000396  3               	sta z80_l
000396  3               	lda #>SHRAPN
000396  3               	sta z80_h
000396  3               
000396  3               	lda #NUMSHR		; number of pieces in table.
000396  3               	sta z80_b
000396  3               lcol0:
000396  3               	ldy #0
000396  3               	lda (z80_hl),y 		; get type.
000396  3               	beq lcol1		; yes, check collision.
000396  3               lcol3:
000396  3               	clc			; point to more shrapnel.
000396  3               	lda z80_l
000396  3               	adc #SHRSIZ
000396  3               	sta z80_l
000396  3               	bcc :+
000396  3               	inc z80_h
000396  3               :
000396  3               	dec z80_b		; repeat for all shrapnel.
000396  3               	bne lcol0
000396  3               	rts 			; no collision, carry not set.
000396  3               lcol1:
000396  3               	ldy #3
000396  3               	lda (z80_hl),y		; get y.
000396  3               	sec
000396  3               	ldy #8
000396  3               	sbc (z80_ix),y		; subtract sprite y.
000396  3               lcolh:
000396  3               	cmp #16 		; within range?
000396  3               	bcc :+
000396  3               	jmp lcol2		; no, missed.
000396  3               :
000396  3               	ldy #5
000396  3               	lda (z80_hl),y 		; get x.
000396  3               	sec
000396  3               	ldy #9
000396  3               	sbc (z80_ix),y 		; subtract sprite y.
000396  3               	cmp #16			; within range?
000396  3               	bcs :+
000396  3               	jmp lcol4 		; yes, collision occurred.
000396  3               :
000396  3               lcol2:
000396  3               	jmp lcol3
000396  3               lcol4:
000396  3               	sec
000396  3               	rts 			; return with carry set for collision.
000396  3               .endif
000396  3               
000396  3               ;------------------------------------------------------
000396  3               ; Main game engine code starts here.
000396  3               ; After initialisation, mloop is the main loop
000396  3               ;------------------------------------------------------
000396  3               
000396  3               game:
000396  3               
000396  3               ; Set up screen address table.
000396  3               
000396  3               setsat:
000396  3  A9 00        	lda #<ScreenAddr		; start of screen.
000398  3  85 80        	sta scraddr
00039A  3  A9 80        	lda #>ScreenAddr
00039C  3  85 81        	sta scraddr+1
00039E  3               
00039E  3  A0 00        	ldy #0			; vertical lines on screen.
0003A0  3               setsa0:
0003A0  3  A5 80        	lda scraddr
0003A2  3  99 00 9B     	sta SCADTB_lb,y		; write low byte.
0003A5  3  A5 81        	lda scraddr+1
0003A7  3  C0 C0        	cpy #192		; vertical lines on screen.
0003A9  3  90 02        	bcc :+
0003AB  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
0003AD  3               :
0003AD  3  99 00 9C     	sta SCADTB_hb,y		; write high byte.
0003B0  3  20 CE 12     	jsr nline		; next line down.
0003B3  3  C8           	iny			; next position in table.
0003B4  3  D0 EA        	bne setsa0
0003B6  3               	
0003B6  3               ; Init graphics mode
0003B6  3               
0003B6  3  A9 F0        	lda #ScrMode		; graphics mode
0003B8  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
0003BB  3  20 67 03     	jsr setpal 		; set up palette.
0003BE  3               
0003BE  3               ; Init AtoMMC joystick
0003BE  3  20 52 0E     	jsr joyinit		; AtoMMC joystick on PORT B
0003C1  3               
0003C1  3               rpblc2:
0003C1  3               .if pflag
0003C1  3               	jsr inishr 		; initialise particle engine.
0003C1  3               .endif
0003C1  3               evintr:
0003C1  3  20 DD 19     	jsr evnt12 		; call intro/menu event.
0003C4  3               
0003C4  3  A9 02        	lda #WALL 		; write default property.
0003C6  3  A2 00        	ldx #0
0003C8  3               clrmap:
0003C8  3  9D 00 98     	sta MAP,x 		; block properties.
0003CB  3  9D 00 99     	sta MAP+256,x
0003CE  3  9D 00 9A     	sta MAP+512,x
0003D1  3  E8           	inx			; next byte.
0003D2  3  D0 F4        	bne clrmap
0003D4  3               
0003D4  3  20 9A 02     	jsr iniob 		; initialise objects.
0003D7  3               
0003D7  3  A9 00        	lda #0			; put zero in accumulator.
0003D9  3  8D 62 02     	sta gamwon		; reset game won flag.
0003DC  3               
0003DC  3  20 55 05     	jsr inisc 		; init the score.
0003DF  3               mapst:
0003DF  3  AD 1C 19     	lda stmap 		; start position on map.
0003E2  3  8D 0A 19     	sta roomtb		; set up position in table, if there is one.
0003E5  3               
0003E5  3               inipbl:
0003E5  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0003E5  3               .if aflag
0003E5  3               	lda #<eop		; reset blockpointer
0003E5  3               	sta pbptr
0003E5  3               	lda #>eop
0003E5  3               	sta pbptr+1
0003E5  3               .endif
0003E5  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0003E5  3  20 26 14     	jsr initsc 		; set up first screen.
0003E8  3               
0003E8  3  A9 F9        	lda #<ssprit 		; default to spare sprite in table.
0003EA  3  85 68        	sta z80_x
0003EC  3  A9 18        	lda #>ssprit
0003EE  3  85 69        	sta z80_i
0003F0  3               evini:
0003F0  3  20 DE 19     	jsr evnt13 		; initialisation.
0003F3  3               
0003F3  3               ; Two restarts.
0003F3  3               ; First restart - clear all sprites and initialise everything.
0003F3  3               
0003F3  3               rstrt:
0003F3  3  20 EE 04     	jsr rsevt 		; restart events.
0003F6  3  20 8D 02     	jsr xspr 		; clear sprite table.
0003F9  3  20 9A 15     	jsr sprlst 		; fetch pointer to screen sprites.
0003FC  3  20 28 16     	jsr ispr 		; initialise sprite table.
0003FF  3               
0003FF  3  4C 0E 04     	jmp rstrt0
000402  3               
000402  3               ; Second restart - clear all but player, and don't initialise him.
000402  3               
000402  3               rstrtn:
000402  3  20 EE 04     	jsr rsevt		; restart events.
000405  3  20 C8 15     	jsr nspr 		; clear all non-player sprites.
000408  3  20 9A 15     	jsr sprlst 		; fetch pointer to screen sprites.
00040B  3  20 68 16     	jsr kspr 		; initialise sprite table, no more players.
00040E  3               
00040E  3               ; Set up the player and/or enemy sprites.
00040E  3               
00040E  3               rstrt0:
00040E  3  A9 00        	lda #0 			; zero in accumulator.
000410  3  8D 5F 02     	sta nexlev 		; reset next level flag.
000413  3  8D 60 02     	sta restfl 		; reset restart flag.
000416  3  8D 61 02     	sta deadf 		; reset dead flag.
000419  3  20 89 0A     	jsr droom 		; show screen layout.
00041C  3               rpblc0:
00041C  3               .if pflag
00041C  3               	jsr inishr 		; initialise particle engine.
00041C  3               .endif
00041C  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00041C  3               .if aflag
00041C  3               	jsr rbloc		; draw blocks for this screen
00041C  3               .endif
00041C  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00041C  3  20 A5 05     	jsr shwob		; draw objects.
00041F  3               
00041F  3  A9 2D        	lda #<sprtab 		; address of sprite table, even sprites.
000421  3  85 68        	sta z80_x
000423  3  A9 18        	lda #>sprtab
000425  3  85 69        	sta z80_i
000427  3  20 4A 11     	jsr dspr 		; display sprites.
00042A  3               
00042A  3  A9 3E        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00042C  3  85 68        	sta z80_x
00042E  3  A9 18        	lda #>(sprtab+TABSIZ)
000430  3  85 69        	sta z80_i
000432  3  20 4A 11     	jsr dspr 		; display sprites.
000435  3               mloop:
000435  3  20 CC 02     	jsr vsync 		; synchronise with display.
000438  3  A9 2D        	lda #<sprtab 		; address of sprite table, even sprites.
00043A  3  85 68        	sta z80_x
00043C  3  A9 18        	lda #>sprtab
00043E  3  85 69        	sta z80_i
000440  3  20 4A 11     	jsr dspr 		; display even sprites.
000443  3               
000443  3  20 A4 05     	jsr plsnd 		; play sounds.
000446  3               
000446  3  A9 3E        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000448  3  85 68        	sta z80_x
00044A  3  A9 18        	lda #>(sprtab+TABSIZ)
00044C  3  85 69        	sta z80_i
00044E  3  20 4A 11     	jsr dspr 		; display odd sprites.
000451  3               
000451  3  A9 F9        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
000453  3  85 68        	sta z80_x
000455  3  A9 18        	lda #>(ssprit)
000457  3  85 69        	sta z80_i
000459  3               evlp1:
000459  3  20 DB 19     	jsr evnt10 		; called once per main loop.
00045C  3  20 BF 10     	jsr pspr 		; process sprites.
00045F  3               
00045F  3               ; Main loop events.
00045F  3               
00045F  3  A9 F9        	lda #<ssprit 		; point to spare sprite for spawning purposes.
000461  3  85 68        	sta z80_x
000463  3  A9 18        	lda #>ssprit
000465  3  85 69        	sta z80_i
000467  3               evlp2:
000467  3  20 DC 19     	jsr evnt11 		; called once per main loop.
00046A  3               bsortx:
00046A  3  20 32 10     	jsr bsort 		; sort sprites.
00046D  3               
00046D  3  AD 5F 02     	lda nexlev		; finished level flag.
000470  3  D0 24        	bne newlev		; is set, go to next level.
000472  3  AD 62 02     	lda gamwon		; finished game flag.
000475  3  D0 30        	bne evwon		; is set, finish the game.
000477  3  AD 60 02     	lda restfl 		; finished level flag.
00047A  3  C9 01        	cmp #1			; has it been set?
00047C  3  D0 03        	bne :+
00047E  3  4C F3 03     	jmp rstrt		; yes, go to next level.
000481  3               :
000481  3  C9 02        	cmp #2			; has it been set?
000483  3  D0 03        	bne :+
000485  3  4C 02 04     	jmp rstrtn		; yes, go to next level.
000488  3               :
000488  3  AD 61 02     	lda deadf 		; dead flag.
00048B  3  D0 20        	bne pdead		; yes, player dead.
00048D  3               
00048D  3               ; back to start of main loop.
00048D  3               
00048D  3  EE 34 02     	inc frmno
000490  3  EE 5A 02     	inc clock
000493  3  4C 35 04     	jmp mloop		; switched to a jmp mloop during test mode.
000496  3               
000496  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000496  3               
000496  3               ;----------------------------------------------------------
000496  3               ; Read blocks from list and update screen accordingly.
000496  3               ;----------------------------------------------------------
000496  3               
000496  3               .if aflag
000496  3               rbloc:
000496  3               	lda #<eop		; reset temp blockpointer
000496  3               	sta tmp
000496  3               	lda #>eop
000496  3               	sta tmp+1
000496  3               
000496  3               rbloc2:
000496  3               	lda tmp			; check for last block
000496  3               	cmp pbptr
000496  3               	bne rbloc1
000496  3               	lda tmp+1
000496  3               	cmp pbptr+1
000496  3               	bne rbloc1
000496  3               	rts
000496  3               rbloc1:
000496  3               	ldy #0
000496  3               	lda (tmp),y		; check if block for this scno
000496  3               	cmp scno
000496  3               	bne rbloc0		; if not, skip
000496  3               	iny
000496  3               	lda (tmp),y		; get y
000496  3               	sta dispy
000496  3               	iny
000496  3               	lda (tmp),y		; get x
000496  3               	sta dispx
000496  3               	iny
000496  3               	lda (tmp),y		; get blocknr
000496  3               	jsr pattr2		; draw block
000496  3               rbloc0:
000496  3               	clc			; point to next block
000496  3               	lda tmp
000496  3               	adc #4
000496  3               	sta tmp
000496  3               	bcc rbloc2zzz
000496  3               	inc tmp+1
000496  3               	jmp rbloc2
000496  3               .endif
000496  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000496  3               
000496  3               ;----------------------------------------------------------
000496  3               ; New level
000496  3               ;----------------------------------------------------------
000496  3               
000496  3               newlev:
000496  3  AD 3E 02     	lda scno 			; current screen.
000499  3  18           	clc
00049A  3  69 01        	adc #1				; next screen.
00049C  3  CD 8A 1D     	cmp numsc			; total number of screens.
00049F  3  B0 06        	bcs evwon			; yes, game finished.
0004A1  3  8D 3E 02     	sta scno			; set new level number.
0004A4  3  4C F3 03     	jmp rstrt			; restart, clearing all aliens.
0004A7  3               
0004A7  3               evwon:
0004A7  3  20 FA 19     	jsr evnt18		 	; game completed.
0004AA  3  4C C3 04     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0004AD  3               
0004AD  3               ;----------------------------------------------------------
0004AD  3               ; Player dead.
0004AD  3               ;----------------------------------------------------------
0004AD  3               
0004AD  3               pdead:
0004AD  3  A9 00        	lda #0				; zeroise accumulator.
0004AF  3  8D 61 02     	sta deadf			; reset dead flag.
0004B2  3               evdie:
0004B2  3  20 F8 19     	jsr evnt16 			; death subroutine.
0004B5  3  AD 3F 02     	lda numlif			; number of lives.
0004B8  3  F0 03        	beq :+
0004BA  3  4C F3 03     	jmp rstrt 			; restart game.
0004BD  3               :
0004BD  3               evfail:
0004BD  3  20 F9 19     	jsr evnt17 			; failure event.
0004C0  3  4C 96 03     	jmp game			; restart game
0004C3  3               
0004C3  3               ;----------------------------------------------------------
0004C3  3               ; Tidy things up
0004C3  3               ;----------------------------------------------------------
0004C3  3               
0004C3  3               tidyup:
0004C3  3  A0 00        	ldy #0				; digits to check.
0004C5  3               tidyu2:
0004C5  3  B9 7E 07     	lda score,y 			; get score digit.
0004C8  3  CD 84 07     	cmp hiscor 			; are we larger than high score digit?
0004CB  3  90 07        	bcc tidyu0			; high score is bigger.
0004CD  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0004CF  3  C8           	iny				; next digit of high score.
0004D0  3  C0 06        	cpy #6
0004D2  3  D0 F1        	bne tidyu2			; repeat for all digits
0004D4  3               tidyu0:
0004D4  3  A9 7E        	lda #<score			; return pointing to score.
0004D6  3  85 62        	sta z80_c
0004D8  3  A9 07        	lda #>score
0004DA  3  85 63        	sta z80_b
0004DC  3  60           	rts
0004DD  3               tidyu1:
0004DD  3  A0 05        	ldy #5
0004DF  3               tidyu3:
0004DF  3  B9 7E 07     	lda score,y			; score.
0004E2  3  99 84 07     	sta hiscor,y			; high score.
0004E5  3  88           	dey
0004E6  3  10 F7        	bpl tidyu3 			; copy score to high score.
0004E8  3               evnewh:
0004E8  3  20 FB 19     	jsr evnt19			; new high score event.
0004EB  3  4C D4 04     	jmp tidyu0			; tidy up.
0004EE  3               
0004EE  3               ;--------------------------------------------------
0004EE  3               ; Restart event.
0004EE  3               ;--------------------------------------------------
0004EE  3               
0004EE  3               rsevt:
0004EE  3  A9 F9        	lda #<ssprit 			; default to spare element in table.
0004F0  3  85 68        	sta z80_x
0004F2  3  A9 18        	lda #>ssprit
0004F4  3  85 69        	sta z80_i
0004F6  3               evrs:
0004F6  3  4C DF 19     	jmp evnt14	 		; call restart event.
0004F9  3               
0004F9  3               ;------------------------------------------------------------------
0004F9  3               ; Copy number passed in a to string position bc, right-justified.
0004F9  3               ;
0004F9  3               ; Input:
0004F9  3               ;  A  = number
0004F9  3               ;  BC = string address
0004F9  3               ;
0004F9  3               ; Output:
0004F9  3               ;  BC = string with number
0004F9  3               ;-----------------------------------------------------------------
0004F9  3               
0004F9  3               num2ch:
0004F9  3  85 65        	sta z80_d		; Save number
0004FB  3               
0004FB  3  A9 00        	lda #0
0004FD  3  8D 54 05     	sta flag
000500  3               numdg3:
000500  3  A2 64        	ldx #100		; hundreds column.
000502  3  86 64        	stx z80_e
000504  3  20 15 05     	jsr numdg		; show digit.
000507  3               numdg2:
000507  3  A2 0A        	ldx #10			; tens column.
000509  3  86 64        	stx z80_e
00050B  3  20 15 05     	jsr numdg		; show digit.
00050E  3               
00050E  3  EE 54 05     	inc flag
000511  3  A2 01        	ldx #1			; units column.
000513  3  86 64        	stx z80_e
000515  3               numdg:
000515  3  A9 30        	lda #48			; clear digit.
000517  3  85 61        	sta z80_a
000519  3               numdg1:
000519  3  A5 65        	lda z80_d
00051B  3  C5 64        	cmp z80_e
00051D  3  90 0F        	bcc numdg0		; nothing to show.
00051F  3  38           	sec
000520  3  A5 65        	lda z80_d
000522  3  E5 64        	sbc z80_e		; subtract from column.
000524  3  85 65        	sta z80_d
000526  3  E6 61        	inc z80_a		; increment digit.
000528  3  EE 54 05     	inc flag
00052B  3  4C 19 05     	jmp numdg1		; repeat until column is zero.
00052E  3               numdg0:
00052E  3  A0 00        	ldy #0
000530  3  A5 61        	lda z80_a
000532  3  91 62        	sta (z80_bc),y		; write digit to buffer.
000534  3  AD 54 05     	lda flag
000537  3  F0 06        	beq :+
000539  3  E6 62        	inc z80_c		; next buffer position.
00053B  3  D0 02        	bne :+
00053D  3  E6 63        	inc z80_b
00053F  3               :
00053F  3  60           	rts
000540  3               num2dd:
000540  3  85 65        	sta z80_d		; Save number
000542  3               
000542  3  A9 01        	lda #1
000544  3  8D 54 05     	sta flag
000547  3               
000547  3  4C 07 05     	jmp numdg2
00054A  3               num2td:
00054A  3  85 65        	sta z80_d		; Save number
00054C  3               
00054C  3  A9 01        	lda #1
00054E  3  8D 54 05     	sta flag
000551  3  4C 00 05     	jmp numdg3
000554  3               
000554  3  00           flag:	.byte 0
000555  3               
000555  3               ;---------------------------------------------------------
000555  3               ; Reset score to "000000"
000555  3               ;---------------------------------------------------------
000555  3               
000555  3               inisc:
000555  3  A9 30        	lda #'0'
000557  3  A2 05        	ldx #5			; digits to initialise.
000559  3               inisc0:
000559  3  9D 7E 07     	sta score,x 		; write zero digit.
00055C  3  CA           	dex			; next column.
00055D  3  10 FA        	bpl inisc0		; repeat for all digits.
00055F  3               
00055F  3  60           	rts
000560  3               
000560  3               ;-----------------------------------------------------
000560  3               ; Multiply h by d and return in hl.
000560  3               ;
000560  3               ; Input:
000560  3               ;  H = first number
000560  3               ;  D = second number
000560  3               ;
000560  3               ; Output:
000560  3               ;  HL = result H x D
000560  3               ;-----------------------------------------------------
000560  3               
000560  3               imul:
000560  3  A5 65        	lda z80_d		; HL = H * D
000562  3  85 64        	sta z80_e
000564  3  A5 67        	lda z80_h
000566  3  85 62        	sta z80_c		; make c first multiplier.
000568  3               imul0:
000568  3  A9 00        	lda #0			; zeroise total.
00056A  3  85 66        	sta z80_l
00056C  3  85 67        	sta z80_h
00056E  3               
00056E  3  A5 67        	lda z80_h
000570  3  85 65        	sta z80_d		; zeroise high byte.
000572  3               
000572  3  A9 08        	lda #8			; repeat 8 times.
000574  3  85 63        	sta z80_b
000576  3               imul1:
000576  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
000578  3  90 0E        	bcc imul2		; wasn't set.
00057A  3  18           	clc			; bit was set, so add de.
00057B  3  A5 66        	lda z80_l
00057D  3  65 64        	adc z80_e
00057F  3  85 66        	sta z80_l
000581  3  A5 67        	lda z80_h
000583  3  65 65        	adc z80_d
000585  3  85 67        	sta z80_h
000587  3  18           	clc 			; reset carry.
000588  3               imul2:
000588  3  06 64        	asl z80_e 		; shift de 1 bit left.
00058A  3  26 65        	rol z80_d
00058C  3  C6 63        	dec z80_b
00058E  3  D0 E6        	bne imul1		; repeat 8 times.
000590  3               
000590  3  60           	rts
000591  3               
000591  3               ;-----------------------------------------------
000591  3               ; Divide d by e and return in d, remainder in a.
000591  3               ;
000591  3               ; Input:
000591  3               ;  D = first number
000591  3               ;  E = second number
000591  3               ;
000591  3               ; Output:
000591  3               ;  D = result D/E
000591  3               ;  A = remainder
000591  3               ;-----------------------------------------------
000591  3               
000591  3               idiv:
000591  3  A9 00        	lda #0
000593  3  A0 08        	ldy #8		 	; bits to shift.
000595  3  06 65        	asl z80_d
000597  3               idiv0:
000597  3  2A           	rol a 			; multiply d by 2.
000598  3  C5 64        	cmp z80_e 		; test if e is smaller.
00059A  3  90 02        	bcc idiv1		; e is greater, no division this time.
00059C  3  E5 64        	sbc z80_e		; subtract it.
00059E  3               idiv1:
00059E  3  26 65        	rol z80_d		; rotate into d.
0005A0  3  88           	dey
0005A1  3  D0 F4        	bne idiv0		; repeat
0005A3  3  60           	rts
0005A4  3               
0005A4  3               ;---------------------------------------------------
0005A4  3               ; Play AY sound effect
0005A4  3               ;---------------------------------------------------
0005A4  3               
0005A4  3               plsnd:
0005A4  3  60           	rts
0005A5  3               
0005A5  3               ;---------------------------------------------------
0005A5  3               ; Objects handling.
0005A5  3               ; 32 bytes for image
0005A5  3               ; 3 for room, y and x
0005A5  3               ; 3 for starting room, y and x.
0005A5  3               ; 254 = disabled.
0005A5  3               ; 255 = object in player"s pockets.
0005A5  3               ;---------------------------------------------------
0005A5  3               
0005A5  3               ;---------------------------------------------------
0005A5  3               ; Show items present.
0005A5  3               ;---------------------------------------------------
0005A5  3               
0005A5  3               shwob:
0005A5  3  A9 90        	lda #<objdta 			; objects table.
0005A7  3  85 66        	sta z80_l
0005A9  3  A9 1D        	lda #>objdta
0005AB  3  85 67        	sta z80_h
0005AD  3               
0005AD  3  AD 39 02     	lda numob 			; number of objects in the game.
0005B0  3  8D DD 11     	sta sprcnt
0005B3  3               shwob0:
0005B3  3  A0 20        	ldy #32 			; distance to room number.
0005B5  3  B1 66        	lda (z80_hl),y 			; same as an item?
0005B7  3  CD 3E 02     	cmp scno 			; current location.
0005BA  3  D0 03        	bne :+
0005BC  3  20 D2 05     	jsr dobj 			; yes, display object.
0005BF  3               :
0005BF  3  18           	clc
0005C0  3  A5 66        	lda z80_l
0005C2  3  69 26        	adc #38 			; distance to next item.
0005C4  3  85 66        	sta z80_l
0005C6  3  A5 67        	lda z80_h
0005C8  3  69 00        	adc #0
0005CA  3  85 67        	sta z80_h	 		; point to it.
0005CC  3  CE DD 11     	dec sprcnt
0005CF  3  D0 E2        	bne shwob0 			; repeat for others.
0005D1  3  60           	rts
0005D2  3               
0005D2  3               ;---------------------------------------------------
0005D2  3               ; Display object.
0005D2  3               ; hl must point to object's start address.
0005D2  3               ;
0005D2  3               ; Input:
0005D2  3               ;  HL = object address
0005D2  3               ;---------------------------------------------------
0005D2  3               
0005D2  3               dobj:
0005D2  3  A0 21        	ldy #33
0005D4  3  B1 66        	lda (z80_hl),y 			; point to y.
0005D6  3  8D 64 02     	sta dispy
0005D9  3  C8           	iny
0005DA  3  B1 66        	lda (z80_hl),y 			; point to x.
0005DC  3  8D 63 02     	sta dispx
0005DF  3               dobj1:
0005DF  3  4C CC 09     	jmp sprite 			; draw this sprite.
0005E2  3               
0005E2  3               ;--------------------------------------
0005E2  3               ; Remove an object.
0005E2  3               ;
0005E2  3               ; Input:
0005E2  3               ;  A = object number
0005E2  3               ;--------------------------------------
0005E2  3               
0005E2  3               remob:
0005E2  3  CD 39 02     	cmp numob			; number of objects in game.
0005E5  3  90 01        	bcc :+				; are we checking past the end?
0005E7  3  60           	rts				; yes, can't get non-existent item.
0005E8  3               :
0005E8  3  48           	pha				; remember object.
0005E9  3  20 F7 05     	jsr getob			; pick it up if we haven't already got it.
0005EC  3  68           	pla				; retrieve object number.
0005ED  3  20 29 06     	jsr gotob			; get its address.
0005F0  3  A9 FE        	lda #254
0005F2  3  A0 20        	ldy #32
0005F4  3  91 66        	sta (z80_hl),y			; remove it.
0005F6  3  60           	rts
0005F7  3               
0005F7  3               ;---------------------------------------------------
0005F7  3               ; Pick up object number held in the accumulator.
0005F7  3               ;
0005F7  3               ; Input:
0005F7  3               ;  A = object number
0005F7  3               ;---------------------------------------------------
0005F7  3               
0005F7  3               getob:
0005F7  3  CD 39 02     	cmp numob 		; number of objects in game.
0005FA  3  90 01        	bcc :+			; are we checking past the end?
0005FC  3  60           	rts			; yes, can't get non-existent item.
0005FD  3               :
0005FD  3  20 29 06     	jsr gotob 		; check if we already have it.
000600  3  C9 FF        	cmp #255
000602  3  D0 01        	bne :+
000604  3  60           	rts			; we already do.
000605  3               :
000605  3  A0 20        	ldy #32
000607  3  B1 66        	lda (z80_hl),y		; is it on this screen?
000609  3  CD 3E 02     	cmp scno 		; current screen.
00060C  3  D0 16        	bne getob0		; not on screen, so nothing to delete.
00060E  3               
00060E  3  A9 FF        	lda #255
000610  3  91 66        	sta (z80_hl),y		; pick it up.
000612  3  C8           	iny 			; point to y coord.
000613  3               getob1:
000613  3  A0 21        	ldy #33
000615  3  B1 66        	lda (z80_hl),y		; y coord.
000617  3  8D 64 02     	sta dispy
00061A  3  A0 22        	ldy #34
00061C  3  B1 66        	lda (z80_hl),y 		; x coord.
00061E  3  8D 63 02     	sta dispx
000621  3  4C DF 05     	jmp dobj1 		; delete object sprite.
000624  3               getob0:
000624  3  A9 FF        	lda #255
000626  3  91 66        	sta (z80_hl),y 		; pick it up.
000628  3  60           	rts
000629  3               
000629  3               ;-----------------------------------------------------------------
000629  3               ; Got object check.
000629  3               ; Call with object in accumulator, returns zero set if in pockets.
000629  3               ;
000629  3               ; Input:
000629  3               ;  A = object number
000629  3               ;-----------------------------------------------------------------
000629  3               
000629  3               gotob:
000629  3  CD 39 02     	cmp numob 		; number of objects in game.
00062C  3  90 03        	bcc :+ 			; are we checking past the end?
00062E  3  4C 35 06     	jmp gotob0 		; yes, we can't have a non-existent object.
000631  3               :
000631  3  20 3A 06     	jsr findob		; find the object.
000634  3               gotob1:
000634  3  60           	rts
000635  3               
000635  3               gotob0:
000635  3  A9 FE        	lda #254 		; missing.
000637  3  4C 34 06     	jmp gotob1
00063A  3               
00063A  3               findob:
00063A  3  48           	pha			; save object number
00063B  3  A9 90        	lda #<objdta 		; objects.
00063D  3  85 66        	sta z80_l
00063F  3  A9 1D        	lda #>objdta
000641  3  85 67        	sta z80_h
000643  3  68           	pla			; retreive object number
000644  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
000646  3  AA           	tax 			; loop counter
000647  3               fndob2:
000647  3  18           	clc
000648  3  A5 66        	lda z80_l
00064A  3  69 26        	adc #38 		; size of each object.
00064C  3  85 66        	sta z80_l
00064E  3  90 02        	bcc :+
000650  3  E6 67        	inc z80_h
000652  3               :
000652  3  CA           	dex 			; repeat until we find address.
000653  3  D0 F2        	bne fndob2
000655  3               fndob1:
000655  3  A0 20        	ldy #32			; distance to room it's in.
000657  3  B1 66        	lda (z80_hl),y		; fetch status.
000659  3  60           	rts
00065A  3               
00065A  3               ;---------------------------------------------
00065A  3               ; Drop object number at (dispx, dispy).
00065A  3               ;
00065A  3               ; Input:
00065A  3               ;  A = object number
00065A  3               ;---------------------------------------------
00065A  3               
00065A  3               drpob:
00065A  3  CD 39 02     	cmp numob 		; are we checking past the end?
00065D  3  90 01        	bcc :+
00065F  3  60           	rts			; yes, can't drop non-existent item.
000660  3               :
000660  3  20 29 06     	jsr gotob		; make sure object is in inventory.
000663  3  CD 3E 02     	cmp scno		; already on this screen?
000666  3  D0 01        	bne :+
000668  3  60           	rts			; yes, nothing to do.
000669  3               :
000669  3  A0 20        	ldy #32
00066B  3  AD 3E 02     	lda scno
00066E  3  91 66        	sta (z80_hl),y		; bring onto screen.
000670  3  AD 64 02     	lda dispy		; sprite y coordinate.
000673  3  C8           	iny 
000674  3  91 66        	sta (z80_hl),y		; point to object y.
000676  3  AD 63 02     	lda dispx 		; sprite x coordinate.
000679  3  C8           	iny
00067A  3  91 66        	sta (z80_hl),y 		; point to object x
00067C  3  4C D2 05     	jmp dobj		; draw the object sprite.
00067F  3               
00067F  3               ;-----------------------------------------------
00067F  3               ; Seek objects at sprite position.
00067F  3               ;
00067F  3               ; Output:
00067F  3               ;  A = object number, if not found A=255
00067F  3               ;-----------------------------------------------
00067F  3               
00067F  3               skobj:
00067F  3  A9 90        	lda #<objdta 		; pointer to objects.
000681  3  85 66        	sta z80_l
000683  3  A9 1D        	lda #>objdta
000685  3  85 67        	sta z80_h
000687  3               
000687  3  AD 39 02     	lda numob 		; number of objects in game.
00068A  3  85 63        	sta z80_b 		; set up the loop counter.
00068C  3               skobj0:
00068C  3  AD 3E 02     	lda scno		; current room number.
00068F  3  A0 20        	ldy #32
000691  3  D1 66        	cmp (z80_hl),y		; is object in here?
000693  3  D0 03        	bne :+
000695  3  20 AA 06     	jsr skobj1		; yes, check coordinates.
000698  3               :
000698  3  18           	clc			; point to next object in table.
000699  3  A5 66        	lda z80_l
00069B  3  69 26        	adc #38			; size of each object.
00069D  3  85 66        	sta z80_l
00069F  3  90 02        	bcc :+
0006A1  3  E6 67        	inc z80_h
0006A3  3               :
0006A3  3  C6 63        	dec z80_b
0006A5  3  D0 E5        	bne skobj0		; repeat for all objects.
0006A7  3               
0006A7  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
0006A9  3  60           	rts
0006AA  3               
0006AA  3               skobj1:
0006AA  3  A0 21        	ldy #33			; point to y coordinate.
0006AC  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
0006AE  3  38           	sec
0006AF  3  A0 08        	ldy #8
0006B1  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
0006B3  3  18           	clc
0006B4  3  69 0F        	adc #15			; add sprite height minus one.
0006B6  3  C9 1F        	cmp #31			; within range?
0006B8  3  90 03        	bcc :+
0006BA  3  4C D8 06     	jmp skobj2		; no, ignore object.
0006BD  3               :
0006BD  3  A0 22        	ldy #34			; point to x coordinate now.
0006BF  3  B1 66        	lda (z80_hl),y 		; get coordinate.
0006C1  3  38           	sec
0006C2  3  A0 09        	ldy #9
0006C4  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
0006C6  3  18           	clc			; add sprite width minus one.
0006C7  3  69 0F        	adc #15
0006C9  3  C9 1F        	cmp #31			; within range?
0006CB  3  90 03        	bcc :+
0006CD  3  4C D8 06     	jmp skobj2		; no, ignore object.
0006D0  3               :
0006D0  3  68           	pla			; remove return address from stack.
0006D1  3  68           	pla
0006D2  3               
0006D2  3  AD 39 02     	lda numob 		; objects in game.
0006D5  3  38           	sec
0006D6  3  E5 63        	sbc z80_b		; subtract loop counter.
0006D8  3               skobj2:
0006D8  3  60           	rts			; accumulator now points to object.
0006D9  3               
0006D9  3               
0006D9  3               ;---------------------------------------------------------------------
0006D9  3               ; Spawn a new sprite.
0006D9  3               ;---------------------------------------------------------------------
0006D9  3               
0006D9  3               spawn:
0006D9  3  A9 2D        	lda #<sprtab		; sprite table.
0006DB  3  85 66        	sta z80_l
0006DD  3  A9 18        	lda #>sprtab
0006DF  3  85 67        	sta z80_h
0006E1  3               numsp1:
0006E1  3  A9 0C        	lda #NUMSPR		; number of sprites.
0006E3  3  8D 7A 07     	sta spcnt
0006E6  3               spaw0:
0006E6  3  A0 00        	ldy #0
0006E8  3  B1 66        	lda (z80_hl),y		; get sprite type.
0006EA  3  C9 FF        	cmp #255		; is it an unused slot?
0006EC  3  F0 10        	beq spaw1 		; yes, we can use this one.
0006EE  3               
0006EE  3  18           	clc 			; point to next sprite in table.
0006EF  3  A5 66        	lda z80_l
0006F1  3  69 11        	adc #TABSIZ		; size of each entry.
0006F3  3  85 66        	sta z80_l
0006F5  3  90 02        	bcc :+
0006F7  3  E6 67        	inc z80_h
0006F9  3               :
0006F9  3  CE 7A 07     	dec spcnt		; one less iteration.
0006FC  3  D0 E8        	bne spaw0		; keep going until we find a slot.
0006FE  3               
0006FE  3               ; Didn't find one but drop through and set up a dummy sprite instead.
0006FE  3               
0006FE  3               spaw1:
0006FE  3  A5 69        	lda z80_i		; address of original sprite.
000700  3  48           	pha
000701  3  A5 68        	lda z80_x
000703  3  48           	pha
000704  3               
000704  3  A5 66        	lda z80_l		; store spawned sprite address.
000706  3  8D 7B 07     	sta spptr
000709  3  A5 67        	lda z80_h
00070B  3  8D 7C 07     	sta spptr+1
00070E  3               
00070E  3  A5 62        	lda z80_c
000710  3  A0 00        	ldy #0
000712  3  91 66        	sta (z80_hl),y 		; set the type.
000714  3  A0 05        	ldy #5
000716  3  91 66        	sta (z80_hl),y		; copy
000718  3               
000718  3  A5 63        	lda z80_b
00071A  3  A0 01        	ldy #1
00071C  3  91 66        	sta (z80_hl),y		; set the image.
00071E  3  A0 06        	ldy #6
000720  3  91 66        	sta (z80_hl),y		; copy
000722  3               
000722  3  A9 00        	lda #0 			; frame zero.
000724  3  A0 02        	ldy #2
000726  3  91 66        	sta (z80_hl),y		; set frame.
000728  3  A0 07        	ldy #7
00072A  3  91 66        	sta (z80_hl),y		; copy
00072C  3               
00072C  3  A0 08        	ldy #8
00072E  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000730  3  A0 03        	ldy #3
000732  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
000734  3  A0 08        	ldy #8
000736  3  91 66        	sta (z80_hl),y		; copy
000738  3               
000738  3  A0 09        	ldy #9
00073A  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00073C  3  A0 04        	ldy #4
00073E  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
000740  3  A0 09        	ldy #9
000742  3  91 66        	sta (z80_hl),y		; copy
000744  3               
000744  3  A0 0A        	ldy #10			; direction of original.
000746  3  B1 68        	lda (z80_ix),y
000748  3  91 66        	sta (z80_hl),y		; direction
00074A  3               
00074A  3  A9 00        	lda #0
00074C  3  A0 0B        	ldy #11
00074E  3  91 66        	sta (z80_hl),y		; reset parameter.
000750  3  C8           	iny
000751  3  91 66        	sta (z80_hl),y		; reset parameter.
000753  3  C8           	iny
000754  3  91 66        	sta (z80_hl),y		; reset parameter.
000756  3  C8           	iny
000757  3  91 66        	sta (z80_hl),y		; reset parameter.
000759  3               rtssp:
000759  3  AD 7B 07     	lda spptr		; address of new sprite.
00075C  3  85 68        	sta z80_x
00075E  3  AD 7C 07     	lda spptr+1
000761  3  85 69        	sta z80_i
000763  3               evis1:
000763  3  20 DA 19     	jsr evnt09 		; call sprite initialisation event.
000766  3               
000766  3  AD 7B 07     	lda spptr 		; address of new sprite.
000769  3  85 68        	sta z80_x
00076B  3  AD 7C 07     	lda spptr+1
00076E  3  85 69        	sta z80_i
000770  3  20 72 12     	jsr sspria 		; display the new sprite.
000773  3               
000773  3  68           	pla			; address of original sprite.
000774  3  85 68        	sta z80_x
000776  3  68           	pla
000777  3  85 69        	sta z80_i
000779  3               
000779  3  60           	rts
00077A  3               
00077A  3  00           spcnt:	.byte 0
00077B  3  00 00        spptr:	.word 0			; spawned sprite pointer.
00077D  3  00           seed:	.byte 0			; seed for random numbers.
00077E  3  30 30 30 30  score:	.byte "000000"		; player"s score.
000782  3  30 30        
000784  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
000788  3  30 30        
00078A  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
00078E  3  30 30        
000790  3  00 80        grbase:	.word ScreenAddr	; graphics base address.
000792  3               
000792  3               ;----------------------------------------------------
000792  3               ; Check y-pos
000792  3               ;----------------------------------------------------
000792  3               
000792  3               checkx:
000792  3  AD 64 02     	lda dispy		; y position.
000795  3  C9 18        	cmp #24			; off screen?
000797  3  B0 01        	bcs :+
000799  3  60           	rts			; no, it's okay.
00079A  3               :
00079A  3  68           	pla			; remove return address from stack.
00079B  3  85 66        	sta z80_l
00079D  3  68           	pla
00079E  3  85 67        	sta z80_h
0007A0  3  60           	rts
0007A1  3               
0007A1  3               ;-----------------------------------------------
0007A1  3               ; Displays the current high score.
0007A1  3               ;-----------------------------------------------
0007A1  3               
0007A1  3               dhisc:
0007A1  3  A9 84        	lda #<hiscor 		; high score text.
0007A3  3  85 66        	sta z80_l
0007A5  3  A9 07        	lda #>hiscor
0007A7  3  85 67        	sta z80_h
0007A9  3  4C B4 07     	jmp dscor1		; check in printable range then show 6 digits.
0007AC  3               
0007AC  3               ;------------------------------------------------------
0007AC  3               ; Displays the current score.
0007AC  3               ;------------------------------------------------------
0007AC  3               
0007AC  3               dscor:
0007AC  3  A9 7E        	lda #<score		; score text.
0007AE  3  85 66        	sta z80_l
0007B0  3  A9 07        	lda #>score
0007B2  3  85 67        	sta z80_h
0007B4  3               dscor1:
0007B4  3  20 00 10     	jsr preprt		; set up font and print position.
0007B7  3  20 92 07     	jsr checkx		; make sure we're in a printable range.
0007BA  3               
0007BA  3  A9 06        	lda #6			; digits to display.
0007BC  3  85 63        	sta z80_b
0007BE  3  AD 42 0F     	lda prtmod		; get print mode.
0007C1  3  F0 03        	beq :+			; standard size text?
0007C3  3  4C E7 07     	jmp bscor0		; no, show double-height.
0007C6  3               :
0007C6  3               dscor0:
0007C6  3  A0 00        	ldy #0
0007C8  3  B1 66        	lda (z80_hl),y 		; fetch character.
0007CA  3  20 12 09     	jsr pchar 		; display character.
0007CD  3  EE 63 02     	inc dispx		; move along x coordinate
0007D0  3               
0007D0  3  E6 66        	inc z80_l		; next score column.
0007D2  3  D0 02        	bne :+
0007D4  3  E6 67        	inc z80_h
0007D6  3               :
0007D6  3  C6 63        	dec z80_b
0007D8  3  D0 EC        	bne dscor0 		; repeat for all digits.
0007DA  3               dscor2:
0007DA  3  AD 63 02     	lda dispx 		; set up display coordinates.
0007DD  3  8D 58 02     	sta charx
0007E0  3  AD 64 02     	lda dispy
0007E3  3  8D 59 02     	sta chary
0007E6  3  60           	rts
0007E7  3               
0007E7  3               ;------------------------------------------------------
0007E7  3               ; Displays the current score in double-height characters.
0007E7  3               ;
0007E7  3               ; Input:
0007E7  3               ;  B  = digit number
0007E7  3               ;  HL = score string
0007E7  3               ;------------------------------------------------------
0007E7  3               
0007E7  3               bscor0:
0007E7  3  A0 00        	ldy #0
0007E9  3               
0007E9  3  B1 66        	lda (z80_hl),y 		; fetch character.
0007EB  3  20 7A 0F     	jsr bchar 		; display big char.
0007EE  3               
0007EE  3  E6 66        	inc z80_l 		; next score column.
0007F0  3  D0 02        	bne :+
0007F2  3  E6 67        	inc z80_h
0007F4  3               :
0007F4  3  C6 63        	dec z80_b
0007F6  3  F0 03        	beq :+
0007F8  3  4C E7 07     	jmp bscor0 		; repeat for all digits.
0007FB  3               :
0007FB  3  4C DA 07     	jmp dscor2 		; tidy up line and column variables.
0007FE  3               
0007FE  3               ;-----------------------------------------------------
0007FE  3               ; Adds number in the hl pair to the score.
0007FE  3               ;-----------------------------------------------------
0007FE  3               
0007FE  3               addsc:
0007FE  3  A9 7F        	lda #<(score+1) 	; ten thousands column.
000800  3  85 64        	sta z80_e
000802  3  A9 07        	lda #>(score+1)
000804  3  85 65        	sta z80_d
000806  3  A9 10        	lda #<10000		; amount to add each time.
000808  3  85 62        	sta z80_c
00080A  3  A9 27        	lda #>10000
00080C  3  85 63        	sta z80_b
00080E  3  20 52 08     	jsr incsc		; add to score.
000811  3               
000811  3  E6 64        	inc z80_e		; thousands column.
000813  3  D0 02        	bne :+
000815  3  E6 65        	inc z80_d
000817  3               :
000817  3  A9 E8        	lda #<1000		; amount to add each time.
000819  3  85 62        	sta z80_c
00081B  3  A9 03        	lda #>1000
00081D  3  85 63        	sta z80_b
00081F  3  20 52 08     	jsr incsc 		; add to score.
000822  3               
000822  3  E6 64        	inc z80_e		; hundreds column.
000824  3  D0 02        	bne :+
000826  3  E6 65        	inc z80_d
000828  3               :
000828  3  A9 64        	lda #<100		; amount to add each time.
00082A  3  85 62        	sta z80_c
00082C  3  A9 00        	lda #>100
00082E  3  85 63        	sta z80_b
000830  3  20 52 08     	jsr incsc		; add to score.
000833  3               
000833  3  E6 64        	inc z80_e 		; tens column.
000835  3  D0 02        	bne :+
000837  3  E6 65        	inc z80_d
000839  3               :
000839  3  A9 0A        	lda #<10		; amount to add each time.
00083B  3  85 62        	sta z80_c
00083D  3  A9 00        	lda #>10
00083F  3  85 63        	sta z80_b
000841  3  20 52 08     	jsr incsc 		; add to score.
000844  3               
000844  3  E6 64        	inc z80_e		; units column.
000846  3  D0 02        	bne :+
000848  3  E6 65        	inc z80_d
00084A  3               :
00084A  3  A9 01        	lda #<1			; units.
00084C  3  85 62        	sta z80_c
00084E  3  A9 00        	lda #>1
000850  3  85 63        	sta z80_b
000852  3               incsc:
000852  3  A5 67        	lda z80_h		; store amount to add.
000854  3  48           	pha
000855  3  A5 66        	lda z80_l
000857  3  48           	pha
000858  3               
000858  3  38           	sec			; subtract from amount to add.
000859  3  A5 66        	lda z80_l
00085B  3  E5 62        	sbc z80_c
00085D  3  85 66        	sta z80_l
00085F  3  A5 67        	lda z80_h
000861  3  E5 63        	sbc z80_b
000863  3  85 67        	sta z80_h
000865  3  90 14        	bcc incsc0		; too much, restore value.
000867  3               
000867  3  68           	pla			; delete the previous amount from the stack.
000868  3  68           	pla
000869  3               
000869  3  A5 65        	lda z80_d 		; store column position.
00086B  3  48           	pha
00086C  3  A5 64        	lda z80_e
00086E  3  48           	pha
00086F  3  20 82 08     	jsr incsc2		; do the increment.
000872  3               
000872  3  68           	pla			; restore column.
000873  3  85 64        	sta z80_e
000875  3  68           	pla
000876  3  85 65        	sta z80_d
000878  3  4C 52 08     	jmp incsc		; repeat until all added.
00087B  3               
00087B  3               incsc0:
00087B  3  68           	pla			; restore previous value.
00087C  3  85 66        	sta z80_l
00087E  3  68           	pla
00087F  3  85 67        	sta z80_h
000881  3  60           	rts
000882  3               incsc2:
000882  3  A0 00        	ldy #0
000884  3  B1 64        	lda (z80_de),y 		; get amount.
000886  3  18           	clc
000887  3  69 01        	adc #1			; add one to column.
000889  3  91 64        	sta (z80_de),y		; write new column total.
00088B  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
00088D  3  B0 01        	bcs :+
00088F  3  60           	rts			; no, carry on.
000890  3               :
000890  3  A9 30        	lda #'0'		; make it zero.
000892  3  91 64        	sta (z80_de),y		; write new column total.
000894  3  C6 64        	dec z80_e		; back one column.
000896  3  D0 02        	bne :+
000898  3  C6 65        	dec z80_d
00089A  3               :
00089A  3  4C 82 08     	jmp incsc2
00089D  3               
00089D  3               ;------------------------------------
00089D  3               ; Add bonus to score and reset bonus
00089D  3               ;------------------------------------
00089D  3               
00089D  3               addbo:
00089D  3  A2 05        	ldx #5			; last digit.
00089F  3  18           	clc			; clear carry.
0008A0  3               addbo0:
0008A0  3  BD 7E 07     	lda score,x		; get score.
0008A3  3  7D 8A 07     	adc bonus,x		; add bonus.
0008A6  3  38           	sec			; 0 to 18.
0008A7  3  E9 30        	sbc #48
0008A9  3  48           	pha
0008AA  3  A9 30        	lda #'0'
0008AC  3  9D 8A 07     	sta bonus,x		; zeroise bonus.
0008AF  3  68           	pla
0008B0  3  C9 3A        	cmp #58			; carried?
0008B2  3  B0 07        	bcs addbo2		; no, do next one.
0008B4  3  38           	sec
0008B5  3  E9 0A        	sbc #10			; subtract 10.
0008B7  3  38           	sec
0008B8  3  4C BC 08     	jmp addbo1
0008BB  3               addbo2:
0008BB  3  18           	clc
0008BC  3               addbo1:
0008BC  3  9D 7E 07     	sta score,x		; write new score.
0008BF  3  CA           	dex			; next digit.
0008C0  3  10 DE        	bpl addbo0		; repeat for all 6 digits.
0008C2  3  60           	rts
0008C3  3               
0008C3  3               ;------------------------------------
0008C3  3               ; Swap score and bonus.
0008C3  3               ;------------------------------------
0008C3  3               
0008C3  3               swpsb:
0008C3  3  A2 05        	ldx #5			; digits to add.
0008C5  3               swpsb0:
0008C5  3  BD 7E 07     	lda score,x 		; get score digits.
0008C8  3  48           	pha			; save digit
0008C9  3  BD 8A 07     	lda bonus,x 		; get bonus digits.
0008CC  3  9D 7E 07     	sta score,x		; switch score-bonus
0008CF  3  68           	pla
0008D0  3  9D 8A 07     	sta bonus,x
0008D3  3  CA           	dex 			; repeat for all 6 digits.
0008D4  3  10 EF        	bpl swpsb0
0008D6  3  60           	rts
0008D7  3               
0008D7  3               ;----------------------------------------------------
0008D7  3               ; Get print address.
0008D7  3               ;----------------------------------------------------
0008D7  3               
0008D7  3               gprad:
0008D7  3  AD 63 02     	lda dispx		; get x
0008DA  3  85 80        	sta scraddr		; store lb address
0008DC  3  AD 64 02     	lda dispy		; get y
0008DF  3  09 80        	ora #$80		; add $80
0008E1  3  85 81        	sta scraddr+1		; store hb address
0008E3  3  60           	rts
0008E4  3               
0008E4  3               ;--------------------------------------------------------------
0008E4  3               ; Get property buffer address of char at (dispx, dispy) in hl.
0008E4  3               ; 
0008E4  3               ; Output:
0008E4  3               ;  bufaddr = MAP + dispy*32 + dispx
0008E4  3               ;--------------------------------------------------------------
0008E4  3               
0008E4  3               pradd:
0008E4  3  AD 64 02     	lda dispy 		; y coordinate.
0008E7  3  85 86        	sta bufaddr
0008E9  3  A9 00        	lda #0
0008EB  3  85 87        	sta bufaddr+1
0008ED  3  06 86        	asl bufaddr  		; multiply char by 32
0008EF  3  26 87        	rol bufaddr+1
0008F1  3  06 86        	asl bufaddr
0008F3  3  26 87        	rol bufaddr+1
0008F5  3  06 86        	asl bufaddr
0008F7  3  26 87        	rol bufaddr+1
0008F9  3  06 86        	asl bufaddr
0008FB  3  26 87        	rol bufaddr+1
0008FD  3  06 86        	asl bufaddr
0008FF  3  26 87        	rol bufaddr+1
000901  3  18           	clc			; add address of MAP graphics.
000902  3  A5 86        	lda bufaddr
000904  3  6D 63 02     	adc dispx
000907  3  69 00        	adc #<MAP
000909  3  85 86        	sta bufaddr
00090B  3  A5 87        	lda bufaddr+1
00090D  3  69 98        	adc #>MAP
00090F  3  85 87        	sta bufaddr+1
000911  3  60           	rts
000912  3               
000912  3               ;----------------------------------------------------
000912  3               ; Display character in A at dispx,dispy.
000912  3               ;
000912  3               ; Input:
000912  3               ;  A 	   = character to print
000912  3               ;----------------------------------------------------
000912  3               
000912  3               pchar:
000912  3  85 82        	sta fntaddr
000914  3  A9 00        	lda #0
000916  3  85 83        	sta fntaddr+1
000918  3  06 82        	asl fntaddr  		; multiply char by 8.
00091A  3  26 83        	rol fntaddr+1
00091C  3  06 82        	asl fntaddr
00091E  3  26 83        	rol fntaddr+1
000920  3  06 82        	asl fntaddr
000922  3  26 83        	rol fntaddr+1
000924  3               
000924  3  A5 82        	lda fntaddr
000926  3  18           	clc
000927  3  6D 0C 19     	adc FontPtr
00092A  3  85 82        	sta fntaddr		; that's the low byte.
00092C  3  A5 83        	lda fntaddr+1
00092E  3  6D 0D 19     	adc FontPtr+1
000931  3  85 83        	sta fntaddr+1		; add displacement.
000933  3               pchark:
000933  3  20 D7 08     	jsr gprad		; get screen address.
000936  3  A2 07        	ldx #7			; lines to write.
000938  3               pchar0:
000938  3  A0 00        	ldy #0
00093A  3  B1 82        	lda (fntaddr),y 	; get image byte.
00093C  3  BC 4D 09     	ldy scrtab,x		; Get rowoffset
00093F  3               
00093F  3  49 00        	eor #TxtInvert		; Invert
000941  3               
000941  3  91 80        	sta (scraddr),y 	; copy to screen.
000943  3  E6 82        	inc fntaddr		; next image byte.
000945  3  D0 02        	bne :+
000947  3  E6 83        	inc fntaddr+1
000949  3               :
000949  3  CA           	dex			; next screen row down.
00094A  3  10 EC        	bpl pchar0		; repeat.
00094C  3  60           	rts
00094D  3               
00094D  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
000951  3  60 40 20 00  
000955  3               
000955  3               ;----------------------------------------------
000955  3               ; Print attributes, properties and pixels.
000955  3               ;
000955  3               ; Input:
000955  3               ;  A	= tile number
000955  3               ;----------------------------------------------
000955  3               
000955  3  00           colpatt:	.byte 0
000956  3               
000956  3               pattr:
000956  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000956  3               .if aflag
000956  3               	pha
000956  3               	jsr wbloc		; save blockinfo
000956  3               	pla
000956  3               .endif
000956  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000956  3               
000956  3               pattr2:
000956  3  85 63        	sta z80_b		; store cell in b register for now.
000958  3  AA           	tax
000959  3  BD 35 1A     	lda bprop,x 		; block properties.
00095C  3  85 62        	sta z80_c
00095E  3  C9 08        	cmp #COLECT
000960  3  D0 05        	bne :+
000962  3  A5 63        	lda z80_b
000964  3  8D 55 09     	sta colpatt
000967  3               :
000967  3  20 E4 08     	jsr pradd 		; get property buffer address.
00096A  3  A5 62        	lda z80_c
00096C  3  A0 00        	ldy #0
00096E  3  91 86        	sta (bufaddr),y 	; write property.
000970  3  A5 63        	lda z80_b 		; restore cell.
000972  3               
000972  3               ; Print attributes, no properties.
000972  3               
000972  3               panp:
000972  3  85 64        	sta z80_e		; displacement in e.
000974  3  A9 00        	lda #0
000976  3  85 65        	sta z80_d		; no high byte.
000978  3  06 64        	asl z80_e  		; multiply char by 8.
00097A  3  26 65        	rol z80_d
00097C  3  06 64        	asl z80_e
00097E  3  26 65        	rol z80_d
000980  3  06 64        	asl z80_e
000982  3  26 65        	rol z80_d
000984  3  18           	clc
000985  3  A5 64        	lda z80_e
000987  3  69 15        	adc #<chgfx 		; address of graphics.
000989  3  85 84        	sta tileaddr
00098B  3  A5 65        	lda z80_d
00098D  3  69 1A        	adc #>chgfx
00098F  3  85 85        	sta tileaddr+1
000991  3  20 D7 08     	jsr gprad 		; get screen address.
000994  3  A2 07        	ldx #7			; number of pixel rows to write.
000996  3               panp0:
000996  3  A0 00        	ldy #0
000998  3  B1 84        	lda (tileaddr),y 	; get image byte.
00099A  3  49 00        	eor #TxtInvert		; Invert
00099C  3  BC 4D 09     	ldy scrtab,x
00099F  3  91 80        	sta (scraddr),y 	; copy to screen.
0009A1  3  E6 84        	inc tileaddr 		; next image byte.
0009A3  3  D0 02        	bne :+
0009A5  3  E6 85        	inc tileaddr+1
0009A7  3               :
0009A7  3  CA           	dex	 		; repeat for 8 pixel rows.
0009A8  3  10 EC        	bpl panp0
0009AA  3  EE 63 02     	inc dispx 		; move along one.
0009AD  3  EE 58 02     	inc charx
0009B0  3  60           	rts
0009B1  3               
0009B1  3               ;----------------------------------------------
0009B1  3               ; Write block
0009B1  3               ;----------------------------------------------
0009B1  3               
0009B1  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0009B1  3               .if aflag
0009B1  3               wbloc:
0009B1  3               	ldy #3
0009B1  3               	sta (pbptr),y		; store block number
0009B1  3               	dey
0009B1  3               	lda dispx
0009B1  3               	sta (pbptr),y		; write x position of block.
0009B1  3               	dey
0009B1  3               	lda dispy
0009B1  3               	sta (pbptr),y		; write y position of block.
0009B1  3               	dey
0009B1  3               	lda scno
0009B1  3               	sta (pbptr),y		; write screen.
0009B1  3               	clc			; point to next free location
0009B1  3               	lda pbptr
0009B1  3               	adc #4
0009B1  3               	sta pbptr
0009B1  3               	bcc :+
0009B1  3               	inc pbptr+1
0009B1  3               :
0009B1  3               	rts
0009B1  3               .endif
0009B1  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0009B1  3               
0009B1  3               ;----------------------------------------------
0009B1  3               ; Print character pixels, no more.
0009B1  3               ;
0009B1  3               ; Input:
0009B1  3               ;  A	= character to print
0009B1  3               ;----------------------------------------------
0009B1  3               
0009B1  3               pchr:
0009B1  3  20 12 09     	jsr pchar 		; show character in accumulator.
0009B4  3  EE 63 02     	inc dispx		; move along one.
0009B7  3  60           	rts
0009B8  3               
0009B8  3               ;----------------------------------------------------
0009B8  3               ; Shifter sprite routine for objects.
0009B8  3               ;----------------------------------------------------
0009B8  3               
0009B8  3               sprit7:
0009B8  3  A5 63        	lda z80_b
0009BA  3  F0 0F        	beq sprit0
0009BC  3  85 61        	sta z80_a
0009BE  3               sprit3:
0009BE  3  4E 4F 0A     	lsr spr			; shift into position.
0009C1  3  6E 50 0A     	ror spr+1
0009C4  3  6E 51 0A     	ror spr+2
0009C7  3  C6 61        	dec z80_a		; one less iteration.
0009C9  3  D0 F3        	bne sprit3
0009CB  3               sprit0:
0009CB  3  60           	rts 			; now apply to screen.
0009CC  3               
0009CC  3               ;----------------------------------------------------
0009CC  3               ; Draw sprite
0009CC  3               ;----------------------------------------------------
0009CC  3               
0009CC  3               sprite:
0009CC  3  8E 52 0A     	stx xtmp		; Save X-reg
0009CF  3  20 4F 12     	jsr scadd 		; get screen address in scraddr.
0009D2  3               
0009D2  3  AD 63 02     	lda dispx 		; x position.
0009D5  3  29 07        	and #7 			; position straddling cells.
0009D7  3  85 63        	sta z80_b		; store in b register.
0009D9  3               
0009D9  3  A5 66        	lda z80_l		; store sprite graphic address.
0009DB  3  8D EE 09     	sta sprit1+1
0009DE  3  8D F5 09     	sta sprit2+1
0009E1  3  A5 67        	lda z80_h
0009E3  3  8D EF 09     	sta sprit1+2
0009E6  3  8D F6 09     	sta sprit2+2
0009E9  3               
0009E9  3  A2 00        	ldx #0			; pixel height.
0009EB  3  A0 00        	ldy #0
0009ED  3               sprit1:
0009ED  3  BD 90 1D     	lda objdta,x		; fetch first byte.
0009F0  3  8D 4F 0A     	sta spr
0009F3  3  E8           	inx
0009F4  3               sprit2:
0009F4  3  BD 90 1D     	lda objdta,x
0009F7  3  8D 50 0A     	sta spr+1
0009FA  3               
0009FA  3  A9 00        	lda #0
0009FC  3  8D 51 0A     	sta spr+2
0009FF  3  20 B8 09     	jsr sprit7		; shift sprite
000A02  3               
000A02  3  CA           	dex
000A03  3  AD 4F 0A     	lda spr			; fetch graphic.
000A06  3  BC 2F 0A     	ldy spritetab,x
000A09  3  51 80        	eor (scraddr),y		; merge with screen image.
000A0B  3  91 80        	sta (scraddr),y		; write to screen.
000A0D  3  E8           	inx			; next screen byte.
000A0E  3               
000A0E  3  AD 50 0A     	lda spr+1		; fetch graphic.
000A11  3  BC 2F 0A     	ldy spritetab,x
000A14  3  51 80        	eor (scraddr),y		; merge with screen image.
000A16  3  91 80        	sta (scraddr),y		; write to screen.
000A18  3  C8           	iny
000A19  3               
000A19  3  AD 51 0A     	lda spr+2		; fetch graphic.
000A1C  3  51 80        	eor (scraddr),y		; merge with screen image.
000A1E  3  91 80        	sta (scraddr),y		; write to screen.
000A20  3               
000A20  3  E8           	inx			; next source byte.
000A21  3  E0 10        	cpx #16
000A23  3  D0 02        	bne :+
000A25  3  E6 81        	inc scraddr+1
000A27  3               :
000A27  3  E0 20        	cpx #32
000A29  3  D0 C2        	bne sprit1		; repeat
000A2B  3               
000A2B  3  AE 52 0A     	ldx xtmp		; retreive X-reg
000A2E  3  60           	rts
000A2F  3               
000A2F  3               spritetab:
000A2F  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
000A33  3  40 41 60 61  
000A37  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
000A3B  3  C0 C1 E0 E1  
000A3F  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
000A43  3  40 41 60 61  
000A47  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
000A4B  3  C0 C1 E0 E1  
000A4F  3               
000A4F  3  00 00 00     spr:	.byte 0,0,0
000A52  3               
000A52  3  00           xtmp:	.byte 0
000A53  3               
000A53  3               ;-----------------------------------------------------------
000A53  3               ; Get room address.
000A53  3               ;-----------------------------------------------------------
000A53  3               
000A53  3               groom:
000A53  3  AE 3E 02     	ldx scno 		; screen number.
000A56  3  A0 00        	ldy #0
000A58  3               groomx:
000A58  3  A9 3D        	lda #<scdat 		; pointer to screens.
000A5A  3  85 66        	sta z80_l
000A5C  3  A9 1C        	lda #>scdat
000A5E  3  85 67        	sta z80_h
000A60  3               groom1:
000A60  3  E0 00        	cpx #0			; is it the first one?
000A62  3  F0 15        	beq groom0 		; no more screens to skip.
000A64  3               
000A64  3  18           	clc
000A65  3  A5 66        	lda z80_l
000A67  3  79 3D 1C     	adc scdat,y 		; low byte of screen size.
000A6A  3  85 66        	sta z80_l
000A6C  3  C8           	iny			; point to high byte.
000A6D  3  A5 67        	lda z80_h
000A6F  3  79 3D 1C     	adc scdat,y 		; high byte of screen size.
000A72  3  85 67        	sta z80_h
000A74  3  C8           	iny			; next address.
000A75  3               
000A75  3  CA           	dex 			; one less iteration.
000A76  3  4C 60 0A     	jmp groom1 		; loop until we reach the end.
000A79  3               groom0:
000A79  3  AD 8A 1D     	lda numsc 		; add displacement.
000A7C  3  0A           	asl a
000A7D  3  18           	clc			; add double displacement to address.
000A7E  3  65 66        	adc z80_l
000A80  3  85 66        	sta z80_l
000A82  3  A5 67        	lda z80_h
000A84  3  69 00        	adc #0
000A86  3  85 67        	sta z80_h
000A88  3  60           	rts
000A89  3               
000A89  3               ;-----------------------------------------------------------
000A89  3               ; Draw present room.
000A89  3               ;-----------------------------------------------------------
000A89  3               
000A89  3               droom:
000A89  3  AD 35 02     	lda wintop 		; window top.
000A8C  3  8D 64 02     	sta dispy		; set cursor y position.
000A8F  3               droom2:
000A8F  3  20 53 0A     	jsr groom 		; get address of current room.
000A92  3  A9 00        	lda #0	 		; zero in accumulator.
000A94  3  8D F1 0A     	sta comcnt 		; reset compression counter.
000A97  3  AD 37 02     	lda winhgt 		; height of window.
000A9A  3  8D BE 0A     	sta rrow		; set row counter
000A9D  3               droom0:
000A9D  3  AD 36 02     	lda winlft 		; window left edge.
000AA0  3  8D 63 02     	sta dispx 		; set cursor x position.
000AA3  3  AD 38 02     	lda winwid 		; width of window.
000AA6  3  8D BD 0A     	sta rcol		; set column counter
000AA9  3               droom1:
000AA9  3  20 BF 0A     	jsr flbyt 		; decompress next byte on the fly.
000AAC  3  20 56 09     	jsr pattr2 		; show attributes and block.
000AAF  3  CE BD 0A     	dec rcol		; one less column.
000AB2  3  D0 F5        	bne droom1 		; repeat for entire line.
000AB4  3  EE 64 02     	inc dispy		; move down one line.
000AB7  3  CE BE 0A     	dec rrow 		; one less row.
000ABA  3  D0 E1        	bne droom0 		; repeat for all rows.
000ABC  3  60           	rts
000ABD  3               
000ABD  3  00           rcol:	.byte 0
000ABE  3  00           rrow:	.byte 0
000ABF  3               
000ABF  3               ;----------------------------------------------
000ABF  3               ; Decompress bytes on-the-fly.
000ABF  3               ;----------------------------------------------
000ABF  3               
000ABF  3               flbyt:
000ABF  3  AD F1 0A     	lda comcnt 		; compression counter.
000AC2  3  D0 22        	bne flbyt1		; any more to decompress?  yes.
000AC4  3               
000AC4  3  A0 00        	ldy #0
000AC6  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
000AC8  3  E6 66        	inc z80_l 		; point to next cell.
000ACA  3  D0 02        	bne :+
000ACC  3  E6 67        	inc z80_h
000ACE  3               :
000ACE  3  C9 FF        	cmp #255 		; is this byte a control code?
000AD0  3  F0 01        	beq :+
000AD2  3  60           	rts 			; no, this byte is uncompressed.
000AD3  3               :
000AD3  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
000AD5  3  8D F0 0A     	sta combyt 		; set up the type.
000AD8  3  E6 66        	inc z80_l 		; point to quantity.
000ADA  3  D0 02        	bne :+
000ADC  3  E6 67        	inc z80_h
000ADE  3               :
000ADE  3  B1 66        	lda (z80_hl),y 		; get quantity.
000AE0  3  E6 66        	inc z80_l 		; point to next byte.
000AE2  3  D0 02        	bne :+
000AE4  3  E6 67        	inc z80_h
000AE6  3               :
000AE6  3               flbyt1:
000AE6  3  8D F1 0A     	sta comcnt 		; store new quantity.
000AE9  3  CE F1 0A     	dec comcnt		; one less.
000AEC  3  AD F0 0A     	lda combyt 		; byte to expand.
000AEF  3  60           	rts
000AF0  3               
000AF0  3  00           combyt:	.byte 0			; byte type compressed.
000AF1  3  00           comcnt:	.byte 0			; compression counter.
000AF2  3               
000AF2  3               ;------------------------------------------
000AF2  3               ; Ladder down check.
000AF2  3               ;
000AF2  3               ; Input:
000AF2  3               ;  IX = sprite pointer
000AF2  3               ;------------------------------------------
000AF2  3               
000AF2  3               laddd:
000AF2  3  A0 09        	ldy #9
000AF4  3  B1 68        	lda (z80_ix),y		; x coordinate.
000AF6  3  8D 63 02     	sta dispx
000AF9  3               
000AF9  3  A0 08        	ldy #8
000AFB  3  B1 68        	lda (z80_ix),y		; y coordinate.
000AFD  3  29 FE        	and #254		; make it even.
000AFF  3  91 68        	sta (z80_ix),y 		; reset it.
000B01  3               numsp5:
000B01  3  18           	clc 			; look down 16 pixels.
000B02  3  69 10        	adc #16
000B04  3  8D 64 02     	sta dispy		; coords in dispx,dispy.
000B07  3  4C 1F 0B     	jmp laddv
000B0A  3               
000B0A  3               ;------------------------------------------
000B0A  3               ; Ladder up check.
000B0A  3               ;
000B0A  3               ; Input:
000B0A  3               ;  IX = sprite pointer
000B0A  3               ;
000B0A  3               ; Output:
000B0A  3               ;  A  = 0 is ok, A <>0 is not ok
000B0A  3               ;------------------------------------------
000B0A  3               
000B0A  3               laddu:
000B0A  3  A0 09        	ldy #9
000B0C  3  B1 68        	lda (z80_ix),y		; x coordinate.
000B0E  3  8D 63 02     	sta dispx
000B11  3               
000B11  3  A0 08        	ldy #8
000B13  3  B1 68        	lda (z80_ix),y		; y coordinate.
000B15  3  29 FE        	and #254 		; make it even.
000B17  3  91 68        	sta (z80_ix),y		; reset it.
000B19  3               numsp6:
000B19  3  18           	clc 			; look 2 pixels above feet.
000B1A  3  69 0E        	adc #14
000B1C  3  8D 64 02     	sta dispy		; coords in dispx,dispy.
000B1F  3               laddv:
000B1F  3  20 80 0D     	jsr tstbl 		; get map address.
000B22  3  20 39 0C     	jsr ldchk 		; standard ladder check.
000B25  3  F0 01        	beq :+
000B27  3  60           	rts 			; no way through.
000B28  3               :
000B28  3  E6 86        	inc bufaddr 		; look right one cell.
000B2A  3  D0 02        	bne :+
000B2C  3  E6 87        	inc bufaddr+1
000B2E  3               :
000B2E  3  20 39 0C     	jsr ldchk 		; do the check.
000B31  3  F0 01        	beq :+
000B33  3  60           	rts 			; impassable.
000B34  3               :
000B34  3  AD 63 02     	lda dispx 		; y coordinate.
000B37  3  29 07        	and #7 			; position straddling block cells.
000B39  3  D0 01        	bne :+
000B3B  3  60           	rts 			; no more checks needed.
000B3C  3               :
000B3C  3  E6 86        	inc bufaddr 		; look to third cell.
000B3E  3  D0 02        	bne :+
000B40  3  E6 87        	inc bufaddr+1
000B42  3               :
000B42  3  20 39 0C     	jsr ldchk 		; do the check.
000B45  3  60           	rts  			; return with zero flag set accordingly.
000B46  3               
000B46  3               ;---------------------------------------------------------
000B46  3               ; Can go up check.
000B46  3               ;
000B46  3               ; Input:
000B46  3               ;  IX = sprite pointer
000B46  3               ;
000B46  3               ; Output:
000B46  3               ;  A  = 0 is ok, A <>0 is not ok
000B46  3               ;---------------------------------------------------------
000B46  3               
000B46  3               cangu:
000B46  3  A0 09        	ldy #9
000B48  3  B1 68        	lda (z80_ix),y		; x coordinate.
000B4A  3  8D 63 02     	sta dispx
000B4D  3  A0 08        	ldy #8
000B4F  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000B51  3  38           	sec
000B52  3  E9 02        	sbc #2
000B54  3  8D 64 02     	sta dispy		; coords in dispx,dispy.
000B57  3  20 80 0D     	jsr tstbl 		; get map address.
000B5A  3  20 03 0C     	jsr lrchk 		; standard left/right check.
000B5D  3  F0 01        	beq :+
000B5F  3  60           	rts			; no way through.
000B60  3               :
000B60  3  E6 86        	inc bufaddr		; look right one cell.
000B62  3  D0 02        	bne :+
000B64  3  E6 87        	inc bufaddr+1
000B66  3               :
000B66  3  20 03 0C     	jsr lrchk 		; do the check.
000B69  3  F0 01        	beq :+
000B6B  3  60           	rts			; impassable.
000B6C  3               :
000B6C  3  AD 63 02     	lda dispx		; x coordinate.
000B6F  3  29 07        	and #7			; position straddling block cells.
000B71  3  D0 01        	bne :+
000B73  3  60           	rts			; no more checks needed.
000B74  3               :
000B74  3  E6 86        	inc bufaddr		; look to third cell.
000B76  3  D0 02        	bne :+
000B78  3  E6 87        	inc bufaddr+1
000B7A  3               :
000B7A  3  20 03 0C     	jsr lrchk		; do the check.
000B7D  3  60           	rts 			; return with zero flag set accordingly.
000B7E  3               
000B7E  3               ;---------------------------------------------------------
000B7E  3               ; Can go down check.
000B7E  3               ;
000B7E  3               ; Input:
000B7E  3               ;  IX = sprite pointer
000B7E  3               ;
000B7E  3               ; Output:
000B7E  3               ;  A  = 0 is ok, A <>0 is not ok
000B7E  3               ;---------------------------------------------------------
000B7E  3               
000B7E  3               cangd:
000B7E  3  A0 09        	ldy #9
000B80  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000B82  3  8D 63 02     	sta dispx
000B85  3  A0 08        	ldy #8
000B87  3  B1 68        	lda (z80_ix),y		; y coordinate.
000B89  3               numsp3:
000B89  3  18           	clc
000B8A  3  69 10        	adc #16 		; look down 16 pixels.
000B8C  3  8D 64 02     	sta dispy		; coords in dispx,dispy.
000B8F  3  20 80 0D     	jsr tstbl 		; get map address.
000B92  3  20 18 0C     	jsr plchk 		; block, platform check.
000B95  3  F0 01        	beq :+
000B97  3  60           	rts			; no way through.
000B98  3               :
000B98  3  E6 86        	inc bufaddr		; look right one cell.
000B9A  3  D0 02        	bne :+
000B9C  3  E6 87        	inc bufaddr+1
000B9E  3               :
000B9E  3  20 18 0C     	jsr plchk		; block, platform check.
000BA1  3  F0 01        	beq :+
000BA3  3  60           	rts			; impassable.
000BA4  3               :
000BA4  3  AD 63 02     	lda dispx		; x coordinate.
000BA7  3  29 07        	and #7			; position straddling block cells.
000BA9  3  D0 01        	bne :+
000BAB  3  60           	rts			; no more checks needed.
000BAC  3               :
000BAC  3  E6 86        	inc bufaddr		; look to third cell.
000BAE  3  D0 02        	bne :+
000BB0  3  E6 87        	inc bufaddr+1
000BB2  3               :
000BB2  3  20 18 0C     	jsr plchk		; block, platform check.
000BB5  3  60           	rts			; return with zero flag set accordingly.
000BB6  3               
000BB6  3               ;---------------------------------------------------------
000BB6  3               ; Can go left check.
000BB6  3               ;
000BB6  3               ; Input:
000BB6  3               ;  IX = sprite pointer
000BB6  3               ;
000BB6  3               ; Output:
000BB6  3               ;  A  = 0 is ok, A <>0 is not ok
000BB6  3               ;---------------------------------------------------------
000BB6  3               
000BB6  3               cangl:
000BB6  3  A0 08        	ldy #8
000BB8  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000BBA  3  8D 64 02     	sta dispy
000BBD  3  A0 09        	ldy #9
000BBF  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000BC1  3  38           	sec
000BC2  3  E9 02        	sbc #2			; look left 2 pixels.
000BC4  3  8D 63 02     	sta dispx		; coords in dispx,dispy.
000BC7  3  4C DB 0B     	jmp cangh		; test if we can go there.
000BCA  3               
000BCA  3               ;---------------------------------------------------------
000BCA  3               ; Can go right check.
000BCA  3               ;
000BCA  3               ; Input:
000BCA  3               ;  IX = sprite pointer
000BCA  3               ;
000BCA  3               ; Output:
000BCA  3               ;  A  = 0 is ok, A <>0 is not ok
000BCA  3               ;---------------------------------------------------------
000BCA  3               
000BCA  3               cangr:
000BCA  3  A0 08        	ldy #8
000BCC  3  B1 68        	lda (z80_ix),y		; y coordinate.
000BCE  3  8D 64 02     	sta dispy
000BD1  3  A0 09        	ldy #9
000BD3  3  B1 68        	lda (z80_ix),y		; x coordinate.
000BD5  3  18           	clc
000BD6  3  69 10        	adc #16			; look right 16 pixels.
000BD8  3  8D 63 02     	sta dispx		; coords in dispx,dispy.
000BDB  3               cangh:
000BDB  3               cangh2:
000BDB  3  A9 03        	lda #3			; default rows to write.
000BDD  3  85 63        	sta z80_b
000BDF  3  AD 64 02     	lda dispy		; y position.
000BE2  3  29 07        	and #7			; does x straddle cells?
000BE4  3  D0 02        	bne cangh0		; yes, loop counter is good.
000BE6  3  C6 63        	dec z80_b		; one less row to write.
000BE8  3               cangh0:
000BE8  3  20 80 0D     	jsr tstbl		; get map address.
000BEB  3               cangh1:
000BEB  3  20 03 0C     	jsr lrchk		; standard left/right check.
000BEE  3  F0 01        	beq :+
000BF0  3  60           	rts			; no way through.
000BF1  3               :
000BF1  3  48           	pha
000BF2  3  18           	clc
000BF3  3  A5 86        	lda bufaddr
000BF5  3  69 20        	adc #32			; look down.
000BF7  3  85 86        	sta bufaddr
000BF9  3  90 02        	bcc :+
000BFB  3  E6 87        	inc bufaddr+1
000BFD  3               :
000BFD  3  68           	pla
000BFE  3               
000BFE  3  C6 63        	dec z80_b
000C00  3  D0 E9        	bne cangh1
000C02  3  60           	rts
000C03  3               
000C03  3               ;-------------------------------------
000C03  3               ; Check left/right movement is okay.
000C03  3               ;
000C03  3               ; Input:
000C03  3               ;  bufaddr = MAP + x/8 + y/8*32
000C03  3               ;
000C03  3               ; Output:
000C03  3               ;  A  = 0 is ok, A <>0 is not ok
000C03  3               ;-------------------------------------
000C03  3               
000C03  3               lrchk:
000C03  3  A0 00        	ldy #0
000C05  3  B1 86        	lda (bufaddr),y		; fetch map cell.
000C07  3  C9 02        	cmp #WALL 		; is it passable?
000C09  3  F0 0A        	beq lrchkx		; no.
000C0B  3               
000C0B  3  C9 04        	cmp #FODDER		; fodder has to be dug.
000C0D  3  F0 06        	beq lrchkx		; not passable.
000C0F  3  A9 00        	lda #0
000C11  3  60           	rts
000C12  3               
000C12  3               ;--------------------------------------------------------------
000C12  3               ; Called by mmenu
000C12  3               ;--------------------------------------------------------------
000C12  3               
000C12  3               always:
000C12  3  A9 FF        	lda #255		; report it as okay.
000C14  3  60           	rts
000C15  3               
000C15  3               lrchkx:
000C15  3  A9 01        	lda #1 			; reset all bits.
000C17  3  60           	rts
000C18  3               
000C18  3               
000C18  3               ;--------------------------------------------------------------
000C18  3               ; Check platform or solid item is not in way.
000C18  3               ;
000C18  3               ; Input:
000C18  3               ;  bufaddr = MAP + x/8 + y/8*32
000C18  3               ;
000C18  3               ; Output:
000C18  3               ;  A  = 0 is ok, A <>0 is not ok
000C18  3               ;--------------------------------------------------------------
000C18  3               
000C18  3               plchk:
000C18  3  A0 00        	ldy #0
000C1A  3  B1 86        	lda (bufaddr),y 	; fetch map cell.
000C1C  3  C9 02        	cmp #WALL 		; is it passable?
000C1E  3  F0 F5        	beq lrchkx		; no.
000C20  3               
000C20  3  C9 04        	cmp #FODDER		; fodder has to be dug.
000C22  3  F0 F1        	beq lrchkx		; not passable.
000C24  3               
000C24  3  C9 01        	cmp #PLATFM		; platform is solid.
000C26  3  F0 07        	beq plchkx		; not passable.
000C28  3               
000C28  3  C9 03        	cmp #LADDER		; is it a ladder?
000C2A  3  F0 E9        	beq lrchkx		; on ladder, deny movement.
000C2C  3               plchk0:
000C2C  3  A9 00        	lda #0			; report as ok
000C2E  3  60           	rts
000C2F  3               plchkx:
000C2F  3  AD 64 02     	lda dispy		; x coordinate.
000C32  3  29 07        	and #7			; position straddling blocks.
000C34  3  F0 DF        	beq lrchkx		; on platform, deny movement.
000C36  3  4C 2C 0C     	jmp plchk0
000C39  3               
000C39  3               ;--------------------------------------------------------------
000C39  3               ; Check ladder is available.
000C39  3               ;
000C39  3               ; Input:
000C39  3               ;  bufaddr = MAP + x/8 + y/8*32
000C39  3               ;
000C39  3               ; Output:
000C39  3               ;  A  = 0 is ok, A <>0 is not ok
000C39  3               ;--------------------------------------------------------------
000C39  3               
000C39  3               ldchk:
000C39  3  A0 00        	ldy #0
000C3B  3  B1 86        	lda (bufaddr),y 	; fetch cell.
000C3D  3  C9 03        	cmp #LADDER 		; is it a ladder?
000C3F  3  F0 03        	beq :+
000C41  3  A9 01        	lda #1
000C43  3  60           	rts  			; return with zero flag set accordingly.
000C44  3               :
000C44  3  A9 00        	lda #0
000C46  3  60           	rts
000C47  3               
000C47  3               ;--------------------------------------------------------------
000C47  3               ; Get collectables.
000C47  3               ;--------------------------------------------------------------
000C47  3               
000C47  3               getcol:
000C47  3  A9 08                lda #COLECT             ; collectable blocks.
000C49  3  85 63                sta z80_b
000C4B  3  20 C1 0C             jsr tded                ; test for collectable blocks.
000C4E  3  C5 63                cmp z80_b               ; did we find one?
000C50  3  F0 01                beq :+
000C52  3  60                   rts                     ; none were found, job done.
000C53  3               :
000C53  3  20 5C 0C             jsr gtblk               ; get block.
000C56  3  20 FC 19             jsr evnt20              ; collected block event.
000C59  3  4C 47 0C             jmp getcol              ; repeat until none left.
000C5C  3               
000C5C  3               ; Get collectable block.
000C5C  3               
000C5C  3               gtblk:
000C5C  3  A0 00        	ldy #0
000C5E  3  B1 86        	lda (bufaddr),y
000C60  3  85 61        	sta z80_a
000C62  3  A9 00                lda #0
000C64  3  91 86                sta (bufaddr),y		; make it empty now.
000C66  3                      
000C66  3  A5 86        	lda bufaddr		; set dispx
000C68  3  29 1F        	and #31
000C6A  3  8D 63 02     	sta dispx
000C6D  3               
000C6D  3  A5 87        	lda bufaddr+1		; Set dispy
000C6F  3  38           	sec
000C70  3  E9 98        	sbc #>MAP
000C72  3  85 87        	sta bufaddr+1
000C74  3  06 86        	asl bufaddr
000C76  3  26 87        	rol bufaddr+1
000C78  3  06 86        	asl bufaddr
000C7A  3  26 87        	rol bufaddr+1
000C7C  3  06 86        	asl bufaddr
000C7E  3  26 87        	rol bufaddr+1
000C80  3  A5 87        	lda bufaddr+1
000C82  3  8D 64 02     	sta dispy
000C85  3                
000C85  3  AD 55 09     	lda colpatt		; get blocknr
000C88  3  85 64        	sta z80_e		; displacement in e.
000C8A  3  A9 00        	lda #0
000C8C  3  85 65        	sta z80_d		; no high byte.
000C8E  3  06 64        	asl z80_e  		; multiply char by 8.
000C90  3  26 65        	rol z80_d
000C92  3  06 64        	asl z80_e
000C94  3  26 65        	rol z80_d
000C96  3  06 64        	asl z80_e
000C98  3  26 65        	rol z80_d
000C9A  3  18           	clc
000C9B  3  A5 64        	lda z80_e
000C9D  3  69 15        	adc #<chgfx 		; address of graphics.
000C9F  3  85 84        	sta tileaddr
000CA1  3  A5 65        	lda z80_d
000CA3  3  69 1A        	adc #>chgfx
000CA5  3  85 85        	sta tileaddr+1
000CA7  3  20 D7 08     	jsr gprad 		; get screen address.
000CAA  3  A2 07        	ldx #7			; number of pixel rows to write.
000CAC  3               gtblk0:
000CAC  3  A0 00        	ldy #0
000CAE  3  B1 84        	lda (tileaddr),y 	; get image byte.
000CB0  3  BC 4D 09     	ldy scrtab,x
000CB3  3  51 80        	eor (scraddr),y 	; XOR tile on screen
000CB5  3  91 80        	sta (scraddr),y 	; copy to screen.
000CB7  3  E6 84        	inc tileaddr 		; next image byte.
000CB9  3  D0 02        	bne :+
000CBB  3  E6 85        	inc tileaddr+1
000CBD  3               :
000CBD  3  CA           	dex	 		; repeat for 8 pixel rows.
000CBE  3  10 EC        	bpl gtblk0
000CC0  3  60           	rts
000CC1  3               
000CC1  3               ;--------------------------------------------------------------
000CC1  3               ; Touched deadly block check.
000CC1  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
000CC1  3               ;
000CC1  3               ; Input:
000CC1  3               ;  IX = sprite address
000CC1  3               ;
000CC1  3               ; Output:
000CC1  3               ;  A  = 0 is ok, A=5 is not ok
000CC1  3               ;--------------------------------------------------------------
000CC1  3               
000CC1  3               tded:
000CC1  3  A0 08        	ldy #8
000CC3  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000CC5  3  8D 64 02     	sta dispy
000CC8  3  C8           	iny
000CC9  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000CCB  3  8D 63 02     	sta dispx		; coords in dispx,dispy.
000CCE  3  20 80 0D     	jsr tstbl		; get map address.
000CD1  3  48           	pha
000CD2  3  A9 1F        	lda #31			; default distance to next line down.
000CD4  3  85 64        	sta z80_e
000CD6  3  68           	pla
000CD7  3  C5 63        	cmp z80_b		; is this the required block?
000CD9  3  D0 01        	bne :+
000CDB  3  60           	rts			; yes.
000CDC  3               :
000CDC  3  E6 86        	inc bufaddr 		; next cell.
000CDE  3  D0 02        	bne :+
000CE0  3  E6 87        	inc bufaddr+1
000CE2  3               :
000CE2  3  A0 00        	ldy #0
000CE4  3  B1 86        	lda (bufaddr),y		; fetch type.
000CE6  3  C5 63        	cmp z80_b 		; is this deadly/custom?
000CE8  3  D0 01        	bne :+
000CEA  3  60           	rts			; yes.
000CEB  3               :
000CEB  3  AD 63 02     	lda dispx		; horizontal position.
000CEE  3  85 62        	sta z80_c 		; store column in c register.
000CF0  3  29 07        	and #7			; is it straddling cells?
000CF2  3  D0 03        	bne :+
000CF4  3  4C 08 0D     	jmp tded0		; no.
000CF7  3               :
000CF7  3  E6 86        	inc bufaddr 		; last cell.
000CF9  3  D0 02        	bne :+
000CFB  3  E6 87        	inc bufaddr+1
000CFD  3               :
000CFD  3  A0 00        	ldy #0
000CFF  3  B1 86        	lda (bufaddr),y 	; fetch type.
000D01  3  C5 63        	cmp z80_b		; is this the block?
000D03  3  D0 01        	bne :+
000D05  3  60           	rts			; yes.
000D06  3               :
000D06  3  C6 64        	dec z80_e		; one less cell to next row down.
000D08  3               tded0:
000D08  3  18           	clc 			; point to next row.
000D09  3  A5 86        	lda bufaddr
000D0B  3  65 64        	adc z80_e
000D0D  3  85 86        	sta bufaddr
000D0F  3  90 02        	bcc :+
000D11  3  E6 87        	inc bufaddr+1
000D13  3               :
000D13  3  A0 00        	ldy #0
000D15  3  B1 86        	lda (bufaddr),y		; fetch left cell block.
000D17  3  C5 63        	cmp z80_b		; is this fatal?
000D19  3  D0 01        	bne :+
000D1B  3  60           	rts			; yes.
000D1C  3               :
000D1C  3  E6 86        	inc bufaddr 		; next cell.
000D1E  3  D0 02        	bne :+
000D20  3  E6 87        	inc bufaddr+1
000D22  3               :
000D22  3  A0 00        	ldy #0
000D24  3  B1 86        	lda (bufaddr),y 	; fetch type.
000D26  3  C5 63        	cmp z80_b		; is this fatal?
000D28  3  D0 01        	bne :+
000D2A  3  60           	rts			; yes.
000D2B  3               :
000D2B  3  A5 62        	lda z80_c		; horizontal position.
000D2D  3  29 07        	and #7			; is it straddling cells?
000D2F  3  D0 03        	bne :+
000D31  3  4C 43 0D     	jmp tded1 		; no.
000D34  3               :
000D34  3  E6 86        	inc bufaddr		; last cell.
000D36  3  D0 02        	bne :+
000D38  3  E6 87        	inc bufaddr+1
000D3A  3               :
000D3A  3  A0 00        	ldy #0
000D3C  3  B1 86        	lda (bufaddr),y		; fetch type.
000D3E  3  C5 63        	cmp z80_b		; is this fatal?
000D40  3  D0 01        	bne :+
000D42  3  60           	rts			; yes.
000D43  3               :
000D43  3               tded1:
000D43  3  AD 64 02     	lda dispy		; vertical position.
000D46  3  29 07        	and #7 			; is it straddling cells?
000D48  3  D0 01        	bne :+
000D4A  3  60           	rts			; no, job done.
000D4B  3               :
000D4B  3  18           	clc			; point to next row.
000D4C  3  A5 86        	lda bufaddr
000D4E  3  65 64        	adc z80_e
000D50  3  85 86        	sta bufaddr
000D52  3  90 02        	bcc :+
000D54  3  E6 87        	inc bufaddr+1
000D56  3               :
000D56  3  A0 00        	ldy #0
000D58  3  B1 86        	lda (bufaddr),y 	; fetch left cell block.
000D5A  3  C5 63        	cmp z80_b		; is this fatal?
000D5C  3  D0 01        	bne :+
000D5E  3  60           	rts			; yes.
000D5F  3               :
000D5F  3  E6 86        	inc bufaddr		; next cell.
000D61  3  D0 02        	bne :+
000D63  3  E6 87        	inc bufaddr+1
000D65  3               :
000D65  3  A0 00        	ldy #0
000D67  3  B1 86        	lda (bufaddr),y 	; fetch type.
000D69  3  C5 63        	cmp z80_b		; is this fatal?
000D6B  3  D0 01        	bne :+
000D6D  3  60           	rts			; yes.
000D6E  3               :
000D6E  3  A5 62        	lda z80_c		; horizontal position.
000D70  3  29 07        	and #7			; is it straddling cells?
000D72  3  D0 01        	bne :+
000D74  3  60           	rts			; no.
000D75  3               :
000D75  3  E6 86        	inc bufaddr		; last cell.
000D77  3  D0 02        	bne :+
000D79  3  E6 87        	inc bufaddr+1
000D7B  3               :
000D7B  3  A0 00        	ldy #0
000D7D  3  B1 86        	lda (bufaddr),y		; fetch final type.
000D7F  3  60           	rts 			; return with final type in accumulator.
000D80  3               
000D80  3               ;---------------------------------------------------
000D80  3               ; Fetch block type at (dispx, dispy).
000D80  3               ;
000D80  3               ; Output:
000D80  3               ;  A = block type
000D80  3               ;---------------------------------------------------
000D80  3               
000D80  3               tstbl:
000D80  3  AD 64 02     	lda dispy 		; fetch y coord.
000D83  3  4A           	lsr a			; bufaddr = y/8
000D84  3  4A           	lsr a
000D85  3  4A           	lsr a
000D86  3  8D 59 02     	sta chary
000D89  3               
000D89  3  85 86        	sta bufaddr
000D8B  3  A9 00        	lda #0
000D8D  3  85 87        	sta bufaddr+1
000D8F  3               
000D8F  3  06 86        	asl bufaddr  		; bufaddr = y/8 * 32
000D91  3  26 87        	rol bufaddr+1
000D93  3  06 86        	asl bufaddr
000D95  3  26 87        	rol bufaddr+1
000D97  3  06 86        	asl bufaddr
000D99  3  26 87        	rol bufaddr+1
000D9B  3  06 86        	asl bufaddr
000D9D  3  26 87        	rol bufaddr+1
000D9F  3  06 86        	asl bufaddr
000DA1  3  26 87        	rol bufaddr+1
000DA3  3               
000DA3  3  AD 63 02     	lda dispx		; x/8
000DA6  3  4A           	lsr a
000DA7  3  4A           	lsr a
000DA8  3  4A           	lsr a
000DA9  3  8D 58 02     	sta charx
000DAC  3               
000DAC  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
000DAD  3  65 86        	adc bufaddr
000DAF  3  69 00        	adc #<MAP
000DB1  3  85 86        	sta bufaddr
000DB3  3  A5 87        	lda bufaddr+1
000DB5  3  69 98        	adc #>MAP
000DB7  3  85 87        	sta bufaddr+1
000DB9  3               
000DB9  3  A0 00        	ldy #0
000DBB  3  B1 86        	lda (bufaddr),y 	; fetch byte there.
000DBD  3  60           	rts
000DBE  3               
000DBE  3               
000DBE  3               ;-------------------------------------------------------------------
000DBE  3               ; Jump - if we can.
000DBE  3               ; Requires initial speed to be set up in accumulator prior to call.
000DBE  3               ;
000DBE  3               ; Input:
000DBE  3               ;  IX = sprite address
000DBE  3               ;-------------------------------------------------------------------
000DBE  3               
000DBE  3               jump:
000DBE  3  A0 0D        	ldy #13
000DC0  3  B1 68        	lda (z80_ix),y		; jump table low.
000DC2  3  A0 0E        	ldy #14
000DC4  3  11 68        	ora (z80_ix),y		; jump table high.
000DC6  3  F0 01        	beq :+
000DC8  3  60           	rts			; already in the air.
000DC9  3               :
000DC9  3  A9 20        	lda #>jtab
000DCB  3  A0 0E        	ldy #14
000DCD  3  91 68        	sta (z80_ix),y		; set jump high.
000DCF  3  A9 B6        	lda #<jtab		; jump table start.
000DD1  3  A0 0D        	ldy #13
000DD3  3  91 68        	sta (z80_ix),y		; set jump low.
000DD5  3  60           	rts
000DD6  3               
000DD6  3               ; Jump table.
000DD6  3               
000DD6  3               ;jtab:
000DD6  3               ;	.byte 248,250,252
000DD6  3               ;	.byte 254,254,255
000DD6  3               ;	.byte 255,255,0,0
000DD6  3               ;	.byte 0,1,1,1,2,2
000DD6  3               ;	.byte 4,6,8,8,8,99
000DD6  3               
000DD6  3               ;------------------------------------------------
000DD6  3               ; Random numbers code.
000DD6  3               ; Pseudo-random number generator, 8-bit.
000DD6  3               ;
000DD6  3               ; Output:
000DD6  3               ;  RND = random number
000DD6  3               ;------------------------------------------------
000DD6  3               
000DD6  3               random:
000DD6  3  AD 7D 07     	lda seed		; get last random number.
000DD9  3  0A           	asl a
000DDA  3  0A           	asl a
000DDB  3  18           	clc
000DDC  3  6D 7D 07     	adc seed
000DDF  3  18           	clc
000DE0  3  69 45        	adc #$45
000DE2  3  8D 7D 07     	sta seed		; store new seed.
000DE5  3  8D 5B 02     	sta varrnd		; return number in variable.
000DE8  3  60           	rts
000DE9  3               
000DE9  3               ;--------------------------------------------------------
000DE9  3               ; Keys
000DE9  3               ;
000DE9  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
000DE9  3               ;             ||||||||
000DE9  3               ;             |||||||+> Right    KEY 0  - X
000DE9  3               ;             ||||||+-> Left     KEY 1  - Z
000DE9  3               ;             |||||+--> Down     KEY 2  - .
000DE9  3               ;             ||||+---> Up       KEY 3  - ;
000DE9  3               ;             |||+----> Fire1    KEY 4  - SPC
000DE9  3               ;             ||+-----> Fire2    KEY 5  - Q
000DE9  3               ;             |+------> Fire3    KEY 6  - P
000DE9  3               ;             +-------> Not used
000DE9  3               ;
000DE9  3               ;                       Option1  KEY 7  - 1
000DE9  3               ;                       Option2  KEY 8  - 2
000DE9  3               ;                       Option3  KEY 9  - 3
000DE9  3               ;                       Option4  KEY 10 - 4
000DE9  3               ;--------------------------------------------------------
000DE9  3               
000DE9  3               ;              X   Z   .   ;  SPC  Q   P
000DE9  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
000DE9  3               ;        .byte $21,$11,$01,$92                   ; menu options.
000DE9  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
000DED  3  00 04 14     
000DF0  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
000DF4  3               
000DF4  3               ;--------------------------------------------------------
000DF4  3               ; Keyboard test routine.
000DF4  3               ;
000DF4  3               ; Input:
000DF4  3               ;  A = key to read, high nibble=row and low nibble=col
000DF4  3               ;
000DF4  3               ; Output:
000DF4  3               ;  carry clr = key pressed
000DF4  3               ;  carry set = key not pressed
000DF4  3               ;--------------------------------------------------------
000DF4  3               
000DF4  3               ktest:
000DF4  3  85 61        	sta z80_a		; save key
000DF6  3               
000DF6  3  4A           	lsr a			; set row
000DF7  3  4A           	lsr a
000DF8  3  4A           	lsr a
000DF9  3  4A           	lsr a
000DFA  3  09 F0        	ora #ScrMode		; don't flip screenmode
000DFC  3  8D 00 B0     	sta KeyRowAddr
000DFF  3               
000DFF  3  A5 61        	lda z80_a
000E01  3  29 0F        	and #$0f
000E03  3  AA           	tax
000E04  3  AD 01 B0     	lda KeyColAddr		; read column
000E07  3               
000E07  3  3D 10 0E     	and keymask,x		; check key pressed
000E0A  3  F0 02        	beq pressed
000E0C  3  38           	sec			; key not pressed
000E0D  3  60           	rts
000E0E  3               pressed:
000E0E  3  18           	clc			; key pressed
000E0F  3  60           	rts
000E10  3               
000E10  3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
000E14  3  10 20        
000E16  3               
000E16  3               ;-------------------------------------------------------
000E16  3               ; Joystick and keyboard reading routines.
000E16  3               ;
000E16  3               ; contrl = 0, Keyboard
000E16  3               ;          1, JoyKeyb
000E16  3               ;          2, JoyMMC
000E16  3               ;-------------------------------------------------------
000E16  3               
000E16  3               joykey:
000E16  3  AD 32 02     	lda contrl 		; control flag.
000E19  3  C9 01        	cmp #1
000E1B  3  D0 03        	bne :+
000E1D  3  4C 3B 0E     	jmp joyjoy 		; read keyboard joystick
000E20  3               :
000E20  3  C9 02        	cmp #2
000E22  3  D0 03        	bne :+
000E24  3  4C 65 0E     	jmp joysin 		; read MMC joystick.
000E27  3               :
000E27  3               ; Keyboard controls.
000E27  3               
000E27  3  A9 00        	lda #0		 	; zero reading.
000E29  3  85 64        	sta z80_e
000E2B  3               
000E2B  3  A0 06        	ldy #6	 		; address of last key.
000E2D  3               joyke0:
000E2D  3  B9 B7 20     	lda keys,y 		; get key from table.
000E30  3  20 F4 0D     	jsr ktest		; being pressed?
000E33  3  26 64        	rol z80_e 		; rotate into reading.
000E35  3               
000E35  3  88           	dey		 	; next key.
000E36  3  10 F5        	bpl joyke0 		; repeat for all keys.
000E38  3  4C 4C 0E     	jmp joyjo1 		; store the value.
000E3B  3               
000E3B  3               ; Keyboard joystick controls.
000E3B  3               
000E3B  3               joyjoy:
000E3B  3  A9 00        	lda #0		 	; zero reading.
000E3D  3  85 64        	sta z80_e
000E3F  3               
000E3F  3  A0 06        	ldy #6	 		; address of last key.
000E41  3               joyjo3:
000E41  3  B9 E9 0D     	lda jkeys,y 		; get key from table.
000E44  3  20 F4 0D     	jsr ktest		; being pressed?
000E47  3  26 64        	rol z80_e 		; rotate into reading.
000E49  3               
000E49  3  88           	dey		 	; next key.
000E4A  3  10 F5        	bpl joyjo3 		; repeat for all keys.
000E4C  3               joyjo1:
000E4C  3  A5 64        	lda z80_e 		; copy e register to accumulator.
000E4E  3               joyjo2:
000E4E  3  8D 33 02     	sta joyval		; remember value.
000E51  3  60           	rts
000E52  3               
000E52  3               
000E52  3               ; AtoMMC joystick controls.
000E52  3               
000E52  3               ; Set PORTB direction
000E52  3               
000E52  3               joyinit:
000E52  3  A9 FF        	lda #$ff   		; Write value to latch, bits 0-7 input
000E54  3  8D 01 B4     	sta DatReg
000E57  3  20 98 0E     	jsr interwritedelay
000E5A  3  A9 A1        	lda #$a1   		; Write direction in latch to PORTB
000E5C  3  8D 00 B4     	sta CmdReg
000E5F  3               
000E5F  3               wait_until_not_busy:
000E5F  3  AD 00 B4     	lda CmdReg
000E62  3  30 FB        	bmi wait_until_not_busy
000E64  3  60           	rts
000E65  3               
000E65  3               ; Get PORTB value
000E65  3               
000E65  3               joysin:
000E65  3  A9 A2        	lda #$a2   		; Read value PORTB in latch
000E67  3  8D 00 B4     	sta CmdReg
000E6A  3  20 98 0E     	jsr interwritedelay
000E6D  3               
000E6D  3  AD 01 B4     	lda DatReg		; Read joystick status
000E70  3  29 7F        	and #$7f
000E72  3  8D 33 02     	sta joyval
000E75  3  85 F0        	sta $f0
000E77  3               
000E77  3  AD BC 20     	lda keys+5		; check fire2
000E7A  3  20 F4 0D     	jsr ktest
000E7D  3  B0 08        	bcs :+
000E7F  3  AD 33 02     	lda joyval
000E82  3  29 DF        	and #$df
000E84  3  8D 33 02     	sta joyval
000E87  3               :
000E87  3  AD BD 20     	lda keys+6		; check fire3
000E8A  3  20 F4 0D     	jsr ktest
000E8D  3  B0 08        	bcs :+
000E8F  3  AD 33 02     	lda joyval
000E92  3  29 BF        	and #$bf
000E94  3  8D 33 02     	sta joyval
000E97  3               :
000E97  3  60           	rts
000E98  3               
000E98  3               ; Short delay
000E98  3               ; Enough to intersperse 2 writes to the FATPIC.
000E98  3               
000E98  3               interwritedelay:
000E98  3  A9 08        	lda  #8
000E9A  3  38           	sec
000E9B  3               loop:
000E9B  3  E9 01        	sbc  #1
000E9D  3  D0 FC        	bne  loop
000E9F  3  60           	rts
000EA0  3               
000EA0  3               ;tmp_byte:   .byte 0
000EA0  3               
000EA0  3               ;---------------------------------------------------------------
000EA0  3               ; Getkey in column,row format
000EA0  3               ;
000EA0  3               ; Output:
000EA0  3               ;  A = high nibble=row and low nibble=column key in matrix
000EA0  3               ;---------------------------------------------------------------
000EA0  3               
000EA0  3               kget:
000EA0  3  A9 F0        	lda #ScrMode		; high-mono mode.
000EA2  3  8D 00 B0     	sta ScrSelAddr		; screen select port
000EA5  3  8E 52 0A     	stx xtmp
000EA8  3               kget4:
000EA8  3  20 71 FE     	jsr READKEY		; read key until pressed
000EAB  3  C0 FF        	cpy #255
000EAD  3  F0 F9        	beq kget4
000EAF  3  8D BD 0A     	sta rcol		; save column
000EB2  3  8E BE 0A     	stx rrow		; determine row
000EB5  3               kget3:
000EB5  3  20 71 FE     	jsr READKEY		; wait until key released
000EB8  3  C0 FF        	cpy #255
000EBA  3  D0 F9        	bne kget3
000EBC  3               
000EBC  3  38           	sec			; calculate matrix row
000EBD  3  A9 0A        	lda #10
000EBF  3  ED BE 0A     	sbc rrow
000EC2  3  0A           	asl a
000EC3  3  0A           	asl a
000EC4  3  0A           	asl a
000EC5  3  0A           	asl a
000EC6  3  8D BE 0A     	sta rrow
000EC9  3               
000EC9  3  A0 FF        	ldy #255		; find column mask
000ECB  3               kget1:
000ECB  3  C8           	iny
000ECC  3  B9 10 0E     	lda keymask,y
000ECF  3  CD BD 0A     	cmp rcol
000ED2  3  F0 03        	beq kget2
000ED4  3  4C CB 0E     	jmp kget1
000ED7  3               kget2:
000ED7  3  98           	tya			; determine column
000ED8  3  18           	clc
000ED9  3  6D BE 0A     	adc rrow
000EDC  3  AE 52 0A     	ldx xtmp
000EDF  3  60           	rts
000EE0  3               
000EE0  3               ;---------------------------------------------------------------
000EE0  3               ; Display message.
000EE0  3               ;
000EE0  3               ; Input:
000EE0  3               ;  A = message number
000EE0  3               ;---------------------------------------------------------------
000EE0  3               
000EE0  3               dmsg:
000EE0  3  AA           	tax
000EE1  3  A9 FE        	lda #<msgdat		; pointer to messages.
000EE3  3  85 66        	sta z80_l
000EE5  3  A9 19        	lda #>msgdat
000EE7  3  85 67        	sta z80_h
000EE9  3  20 19 10     	jsr getwrd		; get message number.
000EEC  3               dmsg3:
000EEC  3  20 00 10     	jsr preprt		; pre-printing stuff.
000EEF  3  20 92 07     	jsr checkx		; make sure we"re in a printable range.
000EF2  3  AD 42 0F     	lda prtmod		; print mode.
000EF5  3  D0 4C        	bne bmsg1		; no, double-height text.
000EF7  3               dmsg0:
000EF7  3  A5 67        	lda z80_h		; store string pointer.
000EF9  3  48           	pha
000EFA  3  A5 66        	lda z80_l
000EFC  3  48           	pha
000EFD  3               
000EFD  3  A0 00        	ldy #0
000EFF  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
000F01  3  29 7F        	and #127		; remove any end marker.
000F03  3  C9 0D        	cmp #13
000F05  3  F0 24        	beq dmsg1
000F07  3  20 12 09     	jsr pchar		; display character.
000F0A  3  20 E6 0F     	jsr nexpos 		; display position.
000F0D  3  D0 03        	bne dmsg2		; not on a new line.
000F0F  3  20 EF 0F     	jsr nexlin		; next line down.
000F12  3               dmsg2:
000F12  3  68           	pla			; retrieve string pointer
000F13  3  85 66        	sta z80_l
000F15  3  68           	pla
000F16  3  85 67        	sta z80_h
000F18  3               
000F18  3  A0 00        	ldy #0
000F1A  3  B1 66        	lda (z80_hl),y		; fetch last character.
000F1C  3  0A           	asl a  			; was it the end?
000F1D  3  90 03        	bcc :+
000F1F  3  4C DA 07     	jmp dscor2		; yes, job done.
000F22  3               :
000F22  3  E6 66        	inc z80_l		; next character to display.
000F24  3  D0 02        	bne :+
000F26  3  E6 67        	inc z80_h
000F28  3               :
000F28  3  4C F7 0E     	jmp dmsg0
000F2B  3               dmsg1:
000F2B  3  EE 64 02     	inc dispy
000F2E  3  AD 64 02     	lda dispy
000F31  3  C9 18        	cmp #24
000F33  3  90 05        	bcc dmsg4
000F35  3  A9 00        	lda #0
000F37  3  8D 64 02     	sta dispy
000F3A  3               dmsg4:
000F3A  3  A9 00        	lda #0
000F3C  3  8D 63 02     	sta dispx
000F3F  3  4C 12 0F     	jmp dmsg2
000F42  3               
000F42  3  00           prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
000F43  3               
000F43  3               ;----------------------------------------------------------
000F43  3               ; Display message in big text.
000F43  3               ;
000F43  3               ; Input:
000F43  3               ;  HL = string pointer
000F43  3               ;----------------------------------------------------------
000F43  3               
000F43  3               bmsg1:
000F43  3  A0 00        	ldy #0
000F45  3  B1 66        	lda (z80_hl),y 		; get character to display.
000F47  3  29 7F        	and #127		; only want 7 bits.
000F49  3  C9 0D        	cmp #13
000F4B  3  F0 13        	beq bmsg2
000F4D  3  20 7A 0F     	jsr bchar 		; display big char.
000F50  3               bmsg3:
000F50  3  A0 00        	ldy #0
000F52  3  B1 66        	lda (z80_hl),y 		; look at last character.
000F54  3  48           	pha
000F55  3  E6 66        	inc z80_l 		; next character in list.
000F57  3  D0 02        	bne :+
000F59  3  E6 67        	inc z80_h
000F5B  3               :
000F5B  3  68           	pla
000F5C  3  0A           	asl a  			; was terminator flag set?
000F5D  3  90 E4        	bcc bmsg1		; no, keep going.
000F5F  3               :
000F5F  3  60           	rts
000F60  3               bmsg2:
000F60  3  A9 00        	lda #0
000F62  3  8D 63 02     	sta dispx
000F65  3  EE 64 02     	inc dispy
000F68  3  EE 64 02     	inc dispy
000F6B  3  AD 64 02     	lda dispy
000F6E  3  C9 17        	cmp #23
000F70  3  90 DE        	bcc bmsg3
000F72  3  A9 00        	lda #0
000F74  3  8D 64 02     	sta dispy
000F77  3  4C 50 0F     	jmp bmsg3
000F7A  3               
000F7A  3               ;----------------------------------------------------------
000F7A  3               ; Big character display.
000F7A  3               ;
000F7A  3               ; Input:
000F7A  3               ;  A = character
000F7A  3               ;----------------------------------------------------------
000F7A  3               
000F7A  3               bchar:
000F7A  3  85 64        	sta z80_e		; save char in lb
000F7C  3  A9 00        	lda #0
000F7E  3  85 65        	sta z80_d		; reset hb
000F80  3               
000F80  3  06 64        	asl z80_e 		; multiply char by 8.
000F82  3  26 65        	rol z80_d
000F84  3  06 64        	asl z80_e
000F86  3  26 65        	rol z80_d
000F88  3  06 64        	asl z80_e
000F8A  3  26 65        	rol z80_d		; de = a*8
000F8C  3               
000F8C  3  18           	clc			; de = FontPtr + a*8
000F8D  3  A5 64        	lda z80_e
000F8F  3  6D 0C 19     	adc FontPtr 		; address of font.
000F92  3  85 64        	sta z80_e
000F94  3  A5 65        	lda z80_d
000F96  3  6D 0D 19     	adc FontPtr+1
000F99  3  85 65        	sta z80_d
000F9B  3               
000F9B  3  20 D7 08     	jsr gprad 		; get screen address.
000F9E  3               
000F9E  3  A2 00        	ldx #0			; height of character in font.
000FA0  3               bchar0:
000FA0  3  A0 00        	ldy #0
000FA2  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
000FA4  3               
000FA4  3  49 00        	eor #TxtInvert		; Invert
000FA6  3               
000FA6  3  91 80        	sta (scraddr),y
000FA8  3  48           	pha
000FA9  3  20 CE 12     	jsr nline 		; next line down.
000FAC  3  68           	pla
000FAD  3  91 80        	sta (scraddr),y
000FAF  3  20 CE 12     	jsr nline 		; next line down.
000FB2  3               
000FB2  3  18           	clc
000FB3  3  E6 64        	inc z80_e 		; next line of font.
000FB5  3  D0 02        	bne :+
000FB7  3  E6 65        	inc z80_d
000FB9  3               :
000FB9  3  E8           	inx
000FBA  3  E0 08        	cpx #8
000FBC  3  D0 E2        	bne bchar0
000FBE  3               	
000FBE  3  20 E6 0F     	jsr nexpos		; display position.
000FC1  3  D0 06        	bne bchar2 		; not on a new line.
000FC3  3               bchar3:
000FC3  3  EE 64 02     	inc dispy
000FC6  3  20 EF 0F     	jsr nexlin 		; next line check.
000FC9  3               bchar2:
000FC9  3  4C DA 07     	jmp dscor2		; tidy up line and column variables.
000FCC  3               
000FCC  3               
000FCC  3               ;-------------------------------------------------
000FCC  3               ; Display a character.
000FCC  3               ;
000FCC  3               ; Input:
000FCC  3               ;  A = character
000FCC  3               ;-------------------------------------------------
000FCC  3               
000FCC  3               achar:
000FCC  3  85 63        	sta z80_b 		; copy to b.
000FCE  3  20 00 10     	jsr preprt 		; get ready to print.
000FD1  3  A5 63        	lda z80_b		; character in accumulator.
000FD3  3  AE 42 0F     	ldx prtmod 		; print mode.
000FD6  3  F0 03        	beq :+
000FD8  3  4C 7A 0F     	jmp bchar 		; no, double-height text.
000FDB  3               :
000FDB  3  20 12 09     	jsr pchar 		; display character.
000FDE  3  20 E6 0F     	jsr nexpos 		; display position.
000FE1  3  F0 E0        	beq bchar3		; next line down.
000FE3  3  4C C9 0F     	jmp bchar2 		; tidy up.
000FE6  3               
000FE6  3               
000FE6  3               ;-------------------------------------------------
000FE6  3               ; Get next print column position.
000FE6  3               ;-------------------------------------------------
000FE6  3               
000FE6  3               nexpos:
000FE6  3  EE 63 02     	inc dispx		; move along one position.
000FE9  3  AD 63 02     	lda dispx 		; get coordinate.
000FEC  3  29 1F        	and #31
000FEE  3  60           	rts 			; return with status in zero flag.
000FEF  3               
000FEF  3               ;-------------------------------------------------
000FEF  3               ; Get next print line position.
000FEF  3               ;-------------------------------------------------
000FEF  3               
000FEF  3               nexlin:
000FEF  3  EE 64 02     	inc dispy 		; newline.
000FF2  3  AD 64 02     	lda dispy		; vertical position.
000FF5  3  C9 18        	cmp #24			; past screen edge?
000FF7  3  B0 01        	bcs :+
000FF9  3  60           	rts			; no, still okay.
000FFA  3               :
000FFA  3  A9 00        	lda #0			; restart at top.
000FFC  3  8D 64 02     	sta dispy
000FFF  3  60           	rts
001000  3               
001000  3               ;--------------------------------------------------------
001000  3               ; Pre-print preliminaries.
001000  3               ;--------------------------------------------------------
001000  3               
001000  3               preprt:
001000  3  AD 0C 19     	lda FontPtr		; font pointer.
001003  3  8D 90 07     	sta grbase		; set up graphics base.
001006  3  AD 0D 19     	lda FontPtr+1
001009  3  8D 91 07     	sta grbase+1
00100C  3               prescr:
00100C  3  AD 58 02     	lda charx 		; display coordinates.
00100F  3  8D 63 02     	sta dispx		; set up general coordinates.
001012  3  AD 59 02     	lda chary
001015  3  8D 64 02     	sta dispy
001018  3  60           	rts
001019  3               
001019  3               ;--------------------------------------------------------------
001019  3               ; Get messagenr x in hl
001019  3               ;
001019  3               ; Input:
001019  3               ;  HL = pointer to message list
001019  3               ;  X  = message number.
001019  3               ;--------------------------------------------------------------
001019  3               
001019  3               getwrd:
001019  3  E0 00        	cpx #0
00101B  3  D0 01        	bne:+ 			; first word in list?
00101D  3  60           	rts 			; yep, don't search.
00101E  3               :
00101E  3  A0 00        	ldy #0
001020  3               getwd0:
001020  3  B1 66        	lda (z80_hl),y
001022  3  48           	pha
001023  3  E6 66        	inc z80_l
001025  3  D0 02        	bne :+
001027  3  E6 67        	inc z80_h
001029  3               :
001029  3  68           	pla
00102A  3  C9 80        	cmp #128		; found end?
00102C  3  30 F2        	bmi getwd0		; no, carry on.
00102E  3  CA           	dex			; until we have right number.
00102F  3  D0 EF        	bne getwd0
001031  3  60           	rts
001032  3               
001032  3               ;-----------------------------------------------------------
001032  3               ; Bubble sort.
001032  3               ;-----------------------------------------------------------
001032  3               
001032  3               bsort:
001032  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
001034  3  8D 6A 10     	sta qscnt
001037  3               
001037  3  A9 2D        	lda #<sprtab 		; sprite table.
001039  3  85 68        	sta z80_x
00103B  3  A9 18        	lda #>sprtab
00103D  3  85 69        	sta z80_i
00103F  3               bsort0:
00103F  3  A0 00        	ldy #0
001041  3  B1 68        	lda (z80_ix),y 		; first sprite type.
001043  3  C9 FF        	cmp #255 		; is it switched off?
001045  3  F0 32        	beq swemp		; yes, may need to switch another in here.
001047  3               
001047  3  A0 11        	ldy #TABSIZ
001049  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
00104B  3  C9 FF        	cmp #255 		; is it enabled?
00104D  3  F0 0A        	beq bsort2 		; no, nothing to swap.
00104F  3               
00104F  3  A0 14        	ldy #TABSIZ+3
001051  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
001053  3  A0 03        	ldy #3
001055  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
001057  3  90 12        	bcc bsort1		; next sprite is higher - may need to switch.
001059  3               bsort2:
001059  3  18           	clc
00105A  3  A5 68        	lda z80_x
00105C  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
00105E  3  85 68        	sta z80_x
001060  3  90 02        	bcc :+
001062  3  E6 69        	inc z80_i
001064  3               :
001064  3  CE 6A 10     	dec qscnt 
001067  3  D0 D6        	bne bsort0		; repeat for remaining sprites.
001069  3  60           	rts
00106A  3               
00106A  3  00           qscnt:	.byte 0
00106B  3               
00106B  3               bsort1:
00106B  3  A0 11        	ldy #TABSIZ
00106D  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
00106F  3  C9 FF        	cmp #255		; is it enabled?
001071  3  F0 E6        	beq bsort2		; no, nothing to swap.
001073  3  20 87 10     	jsr swspr		; swap positions.
001076  3  4C 59 10     	jmp bsort2
001079  3               swemp:
001079  3  A0 11        	ldy #TABSIZ
00107B  3  B1 68        	lda (z80_ix),y		; next table entry.
00107D  3  C9 FF        	cmp #255		; is that one on?
00107F  3  F0 D8        	beq bsort2		; no, nothing to swap.
001081  3  20 87 10     	jsr swspr		; swap positions.
001084  3  4C 59 10     	jmp bsort2
001087  3               
001087  3               ; Swap sprites.
001087  3               
001087  3               swspr:
001087  3  A5 68        	lda z80_x		; table address 
001089  3  85 64        	sta z80_e		; copy to de pair.
00108B  3  85 66        	sta z80_l		; copy to hl pair.
00108D  3  A5 69        	lda z80_i
00108F  3  85 67        	sta z80_h
001091  3  85 65        	sta z80_d
001093  3               
001093  3  18           	clc
001094  3  A5 66        	lda z80_l
001096  3  69 11        	adc #TABSIZ		; distance to second entry.
001098  3  85 66        	sta z80_l
00109A  3  90 02        	bcc :+
00109C  3  E6 67        	inc z80_h
00109E  3               :
00109E  3  A9 11        	lda #TABSIZ		; bytes to swap.
0010A0  3  85 63        	sta z80_b
0010A2  3  A0 00        	ldy #0
0010A4  3               swspr0:
0010A4  3  B1 66        	lda (z80_hl),y		; fetch second byte.
0010A6  3  48           	pha
0010A7  3  B1 64        	lda (z80_de),y 		; fetch first byte.
0010A9  3  91 66        	sta (z80_hl),y 		; copy to second.
0010AB  3  68           	pla
0010AC  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
0010AE  3               
0010AE  3  E6 64        	inc z80_e 		; next byte.
0010B0  3  D0 02        	bne :+	
0010B2  3  E6 65        	inc z80_d
0010B4  3               :
0010B4  3  E6 66        	inc z80_l 		; next byte.
0010B6  3  D0 02        	bne :+
0010B8  3  E6 67        	inc z80_h
0010BA  3               :
0010BA  3  C6 63        	dec z80_b
0010BC  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
0010BE  3  60           	rts
0010BF  3               
0010BF  3               ;----------------------------------------------------
0010BF  3               ; Process sprites.
0010BF  3               ;----------------------------------------------------
0010BF  3               
0010BF  3               pspr:
0010BF  3  A9 0C        	lda #NUMSPR		; sprites to process.
0010C1  3  8D E8 10     	sta sprptr
0010C4  3               
0010C4  3  A9 2D        	lda #<sprtab 		; sprite table.
0010C6  3  85 68        	sta z80_x
0010C8  3  A9 18        	lda #>sprtab
0010CA  3  85 69        	sta z80_i
0010CC  3               pspr1:
0010CC  3  A0 00        	ldy #0
0010CE  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
0010D0  3  C9 09        	cmp #9 			; within range of sprite types?
0010D2  3  B0 03        	bcs :+
0010D4  3  20 E9 10     	jsr pspr2 		; yes, process this one.
0010D7  3               :
0010D7  3  18           	clc
0010D8  3  A5 68        	lda z80_x
0010DA  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
0010DC  3  85 68        	sta z80_x
0010DE  3  90 02        	bcc :+
0010E0  3  E6 69        	inc z80_i		; next sprite.
0010E2  3               :
0010E2  3  CE E8 10     	dec sprptr 		; repeat for remaining sprites.
0010E5  3  D0 E5        	bne pspr1
0010E7  3  60           	rts
0010E8  3               
0010E8  3  00           sprptr:	.byte 0
0010E9  3               
0010E9  3               pspr2:
0010E9  3  A5 68        	lda z80_x 		; store original sprite pointer.
0010EB  3  8D 36 11     	sta ogptr
0010EE  3  A5 69        	lda z80_i
0010F0  3  8D 37 11     	sta ogptr+1
0010F3  3  20 01 11     	jsr pspr3		; do the routine.
0010F6  3               rtorg:
0010F6  3  AD 36 11     	lda ogptr 		; restore original pointer to sprite.
0010F9  3  85 68        	sta z80_x
0010FB  3  AD 37 11     	lda ogptr+1
0010FE  3  85 69        	sta z80_i
001100  3               rtorg0:
001100  3  60           	rts
001101  3               
001101  3               pspr3:
001101  3  A9 38        	lda #<evtyp0		; sprite type events list.
001103  3  85 66        	sta z80_l
001105  3  A9 11        	lda #>evtyp0
001107  3  85 67        	sta z80_h
001109  3               pspr4:
001109  3  B1 68        	lda (z80_ix),y
00110B  3  0A           	asl a			; double accumulator.
00110C  3  18           	clc
00110D  3  65 66        	adc z80_l
00110F  3  85 66        	sta z80_l
001111  3  90 02        	bcc :+
001113  3  E6 67        	inc z80_h
001115  3               :
001115  3  B1 66        	lda (z80_hl),y
001117  3  85 64        	sta z80_e 		; copy to de.
001119  3  48           	pha
00111A  3               
00111A  3  E6 66        	inc z80_l 		; next byte of address.
00111C  3  D0 02        	bne :+
00111E  3  E6 67        	inc z80_h
001120  3               :
001120  3  B1 66        	lda (z80_hl),y 		; address high.
001122  3  85 65        	sta z80_d
001124  3               
001124  3  48           	pha	 		; swap address into hl.
001125  3  A5 67        	lda z80_h
001127  3  85 65        	sta z80_d
001129  3  68           	pla
00112A  3  85 67        	sta z80_h
00112C  3  68           	pla
00112D  3  85 66        	sta z80_l
00112F  3  A5 66        	lda z80_l
001131  3  85 64        	sta z80_e
001133  3               	
001133  3  6C 66 00     	jmp (z80_hl) 		; go there.
001136  3               
001136  3  00 00        ogptr:	.word 0			; original sprite pointer.
001138  3               
001138  3               ; Address of each sprite type's routine.
001138  3               
001138  3  1D 19        evtyp0:	.word evnt00
00113A  3  D2 19        evtyp1:	.word evnt01
00113C  3  D3 19        evtyp2:	.word evnt02
00113E  3  D4 19        evtyp3:	.word evnt03
001140  3  D5 19        evtyp4:	.word evnt04
001142  3  D6 19        evtyp5:	.word evnt05
001144  3  D7 19        evtyp6:	.word evnt06
001146  3  D8 19        evtyp7:	.word evnt07
001148  3  D9 19        evtyp8:	.word evnt08
00114A  3               
00114A  3               ;--------------------------------------------------------------
00114A  3               ; Display sprites.
00114A  3               ;
00114A  3               ; Input:
00114A  3               ;  IX = sprite table
00114A  3               ;--------------------------------------------------------------
00114A  3               
00114A  3               dspr:
00114A  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
00114C  3  8D DD 11     	sta sprcnt
00114F  3               dspr0:
00114F  3  A0 00        	ldy #0
001151  3  B1 68        	lda (z80_ix),y 		; get sprite type.
001153  3  C9 FF        	cmp #255 		; is it enabled?
001155  3  D0 43        	bne dspr1 		; yes, it needs deleting.
001157  3               dspr5:
001157  3  A0 05        	ldy #5
001159  3  B1 68        	lda (z80_ix),y 		; new type.
00115B  3  C9 FF        	cmp #255		; is it enabled?
00115D  3  D0 78        	bne dspr3 		; yes, it needs drawing.
00115F  3               dspr2:
00115F  3  A0 05        	ldy #5
001161  3  B1 68        	lda (z80_ix),y 		; copy new type.
001163  3  A0 00        	ldy #0
001165  3  91 68        	sta (z80_ix),y
001167  3  A0 06        	ldy #6
001169  3  B1 68        	lda (z80_ix),y 		; copy new image number.
00116B  3  A0 01        	ldy #1
00116D  3  91 68        	sta (z80_ix),y
00116F  3  A0 07        	ldy #7
001171  3  B1 68        	lda (z80_ix),y 		; copy new frame.
001173  3  A0 02        	ldy #2
001175  3  91 68        	sta (z80_ix),y
001177  3  A0 08        	ldy #8
001179  3  B1 68        	lda (z80_ix),y 		; copy new y.
00117B  3  A0 03        	ldy #3
00117D  3  91 68        	sta (z80_ix),y
00117F  3  A0 09        	ldy #9
001181  3  B1 68        	lda (z80_ix),y 		; copy new x.
001183  3  A0 04        	ldy #4
001185  3  91 68        	sta (z80_ix),y
001187  3               
001187  3  18           	clc
001188  3  A5 68        	lda z80_x
00118A  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
00118C  3  85 68        	sta z80_x
00118E  3  A5 69        	lda z80_i
001190  3  69 00        	adc #0
001192  3  85 69        	sta z80_i 		; next sprite.
001194  3  CE DD 11     	dec sprcnt
001197  3  D0 B6        	bne dspr0		; repeat for remaining sprites.
001199  3  60           	rts
00119A  3               dspr1:
00119A  3  A0 05        	ldy #5
00119C  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
00119E  3  C9 FF        	cmp #255		; is this enabled?
0011A0  3  D0 06        	bne dspr4 		; yes, display both.
0011A2  3               dspr6:
0011A2  3  20 72 12     	jsr sspria 		; show single sprite.
0011A5  3  4C 5F 11     	jmp dspr2
0011A8  3               
0011A8  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
0011A8  3               
0011A8  3               dspr4:
0011A8  3  A0 04        	ldy #4
0011AA  3  B1 68        	lda (z80_ix),y		; old x.
0011AC  3  A0 09        	ldy #9
0011AE  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
0011B0  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
0011B2  3               
0011B2  3  A0 03        	ldy #3
0011B4  3  B1 68        	lda (z80_ix),y		; old y.
0011B6  3  A0 08        	ldy #8
0011B8  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0011BA  3  D0 15        	bne dspr7		; they differ, need to redraw.
0011BC  3               
0011BC  3  A0 02        	ldy #2
0011BE  3  B1 68        	lda (z80_ix),y 		; old frame.
0011C0  3  A0 07        	ldy #7
0011C2  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0011C4  3  4C D1 11     	jmp dspr7 		; they differ, need to redraw.
0011C7  3               
0011C7  3  A0 01        	ldy #1
0011C9  3  B1 68        	lda (z80_ix),y 		; old image.
0011CB  3  A0 06        	ldy #6
0011CD  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0011CF  3  F0 8E        	beq dspr2		; everything is the same, don't redraw.
0011D1  3               dspr7:
0011D1  3  20 8A 12     	jsr sspric 		; delete old sprite, draw new one simultaneously.
0011D4  3  4C 5F 11     	jmp dspr2
0011D7  3               dspr3:
0011D7  3  20 84 12     	jsr ssprib 		; show single sprite.
0011DA  3  4C 5F 11     	jmp dspr2
0011DD  3               
0011DD  3  00           sprcnt:	.byte 0
0011DE  3               
0011DE  3               ;-----------------------------------------
0011DE  3               ; Get sprite address calculations.
0011DE  3               ; gspran = new sprite, gsprad = old sprite.
0011DE  3               ;
0011DE  3               ; Input:
0011DE  3               ;  IX = sprite address
0011DE  3               ;-----------------------------------------
0011DE  3               
0011DE  3               gspran:
0011DE  3  A0 08        	ldy #8
0011E0  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
0011E2  3  8D 64 02     	sta dispy
0011E5  3  A0 09        	ldy #9
0011E7  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
0011E9  3  8D 63 02     	sta dispx
0011EC  3  A0 06        	ldy #6
0011EE  3  B1 68        	lda (z80_ix),y 		; new sprite image.
0011F0  3  20 8B 15     	jsr gfrm		; fetch start frame for this sprite.
0011F3  3               
0011F3  3  A0 00        	ldy #0
0011F5  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0011F7  3  A0 07        	ldy #7
0011F9  3  18           	clc
0011FA  3  71 68        	adc (z80_ix),y 		; new add frame number.
0011FC  3  4C 1D 12     	jmp gspra0
0011FF  3               
0011FF  3               ;-----------------------------------------
0011FF  3               ; Calculate old sprite address
0011FF  3               ;
0011FF  3               ; Input:
0011FF  3               ;  IX = sprite address
0011FF  3               ;
0011FF  3               ; Output:
0011FF  3               ;  B  = right byte mask
0011FF  3               ;  C  = left byte mask
0011FF  3               ;  DE = spriteframe address
0011FF  3               ;  scraddr = screenaddress(dispx,dispy)
0011FF  3               ;-----------------------------------------
0011FF  3               
0011FF  3               gsprad:
0011FF  3  A0 03        	ldy #3
001201  3  B1 68        	lda (z80_ix),y		; y coordinate.
001203  3  8D 64 02     	sta dispy
001206  3  A0 04        	ldy #4
001208  3  B1 68        	lda (z80_ix),y		; x coordinate.
00120A  3  8D 63 02     	sta dispx
00120D  3  A0 01        	ldy #1
00120F  3  B1 68        	lda (z80_ix),y 		; sprite image.
001211  3  20 8B 15     	jsr gfrm 		; fetch start frame for this sprite.
001214  3               
001214  3  A0 00        	ldy #0
001216  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
001218  3  A0 02        	ldy #2
00121A  3  18           	clc
00121B  3  71 68        	adc (z80_ix),y 		; add frame number.
00121D  3               gspra0:
00121D  3  4A           	lsr a	  		; multiply by 128.
00121E  3  85 65        	sta z80_d 		; store in d.
001220  3  A9 00        	lda #0
001222  3  6A           	ror a
001223  3  85 64        	sta z80_e 		; got low byte.
001225  3               
001225  3  18           	clc 			; address of play sprites.
001226  3  A5 64        	lda z80_e
001228  3  69 39        	adc #<sprgfx
00122A  3  85 64        	sta z80_e
00122C  3  A5 65        	lda z80_d
00122E  3  69 1A        	adc #>sprgfx
001230  3  85 65        	sta z80_d
001232  3               
001232  3  AD 63 02     	lda dispx 		; y coordinate.
001235  3  29 06        	and #6 			; position within byte boundary.
001237  3  AA           	tax	 		; low byte of table displacement.
001238  3               
001238  3  0A           	asl a	  		; multiply by 32.
001239  3  0A           	asl a  			; already a multiple
00123A  3  0A           	asl a  			; of 2, so just 4
00123B  3  0A           	asl a  			; shifts needed.
00123C  3               
00123C  3  18           	clc 			; add to sprite address.
00123D  3  65 64        	adc z80_e
00123F  3  85 64        	sta z80_e
001241  3  90 02        	bcc :+
001243  3  E6 65        	inc z80_d
001245  3               :
001245  3  BD 6A 12     	lda spmask,x		 ; pointer to mask table.
001248  3  85 62        	sta z80_c 		; left mask.
00124A  3  BD 6B 12     	lda spmask+1,x
00124D  3  85 63        	sta z80_b 		; right mask.
00124F  3               
00124F  3               ;------------------------------------------------------------------
00124F  3               ; Drop into screen address routine.
00124F  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
00124F  3               ;------------------------------------------------------------------
00124F  3               
00124F  3               scadd:
00124F  3  AE 64 02     	ldx dispy
001252  3  E0 C0        	cpx #192
001254  3  90 02        	bcc :+
001256  3  A2 C0        	ldx #192
001258  3               :
001258  3  AD 63 02     	lda dispx
00125B  3  4A           	lsr a
00125C  3  4A           	lsr a
00125D  3  4A           	lsr a
00125E  3  18           	clc
00125F  3  7D 00 9B     	adc SCADTB_lb,x
001262  3  85 80        	sta scraddr
001264  3  BD 00 9C     	lda SCADTB_hb,x
001267  3  85 81        	sta scraddr+1
001269  3  60           	rts
00126A  3               
00126A  3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
00126E  3  0F F0 03 FC  
001272  3               
001272  3               
001272  3               ;-----------------------------------------------------------------
001272  3               ; These are the sprite routines.
001272  3               ; sspria = single sprite, old (ix).
001272  3               ; ssprib = single sprite, new (ix+5).
001272  3               ; sspric = both sprites, old (ix) and new (ix+5).
001272  3               ;-----------------------------------------------------------------
001272  3               
001272  3               sspria:
001272  3  20 FF 11     	jsr gsprad		; get old sprite address.
001275  3               sspri2:
001275  3  A9 10        	lda #16			; vertical lines.
001277  3  8D 83 12     	sta acnt
00127A  3               sspri0:
00127A  3  20 A2 12     	jsr dline		; draw a line.
00127D  3  CE 83 12     	dec acnt
001280  3  D0 F8        	bne sspri0		; repeat 16 times
001282  3  60           	rts
001283  3               
001283  3  00           acnt:	.byte 0
001284  3               
001284  3               ;-----------------------------------------------------------------
001284  3               
001284  3               ssprib:
001284  3  20 DE 11     	jsr gspran 		; get new sprite address.
001287  3  4C 75 12     	jmp sspri2
00128A  3               
00128A  3               ;-----------------------------------------------------------------
00128A  3               
00128A  3               ccnt = $7c
00128A  3               
00128A  3               sspric:
00128A  3  20 FF 11     	jsr gsprad 		; get old sprite address.
00128D  3  20 CF 20     	jsr exx  		; store addresses.
001290  3  20 DE 11     	jsr gspran 		; get new sprite addresses.
001293  3               
001293  3  A9 10        	lda #16
001295  3  85 7C        	sta ccnt
001297  3               lloop:
001297  3  20 A2 12     	jsr dline 		; draw a line.
00129A  3  20 DA 12     	jsr ddline 		; delete a line.
00129D  3  C6 7C        	dec ccnt
00129F  3  D0 F6        	bne lloop
0012A1  3               
0012A1  3  60           	rts
0012A2  3               
0012A2  3               ;-------------------------------------------------------------
0012A2  3               ; Drop through.
0012A2  3               ; Line drawn, now work out next target address.
0012A2  3               ;
0012A2  3               ; Input:
0012A2  3               ;  B  = right mask
0012A2  3               ;  C  = left mask
0012A2  3               ;  DE = spriteaddress
0012A2  3               ;  scraddr = screen address
0012A2  3               ;-------------------------------------------------------------
0012A2  3               
0012A2  3               dline:
0012A2  3  A0 00        	ldy #0
0012A4  3  B1 64        	lda (z80_de),y 		; graphic data.
0012A6  3  25 62        	and z80_c 		; mask away what's not needed.
0012A8  3  51 80        	eor (scraddr),y 	; XOR with what's there.
0012AA  3  91 80        	sta (scraddr),y 	; bung it in.
0012AC  3               
0012AC  3  E6 80        	inc scraddr 		; next screen address.
0012AE  3  E6 80        	inc scraddr 		; next screen address.
0012B0  3               
0012B0  3  B1 64        	lda (z80_de),y 		; fetch data.
0012B2  3  25 63        	and z80_b 		; mask away unwanted bits.
0012B4  3  51 80        	eor (scraddr),y 	; XOR with what's there.
0012B6  3  91 80        	sta (scraddr),y 	; bung it in.
0012B8  3               
0012B8  3  E6 64        	inc z80_e 		; next graphic.
0012BA  3  D0 02        	bne :+
0012BC  3  E6 65        	inc z80_d
0012BE  3               :
0012BE  3  C6 80        	dec scraddr 		; one character cell to the left.
0012C0  3               
0012C0  3  B1 64        	lda (z80_de),y 		; second bit of data.
0012C2  3  51 80        	eor (scraddr),y 	; XOR with what's there.
0012C4  3  91 80        	sta (scraddr),y 	; bung it in.
0012C6  3               
0012C6  3  E6 64        	inc z80_e 		; point to next line of data.
0012C8  3  D0 02        	bne :+
0012CA  3  E6 65        	inc z80_d
0012CC  3               :
0012CC  3  C6 80        	dec scraddr 		; another char left.
0012CE  3               
0012CE  3               ;----------------------------------------------------------------------
0012CE  3               ; Line drawn, now work out next target address.
0012CE  3               ;----------------------------------------------------------------------
0012CE  3               
0012CE  3               nline:
0012CE  3  18           	clc
0012CF  3  A5 80        	lda scraddr 		; get low byte of address.
0012D1  3  69 20        	adc #$20
0012D3  3  85 80        	sta scraddr 		; new low byte of address.
0012D5  3  90 02        	bcc :+
0012D7  3  E6 81        	inc scraddr+1 		; new high byte of address.
0012D9  3               :
0012D9  3  60           	rts
0012DA  3               
0012DA  3               ;-------------------------------------------------------------
0012DA  3               ; Line drawn, now work out next target address.
0012DA  3               ;
0012DA  3               ; Input:
0012DA  3               ;  B  = right mask
0012DA  3               ;  C  = left mask
0012DA  3               ;  DE = spriteaddress
0012DA  3               ;  scraddr = screen address
0012DA  3               ;-------------------------------------------------------------
0012DA  3               
0012DA  3               ddline:
0012DA  3  A0 00        	ldy #0
0012DC  3  B1 70        	lda (z80_dep),y 	; graphic data.
0012DE  3  25 6E        	and z80_cp 		; mask away what's not needed.
0012E0  3  51 72        	eor (z80_hlp),y 	; XOR with what's there.
0012E2  3  91 72        	sta (z80_hlp),y 	; bung it in.
0012E4  3               
0012E4  3  E6 72        	inc z80_lp 		; next screen address.
0012E6  3  E6 72        	inc z80_lp 		; next screen address.
0012E8  3               
0012E8  3  B1 70        	lda (z80_dep),y 	; fetch data.
0012EA  3  25 6F        	and z80_bp 		; mask away unwanted bits.
0012EC  3  51 72        	eor (z80_hlp),y 	; XOR with what's there.
0012EE  3  91 72        	sta (z80_hlp),y 	; bung it in.
0012F0  3               
0012F0  3  E6 70        	inc z80_ep 		; next graphic.
0012F2  3  D0 02        	bne :+
0012F4  3  E6 71        	inc z80_dp
0012F6  3               :
0012F6  3  C6 72        	dec z80_lp 		; one character cell to the left.
0012F8  3               
0012F8  3  B1 70        	lda (z80_dep),y 	; second bit of data.
0012FA  3  51 72        	eor (z80_hlp),y 	; XOR with what's there.
0012FC  3  91 72        	sta (z80_hlp),y 	; bung it in.
0012FE  3               
0012FE  3  E6 70        	inc z80_ep 		; point to next line of data.
001300  3  D0 02        	bne :+
001302  3  E6 71        	inc z80_dp
001304  3               :
001304  3  C6 72        	dec z80_hlp 		; another char left.
001306  3               
001306  3               ;----------------------------------------------------------------------
001306  3               ; Line drawn, now work out next target address.
001306  3               ;----------------------------------------------------------------------
001306  3               
001306  3               dnline:
001306  3  18           	clc
001307  3  A5 72        	lda z80_lp 		; get low byte of address.
001309  3  69 20        	adc #$20
00130B  3  85 72        	sta z80_lp 		; new low byte of address.
00130D  3  90 02        	bcc :+
00130F  3  E6 73        	inc z80_hp 		; new high byte of address.
001311  3               :
001311  3  60           	rts
001312  3               
001312  3               ;-----------------------------------------------------------
001312  3               ; Animates a sprite.
001312  3               ;
001312  3               ; Input:
001312  3               ;  IX = sprite address
001312  3               ;  HL = last sprite address
001312  3               ;-----------------------------------------------------------
001312  3               
001312  3               animsp:
001312  3  2D 34 02     	and frmno
001315  3  F0 01        	beq :+
001317  3  60           	rts
001318  3               :
001318  3  A0 06        	ldy #6
00131A  3  B1 68        	lda (z80_ix),y		; sprite image
00131C  3  20 8B 15     	jsr gfrm		; get frame data.
00131F  3               
00131F  3  E6 66        	inc z80_l		; point to frames.
001321  3  D0 02        	bne :+
001323  3  E6 67        	inc z80_h
001325  3               :
001325  3  A0 07        	ldy #7
001327  3  B1 68        	lda (z80_ix),y		; sprite frame.
001329  3  18           	clc
00132A  3  69 01        	adc #1			; next one along.
00132C  3  A0 00        	ldy #0
00132E  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
001330  3  90 02        	bcc anims0		; no, not yet.
001332  3  A9 00        	lda #0			; start at first frame.
001334  3               anims0:
001334  3  A0 07        	ldy #7
001336  3  91 68        	sta (z80_ix),y		; new frame.
001338  3  60           	rts
001339  3               
001339  3               ;--------------------------------------------------------------
001339  3               ; Animate back
001339  3               ;
001339  3               ; Input:
001339  3               ;  IX = sprite address
001339  3               ;  HL = last sprite address
001339  3               ;--------------------------------------------------------------
001339  3               
001339  3               animbk:
001339  3  2D 34 02     	and frmno
00133C  3  F0 01        	beq :+
00133E  3  60           	rts
00133F  3               :
00133F  3  A0 06        	ldy #6
001341  3  B1 68        	lda (z80_ix),y		; sprite image.
001343  3  20 8B 15     	jsr gfrm		; get frame data.
001346  3               
001346  3  E6 66        	inc z80_l 		; point to frames.
001348  3  D0 02        	bne :+
00134A  3  E6 67        	inc z80_h
00134C  3               :
00134C  3  A0 07        	ldy #7
00134E  3  B1 68        	lda (z80_ix),y 		; sprite frame.
001350  3  F0 03        	beq :+
001352  3  4C 59 13     	jmp rtanb0 		; yes, start at end.
001355  3               :
001355  3  A0 00        	ldy #0
001357  3  B1 66        	lda (z80_hl),y 		; last sprite.
001359  3               rtanb0:
001359  3  38           	sec
00135A  3  E9 01        	sbc #1			; next one along.
00135C  3  4C 34 13     	jmp anims0		; set new frame.
00135F  3               
00135F  3               ;--------------------------------------------------------------
00135F  3               ; Check for collision with other sprite, strict enforcement.
00135F  3               ;
00135F  3               ; Input:
00135F  3               ;  b		= sprite to test for
00135F  3               ;  ix		= current sprite pointer
00135F  3               ;
00135F  3               ; global:	b
00135F  3               ; local:	x,y,hl,de,skptr
00135F  3               ; calls:	-
00135F  3               ;--------------------------------------------------------------
00135F  3               
00135F  3               sktyp:
00135F  3  A9 2D        	lda #<sprtab				; sprite table.
001361  3  85 66        	sta z80_l
001363  3  A9 18        	lda #>sprtab
001365  3  85 67        	sta z80_h
001367  3               numsp2:
001367  3  A9 0C        	lda #NUMSPR				; number of sprites.
001369  3  8D A2 13     	sta sktptr
00136C  3               sktyp0:
00136C  3  A5 66        	lda z80_l 				; store pointer to sprite.
00136E  3  8D A0 13     	sta skptr
001371  3  A5 67        	lda z80_h
001373  3  8D A1 13     	sta skptr+1
001376  3               
001376  3  A0 00        	ldy #0
001378  3  B1 66        	lda (z80_hl),y 				; get sprite type.
00137A  3  C5 63        	cmp z80_b				; is it the type we seek?
00137C  3  F0 25        	beq coltyp				; yes, we can use this one.
00137E  3               :
00137E  3               sktyp1:
00137E  3  18           	clc
00137F  3  AD A0 13     	lda skptr				; retrieve sprite pointer.
001382  3  69 11        	adc #TABSIZ				; size of each entry.
001384  3  85 66        	sta z80_l
001386  3  AD A1 13     	lda skptr+1
001389  3  69 00        	adc #0
00138B  3  85 67        	sta z80_h
00138D  3  CE A2 13     	dec sktptr					; one less iteration.
001390  3  D0 DA        	bne sktyp0				; keep going until we find a slot.
001392  3               :
001392  3  A9 00        	lda #0					; default to ROM address - no sprite.
001394  3  85 66        	sta z80_l
001396  3  85 67        	sta z80_h
001398  3  8D A0 13     	sta skptr				; store pointer to sprite.
00139B  3  8D A1 13     	sta skptr+1
00139E  3               
00139E  3  18           	clc					; don't return with zero flag set.
00139F  3  60           	rts 					; didn't find one.
0013A0  3               
0013A0  3  00 00        skptr:	.word 0					; search pointer.
0013A2  3  00           sktptr:	.byte 0
0013A3  3               
0013A3  3               coltyp:
0013A3  3  A0 00        	ldy #0
0013A5  3  B1 68        	lda (z80_ix),y				; current sprite type.
0013A7  3  C5 63        	cmp z80_b				; seeking sprite of same type?
0013A9  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
0013AB  3               colty0:
0013AB  3  A0 09        	ldy #9					; distance to x position in table.
0013AD  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
0013AF  3  85 64        	sta z80_e
0013B1  3  88           	dey
0013B2  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
0013B4  3  85 65        	sta z80_d
0013B6  3               
0013B6  3               ; Drop into collision detection.
0013B6  3               
0013B6  3               colc16:
0013B6  3  A0 09        	ldy #9
0013B8  3  B1 68        	lda (z80_ix),y			 	; x coord.
0013BA  3  38           	sec					; subtract x.
0013BB  3  E5 64        	sbc z80_e
0013BD  3  B0 05        	bcs  colc1a 				; result is positive.
0013BF  3  49 FF        	eor #$ff				; make negative positive.
0013C1  3  18           	clc
0013C2  3  69 01        	adc #1
0013C4  3               colc1a:
0013C4  3  C9 10        	cmp #16 				; within x range?
0013C6  3  B0 B6        	bcs sktyp1				; no - they"ve missed.
0013C8  3  85 62        	sta z80_c				; store difference.
0013CA  3               
0013CA  3  A0 08        	ldy #8
0013CC  3  B1 68        	lda (z80_ix),y				; y coord.
0013CE  3  38           	sec
0013CF  3  E5 65        	sbc z80_d				; subtract y.
0013D1  3  B0 05        	bcs colc1b				; result is positive.
0013D3  3  49 FF        	eor #$ff				; make negative positive.
0013D5  3  18           	clc
0013D6  3  69 01        	adc #1
0013D8  3               colc1b:
0013D8  3  C9 10        	cmp #16					; within y range?
0013DA  3  B0 A2        	bcs sktyp1 				; no - they've missed.
0013DC  3  18           	clc					; add x difference.
0013DD  3  65 62        	adc z80_c
0013DF  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
0013E1  3  B0 02        	bcs :+
0013E3  3  38           	sec
0013E4  3  60           	rts 					; carry set if there's a collision.
0013E5  3               :
0013E5  3  4C 7E 13     	jmp sktyp1				; try next sprite in table.
0013E8  3               colty1:
0013E8  3  A5 68        	lda z80_x  				; compare the two.
0013EA  3  C5 66        	cmp z80_l
0013EC  3  D0 09        	bne end_col
0013EE  3  A5 69        	lda z80_i
0013F0  3  C5 67        	cmp z80_h
0013F2  3  D0 03        	bne end_col
0013F4  3  4C 7E 13     	jmp sktyp1 				; addresses are identical.
0013F7  3               end_col:
0013F7  3  4C AB 13     	jmp colty0
0013FA  3               
0013FA  3               ;-----------------------------------------------------------
0013FA  3               ; Display number, left aligned
0013FA  3               ; 
0013FA  3               ; Input:
0013FA  3               ;  a		= number
0013FA  3               ;
0013FA  3               ; global:	-
0013FA  3               ; local:	a,y,bc,hl,displ0
0013FA  3               ; calls:	num2ch,dmsg3
0013FA  3               ;-----------------------------------------------------------
0013FA  3               
0013FA  3               disply:
0013FA  3  85 61        	sta z80_a
0013FC  3  A9 22        	lda #<displ0				; display workspace.
0013FE  3  85 62        	sta z80_c
001400  3  A9 14        	lda #>displ0
001402  3  85 63        	sta z80_b
001404  3  A5 61        	lda z80_a
001406  3  20 F9 04     	jsr num2ch				; convert accumulator to string.
001409  3               displ1:
001409  3  C6 62        	dec z80_c				; back one character.
00140B  3  D0 02        	bne :+
00140D  3  C6 63        	dec z80_b
00140F  3               :
00140F  3  A0 00        	ldy #0
001411  3  B1 62        	lda (z80_bc),y				; fetch digit.
001413  3  09 80        	ora #128				; insert end marker.
001415  3  91 62        	sta (z80_bc),y				; new value.
001417  3               
001417  3  A9 22        	lda #<displ0				; display space.
001419  3  85 66        	sta z80_l
00141B  3  A9 14        	lda #>displ0
00141D  3  85 67        	sta z80_h
00141F  3  4C EC 0E     	jmp dmsg3				; display the string.
001422  3               
001422  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
001426  3               
001426  3               ;----------------------------------------------------------------
001426  3               ; Initialise screen.
001426  3               ;
001426  3               ; global:	roomtb,scno
001426  3               ; local:	-
001426  3               ; calls:	tstcs
001426  3               ;----------------------------------------------------------------
001426  3               
001426  3               initsc:
001426  3  AD 0A 19     	lda roomtb 			; whereabouts in the map are we?
001429  3  20 34 14     	jsr tstsc 			; find displacement.
00142C  3  C9 FF        	cmp #255 			; is it valid?
00142E  3  F0 03        	beq init_end 			; no, it's rubbish.
001430  3  8D 3E 02     	sta scno			; store new room number.
001433  3               init_end:
001433  3  60           	rts
001434  3               
001434  3               ;----------------------------------------------------------------
001434  3               ; Test screen.
001434  3               ;
001434  3               ; global:	-
001434  3               ; local:	x
001434  3               ; calls:	-
001434  3               ;----------------------------------------------------------------
001434  3               
001434  3               tstsc:
001434  3  8D 3F 14     	sta tmproom
001437  3  18           	clc
001438  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
00143A  3  AA           	tax 				; add displacement to map data.
00143B  3  BD 13 19     	lda mapdat-MAPWID,x 		; find room number there.
00143E  3  60           	rts
00143F  3               
00143F  3  00           tmproom:	.byte 0
001440  3               
001440  3               ;--------------------------
001440  3               ; Screen left.
001440  3               ;--------------------------
001440  3               
001440  3               scrl:
001440  3  AD 0A 19     	lda roomtb 			; present room table pointer.
001443  3  38           	sec
001444  3  E9 01        	sbc #1				; room left.
001446  3               scrl0:
001446  3  20 34 14     	jsr tstsc			; test screen.
001449  3  C9 FF        	cmp #255			; is there a screen this way?
00144B  3  D0 01        	bne :+
00144D  3  60           	rts				; no, return to loop.
00144E  3               :
00144E  3  AD 3F 14     	lda tmproom			; restore room displacement.
001451  3  8D 0A 19     	sta roomtb			; new room table position.
001454  3               scrl1:
001454  3  20 26 14     	jsr initsc 			; set new screen.
001457  3  A9 02        	lda #2
001459  3  8D 60 02     	sta restfl 			; set it.
00145C  3  60           	rts
00145D  3               scrr:
00145D  3  AD 0A 19     	lda roomtb 			; room table pointer.
001460  3  18           	clc
001461  3  69 01        	adc #1				; room right.
001463  3  4C 46 14     	jmp scrl0
001466  3               scru:
001466  3  AD 0A 19     	lda roomtb 			; room table pointer.
001469  3  38           	sec
00146A  3  E9 03        	sbc #MAPWID 			; room up.
00146C  3  4C 46 14     	jmp scrl0
00146F  3               scrd:
00146F  3  AD 0A 19     	lda roomtb 			; room table pointer.
001472  3  18           	clc
001473  3  69 03        	adc #MAPWID 			; room down.
001475  3  4C 46 14     	jmp scrl0
001478  3               
001478  3               ;-----------------------------------------
001478  3               ; Jump to new screen.
001478  3               ;-----------------------------------------
001478  3               
001478  3               nwscr:
001478  3  A2 00        	ldx #0				; start of map data.
00147A  3               nwscr0:
00147A  3  DD 16 19     	cmp mapdat,x
00147D  3  F0 06        	beq nwscr1			; have we found a match for screen?
00147F  3  E8           	inx 				; next room.
001480  3  E0 50        	cpx #80				; zero room count, 80 to search.
001482  3  D0 F6        	bne nwscr0			; keep looking.
001484  3  60           	rts
001485  3               nwscr1:
001485  3  8E 0A 19     	stx roomtb			; set the map position.
001488  3  4C 54 14     	jmp scrl1			; draw new room.
00148B  3               
00148B  3               
00148B  3               ;----------------------------------------------------------
00148B  3               ; Gravity processing.
00148B  3               ;----------------------------------------------------------
00148B  3               
00148B  3               grav:
00148B  3  A0 0D        	ldy #13
00148D  3  B1 68        	lda (z80_ix),y			; jump pointer low.
00148F  3  85 66        	sta z80_l
001491  3  A0 0E        	ldy #14
001493  3  B1 68        	lda (z80_ix),y			; jump pointer high.
001495  3  85 67        	sta z80_h
001497  3  05 66        	ora z80_l			; merge in low byte.
001499  3  D0 01        	bne :+
00149B  3  60           	rts				; if neither is set, we're not in the air.
00149C  3               :
00149C  3  A0 00        	ldy #0
00149E  3  B1 66        	lda (z80_hl),y			; pixels to move.
0014A0  3  85 61        	sta z80_a
0014A2  3  C9 63        	cmp #99				; reached the end?
0014A4  3  D0 0C        	bne grav0			; no, continue.
0014A6  3               grav2:
0014A6  3  C6 66        	dec z80_l			; go back to previous value.
0014A8  3  C9 FF        	cmp #$ff
0014AA  3  D0 02        	bne :+
0014AC  3  C6 67        	dec z80_h
0014AE  3               :
0014AE  3  B1 66        	lda (z80_hl),y			; fetch that from table.
0014B0  3  85 61        	sta z80_a
0014B2  3               grav0:
0014B2  3  E6 66        	inc z80_l			; point to next table entry.
0014B4  3  D0 02        	bne :+
0014B6  3  E6 67        	inc z80_h
0014B8  3               :
0014B8  3  A5 66        	lda z80_l
0014BA  3  A0 0D        	ldy #13
0014BC  3  91 68        	sta (z80_ix),y			; store new pointer low.
0014BE  3  A5 67        	lda z80_h
0014C0  3  A0 0E        	ldy #14
0014C2  3  91 68        	sta (z80_ix),y			; store new pointer high.
0014C4  3               grav1:
0014C4  3  A5 61        	lda z80_a
0014C6  3  D0 01        	bne :+				; any movement required?
0014C8  3  60           	rts				; no, not this time.
0014C9  3               :
0014C9  3  A5 61        	lda z80_a
0014CB  3  C9 80        	cmp #128			; is it up or down?
0014CD  3  B0 15        	bcs gravu			; it's up.
0014CF  3               gravd:
0014CF  3  85 63        	sta z80_b			; set pixels to move.
0014D1  3               gravd0:
0014D1  3  20 7E 0B     	jsr cangd			; can we go down?
0014D4  3  D0 28        	bne gravst			; can't move down, so stop.
0014D6  3  A0 08        	ldy #8
0014D8  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
0014DA  3  18           	clc
0014DB  3  69 01        	adc #1
0014DD  3  91 68        	sta (z80_ix),y
0014DF  3  C6 63        	dec z80_b
0014E1  3  D0 EE        	bne gravd0
0014E3  3  60           	rts
0014E4  3               gravu:
0014E4  3  49 FF        	eor #$ff			; flip the sign so it's positive.
0014E6  3  18           	clc
0014E7  3  69 01        	adc #1
0014E9  3  85 63        	sta z80_b			; set pixels to move.
0014EB  3               gravu0:
0014EB  3  20 46 0B     	jsr cangu			; can we go up?
0014EE  3  D0 71        	bne ifalls			; can't move up, go down next.
0014F0  3  A0 08        	ldy #8
0014F2  3  B1 68        	lda (z80_ix),y
0014F4  3  38           	sec
0014F5  3  E9 01        	sbc #1
0014F7  3  91 68        	sta (z80_ix),y			; adjust new x coord.
0014F9  3  C6 63        	dec z80_b
0014FB  3  D0 EE        	bne gravu0
0014FD  3  60           	rts
0014FE  3               gravst:
0014FE  3  A0 0D        	ldy #13
001500  3  B1 68        	lda (z80_ix),y			; jump pointer low.
001502  3  85 66        	sta z80_l
001504  3  A0 0E        	ldy #14
001506  3  B1 68        	lda (z80_ix),y			; jump pointer high.
001508  3  85 67        	sta z80_h
00150A  3               
00150A  3  A9 00        	lda #0				; null value in pointer.
00150C  3  A0 0D        	ldy #13
00150E  3  91 68        	sta (z80_ix),y			; store new pointer low.
001510  3  C8           	iny
001511  3  91 68        	sta (z80_ix),y			; store new pointer high.
001513  3               
001513  3  A0 00        	ldy #0
001515  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
001517  3  C9 63        	cmp #99				; is it the end marker?
001519  3               evftf:
001519  3  F0 01        	beq :+				; yes, fallen too far.
00151B  3  60           	rts
00151C  3               :
00151C  3  4C F7 19     	jmp evnt15			; EVENT FELLTOOFAR
00151F  3               
00151F  3               ;------------------------------------------------
00151F  3               ; Initiate fall check.
00151F  3               ;------------------------------------------------
00151F  3               
00151F  3               ifall:
00151F  3  A0 0D        	ldy #13
001521  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
001523  3  85 66        	sta z80_l
001525  3  A0 0E        	ldy #14
001527  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
001529  3  85 67        	sta z80_h			; high byte in accumulator.
00152B  3  05 66        	ora z80_l			; merge in low byte.
00152D  3  F0 01        	beq :+
00152F  3  60           	rts				; if either is set, we're already in the air.
001530  3               :
001530  3  A0 09        	ldy #9
001532  3  B1 68        	lda (z80_ix),y			; y coordinate.
001534  3  8D 63 02     	sta dispx
001537  3               numsp7:
001537  3  A0 08        	ldy #8
001539  3  B1 68        	lda (z80_ix),y			; look x coordinate.
00153B  3  18           	clc
00153C  3  69 10        	adc #16				; add 16 pixels.
00153E  3  8D 64 02     	sta dispy			; set up test coordinates.
001541  3  20 80 0D     	jsr tstbl			; get map address.
001544  3  20 18 0C     	jsr plchk			; block, platform check.
001547  3  F0 01        	beq :+
001549  3  60           	rts				; it's solid, don't fall.
00154A  3               :
00154A  3  E6 86        	inc bufaddr			; look right one cell.
00154C  3  20 18 0C     	jsr plchk			; block, platform check.
00154F  3  F0 01        	beq :+
001551  3  60           	rts				; it's solid, don't fall.
001552  3               :
001552  3  AD 63 02     	lda dispx			; y coordinate.
001555  3  29 07        	and #7				; position straddling block cells.
001557  3  F0 08        	beq ifalls			; no more checks needed.
001559  3  E6 86        	inc bufaddr			; look to third cell.
00155B  3  20 18 0C     	jsr plchk			; block, platform check.
00155E  3  F0 01        	beq :+
001560  3  60           	rts				; it's solid, don't fall.
001561  3               :
001561  3               ifalls:
001561  3  A9 B6        	lda #<jtab			; jump table start.
001563  3  85 66        	sta z80_l
001565  3  A9 20        	lda #>jtab
001567  3  85 67        	sta z80_h
001569  3               ifal0:
001569  3  E6 66        	inc z80_l			; point to next value.
00156B  3  D0 02        	bne :+
00156D  3  E6 67        	inc z80_h
00156F  3               :
00156F  3  A0 00        	ldy #0
001571  3  B1 66        	lda (z80_hl),y			; fetch value.
001573  3  F0 F4        	beq ifal0			; no, get next value.
001575  3  C9 63        	cmp #99				; reached end of table?
001577  3  D0 01        	bne :+
001579  3  60           	rts				; yes, don't fall.
00157A  3               :
00157A  3  C9 80        	cmp #128			; is it going up?
00157C  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
00157E  3               
00157E  3  A0 0D        	ldy #13
001580  3  A5 66        	lda z80_l
001582  3  91 68        	sta (z80_ix),y 			; set jump low.
001584  3  A0 0E        	ldy #14
001586  3  A5 67        	lda z80_h
001588  3  91 68        	sta (z80_ix),y 			; set jump high.
00158A  3  60           	rts
00158B  3               
00158B  3               
00158B  3               ;----------------------------------------------------
00158B  3               ; Get frame data for a particular sprite.
00158B  3               ; Input:
00158B  3               ;  a		= framenumer
00158B  3               ; Output:
00158B  3               ;  hl		= frame address
00158B  3               ;
00158B  3               ; global:	hl,frmptr
00158B  3               ; local:	-
00158B  3               ; calls:	-
00158B  3               ;----------------------------------------------------
00158B  3               
00158B  3               gfrm:
00158B  3  0A           	asl a	 		 	; multiple of 2.
00158C  3  18           	clc
00158D  3  6D 65 02     	adc frmptr 			; frames used by game.
001590  3  85 66        	sta z80_l
001592  3  AD 66 02     	lda frmptr+1
001595  3  69 00        	adc #0
001597  3  85 67        	sta z80_h 			; point to frame start.
001599  3  60           	rts
00159A  3               
00159A  3               ;----------------------------------------------------
00159A  3               ; Find sprite list for current room.
00159A  3               ;
00159A  3               ; global:	hl
00159A  3               ; local:	x,y
00159A  3               ; calls:	-
00159A  3               ;----------------------------------------------------
00159A  3               
00159A  3               sprlst:
00159A  3  A9 8B        	lda #<nmedat 			; list of enemy sprites.
00159C  3  85 66        	sta z80_l
00159E  3  A9 1D        	lda #>nmedat
0015A0  3  85 67        	sta z80_h
0015A2  3  AE 3E 02     	ldx scno 			; screen number.
0015A5  3  D0 01        	bne sprls2 			; is it the first screen?
0015A7  3  60           	rts 				; yes, don't need to search data.
0015A8  3               sprls2:
0015A8  3  A0 00        	ldy #0
0015AA  3               sprls1:
0015AA  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
0015AC  3  C9 FF        	cmp #255			; is it an end marker?
0015AE  3  F0 0E        	beq sprls0 			; yes, end of this room.
0015B0  3               
0015B0  3  18           	clc 				; point to next sprite in list.
0015B1  3  A5 66        	lda z80_l
0015B3  3  69 04        	adc #NMESIZ
0015B5  3  85 66        	sta z80_l
0015B7  3  90 02        	bcc :+
0015B9  3  E6 67        	inc z80_h
0015BB  3               :
0015BB  3  4C AA 15     	jmp sprls1 			; continue until end of room.
0015BE  3               sprls0:
0015BE  3  E6 66        	inc z80_l 			; point to start of next screen.s
0015C0  3  D0 02        	bne :+
0015C2  3  E6 67        	inc z80_h
0015C4  3               :
0015C4  3  CA           	dex
0015C5  3  D0 E3        	bne sprls1 			; continue until room found.
0015C7  3  60           	rts
0015C8  3               
0015C8  3               
0015C8  3               ;----------------------------------------------------
0015C8  3               ; Clear all but a single player sprite.
0015C8  3               ;
0015C8  3               ; global:	-
0015C8  3               ; local:	x,y,ix
0015C8  3               ; calls:	-
0015C8  3               ;----------------------------------------------------
0015C8  3               
0015C8  3               nspr:
0015C8  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0015CA  3  8D DD 11     	sta sprcnt
0015CD  3  A9 2D        	lda #<sprtab 			; sprite table.
0015CF  3  85 68        	sta z80_x
0015D1  3  A9 18        	lda #>sprtab
0015D3  3  85 69        	sta z80_i
0015D5  3               nspr0:
0015D5  3  A0 00        	ldy #0 				; fetch sprite type.
0015D7  3  B1 68        	lda (z80_ix),y 			; is it a player?
0015D9  3  F0 1B        	beq nspr1 			; yes, keep this one.
0015DB  3               
0015DB  3  A9 FF        	lda #255
0015DD  3  A0 00        	ldy #0 				; fetch sprite type.
0015DF  3  91 68        	sta (z80_ix),y 			; delete sprite.
0015E1  3  A0 05        	ldy #5
0015E3  3  91 68        	sta (z80_ix),y 			; remove next type.
0015E5  3               
0015E5  3  18           	clc	 			; next sprite.
0015E6  3  A5 68        	lda z80_x
0015E8  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0015EA  3  85 68        	sta z80_x
0015EC  3  90 02        	bcc :+
0015EE  3  E6 69        	inc z80_i
0015F0  3               :
0015F0  3  CE DD 11     	dec sprcnt	 			; one less space in the table.
0015F3  3  D0 E0        	bne nspr0
0015F5  3  60           	rts
0015F6  3               nspr1:
0015F6  3  A9 FF        	lda #255
0015F8  3  A0 00        	ldy #0
0015FA  3  91 68        	sta (z80_ix),y 			; delete sprite.
0015FC  3               
0015FC  3  18           	clc	 			; point to next sprite.
0015FD  3  A5 68        	lda z80_x
0015FF  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001601  3  85 68        	sta z80_x
001603  3  90 02        	bcc :+
001605  3  E6 69        	inc z80_i
001607  3               :
001607  3  CE DD 11     	dec sprcnt	 			; one less to do.
00160A  3  D0 01        	bne nspr2
00160C  3  60           	rts
00160D  3               nspr2:
00160D  3  A9 FF        	lda #255
00160F  3  A0 00        	ldy #0
001611  3  91 68        	sta (z80_ix),y 			; delete sprite.
001613  3  A0 05        	ldy #5
001615  3  91 68        	sta (z80_ix),y 			; remove next type.
001617  3               
001617  3  18           	clc	 			; next sprite.
001618  3  A5 68        	lda z80_x
00161A  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00161C  3  85 68        	sta z80_x
00161E  3  90 02        	bcc :+
001620  3  E6 69        	inc z80_i
001622  3               :
001622  3  CE DD 11     	dec sprcnt	 			; one less space in table.
001625  3  D0 E6        	bne nspr2
001627  3  60           	rts
001628  3               
001628  3               ;----------------------------------------------------------
001628  3               ; Two initialisation routines.
001628  3               ; Initialise sprites - copy everything from list to table.
001628  3               ;
001628  3               ; global:	-
001628  3               ; local:	x,y,ix
001628  3               ; calls:	cpsp
001628  3               ;----------------------------------------------------------
001628  3               
001628  3               ispr:
001628  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00162A  3  8D DD 11     	sta sprcnt
00162D  3  A9 2D        	lda #<sprtab			; sprite table.
00162F  3  85 68        	sta z80_x
001631  3  A9 18        	lda #>sprtab
001633  3  85 69        	sta z80_i
001635  3               ispr2:
001635  3  A0 00        	ldy #0
001637  3  B1 66        	lda (z80_hl),y 			; fetch byte.
001639  3  C9 FF        	cmp #255 			; is it an end marker?
00163B  3  D0 01        	bne :+
00163D  3  60           	rts 				; yes, no more to do.
00163E  3               :
00163E  3               ispr1:
00163E  3  A0 00        	ldy #0
001640  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
001642  3  C9 FF        	cmp #255 			; is it enabled yet?
001644  3  D0 08        	bne ispr4			; yes, try another slot.
001646  3               
001646  3  A0 05        	ldy #5
001648  3  B1 68        	lda (z80_ix),y		 	; next type.
00164A  3  C9 FF        	cmp #255 			; is it enabled yet?
00164C  3  F0 11        	beq ispr3 			; no, process this one.
00164E  3               ispr4:
00164E  3  18           	clc 				; next sprite.
00164F  3  A5 68        	lda z80_x
001651  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
001653  3  85 68        	sta z80_x
001655  3  90 02        	bcc :+
001657  3  E6 69        	inc z80_i
001659  3               :
001659  3  CE DD 11     	dec sprcnt
00165C  3  D0 E0        	bne ispr1 			; repeat for remaining sprites.
00165E  3  60           	rts  				; no more room in table.
00165F  3               ispr3:
00165F  3  20 B3 16     	jsr cpsp			; initialise a sprite.
001662  3  CE DD 11     	dec sprcnt			; one less space in the table.
001665  3  D0 CE        	bne ispr2
001667  3  60           	rts
001668  3               
001668  3               
001668  3               ;-----------------------------------------------------------------------
001668  3               ; Initialise sprites - but not player, we're keeping the old one.
001668  3               ;
001668  3               ; global:	-
001668  3               ; local:	x,y,ix
001668  3               ; calls:	cpsp
001668  3               ;-----------------------------------------------------------------------
001668  3               
001668  3               kspr:
001668  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
00166A  3  A9 2D        	lda #<sprtab 			; sprite table.
00166C  3  85 68        	sta z80_x
00166E  3  A9 18        	lda #>sprtab
001670  3  85 69        	sta z80_i
001672  3               kspr2:
001672  3  A0 00        	ldy #0
001674  3  B1 66        	lda (z80_hl),y 			; fetch byte.
001676  3  C9 FF        	cmp #255 			; is it an end marker?
001678  3  D0 01        	bne :+
00167A  3  60           	rts 				; yes, no more to do.
00167B  3               :
00167B  3  C9 00        	cmp #0
00167D  3  D0 0E        	bne kspr1 			; no, add to table as normal.
00167F  3               
00167F  3  18           	clc 				; next sprite.
001680  3  A5 66        	lda z80_l
001682  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
001684  3  85 66        	sta z80_l
001686  3  90 02        	bcc :+
001688  3  E6 67        	inc z80_h
00168A  3               :
00168A  3  4C 72 16     	jmp kspr2
00168D  3               kspr1:
00168D  3  A0 00        	ldy #0 				; fetch sprite type.
00168F  3  B1 68        	lda (z80_ix),y
001691  3  C9 FF        	cmp #255 			; is it enabled yet?
001693  3  D0 08        	bne kspr4 			; yes, try another slot.
001695  3               
001695  3  A0 05        	ldy #5 				; next type.
001697  3  B1 68        	lda (z80_ix),y
001699  3  C9 FF        	cmp #255 			; is it enabled yet?
00169B  3  F0 0F        	beq kspr3 			; no, process this one.
00169D  3               kspr4:
00169D  3  18           	clc 				; next sprite.
00169E  3  A5 68        	lda z80_x
0016A0  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0016A2  3  85 68        	sta z80_x
0016A4  3  90 02        	bcc :+
0016A6  3  E6 69        	inc z80_i
0016A8  3               :
0016A8  3  CA           	dex	 			; repeat for remaining sprites.
0016A9  3  D0 E2        	bne kspr1
0016AB  3  60           	rts  				; no more room in table.
0016AC  3               kspr3:
0016AC  3  20 B3 16     	jsr cpsp 			; copy sprite to table.
0016AF  3  CA           	dex	 			; one less space in the table.
0016B0  3  D0 C0        	bne kspr2
0016B2  3  60           	rts
0016B3  3               
0016B3  3               ;----------------------------------------------
0016B3  3               ; Copy sprite from list to table.
0016B3  3               ;
0016B3  3               ; global:	hl,ix
0016B3  3               ; local:	y
0016B3  3               ; calls:	evnt09
0016B3  3               ;----------------------------------------------
0016B3  3               
0016B3  3               cpsp:
0016B3  3  A0 00        	ldy #0				; fetch byte from table.
0016B5  3  B1 66        	lda (z80_hl),y
0016B7  3  91 68        	sta (z80_ix),y			; set up type.
0016B9  3  A0 05        	ldy #PAM1ST
0016BB  3  91 68        	sta (z80_ix),y 			; set up type.
0016BD  3               
0016BD  3  E6 66        	inc z80_l 			; move to next byte.
0016BF  3  D0 02        	bne :+
0016C1  3  E6 67        	inc z80_h
0016C3  3               :
0016C3  3  A0 00        	ldy #0 				; fetch byte from table.
0016C5  3  B1 66        	lda (z80_hl),y
0016C7  3  A0 06        	ldy #6
0016C9  3  91 68        	sta (z80_ix),y			; set up image.
0016CB  3               
0016CB  3  E6 66        	inc z80_l 			; move to next byte.
0016CD  3  D0 02        	bne :+
0016CF  3  E6 67        	inc z80_h
0016D1  3               :
0016D1  3  A0 00        	ldy #0
0016D3  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
0016D5  3  A0 08        	ldy #8
0016D7  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0016D9  3               
0016D9  3  A9 C8        	lda #200 			; set initial coordinate off screen.
0016DB  3  A0 03        	ldy #3
0016DD  3  91 68        	sta (z80_ix),y
0016DF  3               
0016DF  3  E6 66        	inc z80_l 			; move to next byte.
0016E1  3  D0 02        	bne :+
0016E3  3  E6 67        	inc z80_h
0016E5  3               :
0016E5  3  A0 00        	ldy #0 				; fetch byte from table.
0016E7  3  B1 66        	lda (z80_hl),y
0016E9  3  A0 09        	ldy #9
0016EB  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0016ED  3               
0016ED  3  E6 66        	inc z80_l 			; move to next byte.
0016EF  3  D0 02        	bne :+
0016F1  3  E6 67        	inc z80_h
0016F3  3               :
0016F3  3  A9 00        	lda #0				; zeroes in accumulator.
0016F5  3  A0 07        	ldy #7 				; reset frame number.
0016F7  3  91 68        	sta (z80_ix),y
0016F9  3  A0 0A        	ldy #10 			; reset direction.
0016FB  3  91 68        	sta (z80_ix),y
0016FD  3  A0 0D        	ldy #13				; reset jump pointer low.
0016FF  3  91 68        	sta (z80_ix),y
001701  3  A0 0E        	ldy #14	 			; reset jump pointer high.
001703  3  91 68        	sta (z80_ix),y
001705  3               
001705  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
001707  3  A0 10        	ldy #16
001709  3  91 68        	sta (z80_ix),y
00170B  3               evis0:
00170B  3  A5 69        	lda z80_i
00170D  3  48           	pha
00170E  3  A5 68        	lda z80_x
001710  3  48           	pha
001711  3  A5 67        	lda z80_h
001713  3  48           	pha
001714  3  A5 66        	lda z80_l
001716  3  48           	pha
001717  3               
001717  3  20 DA 19     	jsr evnt09 			; perform event.
00171A  3               
00171A  3  68           	pla
00171B  3  85 66        	sta z80_l
00171D  3  68           	pla
00171E  3  85 67        	sta z80_h
001720  3  68           	pla
001721  3  85 68        	sta z80_x
001723  3  68           	pla
001724  3  85 69        	sta z80_i
001726  3               
001726  3  18           	clc
001727  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
001729  3  69 11        	adc #TABSIZ		 	; next sprite.
00172B  3  85 68        	sta z80_x
00172D  3  90 02        	bcc :+
00172F  3  E6 69        	inc z80_i
001731  3               :
001731  3  60           	rts
001732  3               
001732  3               
001732  3               ;-------------------------------------
001732  3               ; Clear the play area window.
001732  3               ;-------------------------------------
001732  3               
001732  3               clw:
001732  3  AD 35 02     	lda wintop			; get coordinates of window.
001735  3  8D 64 02     	sta dispy			; put into dispx for calculation.
001738  3  AD 36 02     	lda winlft
00173B  3  8D 63 02     	sta dispx
00173E  3               
00173E  3  AD 37 02     	lda winhgt			; height of window.
001741  3  8D BE 0A     	sta rrow			; copy to b register.
001744  3               clw3:
001744  3  AD 38 02     	lda winwid 			; width of window.
001747  3  8D BD 0A     	sta rcol
00174A  3               clw2:
00174A  3  20 D7 08     	jsr gprad 			; get print address.
00174D  3  A9 00        	lda #0				; zero byte to write.
00174F  3  A2 07        	ldx #7				; pixel height of each cell.
001751  3               clw1:
001751  3  BC 4D 09     	ldy scrtab,x
001754  3  91 80        	sta (scraddr),y 			; copy to screen.
001756  3  CA           	dex				; next screen row down.
001757  3  10 F8        	bpl clw1
001759  3               
001759  3  EE 63 02     	inc dispx			; next column.
00175C  3  CE BD 0A     	dec rcol			; one less to do.
00175F  3  D0 E9        	bne clw2			; repeat for remaining columns.
001761  3               
001761  3  AD 36 02     	lda winlft			; get left edge.
001764  3  8D 63 02     	sta dispx 			; reset x.
001767  3  EE 64 02     	inc dispy 			; next line down.
00176A  3               
00176A  3  CE BE 0A     	dec rrow
00176D  3  D0 D5        	bne clw3			; repeat down the screen.
00176F  3               
00176F  3  AD 35 02     	lda wintop			; get coordinates of window.
001772  3  8D 59 02     	sta chary			; put into display position.
001775  3  AD 36 02     	lda winlft
001778  3  8D 58 02     	sta charx
00177B  3  60           	rts
00177C  3               
00177C  3               
00177C  3               ;----------------------------------------------------------
00177C  3               ; Effects code.
00177C  3               ; Ticker routine is called 25 times per second.
00177C  3               ;
00177C  3               ; HL = txtscr = left text screen address
00177C  3               ; DE = txtscr+txtwid-1 = right text screen address
00177C  3               ; BC = txtpos = text scroller position
00177C  3               ;
00177C  3               ;----------------------------------------------------------
00177C  3               
00177C  3               .if sflag
00177C  3               scrly:
00177C  3               	rts
00177C  3               	.word txtscr         	; get left screen address.
00177C  3               	sta scr_l
00177C  3               	lda txtscr+1
00177C  3               	sta scr_l+1
00177C  3               	sta scr_r+1
00177C  3               	
00177C  3               	stx xtmp
00177C  3               
00177C  3               	clc         		; get right screen address.
00177C  3               	lda scr_l
00177C  3               	adc txtwid
00177C  3               	sta scr_r
00177C  3               	dec scr_r
00177C  3               scrly1:
00177C  3               	ldy txtwid		; set txtwide
00177C  3               	dey
00177C  3               	clc
00177C  3               scrly0:
00177C  3               	lda (scr_l),y		; scroll 1 line
00177C  3               	rol a
00177C  3               	sta (scr_l),y
00177C  3               	dey
00177C  3               	bpl scrly0
00177C  3               
00177C  3               	clc			; point to next line
00177C  3               	lda scr_l
00177C  3               	adc #32
00177C  3               	sta scr_l
00177C  3               	bcc scrly1		; repeat 8 times
00177C  3               
00177C  3               	lda txtpos 		; get text pointer.
00177C  3               	sta scr_txt
00177C  3               	lda txtpos+1
00177C  3               	sta scr_txt+1
00177C  3               
00177C  3               	ldy #0
00177C  3               	lda (scr_txt),y 		; find character we're displaying.
00177C  3               	and #127 		; remove end marker bit if applicable.
00177C  3               	cmp #13			; is it newline?
00177C  3               	bne scrly5 		; no, it's okay.
00177C  3               	lda #32			; convert to a space instead.
00177C  3               scrly5:
00177C  3               	sta fntaddr		; calculate char address
00177C  3               	lda #0
00177C  3               	sta fntaddr+1
00177C  3               	asl fntaddr  		; multiply char by 8.
00177C  3               	rol fntaddr+1
00177C  3               	asl fntaddr
00177C  3               	rol fntaddr+1
00177C  3               	asl fntaddr
00177C  3               	rol fntaddr+1
00177C  3               	lda fntaddr
00177C  3               	clc
00177C  3               	adc FontPtr
00177C  3               	sta scrly3+1		; that's the low byte.
00177C  3               	lda fntaddr+1
00177C  3               	adc FontPtr+1
00177C  3               	sta scrly3+2		; add displacement.
00177C  3               
00177C  3               	ldx #0
00177C  3               scrly3:
00177C  3               	lda $3333,x		; get image of char line.
00177C  3               	and txtbit
00177C  3               	beq scrly2		; don't plot pixel
00177C  3               	ldy scrline,x
00177C  3               	lda (scr_r),y
00177C  3               	clc
00177C  3               	ora #1
00177C  3               	sta (scr_r),y		; plot pixel
00177C  3               scrly2:
00177C  3               	inx			; next line of char.
00177C  3               	cpx #8
00177C  3               	bne scrly3
00177C  3               
00177C  3               	lsr txtbit		; bit of text to display.
00177C  3               	bcs :+
00177C  3               	rts
00177C  3               :
00177C  3               	ldy #0
00177C  3               	lda (scr_txt),y 	; what was the character?
00177C  3               	asl a	  		; end of message?
00177C  3               	bcs scrly4
00177C  3               	inc txtpos
00177C  3               	bne :+
00177C  3               	inc txtpos+1
00177C  3               :
00177C  3               	jmp scrly6 		; not yet - continue.
00177C  3               scrly4:
00177C  3               	lda txtini 		; start of scrolling message.
00177C  3               	sta txtpos
00177C  3               	lda txtini+1
00177C  3               	sta txtpos+1
00177C  3               scrly6:
00177C  3               	lda #128
00177C  3               	sta txtbit
00177C  3               	ldx xtmp
00177C  3               	rts
00177C  3               
00177C  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
00177C  3               
00177C  3               ;-------------------------------------------------------
00177C  3               ; Entry TICKER command
00177C  3               ;
00177C  3               ; Entry:
00177C  3               ;  z80_b = message nr
00177C  3               ;  z80_c = width
00177C  3               ;-------------------------------------------------------
00177C  3               
00177C  3               iscrly:
00177C  3               	jsr prescr 		; set up display position.
00177C  3               
00177C  3               	lda #<msgdat 		; text messages.
00177C  3               	sta z80_l
00177C  3               	lda #>msgdat
00177C  3               	sta z80_h
00177C  3               
00177C  3               	lda z80_c 		; width.
00177C  3               	sec
00177C  3               	sbc #1			; subtract one.
00177C  3               	cmp #32 		; is it between 1 and 32?
00177C  3               	bcc :+
00177C  3               	lda #$60
00177C  3               	jmp iscrl0		; no, disable messages.
00177C  3               :
00177C  3               	ldx z80_b		; message number.
00177C  3               	jsr getwrd 		; find message start.
00177C  3               
00177C  3               	lda z80_l		; set initial text position.
00177C  3               	sta txtini
00177C  3               	lda z80_h
00177C  3               	sta txtini+1
00177C  3               
00177C  3               	lda #$ad		; code for lda adrr
00177C  3               iscrl0:
00177C  3               	sta scrly		; enable/disable scrolling routine.
00177C  3               
00177C  3               	jsr prescr 		; set up display position.
00177C  3               	jsr gprad 		; get print address.
00177C  3               
00177C  3               	lda scraddr 		; set text screen address.
00177C  3               	sta txtscr
00177C  3               	lda scraddr+1
00177C  3               	sta txtscr+1
00177C  3               
00177C  3               	lda z80_c		; width.
00177C  3               	sta txtwid		; set width in working storage.
00177C  3               
00177C  3               	lda #128 		; start with leftmost bit.
00177C  3               	sta txtbit
00177C  3               
00177C  3               	jmp scrly4
00177C  3               .endif
00177C  3               
00177C  3               ;------------------------------------------------------------------
00177C  3               ; Dig routine, conditional assembly depending on dflag
00177C  3               ;------------------------------------------------------------------
00177C  3               .if dflag
00177C  3               dig:
00177C  3  29 03        	and #3
00177E  3  F0 41        	beq digr		; dig right
001780  3  C9 01        	cmp #1
001782  3  F0 2A        	beq digl		; dig left
001784  3  C9 02        	cmp #2
001786  3  F0 13        	beq digd		; dig down
001788  3               
001788  3               ; Dig up.
001788  3               
001788  3               digu:				; dig up
001788  3  A0 08        	ldy #8
00178A  3  B1 68        	lda (z80_ix),y
00178C  3  38           	sec
00178D  3  E9 02        	sbc #2
00178F  3  8D 64 02     	sta dispy		; set y
001792  3               
001792  3  C8           	iny
001793  3  B1 68        	lda (z80_ix),y
001795  3  8D 63 02     	sta dispx		; set x
001798  3  4C D4 17     	jmp digv
00179B  3               
00179B  3               ; Dig down.
00179B  3               
00179B  3               digd:
00179B  3  A0 09        	ldy #9
00179D  3  B1 68        	lda (z80_ix),y
00179F  3  8D 63 02     	sta dispx		; set y
0017A2  3               
0017A2  3  88           	dey
0017A3  3  18           	clc
0017A4  3  B1 68        	lda (z80_ix),y
0017A6  3  69 10        	adc #16
0017A8  3  8D 64 02     	sta dispy		; set y
0017AB  3  4C D4 17     	jmp digv
0017AE  3               
0017AE  3               ; Dig left.
0017AE  3               
0017AE  3               digl:
0017AE  3  A0 08        	ldy #8
0017B0  3  B1 68        	lda (z80_ix),y
0017B2  3  8D 64 02     	sta dispy		; set y
0017B5  3               
0017B5  3  C8           	iny
0017B6  3  B1 68        	lda (z80_ix),y
0017B8  3  38           	sec
0017B9  3  E9 02        	sbc #2			; x=x-2
0017BB  3  8D 63 02     	sta dispx		; set x
0017BE  3  4C 00 18     	jmp digh
0017C1  3               
0017C1  3               ; Dig right.
0017C1  3               
0017C1  3               digr:
0017C1  3  A0 08        	ldy #8
0017C3  3  B1 68        	lda (z80_ix),y
0017C5  3  8D 64 02     	sta dispy		; set y
0017C8  3               
0017C8  3  C8           	iny
0017C9  3  B1 68        	lda (z80_ix),y
0017CB  3  18           	clc
0017CC  3  69 10        	adc #16
0017CE  3  8D 63 02     	sta dispx		; set x+16
0017D1  3  4C 00 18     	jmp digh
0017D4  3               
0017D4  3               ; Vertical digging
0017D4  3               
0017D4  3               digv:
0017D4  3  20 80 0D     	jsr tstbl		; check blocktype in MAP
0017D7  3  20 68 03     	jsr fdchk		; test if FODDER
0017DA  3               
0017DA  3  18           	clc
0017DB  3  AD 63 02     	lda dispx		; look 1 cell down
0017DE  3  69 08        	adc #8
0017E0  3  8D 63 02     	sta dispx
0017E3  3  20 80 0D     	jsr tstbl		; check blocktype in MAP
0017E6  3  20 68 03     	jsr fdchk
0017E9  3  AD 63 02     	lda dispx
0017EC  3  29 07        	and #7
0017EE  3  D0 01        	bne :+
0017F0  3  60           	rts
0017F1  3               :
0017F1  3  18           	clc
0017F2  3  AD 63 02     	lda dispx		; look 1 cell down
0017F5  3  69 08        	adc #8
0017F7  3  8D 63 02     	sta dispx
0017FA  3  20 80 0D     	jsr tstbl		; check blocktype in MAP
0017FD  3  4C 68 03     	jmp fdchk
001800  3               
001800  3               ; Horizontal digging
001800  3               
001800  3               digh:
001800  3  20 80 0D     	jsr tstbl		; check blocktype in MAP
001803  3  20 68 03     	jsr fdchk		; test if FODDER
001806  3               
001806  3  18           	clc
001807  3  AD 64 02     	lda dispy		; look 1 cell down
00180A  3  69 08        	adc #8
00180C  3  8D 64 02     	sta dispy
00180F  3  20 80 0D     	jsr tstbl		; check blocktype in MAP
001812  3  20 68 03     	jsr fdchk
001815  3  AD 64 02     	lda dispy
001818  3  29 07        	and #7
00181A  3  D0 01        	bne :+
00181C  3  60           	rts
00181D  3               :
00181D  3  18           	clc
00181E  3  AD 64 02     	lda dispy		; look 1 cell down
001821  3  69 08        	adc #8
001823  3  8D 64 02     	sta dispy
001826  3  20 80 0D     	jsr tstbl		; check blocktype in MAP
001829  3  4C 68 03     	jmp fdchk
00182C  3               
00182C  3  00           digcnt:	.byte 0
00182D  3               
00182D  3               .endif
00182D  3               
00182D  3               ;------------------------------------------------------------------
00182D  3               ; Sprite table 
00182D  3               ;------------------------------------------------------------------
00182D  3               
00182D  3               
00182D  3               ; ix+0  = type.
00182D  3               ; ix+1  = sprite image number.
00182D  3               ; ix+2  = frame.
00182D  3               ; ix+3  = y coord.
00182D  3               ; ix+4  = x coord.
00182D  3               
00182D  3               ; ix+5  = new type.
00182D  3               ; ix+6  = new image number.
00182D  3               ; ix+7  = new frame.
00182D  3               ; ix+8  = new y coord.
00182D  3               ; ix+9  = new x coord.
00182D  3               
00182D  3               ; ix+10 = direction.
00182D  3               ; ix+11 = parameter 1.
00182D  3               ; ix+12 = parameter 2.
00182D  3               ; ix+13 = jump pointer low.
00182D  3               ; ix+14 = jump pointer high.
00182D  3               ; ix+15 = data pointer low.
00182D  3               ; ix+16 = data pointer high.
00182D  3               
00182D  3               ; block NUMSPR * TABSIZ,255
00182D  3               
00182D  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
001831  3  FF FF FF FF  
001835  3  FF FF FF FF  
0018F9  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0018FD  3  FF FF FF 00  
001901  3  C0 78 00 00  
00190A  3  07           roomtb:	.byte 7                      ; start room map offset.
00190B  3               
00190B  3               ; User routine.  Put your own code in here to be called with USER instruction.
00190B  3               ; if USER has an argument it will be passed in the accumulator.
00190B  3               
00190B  3               user:
00190B  3  60           	rts
00190C  3               
00190C  3               ;----------------------------------------------------
00190C  3               ; Missing vars 
00190C  3               ;----------------------------------------------------
00190C  3               
00190C  3               MAP 		= $9800			; properties map buffer (3x256 bytes)
00190C  3               SCADTB_lb 	= MAP+3*256		; screen address table lo-byte (256 bytes)
00190C  3               SCADTB_hb 	= SCADTB_lb+256		; screen address table hi-byte (256 bytes)
00190C  3               SHRAPN 		= SCADTB_hb+256		; shrapnel table (55x6 bytes)
00190C  3               
00190C  3  00 00        FontPtr:	.byte 0,0
00190E  3  00 00        TmpAddr:	.byte 0,0
001910  3               
001910  3  00           loopa:		.byte 0
001911  3  00           loopb:		.byte 0
001912  3  00           loopc:		.byte 0
001913  3               
001913  3               ; Everything below here will be generated by the editors.
001913  3               
001913  3               WINDOWTOP = 1
001913  3               WINDOWLFT = 1
001913  3               WINDOWHGT = 22
001913  3               WINDOWWID = 30 ;
001913  3               MAPWID = 3
001913  3  FF FF FF             .byte 255,255,255
001916  3               mapdat:
001916  3  FF 00 FF             .byte 255,0,255
001919  3  FF FF FF             .byte 255,255,255
00191C  3  01           stmap:  .byte 1
00191D  3               
00191D  3               evnt00:
00191D  3  A9 00                lda #0
00191F  3  8D 4C 02             sta varm
001922  3  AD 33 02             lda joyval
001925  3  29 08                and #8
001927  3  F0 03                beq :+
001929  3  4C 4A 19             jmp a00083
00192C  3               :
00192C  3  A9 01                lda #1
00192E  3  8D 4C 02             sta varm
001931  3  20 46 0B             jsr cangu
001934  3  F0 03                beq :+
001936  3  4C 45 19             jmp a00075
001939  3               :
001939  3  A0 08                ldy #8
00193B  3  B1 68                lda (z80_ix),y
00193D  3  38                   sec
00193E  3  E9 02                sbc #2
001940  3  91 68                sta (z80_ix),y
001942  3  4C 4A 19             jmp a00083
001945  3  A9 03        a00075: lda #3
001947  3  20 7C 17             jsr dig
00194A  3  AD 33 02     a00083: lda joyval
00194D  3  29 04                and #4
00194F  3  F0 03                beq :+
001951  3  4C 72 19             jmp a00157
001954  3               :
001954  3  A9 01                lda #1
001956  3  8D 4C 02             sta varm
001959  3  20 7E 0B             jsr cangd
00195C  3  F0 03                beq :+
00195E  3  4C 6D 19             jmp a00149
001961  3               :
001961  3  A0 08                ldy #8
001963  3  B1 68                lda (z80_ix),y
001965  3  18                   clc
001966  3  69 02                adc #2
001968  3  91 68                sta (z80_ix),y
00196A  3  4C 72 19             jmp a00157
00196D  3  A9 02        a00149: lda #2
00196F  3  20 7C 17             jsr dig
001972  3  AD 33 02     a00157: lda joyval
001975  3  29 02                and #2
001977  3  F0 03                beq :+
001979  3  4C 9A 19             jmp a00230
00197C  3               :
00197C  3  A9 01                lda #1
00197E  3  8D 4C 02             sta varm
001981  3  20 B6 0B             jsr cangl
001984  3  F0 03                beq :+
001986  3  4C 95 19             jmp a00222
001989  3               :
001989  3  A0 09                ldy #9
00198B  3  B1 68                lda (z80_ix),y
00198D  3  38                   sec
00198E  3  E9 02                sbc #2
001990  3  91 68                sta (z80_ix),y
001992  3  4C 9A 19             jmp a00230
001995  3  A9 01        a00222: lda #1
001997  3  20 7C 17             jsr dig
00199A  3  AD 33 02     a00230: lda joyval
00199D  3  29 01                and #1
00199F  3  F0 03                beq :+
0019A1  3  4C C2 19             jmp a00304
0019A4  3               :
0019A4  3  A9 01                lda #1
0019A6  3  8D 4C 02             sta varm
0019A9  3  20 CA 0B             jsr cangr
0019AC  3  F0 03                beq :+
0019AE  3  4C BD 19             jmp a00296
0019B1  3               :
0019B1  3  A0 09                ldy #9
0019B3  3  B1 68                lda (z80_ix),y
0019B5  3  18                   clc
0019B6  3  69 02                adc #2
0019B8  3  91 68                sta (z80_ix),y
0019BA  3  4C C2 19             jmp a00304
0019BD  3  A9 00        a00296: lda #0
0019BF  3  20 7C 17             jsr dig
0019C2  3  A9 00        a00304: lda #0
0019C4  3  CD 4C 02             cmp varm
0019C7  3  90 03                bcc *+5
0019C9  3  4C D1 19             jmp a00329
0019CC  3  A9 00                lda #0
0019CE  3  20 12 13             jsr animsp
0019D1  3               a00329: ; SPRITEINK command
0019D1  3  60                   rts
0019D2  3               evnt01:
0019D2  3  60                   rts
0019D3  3               evnt02:
0019D3  3  60                   rts
0019D4  3               evnt03:
0019D4  3  60                   rts
0019D5  3               evnt04:
0019D5  3  60                   rts
0019D6  3               evnt05:
0019D6  3  60                   rts
0019D7  3               evnt06:
0019D7  3  60                   rts
0019D8  3               evnt07:
0019D8  3  60                   rts
0019D9  3               evnt08:
0019D9  3  60                   rts
0019DA  3               evnt09:
0019DA  3  60                   rts
0019DB  3               evnt10:
0019DB  3  60                   rts
0019DC  3               evnt11:
0019DC  3  60                   rts
0019DD  3               evnt12:
0019DD  3  60                   rts
0019DE  3               evnt13:
0019DE  3  60                   rts
0019DF  3               evnt14:
0019DF  3  20 4D 03             jsr cls
0019E2  3  A9 00                lda #0
0019E4  3  8D 42 0F             sta prtmod
0019E7  3  A9 00                lda #0
0019E9  3  8D 59 02             sta chary
0019EC  3  A9 0A                lda #10
0019EE  3  8D 58 02             sta charx
0019F1  3  A9 01                lda #1
0019F3  3  20 E0 0E             jsr dmsg
0019F6  3  60                   rts
0019F7  3               evnt15:
0019F7  3  60                   rts
0019F8  3               evnt16:
0019F8  3  60                   rts
0019F9  3               evnt17:
0019F9  3  60                   rts
0019FA  3               evnt18:
0019FA  3  60                   rts
0019FB  3               evnt19:
0019FB  3  60                   rts
0019FC  3               evnt20:
0019FC  3  60                   rts
0019FD  3  60           ptcusr: rts
0019FE  3               msgdat:
0019FE  3  42 4C 4F 43          .byte "BLOCK DEM",207
001A02  3  4B 20 44 45  
001A06  3  4D CF        
001A08  3  44 49 47 47          .byte "DIGGING DEM",207
001A0C  3  49 4E 47 20  
001A10  3  44 45 4D CF  
001A14  3               nummsg:
001A14  3  02                   .byte 2
001A15  3               chgfx:
001A15  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
001A19  3  FF FF FF FF  
001A1D  3  01 01 01 FF          .byte 1,1,1,255,16,16,16,255
001A21  3  10 10 10 FF  
001A25  3  AA 55 AA 55          .byte 170,85,170,85,170,85,170,85
001A29  3  AA 55 AA 55  
001A2D  3  00 11 00 44          .byte 0,17,0,68,0,34,0,136
001A31  3  00 22 00 88  
001A35  3               bprop:
001A35  3  00                   .byte 0
001A36  3  02                   .byte 2
001A37  3  04                   .byte 4
001A38  3  00                   .byte 0
001A39  3               sprgfx:
001A39  3  11 88 73 CE          .byte 17,136,115,206,55,236,21,168,42,80,125,180,107,222,236,54,206,119,143,243,135,241,13,185,28,28,24,56,12,126,126,0
001A3D  3  37 EC 15 A8  
001A41  3  2A 50 7D B4  
001A59  3  04 62 9C F3          .byte 4,98,156,243,13,251,5,106,10,148,31,109,154,247,187,13,243,157,227,252,97,252,67,110,7,7,6,14,131,31,31,128
001A5D  3  0D FB 05 6A  
001A61  3  0A 94 1F 6D  
001A79  3  81 18 E7 3C          .byte 129,24,231,60,195,126,129,90,2,165,71,219,230,189,110,195,124,231,56,255,24,127,144,219,193,193,129,131,224,199,7,224
001A7D  3  C3 7E 81 5A  
001A81  3  02 A5 47 DB  
001A99  3  20 46 39 CF          .byte 32,70,57,207,176,223,160,86,64,169,209,246,121,175,219,176,223,57,206,63,198,31,228,54,112,112,224,96,248,49,1,248
001A9D  3  B0 DF A0 56  
001AA1  3  40 A9 D1 F6  
001AB9  3  11 88 73 CE          .byte 17,136,115,206,55,236,21,168,10,84,45,190,123,214,108,55,238,115,223,241,187,225,185,176,12,56,126,24,0,48,0,126
001ABD  3  37 EC 15 A8  
001AC1  3  0A 54 2D BE  
001AD9  3  04 62 9C F3          .byte 4,98,156,243,13,251,5,106,2,149,139,111,158,245,219,13,251,156,119,252,110,248,46,108,3,14,31,134,0,12,128,31
001ADD  3  0D FB 05 6A  
001AE1  3  02 95 8B 6F  
001AF9  3  81 18 E7 3C          .byte 129,24,231,60,195,126,129,90,64,165,226,219,103,189,118,195,62,231,29,255,27,190,11,155,128,195,135,225,0,3,224,7
001AFD  3  C3 7E 81 5A  
001B01  3  40 A5 E2 DB  
001B19  3  20 46 39 CF          .byte 32,70,57,207,176,223,160,86,80,41,248,182,89,239,221,176,207,185,199,127,134,239,194,230,224,48,97,248,192,0,248,1
001B1D  3  B0 DF A0 56  
001B21  3  50 29 F8 B6  
001B39  3  11 88 73 CE          .byte 17,136,115,206,55,236,21,168,10,84,45,190,123,214,108,55,238,115,207,241,143,225,157,176,56,56,28,24,126,48,0,126
001B3D  3  37 EC 15 A8  
001B41  3  0A 54 2D BE  
001B59  3  04 62 9C F3          .byte 4,98,156,243,13,251,5,106,2,149,139,111,158,245,219,13,251,156,115,252,99,248,39,108,14,14,7,6,31,140,128,31
001B5D  3  0D FB 05 6A  
001B61  3  02 95 8B 6F  
001B79  3  81 18 E7 3C          .byte 129,24,231,60,195,126,129,90,64,165,226,219,103,189,118,195,62,231,28,255,24,254,9,219,131,131,129,193,7,227,224,7
001B7D  3  C3 7E 81 5A  
001B81  3  40 A5 E2 DB  
001B99  3  20 46 39 CF          .byte 32,70,57,207,176,223,160,86,80,41,248,182,89,239,221,176,207,185,199,63,134,63,194,118,224,224,96,112,193,248,248,1
001B9D  3  B0 DF A0 56  
001BA1  3  50 29 F8 B6  
001BB9  3  11 88 73 CE          .byte 17,136,115,206,55,236,21,168,42,80,125,180,107,222,236,54,206,119,143,251,135,221,13,157,28,48,24,126,12,0,126,0
001BBD  3  37 EC 15 A8  
001BC1  3  2A 50 7D B4  
001BD9  3  04 62 9C F3          .byte 4,98,156,243,13,251,5,106,10,148,31,109,154,247,187,13,243,157,227,254,97,247,67,103,7,12,134,31,3,0,31,128
001BDD  3  0D FB 05 6A  
001BE1  3  0A 94 1F 6D  
001BF9  3  81 18 E7 3C          .byte 129,24,231,60,195,126,129,90,2,165,71,219,230,189,110,195,124,231,184,255,216,125,208,217,1,195,225,135,0,192,7,224
001BFD  3  C3 7E 81 5A  
001C01  3  02 A5 47 DB  
001C19  3  20 46 39 CF          .byte 32,70,57,207,176,223,160,86,64,169,209,246,121,175,219,176,223,57,238,63,118,31,116,54,192,112,248,97,0,48,1,248
001C1D  3  B0 DF A0 56  
001C21  3  40 A9 D1 F6  
001C39  3               frmlst:
001C39  3  00 04 04 00          .byte 0,4,4,0
001C3D  3               scdat:
001C3D  3  4B 01                .word 331
001C3F  3  FF 01 1F FF          .byte 255,1,31,255,0,28,1,1,255,0,28,1,1,2,2,255,1,9,3,3,255,1,17,2,2,1,255,2,7,1,3,3,1
001C43  3  00 1C 01 01  
001C47  3  FF 00 1C 01  
001C60  3  FF 02 0E 01          .byte 255,2,14,1,1,2,2,1,255,2,7,1,3,3,1,255,2,14,1,1,2,2,1,255,2,8,3,3,1,255,2,4,255,1,8
001C64  3  01 02 02 01  
001C68  3  FF 02 07 01  
001C83  3  02 02 01 01          .byte 2,2,1,1,2,2,1,255,2,8,3,3,1,255,2,4,1,255,3,6,1,2,2,1,1,2,2,1,1,1,2,2,255,1,4
001C87  3  02 02 01 FF  
001C8B  3  02 08 03 03  
001CA6  3  03 03 01 FF          .byte 3,3,1,255,2,4,1,255,3,6,1,2,2,1,1,255,2,10,1,3,3,1,255,2,4,255,1,8,2,2,1,1,255,2,10
001CAA  3  02 04 01 FF  
001CAE  3  03 06 01 02  
001CC9  3  01 03 03 FF          .byte 1,3,3,255,2,15,1,1,2,2,1,2,2,1,1,1,2,2,2,3,3,255,2,15,1,1,2,2,1,2,2,1,3
001CCD  3  02 0F 01 01  
001CD1  3  02 02 01 02  
001CEA  3  01 02 02 02          .byte 1,2,2,2,3,3,255,1,13,2,2,1,1,2,2,1,2,2,1,3,1,2,2,1,255,3,17,1,1,2,2,1,2,2
001CEE  3  03 03 FF 01  
001CF2  3  0D 02 02 01  
001D0C  3  01 03 01 02          .byte 1,3,1,2,2,1,255,3,17,1,1,2,2,1,2,2,1,3,1,2,2,1,3,3,255,1,17,2,2,1,2,2,1
001D10  3  02 01 FF 03  
001D14  3  11 01 01 02  
001D2D  3  03 01 02 02          .byte 3,1,2,2,1,3,3,1,255,2,6,1,255,3,4,1,2,2,1,1,2,2,1,2,2,1,3,1,2,2,1,3,3
001D31  3  01 03 03 01  
001D35  3  FF 02 06 01  
001D4E  3  01 FF 02 06          .byte 1,255,2,6,1,255,3,4,1,2,2,1,1,2,2,1,2,2,1,1,1,2,2,1,3,3,1,255,2,6,255,1,6
001D52  3  01 FF 03 04  
001D56  3  01 02 02 01  
001D6F  3  02 02 01 01          .byte 2,2,1,1,255,2,10,1,3,3,255,2,15,1,1,255,2,10,1,3,3,255,2,15,255,1,31
001D73  3  FF 02 0A 01  
001D77  3  03 03 FF 02  
001D8A  3               numsc:
001D8A  3  01                   .byte 1
001D8B  3               nmedat:
001D8B  3  00 00 10 20          .byte 0,0,16,32,255
001D8F  3  FF           
001D90  3               NUMOBJ = 1
001D90  3               objdta:
001D90  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,40,80,2,40,80
001D94  3  00 00 00 00  
001D98  3  00 00 00 00  
001DB6  3               font:
001DB6  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001DBA  3  00 00 00 00  
001DBE  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
001DC2  3  30 00 30 00  
001DC6  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
001DCA  3  00 00 00 00  
001DCE  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
001DD2  3  6C FE 6C 00  
001DD6  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
001DDA  3  7E 1E 7E 18  
001DDE  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
001DE2  3  30 6E CE 00  
001DE6  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
001DEA  3  7E CC 7E 00  
001DEE  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
001DF2  3  00 00 00 00  
001DF6  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
001DFA  3  18 18 0C 00  
001DFE  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
001E02  3  30 30 60 00  
001E06  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
001E0A  3  7E 18 3C 00  
001E0E  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
001E12  3  7E 18 18 00  
001E16  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
001E1A  3  00 18 18 30  
001E1E  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
001E22  3  7E 00 00 00  
001E26  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
001E2A  3  00 38 38 00  
001E2E  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
001E32  3  18 30 60 00  
001E36  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
001E3A  3  F6 E6 7C 00  
001E3E  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
001E42  3  18 18 7E 00  
001E46  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
001E4A  3  7C C0 FE 00  
001E4E  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
001E52  3  06 C6 7C 00  
001E56  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
001E5A  3  D8 FE 18 00  
001E5E  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
001E62  3  06 C6 7C 00  
001E66  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
001E6A  3  C6 C6 7C 00  
001E6E  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
001E72  3  18 30 30 00  
001E76  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
001E7A  3  C6 C6 7C 00  
001E7E  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
001E82  3  7E 06 7C 00  
001E86  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
001E8A  3  00 00 30 00  
001E8E  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
001E92  3  00 30 30 60  
001E96  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
001E9A  3  30 18 0C 00  
001E9E  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
001EA2  3  00 7E 00 00  
001EA6  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
001EAA  3  0C 18 30 00  
001EAE  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
001EB2  3  18 00 18 00  
001EB6  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
001EBA  3  FE C0 7C 00  
001EBE  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
001EC2  3  FE C6 C6 00  
001EC6  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
001ECA  3  C6 C6 FC 00  
001ECE  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
001ED2  3  C0 C6 7C 00  
001ED6  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
001EDA  3  C6 CC F8 00  
001EDE  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
001EE2  3  C0 C0 FE 00  
001EE6  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
001EEA  3  C0 C0 C0 00  
001EEE  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
001EF2  3  DE C6 7C 00  
001EF6  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
001EFA  3  C6 C6 C6 00  
001EFE  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
001F02  3  18 18 7E 00  
001F06  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
001F0A  3  C6 C6 7C 00  
001F0E  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
001F12  3  D8 CC C6 00  
001F16  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
001F1A  3  C0 C0 FE 00  
001F1E  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
001F22  3  C6 C6 C6 00  
001F26  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
001F2A  3  DE CE C6 00  
001F2E  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
001F32  3  C6 C6 7C 00  
001F36  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
001F3A  3  FC C0 C0 00  
001F3E  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
001F42  3  F6 DE 7C 00  
001F46  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
001F4A  3  FC CC C6 00  
001F4E  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
001F52  3  06 C6 7C 00  
001F56  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
001F5A  3  30 30 30 00  
001F5E  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
001F62  3  C6 C6 7C 00  
001F66  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
001F6A  3  C6 6C 38 00  
001F6E  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
001F72  3  C6 FE 6C 00  
001F76  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
001F7A  3  38 6C C6 00  
001F7E  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
001F82  3  30 30 30 00  
001F86  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
001F8A  3  30 60 FE 00  
001F8E  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
001F92  3  18 18 1E 00  
001F96  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
001F9A  3  30 18 0C 00  
001F9E  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
001FA2  3  30 30 F0 00  
001FA6  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
001FAA  3  30 30 30 00  
001FAE  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
001FB2  3  00 00 00 FF  
001FB6  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
001FBA  3  60 60 FE 00  
001FBE  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
001FC2  3  7C CC 7C 00  
001FC6  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
001FCA  3  66 66 7C 00  
001FCE  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
001FD2  3  60 60 3C 00  
001FD6  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
001FDA  3  CC CC 7C 00  
001FDE  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
001FE2  3  F8 C0 7C 00  
001FE6  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
001FEA  3  30 30 30 00  
001FEE  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
001FF2  3  CC 7C 0C 78  
001FF6  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
001FFA  3  CC CC CC 00  
001FFE  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
002002  3  30 30 78 00  
002006  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
00200A  3  0C 0C 6C 38  
00200E  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
002012  3  70 78 6C 00  
002016  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
00201A  3  30 30 1C 00  
00201E  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
002022  3  FC FC FC 00  
002026  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
00202A  3  CC CC CC 00  
00202E  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
002032  3  CC CC 78 00  
002036  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
00203A  3  CC F8 C0 C0  
00203E  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
002042  3  CC 7C 0C 0E  
002046  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
00204A  3  60 60 60 00  
00204E  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
002052  3  78 0C F8 00  
002056  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
00205A  3  30 30 1C 00  
00205E  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
002062  3  CC CC 78 00  
002066  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
00206A  3  78 78 30 00  
00206E  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
002072  3  FC FC 78 00  
002076  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
00207A  3  30 78 CC 00  
00207E  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
002082  3  CC 7C 0C 78  
002086  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
00208A  3  30 60 FC 00  
00208E  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
002092  3  18 18 1E 00  
002096  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
00209A  3  18 18 18 00  
00209E  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
0020A2  3  30 30 F0 00  
0020A6  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
0020AA  3  00 00 00 00  
0020AE  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
0020B2  3  E3 BB C6 7C  
0020B6  3               jtab:
0020B6  3  63                   .byte 99
0020B7  3  35 15 93 22  keys:   .byte 53,21,147,34,144,4,20,33,17,1,146
0020BB  3  90 04 14 21  
0020BF  3  11 01 92     
0020C2  3               
0020C2  1               eind_asm:
0020C2  2               ;------------------------------------------------------
0020C2  2               ; z80.asm
0020C2  2               ; spectrum stuff
0020C2  2               ; adresses
0020C2  2               
0020C2  2               ;ws	 = $60
0020C2  2               
0020C2  2               ;z80_f	 = ws+$00
0020C2  2               ;z80_a	 = ws+$01
0020C2  2               ;z80_af	 = z80_f
0020C2  2               
0020C2  2               ;z80_c	 = ws+$02
0020C2  2               ;z80_b	 = ws+$03
0020C2  2               ;z80_bc	 = z80_c
0020C2  2               
0020C2  2               ;z80_e	 = ws+$04
0020C2  2               ;z80_d	 = ws+$05
0020C2  2               ;z80_de	 = z80_e
0020C2  2               
0020C2  2               ;z80_l	 = ws+$06
0020C2  2               ;z80_h	 = ws+$07
0020C2  2               ;z80_hl	 = z80_l
0020C2  2               
0020C2  2               ;z80_x    = ws+$08
0020C2  2               ;z80_i    = ws+$09
0020C2  2               ;z80_ix	 = z80_x
0020C2  2               
0020C2  2               ;z80_iy	 = ws+$0a
0020C2  2               
0020C2  2               ;z80_fp	 = ws+$0c
0020C2  2               ;z80_ap	 = ws+$0d
0020C2  2               
0020C2  2               ;z80_cp	 = ws+$0e
0020C2  2               ;z80_bp	 = ws+$0f
0020C2  2               ;z80_bcp = z80_cp
0020C2  2               
0020C2  2               ;z80_ep	 = ws+$10
0020C2  2               ;z80_dp	 = ws+$11
0020C2  2               ;z80_dep = z80_ep
0020C2  2               
0020C2  2               ;z80_lp	 = ws+$12
0020C2  2               ;z80_hp	 = ws+$13
0020C2  2               ;z80_hlp = z80_lp
0020C2  2               
0020C2  2               ;z80_sp   = ws+$14
0020C2  2               
0020C2  2               ;z80_reg0 = ws+$16
0020C2  2               ;z80_reg1 = ws+$17
0020C2  2               ;z80_reg2 = ws+$18
0020C2  2               ;z80_reg3 = ws+$19
0020C2  2               
0020C2  2               ;z80_r	 = ws+$1a
0020C2  2               
0020C2  2               ; Contains seperatly 1 bit set
0020C2  2               
0020C2  2               _bitmem0	= $f8
0020C2  2               _bitmem1	= $f9
0020C2  2               _bitmem2	= $fa
0020C2  2               _bitmem3	= $fb
0020C2  2               _bitmem4	= $fc
0020C2  2               _bitmem5	= $fd
0020C2  2               _bitmem6	= $fe
0020C2  2               _bitmem7	= $ff
0020C2  2               	
0020C2  2               ; constants	
0020C2  2               _bitvalue0	= $01	
0020C2  2               _bitvalue1	= $02	
0020C2  2               _bitvalue2	= $04	
0020C2  2               _bitvalue3	= $08	
0020C2  2               _bitvalue4	= $10	
0020C2  2               _bitvalue5	= $20	
0020C2  2               _bitvalue6	= $40	
0020C2  2               _bitvalue7	= $80	
0020C2  2               
0020C2  2               _notbitvalue0	= $fe	
0020C2  2               _notbitvalue1	= $fd	
0020C2  2               _notbitvalue2	= $fb	
0020C2  2               _notbitvalue3	= $f7	
0020C2  2               _notbitvalue4	= $ef	
0020C2  2               _notbitvalue5	= $df	
0020C2  2               _notbitvalue6	= $bf	
0020C2  2               _notbitvalue7	= $7f	
0020C2  2               
0020C2  2               
0020C2  2               ;add_hl_bc:
0020C2  2               ;		lda z80_l
0020C2  2               ;		clc
0020C2  2               ;		adc z80_c
0020C2  2               ;		sta z80_l
0020C2  2               ;		lda z80_h
0020C2  2               ;		adc z80_b
0020C2  2               ;		sta z80_h
0020C2  2               ;		rts
0020C2  2               ;		
0020C2  2               ;add_ix_de:
0020C2  2               ;		lda z80_ix
0020C2  2               ;		clc
0020C2  2               ;		adc z80_e
0020C2  2               ;		sta z80_ix
0020C2  2               ;		lda z80_ix+1
0020C2  2               ;		adc z80_d
0020C2  2               ;		sta z80_ix+1
0020C2  2               ;		rts
0020C2  2               ;		
0020C2  2               ;add_iy_de:
0020C2  2               ;		lda z80_iy
0020C2  2               ;		clc
0020C2  2               ;		adc z80_e
0020C2  2               ;		sta z80_iy
0020C2  2               ;		lda z80_iy+1
0020C2  2               ;		adc z80_d
0020C2  2               ;		sta z80_iy+1
0020C2  2               ;		rts
0020C2  2               ;		
0020C2  2               ;add_hl_de:
0020C2  2               ;		lda z80_l
0020C2  2               ;		clc
0020C2  2               ;		adc z80_e
0020C2  2               ;		sta z80_l
0020C2  2               ;		lda z80_h
0020C2  2               ;		adc z80_d
0020C2  2               ;		sta z80_h
0020C2  2               ;		rts
0020C2  2               ;
0020C2  2               ;add_ix_bc:
0020C2  2               ;		lda z80_ix
0020C2  2               ;		clc
0020C2  2               ;		adc z80_c
0020C2  2               ;		sta z80_ix
0020C2  2               ;		lda z80_ix+1
0020C2  2               ;		adc z80_b
0020C2  2               ;		sta z80_ix+1
0020C2  2               ;		rts
0020C2  2               ;		
0020C2  2               ;add_iy_bc:
0020C2  2               ;		lda z80_iy
0020C2  2               ;		clc
0020C2  2               ;		adc z80_c
0020C2  2               ;		sta z80_iy
0020C2  2               ;		lda z80_iy+1
0020C2  2               ;		adc z80_b
0020C2  2               ;		sta z80_iy+1
0020C2  2               ;		rts
0020C2  2               ;		
0020C2  2               sbc_hl_de:
0020C2  2  A5 66        		lda z80_l
0020C4  2  E5 64        		sbc z80_e
0020C6  2  85 66        		sta z80_l
0020C8  2  A5 67        		lda z80_h
0020CA  2  E5 65        		sbc z80_d
0020CC  2  85 67        		sta z80_h
0020CE  2  60           		rts
0020CF  2               
0020CF  2               ;sbc_hl_bc:
0020CF  2               ;		lda z80_l
0020CF  2               ;		sbc z80_c
0020CF  2               ;		sta z80_l
0020CF  2               ;		lda z80_h
0020CF  2               ;		sbc z80_b
0020CF  2               ;		sta z80_h
0020CF  2               ;		rts
0020CF  2               ;
0020CF  2               ;cmp_hl_bc:
0020CF  2               ;		lda z80_l
0020CF  2               ;		cmp z80_c
0020CF  2               ;		bne cmp_hl_bc_end
0020CF  2               ;		lda z80_h
0020CF  2               ;		cmp z80_b
0020CF  2               ;cmp_hl_bc_end:
0020CF  2               ;		rts
0020CF  2               ;		
0020CF  2               ;cmp_iy_ix:
0020CF  2               ;		lda z80_iy
0020CF  2               ;		cmp z80_ix
0020CF  2               ;		bne cmp_iy_ix_end
0020CF  2               ;		lda z80_iy+1
0020CF  2               ;		cmp z80_ix+1
0020CF  2               ;cmp_iy_ix_end:
0020CF  2               ;		rts
0020CF  2               ;		
0020CF  2               ;dec_hl:
0020CF  2               ;		lda z80_l
0020CF  2               ;		bne dec_hl_no_dec_h
0020CF  2               ;		dec z80_h
0020CF  2               ;dec_hl_no_dec_h:
0020CF  2               ;		dec z80_l
0020CF  2               ;		rts
0020CF  2               ;	
0020CF  2               ;dec_ix:
0020CF  2               ;		lda z80_ix
0020CF  2               ;		bne dec_ix_no_dec_h
0020CF  2               ;		dec z80_ix+1
0020CF  2               ;dec_ix_no_dec_h:
0020CF  2               ;		dec z80_ix
0020CF  2               ;		rts
0020CF  2               ;		
0020CF  2               ;dec_bc:	
0020CF  2               ;		lda z80_c
0020CF  2               ;		bne dec_bc_no_dec_b
0020CF  2               ;		dec z80_b
0020CF  2               ;dec_bc_no_dec_b:
0020CF  2               ;		dec z80_c
0020CF  2               ;		rts
0020CF  2               ;	
0020CF  2               ;dec_de:
0020CF  2               ;		lda z80_e
0020CF  2               ;		bne dec_de_no_dec_d
0020CF  2               ;		dec z80_d
0020CF  2               ;dec_de_no_dec_d:
0020CF  2               ;		dec z80_e
0020CF  2               ;		rts
0020CF  2               ;		
0020CF  2               ;ex_af_afs:
0020CF  2               ;	rts
0020CF  2               ;ex_de_hl:
0020CF  2               ;		lda z80_e
0020CF  2               ;		ldx z80_l
0020CF  2               ;		stx z80_e
0020CF  2               ;		sta z80_l
0020CF  2               ;		lda z80_d
0020CF  2               ;		ldx z80_h
0020CF  2               ;		stx z80_d
0020CF  2               ;		sta z80_h
0020CF  2               ;		rts
0020CF  2               ;
0020CF  2               exx:
0020CF  2  A5 62        		lda z80_c
0020D1  2  A4 6E        		ldy z80_cp
0020D3  2  84 62        		sty z80_c
0020D5  2  85 6E        		sta z80_cp
0020D7  2  A5 63        		lda z80_b
0020D9  2  A4 6F        		ldy z80_bp
0020DB  2  84 63        		sty z80_b
0020DD  2  85 6F        		sta z80_bp
0020DF  2  A5 64        		lda z80_e
0020E1  2  A4 70        		ldy z80_ep
0020E3  2  84 64        		sty z80_e
0020E5  2  85 70        		sta z80_ep
0020E7  2  A5 65        		lda z80_d
0020E9  2  A4 71        		ldy z80_dp
0020EB  2  84 65        		sty z80_d
0020ED  2  85 71        		sta z80_dp		
0020EF  2  A5 80        		lda scraddr
0020F1  2  A4 72        		ldy z80_lp
0020F3  2  84 80        		sty scraddr
0020F5  2  85 72        		sta z80_lp
0020F7  2  A5 81        		lda scraddr+1
0020F9  2  A4 73        		ldy z80_hp
0020FB  2  84 81        		sty scraddr+1
0020FD  2  85 73        		sta z80_hp
0020FF  2  60           		rts
002100  2               		
002100  2               ;ex_sp_hl:
002100  2               ;		tsx
002100  2               ;		lda $0103,x
002100  2               ;		ldy z80_h
002100  2               ;		sta z80_h
002100  2               ;		tya
002100  2               ;		sta $0103,x
002100  2               ;		lda $0104,x
002100  2               ;		ldy z80_l
002100  2               ;		sta z80_l
002100  2               ;		tya
002100  2               ;		sta $104,x
002100  2               ;		rts
002100  2               ;		
002100  2               ;ldi:
002100  2               ;	rts
002100  2               ;ldir:
002100  2               ;		ldy #$00
002100  2               ;		ldx z80_b
002100  2               ;		beq ldir_last_page
002100  2               ;ldir_loop:		
002100  2               ;		lda (z80_hl),y
002100  2               ;		sta (z80_de),y
002100  2               ;		iny
002100  2               ;		bne ldir_loop
002100  2               ;		inc z80_h
002100  2               ;		inc z80_d
002100  2               ;		dex
002100  2               ;		bne ldir_loop
002100  2               ;ldir_last_page:
002100  2               ;		lda z80_c
002100  2               ;		beq ldir_end
002100  2               ;ldir_last_page_loop:		
002100  2               ;		lda (z80_hl),y
002100  2               ;		sta (z80_de),y
002100  2               ;		iny
002100  2               ;		cpy z80_c
002100  2               ;		bne ldir_last_page_loop
002100  2               ;ldir_end:		
002100  2               ;		stx z80_c
002100  2               ;		stx z80_b
002100  2               ;		tya
002100  2               ;		clc
002100  2               ;		adc z80_l
002100  2               ;		sta z80_l
002100  2               ;		bcc *+4
002100  2               ;		inc z80_h
002100  2               ;		tya
002100  2               ;		clc
002100  2               ;		adc z80_e
002100  2               ;		sta z80_e
002100  2               ;		bcc *+4
002100  2               ;		inc z80_d
002100  2               ;		rts
002100  2               ;		
002100  2               ;lddr:		ldy #$00
002100  2               ;lddr_loop:
002100  2               ;		lda (z80_hl),y
002100  2               ;		sta (z80_de),y
002100  2               ;		jsr dec_hl
002100  2               ;		jsr dec_de
002100  2               ;		jsr dec_bc
002100  2               ;		lda z80_b
002100  2               ;		ora z80_c
002100  2               ;		bne lddr_loop
002100  2               ;		rts
002100  2               ;ei:
002100  2               ;		rts
002100  2               ;di:
002100  2               ;		rts
002100  2               		
002100  2               ;-------------------------------------------------------------
002100  2               ; Set bits in bitmem
002100  2               ;-------------------------------------------------------------
002100  2               	
002100  2               z80_init:
002100  2  A2 00        	ldx #$00
002102  2  A9 01        	lda #$01
002104  2               z80_init_loop:		
002104  2  95 F8        	sta _bitmem0,x
002106  2  E8           	inx
002107  2  0A           	asl a
002108  2  D0 FA        	bne z80_init_loop
00210A  2  60           	rts
00210B  2               
00210B  2               push_af:
00210B  2               push_bc:
00210B  2               push_de:
00210B  2               push_hl:
00210B  2               
00210B  2               pop_af:
00210B  2               pop_bc:
00210B  2               pop_de:
00210B  2               pop_ix:
00210B  2               pop_hl:
00210B  2               
00210B  2               add_hl_hl:
00210B  2               
00210B  2               inc_bc:
00210B  2               inc_de:
00210B  2               inc_hl:
00210B  2               inc_ix:
00210B  2               inc_sp:
00210B  2               
00210B  2               cpir:
00210B  2               
00210B  2               ex_af_af:
00210B  2               ;	rts
00210B  2               
00210B  1               
