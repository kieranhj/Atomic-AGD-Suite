ca65 V2.9.2 - (C) Copyright 1998-2000 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $0220
000000r 1               	.DEFINE header   1		; Header Wouter Ras emulator
000000r 1               	.DEFINE filenaam "AGD"
000000r 1               
000000r 1               .org asm_code-22*header
00020A  1               
00020A  1               .IF header
00020A  1               ;********************************************************************
00020A  1               ; ATM Header for Atom emulator Wouter Ras
00020A  1               
00020A  1               name_start:
00020A  1  41 47 44     	.byte filenaam			; Filename
00020D  1               name_end:
00020D  1  00 00 00 00  	.repeat 16-name_end+name_start	; Fill with 0 till 16 chars
000211  1  00 00 00 00  
000215  1  00 00 00 00  
00021A  1               	  .byte $0
00021A  1               	.endrep
00021A  1               
00021A  1  20 02        	.word asm_code			; 2 bytes startaddress
00021C  1  20 02        	.word exec			; 2 bytes linkaddress
00021E  1  82 53        	.word eind_asm-start_asm	; 2 bytes filelength
000220  1               
000220  1               ;********************************************************************
000220  1               .ENDIF
000220  1               
000220  1               exec:
000220  1               start_asm:
000220  1               	.include "z80-zp.inc"
000220  1               	.include "game.inc"
000220  2               .segment "ZEROPAGE"
000220  2               
000220  2               ws	 = $60
000220  2               
000220  2               z80_f	 = ws+$00
000220  2               z80_a	 = ws+$01
000220  2               z80_af	 = z80_f
000220  2               
000220  2               z80_c	 = ws+$02
000220  2               z80_b	 = ws+$03
000220  2               z80_bc	 = z80_c
000220  2               
000220  2               z80_e	 = ws+$04
000220  2               z80_d	 = ws+$05
000220  2               z80_de	 = z80_e
000220  2               
000220  2               z80_l	 = ws+$06
000220  2               z80_h	 = ws+$07
000220  2               z80_hl	 = z80_l
000220  2               
000220  2               z80_x    = ws+$08
000220  2               z80_i    = ws+$09
000220  2               z80_ix	 = z80_x
000220  2               
000220  2               z80_iy	 = ws+$0a
000220  2               
000220  2               z80_fp	 = ws+$0c
000220  2               z80_ap	 = ws+$0d
000220  2               
000220  2               z80_cp	 = ws+$0e
000220  2               z80_bp	 = ws+$0f
000220  2               z80_bcp	 = z80_cp
000220  2               
000220  2               z80_ep	 = ws+$10
000220  2               z80_dp	 = ws+$11
000220  2               z80_dep	 = z80_ep
000220  2               
000220  2               z80_lp	 = ws+$12
000220  2               z80_hp	 = ws+$13
000220  2               z80_hlp	 = z80_lp
000220  2               
000220  2               z80_sp   = ws+$14
000220  2               
000220  2               z80_reg0 = ws+$16
000220  2               z80_reg1 = ws+$17
000220  2               z80_reg2 = ws+$18
000220  2               z80_reg3 = ws+$19
000220  2               
000220  2               z80_r	 = ws+$1a
000220  2               
000220  2               
000220  1               	.include "z80.asm"
000220  2               .include "darktricks.inc" 
000220  2               
000220  3               ; Game engine code --------------------------------------------------------------
000220  3               
000220  3               ; Arcade Game Designer.
000220  3               ; (C) 2008 Jonathan Cauldwell.
000220  3               ; ZX Spectrum Next Engine v0.1.
000220  3               
000220  3               ; Global definitions ------------------------------------------------------------
000220  3               
000220  3               	FONT = font		; Font address
000220  3               
000220  3               ; Block characteristics.
000220  3               
000220  3               	PLATFM = 1		; platform.
000220  3               	WALL = PLATFM + 1	; solid wall.
000220  3               	LADDER = WALL + 1	; ladder.
000220  3               	FODDER = LADDER + 1	; fodder block.
000220  3               	DEADLY = FODDER + 1	; deadly block.
000220  3               	CUSTOM = DEADLY + 1	; custom block.
000220  3               	NUMTYP = CUSTOM + 1	; number of types.
000220  3               
000220  3               ; Sprites.
000220  3               
000220  3               	NUMSPR = 12		; number of sprites.
000220  3               	TABSIZ = 17		; size of each entry.
000220  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000220  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
000220  3               	var_X  = 8		; new x coordinate of sprite.
000220  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
000220  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
000220  3               
000220  3               ; Particle engine.
000220  3               
000220  3               	NUMSHR = 55		; pieces of shrapnel.
000220  3               	SHRSIZ = 6		; bytes per particle.
000220  3               
000220  3               ; Local vars
000220  3               
000220  3               	scraddr	= $80
000220  3               	fntaddr	= $82
000220  3               	tileaddr= $84
000220  3               	bufaddr	= $86
000220  3               	tmp     = $88
000220  3               
000220  3               	scr_l	= $90
000220  3               	scr_r	= $92
000220  3               	scr_txt	= $94
000220  3               
000220  3               ; System constants
000220  3               
000220  3               	ScreenAddr  = $8000	; Startaddress video RAM
000220  3               	ScrSelAddr  = $b000	; Screen selection address
000220  3               	KeyRowAddr  = $b000	; PIA key matrix row
000220  3               	KeyColAddr  = $b001	; PIA key matrix column
000220  3               	SpeakerBit  = $b002	; Speaker bit
000220  3               	CmdReg      = $b400	; Command register AtoMMC
000220  3               	DatReg      = $b401	; Data register AtoMMC 
000220  3               	Timer2_Low  = $b808	; Timer 2 low byte
000220  3               	Timer2_High = $b809	; Timer 2 high byte
000220  3               
000220  3               ; System calls
000220  3               
000220  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
000220  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
000220  3               	OSRDCH   = $fe94	; get key subroutine
000220  3                       READKEY  = $fe71	; scan key matrix subroutine
000220  3               
000220  3               ; Conditional compilation flags
000220  3               ; Flags are set in commandline assembly
000220  3               
000220  3               ;	mflag = 0 		; MENU + INV
000220  3               ;	pflag = 0		; Particle engine
000220  3               ;	sflag = 0		; scrollytext
000220  3               ;	fflag = 1		; Fontflag
000220  3               .if iflag
000220  3               	TxtInvert   = $ff	; Invert byte for character printing
000220  3               	ScrFillByte = $ff	; Screen fill byte for CLS
000220  3               .else
000220  3               	TxtInvert   = $00	; Invert byte for character printing
000220  3               	ScrFillByte = $00	; Screen fill byte for CLS
000220  3               .endif
000220  3               	ScrMode     = $f0	; Screen mode:
000220  3               				;  $d0 = CLEAR4a colour
000220  3               				;  $f0 = CLEAR4  mono
000220  3               
000220  3               ;===============================================================
000220  3               ; Game starts here
000220  3               ;===============================================================
000220  3               
000220  3               .segment "CODE"
000220  3               
000220  3               ;--------------------------------------------------------------
000220  3               ; If a font is required...
000220  3               ;--------------------------------------------------------------
000220  3               
000220  3  A9 59        	lda #<(FONT-256)	; address of font.
000222  3  8D AA 17     	sta FontPtr
000225  3  A9 51        	lda #>(FONT-256)
000227  3  8D AB 17     	sta FontPtr+1
00022A  3               
00022A  3  20 AF 03     	jsr game	 	; start the game.
00022D  3  A9 0C        	lda #12			; Clear screen + exit to Basic
00022F  3  4C F4 FF     	jmp $fff4
000232  3               	
000232  3  00           contrl:	.byte 0			; control, 0 = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000233  3  00           joyval:	.byte 0			; joystick reading.
000234  3  00           frmno:	.byte 0			; selected frame.
000235  3               
000235  3               ; Don't change the order of these four.  
000235  3               ; Menu routine relies on winlft following wintop.
000235  3               
000235  3  01           wintop:	.byte WINDOWTOP		; top of window.
000236  3  01           winlft:	.byte WINDOWLFT		; left edge.
000237  3  16           winhgt:	.byte WINDOWHGT		; window height.
000238  3  1E           winwid:	.byte WINDOWWID		; window width.
000239  3  29           numob:	.byte NUMOBJ		; number of objects in game.
00023A  3               
00023A  3               ; Variables start here.
00023A  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
00023A  3               
00023A  3  08           wntopx:	.byte (8 * WINDOWTOP)
00023B  3  08           wnlftx:	.byte (8 * WINDOWLFT)
00023C  3  A8           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00023D  3  E6           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00023E  3               
00023E  3  00           scno:	.byte 0			; present screen number.
00023F  3  03           numlif:	.byte 3			; number of lives.
000240  3               
000240  3  00           vara:	.byte 0			; general-purpose variable.
000241  3  00           varb:	.byte 0			; general-purpose variable.
000242  3  00           varc:	.byte 0			; general-purpose variable.
000243  3  00           vard:	.byte 0			; general-purpose variable.
000244  3  00           vare:	.byte 0			; general-purpose variable.
000245  3  00           varf:	.byte 0			; general-purpose variable.
000246  3  00           varg:	.byte 0			; general-purpose variable.
000247  3  00           varh:	.byte 0			; general-purpose variable.
000248  3  00           vari:	.byte 0			; general-purpose variable.
000249  3  00           varj:	.byte 0			; general-purpose variable.
00024A  3  00           vark:	.byte 0			; general-purpose variable.
00024B  3  00           varl:	.byte 0			; general-purpose variable.
00024C  3  00           varm:	.byte 0			; general-purpose variable.
00024D  3  00           varn:	.byte 0			; general-purpose variable.
00024E  3  00           varo:	.byte 0			; general-purpose variable.
00024F  3  00           varp:	.byte 0			; general-purpose variable.
000250  3  00           varq:	.byte 0			; general-purpose variable.
000251  3  00           varr:	.byte 0			; general-purpose variable.
000252  3  00           vars:	.byte 0			; general-purpose variable.
000253  3  00           vart:	.byte 0			; general-purpose variable.
000254  3  00           varu:	.byte 0			; general-purpose variable.
000255  3  00           varv:	.byte 0			; general-purpose variable.
000256  3  00           varw:	.byte 0			; general-purpose variable.
000257  3  00           varz:	.byte 0			; general-purpose variable.
000258  3               
000258  3  00           charx:	.byte 0			; cursor x position.
000259  3  00           chary:	.byte 0			; cursor y position.
00025A  3               
00025A  3  00           clock:	.byte 0			; last clock reading.
00025B  3  FF           varrnd:	.byte 255		; last random number.
00025C  3  FE           varobj:	.byte 254		; last object number.
00025D  3  FF           varopt:	.byte 255		; last option chosen from menu.
00025E  3  FF           varblk:	.byte 255		; block type.
00025F  3  00           nexlev:	.byte 0			; next level flag.
000260  3  00           restfl:	.byte 0			; restart screen flag.
000261  3  00           deadf:	.byte 0			; dead flag.
000262  3  00           gamwon:	.byte 0			; game won flag.
000263  3  00           dispx:	.byte 0			; cursor x position.
000264  3  00           dispy:	.byte 0			; cursor y position.
000265  3               
000265  3               ; Make sure pointers are arranged in the same order as the data itself.
000265  3               
000265  3  10 2E        frmptr:	.word frmlst         ; sprite frames.
000267  3               
000267  3               ; Assorted game routines which can go in contended memory.
000267  3               
000267  3               ;--------------------------------------------------------------
000267  3               ; Modify for inventory.
000267  3               ; called by the INV command
000267  3               ;
000267  3               ; Input:
000267  3               ;  X   = message nr with objects seperated with ,
000267  3               ;
000267  3               ; Output:
000267  3               ;  OPT = selected line nr of INV menu
000267  3               ;--------------------------------------------------------------
000267  3               
000267  3               .if mflag
000267  3               minve:
000267  3               	lda #<(invdis)		; routine address.
000267  3               	sta mod0+1		; set up menu routine.
000267  3               	sta mod2+1		; set up count routine.
000267  3               	lda #>(invdis)
000267  3               	sta mod0+2
000267  3               	sta mod2+2
000267  3               	lda #<(fopt)		; find option from available objects.
000267  3               	sta mod1+1		; set up routine.
000267  3               	lda #>(fopt)
000267  3               	sta mod1+1+1
000267  3               	jmp dbox		; do menu routine.
000267  3               
000267  3               ;--------------------------------------------------------------
000267  3               ; Modify for menu.
000267  3               ; called by the MENU command
000267  3               ;
000267  3               ; Input:
000267  3               ;  X   = message nr with menu items seperated with ,
000267  3               ;
000267  3               ; Output:
000267  3               ;  OPT = selected line nr of MENU menu
000267  3               ;--------------------------------------------------------------
000267  3               
000267  3               mmenu:
000267  3               	lda #<(always)		; routine address.
000267  3               	sta mod0+1		; set up routine.
000267  3               	sta mod2+1		; set up count routine.
000267  3               	lda #>(always)
000267  3               	sta mod0+2
000267  3               	sta mod2+2
000267  3               
000267  3               	lda #<(fstd)		; standard option selection.
000267  3               	sta mod1+1		; set up routine.
000267  3               	lda #>(fstd)
000267  3               	sta mod1+2
000267  3               
000267  3               ; Drop through into box routine.
000267  3               
000267  3               ;--------------------------------------------------------------
000267  3               ; Work out size of box for message or menu.
000267  3               ;--------------------------------------------------------------
000267  3               
000267  3               dbox:
000267  3               	lda #<(msgdat)		; pointer to messages.
000267  3               	sta z80_l
000267  3               	lda #>(msgdat)
000267  3               	sta z80_h
000267  3               	
000267  3               	jsr getwrd		; get message number.
000267  3               
000267  3               	lda z80_h		; store pointer to message.
000267  3               	sta TmpAddr
000267  3               	lda z80_l
000267  3               	sta TmpAddr+1
000267  3               
000267  3               	lda #1			; height.
000267  3               	sta z80_d
000267  3               	lda #0			; start at object zero.
000267  3               	sta combyt		; store number of object in combyt.
000267  3               	sta z80_e		; maximum width.
000267  3               dbox5:
000267  3               	lda #0			; this line"s width.
000267  3               	sta z80_b
000267  3               mod2:
000267  3               	jsr always		; item in player"s possession?
000267  3               	cmp #255
000267  3               	bne dbox6		; not in inventory, skip this line.
000267  3               	inc z80_d		; add to tally.
000267  3               dbox6:
000267  3               	ldy #0			; get character.
000267  3               	lda (z80_hl),y
000267  3               	sta z80_a
000267  3               	inc z80_l		; next character.
000267  3               	bne :+
000267  3               	inc z80_h
000267  3               :
000267  3               	lda z80_a		; reached end of line?
000267  3               	cmp #','
000267  3               	beq dbox3		; yes.
000267  3               	cmp #13
000267  3               	beq dbox3		; yes.
000267  3               	inc z80_b		; add to this line"s width.
000267  3               	lda z80_a
000267  3               	bmi dbox4		; end of message? yes, end count.
000267  3               	jmp dbox6		; repeat until we find the end.
000267  3               dbox3:
000267  3               	lda z80_e		; maximum line width.
000267  3               	cmp z80_b		; have we exceeded longest so far?
000267  3               	bpl dbox5		; no, carry on looking.
000267  3               	lda z80_b		; make this the widest so far.
000267  3               	sta z80_e
000267  3               	jmp dbox5		; keep looking.
000267  3               dbox4:
000267  3               	lda z80_e		; maximum line width.
000267  3               	cmp z80_b		; have we exceeded longest so far?
000267  3               	bpl dbox8		; no, carry on looking.
000267  3               	lda z80_b		; final line is the longest so far.
000267  3               	sta z80_e
000267  3               dbox8:
000267  3               	dec z80_d		; decrement items found.
000267  3               	bne :+			; total was zero.
000267  3               	jmp dbox15		
000267  3               :
000267  3               	lda z80_e		; longest line.
000267  3               	bne :+			; was it zero?
000267  3               	jmp dbox15		; total was zero.
000267  3               :
000267  3               	sta bwid		; set up size.
000267  3               	lda z80_d
000267  3               	sta blen
000267  3               
000267  3               ;--------------------------------------------------------------
000267  3               ; That's set up our box size.
000267  3               ;--------------------------------------------------------------
000267  3               
000267  3               	lda winhgt		; window height in characters.
000267  3               	sec
000267  3               	sbc z80_d		; subtract height of box.
000267  3               	lsr a			; divide by 2.
000267  3               	clc
000267  3               	adc wintop		; add top edge of window.
000267  3               	sta btop		; set up box top.
000267  3               
000267  3               	lda winwid		; window width in characters.
000267  3               	sec	
000267  3               	sbc z80_e		; subtract box width.
000267  3               	lsr a			; divide by 2.
000267  3               	clc
000267  3               	adc winlft		; add left edge of window.
000267  3               	sta blft		; box left.
000267  3               
000267  3               	lda FontPtr		; font.
000267  3               	sta grbase		; set up for text display.
000267  3               	lda FontPtr+1
000267  3               	sta grbase+1
000267  3               
000267  3               	lda TmpAddr+1		; restore message pointer.
000267  3               	sta z80_l
000267  3               	lda TmpAddr
000267  3               	sta z80_h
000267  3               
000267  3               	lda btop		; box top.
000267  3               	sta dispy		; set display coordinate.
000267  3               	lda #0			; start at object zero.
000267  3               	sta combyt		; store number of object in combyt.
000267  3               dbox2:
000267  3               	lda combyt		; get object number.
000267  3               	sta z80_a
000267  3               mod0:
000267  3               	jsr always		; check inventory for display.
000267  3               	cmp #255
000267  3               	beq :+			
000267  3               	jmp dbox13		; not in inventory, skip this line.
000267  3               :
000267  3               	lda blft		; box left.
000267  3               	sta dispx		; set left display position.
000267  3               	lda bwid		; box width.
000267  3               	sta z80_b		; store width.
000267  3               dbox0:
000267  3               	ldy #0			; get character.
000267  3               	lda (z80_hl),y
000267  3               	cmp #','		; end of line?
000267  3               	beq dbox1		; yes, next one.
000267  3               	cmp #13			; end of line?
000267  3               	beq dbox1		; yes, next one.
000267  3               
000267  3               	dec z80_b		; one less to display.
000267  3               	and #127		; remove terminator.
000267  3               
000267  3               	jsr pchr		; display on screen.
000267  3               
000267  3               	ldy #0
000267  3               	lda (z80_hl),y		; get character.
000267  3               	sta z80_a
000267  3               	inc z80_l		; next character.
000267  3               	bne :+
000267  3               	inc z80_h
000267  3               :
000267  3               	lda z80_a
000267  3               	cmp #128		; end of message?
000267  3               	bmi :+
000267  3               	jmp dbox7		; yes, job done.
000267  3               :
000267  3               	lda z80_b		; chars remaining.
000267  3               	beq :+			; are any left?
000267  3               	jmp dbox0		; yes, continue.
000267  3               :
000267  3               ;---------------------------------------------------
000267  3               ; Reached limit of characters per line.
000267  3               ;---------------------------------------------------
000267  3               
000267  3               dbox9:
000267  3               	ldy #0
000267  3               	lda (z80_hl),y		; get character.
000267  3               	inc z80_l		; next one.
000267  3               	bne :+
000267  3               	inc z80_h
000267  3               :
000267  3               	cmp #','		; another line?
000267  3               	beq dbox10		; yes, do next line.
000267  3               	cmp #13			; another line?
000267  3               	beq dbox10		; yes, do next line.
000267  3               	cmp #128		; end of message?
000267  3               	bcs :+
000267  3               	jmp dbox11		; yes, finish message.
000267  3               :
000267  3               	jmp dbox9
000267  3               
000267  3               ;---------------------------------------------------
000267  3               ; Fill box to end of line.
000267  3               ;---------------------------------------------------
000267  3               
000267  3               dboxf:
000267  3               	lda #32			; space character.
000267  3               	jsr pchr		; display character.
000267  3               	dec z80_b
000267  3               	beq :+
000267  3               	jmp dboxf		; repeat for remaining chars on line.
000267  3               :
000267  3               	rts
000267  3               dbox1:
000267  3               	inc z80_l		; skip character.
000267  3               	bne :+
000267  3               	inc z80_h
000267  3               :
000267  3               	jsr dboxf		; fill box out to right side.
000267  3               dbox10:
000267  3               	inc dispy		; y coordinate down a line next position.
000267  3               	jmp dbox2		; next line.
000267  3               dbox7:
000267  3               	lda z80_b		; chars remaining.
000267  3               	bne :+			; are any left?
000267  3               	jmp dbox11		; no, nothing to draw.
000267  3               :
000267  3               	jsr dboxf		; fill message to line.
000267  3               
000267  3               ;------------------------------------------------------
000267  3               ; Drawn the box menu, now select option.
000267  3               ;------------------------------------------------------
000267  3               
000267  3               dbox11:
000267  3               	lda btop		; box top.
000267  3               	sta dispy		; set bar position.
000267  3               dbox14:
000267  3               	jsr joykey		; get controls.
000267  3               	cmp #$7f		; anything pressed?
000267  3               	bne dbox14		; yes, debounce it.
000267  3               	jsr dbar		; draw bar.
000267  3               dbox12:
000267  3               	jsr joykey		; get controls.
000267  3               	cmp #$7f		; anything pressed?
000267  3               	beq dbox12		; no, nothing.
000267  3               	and #16			; fire button pressed?
000267  3               	bne :+
000267  3               mod1:
000267  3               	jmp fstd		; yes, job done.
000267  3               :
000267  3               	jsr dbar		; delete bar.
000267  3               
000267  3               	lda joyval		; joystick reading.
000267  3               	and #8			; going up?
000267  3               	beq dboxu		; yes, go up.
000267  3               
000267  3               	ldx dispy		; vertical position of bar.
000267  3               	inx			; look down.
000267  3               	txa
000267  3               	sec
000267  3               	sbc btop		; find distance from top.
000267  3               	cmp blen		; top of box.
000267  3               	bne :+
000267  3               	jmp dbox14		; yes, go no further.
000267  3               :
000267  3               	inc dispy		; move bar.
000267  3               	jmp dbox14		; continue.
000267  3               dboxu:
000267  3               	lda dispy		; vertical position of bar.
000267  3               	cmp btop		; are we at the top?
000267  3               	bne :+
000267  3               	jmp dbox14		; yes, go no further.
000267  3               :
000267  3               	dec dispy		; move bar.
000267  3               	jmp dbox14		; continue.
000267  3               fstd:
000267  3               	lda dispy		; bar position.
000267  3               	sec
000267  3               	sbc btop		; find selected option.
000267  3               	sta varopt		; store the option.
000267  3               	jmp redraw		; redraw the screen.
000267  3               
000267  3               ;------------------------------------------------------
000267  3               ; Option not available.  Skip this line.
000267  3               ;------------------------------------------------------
000267  3               
000267  3               dbox13:
000267  3               	ldy #0
000267  3               	lda (z80_hl),y		; get character.
000267  3               	inc z80_l		; next one.
000267  3               	bne :+
000267  3               	inc z80_h
000267  3               :
000267  3               	cmp #','		; another line?
000267  3               	bne :+
000267  3               	jmp dbox2		; yes, do next line.
000267  3               :
000267  3               	cmp #13			; another line?
000267  3               	bne :+
000267  3               	jmp dbox2		; yes, do next line.
000267  3               :
000267  3               
000267  3               	bpl :+			; end of message?
000267  3               	jmp dbox11		; yes, finish message.
000267  3               :
000267  3               	jmp dbox13
000267  3               dbox15:
000267  3               	lda TmpAddr		; pop message pointer from the stack.
000267  3               	sta z80_h
000267  3               	lda TmpAddr+1
000267  3               	sta z80_l
000267  3               	rts
000267  3               
000267  3               ;------------------------------------------------------
000267  3               ; Invert bar
000267  3               ;------------------------------------------------------
000267  3               
000267  3               dbar:
000267  3               	lda blft		; box left.
000267  3               	sta dispx		; set display coordinate.
000267  3               	jsr gprad		; get printing address.
000267  3               
000267  3               	lda bwid		; box width.
000267  3               	sta z80_c		; loop counter in c.
000267  3               	lda z80_h		
000267  3               	sta z80_d		; store screen address high byte.
000267  3               dbar1:
000267  3               	ldx #7			; pixel height in b.
000267  3               dbar0:
000267  3               	ldy scrtab,x
000267  3               	lda (scraddr),y		; get screen byte.
000267  3               	eor #255		; reverse all bits.
000267  3               	sta (scraddr),y		; write back to screen.
000267  3               	dex			; next line down.
000267  3               	bpl dbar0		; draw rest of character.
000267  3               
000267  3               	inc scraddr		; one char right.
000267  3               	dec z80_c		; decrement character counter.
000267  3               	beq :+
000267  3               	jmp dbar1		; repeat for whole line.
000267  3               :
000267  3               	rts
000267  3               
000267  3               ;------------------------------------------------------
000267  3               ; Point to object
000267  3               ;
000267  3               ; Input:
000267  3               ;  -
000267  3               ;
000267  3               ; Output:
000267  3               ;  A = object number, A=255 if already in possession
000267  3               ;------------------------------------------------------
000267  3               
000267  3               invdis:
000267  3               	lda z80_l		; store message text pointer.
000267  3               	pha
000267  3               	lda z80_h
000267  3               	pha
000267  3               	lda combyt		; object number.
000267  3               	inc combyt		; ready for next one.
000267  3               	jsr gotob		; check if we have object.
000267  3               	tay
000267  3               	pla
000267  3               	sta z80_h
000267  3               	pla
000267  3               	sta z80_l
000267  3               	tya
000267  3               	rts
000267  3               
000267  3               ;------------------------------------------------------
000267  3               ; Find option selected.
000267  3               ;
000267  3               ; Input:
000267  3               ;  -
000267  3               ;
000267  3               ; Output:
000267  3               ;  OPT = selected object
000267  3               ;------------------------------------------------------
000267  3               
000267  3               fopt:
000267  3               	lda dispy
000267  3               	sec
000267  3               	sbc btop		; find selected option.
000267  3               	sta tmp+2		; option selected in b register.
000267  3               	inc tmp+2
000267  3               
000267  3               	lda #0			; set to first item.
000267  3               	sta combyt		; object number.
000267  3               fopt0:
000267  3               	jsr fobj		; find next object in inventory.
000267  3               	dec tmp+2
000267  3               	bne fopt0		; repeat for relevant steps down the list.
000267  3               
000267  3               	lda combyt		; get option.
000267  3               	sta varopt		; store the option.
000267  3               	dec varopt		; one less, due to where we increment combyt.
000267  3               	jmp redraw		; redraw the screen.
000267  3               fobj:
000267  3               	ldy combyt		; object number.
000267  3               	inc combyt		; ready for next item.
000267  3               	tya
000267  3               	jsr gotob		; do we have this item?
000267  3               	cmp #255
000267  3               	bne :+
000267  3               	rts
000267  3               :
000267  3               	jmp fobj		; yes, it's on the list.
000267  3               
000267  3               bwid:	.byte 0              ; box/menu width.
000267  3               blen:	.byte 0              ; box/menu height.
000267  3               btop:	.byte 0              ; box coordinates.
000267  3               blft:	.byte 0
000267  3               .endif
000267  3               
000267  3               ;----------------------------------------------------
000267  3               ; Wait for keypress.
000267  3               ;----------------------------------------------------
000267  3               
000267  3               prskey:
000267  3  98           	tya
000268  3  48           	pha
000269  3               prsloop:
000269  3  20 CC 02     	jsr vsync
00026C  3  20 71 FE     	jsr READKEY
00026F  3  C0 FF        	cpy #255
000271  3  F0 F6        	beq prsloop		; wait until key pressed
000273  3  68           	pla
000274  3  A8           	tay
000275  3  60           	rts
000276  3               
000276  3               ;----------------------------------------------------
000276  3               ; Delay routine 1/50 sec
000276  3               ;
000276  3               ; Wait 1/60 sec = 16666 usec
000276  3               ; Wait 208 x 16 =  3328 usec
000276  3               ;                 19994 usec
000276  3               ; rts           =     6 usec
000276  3               ; Total         = 20000 usec
000276  3               ;----------------------------------------------------
000276  3               
000276  3               delay:
000276  3  8D 47 0A     	sta xtmp
000279  3               del_loop:
000279  3  20 66 FE     	jsr SCRSYNC		; wait for flyback
00027C  3               
00027C  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
00027E  3               delay1:
00027E  3  61 80        	adc ($80,x)		;	 6 usec
000280  3  61 80        	adc ($80,x)		;	 6 usec
000282  3  88           	dey			;	 2 usec
000283  3  D0 F9        	bne delay1		;	 2 usec
000285  3  EA           	nop			; 2 usec
000286  3  EA           	nop			; 2 usec
000287  3               				; tot: 20000 usec
000287  3  CE 47 0A     	dec xtmp
00028A  3  D0 ED        	bne del_loop
00028C  3  60           	rts
00028D  3               
00028D  3               ;----------------------------------------------------
00028D  3               ; Clear sprite table.
00028D  3               ;
00028D  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
00028D  3               ;----------------------------------------------------
00028D  3               
00028D  3               xspr:
00028D  3  A9 FF        	lda #255		; clear byte.
00028F  3  A2 00        	ldx #0			; length of table.
000291  3               xspr0:
000291  3  9D CB 16     	sta sprtab,x		; sprite table.
000294  3  E8           	inx			; move to next byte.
000295  3  E0 CC        	cpx #SPRBUF
000297  3  D0 F8        	bne xspr0		; repeat for rest of table.
000299  3  60           	rts
00029A  3               
00029A  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00029A  3               ; Sound, NOT IMPLEMENTED!!!
00029A  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00029A  3               ;
00029A  3               ;silenc:
00029A  3               ;	jsr silen1 		; silence channel 1.
00029A  3               ;	jsr silen2 		; silence channel 2.
00029A  3               ;	jsr silen3 		; silence channel 3.
00029A  3               ;	jmp plsnd 		; play all channels to switch them off.
00029A  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00029A  3               
00029A  3               ;-------------------------------------------------------------
00029A  3               ; Initialise all objects.
00029A  3               ;
00029A  3               ; Reset current room,y,x to start room,y,x for all objects
00029A  3               ;-------------------------------------------------------------
00029A  3               
00029A  3               iniob:
00029A  3  A9 43        	lda #<objdta 		; objects table.
00029C  3  85 68        	sta z80_x
00029E  3  A9 4C        	lda #>objdta
0002A0  3  85 69        	sta z80_i
0002A2  3               
0002A2  3  AE 39 02     	ldx numob 		; number of objects in the game.
0002A5  3               iniob0:
0002A5  3  A0 23        	ldy #35
0002A7  3  B1 68        	lda (z80_ix),y 		; start screen.
0002A9  3  A0 20        	ldy #32
0002AB  3  91 68        	sta (z80_ix),y 		; set start screen.
0002AD  3               
0002AD  3  A0 24        	ldy #36
0002AF  3  B1 68        	lda (z80_ix),y 		; find start y.
0002B1  3  A0 21        	ldy #33
0002B3  3  91 68        	sta (z80_ix),y 		; set start y.
0002B5  3               
0002B5  3  A0 25        	ldy #37
0002B7  3  B1 68        	lda (z80_ix),y 		; get initial x.
0002B9  3  A0 22        	ldy #34
0002BB  3  91 68        	sta (z80_ix),y 		; set x coord.
0002BD  3               
0002BD  3  18           	clc 			; point to next object.
0002BE  3  A5 68        	lda z80_x
0002C0  3  69 26        	adc #38			; distance between objects.
0002C2  3  85 68        	sta z80_x
0002C4  3  90 02        	bcc :+
0002C6  3  E6 69        	inc z80_i
0002C8  3               :
0002C8  3  CA           	dex 			; repeat.
0002C9  3  D0 DA        	bne iniob0
0002CB  3               
0002CB  3  60           	rts
0002CC  3               
0002CC  3               ;-------------------------------------------------------------
0002CC  3               ; Screen synchronisation.
0002CC  3               ;
0002CC  3               ;  - read joystick/keyboard
0002CC  3               ;  - handle sound
0002CC  3               ;  - sync framerate with clock
0002CC  3               ;  - handle shrapnel every even frame
0002CC  3               ;-------------------------------------------------------------
0002CC  3               
0002CC  3               vsync:
0002CC  3  48           	pha
0002CD  3  98           	tya
0002CE  3  48           	pha
0002CF  3  8A           	txa
0002D0  3  48           	pha
0002D1  3  20 AC 0D     	jsr joykey		; read joystick/keyboard.
0002D4  3               vsync1:
0002D4  3  AD 09 B8     	lda Timer2_High		; sync framerate with clock
0002D7  3  D0 FB        	bne vsync1
0002D9  3  A9 C3        	lda #>50000
0002DB  3  8D 09 B8     	sta Timer2_High
0002DE  3  A9 50        	lda #<50000
0002E0  3  8D 08 B8     	sta Timer2_Low
0002E3  3               
0002E3  3  AD 5A 02     	lda clock
0002E6  3  29 01        	and #1
0002E8  3  D0 03        	bne:+
0002EA  3  20 AE 03     	jsr proshr		; handle shrapnel every even frame
0002ED  3               :
0002ED  3  AD 0B 03     	lda sndtyp
0002F0  3  F0 13        	beq sndskip
0002F2  3               sndloop:
0002F2  3  AD 02 B0     	lda SpeakerBit		; handle sound
0002F5  3  AC 0B 03     	ldy sndtyp
0002F8  3               sndwait:
0002F8  3  88           	dey
0002F9  3  D0 FD        	bne sndwait
0002FB  3  49 04        	eor #4
0002FD  3  8D 02 B0     	sta SpeakerBit
000300  3  CE 0B 03     	dec sndtyp
000303  3  D0 ED        	bne sndloop
000305  3               sndskip: 
000305  3  68           	pla
000306  3  AA           	tax
000307  3  68           	pla
000308  3  A8           	tay
000309  3  68           	pla
00030A  3  60           	rts
00030B  3               
00030B  3  00           sndtyp:	.byte 0
00030C  3               
00030C  3               ;-----------------------------------------------
00030C  3               ; Redraw the screen.
00030C  3               ;
00030C  3               ; Remove old copy of all sprites for redraw.
00030C  3               ;-----------------------------------------------
00030C  3               
00030C  3               redraw:
00030C  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
00030E  3  48           	pha
00030F  3  A5 68        	lda z80_x
000311  3  48           	pha
000312  3               
000312  3  20 7E 0A     	jsr droom		; show screen layout.
000315  3  20 A4 05     	jsr shwob		; draw objects.
000318  3               numsp0:
000318  3  A9 0C        	lda #NUMSPR		; sprites to draw.
00031A  3  85 88        	sta tmp
00031C  3               
00031C  3  A9 CB        	lda #<sprtab		; sprite table.
00031E  3  85 68        	sta z80_x
000320  3  A9 16        	lda #>sprtab
000322  3  85 69        	sta z80_i
000324  3               redrw0:
000324  3  A0 00        	ldy #0
000326  3  B1 68        	lda (z80_ix),y		; old sprite type.
000328  3  C9 FF        	cmp #255		; is it enabled?
00032A  3  F0 0B        	beq redrw1 		; no, find next one.
00032C  3               
00032C  3  A0 03        	ldy #3
00032E  3  B1 68        	lda (z80_ix),y 		; sprite y.
000330  3  C9 B1        	cmp #177		; beyond maximum?
000332  3  B0 03        	bcs redrw1		; yes, nothing to draw.
000334  3               
000334  3  20 08 12     	jsr sspria		; show single sprite.
000337  3               redrw1:
000337  3  18           	clc			; next sprite.
000338  3  A5 68        	lda z80_x
00033A  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00033C  3  85 68        	sta z80_x
00033E  3  90 02        	bcc :+
000340  3  E6 69        	inc z80_i
000342  3               :
000342  3  C6 88        	dec tmp			; repeat for remaining sprites.
000344  3  D0 DE        	bne redrw0
000346  3               rpblc1:
000346  3               ;	jsr dshrp		; redraw shrapnel.
000346  3               
000346  3  68           	pla			; retrieve sprite pointer.
000347  3  85 68        	sta z80_x
000349  3  68           	pla
00034A  3  85 69        	sta z80_i
00034C  3               
00034C  3  60           	rts
00034D  3               
00034D  3               ;----------------------------------------------------------------------
00034D  3               ; Clear screen routine.
00034D  3               ;
00034D  3               ; Fill screenmem $8000-$97ff with ScrFillByte
00034D  3               ;----------------------------------------------------------------------
00034D  3               
00034D  3               cls:
00034D  3  A9 80        	lda #>ScreenAddr		; screen address.
00034F  3  8D 58 03     	sta clsloop+2
000352  3  A9 00        	lda #ScrFillByte
000354  3  A0 00        	ldy #0
000356  3               clsloop:
000356  3  99 00 80     	sta ScreenAddr,y
000359  3  C8           	iny
00035A  3  D0 FA        	bne clsloop
00035C  3  EE 58 03     	inc clsloop+2
00035F  3  AE 58 03     	ldx clsloop+2
000362  3  E0 98        	cpx #>(ScreenAddr+$1800)
000364  3  D0 F0        	bne clsloop
000366  3  60           	rts
000367  3               
000367  3               ;----------------------------------------------------------------------
000367  3               ; Atomic palette is static 
000367  3               ;----------------------------------------------------------------------
000367  3               
000367  3               setpal:
000367  3  60           	rts
000368  3               
000368  3               ;----------------------------------------------------------------------
000368  3               ; FODDER check
000368  3               ;----------------------------------------------------------------------
000368  3               
000368  3               fdchk:
000368  3  A0 00        	ldy #0
00036A  3  B1 66        	lda (z80_hl),y	 	; fetch cell.
00036C  3  C9 04        	cmp #FODDER 		; is it fodder?
00036E  3  F0 01        	beq :+
000370  3  60           	rts 			; no.
000371  3               :
000371  3  A9 00        	lda #0
000373  3  A0 00        	ldy #0
000375  3  91 66        	sta (z80_hl),y 		; rewrite block type.
000377  3               
000377  3  A5 67        	lda z80_h		; store pointer to block.
000379  3  48           	pha
00037A  3  A5 66        	lda z80_l
00037C  3  48           	pha
00037D  3               
00037D  3  38           	sec			; set carry flag for subtraction.
00037E  3  A5 66        	lda z80_l 		; find simple displacement for block.
000380  3  E9 00        	sbc #<MAP
000382  3  85 66        	sta z80_l
000384  3  A5 67        	lda z80_h
000386  3  E9 98        	sbc #>MAP
000388  3  85 67        	sta z80_h
00038A  3               
00038A  3  A5 66        	lda z80_l		; low byte is y coordinate.
00038C  3  29 1F        	and #31 		; column position 0 - 31.
00038E  3  8D 63 02     	sta dispx		; set up x position.
000391  3               
000391  3  06 66        	asl z80_l		; multiply displacement by 8.
000393  3  26 67        	rol z80_h
000395  3  06 66        	asl z80_l
000397  3  26 67        	rol z80_h
000399  3  06 66        	asl z80_l
00039B  3  26 67        	rol z80_h
00039D  3               
00039D  3  A5 67        	lda z80_h		; x coordinate now in h.
00039F  3  8D 64 02     	sta dispy		; set the display coordinate.
0003A2  3               
0003A2  3  A9 00        	lda #0 			; block to write.
0003A4  3  20 54 09     	jsr pattr 		; write block.
0003A7  3               
0003A7  3  68           	pla 			; restore block pointer.
0003A8  3  85 66        	sta z80_l
0003AA  3  68           	pla
0003AB  3  85 67        	sta z80_h
0003AD  3               
0003AD  3  60           	rts
0003AE  3               
0003AE  3               ;----------------------------------------------------
0003AE  3               ; Scrolly text and puzzle variables.
0003AE  3               ;----------------------------------------------------
0003AE  3               
0003AE  3               .if sflag
0003AE  3               txtbit:	.byte 128		; bit to write.
0003AE  3               txtwid:	.byte 16		; width of ticker message.
0003AE  3               txtpos:	.word msgdat
0003AE  3               txtini:	.word msgdat
0003AE  3               txtscr:	.word ScreenAddr
0003AE  3               .endif
0003AE  3               
0003AE  3               ;----------------------------------------------------
0003AE  3               ; Specialist routines.
0003AE  3               ; Process shrapnel.
0003AE  3               ;----------------------------------------------------
0003AE  3               proshr:
0003AE  3               .if pflag
0003AE  3               	lda #<SHRAPN		; table.
0003AE  3               	sta z80_x
0003AE  3               	lda #>SHRAPN
0003AE  3               	sta z80_i
0003AE  3               
0003AE  3               	lda #NUMSHR		; shrapnel pieces to process.
0003AE  3               	sta shrctr
0003AE  3               prosh0:
0003AE  3               	ldy #0
0003AE  3               	lda (z80_ix),y		; on/off marker.
0003AE  3               	asl a
0003AE  3               proshx:
0003AE  3               	bcs :+
0003AE  3               	jsr prosh1 		; on, so process it.
0003AE  3               :
0003AE  3               	clc
0003AE  3               	lda z80_x
0003AE  3               	adc #SHRSIZ
0003AE  3               	sta z80_x
0003AE  3               	bcc :+
0003AE  3               	inc z80_i
0003AE  3               :
0003AE  3               	dec shrctr		; round again.
0003AE  3               	bne prosh0
0003AE  3               .endif
0003AE  3               .if sflag
0003AE  3               	jsr scrly
0003AE  3               .endif
0003AE  3  60           	rts
0003AF  3               
0003AF  3               .if pflag
0003AF  3               shrctr:	.byte 0
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Proces shrapnel piece
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               prosh1:
0003AF  3               	jsr plot 		; delete the pixel.
0003AF  3               
0003AF  3               	lda #<shrptr		; shrapnel routine pointers.
0003AF  3               	sta z80_l
0003AF  3               	lda #>shrptr
0003AF  3               	sta z80_h
0003AF  3               
0003AF  3               	ldy #0
0003AF  3               	lda (z80_ix),y		; restore shrapnel type.
0003AF  3               	jsr prosh2 		; run the routine.
0003AF  3               	jsr chkxy		; check x and y are good before we redisplay.
0003AF  3               
0003AF  3               	lda #<SHRSIZ 		; distance to next.
0003AF  3               	sta z80_e
0003AF  3               	lda #>SHRSIZ
0003AF  3               	sta z80_d
0003AF  3               	rts
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Run the routine
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               prosh2:
0003AF  3               	asl a 			; 2 bytes per address.
0003AF  3               	tay
0003AF  3               	lda shrptr,y
0003AF  3               	sta z80_l
0003AF  3               	lda shrptr+1,y 		; fetch high byte from table.
0003AF  3               	sta z80_h
0003AF  3               	jmp (z80_hl) 		; jump to routine.
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Paricle routine table
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               shrptr:	.word laser		; laser.
0003AF  3               	.word trail		; vapour trail.
0003AF  3               	.word shrap		; shrapnel from explosion.
0003AF  3               	.word dotl		; horizontal starfield left.
0003AF  3               	.word dotr		; horizontal starfield right.
0003AF  3               	.word dotu		; vertical starfield up.
0003AF  3               	.word dotd		; vertical starfield down.
0003AF  3               	.word ptcusr		; user particle.
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Explosion shrapnel.
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               shrap:
0003AF  3               	ldy #1
0003AF  3               	lda (z80_ix),y 		; get the angle.
0003AF  3               	clc
0003AF  3               	adc #<shrsin		; shrapnel sine table.
0003AF  3               	sta z80_l
0003AF  3               	lda #>shrsin
0003AF  3               	adc #0
0003AF  3               	sta z80_h
0003AF  3               
0003AF  3               	ldy #0
0003AF  3               	lda (z80_hl),y 		; fetch value from table.
0003AF  3               	sta z80_e
0003AF  3               	inc z80_l 		; next byte of table.
0003AF  3               	bne :+
0003AF  3               	inc z80_h
0003AF  3               :
0003AF  3               	ldy #0
0003AF  3               	lda (z80_hl),y		; fetch value from table.
0003AF  3               	sta z80_d
0003AF  3               	inc z80_l		; next byte of table.
0003AF  3               	bne :+
0003AF  3               	inc z80_h
0003AF  3               :
0003AF  3               	ldy #0
0003AF  3               	lda (z80_hl),y 		; fetch value from table.
0003AF  3               	sta z80_c
0003AF  3               	inc z80_l 		; next byte of table.
0003AF  3               	bne :+
0003AF  3               	inc z80_h
0003AF  3               :
0003AF  3               	ldy #0
0003AF  3               	lda (z80_hl),y 		; fetch value from table.
0003AF  3               	sta z80_b
0003AF  3               
0003AF  3               	ldy #2
0003AF  3               	lda (z80_ix),y 		; x coordinate in hl.
0003AF  3               	clc
0003AF  3               	adc z80_e		; add sine lb
0003AF  3               	sta (z80_ix),y		; store new coordinate lb.
0003AF  3               	ldy #3
0003AF  3               	lda (z80_ix),y
0003AF  3               	adc z80_d		; add sine hb
0003AF  3               	sta (z80_ix),y		; store new coordinate hb.
0003AF  3               
0003AF  3               	ldy #4
0003AF  3               	lda (z80_ix),y	 	; y coordinate in hl.
0003AF  3               	clc
0003AF  3               	adc z80_c		; add cosine lb
0003AF  3               	sta (z80_ix),y		; store new coordinate lb.
0003AF  3               	ldy #5
0003AF  3               	lda (z80_ix),y
0003AF  3               	adc z80_b		; add cosine lb
0003AF  3               	sta (z80_ix),y		; store new coordinate hb.
0003AF  3               
0003AF  3               	rts
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Move dots
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               dotl:
0003AF  3               	ldy #5
0003AF  3               	lda (z80_ix),y
0003AF  3               	sec
0003AF  3               	sbc #1		 	; move left.
0003AF  3               	sta (z80_ix),y
0003AF  3               	rts
0003AF  3               dotr:
0003AF  3               	ldy #5
0003AF  3               	lda (z80_ix),y
0003AF  3               	clc
0003AF  3               	adc #1		 	; move left.
0003AF  3               	sta (z80_ix),y
0003AF  3               	rts
0003AF  3               dotu:
0003AF  3               	ldy #3
0003AF  3               	lda (z80_ix),y
0003AF  3               	sec
0003AF  3               	sbc #1		 	; move up.
0003AF  3               	sta (z80_ix),y
0003AF  3               	rts
0003AF  3               dotd:
0003AF  3               	ldy #3
0003AF  3               	lda (z80_ix),y
0003AF  3               	clc
0003AF  3               	adc #1			; move down.
0003AF  3               	sta (z80_ix),y
0003AF  3               	rts
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Check if coordinates are ok before redrawing at new position.
0003AF  3               ;
0003AF  3               ; left:   X>L		X=L	Ok
0003AF  3               ; right:  R+15>X	X=R	Ok
0003AF  3               ; top:    Y>T		Y=T	Ok
0003AF  3               ; bottom: B+15>Y	Y=B	Ok
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               chkxy:
0003AF  3               
0003AF  3               ; top:    Y>T		Y=T	Ok
0003AF  3               
0003AF  3               	ldy #3
0003AF  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0003AF  3               	cmp wntopx		; window top.
0003AF  3               	bcs :+			; compare with top window limit.
0003AF  3               	jmp kilshr		; out of window, kill shrapnel.
0003AF  3               :
0003AF  3               ; left:   X>L		X=L	Ok
0003AF  3               
0003AF  3               	ldy #5
0003AF  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0003AF  3               	cmp wnlftx		; left edge.
0003AF  3               	bcs :+			; compare with left window limit.
0003AF  3               	jmp kilshr		; out of window, kill shrapnel.
0003AF  3               :
0003AF  3               ; bottom: B+15>Y	Y=B	Ok
0003AF  3               
0003AF  3               	lda wnbotx		; point to bottom.
0003AF  3               	clc
0003AF  3               	adc #15
0003AF  3               	ldy #3
0003AF  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0003AF  3               	bcs :+			; compare with shrapnel x coordinate.
0003AF  3               	jmp kilshr		; off screen, kill shrapnel..
0003AF  3               :
0003AF  3               ; right:  R+15>X	X=R	Ok
0003AF  3               
0003AF  3               	lda wnrgtx		; point to right edge.
0003AF  3               	clc
0003AF  3               	adc #15
0003AF  3               	ldy #5
0003AF  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0003AF  3               	bcs :+			; compare with window limit.
0003AF  3               	jmp kilshr		; off screen, kill shrapnel.
0003AF  3               :
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Drop through.
0003AF  3               ; Display shrapnel.
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               plot:
0003AF  3               	ldy #3
0003AF  3               	lda (z80_ix),y		; y integer.
0003AF  3               	sta dispy	 	; workspace coordinates.
0003AF  3               	ldy #5
0003AF  3               	lda (z80_ix),y	 	; x integer.
0003AF  3               	sta dispx 		; workspace coordinates.
0003AF  3               
0003AF  3               	ldy #0
0003AF  3               	lda (z80_ix),y 		; type.
0003AF  3               	bne :+			; is it a laser?
0003AF  3               	jmp plot1 		; yes, draw laser instead.
0003AF  3               :
0003AF  3               plot0:
0003AF  3               	lda dispx		; which pixel within byte do we
0003AF  3               	and #7			; want to set first?
0003AF  3               	tay
0003AF  3               	lda dots,y 		; table of small pixel positions.
0003AF  3               	sta z80_e 		; get value.
0003AF  3               
0003AF  3               	jsr scadd 		; screen address.
0003AF  3               	ldy #0
0003AF  3               	lda (scraddr),y		; see what's already there.
0003AF  3               	eor z80_e
0003AF  3               	sta (scraddr),y 	; put back on screen.
0003AF  3               	rts
0003AF  3               
0003AF  3               plot1:
0003AF  3               	jsr scadd 		; screen address.
0003AF  3               	ldy #0
0003AF  3               	lda (scraddr),y 	; fetch byte there.
0003AF  3               	eor #255 		; toggle all bits.
0003AF  3               	sta (scraddr),y 	; new byte.
0003AF  3               	rts
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Switch off shrapnel
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               kilshr:
0003AF  3               	lda #128
0003AF  3               	ldy #0
0003AF  3               	sta (z80_ix),y	; switch off shrapnel.
0003AF  3               	rts
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Sine/cosine table
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               shrsin:	.word 0,1024,391,946,724,724,946,391
0003AF  3               	.word 1024,0,946,65144,724,64811,391,64589
0003AF  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
0003AF  3               	.word 64512,0,64589,391,64811,724,65144,946
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Create trail
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               trail:
0003AF  3               	ldy #1
0003AF  3               	lda (z80_ix),y 	; time remaining.
0003AF  3               	sec
0003AF  3               	sbc #1
0003AF  3               	sta (z80_ix),y
0003AF  3               	bne :+
0003AF  3               	jmp trailk		; time to switch it off.
0003AF  3               :
0003AF  3               	jsr qrand		; get a random number.
0003AF  3               	lsr a 			; x or y axis?
0003AF  3               	bcc :+
0003AF  3               	jmp trailv		; use y.
0003AF  3               :
0003AF  3               ; Trail horizontal
0003AF  3               
0003AF  3               	lsr a 			; which direction?
0003AF  3               	bcc :+
0003AF  3               	jmp traill		; go left.
0003AF  3               :
0003AF  3               ; Trail right
0003AF  3               
0003AF  3               	ldy #5
0003AF  3               	lda (z80_ix),y
0003AF  3               	clc
0003AF  3               	adc #1	 		; go right.
0003AF  3               	sta (z80_ix),y
0003AF  3               	rts
0003AF  3               
0003AF  3               ; Trail left
0003AF  3               
0003AF  3               traill:
0003AF  3               	ldy #5
0003AF  3               	lda (z80_ix),y
0003AF  3               	sec
0003AF  3               	sbc #1 			; go left.
0003AF  3               	sta (z80_ix),y
0003AF  3               	rts
0003AF  3               
0003AF  3               ; Trail vertical
0003AF  3               
0003AF  3               trailv:
0003AF  3               	lsr a		 	; which direction?
0003AF  3               	bcc :+
0003AF  3               	jmp trailu		; go up.
0003AF  3               :
0003AF  3               ; Trail down
0003AF  3               
0003AF  3               	ldy #3
0003AF  3               	lda (z80_ix),y
0003AF  3               	clc
0003AF  3               	adc #1 			; go down.
0003AF  3               	sta (z80_ix),y
0003AF  3               	rts
0003AF  3               
0003AF  3               ; Trail up
0003AF  3               
0003AF  3               trailu:
0003AF  3               	ldy #3
0003AF  3               	lda (z80_ix),y
0003AF  3               	sec
0003AF  3               	sbc #1 			; go up.
0003AF  3               	sta (z80_ix),y
0003AF  3               	rts
0003AF  3               
0003AF  3               ; Kill trail
0003AF  3               
0003AF  3               trailk:
0003AF  3               	lda #200		; set off-screen to kill vapour trail.
0003AF  3               	ldy #3
0003AF  3               	sta (z80_ix),y
0003AF  3               	rts
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Create laser beam
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               laser:
0003AF  3               	ldy #1
0003AF  3               	lda (z80_ix),y 		; direction.
0003AF  3               	ror a 			; left or right?
0003AF  3               	bcs :+
0003AF  3               	jmp laserl		; move left.
0003AF  3               :
0003AF  3               ; Laser right
0003AF  3               
0003AF  3               	lda #8			; distance to travel.
0003AF  3               	sta z80_b
0003AF  3               	jmp laserm		; move laser.
0003AF  3               
0003AF  3               ; Laser left
0003AF  3               
0003AF  3               laserl:
0003AF  3               	lda #248		; distance to travel.
0003AF  3               	sta z80_b
0003AF  3               laserm:
0003AF  3               	ldy #5
0003AF  3               	lda (z80_ix),y		; x position.
0003AF  3               	clc
0003AF  3               	adc z80_b		; add distance.
0003AF  3               	sta (z80_ix),y		; set new x coordinate.
0003AF  3               
0003AF  3               ; Test new block.
0003AF  3               
0003AF  3               	sta dispx 		; set x for block collision detection purposes.
0003AF  3               	ldy #3
0003AF  3               	lda (z80_ix),y 		; get y.
0003AF  3               	sta dispy		; set coordinate for collision test.
0003AF  3               	jsr tstbl 		; get block type there.
0003AF  3               	cmp #WALL		; is it solid?
0003AF  3               	bne :+
0003AF  3               	jmp trailk		; yes, it cannot pass.
0003AF  3               :
0003AF  3               	rts
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Dots mask
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               dots:	.byte 128,64,32,16,8,4,2,1
0003AF  3               
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Plot, preserving de.
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               plotde:
0003AF  3               	lda z80_d 		; put de on stack.
0003AF  3               	pha
0003AF  3               	lda z80_e
0003AF  3               	pha
0003AF  3               
0003AF  3               	jsr plot 		; plot pixel.
0003AF  3               
0003AF  3               	pla			; restore de from stack.
0003AF  3               	sta z80_e
0003AF  3               	pla
0003AF  3               	sta z80_d
0003AF  3               
0003AF  3               	rts
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Shoot a laser.
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               shoot:
0003AF  3               	sta z80_c		; store direction in c register.
0003AF  3               	ldy #8
0003AF  3               	lda (z80_ix),y 		; y coordinate.
0003AF  3               shoot1:
0003AF  3               	clc
0003AF  3               	adc #7 			; down 7 pixels.
0003AF  3               	sta z80_l 		; puty y coordinate in l.
0003AF  3               
0003AF  3               	ldy #9
0003AF  3               	lda (z80_ix),y 		; x coordinate in h.
0003AF  3               	sta z80_h
0003AF  3               
0003AF  3               	lda z80_i		; store pointer to sprite.
0003AF  3               	pha
0003AF  3               	lda z80_x
0003AF  3               	pha
0003AF  3               
0003AF  3               	jsr fpslot 		; find particle slot.
0003AF  3               	bcs :+
0003AF  3               	jmp vapou2		; failed, restore ix.
0003AF  3               :
0003AF  3               	lda #0
0003AF  3               	ldy #0
0003AF  3               	sta (z80_ix),y 		; set up a laser.
0003AF  3               
0003AF  3               	lda z80_c
0003AF  3               	ldy #1
0003AF  3               	sta (z80_ix),y 		; set the direction.
0003AF  3               
0003AF  3               	lda z80_l
0003AF  3               	ldy #3
0003AF  3               	sta (z80_ix),y		; set y coordinate.
0003AF  3               
0003AF  3               	ror z80_c		; check direction we want.
0003AF  3               	bcc :+
0003AF  3               	jmp shootr		; shoot right.
0003AF  3               :
0003AF  3               	lda z80_h		; X position.
0003AF  3               shoot0:
0003AF  3               	and #248		; align on character boundary.
0003AF  3               	ldy #5
0003AF  3               	sta (z80_ix),y		; set x coordinate.
0003AF  3               	jmp vapou0 		; draw first image.
0003AF  3               shootr:
0003AF  3               	lda z80_h		; x position.
0003AF  3               	clc
0003AF  3               	adc #15			; look right.
0003AF  3               	jmp shoot0		; align and continue.
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Create a bit of vapour trail.
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               vapour:
0003AF  3               	lda z80_i		; store pointer to sprite.
0003AF  3               	pha
0003AF  3               	lda z80_x
0003AF  3               	pha
0003AF  3               
0003AF  3               	ldy #8
0003AF  3               	lda (z80_ix),y 		; y coordinate.
0003AF  3               	clc
0003AF  3               	adc #7			; mid-point of sprite.
0003AF  3               	sta z80_l
0003AF  3               
0003AF  3               	ldy #9
0003AF  3               	lda (z80_ix),y 		; x coordinate.
0003AF  3               	adc #7
0003AF  3               	sta z80_h
0003AF  3               
0003AF  3               	jsr fpslot 		; find particle slot.
0003AF  3               	bcc :+
0003AF  3               	jmp vapou1		; no, we can use it.
0003AF  3               :
0003AF  3               vapou2:
0003AF  3               	pla
0003AF  3               	sta z80_x
0003AF  3               	pla
0003AF  3               	sta z80_i
0003AF  3               	rts
0003AF  3               vapou1:
0003AF  3               	lda z80_l
0003AF  3               	ldy #3
0003AF  3               	sta (z80_ix),y		; set up y.
0003AF  3               
0003AF  3               	lda z80_h
0003AF  3               	ldy #5
0003AF  3               	sta (z80_ix),y 		; set up x coordinate.
0003AF  3               
0003AF  3               	jsr qrand		; get quick random number.
0003AF  3               	and #15			; random time.
0003AF  3               	clc
0003AF  3               	adc #15			; minimum time on screen.
0003AF  3               	ldy #1
0003AF  3               	sta (z80_ix),y		; set time on screen.
0003AF  3               
0003AF  3               	lda #1
0003AF  3               	ldy #0
0003AF  3               	sta (z80_ix),y		; define particle as vapour trail.
0003AF  3               vapou0:
0003AF  3               	jsr chkxy		; plot first position.
0003AF  3               	jmp vapou2
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Create a user particle.
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               ptusr:
0003AF  3               	sta z80_f		; store timer.
0003AF  3               
0003AF  3               	ldy #8
0003AF  3               	lda (z80_ix),y 		; y coordinate.
0003AF  3               	clc
0003AF  3               	adc #7			; mid-point of sprite.
0003AF  3               	sta z80_l
0003AF  3               
0003AF  3               	ldy #9
0003AF  3               	lda (z80_ix),y 		; x coordinate.
0003AF  3               	clc
0003AF  3               	adc #7			; mid-point of sprite.
0003AF  3               	sta z80_h
0003AF  3               
0003AF  3               	jsr fpslot 		; find particle slot.
0003AF  3               	bcs ptusr1
0003AF  3               	rts 			; out of slots, can't generate anything.
0003AF  3               ptusr1:
0003AF  3               	lda z80_l
0003AF  3               	ldy #3
0003AF  3               	sta (z80_ix),y 		; set up y.
0003AF  3               
0003AF  3               	lda z80_h
0003AF  3               	ldy #5
0003AF  3               	sta (z80_ix),y		; set up x coordinate.
0003AF  3               
0003AF  3               	lda z80_f 		; restore timer.
0003AF  3               	ldy #1
0003AF  3               	sta (z80_ix),y		; set time on screen.
0003AF  3               
0003AF  3               	lda #7
0003AF  3               	ldy #0
0003AF  3               	sta (z80_ix),y		; define particle as user particle.
0003AF  3               
0003AF  3               	jmp chkxy		; plot first position.
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Create a vertical or horizontal star.
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               star:
0003AF  3               	lda z80_i		; store pointer to sprite.
0003AF  3               	pha
0003AF  3               	lda z80_x
0003AF  3               	pha
0003AF  3               
0003AF  3               	jsr fpslot 		; find particle slot.
0003AF  3               	bcs star7		; found one we can use.
0003AF  3               star0:
0003AF  3               	pla 			; restore sprite pointer.
0003AF  3               	sta z80_x
0003AF  3               	pla
0003AF  3               	sta z80_i
0003AF  3               	rts 			; out of slots, can't generate anything.
0003AF  3               star7:
0003AF  3               	lda z80_c		; direction.
0003AF  3               	and #3 			; is it left?
0003AF  3               	bne :+
0003AF  3               	jmp star1 		; yes, it's left.
0003AF  3               :
0003AF  3               	cmp #1 			; is it right?
0003AF  3               	bne :+
0003AF  3               	jmp star2 		; yes, it's right.
0003AF  3               :
0003AF  3               	cmp #2 			; is it up?
0003AF  3               	bne :+
0003AF  3               	jmp star3 		; yes, it's up.
0003AF  3               :
0003AF  3               	ldy wntopx 		; get edge of screen.
0003AF  3               	iny			; down one pixel.
0003AF  3               	tya
0003AF  3               star8:
0003AF  3               	ldy #3
0003AF  3               	sta (z80_ix),y 		; set y coord.
0003AF  3               	jsr qrand 		; get quick random number.
0003AF  3               star9:
0003AF  3               	ldy #5
0003AF  3               	sta (z80_ix),y		; set x position.
0003AF  3               
0003AF  3               	lda z80_c		; direction.
0003AF  3               	and #3			; zero to three.
0003AF  3               	clc
0003AF  3               	adc #3			; 3 to 6 for starfield.
0003AF  3               	ldy #0
0003AF  3               	sta (z80_ix),y		; define particle as star.
0003AF  3               	jsr chkxy		; plot first position.
0003AF  3               	jmp star0
0003AF  3               star1:
0003AF  3               	jsr qrand		; get quick random number.
0003AF  3               	ldy #3
0003AF  3               	sta (z80_ix),y 		; set y coord.
0003AF  3               
0003AF  3               	lda wnrgtx 		; get edge of screen.
0003AF  3               	clc
0003AF  3               	adc #15			; add width of sprite minus 1.
0003AF  3               	jmp star9
0003AF  3               star2:
0003AF  3               	jsr qrand 		; get quick random number.
0003AF  3               	ldy #3
0003AF  3               	sta (z80_ix),y		; set y coord.
0003AF  3               
0003AF  3               	lda wnlftx		; get edge of screen.
0003AF  3               	jmp star9
0003AF  3               star3:
0003AF  3               	lda wnbotx 		; get edge of screen.
0003AF  3               	clc
0003AF  3               	adc #15 		; height of sprite minus one pixel.
0003AF  3               	jmp star8
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Find particle slot for lasers or vapour trail.
0003AF  3               ; can't use alternate accumulator.
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               fpslot:
0003AF  3               	lda #<SHRAPN 		; shrapnel table.
0003AF  3               	sta z80_x
0003AF  3               	lda #>SHRAPN
0003AF  3               	sta z80_i
0003AF  3               
0003AF  3               	lda #NUMSHR		; number of pieces in table.
0003AF  3               	sta z80_b
0003AF  3               fpslt0:
0003AF  3               	ldy #0
0003AF  3               	lda (z80_ix),y		; get type.
0003AF  3               	asl a  			; is this slot in use?
0003AF  3               	bcc :+
0003AF  3               	rts			; no, we can use it.
0003AF  3               :
0003AF  3               	clc			; point to more shrapnel.
0003AF  3               	lda z80_x
0003AF  3               	adc #SHRSIZ
0003AF  3               	sta z80_x
0003AF  3               	bcc :+
0003AF  3               	inc z80_i
0003AF  3               :
0003AF  3               	dec z80_b		; repeat for all shrapnel.
0003AF  3               	bne fpslt0
0003AF  3               
0003AF  3               	clc
0003AF  3               	rts 			; out of slots, can't generate anything.
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Create an explosion at sprite position.
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               explod:
0003AF  3               	sta z80_c 		; particles to create.
0003AF  3               
0003AF  3               	lda z80_i 		; store pointer to sprite.
0003AF  3               	pha
0003AF  3               	lda z80_x
0003AF  3               	pha
0003AF  3               
0003AF  3               	ldy #8
0003AF  3               	lda (z80_ix),y 		; y coordinate.
0003AF  3               	sta z80_l
0003AF  3               	ldy #9
0003AF  3               	lda (z80_ix),y		; x coordinate.
0003AF  3               	sta z80_h
0003AF  3               
0003AF  3               	lda #<SHRAPN		; shrapnel table.
0003AF  3               	sta z80_x
0003AF  3               	lda #>SHRAPN
0003AF  3               	sta z80_i
0003AF  3               
0003AF  3               	lda #NUMSHR		; number of pieces in table.
0003AF  3               	sta explcnt
0003AF  3               expld0:
0003AF  3               	ldy #0
0003AF  3               	lda (z80_ix),y		; get type.
0003AF  3               	asl a 			; is this slot in use?
0003AF  3               	bcs expld1		; no, we can use it.
0003AF  3               expld2:
0003AF  3               	clc
0003AF  3               	lda z80_x
0003AF  3               	adc #SHRSIZ
0003AF  3               	sta z80_x
0003AF  3               	bcc :+
0003AF  3               	inc z80_i
0003AF  3               :
0003AF  3               	dec explcnt		; repeat for all shrapnel.
0003AF  3               	bne expld0
0003AF  3               expld3:
0003AF  3               	pla			; restore sprite pointer.
0003AF  3               	sta z80_x
0003AF  3               	pla
0003AF  3               	sta z80_i
0003AF  3               	rts 			; out of slots, can't generate any more.
0003AF  3               
0003AF  3               expld1:
0003AF  3               	lda z80_c		; shrapnel counter.
0003AF  3               	and #15			; 0 to 15.
0003AF  3               	clc			; add to x.
0003AF  3               	adc z80_l
0003AF  3               	ldy #3
0003AF  3               	sta (z80_ix),y		; y coord.
0003AF  3               
0003AF  3               	lda seed3 		; crap random number.
0003AF  3               	and #15			; 0 to 15.
0003AF  3               	clc 			; add to y.
0003AF  3               	adc z80_h
0003AF  3               	ldy #5
0003AF  3               	sta (z80_ix),y		; x coord.
0003AF  3               
0003AF  3               	lda #2
0003AF  3               	ldy #0
0003AF  3               	sta (z80_ix),y		; switch it on.
0003AF  3               
0003AF  3               	jsr chkxy		; plot first position.
0003AF  3               	jsr qrand		; quick random angle.
0003AF  3               	and #60 		; keep within range.
0003AF  3               	ldy #1
0003AF  3               	sta (z80_ix),y		; angle.
0003AF  3               
0003AF  3               	dec z80_c		; one less piece of shrapnel to generate.
0003AF  3               	bne expld2 		; back to main explosion loop.
0003AF  3               	jmp expld3 		; restore sprite pointer and exit.
0003AF  3               
0003AF  3               explcnt:	.byte 0
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Quick random
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               qrand:
0003AF  3               	jsr random		; r register.
0003AF  3               	eor seed3		; combine with seed.
0003AF  3               	sta seed3 		; new seed.
0003AF  3               	rts
0003AF  3               
0003AF  3               seed3:	.byte 0
0003AF  3               
0003AF  3               ;----------------------------------------------------
0003AF  3               ; Display all shrapnel.
0003AF  3               ;----------------------------------------------------
0003AF  3               
0003AF  3               dshrp:
0003AF  3               	lda #<plotde		; display routine.
0003AF  3               	sta proshx+1
0003AF  3               	lda #>plotde
0003AF  3               	sta proshx+2
0003AF  3               	jsr proshr		; process shrapnel.
0003AF  3               
0003AF  3               	lda #<prosh1		; processing routine.
0003AF  3               	sta proshx+1
0003AF  3               	lda #>prosh1
0003AF  3               	sta proshx+2
0003AF  3               	rts
0003AF  3               
0003AF  3               ;------------------------------------------------------
0003AF  3               ; Particle engine.
0003AF  3               ;
0003AF  3               ; Init particle data for 55 particles in SHRAPN table.
0003AF  3               ; Every particle has 6 bytes.
0003AF  3               ;
0003AF  3               ; global:	-
0003AF  3               ; local:	x,y,hl
0003AF  3               ; calls:	-
0003AF  3               ;------------------------------------------------------
0003AF  3               
0003AF  3               inishr:
0003AF  3               	lda #<SHRAPN 		; table.
0003AF  3               	sta z80_l
0003AF  3               	lda #>SHRAPN
0003AF  3               	sta z80_h
0003AF  3               
0003AF  3               	ldy #0
0003AF  3               	ldx #NUMSHR		; shrapnel pieces to process.
0003AF  3               inish0:
0003AF  3               	lda #255 		; kill the shrapnel.
0003AF  3               	sta (z80_hl),y
0003AF  3               
0003AF  3               	clc 			; point there.
0003AF  3               	lda z80_l
0003AF  3               	adc #SHRSIZ		; distance to next.
0003AF  3               	sta z80_l
0003AF  3               	bcc :+
0003AF  3               	inc z80_h
0003AF  3               :
0003AF  3               	dex
0003AF  3               	bne inish0 		; round again.
0003AF  3               	rts
0003AF  3               
0003AF  3               ;------------------------------------------------------
0003AF  3               ; Check for collision between laser and sprite.
0003AF  3               ;------------------------------------------------------
0003AF  3               
0003AF  3               lcol:
0003AF  3               	lda #<SHRAPN		; shrapnel table.
0003AF  3               	sta z80_l
0003AF  3               	lda #>SHRAPN
0003AF  3               	sta z80_h
0003AF  3               
0003AF  3               	lda #NUMSHR		; number of pieces in table.
0003AF  3               	sta z80_b
0003AF  3               lcol0:
0003AF  3               	ldy #0
0003AF  3               	lda (z80_hl),y 		; get type.
0003AF  3               	beq lcol1		; yes, check collision.
0003AF  3               lcol3:
0003AF  3               	clc			; point to more shrapnel.
0003AF  3               	lda z80_l
0003AF  3               	adc #SHRSIZ
0003AF  3               	sta z80_l
0003AF  3               	bcc :+
0003AF  3               	inc z80_h
0003AF  3               :
0003AF  3               	dec z80_b		; repeat for all shrapnel.
0003AF  3               	bne lcol0
0003AF  3               	rts 			; no collision, carry not set.
0003AF  3               lcol1:
0003AF  3               	ldy #3
0003AF  3               	lda (z80_hl),y		; get y.
0003AF  3               	sec
0003AF  3               	ldy #8
0003AF  3               	sbc (z80_ix),y		; subtract sprite y.
0003AF  3               lcolh:
0003AF  3               	cmp #16 		; within range?
0003AF  3               	bcc :+
0003AF  3               	jmp lcol2		; no, missed.
0003AF  3               :
0003AF  3               	ldy #5
0003AF  3               	lda (z80_hl),y 		; get x.
0003AF  3               	sec
0003AF  3               	ldy #9
0003AF  3               	sbc (z80_ix),y 		; subtract sprite y.
0003AF  3               	cmp #16			; within range?
0003AF  3               	bcs :+
0003AF  3               	jmp lcol4 		; yes, collision occurred.
0003AF  3               :
0003AF  3               lcol2:
0003AF  3               	jmp lcol3
0003AF  3               lcol4:
0003AF  3               	sec
0003AF  3               	rts 			; return with carry set for collision.
0003AF  3               .endif
0003AF  3               
0003AF  3               ;------------------------------------------------------
0003AF  3               ; Main game engine code starts here.
0003AF  3               ; After initialisation, mloop is the main loop
0003AF  3               ;------------------------------------------------------
0003AF  3               
0003AF  3               game:
0003AF  3               
0003AF  3               ; Set up screen address table.
0003AF  3               
0003AF  3               setsat:
0003AF  3  A9 00        	lda #<ScreenAddr		; start of screen.
0003B1  3  85 80        	sta scraddr
0003B3  3  A9 80        	lda #>ScreenAddr
0003B5  3  85 81        	sta scraddr+1
0003B7  3               
0003B7  3  A0 00        	ldy #0			; vertical lines on screen.
0003B9  3               setsa0:
0003B9  3  A5 80        	lda scraddr
0003BB  3  99 00 9B     	sta SCADTB_lb,y		; write low byte.
0003BE  3  A5 81        	lda scraddr+1
0003C0  3  C0 C0        	cpy #192		; vertical lines on screen.
0003C2  3  90 02        	bcc :+
0003C4  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
0003C6  3               :
0003C6  3  99 00 9C     	sta SCADTB_hb,y		; write high byte.
0003C9  3  20 6F 12     	jsr nline		; next line down.
0003CC  3  C8           	iny			; next position in table.
0003CD  3  D0 EA        	bne setsa0
0003CF  3               	
0003CF  3               ; Init graphics mode
0003CF  3               
0003CF  3  A9 F0        	lda #ScrMode		; graphics mode
0003D1  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
0003D4  3  20 67 03     	jsr setpal 		; set up palette.
0003D7  3               
0003D7  3               ; Init AtoMMC joystick
0003D7  3  20 E8 0D     	jsr joyinit		; AtoMMC joystick on PORT B
0003DA  3               
0003DA  3               rpblc2:
0003DA  3               .if pflag
0003DA  3               	jsr inishr 		; initialise particle engine.
0003DA  3               .endif
0003DA  3               evintr:
0003DA  3  20 5D 1D     	jsr evnt12 		; call intro/menu event.
0003DD  3               
0003DD  3  A9 02        	lda #WALL 		; write default property.
0003DF  3  A2 00        	ldx #0
0003E1  3               clrmap:
0003E1  3  9D 00 98     	sta MAP,x 		; block properties.
0003E4  3  9D 00 99     	sta MAP+256,x
0003E7  3  9D 00 9A     	sta MAP+512,x
0003EA  3  E8           	inx			; next byte.
0003EB  3  D0 F4        	bne clrmap
0003ED  3               
0003ED  3  20 9A 02     	jsr iniob 		; initialise objects.
0003F0  3               
0003F0  3  A9 00        	lda #0			; put zero in accumulator.
0003F2  3  8D 62 02     	sta gamwon		; reset game won flag.
0003F5  3               
0003F5  3  20 54 05     	jsr inisc 		; init the score.
0003F8  3               mapst:
0003F8  3  AD 1F 18     	lda stmap 		; start position on map.
0003FB  3  8D A8 17     	sta roomtb		; set up position in table, if there is one.
0003FE  3               
0003FE  3               inipbl:
0003FE  3  20 83 13     	jsr initsc 		; set up first screen.
000401  3               
000401  3  A9 97        	lda #<ssprit 		; default to spare sprite in table.
000403  3  85 68        	sta z80_x
000405  3  A9 17        	lda #>ssprit
000407  3  85 69        	sta z80_i
000409  3               evini:
000409  3  20 C4 1D     	jsr evnt13 		; initialisation.
00040C  3               
00040C  3               ; Two restarts.
00040C  3               ; First restart - clear all sprites and initialise everything.
00040C  3               
00040C  3               rstrt:
00040C  3  20 01 05     	jsr rsevt 		; restart events.
00040F  3  20 8D 02     	jsr xspr 		; clear sprite table.
000412  3  20 E9 14     	jsr sprlst 		; fetch pointer to screen sprites.
000415  3  20 77 15     	jsr ispr 		; initialise sprite table.
000418  3               
000418  3  4C 27 04     	jmp rstrt0
00041B  3               
00041B  3               ; Second restart - clear all but player, and don't initialise him.
00041B  3               
00041B  3               rstrtn:
00041B  3  20 01 05     	jsr rsevt		; restart events.
00041E  3  20 17 15     	jsr nspr 		; clear all non-player sprites.
000421  3  20 E9 14     	jsr sprlst 		; fetch pointer to screen sprites.
000424  3  20 B7 15     	jsr kspr 		; initialise sprite table, no more players.
000427  3               
000427  3               ; Set up the player and/or enemy sprites.
000427  3               
000427  3               rstrt0:
000427  3  A9 00        	lda #0 			; zero in accumulator.
000429  3  8D 5F 02     	sta nexlev 		; reset next level flag.
00042C  3  8D 60 02     	sta restfl 		; reset restart flag.
00042F  3  8D 61 02     	sta deadf 		; reset dead flag.
000432  3  20 7E 0A     	jsr droom 		; show screen layout.
000435  3               rpblc0:
000435  3               .if pflag
000435  3               	jsr inishr 		; initialise particle engine.
000435  3               .endif
000435  3  20 A4 05     	jsr shwob		; draw objects.
000438  3               
000438  3  A9 CB        	lda #<sprtab 		; address of sprite table, even sprites.
00043A  3  85 68        	sta z80_x
00043C  3  A9 16        	lda #>sprtab
00043E  3  85 69        	sta z80_i
000440  3  20 E0 10     	jsr dspr 		; display sprites.
000443  3               
000443  3  A9 DC        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000445  3  85 68        	sta z80_x
000447  3  A9 16        	lda #>(sprtab+TABSIZ)
000449  3  85 69        	sta z80_i
00044B  3  20 E0 10     	jsr dspr 		; display sprites.
00044E  3               mloop:
00044E  3  20 CC 02     	jsr vsync 		; synchronise with display.
000451  3               
000451  3  A9 CB        	lda #<sprtab 		; address of sprite table, even sprites.
000453  3  85 68        	sta z80_x
000455  3  A9 16        	lda #>sprtab
000457  3  85 69        	sta z80_i
000459  3  20 E0 10     	jsr dspr 		; display even sprites.
00045C  3               
00045C  3  20 A3 05     	jsr plsnd 		; play sounds.
00045F  3               
00045F  3  A9 DC        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000461  3  85 68        	sta z80_x
000463  3  A9 16        	lda #>(sprtab+TABSIZ)
000465  3  85 69        	sta z80_i
000467  3  20 E0 10     	jsr dspr 		; display odd sprites.
00046A  3               
00046A  3  A9 97        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
00046C  3  85 68        	sta z80_x
00046E  3  A9 17        	lda #>(ssprit)
000470  3  85 69        	sta z80_i
000472  3               evlp1:
000472  3  20 37 1D     	jsr evnt10 		; called once per main loop.
000475  3  20 55 10     	jsr pspr 		; process sprites.
000478  3               
000478  3               ; Main loop events.
000478  3               
000478  3  A9 97        	lda #<ssprit 		; point to spare sprite for spawning purposes.
00047A  3  85 68        	sta z80_x
00047C  3  A9 17        	lda #>ssprit
00047E  3  85 69        	sta z80_i
000480  3               evlp2:
000480  3  20 53 1D     	jsr evnt11 		; called once per main loop.
000483  3               bsortx:
000483  3  20 C8 0F     	jsr bsort 		; sort sprites.
000486  3               
000486  3  AD 5F 02     	lda nexlev		; finished level flag.
000489  3  D0 21        	bne newlev		; is set, go to next level.
00048B  3  AD 62 02     	lda gamwon		; finished game flag.
00048E  3  D0 2D        	bne evwon		; is set, finish the game.
000490  3  AD 60 02     	lda restfl 		; finished level flag.
000493  3  C9 01        	cmp #1			; has it been set?
000495  3  D0 03        	bne :+
000497  3  4C 0C 04     	jmp rstrt		; yes, go to next level.
00049A  3               :
00049A  3  C9 02        	cmp #2			; has it been set?
00049C  3  D0 03        	bne :+
00049E  3  4C 1B 04     	jmp rstrtn		; yes, go to next level.
0004A1  3               :
0004A1  3  AD 61 02     	lda deadf 		; dead flag.
0004A4  3  D0 1D        	bne pdead		; yes, player dead.
0004A6  3               
0004A6  3               ; back to start of main loop.
0004A6  3               
0004A6  3  EE 5A 02     	inc clock
0004A9  3  4C 4E 04     	jmp mloop		; switched to a jmp mloop during test mode.
0004AC  3               
0004AC  3               ;----------------------------------------------------------
0004AC  3               ; New level
0004AC  3               ;----------------------------------------------------------
0004AC  3               
0004AC  3               newlev:
0004AC  3  AD 3E 02     	lda scno 			; current screen.
0004AF  3  18           	clc
0004B0  3  69 01        	adc #1				; next screen.
0004B2  3  CD A3 49     	cmp numsc			; total number of screens.
0004B5  3  B0 06        	bcs evwon			; yes, game finished.
0004B7  3  8D 3E 02     	sta scno			; set new level number.
0004BA  3  4C 0C 04     	jmp rstrt			; restart, clearing all aliens.
0004BD  3               
0004BD  3               evwon:
0004BD  3  20 93 1E     	jsr evnt18		 	; game completed.
0004C0  3  4C D6 04     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0004C3  3               
0004C3  3               ;----------------------------------------------------------
0004C3  3               ; Player dead.
0004C3  3               ;----------------------------------------------------------
0004C3  3               
0004C3  3               pdead:
0004C3  3  A9 00        	lda #0				; zeroise accumulator.
0004C5  3  8D 61 02     	sta deadf			; reset dead flag.
0004C8  3               evdie:
0004C8  3  20 0F 1E     	jsr evnt16 			; death subroutine.
0004CB  3  AD 3F 02     	lda numlif			; number of lives.
0004CE  3  F0 03        	beq :+
0004D0  3  4C 0C 04     	jmp rstrt 			; restart game.
0004D3  3               :
0004D3  3               evfail:
0004D3  3  20 61 1E     	jsr evnt17 			; failure event.
0004D6  3               
0004D6  3               ;----------------------------------------------------------
0004D6  3               ; Tidy things up
0004D6  3               ;----------------------------------------------------------
0004D6  3               
0004D6  3               tidyup:
0004D6  3  A0 00        	ldy #0				; digits to check.
0004D8  3               tidyu2:
0004D8  3  B9 7D 07     	lda score,y 			; get score digit.
0004DB  3  CD 83 07     	cmp hiscor 			; are we larger than high score digit?
0004DE  3  90 07        	bcc tidyu0			; high score is bigger.
0004E0  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0004E2  3  C8           	iny				; next digit of high score.
0004E3  3  C0 06        	cpy #6
0004E5  3  D0 F1        	bne tidyu2			; repeat for all digits
0004E7  3               tidyu0:
0004E7  3  A9 7D        	lda #<score			; return pointing to score.
0004E9  3  85 62        	sta z80_c
0004EB  3  A9 07        	lda #>score
0004ED  3  85 63        	sta z80_b
0004EF  3  60           	rts
0004F0  3               tidyu1:
0004F0  3  A0 05        	ldy #5
0004F2  3               tidyu3:
0004F2  3  B9 7D 07     	lda score,y			; score.
0004F5  3  99 83 07     	sta hiscor,y			; high score.
0004F8  3  88           	dey
0004F9  3  10 F7        	bpl tidyu3 			; copy score to high score.
0004FB  3               evnewh:
0004FB  3  20 C5 1E     	jsr evnt19			; new high score event.
0004FE  3  4C E7 04     	jmp tidyu0			; tidy up.
000501  3               
000501  3               ;--------------------------------------------------
000501  3               ; Restart event.
000501  3               ;--------------------------------------------------
000501  3               
000501  3               rsevt:
000501  3  A9 97        	lda #<ssprit 			; default to spare element in table.
000503  3  85 68        	sta z80_x
000505  3  A9 17        	lda #>ssprit
000507  3  85 69        	sta z80_i
000509  3               evrs:
000509  3  4C 0D 1E     	jmp evnt14	 		; call restart event.
00050C  3               
00050C  3               ;------------------------------------------------------------------
00050C  3               ; Copy number passed in a to string position bc, right-justified.
00050C  3               ;
00050C  3               ; Input:
00050C  3               ;  A  = number
00050C  3               ;  BC = string address
00050C  3               ;
00050C  3               ; Output:
00050C  3               ;  BC = string with number
00050C  3               ;-----------------------------------------------------------------
00050C  3               
00050C  3               num2ch:
00050C  3  85 65        	sta z80_d		; Save number
00050E  3               
00050E  3  A9 00        	lda #0
000510  3  8D 53 05     	sta flag
000513  3               
000513  3  A2 64        	ldx #100		; hundreds column.
000515  3  86 64        	stx z80_e
000517  3  20 28 05     	jsr numdg		; show digit.
00051A  3               
00051A  3  A2 0A        	ldx #10			; tens column.
00051C  3  86 64        	stx z80_e
00051E  3  20 28 05     	jsr numdg		; show digit.
000521  3               
000521  3  EE 53 05     	inc flag
000524  3  A2 01        	ldx #1			; units column.
000526  3  86 64        	stx z80_e
000528  3               numdg:
000528  3  A9 30        	lda #48			; clear digit.
00052A  3  85 61        	sta z80_a
00052C  3               numdg1:
00052C  3  A5 65        	lda z80_d
00052E  3  C5 64        	cmp z80_e
000530  3  90 0F        	bcc numdg0		; nothing to show.
000532  3  38           	sec
000533  3  A5 65        	lda z80_d
000535  3  E5 64        	sbc z80_e		; subtract from column.
000537  3  85 65        	sta z80_d
000539  3  E6 61        	inc z80_a		; increment digit.
00053B  3  EE 53 05     	inc flag
00053E  3  4C 2C 05     	jmp numdg1		; repeat until column is zero.
000541  3               numdg0:
000541  3  A0 00        	ldy #0
000543  3  A5 61        	lda z80_a
000545  3  91 62        	sta (z80_bc),y		; write digit to buffer.
000547  3  AD 53 05     	lda flag
00054A  3  F0 06        	beq :+
00054C  3  E6 62        	inc z80_c		; next buffer position.
00054E  3  D0 02        	bne :+
000550  3  E6 63        	inc z80_b
000552  3               :
000552  3  60           	rts
000553  3               
000553  3  00           flag:	.byte 0
000554  3               
000554  3               ;---------------------------------------------------------
000554  3               ; Reset score to "000000"
000554  3               ;---------------------------------------------------------
000554  3               
000554  3               inisc:
000554  3  A9 30        	lda #'0'
000556  3  A2 05        	ldx #5			; digits to initialise.
000558  3               inisc0:
000558  3  9D 7D 07     	sta score,x 		; write zero digit.
00055B  3  CA           	dex			; next column.
00055C  3  10 FA        	bpl inisc0		; repeat for all digits.
00055E  3               
00055E  3  60           	rts
00055F  3               
00055F  3               ;-----------------------------------------------------
00055F  3               ; Multiply h by d and return in hl.
00055F  3               ;
00055F  3               ; Input:
00055F  3               ;  H = first number
00055F  3               ;  D = second number
00055F  3               ;
00055F  3               ; Output:
00055F  3               ;  HL = result H x D
00055F  3               ;-----------------------------------------------------
00055F  3               
00055F  3               imul:
00055F  3  A5 65        	lda z80_d		; HL = H * D
000561  3  85 64        	sta z80_e
000563  3  A5 67        	lda z80_h
000565  3  85 62        	sta z80_c		; make c first multiplier.
000567  3               imul0:
000567  3  A9 00        	lda #0			; zeroise total.
000569  3  85 66        	sta z80_l
00056B  3  85 67        	sta z80_h
00056D  3               
00056D  3  A5 67        	lda z80_h
00056F  3  85 65        	sta z80_d		; zeroise high byte.
000571  3               
000571  3  A9 08        	lda #8			; repeat 8 times.
000573  3  85 63        	sta z80_b
000575  3               imul1:
000575  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
000577  3  90 0E        	bcc imul2		; wasn't set.
000579  3  18           	clc			; bit was set, so add de.
00057A  3  A5 66        	lda z80_l
00057C  3  65 64        	adc z80_e
00057E  3  85 66        	sta z80_l
000580  3  A5 67        	lda z80_h
000582  3  65 65        	adc z80_d
000584  3  85 67        	sta z80_h
000586  3  18           	clc 			; reset carry.
000587  3               imul2:
000587  3  06 64        	asl z80_e 		; shift de 1 bit left.
000589  3  26 65        	rol z80_d
00058B  3  C6 63        	dec z80_b
00058D  3  D0 E6        	bne imul1		; repeat 8 times.
00058F  3               
00058F  3  60           	rts
000590  3               
000590  3               ;-----------------------------------------------
000590  3               ; Divide d by e and return in d, remainder in a.
000590  3               ;
000590  3               ; Input:
000590  3               ;  D = first number
000590  3               ;  E = second number
000590  3               ;
000590  3               ; Output:
000590  3               ;  D = result D/E
000590  3               ;  A = remainder
000590  3               ;-----------------------------------------------
000590  3               
000590  3               idiv:
000590  3  A9 00        	lda #0
000592  3  A0 08        	ldy #8		 	; bits to shift.
000594  3  06 65        	asl z80_d
000596  3               idiv0:
000596  3  2A           	rol a 			; multiply d by 2.
000597  3  C5 64        	cmp z80_e 		; test if e is smaller.
000599  3  90 02        	bcc idiv1		; e is greater, no division this time.
00059B  3  E5 64        	sbc z80_e		; subtract it.
00059D  3               idiv1:
00059D  3  26 65        	rol z80_d		; rotate into d.
00059F  3  88           	dey
0005A0  3  D0 F4        	bne idiv0		; repeat
0005A2  3  60           	rts
0005A3  3               
0005A3  3               ;---------------------------------------------------
0005A3  3               ; Play AY sound effect
0005A3  3               ;---------------------------------------------------
0005A3  3               
0005A3  3               plsnd:
0005A3  3  60           	rts
0005A4  3               
0005A4  3               ;---------------------------------------------------
0005A4  3               ; Objects handling.
0005A4  3               ; 32 bytes for image
0005A4  3               ; 3 for room, y and x
0005A4  3               ; 3 for starting room, y and x.
0005A4  3               ; 254 = disabled.
0005A4  3               ; 255 = object in player"s pockets.
0005A4  3               ;---------------------------------------------------
0005A4  3               
0005A4  3               ;---------------------------------------------------
0005A4  3               ; Show items present.
0005A4  3               ;---------------------------------------------------
0005A4  3               
0005A4  3               shwob:
0005A4  3  A9 43        	lda #<objdta 			; objects table.
0005A6  3  85 66        	sta z80_l
0005A8  3  A9 4C        	lda #>objdta
0005AA  3  85 67        	sta z80_h
0005AC  3               
0005AC  3  AD 39 02     	lda numob 			; number of objects in the game.
0005AF  3  8D 73 11     	sta sprcnt
0005B2  3               shwob0:
0005B2  3  A0 20        	ldy #32 			; distance to room number.
0005B4  3  B1 66        	lda (z80_hl),y 			; same as an item?
0005B6  3  CD 3E 02     	cmp scno 			; current location.
0005B9  3  D0 03        	bne :+
0005BB  3  20 D1 05     	jsr dobj 			; yes, display object.
0005BE  3               :
0005BE  3  18           	clc
0005BF  3  A5 66        	lda z80_l
0005C1  3  69 26        	adc #38 			; distance to next item.
0005C3  3  85 66        	sta z80_l
0005C5  3  A5 67        	lda z80_h
0005C7  3  69 00        	adc #0
0005C9  3  85 67        	sta z80_h	 		; point to it.
0005CB  3  CE 73 11     	dec sprcnt
0005CE  3  D0 E2        	bne shwob0 			; repeat for others.
0005D0  3  60           	rts
0005D1  3               
0005D1  3               ;---------------------------------------------------
0005D1  3               ; Display object.
0005D1  3               ; hl must point to object's start address.
0005D1  3               ;
0005D1  3               ; Input:
0005D1  3               ;  HL = object address
0005D1  3               ;---------------------------------------------------
0005D1  3               
0005D1  3               dobj:
0005D1  3  A0 21        	ldy #33
0005D3  3  B1 66        	lda (z80_hl),y 			; point to y.
0005D5  3  8D 64 02     	sta dispy
0005D8  3  C8           	iny
0005D9  3  B1 66        	lda (z80_hl),y 			; point to x.
0005DB  3  8D 63 02     	sta dispx
0005DE  3               dobj1:
0005DE  3  4C C1 09     	jmp sprite 			; draw this sprite.
0005E1  3               
0005E1  3               ;--------------------------------------
0005E1  3               ; Remove an object.
0005E1  3               ;
0005E1  3               ; Input:
0005E1  3               ;  A = object number
0005E1  3               ;--------------------------------------
0005E1  3               
0005E1  3               remob:
0005E1  3  CD 39 02     	cmp numob			; number of objects in game.
0005E4  3  90 01        	bcc :+				; are we checking past the end?
0005E6  3  60           	rts				; yes, can't get non-existent item.
0005E7  3               :
0005E7  3  48           	pha				; remember object.
0005E8  3  20 F6 05     	jsr getob			; pick it up if we haven't already got it.
0005EB  3  68           	pla				; retrieve object number.
0005EC  3  20 28 06     	jsr gotob			; get its address.
0005EF  3  A9 FE        	lda #254
0005F1  3  A0 20        	ldy #32
0005F3  3  91 66        	sta (z80_hl),y			; remove it.
0005F5  3  60           	rts
0005F6  3               
0005F6  3               ;---------------------------------------------------
0005F6  3               ; Pick up object number held in the accumulator.
0005F6  3               ;
0005F6  3               ; Input:
0005F6  3               ;  A = object number
0005F6  3               ;---------------------------------------------------
0005F6  3               
0005F6  3               getob:
0005F6  3  CD 39 02     	cmp numob 		; number of objects in game.
0005F9  3  90 01        	bcc :+			; are we checking past the end?
0005FB  3  60           	rts			; yes, can't get non-existent item.
0005FC  3               :
0005FC  3  20 28 06     	jsr gotob 		; check if we already have it.
0005FF  3  C9 FF        	cmp #255
000601  3  D0 01        	bne :+
000603  3  60           	rts			; we already do.
000604  3               :
000604  3  A0 20        	ldy #32
000606  3  B1 66        	lda (z80_hl),y		; is it on this screen?
000608  3  CD 3E 02     	cmp scno 		; current screen.
00060B  3  D0 16        	bne getob0		; not on screen, so nothing to delete.
00060D  3               
00060D  3  A9 FF        	lda #255
00060F  3  91 66        	sta (z80_hl),y		; pick it up.
000611  3  C8           	iny 			; point to y coord.
000612  3               getob1:
000612  3  A0 21        	ldy #33
000614  3  B1 66        	lda (z80_hl),y		; y coord.
000616  3  8D 64 02     	sta dispy
000619  3  A0 22        	ldy #34
00061B  3  B1 66        	lda (z80_hl),y 		; x coord.
00061D  3  8D 63 02     	sta dispx
000620  3  4C DE 05     	jmp dobj1 		; delete object sprite.
000623  3               getob0:
000623  3  A9 FF        	lda #255
000625  3  91 66        	sta (z80_hl),y 		; pick it up.
000627  3  60           	rts
000628  3               
000628  3               ;-----------------------------------------------------------------
000628  3               ; Got object check.
000628  3               ; Call with object in accumulator, returns zero set if in pockets.
000628  3               ;
000628  3               ; Input:
000628  3               ;  A = object number
000628  3               ;-----------------------------------------------------------------
000628  3               
000628  3               gotob:
000628  3  CD 39 02     	cmp numob 		; number of objects in game.
00062B  3  90 03        	bcc :+ 			; are we checking past the end?
00062D  3  4C 34 06     	jmp gotob0 		; yes, we can't have a non-existent object.
000630  3               :
000630  3  20 39 06     	jsr findob		; find the object.
000633  3               gotob1:
000633  3  60           	rts
000634  3               
000634  3               gotob0:
000634  3  A9 FE        	lda #254 		; missing.
000636  3  4C 33 06     	jmp gotob1
000639  3               
000639  3               findob:
000639  3  48           	pha			; save object number
00063A  3  A9 43        	lda #<objdta 		; objects.
00063C  3  85 66        	sta z80_l
00063E  3  A9 4C        	lda #>objdta
000640  3  85 67        	sta z80_h
000642  3  68           	pla			; retreive object number
000643  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
000645  3  AA           	tax 			; loop counter
000646  3               fndob2:
000646  3  18           	clc
000647  3  A5 66        	lda z80_l
000649  3  69 26        	adc #38 		; size of each object.
00064B  3  85 66        	sta z80_l
00064D  3  90 02        	bcc :+
00064F  3  E6 67        	inc z80_h
000651  3               :
000651  3  CA           	dex 			; repeat until we find address.
000652  3  D0 F2        	bne fndob2
000654  3               fndob1:
000654  3  A0 20        	ldy #32			; distance to room it's in.
000656  3  B1 66        	lda (z80_hl),y		; fetch status.
000658  3  60           	rts
000659  3               
000659  3               ;---------------------------------------------
000659  3               ; Drop object number at (dispx, dispy).
000659  3               ;
000659  3               ; Input:
000659  3               ;  A = object number
000659  3               ;---------------------------------------------
000659  3               
000659  3               drpob:
000659  3  CD 39 02     	cmp numob 		; are we checking past the end?
00065C  3  90 01        	bcc :+
00065E  3  60           	rts			; yes, can't drop non-existent item.
00065F  3               :
00065F  3  20 28 06     	jsr gotob		; make sure object is in inventory.
000662  3  CD 3E 02     	cmp scno		; already on this screen?
000665  3  D0 01        	bne :+
000667  3  60           	rts			; yes, nothing to do.
000668  3               :
000668  3  A0 20        	ldy #32
00066A  3  AD 3E 02     	lda scno
00066D  3  91 66        	sta (z80_hl),y		; bring onto screen.
00066F  3  AD 64 02     	lda dispy		; sprite y coordinate.
000672  3  C8           	iny 
000673  3  91 66        	sta (z80_hl),y		; point to object y.
000675  3  AD 63 02     	lda dispx 		; sprite x coordinate.
000678  3  C8           	iny
000679  3  91 66        	sta (z80_hl),y 		; point to object x
00067B  3  4C D1 05     	jmp dobj		; draw the object sprite.
00067E  3               
00067E  3               ;-----------------------------------------------
00067E  3               ; Seek objects at sprite position.
00067E  3               ;
00067E  3               ; Output:
00067E  3               ;  A = object number, if not found A=255
00067E  3               ;-----------------------------------------------
00067E  3               
00067E  3               skobj:
00067E  3  A9 43        	lda #<objdta 		; pointer to objects.
000680  3  85 66        	sta z80_l
000682  3  A9 4C        	lda #>objdta
000684  3  85 67        	sta z80_h
000686  3               
000686  3  AD 39 02     	lda numob 		; number of objects in game.
000689  3  85 63        	sta z80_b 		; set up the loop counter.
00068B  3               skobj0:
00068B  3  AD 3E 02     	lda scno		; current room number.
00068E  3  A0 20        	ldy #32
000690  3  D1 66        	cmp (z80_hl),y		; is object in here?
000692  3  D0 03        	bne :+
000694  3  20 A9 06     	jsr skobj1		; yes, check coordinates.
000697  3               :
000697  3  18           	clc			; point to next object in table.
000698  3  A5 66        	lda z80_l
00069A  3  69 26        	adc #38			; size of each object.
00069C  3  85 66        	sta z80_l
00069E  3  90 02        	bcc :+
0006A0  3  E6 67        	inc z80_h
0006A2  3               :
0006A2  3  C6 63        	dec z80_b
0006A4  3  D0 E5        	bne skobj0		; repeat for all objects.
0006A6  3               
0006A6  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
0006A8  3  60           	rts
0006A9  3               
0006A9  3               skobj1:
0006A9  3  A0 21        	ldy #33			; point to y coordinate.
0006AB  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
0006AD  3  38           	sec
0006AE  3  A0 08        	ldy #8
0006B0  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
0006B2  3  18           	clc
0006B3  3  69 0F        	adc #15			; add sprite height minus one.
0006B5  3  C9 1F        	cmp #31			; within range?
0006B7  3  90 03        	bcc :+
0006B9  3  4C D7 06     	jmp skobj2		; no, ignore object.
0006BC  3               :
0006BC  3  A0 22        	ldy #34			; point to x coordinate now.
0006BE  3  B1 66        	lda (z80_hl),y 		; get coordinate.
0006C0  3  38           	sec
0006C1  3  A0 09        	ldy #9
0006C3  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
0006C5  3  18           	clc			; add sprite width minus one.
0006C6  3  69 0F        	adc #15
0006C8  3  C9 1F        	cmp #31			; within range?
0006CA  3  90 03        	bcc :+
0006CC  3  4C D7 06     	jmp skobj2		; no, ignore object.
0006CF  3               :
0006CF  3  68           	pla			; remove return address from stack.
0006D0  3  68           	pla
0006D1  3               
0006D1  3  AD 39 02     	lda numob 		; objects in game.
0006D4  3  38           	sec
0006D5  3  E5 63        	sbc z80_b		; subtract loop counter.
0006D7  3               skobj2:
0006D7  3  60           	rts			; accumulator now points to object.
0006D8  3               
0006D8  3               
0006D8  3               ;---------------------------------------------------------------------
0006D8  3               ; Spawn a new sprite.
0006D8  3               ;---------------------------------------------------------------------
0006D8  3               
0006D8  3               spawn:
0006D8  3  A9 CB        	lda #<sprtab		; sprite table.
0006DA  3  85 66        	sta z80_l
0006DC  3  A9 16        	lda #>sprtab
0006DE  3  85 67        	sta z80_h
0006E0  3               numsp1:
0006E0  3  A9 0C        	lda #NUMSPR		; number of sprites.
0006E2  3  8D 79 07     	sta spcnt
0006E5  3               spaw0:
0006E5  3  A0 00        	ldy #0
0006E7  3  B1 66        	lda (z80_hl),y		; get sprite type.
0006E9  3  C9 FF        	cmp #255		; is it an unused slot?
0006EB  3  F0 10        	beq spaw1 		; yes, we can use this one.
0006ED  3               
0006ED  3  18           	clc 			; point to next sprite in table.
0006EE  3  A5 66        	lda z80_l
0006F0  3  69 11        	adc #TABSIZ		; size of each entry.
0006F2  3  85 66        	sta z80_l
0006F4  3  90 02        	bcc :+
0006F6  3  E6 67        	inc z80_h
0006F8  3               :
0006F8  3  CE 79 07     	dec spcnt		; one less iteration.
0006FB  3  D0 E8        	bne spaw0		; keep going until we find a slot.
0006FD  3               
0006FD  3               ; Didn't find one but drop through and set up a dummy sprite instead.
0006FD  3               
0006FD  3               spaw1:
0006FD  3  A5 69        	lda z80_i		; address of original sprite.
0006FF  3  48           	pha
000700  3  A5 68        	lda z80_x
000702  3  48           	pha
000703  3               
000703  3  A5 66        	lda z80_l		; store spawned sprite address.
000705  3  8D 7A 07     	sta spptr
000708  3  A5 67        	lda z80_h
00070A  3  8D 7B 07     	sta spptr+1
00070D  3               
00070D  3  A5 62        	lda z80_c
00070F  3  A0 00        	ldy #0
000711  3  91 66        	sta (z80_hl),y 		; set the type.
000713  3  A0 05        	ldy #5
000715  3  91 66        	sta (z80_hl),y		; copy
000717  3               
000717  3  A5 63        	lda z80_b
000719  3  A0 01        	ldy #1
00071B  3  91 66        	sta (z80_hl),y		; set the image.
00071D  3  A0 06        	ldy #6
00071F  3  91 66        	sta (z80_hl),y		; copy
000721  3               
000721  3  A9 00        	lda #0 			; frame zero.
000723  3  A0 02        	ldy #2
000725  3  91 66        	sta (z80_hl),y		; set frame.
000727  3  A0 07        	ldy #7
000729  3  91 66        	sta (z80_hl),y		; copy
00072B  3               
00072B  3  A0 08        	ldy #8
00072D  3  B1 68        	lda (z80_ix),y 		; x coordinate.
00072F  3  A0 03        	ldy #3
000731  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
000733  3  A0 08        	ldy #8
000735  3  91 66        	sta (z80_hl),y		; copy
000737  3               
000737  3  A0 09        	ldy #9
000739  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00073B  3  A0 04        	ldy #4
00073D  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
00073F  3  A0 09        	ldy #9
000741  3  91 66        	sta (z80_hl),y		; copy
000743  3               
000743  3  A0 0A        	ldy #10			; direction of original.
000745  3  B1 68        	lda (z80_ix),y
000747  3  91 66        	sta (z80_hl),y		; direction
000749  3               
000749  3  A9 00        	lda #0
00074B  3  A0 0B        	ldy #11
00074D  3  91 66        	sta (z80_hl),y		; reset parameter.
00074F  3  C8           	iny
000750  3  91 66        	sta (z80_hl),y		; reset parameter.
000752  3  C8           	iny
000753  3  91 66        	sta (z80_hl),y		; reset parameter.
000755  3  C8           	iny
000756  3  91 66        	sta (z80_hl),y		; reset parameter.
000758  3               rtssp:
000758  3  AD 7A 07     	lda spptr		; address of new sprite.
00075B  3  85 68        	sta z80_x
00075D  3  AD 7B 07     	lda spptr+1
000760  3  85 69        	sta z80_i
000762  3               evis1:
000762  3  20 36 1D     	jsr evnt09 		; call sprite initialisation event.
000765  3               
000765  3  AD 7A 07     	lda spptr 		; address of new sprite.
000768  3  85 68        	sta z80_x
00076A  3  AD 7B 07     	lda spptr+1
00076D  3  85 69        	sta z80_i
00076F  3  20 08 12     	jsr sspria 		; display the new sprite.
000772  3               
000772  3  68           	pla			; address of original sprite.
000773  3  85 68        	sta z80_x
000775  3  68           	pla
000776  3  85 69        	sta z80_i
000778  3               
000778  3  60           	rts
000779  3               
000779  3  00           spcnt:	.byte 0
00077A  3  00 00        spptr:	.word 0			; spawned sprite pointer.
00077C  3  00           seed:	.byte 0			; seed for random numbers.
00077D  3  30 30 30 30  score:	.byte "000000"		; player"s score.
000781  3  30 30        
000783  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
000787  3  30 30        
000789  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
00078D  3  30 30        
00078F  3  00 80        grbase:	.word ScreenAddr	; graphics base address.
000791  3               
000791  3               ;----------------------------------------------------
000791  3               ; Check y-pos
000791  3               ;----------------------------------------------------
000791  3               
000791  3               checkx:
000791  3  AD 64 02     	lda dispy		; y position.
000794  3  C9 18        	cmp #24			; off screen?
000796  3  B0 01        	bcs :+
000798  3  60           	rts			; no, it's okay.
000799  3               :
000799  3  68           	pla			; remove return address from stack.
00079A  3  85 66        	sta z80_l
00079C  3  68           	pla
00079D  3  85 67        	sta z80_h
00079F  3  60           	rts
0007A0  3               
0007A0  3               ;-----------------------------------------------
0007A0  3               ; Displays the current high score.
0007A0  3               ;-----------------------------------------------
0007A0  3               
0007A0  3               dhisc:
0007A0  3  A9 83        	lda #<hiscor 		; high score text.
0007A2  3  85 66        	sta z80_l
0007A4  3  A9 07        	lda #>hiscor
0007A6  3  85 67        	sta z80_h
0007A8  3  4C B3 07     	jmp dscor1		; check in printable range then show 6 digits.
0007AB  3               
0007AB  3               ;------------------------------------------------------
0007AB  3               ; Displays the current score.
0007AB  3               ;------------------------------------------------------
0007AB  3               
0007AB  3               dscor:
0007AB  3  A9 7D        	lda #<score		; score text.
0007AD  3  85 66        	sta z80_l
0007AF  3  A9 07        	lda #>score
0007B1  3  85 67        	sta z80_h
0007B3  3               dscor1:
0007B3  3  20 96 0F     	jsr preprt		; set up font and print position.
0007B6  3  20 91 07     	jsr checkx		; make sure we're in a printable range.
0007B9  3               
0007B9  3  A9 06        	lda #6			; digits to display.
0007BB  3  85 63        	sta z80_b
0007BD  3  AD D8 0E     	lda prtmod		; get print mode.
0007C0  3  F0 03        	beq :+			; standard size text?
0007C2  3  4C E6 07     	jmp bscor0		; no, show double-height.
0007C5  3               :
0007C5  3               dscor0:
0007C5  3  A0 00        	ldy #0
0007C7  3  B1 66        	lda (z80_hl),y 		; fetch character.
0007C9  3  20 11 09     	jsr pchar 		; display character.
0007CC  3  EE 63 02     	inc dispx		; move along x coordinate
0007CF  3               
0007CF  3  E6 66        	inc z80_l		; next score column.
0007D1  3  D0 02        	bne :+
0007D3  3  E6 67        	inc z80_h
0007D5  3               :
0007D5  3  C6 63        	dec z80_b
0007D7  3  D0 EC        	bne dscor0 		; repeat for all digits.
0007D9  3               dscor2:
0007D9  3  AD 63 02     	lda dispx 		; set up display coordinates.
0007DC  3  8D 58 02     	sta charx
0007DF  3  AD 64 02     	lda dispy
0007E2  3  8D 59 02     	sta chary
0007E5  3  60           	rts
0007E6  3               
0007E6  3               ;------------------------------------------------------
0007E6  3               ; Displays the current score in double-height characters.
0007E6  3               ;
0007E6  3               ; Input:
0007E6  3               ;  B  = digit number
0007E6  3               ;  HL = score string
0007E6  3               ;------------------------------------------------------
0007E6  3               
0007E6  3               bscor0:
0007E6  3  A0 00        	ldy #0
0007E8  3               
0007E8  3  B1 66        	lda (z80_hl),y 		; fetch character.
0007EA  3  20 10 0F     	jsr bchar 		; display big char.
0007ED  3               
0007ED  3  E6 66        	inc z80_l 		; next score column.
0007EF  3  D0 02        	bne :+
0007F1  3  E6 67        	inc z80_h
0007F3  3               :
0007F3  3  C6 63        	dec z80_b
0007F5  3  F0 03        	beq :+
0007F7  3  4C E6 07     	jmp bscor0 		; repeat for all digits.
0007FA  3               :
0007FA  3  4C D9 07     	jmp dscor2 		; tidy up line and column variables.
0007FD  3               
0007FD  3               ;-----------------------------------------------------
0007FD  3               ; Adds number in the hl pair to the score.
0007FD  3               ;-----------------------------------------------------
0007FD  3               
0007FD  3               addsc:
0007FD  3  A9 7E        	lda #<(score+1) 	; ten thousands column.
0007FF  3  85 64        	sta z80_e
000801  3  A9 07        	lda #>(score+1)
000803  3  85 65        	sta z80_d
000805  3  A9 10        	lda #<10000		; amount to add each time.
000807  3  85 62        	sta z80_c
000809  3  A9 27        	lda #>10000
00080B  3  85 63        	sta z80_b
00080D  3  20 51 08     	jsr incsc		; add to score.
000810  3               
000810  3  E6 64        	inc z80_e		; thousands column.
000812  3  D0 02        	bne :+
000814  3  E6 65        	inc z80_d
000816  3               :
000816  3  A9 E8        	lda #<1000		; amount to add each time.
000818  3  85 62        	sta z80_c
00081A  3  A9 03        	lda #>1000
00081C  3  85 63        	sta z80_b
00081E  3  20 51 08     	jsr incsc 		; add to score.
000821  3               
000821  3  E6 64        	inc z80_e		; hundreds column.
000823  3  D0 02        	bne :+
000825  3  E6 65        	inc z80_d
000827  3               :
000827  3  A9 64        	lda #<100		; amount to add each time.
000829  3  85 62        	sta z80_c
00082B  3  A9 00        	lda #>100
00082D  3  85 63        	sta z80_b
00082F  3  20 51 08     	jsr incsc		; add to score.
000832  3               
000832  3  E6 64        	inc z80_e 		; tens column.
000834  3  D0 02        	bne :+
000836  3  E6 65        	inc z80_d
000838  3               :
000838  3  A9 0A        	lda #<10		; amount to add each time.
00083A  3  85 62        	sta z80_c
00083C  3  A9 00        	lda #>10
00083E  3  85 63        	sta z80_b
000840  3  20 51 08     	jsr incsc 		; add to score.
000843  3               
000843  3  E6 64        	inc z80_e		; units column.
000845  3  D0 02        	bne :+
000847  3  E6 65        	inc z80_d
000849  3               :
000849  3  A9 01        	lda #<1			; units.
00084B  3  85 62        	sta z80_c
00084D  3  A9 00        	lda #>1
00084F  3  85 63        	sta z80_b
000851  3               incsc:
000851  3  A5 67        	lda z80_h		; store amount to add.
000853  3  48           	pha
000854  3  A5 66        	lda z80_l
000856  3  48           	pha
000857  3               
000857  3  38           	sec			; subtract from amount to add.
000858  3  A5 66        	lda z80_l
00085A  3  E5 62        	sbc z80_c
00085C  3  85 66        	sta z80_l
00085E  3  A5 67        	lda z80_h
000860  3  E5 63        	sbc z80_b
000862  3  85 67        	sta z80_h
000864  3  90 14        	bcc incsc0		; too much, restore value.
000866  3               
000866  3  68           	pla			; delete the previous amount from the stack.
000867  3  68           	pla
000868  3               
000868  3  A5 65        	lda z80_d 		; store column position.
00086A  3  48           	pha
00086B  3  A5 64        	lda z80_e
00086D  3  48           	pha
00086E  3  20 81 08     	jsr incsc2		; do the increment.
000871  3               
000871  3  68           	pla			; restore column.
000872  3  85 64        	sta z80_e
000874  3  68           	pla
000875  3  85 65        	sta z80_d
000877  3  4C 51 08     	jmp incsc		; repeat until all added.
00087A  3               
00087A  3               incsc0:
00087A  3  68           	pla			; restore previous value.
00087B  3  85 66        	sta z80_l
00087D  3  68           	pla
00087E  3  85 67        	sta z80_h
000880  3  60           	rts
000881  3               incsc2:
000881  3  A0 00        	ldy #0
000883  3  B1 64        	lda (z80_de),y 		; get amount.
000885  3  18           	clc
000886  3  69 01        	adc #1			; add one to column.
000888  3  91 64        	sta (z80_de),y		; write new column total.
00088A  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
00088C  3  B0 01        	bcs :+
00088E  3  60           	rts			; no, carry on.
00088F  3               :
00088F  3  A9 30        	lda #'0'		; make it zero.
000891  3  91 64        	sta (z80_de),y		; write new column total.
000893  3  C6 64        	dec z80_e		; back one column.
000895  3  D0 02        	bne :+
000897  3  C6 65        	dec z80_d
000899  3               :
000899  3  4C 81 08     	jmp incsc2
00089C  3               
00089C  3               ;------------------------------------
00089C  3               ; Add bonus to score and reset bonus
00089C  3               ;------------------------------------
00089C  3               
00089C  3               addbo:
00089C  3  A2 05        	ldx #5			; last digit.
00089E  3  18           	clc			; clear carry.
00089F  3               addbo0:
00089F  3  BD 7D 07     	lda score,x		; get score.
0008A2  3  7D 89 07     	adc bonus,x		; add bonus.
0008A5  3  38           	sec			; 0 to 18.
0008A6  3  E9 30        	sbc #48
0008A8  3  48           	pha
0008A9  3  A9 30        	lda #'0'
0008AB  3  9D 89 07     	sta bonus,x		; zeroise bonus.
0008AE  3  68           	pla
0008AF  3  C9 3A        	cmp #58			; carried?
0008B1  3  B0 07        	bcs addbo2		; no, do next one.
0008B3  3  38           	sec
0008B4  3  E9 0A        	sbc #10			; subtract 10.
0008B6  3  38           	sec
0008B7  3  4C BB 08     	jmp addbo1
0008BA  3               addbo2:
0008BA  3  18           	clc
0008BB  3               addbo1:
0008BB  3  9D 7D 07     	sta score,x		; write new score.
0008BE  3  CA           	dex			; next digit.
0008BF  3  10 DE        	bpl addbo0		; repeat for all 6 digits.
0008C1  3  60           	rts
0008C2  3               
0008C2  3               ;------------------------------------
0008C2  3               ; Swap score and bonus.
0008C2  3               ;------------------------------------
0008C2  3               
0008C2  3               swpsb:
0008C2  3  A2 05        	ldx #5			; digits to add.
0008C4  3               swpsb0:
0008C4  3  BD 7D 07     	lda score,x 		; get score digits.
0008C7  3  48           	pha			; save digit
0008C8  3  BD 89 07     	lda bonus,x 		; get bonus digits.
0008CB  3  9D 7D 07     	sta score,x		; switch score-bonus
0008CE  3  68           	pla
0008CF  3  9D 89 07     	sta bonus,x
0008D2  3  CA           	dex 			; repeat for all 6 digits.
0008D3  3  10 EF        	bpl swpsb0
0008D5  3  60           	rts
0008D6  3               
0008D6  3               ;----------------------------------------------------
0008D6  3               ; Get print address.
0008D6  3               ;----------------------------------------------------
0008D6  3               
0008D6  3               gprad:
0008D6  3  AD 63 02     	lda dispx		; get x
0008D9  3  85 80        	sta scraddr		; store lb address
0008DB  3  AD 64 02     	lda dispy		; get y
0008DE  3  09 80        	ora #$80		; add $80
0008E0  3  85 81        	sta scraddr+1		; store hb address
0008E2  3  60           	rts
0008E3  3               
0008E3  3               ;--------------------------------------------------------------
0008E3  3               ; Get property buffer address of char at (dispx, dispy) in hl.
0008E3  3               ; 
0008E3  3               ; Output:
0008E3  3               ;  buffaddr = bufaddr = MAP + dispy*32 + dispx
0008E3  3               ;--------------------------------------------------------------
0008E3  3               
0008E3  3               pradd:
0008E3  3  AD 64 02     	lda dispy 		; y coordinate.
0008E6  3  85 86        	sta bufaddr
0008E8  3  A9 00        	lda #0
0008EA  3  85 87        	sta bufaddr+1
0008EC  3  06 86        	asl bufaddr  		; multiply char by 32
0008EE  3  26 87        	rol bufaddr+1
0008F0  3  06 86        	asl bufaddr
0008F2  3  26 87        	rol bufaddr+1
0008F4  3  06 86        	asl bufaddr
0008F6  3  26 87        	rol bufaddr+1
0008F8  3  06 86        	asl bufaddr
0008FA  3  26 87        	rol bufaddr+1
0008FC  3  06 86        	asl bufaddr
0008FE  3  26 87        	rol bufaddr+1
000900  3  18           	clc			; add address of MAP graphics.
000901  3  A5 86        	lda bufaddr
000903  3  6D 63 02     	adc dispx
000906  3  69 00        	adc #<MAP
000908  3  85 86        	sta bufaddr
00090A  3  A5 87        	lda bufaddr+1
00090C  3  69 98        	adc #>MAP
00090E  3  85 87        	sta bufaddr+1
000910  3  60           	rts
000911  3               
000911  3               ;----------------------------------------------------
000911  3               ; Display character in A at dispx,dispy.
000911  3               ;
000911  3               ; Input:
000911  3               ;  A 	   = character to print
000911  3               ;----------------------------------------------------
000911  3               
000911  3               pchar:
000911  3  85 82        	sta fntaddr
000913  3  A9 00        	lda #0
000915  3  85 83        	sta fntaddr+1
000917  3  06 82        	asl fntaddr  		; multiply char by 8.
000919  3  26 83        	rol fntaddr+1
00091B  3  06 82        	asl fntaddr
00091D  3  26 83        	rol fntaddr+1
00091F  3  06 82        	asl fntaddr
000921  3  26 83        	rol fntaddr+1
000923  3               
000923  3  A5 82        	lda fntaddr
000925  3  18           	clc
000926  3  6D AA 17     	adc FontPtr
000929  3  85 82        	sta fntaddr		; that's the low byte.
00092B  3  A5 83        	lda fntaddr+1
00092D  3  6D AB 17     	adc FontPtr+1
000930  3  85 83        	sta fntaddr+1		; add displacement.
000932  3               pchark:
000932  3  20 D6 08     	jsr gprad		; get screen address.
000935  3  A2 07        	ldx #7			; lines to write.
000937  3               pchar0:
000937  3  A0 00        	ldy #0
000939  3  B1 82        	lda (fntaddr),y 	; get image byte.
00093B  3  BC 4C 09     	ldy scrtab,x		; Get rowoffset
00093E  3               
00093E  3  49 00        	eor #TxtInvert		; Invert
000940  3               
000940  3  91 80        	sta (scraddr),y 	; copy to screen.
000942  3  E6 82        	inc fntaddr		; next image byte.
000944  3  D0 02        	bne :+
000946  3  E6 83        	inc fntaddr+1
000948  3               :
000948  3  CA           	dex			; next screen row down.
000949  3  10 EC        	bpl pchar0		; repeat.
00094B  3  60           	rts
00094C  3               
00094C  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
000950  3  60 40 20 00  
000954  3               
000954  3               ;----------------------------------------------
000954  3               ; Print attributes, properties and pixels.
000954  3               ;
000954  3               ; Input:
000954  3               ;  A	= tile number
000954  3               ;----------------------------------------------
000954  3               
000954  3               pattr:
000954  3  85 63        	sta z80_b		; store cell in b register for now.
000956  3  AA           	tax
000957  3  BD 74 21     	lda bprop,x 		; block properties.
00095A  3  85 62        	sta z80_c
00095C  3  20 E3 08     	jsr pradd 		; get property buffer address.
00095F  3  A5 62        	lda z80_c
000961  3  A0 00        	ldy #0
000963  3  91 86        	sta (bufaddr),y 	; write property.
000965  3  A5 63        	lda z80_b 		; restore cell.
000967  3               
000967  3               ; Print attributes, no properties.
000967  3               
000967  3               panp:
000967  3  85 64        	sta z80_e		; displacement in e.
000969  3  A9 00        	lda #0
00096B  3  85 65        	sta z80_d		; no high byte.
00096D  3  06 64        	asl z80_e  		; multiply char by 8.
00096F  3  26 65        	rol z80_d
000971  3  06 64        	asl z80_e
000973  3  26 65        	rol z80_d
000975  3  06 64        	asl z80_e
000977  3  26 65        	rol z80_d
000979  3  18           	clc
00097A  3  A5 64        	lda z80_e
00097C  3  69 94        	adc #<chgfx 		; address of graphics.
00097E  3  85 84        	sta tileaddr
000980  3  A5 65        	lda z80_d
000982  3  69 20        	adc #>chgfx
000984  3  85 85        	sta tileaddr+1
000986  3  20 D6 08     	jsr gprad 		; get screen address.
000989  3  A2 07        	ldx #7			; number of pixel rows to write.
00098B  3               panp0:
00098B  3  A0 00        	ldy #0
00098D  3  B1 84        	lda (tileaddr),y 	; get image byte.
00098F  3  49 00        	eor #TxtInvert		; Invert
000991  3  BC 4C 09     	ldy scrtab,x
000994  3  91 80        	sta (scraddr),y 	; copy to screen.
000996  3  E6 84        	inc tileaddr 		; next image byte.
000998  3  D0 02        	bne :+
00099A  3  E6 85        	inc tileaddr+1
00099C  3               :
00099C  3  CA           	dex	 		; repeat for 8 pixel rows.
00099D  3  10 EC        	bpl panp0
00099F  3  EE 63 02     	inc dispx 		; move along one.
0009A2  3  EE 58 02     	inc charx
0009A5  3  60           	rts
0009A6  3               
0009A6  3               ;----------------------------------------------
0009A6  3               ; Print character pixels, no more.
0009A6  3               ;
0009A6  3               ; Input:
0009A6  3               ;  A	= character to print
0009A6  3               ;----------------------------------------------
0009A6  3               
0009A6  3               pchr:
0009A6  3  20 11 09     	jsr pchar 		; show character in accumulator.
0009A9  3  EE 63 02     	inc dispx		; move along one.
0009AC  3  60           	rts
0009AD  3               
0009AD  3               ;----------------------------------------------------
0009AD  3               ; Shifter sprite routine for objects.
0009AD  3               ;----------------------------------------------------
0009AD  3               
0009AD  3               sprit7:
0009AD  3  A5 63        	lda z80_b
0009AF  3  F0 0F        	beq sprit0
0009B1  3  85 61        	sta z80_a
0009B3  3               sprit3:
0009B3  3  4E 44 0A     	lsr spr			; shift into position.
0009B6  3  6E 45 0A     	ror spr+1
0009B9  3  6E 46 0A     	ror spr+2
0009BC  3  C6 61        	dec z80_a		; one less iteration.
0009BE  3  D0 F3        	bne sprit3
0009C0  3               sprit0:
0009C0  3  60           	rts 			; now apply to screen.
0009C1  3               
0009C1  3               ;----------------------------------------------------
0009C1  3               ; Draw sprite
0009C1  3               ;----------------------------------------------------
0009C1  3               
0009C1  3               sprite:
0009C1  3  8E 47 0A     	stx xtmp		; Save X-reg
0009C4  3  20 E5 11     	jsr scadd 		; get screen address in scraddr.
0009C7  3               
0009C7  3  AD 63 02     	lda dispx 		; x position.
0009CA  3  29 07        	and #7 			; position straddling cells.
0009CC  3  85 63        	sta z80_b		; store in b register.
0009CE  3               
0009CE  3  A5 66        	lda z80_l		; store sprite graphic address.
0009D0  3  8D E3 09     	sta sprit1+1
0009D3  3  8D EA 09     	sta sprit2+1
0009D6  3  A5 67        	lda z80_h
0009D8  3  8D E4 09     	sta sprit1+2
0009DB  3  8D EB 09     	sta sprit2+2
0009DE  3               
0009DE  3  A2 00        	ldx #0			; pixel height.
0009E0  3  A0 00        	ldy #0
0009E2  3               sprit1:
0009E2  3  BD 43 4C     	lda objdta,x		; fetch first byte.
0009E5  3  8D 44 0A     	sta spr
0009E8  3  E8           	inx
0009E9  3               sprit2:
0009E9  3  BD 43 4C     	lda objdta,x
0009EC  3  8D 45 0A     	sta spr+1
0009EF  3               
0009EF  3  A9 00        	lda #0
0009F1  3  8D 46 0A     	sta spr+2
0009F4  3  20 AD 09     	jsr sprit7		; shift sprite
0009F7  3               
0009F7  3  CA           	dex
0009F8  3  AD 44 0A     	lda spr			; fetch graphic.
0009FB  3  BC 24 0A     	ldy spritetab,x
0009FE  3  51 80        	eor (scraddr),y		; merge with screen image.
000A00  3  91 80        	sta (scraddr),y		; write to screen.
000A02  3  E8           	inx			; next screen byte.
000A03  3               
000A03  3  AD 45 0A     	lda spr+1		; fetch graphic.
000A06  3  BC 24 0A     	ldy spritetab,x
000A09  3  51 80        	eor (scraddr),y		; merge with screen image.
000A0B  3  91 80        	sta (scraddr),y		; write to screen.
000A0D  3  C8           	iny
000A0E  3               
000A0E  3  AD 46 0A     	lda spr+2		; fetch graphic.
000A11  3  51 80        	eor (scraddr),y		; merge with screen image.
000A13  3  91 80        	sta (scraddr),y		; write to screen.
000A15  3               
000A15  3  E8           	inx			; next source byte.
000A16  3  E0 10        	cpx #16
000A18  3  D0 02        	bne :+
000A1A  3  E6 81        	inc scraddr+1
000A1C  3               :
000A1C  3  E0 20        	cpx #32
000A1E  3  D0 C2        	bne sprit1		; repeat
000A20  3               
000A20  3  AE 47 0A     	ldx xtmp		; retreive X-reg
000A23  3  60           	rts
000A24  3               
000A24  3               spritetab:
000A24  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
000A28  3  40 41 60 61  
000A2C  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
000A30  3  C0 C1 E0 E1  
000A34  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
000A38  3  40 41 60 61  
000A3C  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
000A40  3  C0 C1 E0 E1  
000A44  3               
000A44  3  00 00 00     spr:	.byte 0,0,0
000A47  3               
000A47  3  00           xtmp:	.byte 0
000A48  3               
000A48  3               ;-----------------------------------------------------------
000A48  3               ; Get room address.
000A48  3               ;-----------------------------------------------------------
000A48  3               
000A48  3               groom:
000A48  3  AE 3E 02     	ldx scno 		; screen number.
000A4B  3  A0 00        	ldy #0
000A4D  3               groomx:
000A4D  3  A9 26        	lda #<scdat 		; pointer to screens.
000A4F  3  85 66        	sta z80_l
000A51  3  A9 2E        	lda #>scdat
000A53  3  85 67        	sta z80_h
000A55  3               groom1:
000A55  3  E0 00        	cpx #0			; is it the first one?
000A57  3  F0 15        	beq groom0 		; no more screens to skip.
000A59  3               
000A59  3  18           	clc
000A5A  3  A5 66        	lda z80_l
000A5C  3  79 26 2E     	adc scdat,y 		; low byte of screen size.
000A5F  3  85 66        	sta z80_l
000A61  3  C8           	iny			; point to high byte.
000A62  3  A5 67        	lda z80_h
000A64  3  79 26 2E     	adc scdat,y 		; high byte of screen size.
000A67  3  85 67        	sta z80_h
000A69  3  C8           	iny			; next address.
000A6A  3               
000A6A  3  CA           	dex 			; one less iteration.
000A6B  3  4C 55 0A     	jmp groom1 		; loop until we reach the end.
000A6E  3               groom0:
000A6E  3  AD A3 49     	lda numsc 		; add displacement.
000A71  3  0A           	asl a
000A72  3  18           	clc			; add double displacement to address.
000A73  3  65 66        	adc z80_l
000A75  3  85 66        	sta z80_l
000A77  3  A5 67        	lda z80_h
000A79  3  69 00        	adc #0
000A7B  3  85 67        	sta z80_h
000A7D  3  60           	rts
000A7E  3               
000A7E  3               ;-----------------------------------------------------------
000A7E  3               ; Draw present room.
000A7E  3               ;-----------------------------------------------------------
000A7E  3               
000A7E  3               droom:
000A7E  3  AD 35 02     	lda wintop 		; window top.
000A81  3  8D 64 02     	sta dispy		; set cursor y position.
000A84  3               droom2:
000A84  3  20 48 0A     	jsr groom 		; get address of current room.
000A87  3  A9 00        	lda #0	 		; zero in accumulator.
000A89  3  8D E6 0A     	sta comcnt 		; reset compression counter.
000A8C  3  AD 37 02     	lda winhgt 		; height of window.
000A8F  3  8D B3 0A     	sta rrow		; set row counter
000A92  3               droom0:
000A92  3  AD 36 02     	lda winlft 		; window left edge.
000A95  3  8D 63 02     	sta dispx 		; set cursor x position.
000A98  3  AD 38 02     	lda winwid 		; width of window.
000A9B  3  8D B2 0A     	sta rcol		; set column counter
000A9E  3               droom1:
000A9E  3  20 B4 0A     	jsr flbyt 		; decompress next byte on the fly.
000AA1  3  20 54 09     	jsr pattr 		; show attributes and block.
000AA4  3  CE B2 0A     	dec rcol		; one less column.
000AA7  3  D0 F5        	bne droom1 		; repeat for entire line.
000AA9  3  EE 64 02     	inc dispy		; move down one line.
000AAC  3  CE B3 0A     	dec rrow 		; one less row.
000AAF  3  D0 E1        	bne droom0 		; repeat for all rows.
000AB1  3  60           	rts
000AB2  3               
000AB2  3  00           rcol:	.byte 0
000AB3  3  00           rrow:	.byte 0
000AB4  3               
000AB4  3               ;----------------------------------------------
000AB4  3               ; Decompress bytes on-the-fly.
000AB4  3               ;----------------------------------------------
000AB4  3               
000AB4  3               flbyt:
000AB4  3  AD E6 0A     	lda comcnt 		; compression counter.
000AB7  3  D0 22        	bne flbyt1		; any more to decompress?  yes.
000AB9  3               
000AB9  3  A0 00        	ldy #0
000ABB  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
000ABD  3  E6 66        	inc z80_l 		; point to next cell.
000ABF  3  D0 02        	bne :+
000AC1  3  E6 67        	inc z80_h
000AC3  3               :
000AC3  3  C9 FF        	cmp #255 		; is this byte a control code?
000AC5  3  F0 01        	beq :+
000AC7  3  60           	rts 			; no, this byte is uncompressed.
000AC8  3               :
000AC8  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
000ACA  3  8D E5 0A     	sta combyt 		; set up the type.
000ACD  3  E6 66        	inc z80_l 		; point to quantity.
000ACF  3  D0 02        	bne :+
000AD1  3  E6 67        	inc z80_h
000AD3  3               :
000AD3  3  B1 66        	lda (z80_hl),y 		; get quantity.
000AD5  3  E6 66        	inc z80_l 		; point to next byte.
000AD7  3  D0 02        	bne :+
000AD9  3  E6 67        	inc z80_h
000ADB  3               :
000ADB  3               flbyt1:
000ADB  3  8D E6 0A     	sta comcnt 		; store new quantity.
000ADE  3  CE E6 0A     	dec comcnt		; one less.
000AE1  3  AD E5 0A     	lda combyt 		; byte to expand.
000AE4  3  60           	rts
000AE5  3               
000AE5  3  00           combyt:	.byte 0			; byte type compressed.
000AE6  3  00           comcnt:	.byte 0			; compression counter.
000AE7  3               
000AE7  3               ;------------------------------------------
000AE7  3               ; Ladder down check.
000AE7  3               ;
000AE7  3               ; Input:
000AE7  3               ;  IX = sprite pointer
000AE7  3               ;------------------------------------------
000AE7  3               
000AE7  3               laddd:
000AE7  3  A0 09        	ldy #9
000AE9  3  B1 68        	lda (z80_ix),y		; x coordinate.
000AEB  3  8D 63 02     	sta dispx
000AEE  3               
000AEE  3  A0 08        	ldy #8
000AF0  3  B1 68        	lda (z80_ix),y		; y coordinate.
000AF2  3  29 FE        	and #254		; make it even.
000AF4  3  91 68        	sta (z80_ix),y 		; reset it.
000AF6  3               numsp5:
000AF6  3  18           	clc 			; look down 16 pixels.
000AF7  3  69 10        	adc #16
000AF9  3  8D 64 02     	sta dispy		; coords in dispx,dispy.
000AFC  3  4C 14 0B     	jmp laddv
000AFF  3               
000AFF  3               ;------------------------------------------
000AFF  3               ; Ladder up check.
000AFF  3               ;
000AFF  3               ; Input:
000AFF  3               ;  IX = sprite pointer
000AFF  3               ;
000AFF  3               ; Output:
000AFF  3               ;  A  = 0 is ok, A <>0 is not ok
000AFF  3               ;------------------------------------------
000AFF  3               
000AFF  3               laddu:
000AFF  3  A0 09        	ldy #9
000B01  3  B1 68        	lda (z80_ix),y		; x coordinate.
000B03  3  8D 63 02     	sta dispx
000B06  3               
000B06  3  A0 08        	ldy #8
000B08  3  B1 68        	lda (z80_ix),y		; y coordinate.
000B0A  3  29 FE        	and #254 		; make it even.
000B0C  3  91 68        	sta (z80_ix),y		; reset it.
000B0E  3               numsp6:
000B0E  3  18           	clc 			; look 2 pixels above feet.
000B0F  3  69 0E        	adc #14
000B11  3  8D 64 02     	sta dispy		; coords in dispx,dispy.
000B14  3               laddv:
000B14  3  20 FB 0C     	jsr tstbl 		; get map address.
000B17  3  20 2E 0C     	jsr ldchk 		; standard ladder check.
000B1A  3  F0 01        	beq :+
000B1C  3  60           	rts 			; no way through.
000B1D  3               :
000B1D  3  E6 86        	inc bufaddr 		; look right one cell.
000B1F  3  D0 02        	bne :+
000B21  3  E6 87        	inc bufaddr+1
000B23  3               :
000B23  3  20 2E 0C     	jsr ldchk 		; do the check.
000B26  3  F0 01        	beq :+
000B28  3  60           	rts 			; impassable.
000B29  3               :
000B29  3  AD 63 02     	lda dispx 		; y coordinate.
000B2C  3  29 07        	and #7 			; position straddling block cells.
000B2E  3  D0 01        	bne :+
000B30  3  60           	rts 			; no more checks needed.
000B31  3               :
000B31  3  E6 86        	inc bufaddr 		; look to third cell.
000B33  3  D0 02        	bne :+
000B35  3  E6 87        	inc bufaddr+1
000B37  3               :
000B37  3  20 2E 0C     	jsr ldchk 		; do the check.
000B3A  3  60           	rts  			; return with zero flag set accordingly.
000B3B  3               
000B3B  3               ;---------------------------------------------------------
000B3B  3               ; Can go up check.
000B3B  3               ;
000B3B  3               ; Input:
000B3B  3               ;  IX = sprite pointer
000B3B  3               ;
000B3B  3               ; Output:
000B3B  3               ;  A  = 0 is ok, A <>0 is not ok
000B3B  3               ;---------------------------------------------------------
000B3B  3               
000B3B  3               cangu:
000B3B  3  A0 09        	ldy #9
000B3D  3  B1 68        	lda (z80_ix),y		; x coordinate.
000B3F  3  8D 63 02     	sta dispx
000B42  3  A0 08        	ldy #8
000B44  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000B46  3  38           	sec
000B47  3  E9 02        	sbc #2
000B49  3  8D 64 02     	sta dispy		; coords in dispx,dispy.
000B4C  3  20 FB 0C     	jsr tstbl 		; get map address.
000B4F  3  20 F8 0B     	jsr lrchk 		; standard left/right check.
000B52  3  F0 01        	beq :+
000B54  3  60           	rts			; no way through.
000B55  3               :
000B55  3  E6 86        	inc bufaddr		; look right one cell.
000B57  3  D0 02        	bne :+
000B59  3  E6 87        	inc bufaddr+1
000B5B  3               :
000B5B  3  20 F8 0B     	jsr lrchk 		; do the check.
000B5E  3  F0 01        	beq :+
000B60  3  60           	rts			; impassable.
000B61  3               :
000B61  3  AD 63 02     	lda dispx		; x coordinate.
000B64  3  29 07        	and #7			; position straddling block cells.
000B66  3  D0 01        	bne :+
000B68  3  60           	rts			; no more checks needed.
000B69  3               :
000B69  3  E6 86        	inc bufaddr		; look to third cell.
000B6B  3  D0 02        	bne :+
000B6D  3  E6 87        	inc bufaddr+1
000B6F  3               :
000B6F  3  20 F8 0B     	jsr lrchk		; do the check.
000B72  3  60           	rts 			; return with zero flag set accordingly.
000B73  3               
000B73  3               ;---------------------------------------------------------
000B73  3               ; Can go down check.
000B73  3               ;
000B73  3               ; Input:
000B73  3               ;  IX = sprite pointer
000B73  3               ;
000B73  3               ; Output:
000B73  3               ;  A  = 0 is ok, A <>0 is not ok
000B73  3               ;---------------------------------------------------------
000B73  3               
000B73  3               cangd:
000B73  3  A0 09        	ldy #9
000B75  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000B77  3  8D 63 02     	sta dispx
000B7A  3  A0 08        	ldy #8
000B7C  3  B1 68        	lda (z80_ix),y		; y coordinate.
000B7E  3               numsp3:
000B7E  3  18           	clc
000B7F  3  69 10        	adc #16 		; look down 16 pixels.
000B81  3  8D 64 02     	sta dispy		; coords in dispx,dispy.
000B84  3  20 FB 0C     	jsr tstbl 		; get map address.
000B87  3  20 0D 0C     	jsr plchk 		; block, platform check.
000B8A  3  F0 01        	beq :+
000B8C  3  60           	rts			; no way through.
000B8D  3               :
000B8D  3  E6 86        	inc bufaddr		; look right one cell.
000B8F  3  D0 02        	bne :+
000B91  3  E6 87        	inc bufaddr+1
000B93  3               :
000B93  3  20 0D 0C     	jsr plchk		; block, platform check.
000B96  3  F0 01        	beq :+
000B98  3  60           	rts			; impassable.
000B99  3               :
000B99  3  AD 63 02     	lda dispx		; x coordinate.
000B9C  3  29 07        	and #7			; position straddling block cells.
000B9E  3  D0 01        	bne :+
000BA0  3  60           	rts			; no more checks needed.
000BA1  3               :
000BA1  3  E6 86        	inc bufaddr		; look to third cell.
000BA3  3  D0 02        	bne :+
000BA5  3  E6 87        	inc bufaddr+1
000BA7  3               :
000BA7  3  20 0D 0C     	jsr plchk		; block, platform check.
000BAA  3  60           	rts			; return with zero flag set accordingly.
000BAB  3               
000BAB  3               ;---------------------------------------------------------
000BAB  3               ; Can go left check.
000BAB  3               ;
000BAB  3               ; Input:
000BAB  3               ;  IX = sprite pointer
000BAB  3               ;
000BAB  3               ; Output:
000BAB  3               ;  A  = 0 is ok, A <>0 is not ok
000BAB  3               ;---------------------------------------------------------
000BAB  3               
000BAB  3               cangl:
000BAB  3  A0 08        	ldy #8
000BAD  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000BAF  3  8D 64 02     	sta dispy
000BB2  3  A0 09        	ldy #9
000BB4  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000BB6  3  38           	sec
000BB7  3  E9 02        	sbc #2			; look left 2 pixels.
000BB9  3  8D 63 02     	sta dispx		; coords in dispx,dispy.
000BBC  3  4C D0 0B     	jmp cangh		; test if we can go there.
000BBF  3               
000BBF  3               ;---------------------------------------------------------
000BBF  3               ; Can go right check.
000BBF  3               ;
000BBF  3               ; Input:
000BBF  3               ;  IX = sprite pointer
000BBF  3               ;
000BBF  3               ; Output:
000BBF  3               ;  A  = 0 is ok, A <>0 is not ok
000BBF  3               ;---------------------------------------------------------
000BBF  3               
000BBF  3               cangr:
000BBF  3  A0 08        	ldy #8
000BC1  3  B1 68        	lda (z80_ix),y		; y coordinate.
000BC3  3  8D 64 02     	sta dispy
000BC6  3  A0 09        	ldy #9
000BC8  3  B1 68        	lda (z80_ix),y		; x coordinate.
000BCA  3  18           	clc
000BCB  3  69 10        	adc #16			; look right 16 pixels.
000BCD  3  8D 63 02     	sta dispx		; coords in dispx,dispy.
000BD0  3               cangh:
000BD0  3               cangh2:
000BD0  3  A9 03        	lda #3			; default rows to write.
000BD2  3  85 63        	sta z80_b
000BD4  3  AD 64 02     	lda dispy		; y position.
000BD7  3  29 07        	and #7			; does x straddle cells?
000BD9  3  D0 02        	bne cangh0		; yes, loop counter is good.
000BDB  3  C6 63        	dec z80_b		; one less row to write.
000BDD  3               cangh0:
000BDD  3  20 FB 0C     	jsr tstbl		; get map address.
000BE0  3               cangh1:
000BE0  3  20 F8 0B     	jsr lrchk		; standard left/right check.
000BE3  3  F0 01        	beq :+
000BE5  3  60           	rts			; no way through.
000BE6  3               :
000BE6  3  48           	pha
000BE7  3  18           	clc
000BE8  3  A5 86        	lda bufaddr
000BEA  3  69 20        	adc #32			; look down.
000BEC  3  85 86        	sta bufaddr
000BEE  3  90 02        	bcc :+
000BF0  3  E6 87        	inc bufaddr+1
000BF2  3               :
000BF2  3  68           	pla
000BF3  3               
000BF3  3  C6 63        	dec z80_b
000BF5  3  D0 E9        	bne cangh1
000BF7  3  60           	rts
000BF8  3               
000BF8  3               ;-------------------------------------
000BF8  3               ; Check left/right movement is okay.
000BF8  3               ;
000BF8  3               ; Input:
000BF8  3               ;  bufaddr = MAP + x/8 + y/8*32
000BF8  3               ;
000BF8  3               ; Output:
000BF8  3               ;  A  = 0 is ok, A <>0 is not ok
000BF8  3               ;-------------------------------------
000BF8  3               
000BF8  3               lrchk:
000BF8  3  A0 00        	ldy #0
000BFA  3  B1 86        	lda (bufaddr),y		; fetch map cell.
000BFC  3  C9 02        	cmp #WALL 		; is it passable?
000BFE  3  F0 0A        	beq lrchkx		; no.
000C00  3               
000C00  3  C9 04        	cmp #FODDER		; fodder has to be dug.
000C02  3  F0 06        	beq lrchkx		; not passable.
000C04  3  A9 00        	lda #0
000C06  3  60           	rts
000C07  3               
000C07  3               ;--------------------------------------------------------------
000C07  3               ; Called by mmenu
000C07  3               ;--------------------------------------------------------------
000C07  3               
000C07  3               always:
000C07  3  A9 FF        	lda #255		; report it as okay.
000C09  3  60           	rts
000C0A  3               
000C0A  3               lrchkx:
000C0A  3  A9 01        	lda #1 			; reset all bits.
000C0C  3  60           	rts
000C0D  3               
000C0D  3               
000C0D  3               ;--------------------------------------------------------------
000C0D  3               ; Check platform or solid item is not in way.
000C0D  3               ;
000C0D  3               ; Input:
000C0D  3               ;  bufaddr = MAP + x/8 + y/8*32
000C0D  3               ;
000C0D  3               ; Output:
000C0D  3               ;  A  = 0 is ok, A <>0 is not ok
000C0D  3               ;--------------------------------------------------------------
000C0D  3               
000C0D  3               plchk:
000C0D  3  A0 00        	ldy #0
000C0F  3  B1 86        	lda (bufaddr),y 	; fetch map cell.
000C11  3  C9 02        	cmp #WALL 		; is it passable?
000C13  3  F0 F5        	beq lrchkx		; no.
000C15  3               
000C15  3  C9 04        	cmp #FODDER		; fodder has to be dug.
000C17  3  F0 F1        	beq lrchkx		; not passable.
000C19  3               
000C19  3  C9 01        	cmp #PLATFM		; platform is solid.
000C1B  3  F0 07        	beq plchkx		; not passable.
000C1D  3               
000C1D  3  C9 03        	cmp #LADDER		; is it a ladder?
000C1F  3  F0 E9        	beq lrchkx		; on ladder, deny movement.
000C21  3               plchk0:
000C21  3  A9 00        	lda #0			; report as ok
000C23  3  60           	rts
000C24  3               plchkx:
000C24  3  AD 64 02     	lda dispy		; x coordinate.
000C27  3  29 07        	and #7			; position straddling blocks.
000C29  3  F0 DF        	beq lrchkx		; on platform, deny movement.
000C2B  3  4C 21 0C     	jmp plchk0
000C2E  3               
000C2E  3               ;--------------------------------------------------------------
000C2E  3               ; Check ladder is available.
000C2E  3               ;
000C2E  3               ; Input:
000C2E  3               ;  bufaddr = MAP + x/8 + y/8*32
000C2E  3               ;
000C2E  3               ; Output:
000C2E  3               ;  A  = 0 is ok, A <>0 is not ok
000C2E  3               ;--------------------------------------------------------------
000C2E  3               
000C2E  3               ldchk:
000C2E  3  A0 00        	ldy #0
000C30  3  B1 86        	lda (bufaddr),y 	; fetch cell.
000C32  3  C9 03        	cmp #LADDER 		; is it a ladder?
000C34  3  F0 03        	beq ldchk1
000C36  3  A9 01        	lda #1
000C38  3  60           	rts  			; return with zero flag set accordingly.
000C39  3               ldchk1:
000C39  3  A9 00        	lda #0
000C3B  3  60           	rts
000C3C  3               
000C3C  3               ;--------------------------------------------------------------
000C3C  3               ; Touched deadly block check.
000C3C  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
000C3C  3               ;
000C3C  3               ; Input:
000C3C  3               ;  IX = sprite address
000C3C  3               ;
000C3C  3               ; Output:
000C3C  3               ;  A  = 0 is ok, A=5 is not ok
000C3C  3               ;--------------------------------------------------------------
000C3C  3               
000C3C  3               tded:
000C3C  3  A0 08        	ldy #8
000C3E  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000C40  3  8D 64 02     	sta dispy
000C43  3  C8           	iny
000C44  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000C46  3  8D 63 02     	sta dispx		; coords in dispx,dispy.
000C49  3  20 FB 0C     	jsr tstbl		; get map address.
000C4C  3  48           	pha
000C4D  3  A9 1F        	lda #31			; default distance to next line down.
000C4F  3  85 64        	sta z80_e
000C51  3  68           	pla
000C52  3  C5 63        	cmp z80_b		; is this the required block?
000C54  3  D0 01        	bne :+
000C56  3  60           	rts			; yes.
000C57  3               :
000C57  3  E6 86        	inc bufaddr 		; next cell.
000C59  3  D0 02        	bne :+
000C5B  3  E6 87        	inc bufaddr+1
000C5D  3               :
000C5D  3  A0 00        	ldy #0
000C5F  3  B1 86        	lda (bufaddr),y		; fetch type.
000C61  3  C5 63        	cmp z80_b 		; is this deadly/custom?
000C63  3  D0 01        	bne :+
000C65  3  60           	rts			; yes.
000C66  3               :
000C66  3  AD 63 02     	lda dispx		; horizontal position.
000C69  3  85 62        	sta z80_c 		; store column in c register.
000C6B  3  29 07        	and #7			; is it straddling cells?
000C6D  3  D0 03        	bne :+
000C6F  3  4C 83 0C     	jmp tded0		; no.
000C72  3               :
000C72  3  E6 86        	inc bufaddr 		; last cell.
000C74  3  D0 02        	bne :+
000C76  3  E6 87        	inc bufaddr+1
000C78  3               :
000C78  3  A0 00        	ldy #0
000C7A  3  B1 86        	lda (bufaddr),y 	; fetch type.
000C7C  3  C5 63        	cmp z80_b		; is this the block?
000C7E  3  D0 01        	bne :+
000C80  3  60           	rts			; yes.
000C81  3               :
000C81  3  C6 64        	dec z80_e		; one less cell to next row down.
000C83  3               tded0:
000C83  3  18           	clc 			; point to next row.
000C84  3  A5 86        	lda bufaddr
000C86  3  65 64        	adc z80_e
000C88  3  85 86        	sta bufaddr
000C8A  3  90 02        	bcc :+
000C8C  3  E6 87        	inc bufaddr+1
000C8E  3               :
000C8E  3  A0 00        	ldy #0
000C90  3  B1 86        	lda (bufaddr),y		; fetch left cell block.
000C92  3  C5 63        	cmp z80_b		; is this fatal?
000C94  3  D0 01        	bne :+
000C96  3  60           	rts			; yes.
000C97  3               :
000C97  3  E6 86        	inc bufaddr 		; next cell.
000C99  3  D0 02        	bne :+
000C9B  3  E6 87        	inc bufaddr+1
000C9D  3               :
000C9D  3  A0 00        	ldy #0
000C9F  3  B1 86        	lda (bufaddr),y 	; fetch type.
000CA1  3  C5 63        	cmp z80_b		; is this fatal?
000CA3  3  D0 01        	bne :+
000CA5  3  60           	rts			; yes.
000CA6  3               :
000CA6  3  A5 62        	lda z80_c		; horizontal position.
000CA8  3  29 07        	and #7			; is it straddling cells?
000CAA  3  D0 03        	bne :+
000CAC  3  4C BE 0C     	jmp tded1 		; no.
000CAF  3               :
000CAF  3  E6 86        	inc bufaddr		; last cell.
000CB1  3  D0 02        	bne :+
000CB3  3  E6 87        	inc bufaddr+1
000CB5  3               :
000CB5  3  A0 00        	ldy #0
000CB7  3  B1 86        	lda (bufaddr),y		; fetch type.
000CB9  3  C5 63        	cmp z80_b		; is this fatal?
000CBB  3  D0 01        	bne :+
000CBD  3  60           	rts			; yes.
000CBE  3               :
000CBE  3               tded1:
000CBE  3  AD 64 02     	lda dispy		; vertical position.
000CC1  3  29 07        	and #7 			; is it straddling cells?
000CC3  3  D0 01        	bne :+
000CC5  3  60           	rts			; no, job done.
000CC6  3               :
000CC6  3  18           	clc			; point to next row.
000CC7  3  A5 86        	lda bufaddr
000CC9  3  65 64        	adc z80_e
000CCB  3  85 86        	sta bufaddr
000CCD  3  90 02        	bcc :+
000CCF  3  E6 87        	inc bufaddr+1
000CD1  3               :
000CD1  3  A0 00        	ldy #0
000CD3  3  B1 86        	lda (bufaddr),y 	; fetch left cell block.
000CD5  3  C5 63        	cmp z80_b		; is this fatal?
000CD7  3  D0 01        	bne :+
000CD9  3  60           	rts			; yes.
000CDA  3               :
000CDA  3  E6 86        	inc bufaddr		; next cell.
000CDC  3  D0 02        	bne :+
000CDE  3  E6 87        	inc bufaddr+1
000CE0  3               :
000CE0  3  A0 00        	ldy #0
000CE2  3  B1 86        	lda (bufaddr),y 	; fetch type.
000CE4  3  C5 63        	cmp z80_b		; is this fatal?
000CE6  3  D0 01        	bne :+
000CE8  3  60           	rts			; yes.
000CE9  3               :
000CE9  3  A5 62        	lda z80_c		; horizontal position.
000CEB  3  29 07        	and #7			; is it straddling cells?
000CED  3  D0 01        	bne :+
000CEF  3  60           	rts			; no.
000CF0  3               :
000CF0  3  E6 86        	inc bufaddr		; last cell.
000CF2  3  D0 02        	bne :+
000CF4  3  E6 87        	inc bufaddr+1
000CF6  3               :
000CF6  3  A0 00        	ldy #0
000CF8  3  B1 86        	lda (bufaddr),y		; fetch final type.
000CFA  3  60           	rts 			; return with final type in accumulator.
000CFB  3               
000CFB  3               ;---------------------------------------------------
000CFB  3               ; Fetch block type at (dispx, dispy).
000CFB  3               ;
000CFB  3               ; Output:
000CFB  3               ;  A = block type
000CFB  3               ;---------------------------------------------------
000CFB  3               
000CFB  3               tstbl:
000CFB  3  AD 64 02     	lda dispy 		; fetch y coord.
000CFE  3  4A           	lsr a			; bufaddr = y/8
000CFF  3  4A           	lsr a
000D00  3  4A           	lsr a
000D01  3  85 86        	sta bufaddr
000D03  3  A9 00        	lda #0
000D05  3  85 87        	sta bufaddr+1
000D07  3               
000D07  3  06 86        	asl bufaddr  		; bufaddr = y/8 * 32
000D09  3  26 87        	rol bufaddr+1
000D0B  3  06 86        	asl bufaddr
000D0D  3  26 87        	rol bufaddr+1
000D0F  3  06 86        	asl bufaddr
000D11  3  26 87        	rol bufaddr+1
000D13  3  06 86        	asl bufaddr
000D15  3  26 87        	rol bufaddr+1
000D17  3  06 86        	asl bufaddr
000D19  3  26 87        	rol bufaddr+1
000D1B  3               
000D1B  3  AD 63 02     	lda dispx		; x/8
000D1E  3  4A           	lsr a
000D1F  3  4A           	lsr a
000D20  3  4A           	lsr a
000D21  3               
000D21  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
000D22  3  65 86        	adc bufaddr
000D24  3  69 00        	adc #<MAP
000D26  3  85 86        	sta bufaddr
000D28  3  A5 87        	lda bufaddr+1
000D2A  3  69 98        	adc #>MAP
000D2C  3  85 87        	sta bufaddr+1
000D2E  3               
000D2E  3  A0 00        	ldy #0
000D30  3  B1 86        	lda (bufaddr),y 	; fetch byte there.
000D32  3  60           	rts
000D33  3               
000D33  3               
000D33  3               ;-------------------------------------------------------------------
000D33  3               ; Jump - if we can.
000D33  3               ; Requires initial speed to be set up in accumulator prior to call.
000D33  3               ;
000D33  3               ; Input:
000D33  3               ;  IX = sprite address
000D33  3               ;-------------------------------------------------------------------
000D33  3               
000D33  3               jump:
000D33  3  A0 0D        	ldy #13
000D35  3  B1 68        	lda (z80_ix),y		; jump table low.
000D37  3  A0 0E        	ldy #14
000D39  3  11 68        	ora (z80_ix),y		; jump table high.
000D3B  3  F0 01        	beq :+
000D3D  3  60           	rts			; already in the air.
000D3E  3               :
000D3E  3  A9 0D        	lda #>jtab
000D40  3  A0 0E        	ldy #14
000D42  3  91 68        	sta (z80_ix),y		; set jump high.
000D44  3  A9 4B        	lda #<jtab		; jump table start.
000D46  3  A0 0D        	ldy #13
000D48  3  91 68        	sta (z80_ix),y		; set jump low.
000D4A  3  60           	rts
000D4B  3               
000D4B  3               ; Jump table.
000D4B  3               
000D4B  3               jtab:
000D4B  3  F8 FA FC     	.byte 248,250,252
000D4E  3  FE FE FF     	.byte 254,254,255
000D51  3  FF FF 00 00  	.byte 255,255,0,0
000D55  3  00 01 01 01  	.byte 0,1,1,1,2,2
000D59  3  02 02        
000D5B  3  04 06 08 08  	.byte 4,6,8,8,8,99
000D5F  3  08 63        
000D61  3               
000D61  3               ;------------------------------------------------
000D61  3               ; Random numbers code.
000D61  3               ; Pseudo-random number generator, 8-bit.
000D61  3               ;
000D61  3               ; Output:
000D61  3               ;  RND = random number
000D61  3               ;------------------------------------------------
000D61  3               
000D61  3               random:
000D61  3  AD 7C 07     	lda seed		; get last random number.
000D64  3  0A           	asl a
000D65  3  0A           	asl a
000D66  3  18           	clc
000D67  3  6D 7C 07     	adc seed
000D6A  3  18           	clc
000D6B  3  69 45        	adc #$45
000D6D  3  8D 7C 07     	sta seed		; store new seed.
000D70  3  8D 5B 02     	sta varrnd		; return number in variable.
000D73  3  60           	rts
000D74  3               
000D74  3               ;--------------------------------------------------------
000D74  3               ; Keys
000D74  3               ;
000D74  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
000D74  3               ;             ||||||||
000D74  3               ;             |||||||+> Right    KEY 0  - X
000D74  3               ;             ||||||+-> Left     KEY 1  - Z
000D74  3               ;             |||||+--> Down     KEY 2  - .
000D74  3               ;             ||||+---> Up       KEY 3  - ;
000D74  3               ;             |||+----> Fire1    KEY 4  - SPC
000D74  3               ;             ||+-----> Fire2    KEY 5  - Q
000D74  3               ;             |+------> Fire3    KEY 6  - P
000D74  3               ;             +-------> Not used
000D74  3               ;
000D74  3               ;                       Option1  KEY 7  - 1
000D74  3               ;                       Option2  KEY 8  - 2
000D74  3               ;                       Option3  KEY 9  - 3
000D74  3               ;                       Option4  KEY 10 - 4
000D74  3               ;--------------------------------------------------------
000D74  3               
000D74  3               ;              X   Z   .   ;  SPC  Q   P
000D74  3  35 15 93 22  keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
000D78  3  90 04 14     
000D7B  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
000D7F  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
000D83  3  00 04 14     
000D86  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
000D8A  3               
000D8A  3               ;--------------------------------------------------------
000D8A  3               ; Keyboard test routine.
000D8A  3               ;
000D8A  3               ; Input:
000D8A  3               ;  A = key to read, high nibble=row and low nibble=col
000D8A  3               ;
000D8A  3               ; Output:
000D8A  3               ;  carry clr = key pressed
000D8A  3               ;  carry set = key not pressed
000D8A  3               ;--------------------------------------------------------
000D8A  3               
000D8A  3               ktest:
000D8A  3  85 61        	sta z80_a		; save key
000D8C  3               
000D8C  3  4A           	lsr a			; set row
000D8D  3  4A           	lsr a
000D8E  3  4A           	lsr a
000D8F  3  4A           	lsr a
000D90  3  09 F0        	ora #ScrMode		; don't flip screenmode
000D92  3  8D 00 B0     	sta KeyRowAddr
000D95  3               
000D95  3  A5 61        	lda z80_a
000D97  3  29 0F        	and #$0f
000D99  3  AA           	tax
000D9A  3  AD 01 B0     	lda KeyColAddr		; read column
000D9D  3               
000D9D  3  3D A6 0D     	and keymask,x		; check key pressed
000DA0  3  F0 02        	beq pressed
000DA2  3  38           	sec			; key not pressed
000DA3  3  60           	rts
000DA4  3               pressed:
000DA4  3  18           	clc			; key pressed
000DA5  3  60           	rts
000DA6  3               
000DA6  3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
000DAA  3  10 20        
000DAC  3               
000DAC  3               ;-------------------------------------------------------
000DAC  3               ; Joystick and keyboard reading routines.
000DAC  3               ;
000DAC  3               ; contrl = 0, Keyboard
000DAC  3               ;          1, JoyKeyb
000DAC  3               ;          2, JoyMMC
000DAC  3               ;-------------------------------------------------------
000DAC  3               
000DAC  3               joykey:
000DAC  3  AD 32 02     	lda contrl 		; control flag.
000DAF  3  C9 01        	cmp #1
000DB1  3  D0 03        	bne :+
000DB3  3  4C D1 0D     	jmp joyjoy 		; read keyboard joystick
000DB6  3               :
000DB6  3  C9 02        	cmp #2
000DB8  3  D0 03        	bne :+
000DBA  3  4C FB 0D     	jmp joysin 		; read MMC joystick.
000DBD  3               :
000DBD  3               ; Keyboard controls.
000DBD  3               
000DBD  3  A9 00        	lda #0		 	; zero reading.
000DBF  3  85 64        	sta z80_e
000DC1  3               
000DC1  3  A0 06        	ldy #6	 		; address of last key.
000DC3  3               joyke0:
000DC3  3  B9 74 0D     	lda keys,y 		; get key from table.
000DC6  3  20 8A 0D     	jsr ktest		; being pressed?
000DC9  3  26 64        	rol z80_e 		; rotate into reading.
000DCB  3               
000DCB  3  88           	dey		 	; next key.
000DCC  3  10 F5        	bpl joyke0 		; repeat for all keys.
000DCE  3  4C E2 0D     	jmp joyjo1 		; store the value.
000DD1  3               
000DD1  3               ; Keyboard joystick controls.
000DD1  3               
000DD1  3               joyjoy:
000DD1  3  A9 00        	lda #0		 	; zero reading.
000DD3  3  85 64        	sta z80_e
000DD5  3               
000DD5  3  A0 06        	ldy #6	 		; address of last key.
000DD7  3               joyjo3:
000DD7  3  B9 7F 0D     	lda jkeys,y 		; get key from table.
000DDA  3  20 8A 0D     	jsr ktest		; being pressed?
000DDD  3  26 64        	rol z80_e 		; rotate into reading.
000DDF  3               
000DDF  3  88           	dey		 	; next key.
000DE0  3  10 F5        	bpl joyjo3 		; repeat for all keys.
000DE2  3               joyjo1:
000DE2  3  A5 64        	lda z80_e 		; copy e register to accumulator.
000DE4  3               joyjo2:
000DE4  3  8D 33 02     	sta joyval		; remember value.
000DE7  3  60           	rts
000DE8  3               
000DE8  3               
000DE8  3               ; AtoMMC joystick controls.
000DE8  3               
000DE8  3               ; Set PORTB direction
000DE8  3               
000DE8  3               joyinit:
000DE8  3  A9 FF        	lda #$ff   		; Write value to latch, bits 0-7 input
000DEA  3  8D 01 B4     	sta DatReg
000DED  3  20 2E 0E     	jsr interwritedelay
000DF0  3  A9 A1        	lda #$a1   		; Write direction in latch to PORTB
000DF2  3  8D 00 B4     	sta CmdReg
000DF5  3               
000DF5  3               wait_until_not_busy:
000DF5  3  AD 00 B4     	lda CmdReg
000DF8  3  30 FB        	bmi wait_until_not_busy
000DFA  3  60           	rts
000DFB  3               
000DFB  3               ; Get PORTB value
000DFB  3               
000DFB  3               joysin:
000DFB  3  A9 A2        	lda #$a2   		; Read value PORTB in latch
000DFD  3  8D 00 B4     	sta CmdReg
000E00  3  20 2E 0E     	jsr interwritedelay
000E03  3               
000E03  3  AD 01 B4     	lda DatReg		; Read joystick status
000E06  3  29 7F        	and #$7f
000E08  3  8D 33 02     	sta joyval
000E0B  3  85 F0        	sta $f0
000E0D  3               
000E0D  3  AD 79 0D     	lda keys+5		; check fire2
000E10  3  20 8A 0D     	jsr ktest
000E13  3  B0 08        	bcs :+
000E15  3  AD 33 02     	lda joyval
000E18  3  29 DF        	and #$df
000E1A  3  8D 33 02     	sta joyval
000E1D  3               :
000E1D  3  AD 7A 0D     	lda keys+6		; check fire3
000E20  3  20 8A 0D     	jsr ktest
000E23  3  B0 08        	bcs :+
000E25  3  AD 33 02     	lda joyval
000E28  3  29 BF        	and #$bf
000E2A  3  8D 33 02     	sta joyval
000E2D  3               :
000E2D  3  60           	rts
000E2E  3               
000E2E  3               ; Short delay
000E2E  3               ; Enough to intersperse 2 writes to the FATPIC.
000E2E  3               
000E2E  3               interwritedelay:
000E2E  3  A9 08        	lda  #8
000E30  3  38           	sec
000E31  3               loop:
000E31  3  E9 01        	sbc  #1
000E33  3  D0 FC        	bne  loop
000E35  3  60           	rts
000E36  3               
000E36  3               ;tmp_byte:   .byte 0
000E36  3               
000E36  3               ;---------------------------------------------------------------
000E36  3               ; Getkey in column,row format
000E36  3               ;
000E36  3               ; Output:
000E36  3               ;  A = high nibble=row and low nibble=column key in matrix
000E36  3               ;---------------------------------------------------------------
000E36  3               
000E36  3               kget:
000E36  3  A9 F0        	lda #ScrMode		; high-mono mode.
000E38  3  8D 00 B0     	sta ScrSelAddr		; screen select port
000E3B  3  8E 47 0A     	stx xtmp
000E3E  3               kget4:
000E3E  3  20 71 FE     	jsr READKEY		; read key until pressed
000E41  3  C0 FF        	cpy #255
000E43  3  F0 F9        	beq kget4
000E45  3  8D B2 0A     	sta rcol		; save column
000E48  3  8E B3 0A     	stx rrow		; determine row
000E4B  3               kget3:
000E4B  3  20 71 FE     	jsr READKEY		; wait until key released
000E4E  3  C0 FF        	cpy #255
000E50  3  D0 F9        	bne kget3
000E52  3               
000E52  3  38           	sec			; calculate matrix row
000E53  3  A9 0A        	lda #10
000E55  3  ED B3 0A     	sbc rrow
000E58  3  0A           	asl a
000E59  3  0A           	asl a
000E5A  3  0A           	asl a
000E5B  3  0A           	asl a
000E5C  3  8D B3 0A     	sta rrow
000E5F  3               
000E5F  3  A0 FF        	ldy #255		; find column mask
000E61  3               kget1:
000E61  3  C8           	iny
000E62  3  B9 A6 0D     	lda keymask,y
000E65  3  CD B2 0A     	cmp rcol
000E68  3  F0 03        	beq kget2
000E6A  3  4C 61 0E     	jmp kget1
000E6D  3               kget2:
000E6D  3  98           	tya			; determine column
000E6E  3  18           	clc
000E6F  3  6D B3 0A     	adc rrow
000E72  3  AE 47 0A     	ldx xtmp
000E75  3  60           	rts
000E76  3               
000E76  3               ;---------------------------------------------------------------
000E76  3               ; Display message.
000E76  3               ;
000E76  3               ; Input:
000E76  3               ;  A = message number
000E76  3               ;---------------------------------------------------------------
000E76  3               
000E76  3               dmsg:
000E76  3  AA           	tax
000E77  3  A9 C7        	lda #<msgdat		; pointer to messages.
000E79  3  85 66        	sta z80_l
000E7B  3  A9 1E        	lda #>msgdat
000E7D  3  85 67        	sta z80_h
000E7F  3  20 AF 0F     	jsr getwrd		; get message number.
000E82  3               dmsg3:
000E82  3  20 96 0F     	jsr preprt		; pre-printing stuff.
000E85  3  20 91 07     	jsr checkx		; make sure we"re in a printable range.
000E88  3  AD D8 0E     	lda prtmod		; print mode.
000E8B  3  D0 4C        	bne bmsg1		; no, double-height text.
000E8D  3               dmsg0:
000E8D  3  A5 67        	lda z80_h		; store string pointer.
000E8F  3  48           	pha
000E90  3  A5 66        	lda z80_l
000E92  3  48           	pha
000E93  3               
000E93  3  A0 00        	ldy #0
000E95  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
000E97  3  29 7F        	and #127		; remove any end marker.
000E99  3  C9 0D        	cmp #13
000E9B  3  F0 24        	beq dmsg1
000E9D  3  20 11 09     	jsr pchar		; display character.
000EA0  3  20 7C 0F     	jsr nexpos 		; display position.
000EA3  3  D0 03        	bne dmsg2		; not on a new line.
000EA5  3  20 85 0F     	jsr nexlin		; next line down.
000EA8  3               dmsg2:
000EA8  3  68           	pla			; retrieve string pointer
000EA9  3  85 66        	sta z80_l
000EAB  3  68           	pla
000EAC  3  85 67        	sta z80_h
000EAE  3               
000EAE  3  A0 00        	ldy #0
000EB0  3  B1 66        	lda (z80_hl),y		; fetch last character.
000EB2  3  0A           	asl a  			; was it the end?
000EB3  3  90 03        	bcc :+
000EB5  3  4C D9 07     	jmp dscor2		; yes, job done.
000EB8  3               :
000EB8  3  E6 66        	inc z80_l		; next character to display.
000EBA  3  D0 02        	bne :+
000EBC  3  E6 67        	inc z80_h
000EBE  3               :
000EBE  3  4C 8D 0E     	jmp dmsg0
000EC1  3               dmsg1:
000EC1  3  EE 64 02     	inc dispy
000EC4  3  AD 64 02     	lda dispy
000EC7  3  C9 18        	cmp #24
000EC9  3  90 05        	bcc dmsg4
000ECB  3  A9 00        	lda #0
000ECD  3  8D 64 02     	sta dispy
000ED0  3               dmsg4:
000ED0  3  A9 00        	lda #0
000ED2  3  8D 63 02     	sta dispx
000ED5  3  4C A8 0E     	jmp dmsg2
000ED8  3               
000ED8  3  00           prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
000ED9  3               
000ED9  3               ;----------------------------------------------------------
000ED9  3               ; Display message in big text.
000ED9  3               ;
000ED9  3               ; Input:
000ED9  3               ;  HL = string pointer
000ED9  3               ;----------------------------------------------------------
000ED9  3               
000ED9  3               bmsg1:
000ED9  3  A0 00        	ldy #0
000EDB  3  B1 66        	lda (z80_hl),y 		; get character to display.
000EDD  3  29 7F        	and #127		; only want 7 bits.
000EDF  3  C9 0D        	cmp #13
000EE1  3  F0 13        	beq bmsg2
000EE3  3  20 10 0F     	jsr bchar 		; display big char.
000EE6  3               bmsg3:
000EE6  3  A0 00        	ldy #0
000EE8  3  B1 66        	lda (z80_hl),y 		; look at last character.
000EEA  3  48           	pha
000EEB  3  E6 66        	inc z80_l 		; next character in list.
000EED  3  D0 02        	bne :+
000EEF  3  E6 67        	inc z80_h
000EF1  3               :
000EF1  3  68           	pla
000EF2  3  0A           	asl a  			; was terminator flag set?
000EF3  3  90 E4        	bcc bmsg1		; no, keep going.
000EF5  3               :
000EF5  3  60           	rts
000EF6  3               bmsg2:
000EF6  3  A9 00        	lda #0
000EF8  3  8D 63 02     	sta dispx
000EFB  3  EE 64 02     	inc dispy
000EFE  3  EE 64 02     	inc dispy
000F01  3  AD 64 02     	lda dispy
000F04  3  C9 17        	cmp #23
000F06  3  90 DE        	bcc bmsg3
000F08  3  A9 00        	lda #0
000F0A  3  8D 64 02     	sta dispy
000F0D  3  4C E6 0E     	jmp bmsg3
000F10  3               
000F10  3               ;----------------------------------------------------------
000F10  3               ; Big character display.
000F10  3               ;
000F10  3               ; Input:
000F10  3               ;  A = character
000F10  3               ;----------------------------------------------------------
000F10  3               
000F10  3               bchar:
000F10  3  85 64        	sta z80_e		; save char in lb
000F12  3  A9 00        	lda #0
000F14  3  85 65        	sta z80_d		; reset hb
000F16  3               
000F16  3  06 64        	asl z80_e 		; multiply char by 8.
000F18  3  26 65        	rol z80_d
000F1A  3  06 64        	asl z80_e
000F1C  3  26 65        	rol z80_d
000F1E  3  06 64        	asl z80_e
000F20  3  26 65        	rol z80_d		; de = a*8
000F22  3               
000F22  3  18           	clc			; de = FontPtr + a*8
000F23  3  A5 64        	lda z80_e
000F25  3  6D AA 17     	adc FontPtr 		; address of font.
000F28  3  85 64        	sta z80_e
000F2A  3  A5 65        	lda z80_d
000F2C  3  6D AB 17     	adc FontPtr+1
000F2F  3  85 65        	sta z80_d
000F31  3               
000F31  3  20 D6 08     	jsr gprad 		; get screen address.
000F34  3               
000F34  3  A2 00        	ldx #0			; height of character in font.
000F36  3               bchar0:
000F36  3  A0 00        	ldy #0
000F38  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
000F3A  3               
000F3A  3  49 00        	eor #TxtInvert		; Invert
000F3C  3               
000F3C  3  91 80        	sta (scraddr),y
000F3E  3  48           	pha
000F3F  3  20 6F 12     	jsr nline 		; next line down.
000F42  3  68           	pla
000F43  3  91 80        	sta (scraddr),y
000F45  3  20 6F 12     	jsr nline 		; next line down.
000F48  3               
000F48  3  18           	clc
000F49  3  E6 64        	inc z80_e 		; next line of font.
000F4B  3  D0 02        	bne :+
000F4D  3  E6 65        	inc z80_d
000F4F  3               :
000F4F  3  E8           	inx
000F50  3  E0 08        	cpx #8
000F52  3  D0 E2        	bne bchar0
000F54  3               	
000F54  3  20 7C 0F     	jsr nexpos		; display position.
000F57  3  D0 06        	bne bchar2 		; not on a new line.
000F59  3               bchar3:
000F59  3  EE 64 02     	inc dispy
000F5C  3  20 85 0F     	jsr nexlin 		; next line check.
000F5F  3               bchar2:
000F5F  3  4C D9 07     	jmp dscor2		; tidy up line and column variables.
000F62  3               
000F62  3               
000F62  3               ;-------------------------------------------------
000F62  3               ; Display a character.
000F62  3               ;
000F62  3               ; Input:
000F62  3               ;  A = character
000F62  3               ;-------------------------------------------------
000F62  3               
000F62  3               achar:
000F62  3  85 63        	sta z80_b 		; copy to b.
000F64  3  20 96 0F     	jsr preprt 		; get ready to print.
000F67  3  A5 63        	lda z80_b		; character in accumulator.
000F69  3  AE D8 0E     	ldx prtmod 		; print mode.
000F6C  3  F0 03        	beq :+
000F6E  3  4C 10 0F     	jmp bchar 		; no, double-height text.
000F71  3               :
000F71  3  20 11 09     	jsr pchar 		; display character.
000F74  3  20 7C 0F     	jsr nexpos 		; display position.
000F77  3  F0 E0        	beq bchar3		; next line down.
000F79  3  4C 5F 0F     	jmp bchar2 		; tidy up.
000F7C  3               
000F7C  3               
000F7C  3               ;-------------------------------------------------
000F7C  3               ; Get next print column position.
000F7C  3               ;-------------------------------------------------
000F7C  3               
000F7C  3               nexpos:
000F7C  3  EE 63 02     	inc dispx		; move along one position.
000F7F  3  AD 63 02     	lda dispx 		; get coordinate.
000F82  3  29 1F        	and #31
000F84  3  60           	rts 			; return with status in zero flag.
000F85  3               
000F85  3               ;-------------------------------------------------
000F85  3               ; Get next print line position.
000F85  3               ;-------------------------------------------------
000F85  3               
000F85  3               nexlin:
000F85  3  EE 64 02     	inc dispy 		; newline.
000F88  3  AD 64 02     	lda dispy		; vertical position.
000F8B  3  C9 18        	cmp #24			; past screen edge?
000F8D  3  B0 01        	bcs :+
000F8F  3  60           	rts			; no, still okay.
000F90  3               :
000F90  3  A9 00        	lda #0			; restart at top.
000F92  3  8D 64 02     	sta dispy
000F95  3  60           	rts
000F96  3               
000F96  3               ;--------------------------------------------------------
000F96  3               ; Pre-print preliminaries.
000F96  3               ;--------------------------------------------------------
000F96  3               
000F96  3               preprt:
000F96  3  AD AA 17     	lda FontPtr		; font pointer.
000F99  3  8D 8F 07     	sta grbase		; set up graphics base.
000F9C  3  AD AB 17     	lda FontPtr+1
000F9F  3  8D 90 07     	sta grbase+1
000FA2  3               prescr:
000FA2  3  AD 58 02     	lda charx 		; display coordinates.
000FA5  3  8D 63 02     	sta dispx		; set up general coordinates.
000FA8  3  AD 59 02     	lda chary
000FAB  3  8D 64 02     	sta dispy
000FAE  3  60           	rts
000FAF  3               
000FAF  3               ;--------------------------------------------------------------
000FAF  3               ; Get messagenr x in hl
000FAF  3               ;
000FAF  3               ; Input:
000FAF  3               ;  HL = pointer to message list
000FAF  3               ;  X  = message number.
000FAF  3               ;--------------------------------------------------------------
000FAF  3               
000FAF  3               getwrd:
000FAF  3  E0 00        	cpx #0
000FB1  3  D0 01        	bne:+ 			; first word in list?
000FB3  3  60           	rts 			; yep, don't search.
000FB4  3               :
000FB4  3  A0 00        	ldy #0
000FB6  3               getwd0:
000FB6  3  B1 66        	lda (z80_hl),y
000FB8  3  48           	pha
000FB9  3  E6 66        	inc z80_l
000FBB  3  D0 02        	bne :+
000FBD  3  E6 67        	inc z80_h
000FBF  3               :
000FBF  3  68           	pla
000FC0  3  C9 80        	cmp #128		; found end?
000FC2  3  30 F2        	bmi getwd0		; no, carry on.
000FC4  3  CA           	dex			; until we have right number.
000FC5  3  D0 EF        	bne getwd0
000FC7  3  60           	rts
000FC8  3               
000FC8  3               ;-----------------------------------------------------------
000FC8  3               ; Bubble sort.
000FC8  3               ;-----------------------------------------------------------
000FC8  3               
000FC8  3               bsort:
000FC8  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
000FCA  3  8D 00 10     	sta qscnt
000FCD  3               
000FCD  3  A9 CB        	lda #<sprtab 		; sprite table.
000FCF  3  85 68        	sta z80_x
000FD1  3  A9 16        	lda #>sprtab
000FD3  3  85 69        	sta z80_i
000FD5  3               bsort0:
000FD5  3  A0 00        	ldy #0
000FD7  3  B1 68        	lda (z80_ix),y 		; first sprite type.
000FD9  3  C9 FF        	cmp #255 		; is it switched off?
000FDB  3  F0 32        	beq swemp		; yes, may need to switch another in here.
000FDD  3               
000FDD  3  A0 11        	ldy #TABSIZ
000FDF  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
000FE1  3  C9 FF        	cmp #255 		; is it enabled?
000FE3  3  F0 0A        	beq bsort2 		; no, nothing to swap.
000FE5  3               
000FE5  3  A0 14        	ldy #TABSIZ+3
000FE7  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
000FE9  3  A0 03        	ldy #3
000FEB  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
000FED  3  90 12        	bcc bsort1		; next sprite is higher - may need to switch.
000FEF  3               bsort2:
000FEF  3  18           	clc
000FF0  3  A5 68        	lda z80_x
000FF2  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000FF4  3  85 68        	sta z80_x
000FF6  3  90 02        	bcc :+
000FF8  3  E6 69        	inc z80_i
000FFA  3               :
000FFA  3  CE 00 10     	dec qscnt 
000FFD  3  D0 D6        	bne bsort0		; repeat for remaining sprites.
000FFF  3  60           	rts
001000  3               
001000  3  00           qscnt:	.byte 0
001001  3               
001001  3               bsort1:
001001  3  A0 11        	ldy #TABSIZ
001003  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
001005  3  C9 FF        	cmp #255		; is it enabled?
001007  3  F0 E6        	beq bsort2		; no, nothing to swap.
001009  3  20 1D 10     	jsr swspr		; swap positions.
00100C  3  4C EF 0F     	jmp bsort2
00100F  3               swemp:
00100F  3  A0 11        	ldy #TABSIZ
001011  3  B1 68        	lda (z80_ix),y		; next table entry.
001013  3  C9 FF        	cmp #255		; is that one on?
001015  3  F0 D8        	beq bsort2		; no, nothing to swap.
001017  3  20 1D 10     	jsr swspr		; swap positions.
00101A  3  4C EF 0F     	jmp bsort2
00101D  3               
00101D  3               ; Swap sprites.
00101D  3               
00101D  3               swspr:
00101D  3  A5 68        	lda z80_x		; table address 
00101F  3  85 64        	sta z80_e		; copy to de pair.
001021  3  85 66        	sta z80_l		; copy to hl pair.
001023  3  A5 69        	lda z80_i
001025  3  85 67        	sta z80_h
001027  3  85 65        	sta z80_d
001029  3               
001029  3  18           	clc
00102A  3  A5 66        	lda z80_l
00102C  3  69 11        	adc #TABSIZ		; distance to second entry.
00102E  3  85 66        	sta z80_l
001030  3  90 02        	bcc :+
001032  3  E6 67        	inc z80_h
001034  3               :
001034  3  A9 11        	lda #TABSIZ		; bytes to swap.
001036  3  85 63        	sta z80_b
001038  3  A0 00        	ldy #0
00103A  3               swspr0:
00103A  3  B1 66        	lda (z80_hl),y		; fetch second byte.
00103C  3  48           	pha
00103D  3  B1 64        	lda (z80_de),y 		; fetch first byte.
00103F  3  91 66        	sta (z80_hl),y 		; copy to second.
001041  3  68           	pla
001042  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
001044  3               
001044  3  E6 64        	inc z80_e 		; next byte.
001046  3  D0 02        	bne :+	
001048  3  E6 65        	inc z80_d
00104A  3               :
00104A  3  E6 66        	inc z80_l 		; next byte.
00104C  3  D0 02        	bne :+
00104E  3  E6 67        	inc z80_h
001050  3               :
001050  3  C6 63        	dec z80_b
001052  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
001054  3  60           	rts
001055  3               
001055  3               ;----------------------------------------------------
001055  3               ; Process sprites.
001055  3               ;----------------------------------------------------
001055  3               
001055  3               pspr:
001055  3  A9 0C        	lda #NUMSPR		; sprites to process.
001057  3  8D 7E 10     	sta sprptr
00105A  3               
00105A  3  A9 CB        	lda #<sprtab 		; sprite table.
00105C  3  85 68        	sta z80_x
00105E  3  A9 16        	lda #>sprtab
001060  3  85 69        	sta z80_i
001062  3               pspr1:
001062  3  A0 00        	ldy #0
001064  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
001066  3  C9 09        	cmp #9 			; within range of sprite types?
001068  3  B0 03        	bcs :+
00106A  3  20 7F 10     	jsr pspr2 		; yes, process this one.
00106D  3               :
00106D  3  18           	clc
00106E  3  A5 68        	lda z80_x
001070  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
001072  3  85 68        	sta z80_x
001074  3  90 02        	bcc :+
001076  3  E6 69        	inc z80_i		; next sprite.
001078  3               :
001078  3  CE 7E 10     	dec sprptr 		; repeat for remaining sprites.
00107B  3  D0 E5        	bne pspr1
00107D  3  60           	rts
00107E  3               
00107E  3  00           sprptr:	.byte 0
00107F  3               
00107F  3               pspr2:
00107F  3  A5 68        	lda z80_x 		; store original sprite pointer.
001081  3  8D CC 10     	sta ogptr
001084  3  A5 69        	lda z80_i
001086  3  8D CD 10     	sta ogptr+1
001089  3  20 97 10     	jsr pspr3		; do the routine.
00108C  3               rtorg:
00108C  3  AD CC 10     	lda ogptr 		; restore original pointer to sprite.
00108F  3  85 68        	sta z80_x
001091  3  AD CD 10     	lda ogptr+1
001094  3  85 69        	sta z80_i
001096  3               rtorg0:
001096  3  60           	rts
001097  3               
001097  3               pspr3:
001097  3  A9 CE        	lda #<evtyp0		; sprite type events list.
001099  3  85 66        	sta z80_l
00109B  3  A9 10        	lda #>evtyp0
00109D  3  85 67        	sta z80_h
00109F  3               pspr4:
00109F  3  B1 68        	lda (z80_ix),y
0010A1  3  0A           	asl a			; double accumulator.
0010A2  3  18           	clc
0010A3  3  65 66        	adc z80_l
0010A5  3  85 66        	sta z80_l
0010A7  3  90 02        	bcc :+
0010A9  3  E6 67        	inc z80_h
0010AB  3               :
0010AB  3  B1 66        	lda (z80_hl),y
0010AD  3  85 64        	sta z80_e 		; copy to de.
0010AF  3  48           	pha
0010B0  3               
0010B0  3  E6 66        	inc z80_l 		; next byte of address.
0010B2  3  D0 02        	bne :+
0010B4  3  E6 67        	inc z80_h
0010B6  3               :
0010B6  3  B1 66        	lda (z80_hl),y 		; address high.
0010B8  3  85 65        	sta z80_d
0010BA  3               
0010BA  3  48           	pha	 		; swap address into hl.
0010BB  3  A5 67        	lda z80_h
0010BD  3  85 65        	sta z80_d
0010BF  3  68           	pla
0010C0  3  85 67        	sta z80_h
0010C2  3  68           	pla
0010C3  3  85 66        	sta z80_l
0010C5  3  A5 66        	lda z80_l
0010C7  3  85 64        	sta z80_e
0010C9  3               	
0010C9  3  6C 66 00     	jmp (z80_hl) 		; go there.
0010CC  3               
0010CC  3  00 00        ogptr:	.word 0			; original sprite pointer.
0010CE  3               
0010CE  3               ; Address of each sprite type's routine.
0010CE  3               
0010CE  3  20 18        evtyp0:	.word evnt00
0010D0  3  2D 1A        evtyp1:	.word evnt01
0010D2  3  9F 1A        evtyp2:	.word evnt02
0010D4  3  73 1B        evtyp3:	.word evnt03
0010D6  3  EB 1B        evtyp4:	.word evnt04
0010D8  3  EC 1B        evtyp5:	.word evnt05
0010DA  3  70 1C        evtyp6:	.word evnt06
0010DC  3  71 1C        evtyp7:	.word evnt07
0010DE  3  0A 1D        evtyp8:	.word evnt08
0010E0  3               
0010E0  3               ;--------------------------------------------------------------
0010E0  3               ; Display sprites.
0010E0  3               ;
0010E0  3               ; Input:
0010E0  3               ;  IX = sprite table
0010E0  3               ;--------------------------------------------------------------
0010E0  3               
0010E0  3               dspr:
0010E0  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
0010E2  3  8D 73 11     	sta sprcnt
0010E5  3               dspr0:
0010E5  3  A0 00        	ldy #0
0010E7  3  B1 68        	lda (z80_ix),y 		; get sprite type.
0010E9  3  C9 FF        	cmp #255 		; is it enabled?
0010EB  3  D0 43        	bne dspr1 		; yes, it needs deleting.
0010ED  3               dspr5:
0010ED  3  A0 05        	ldy #5
0010EF  3  B1 68        	lda (z80_ix),y 		; new type.
0010F1  3  C9 FF        	cmp #255		; is it enabled?
0010F3  3  D0 78        	bne dspr3 		; yes, it needs drawing.
0010F5  3               dspr2:
0010F5  3  A0 05        	ldy #5
0010F7  3  B1 68        	lda (z80_ix),y 		; copy new type.
0010F9  3  A0 00        	ldy #0
0010FB  3  91 68        	sta (z80_ix),y
0010FD  3  A0 06        	ldy #6
0010FF  3  B1 68        	lda (z80_ix),y 		; copy new image number.
001101  3  A0 01        	ldy #1
001103  3  91 68        	sta (z80_ix),y
001105  3  A0 07        	ldy #7
001107  3  B1 68        	lda (z80_ix),y 		; copy new frame.
001109  3  A0 02        	ldy #2
00110B  3  91 68        	sta (z80_ix),y
00110D  3  A0 08        	ldy #8
00110F  3  B1 68        	lda (z80_ix),y 		; copy new y.
001111  3  A0 03        	ldy #3
001113  3  91 68        	sta (z80_ix),y
001115  3  A0 09        	ldy #9
001117  3  B1 68        	lda (z80_ix),y 		; copy new x.
001119  3  A0 04        	ldy #4
00111B  3  91 68        	sta (z80_ix),y
00111D  3               
00111D  3  18           	clc
00111E  3  A5 68        	lda z80_x
001120  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
001122  3  85 68        	sta z80_x
001124  3  A5 69        	lda z80_i
001126  3  69 00        	adc #0
001128  3  85 69        	sta z80_i 		; next sprite.
00112A  3  CE 73 11     	dec sprcnt
00112D  3  D0 B6        	bne dspr0		; repeat for remaining sprites.
00112F  3  60           	rts
001130  3               dspr1:
001130  3  A0 05        	ldy #5
001132  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
001134  3  C9 FF        	cmp #255		; is this enabled?
001136  3  D0 06        	bne dspr4 		; yes, display both.
001138  3               dspr6:
001138  3  20 08 12     	jsr sspria 		; show single sprite.
00113B  3  4C F5 10     	jmp dspr2
00113E  3               
00113E  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
00113E  3               
00113E  3               dspr4:
00113E  3  A0 04        	ldy #4
001140  3  B1 68        	lda (z80_ix),y		; old x.
001142  3  A0 09        	ldy #9
001144  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
001146  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
001148  3               
001148  3  A0 03        	ldy #3
00114A  3  B1 68        	lda (z80_ix),y		; old y.
00114C  3  A0 08        	ldy #8
00114E  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001150  3  D0 15        	bne dspr7		; they differ, need to redraw.
001152  3               
001152  3  A0 02        	ldy #2
001154  3  B1 68        	lda (z80_ix),y 		; old frame.
001156  3  A0 07        	ldy #7
001158  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
00115A  3  4C 67 11     	jmp dspr7 		; they differ, need to redraw.
00115D  3               
00115D  3  A0 01        	ldy #1
00115F  3  B1 68        	lda (z80_ix),y 		; old image.
001161  3  A0 06        	ldy #6
001163  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001165  3  F0 8E        	beq dspr2		; everything is the same, don't redraw.
001167  3               dspr7:
001167  3  20 20 12     	jsr sspric 		; delete old sprite, draw new one simultaneously.
00116A  3  4C F5 10     	jmp dspr2
00116D  3               dspr3:
00116D  3  20 1A 12     	jsr ssprib 		; show single sprite.
001170  3  4C F5 10     	jmp dspr2
001173  3               
001173  3  00           sprcnt:	.byte 0
001174  3               
001174  3               ;-----------------------------------------
001174  3               ; Get sprite address calculations.
001174  3               ; gspran = new sprite, gsprad = old sprite.
001174  3               ;
001174  3               ; Input:
001174  3               ;  IX = sprite address
001174  3               ;-----------------------------------------
001174  3               
001174  3               gspran:
001174  3  A0 08        	ldy #8
001176  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
001178  3  8D 64 02     	sta dispy
00117B  3  A0 09        	ldy #9
00117D  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
00117F  3  8D 63 02     	sta dispx
001182  3  A0 06        	ldy #6
001184  3  B1 68        	lda (z80_ix),y 		; new sprite image.
001186  3  20 DA 14     	jsr gfrm		; fetch start frame for this sprite.
001189  3               
001189  3  A0 00        	ldy #0
00118B  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
00118D  3  A0 07        	ldy #7
00118F  3  18           	clc
001190  3  71 68        	adc (z80_ix),y 		; new add frame number.
001192  3  4C B3 11     	jmp gspra0
001195  3               
001195  3               ;-----------------------------------------
001195  3               ; Calculate old sprite address
001195  3               ;
001195  3               ; Input:
001195  3               ;  IX = sprite address
001195  3               ;
001195  3               ; Output:
001195  3               ;  B  = right byte mask
001195  3               ;  C  = left byte mask
001195  3               ;  DE = spriteframe address
001195  3               ;  scraddr = screenaddress(dispx,dispy)
001195  3               ;-----------------------------------------
001195  3               
001195  3               gsprad:
001195  3  A0 03        	ldy #3
001197  3  B1 68        	lda (z80_ix),y		; y coordinate.
001199  3  8D 64 02     	sta dispy
00119C  3  A0 04        	ldy #4
00119E  3  B1 68        	lda (z80_ix),y		; x coordinate.
0011A0  3  8D 63 02     	sta dispx
0011A3  3  A0 01        	ldy #1
0011A5  3  B1 68        	lda (z80_ix),y 		; sprite image.
0011A7  3  20 DA 14     	jsr gfrm 		; fetch start frame for this sprite.
0011AA  3               
0011AA  3  A0 00        	ldy #0
0011AC  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0011AE  3  A0 02        	ldy #2
0011B0  3  18           	clc
0011B1  3  71 68        	adc (z80_ix),y 		; add frame number.
0011B3  3               gspra0:
0011B3  3  4A           	lsr a	  		; multiply by 128.
0011B4  3  85 65        	sta z80_d 		; store in d.
0011B6  3  A9 00        	lda #0
0011B8  3  6A           	ror a
0011B9  3  85 64        	sta z80_e 		; got low byte.
0011BB  3               
0011BB  3  18           	clc 			; address of play sprites.
0011BC  3  A5 64        	lda z80_e
0011BE  3  69 90        	adc #<sprgfx
0011C0  3  85 64        	sta z80_e
0011C2  3  A5 65        	lda z80_d
0011C4  3  69 21        	adc #>sprgfx
0011C6  3  85 65        	sta z80_d
0011C8  3               
0011C8  3  AD 63 02     	lda dispx 		; y coordinate.
0011CB  3  29 06        	and #6 			; position within byte boundary.
0011CD  3  AA           	tax	 		; low byte of table displacement.
0011CE  3               
0011CE  3  0A           	asl a	  		; multiply by 32.
0011CF  3  0A           	asl a  			; already a multiple
0011D0  3  0A           	asl a  			; of 2, so just 4
0011D1  3  0A           	asl a  			; shifts needed.
0011D2  3               
0011D2  3  18           	clc 			; add to sprite address.
0011D3  3  65 64        	adc z80_e
0011D5  3  85 64        	sta z80_e
0011D7  3  90 02        	bcc :+
0011D9  3  E6 65        	inc z80_d
0011DB  3               :
0011DB  3  BD 00 12     	lda spmask,x		 ; pointer to mask table.
0011DE  3  85 62        	sta z80_c 		; left mask.
0011E0  3  BD 01 12     	lda spmask+1,x
0011E3  3  85 63        	sta z80_b 		; right mask.
0011E5  3               
0011E5  3               ;------------------------------------------------------------------
0011E5  3               ; Drop into screen address routine.
0011E5  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
0011E5  3               ;------------------------------------------------------------------
0011E5  3               
0011E5  3               scadd:
0011E5  3  AE 64 02     	ldx dispy
0011E8  3  E0 C0        	cpx #192
0011EA  3  90 02        	bcc :+
0011EC  3  A2 C0        	ldx #192
0011EE  3               :
0011EE  3  AD 63 02     	lda dispx
0011F1  3  4A           	lsr a
0011F2  3  4A           	lsr a
0011F3  3  4A           	lsr a
0011F4  3  18           	clc
0011F5  3  7D 00 9B     	adc SCADTB_lb,x
0011F8  3  85 80        	sta scraddr
0011FA  3  BD 00 9C     	lda SCADTB_hb,x
0011FD  3  85 81        	sta scraddr+1
0011FF  3  60           	rts
001200  3               
001200  3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
001204  3  0F F0 03 FC  
001208  3               
001208  3               
001208  3               ;-----------------------------------------------------------------
001208  3               ; These are the sprite routines.
001208  3               ; sspria = single sprite, old (ix).
001208  3               ; ssprib = single sprite, new (ix+5).
001208  3               ; sspric = both sprites, old (ix) and new (ix+5).
001208  3               ;-----------------------------------------------------------------
001208  3               
001208  3               sspria:
001208  3  20 95 11     	jsr gsprad		; get old sprite address.
00120B  3               sspri2:
00120B  3  A9 10        	lda #16			; vertical lines.
00120D  3  8D 19 12     	sta acnt
001210  3               sspri0:
001210  3  20 43 12     	jsr dline		; draw a line.
001213  3  CE 19 12     	dec acnt
001216  3  D0 F8        	bne sspri0		; repeat 16 times
001218  3  60           	rts
001219  3               
001219  3  00           acnt:	.byte 0
00121A  3               
00121A  3               ;-----------------------------------------------------------------
00121A  3               
00121A  3               ssprib:
00121A  3  20 74 11     	jsr gspran 		; get new sprite address.
00121D  3  4C 0B 12     	jmp sspri2
001220  3               
001220  3               ;-----------------------------------------------------------------
001220  3               
001220  3               ccnt = $7c
001220  3               
001220  3               sspric:
001220  3  20 95 11     	jsr gsprad 		; get old sprite address.
001223  3  20 66 55     	jsr exx  		; store addresses.
001226  3  20 74 11     	jsr gspran 		; get new sprite addresses.
001229  3               
001229  3  A9 0F        	lda #15
00122B  3  85 7C        	sta ccnt
00122D  3               lloop:
00122D  3  20 43 12     	jsr dline 		; draw a line.
001230  3  20 66 55     	jsr exx  		; restore old addresses.
001233  3  20 43 12     	jsr dline 		; delete a line.
001236  3  20 66 55     	jsr exx  		; flip to new sprite addresses.
001239  3  C6 7C        	dec ccnt
00123B  3  D0 F0        	bne lloop
00123D  3               
00123D  3  20 43 12     	jsr dline		; draw a line.
001240  3  20 66 55     	jsr exx 		; restore old addresses.
001243  3               
001243  3               ;-------------------------------------------------------------
001243  3               ; Drop through.
001243  3               ; Line drawn, now work out next target address.
001243  3               ;
001243  3               ; Input:
001243  3               ;  B  = right mask
001243  3               ;  C  = left mask
001243  3               ;  DE = spriteaddress
001243  3               ;  scraddr = screen address
001243  3               ;-------------------------------------------------------------
001243  3               
001243  3               dline:
001243  3  A0 00        	ldy #0
001245  3  B1 64        	lda (z80_de),y 		; graphic data.
001247  3  25 62        	and z80_c 		; mask away what's not needed.
001249  3  51 80        	eor (scraddr),y 	; XOR with what's there.
00124B  3  91 80        	sta (scraddr),y 	; bung it in.
00124D  3               
00124D  3  E6 80        	inc scraddr 		; next screen address.
00124F  3  E6 80        	inc scraddr 		; next screen address.
001251  3               
001251  3  B1 64        	lda (z80_de),y 		; fetch data.
001253  3  25 63        	and z80_b 		; mask away unwanted bits.
001255  3  51 80        	eor (scraddr),y 	; XOR with what's there.
001257  3  91 80        	sta (scraddr),y 	; bung it in.
001259  3               
001259  3  E6 64        	inc z80_e 		; next graphic.
00125B  3  D0 02        	bne :+
00125D  3  E6 65        	inc z80_d
00125F  3               :
00125F  3  C6 80        	dec scraddr 		; one character cell to the left.
001261  3               
001261  3  B1 64        	lda (z80_de),y 		; second bit of data.
001263  3  51 80        	eor (scraddr),y 	; XOR with what's there.
001265  3  91 80        	sta (scraddr),y 	; bung it in.
001267  3               
001267  3  E6 64        	inc z80_e 		; point to next line of data.
001269  3  D0 02        	bne :+
00126B  3  E6 65        	inc z80_d
00126D  3               :
00126D  3  C6 80        	dec scraddr 		; another char left.
00126F  3               
00126F  3               ;----------------------------------------------------------------------
00126F  3               ; Line drawn, now work out next target address.
00126F  3               ;----------------------------------------------------------------------
00126F  3               
00126F  3               nline:
00126F  3  18           	clc
001270  3  A5 80        	lda scraddr 		; get low byte of address.
001272  3  69 20        	adc #$20
001274  3  85 80        	sta scraddr 		; new low byte of address.
001276  3  90 02        	bcc :+
001278  3  E6 81        	inc scraddr+1 		; new high byte of address.
00127A  3               :
00127A  3  60           	rts
00127B  3               
00127B  3               ;-----------------------------------------------------------
00127B  3               ; Animates a sprite.
00127B  3               ;
00127B  3               ; Input:
00127B  3               ;  IX = sprite address
00127B  3               ;  HL = last sprite address
00127B  3               ;-----------------------------------------------------------
00127B  3               
00127B  3               animsp:
00127B  3  A0 06        	ldy #6
00127D  3  B1 68        	lda (z80_ix),y		; sprite image
00127F  3  20 DA 14     	jsr gfrm		; get frame data.
001282  3               
001282  3  E6 66        	inc z80_l		; point to frames.
001284  3  D0 02        	bne :+
001286  3  E6 67        	inc z80_h
001288  3               :
001288  3  A0 07        	ldy #7
00128A  3  B1 68        	lda (z80_ix),y		; sprite frame.
00128C  3  18           	clc
00128D  3  69 01        	adc #1			; next one along.
00128F  3  A0 00        	ldy #0
001291  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
001293  3  90 02        	bcc anims0		; no, not yet.
001295  3  A9 00        	lda #0			; start at first frame.
001297  3               anims0:
001297  3  A0 07        	ldy #7
001299  3  91 68        	sta (z80_ix),y		; new frame.
00129B  3  60           	rts
00129C  3               
00129C  3               ;--------------------------------------------------------------
00129C  3               ; Animate back
00129C  3               ;
00129C  3               ; Input:
00129C  3               ;  IX = sprite address
00129C  3               ;  HL = last sprite address
00129C  3               ;--------------------------------------------------------------
00129C  3               
00129C  3               animbk:
00129C  3  A0 06        	ldy #6
00129E  3  B1 68        	lda (z80_ix),y		; sprite image.
0012A0  3  20 DA 14     	jsr gfrm		; get frame data.
0012A3  3               
0012A3  3  E6 66        	inc z80_l 		; point to frames.
0012A5  3  D0 02        	bne :+
0012A7  3  E6 67        	inc z80_h
0012A9  3               :
0012A9  3  A0 07        	ldy #7
0012AB  3  B1 68        	lda (z80_ix),y 		; sprite frame.
0012AD  3  F0 03        	beq :+
0012AF  3  4C B6 12     	jmp rtanb0 		; yes, start at end.
0012B2  3               :
0012B2  3  A0 00        	ldy #0
0012B4  3  B1 66        	lda (z80_hl),y 		; last sprite.
0012B6  3               rtanb0:
0012B6  3  38           	sec
0012B7  3  E9 01        	sbc #1			; next one along.
0012B9  3  4C 97 12     	jmp anims0		; set new frame.
0012BC  3               
0012BC  3               ;--------------------------------------------------------------
0012BC  3               ; Check for collision with other sprite, strict enforcement.
0012BC  3               ;
0012BC  3               ; Input:
0012BC  3               ;  b		= sprite to test for
0012BC  3               ;  ix		= current sprite pointer
0012BC  3               ;
0012BC  3               ; global:	b
0012BC  3               ; local:	x,y,hl,de,skptr
0012BC  3               ; calls:	-
0012BC  3               ;--------------------------------------------------------------
0012BC  3               
0012BC  3               sktyp:
0012BC  3  A9 CB        	lda #<sprtab				; sprite table.
0012BE  3  85 66        	sta z80_l
0012C0  3  A9 16        	lda #>sprtab
0012C2  3  85 67        	sta z80_h
0012C4  3               numsp2:
0012C4  3  A9 0C        	lda #NUMSPR				; number of sprites.
0012C6  3  8D FF 12     	sta sktptr
0012C9  3               sktyp0:
0012C9  3  A5 66        	lda z80_l 				; store pointer to sprite.
0012CB  3  8D FD 12     	sta skptr
0012CE  3  A5 67        	lda z80_h
0012D0  3  8D FE 12     	sta skptr+1
0012D3  3               
0012D3  3  A0 00        	ldy #0
0012D5  3  B1 66        	lda (z80_hl),y 				; get sprite type.
0012D7  3  C5 63        	cmp z80_b				; is it the type we seek?
0012D9  3  F0 25        	beq coltyp				; yes, we can use this one.
0012DB  3               :
0012DB  3               sktyp1:
0012DB  3  18           	clc
0012DC  3  AD FD 12     	lda skptr				; retrieve sprite pointer.
0012DF  3  69 11        	adc #TABSIZ				; size of each entry.
0012E1  3  85 66        	sta z80_l
0012E3  3  AD FE 12     	lda skptr+1
0012E6  3  69 00        	adc #0
0012E8  3  85 67        	sta z80_h
0012EA  3  CE FF 12     	dec sktptr					; one less iteration.
0012ED  3  D0 DA        	bne sktyp0				; keep going until we find a slot.
0012EF  3               :
0012EF  3  A9 00        	lda #0					; default to ROM address - no sprite.
0012F1  3  85 66        	sta z80_l
0012F3  3  85 67        	sta z80_h
0012F5  3  8D FD 12     	sta skptr				; store pointer to sprite.
0012F8  3  8D FE 12     	sta skptr+1
0012FB  3               
0012FB  3  18           	clc					; don't return with zero flag set.
0012FC  3  60           	rts 					; didn't find one.
0012FD  3               
0012FD  3  00 00        skptr:	.word 0					; search pointer.
0012FF  3  00           sktptr:	.byte 0
001300  3               
001300  3               coltyp:
001300  3  A0 00        	ldy #0
001302  3  B1 68        	lda (z80_ix),y				; current sprite type.
001304  3  C5 63        	cmp z80_b				; seeking sprite of same type?
001306  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
001308  3               colty0:
001308  3  A0 09        	ldy #9					; distance to x position in table.
00130A  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
00130C  3  85 64        	sta z80_e
00130E  3  88           	dey
00130F  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
001311  3  85 65        	sta z80_d
001313  3               
001313  3               ; Drop into collision detection.
001313  3               
001313  3               colc16:
001313  3  A0 09        	ldy #9
001315  3  B1 68        	lda (z80_ix),y			 	; x coord.
001317  3  38           	sec					; subtract x.
001318  3  E5 64        	sbc z80_e
00131A  3  B0 05        	bcs  colc1a 				; result is positive.
00131C  3  49 FF        	eor #$ff				; make negative positive.
00131E  3  18           	clc
00131F  3  69 01        	adc #1
001321  3               colc1a:
001321  3  C9 10        	cmp #16 				; within x range?
001323  3  B0 B6        	bcs sktyp1				; no - they"ve missed.
001325  3  85 62        	sta z80_c				; store difference.
001327  3               
001327  3  A0 08        	ldy #8
001329  3  B1 68        	lda (z80_ix),y				; y coord.
00132B  3  38           	sec
00132C  3  E5 65        	sbc z80_d				; subtract y.
00132E  3  B0 05        	bcs colc1b				; result is positive.
001330  3  49 FF        	eor #$ff				; make negative positive.
001332  3  18           	clc
001333  3  69 01        	adc #1
001335  3               colc1b:
001335  3  C9 10        	cmp #16					; within y range?
001337  3  B0 A2        	bcs sktyp1 				; no - they've missed.
001339  3  18           	clc					; add x difference.
00133A  3  65 62        	adc z80_c
00133C  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
00133E  3  B0 02        	bcs :+
001340  3  38           	sec
001341  3  60           	rts 					; carry set if there's a collision.
001342  3               :
001342  3  4C DB 12     	jmp sktyp1				; try next sprite in table.
001345  3               colty1:
001345  3  A5 68        	lda z80_x  				; compare the two.
001347  3  C5 66        	cmp z80_l
001349  3  D0 09        	bne end_col
00134B  3  A5 69        	lda z80_i
00134D  3  C5 67        	cmp z80_h
00134F  3  D0 03        	bne end_col
001351  3  4C DB 12     	jmp sktyp1 				; addresses are identical.
001354  3               end_col:
001354  3  4C 08 13     	jmp colty0
001357  3               
001357  3               ;-----------------------------------------------------------
001357  3               ; Display number, left aligned
001357  3               ; 
001357  3               ; Input:
001357  3               ;  a		= number
001357  3               ;
001357  3               ; global:	-
001357  3               ; local:	a,y,bc,hl,displ0
001357  3               ; calls:	num2ch,dmsg3
001357  3               ;-----------------------------------------------------------
001357  3               
001357  3               disply:
001357  3  85 61        	sta z80_a
001359  3  A9 7F        	lda #<displ0				; display workspace.
00135B  3  85 62        	sta z80_c
00135D  3  A9 13        	lda #>displ0
00135F  3  85 63        	sta z80_b
001361  3  A5 61        	lda z80_a
001363  3  20 0C 05     	jsr num2ch				; convert accumulator to string.
001366  3               
001366  3  C6 62        	dec z80_c				; back one character.
001368  3  D0 02        	bne :+
00136A  3  C6 63        	dec z80_b
00136C  3               :
00136C  3  A0 00        	ldy #0
00136E  3  B1 62        	lda (z80_bc),y				; fetch digit.
001370  3  09 80        	ora #128				; insert end marker.
001372  3  91 62        	sta (z80_bc),y				; new value.
001374  3               
001374  3  A9 7F        	lda #<displ0				; display space.
001376  3  85 66        	sta z80_l
001378  3  A9 13        	lda #>displ0
00137A  3  85 67        	sta z80_h
00137C  3  4C 82 0E     	jmp dmsg3				; display the string.
00137F  3               
00137F  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
001383  3               
001383  3               ;----------------------------------------------------------------
001383  3               ; Initialise screen.
001383  3               ;
001383  3               ; global:	roomtb,scno
001383  3               ; local:	-
001383  3               ; calls:	tstcs
001383  3               ;----------------------------------------------------------------
001383  3               
001383  3               initsc:
001383  3  AD A8 17     	lda roomtb 			; whereabouts in the map are we?
001386  3  20 91 13     	jsr tstsc 			; find displacement.
001389  3  C9 FF        	cmp #255 			; is it valid?
00138B  3  F0 03        	beq init_end 			; no, it's rubbish.
00138D  3  8D 3E 02     	sta scno			; store new room number.
001390  3               init_end:
001390  3  60           	rts
001391  3               
001391  3               ;----------------------------------------------------------------
001391  3               ; Test screen.
001391  3               ;
001391  3               ; global:	-
001391  3               ; local:	x
001391  3               ; calls:	-
001391  3               ;----------------------------------------------------------------
001391  3               
001391  3               tstsc:
001391  3  8D 9C 13     	sta tmproom
001394  3  18           	clc
001395  3  69 0B        	adc #MAPWID 			; add width in case we"re negative.
001397  3  AA           	tax 				; add displacement to map data.
001398  3  BD B1 17     	lda mapdat-MAPWID,x 		; find room number there.
00139B  3  60           	rts
00139C  3               
00139C  3  00           tmproom:	.byte 0
00139D  3               
00139D  3               ;--------------------------
00139D  3               ; Screen left.
00139D  3               ;--------------------------
00139D  3               
00139D  3               scrl:
00139D  3  AD A8 17     	lda roomtb 			; present room table pointer.
0013A0  3  38           	sec
0013A1  3  E9 01        	sbc #1				; room left.
0013A3  3               scrl0:
0013A3  3  20 91 13     	jsr tstsc			; test screen.
0013A6  3  C9 FF        	cmp #255			; is there a screen this way?
0013A8  3  D0 01        	bne :+
0013AA  3  60           	rts				; no, return to loop.
0013AB  3               :
0013AB  3  AD 9C 13     	lda tmproom			; restore room displacement.
0013AE  3  8D A8 17     	sta roomtb			; new room table position.
0013B1  3               scrl1:
0013B1  3  20 83 13     	jsr initsc 			; set new screen.
0013B4  3  A9 02        	lda #2
0013B6  3  8D 60 02     	sta restfl 			; set it.
0013B9  3  60           	rts
0013BA  3               scrr:
0013BA  3  AD A8 17     	lda roomtb 			; room table pointer.
0013BD  3  18           	clc
0013BE  3  69 01        	adc #1				; room right.
0013C0  3  4C A3 13     	jmp scrl0
0013C3  3               scru:
0013C3  3  AD A8 17     	lda roomtb 			; room table pointer.
0013C6  3  38           	sec
0013C7  3  E9 0B        	sbc #MAPWID 			; room up.
0013C9  3  4C A3 13     	jmp scrl0
0013CC  3               scrd:
0013CC  3  AD A8 17     	lda roomtb 			; room table pointer.
0013CF  3  18           	clc
0013D0  3  69 0B        	adc #MAPWID 			; room down.
0013D2  3  4C A3 13     	jmp scrl0
0013D5  3               
0013D5  3               ;-----------------------------------------
0013D5  3               ; Jump to new screen.
0013D5  3               ;-----------------------------------------
0013D5  3               
0013D5  3               nwscr:
0013D5  3  A2 00        	ldx #0				; start of map data.
0013D7  3               nwscr0:
0013D7  3  DD BC 17     	cmp mapdat,x
0013DA  3  F0 06        	beq nwscr1			; have we found a match for screen?
0013DC  3  E8           	inx 				; next room.
0013DD  3  E0 50        	cpx #80				; zero room count, 80 to search.
0013DF  3  D0 F6        	bne nwscr0			; keep looking.
0013E1  3  60           	rts
0013E2  3               nwscr1:
0013E2  3  8E A8 17     	stx roomtb			; set the map position.
0013E5  3  4C B1 13     	jmp scrl1			; draw new room.
0013E8  3               
0013E8  3               
0013E8  3               ;----------------------------------------------------------
0013E8  3               ; Gravity processing.
0013E8  3               ;----------------------------------------------------------
0013E8  3               
0013E8  3               grav:
0013E8  3  A0 0D        	ldy #13
0013EA  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0013EC  3  85 66        	sta z80_l
0013EE  3  A0 0E        	ldy #14
0013F0  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0013F2  3  85 67        	sta z80_h
0013F4  3  05 66        	ora z80_l			; merge in low byte.
0013F6  3  D0 01        	bne :+
0013F8  3  60           	rts				; if neither is set, we're not in the air.
0013F9  3               :
0013F9  3  A0 00        	ldy #0
0013FB  3  B1 66        	lda (z80_hl),y			; pixels to move.
0013FD  3  85 61        	sta z80_a
0013FF  3  C9 63        	cmp #99				; reached the end?
001401  3  D0 06        	bne grav0			; no, continue.
001403  3               grav2:
001403  3  C6 66        	dec z80_l			; go back to previous value.
001405  3  B1 66        	lda (z80_hl),y			; fetch that from table.
001407  3  85 61        	sta z80_a
001409  3               grav0:
001409  3  E6 66        	inc z80_l			; point to next table entry.
00140B  3  A5 66        	lda z80_l
00140D  3  A0 0D        	ldy #13
00140F  3  91 68        	sta (z80_ix),y			; store new pointer low.
001411  3  A5 67        	lda z80_h
001413  3  A0 0E        	ldy #14
001415  3  91 68        	sta (z80_ix),y			; store new pointer high.
001417  3               grav1:
001417  3  A5 61        	lda z80_a
001419  3  D0 01        	bne :+				; any movement required?
00141B  3  60           	rts				; no, not this time.
00141C  3               :
00141C  3  A5 61        	lda z80_a
00141E  3  C9 80        	cmp #128			; is it up or down?
001420  3  B0 15        	bcs gravu			; it's up.
001422  3               gravd:
001422  3  85 63        	sta z80_b			; set pixels to move.
001424  3               gravd0:
001424  3  20 73 0B     	jsr cangd			; can we go down?
001427  3  D0 28        	bne gravst			; can't move down, so stop.
001429  3  A0 08        	ldy #8
00142B  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
00142D  3  18           	clc
00142E  3  69 01        	adc #1
001430  3  91 68        	sta (z80_ix),y
001432  3  C6 63        	dec z80_b
001434  3  D0 EE        	bne gravd0
001436  3  60           	rts
001437  3               gravu:
001437  3  49 FF        	eor #$ff			; flip the sign so it's positive.
001439  3  18           	clc
00143A  3  69 01        	adc #1
00143C  3  85 63        	sta z80_b			; set pixels to move.
00143E  3               gravu0:
00143E  3  20 3B 0B     	jsr cangu			; can we go up?
001441  3  D0 71        	bne ifalls			; can't move up, go down next.
001443  3  A0 08        	ldy #8
001445  3  B1 68        	lda (z80_ix),y
001447  3  38           	sec
001448  3  E9 01        	sbc #1
00144A  3  91 68        	sta (z80_ix),y			; adjust new x coord.
00144C  3  C6 63        	dec z80_b
00144E  3  D0 EE        	bne gravu0
001450  3  60           	rts
001451  3               gravst:
001451  3  A0 0D        	ldy #13
001453  3  B1 68        	lda (z80_ix),y			; jump pointer low.
001455  3  85 66        	sta z80_l
001457  3  A0 0E        	ldy #14
001459  3  B1 68        	lda (z80_ix),y			; jump pointer high.
00145B  3  85 67        	sta z80_h
00145D  3               
00145D  3  A9 00        	lda #0				; null value in pointer.
00145F  3  A0 0D        	ldy #13
001461  3  91 68        	sta (z80_ix),y			; store new pointer low.
001463  3  C8           	iny
001464  3  91 68        	sta (z80_ix),y			; store new pointer high.
001466  3               
001466  3  A0 00        	ldy #0
001468  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
00146A  3  C9 63        	cmp #99				; is it the end marker?
00146C  3               evftf:
00146C  3  F0 01        	beq :+				; yes, fallen too far.
00146E  3  60           	rts
00146F  3               :
00146F  3  4C 0E 1E     	jmp evnt15			; EVENT FELLTOOFAR
001472  3               
001472  3               ;------------------------------------------------
001472  3               ; Initiate fall check.
001472  3               ;------------------------------------------------
001472  3               
001472  3               ifall:
001472  3  A0 0D        	ldy #13
001474  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
001476  3  85 66        	sta z80_l
001478  3  A0 0E        	ldy #14
00147A  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
00147C  3  85 67        	sta z80_h			; high byte in accumulator.
00147E  3  05 66        	ora z80_l			; merge in low byte.
001480  3  F0 01        	beq :+
001482  3  60           	rts				; if either is set, we're already in the air.
001483  3               :
001483  3  A0 09        	ldy #9
001485  3  B1 68        	lda (z80_ix),y			; y coordinate.
001487  3  8D 63 02     	sta dispx
00148A  3               numsp7:
00148A  3  A0 08        	ldy #8
00148C  3  B1 68        	lda (z80_ix),y			; look x coordinate.
00148E  3  18           	clc
00148F  3  69 10        	adc #16				; add 16 pixels.
001491  3  8D 64 02     	sta dispy			; set up test coordinates.
001494  3  20 FB 0C     	jsr tstbl			; get map address.
001497  3  20 0D 0C     	jsr plchk			; block, platform check.
00149A  3  F0 01        	beq :+
00149C  3  60           	rts				; it's solid, don't fall.
00149D  3               :
00149D  3  E6 86        	inc bufaddr			; look right one cell.
00149F  3  20 0D 0C     	jsr plchk			; block, platform check.
0014A2  3  F0 01        	beq :+
0014A4  3  60           	rts				; it's solid, don't fall.
0014A5  3               :
0014A5  3  AD 63 02     	lda dispx			; y coordinate.
0014A8  3  29 07        	and #7				; position straddling block cells.
0014AA  3  F0 08        	beq ifalls			; no more checks needed.
0014AC  3  E6 86        	inc bufaddr			; look to third cell.
0014AE  3  20 0D 0C     	jsr plchk			; block, platform check.
0014B1  3  F0 01        	beq :+
0014B3  3  60           	rts				; it's solid, don't fall.
0014B4  3               :
0014B4  3               ifalls:
0014B4  3  A9 4B        	lda #<jtab			; jump table start.
0014B6  3  85 66        	sta z80_l
0014B8  3  A9 0D        	lda #>jtab
0014BA  3  85 67        	sta z80_h
0014BC  3               ifal0:
0014BC  3  E6 66        	inc z80_l			; point to next value.
0014BE  3  A0 00        	ldy #0
0014C0  3  B1 66        	lda (z80_hl),y			; fetch value.
0014C2  3  F0 F8        	beq ifal0			; no, get next value.
0014C4  3  C9 63        	cmp #99				; reached end of table?
0014C6  3  D0 01        	bne :+
0014C8  3  60           	rts				; yes, don't fall.
0014C9  3               :
0014C9  3  C9 80        	cmp #128			; is it going up?
0014CB  3  B0 EF        	bcs ifal0			; yes, looking for first movement down.
0014CD  3               
0014CD  3  A0 0D        	ldy #13
0014CF  3  A5 66        	lda z80_l
0014D1  3  91 68        	sta (z80_ix),y 			; set jump low.
0014D3  3  A0 0E        	ldy #14
0014D5  3  A5 67        	lda z80_h
0014D7  3  91 68        	sta (z80_ix),y 			; set jump high.
0014D9  3  60           	rts
0014DA  3               
0014DA  3               
0014DA  3               ;----------------------------------------------------
0014DA  3               ; Get frame data for a particular sprite.
0014DA  3               ; Input:
0014DA  3               ;  a		= framenumer
0014DA  3               ; Output:
0014DA  3               ;  hl		= frame address
0014DA  3               ;
0014DA  3               ; global:	hl,frmptr
0014DA  3               ; local:	-
0014DA  3               ; calls:	-
0014DA  3               ;----------------------------------------------------
0014DA  3               
0014DA  3               gfrm:
0014DA  3  0A           	asl a	 		 	; multiple of 2.
0014DB  3  18           	clc
0014DC  3  6D 65 02     	adc frmptr 			; frames used by game.
0014DF  3  85 66        	sta z80_l
0014E1  3  AD 66 02     	lda frmptr+1
0014E4  3  69 00        	adc #0
0014E6  3  85 67        	sta z80_h 			; point to frame start.
0014E8  3  60           	rts
0014E9  3               
0014E9  3               ;----------------------------------------------------
0014E9  3               ; Find sprite list for current room.
0014E9  3               ;
0014E9  3               ; global:	hl
0014E9  3               ; local:	x,y
0014E9  3               ; calls:	-
0014E9  3               ;----------------------------------------------------
0014E9  3               
0014E9  3               sprlst:
0014E9  3  A9 A4        	lda #<nmedat 			; list of enemy sprites.
0014EB  3  85 66        	sta z80_l
0014ED  3  A9 49        	lda #>nmedat
0014EF  3  85 67        	sta z80_h
0014F1  3  AE 3E 02     	ldx scno 			; screen number.
0014F4  3  D0 01        	bne sprls2 			; is it the first screen?
0014F6  3  60           	rts 				; yes, don't need to search data.
0014F7  3               sprls2:
0014F7  3  A0 00        	ldy #0
0014F9  3               sprls1:
0014F9  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
0014FB  3  C9 FF        	cmp #255			; is it an end marker?
0014FD  3  F0 0E        	beq sprls0 			; yes, end of this room.
0014FF  3               
0014FF  3  18           	clc 				; point to next sprite in list.
001500  3  A5 66        	lda z80_l
001502  3  69 04        	adc #NMESIZ
001504  3  85 66        	sta z80_l
001506  3  90 02        	bcc :+
001508  3  E6 67        	inc z80_h
00150A  3               :
00150A  3  4C F9 14     	jmp sprls1 			; continue until end of room.
00150D  3               sprls0:
00150D  3  E6 66        	inc z80_l 			; point to start of next screen.s
00150F  3  D0 02        	bne :+
001511  3  E6 67        	inc z80_h
001513  3               :
001513  3  CA           	dex
001514  3  D0 E3        	bne sprls1 			; continue until room found.
001516  3  60           	rts
001517  3               
001517  3               
001517  3               ;----------------------------------------------------
001517  3               ; Clear all but a single player sprite.
001517  3               ;
001517  3               ; global:	-
001517  3               ; local:	x,y,ix
001517  3               ; calls:	-
001517  3               ;----------------------------------------------------
001517  3               
001517  3               nspr:
001517  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001519  3  8D 73 11     	sta sprcnt
00151C  3  A9 CB        	lda #<sprtab 			; sprite table.
00151E  3  85 68        	sta z80_x
001520  3  A9 16        	lda #>sprtab
001522  3  85 69        	sta z80_i
001524  3               nspr0:
001524  3  A0 00        	ldy #0 				; fetch sprite type.
001526  3  B1 68        	lda (z80_ix),y 			; is it a player?
001528  3  F0 1B        	beq nspr1 			; yes, keep this one.
00152A  3               
00152A  3  A9 FF        	lda #255
00152C  3  A0 00        	ldy #0 				; fetch sprite type.
00152E  3  91 68        	sta (z80_ix),y 			; delete sprite.
001530  3  A0 05        	ldy #5
001532  3  91 68        	sta (z80_ix),y 			; remove next type.
001534  3               
001534  3  18           	clc	 			; next sprite.
001535  3  A5 68        	lda z80_x
001537  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001539  3  85 68        	sta z80_x
00153B  3  90 02        	bcc :+
00153D  3  E6 69        	inc z80_i
00153F  3               :
00153F  3  CE 73 11     	dec sprcnt	 			; one less space in the table.
001542  3  D0 E0        	bne nspr0
001544  3  60           	rts
001545  3               nspr1:
001545  3  A9 FF        	lda #255
001547  3  A0 00        	ldy #0
001549  3  91 68        	sta (z80_ix),y 			; delete sprite.
00154B  3               
00154B  3  18           	clc	 			; point to next sprite.
00154C  3  A5 68        	lda z80_x
00154E  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001550  3  85 68        	sta z80_x
001552  3  90 02        	bcc :+
001554  3  E6 69        	inc z80_i
001556  3               :
001556  3  CE 73 11     	dec sprcnt	 			; one less to do.
001559  3  D0 01        	bne nspr2
00155B  3  60           	rts
00155C  3               nspr2:
00155C  3  A9 FF        	lda #255
00155E  3  A0 00        	ldy #0
001560  3  91 68        	sta (z80_ix),y 			; delete sprite.
001562  3  A0 05        	ldy #5
001564  3  91 68        	sta (z80_ix),y 			; remove next type.
001566  3               
001566  3  18           	clc	 			; next sprite.
001567  3  A5 68        	lda z80_x
001569  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00156B  3  85 68        	sta z80_x
00156D  3  90 02        	bcc :+
00156F  3  E6 69        	inc z80_i
001571  3               :
001571  3  CE 73 11     	dec sprcnt	 			; one less space in table.
001574  3  D0 E6        	bne nspr2
001576  3  60           	rts
001577  3               
001577  3               ;----------------------------------------------------------
001577  3               ; Two initialisation routines.
001577  3               ; Initialise sprites - copy everything from list to table.
001577  3               ;
001577  3               ; global:	-
001577  3               ; local:	x,y,ix
001577  3               ; calls:	cpsp
001577  3               ;----------------------------------------------------------
001577  3               
001577  3               ispr:
001577  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001579  3  8D 73 11     	sta sprcnt
00157C  3  A9 CB        	lda #<sprtab			; sprite table.
00157E  3  85 68        	sta z80_x
001580  3  A9 16        	lda #>sprtab
001582  3  85 69        	sta z80_i
001584  3               ispr2:
001584  3  A0 00        	ldy #0
001586  3  B1 66        	lda (z80_hl),y 			; fetch byte.
001588  3  C9 FF        	cmp #255 			; is it an end marker?
00158A  3  D0 01        	bne :+
00158C  3  60           	rts 				; yes, no more to do.
00158D  3               :
00158D  3               ispr1:
00158D  3  A0 00        	ldy #0
00158F  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
001591  3  C9 FF        	cmp #255 			; is it enabled yet?
001593  3  D0 08        	bne ispr4			; yes, try another slot.
001595  3               
001595  3  A0 05        	ldy #5
001597  3  B1 68        	lda (z80_ix),y		 	; next type.
001599  3  C9 FF        	cmp #255 			; is it enabled yet?
00159B  3  F0 11        	beq ispr3 			; no, process this one.
00159D  3               ispr4:
00159D  3  18           	clc 				; next sprite.
00159E  3  A5 68        	lda z80_x
0015A0  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0015A2  3  85 68        	sta z80_x
0015A4  3  90 02        	bcc :+
0015A6  3  E6 69        	inc z80_i
0015A8  3               :
0015A8  3  CE 73 11     	dec sprcnt
0015AB  3  D0 E0        	bne ispr1 			; repeat for remaining sprites.
0015AD  3  60           	rts  				; no more room in table.
0015AE  3               ispr3:
0015AE  3  20 02 16     	jsr cpsp			; initialise a sprite.
0015B1  3  CE 73 11     	dec sprcnt			; one less space in the table.
0015B4  3  D0 CE        	bne ispr2
0015B6  3  60           	rts
0015B7  3               
0015B7  3               
0015B7  3               ;-----------------------------------------------------------------------
0015B7  3               ; Initialise sprites - but not player, we're keeping the old one.
0015B7  3               ;
0015B7  3               ; global:	-
0015B7  3               ; local:	x,y,ix
0015B7  3               ; calls:	cpsp
0015B7  3               ;-----------------------------------------------------------------------
0015B7  3               
0015B7  3               kspr:
0015B7  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
0015B9  3  A9 CB        	lda #<sprtab 			; sprite table.
0015BB  3  85 68        	sta z80_x
0015BD  3  A9 16        	lda #>sprtab
0015BF  3  85 69        	sta z80_i
0015C1  3               kspr2:
0015C1  3  A0 00        	ldy #0
0015C3  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0015C5  3  C9 FF        	cmp #255 			; is it an end marker?
0015C7  3  D0 01        	bne :+
0015C9  3  60           	rts 				; yes, no more to do.
0015CA  3               :
0015CA  3  C9 00        	cmp #0
0015CC  3  D0 0E        	bne kspr1 			; no, add to table as normal.
0015CE  3               
0015CE  3  18           	clc 				; next sprite.
0015CF  3  A5 66        	lda z80_l
0015D1  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
0015D3  3  85 66        	sta z80_l
0015D5  3  90 02        	bcc :+
0015D7  3  E6 67        	inc z80_h
0015D9  3               :
0015D9  3  4C C1 15     	jmp kspr2
0015DC  3               kspr1:
0015DC  3  A0 00        	ldy #0 				; fetch sprite type.
0015DE  3  B1 68        	lda (z80_ix),y
0015E0  3  C9 FF        	cmp #255 			; is it enabled yet?
0015E2  3  D0 08        	bne kspr4 			; yes, try another slot.
0015E4  3               
0015E4  3  A0 05        	ldy #5 				; next type.
0015E6  3  B1 68        	lda (z80_ix),y
0015E8  3  C9 FF        	cmp #255 			; is it enabled yet?
0015EA  3  F0 0F        	beq kspr3 			; no, process this one.
0015EC  3               kspr4:
0015EC  3  18           	clc 				; next sprite.
0015ED  3  A5 68        	lda z80_x
0015EF  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0015F1  3  85 68        	sta z80_x
0015F3  3  90 02        	bcc :+
0015F5  3  E6 69        	inc z80_i
0015F7  3               :
0015F7  3  CA           	dex	 			; repeat for remaining sprites.
0015F8  3  D0 E2        	bne kspr1
0015FA  3  60           	rts  				; no more room in table.
0015FB  3               kspr3:
0015FB  3  20 02 16     	jsr cpsp 			; copy sprite to table.
0015FE  3  CA           	dex	 			; one less space in the table.
0015FF  3  D0 C0        	bne kspr2
001601  3  60           	rts
001602  3               
001602  3               ;----------------------------------------------
001602  3               ; Copy sprite from list to table.
001602  3               ;
001602  3               ; global:	hl,ix
001602  3               ; local:	y
001602  3               ; calls:	evnt09
001602  3               ;----------------------------------------------
001602  3               
001602  3               cpsp:
001602  3  A0 00        	ldy #0				; fetch byte from table.
001604  3  B1 66        	lda (z80_hl),y
001606  3  91 68        	sta (z80_ix),y			; set up type.
001608  3  A0 05        	ldy #PAM1ST
00160A  3  91 68        	sta (z80_ix),y 			; set up type.
00160C  3               
00160C  3  E6 66        	inc z80_l 			; move to next byte.
00160E  3  D0 02        	bne :+
001610  3  E6 67        	inc z80_h
001612  3               :
001612  3  A0 00        	ldy #0 				; fetch byte from table.
001614  3  B1 66        	lda (z80_hl),y
001616  3  A0 06        	ldy #6
001618  3  91 68        	sta (z80_ix),y			; set up image.
00161A  3               
00161A  3  E6 66        	inc z80_l 			; move to next byte.
00161C  3  D0 02        	bne :+
00161E  3  E6 67        	inc z80_h
001620  3               :
001620  3  A0 00        	ldy #0
001622  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
001624  3  A0 08        	ldy #8
001626  3  91 68        	sta (z80_ix),y 			; set up coordinate.
001628  3               
001628  3  A9 C8        	lda #200 			; set initial coordinate off screen.
00162A  3  A0 03        	ldy #3
00162C  3  91 68        	sta (z80_ix),y
00162E  3               
00162E  3  E6 66        	inc z80_l 			; move to next byte.
001630  3  D0 02        	bne :+
001632  3  E6 67        	inc z80_h
001634  3               :
001634  3  A0 00        	ldy #0 				; fetch byte from table.
001636  3  B1 66        	lda (z80_hl),y
001638  3  A0 09        	ldy #9
00163A  3  91 68        	sta (z80_ix),y 			; set up coordinate.
00163C  3               
00163C  3  E6 66        	inc z80_l 			; move to next byte.
00163E  3  D0 02        	bne :+
001640  3  E6 67        	inc z80_h
001642  3               :
001642  3  A9 00        	lda #0				; zeroes in accumulator.
001644  3  A0 07        	ldy #7 				; reset frame number.
001646  3  91 68        	sta (z80_ix),y
001648  3  A0 0A        	ldy #10 			; reset direction.
00164A  3  91 68        	sta (z80_ix),y
00164C  3  A0 0D        	ldy #13				; reset jump pointer low.
00164E  3  91 68        	sta (z80_ix),y
001650  3  A0 0E        	ldy #14	 			; reset jump pointer high.
001652  3  91 68        	sta (z80_ix),y
001654  3               
001654  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
001656  3  A0 10        	ldy #16
001658  3  91 68        	sta (z80_ix),y
00165A  3               evis0:
00165A  3  A5 69        	lda z80_i
00165C  3  48           	pha
00165D  3  A5 68        	lda z80_x
00165F  3  48           	pha
001660  3  A5 67        	lda z80_h
001662  3  48           	pha
001663  3  A5 66        	lda z80_l
001665  3  48           	pha
001666  3               
001666  3  20 36 1D     	jsr evnt09 			; perform event.
001669  3               
001669  3  68           	pla
00166A  3  85 66        	sta z80_l
00166C  3  68           	pla
00166D  3  85 67        	sta z80_h
00166F  3  68           	pla
001670  3  85 68        	sta z80_x
001672  3  68           	pla
001673  3  85 69        	sta z80_i
001675  3               
001675  3  18           	clc
001676  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
001678  3  69 11        	adc #TABSIZ		 	; next sprite.
00167A  3  85 68        	sta z80_x
00167C  3  90 02        	bcc :+
00167E  3  E6 69        	inc z80_i
001680  3               :
001680  3  60           	rts
001681  3               
001681  3               
001681  3               ;-------------------------------------
001681  3               ; Clear the play area window.
001681  3               ;-------------------------------------
001681  3               
001681  3               clw:
001681  3  AD 35 02     	lda wintop			; get coordinates of window.
001684  3  8D 64 02     	sta dispy			; put into dispx for calculation.
001687  3  AD 36 02     	lda winlft
00168A  3  8D 63 02     	sta dispx
00168D  3               
00168D  3  AD 37 02     	lda winhgt			; height of window.
001690  3  8D B3 0A     	sta rrow			; copy to b register.
001693  3               clw3:
001693  3  AD 38 02     	lda winwid 			; width of window.
001696  3  8D B2 0A     	sta rcol
001699  3               clw2:
001699  3  20 D6 08     	jsr gprad 			; get print address.
00169C  3  A9 00        	lda #0				; zero byte to write.
00169E  3  A2 07        	ldx #7				; pixel height of each cell.
0016A0  3               clw1:
0016A0  3  BC 4C 09     	ldy scrtab,x
0016A3  3  91 80        	sta (scraddr),y 			; copy to screen.
0016A5  3  CA           	dex				; next screen row down.
0016A6  3  10 F8        	bpl clw1
0016A8  3               
0016A8  3  EE 63 02     	inc dispx			; next column.
0016AB  3  CE B2 0A     	dec rcol			; one less to do.
0016AE  3  D0 E9        	bne clw2			; repeat for remaining columns.
0016B0  3               
0016B0  3  AD 36 02     	lda winlft			; get left edge.
0016B3  3  8D 63 02     	sta dispx 			; reset x.
0016B6  3  EE 64 02     	inc dispy 			; next line down.
0016B9  3               
0016B9  3  CE B3 0A     	dec rrow
0016BC  3  D0 D5        	bne clw3			; repeat down the screen.
0016BE  3               
0016BE  3  AD 35 02     	lda wintop			; get coordinates of window.
0016C1  3  8D 59 02     	sta chary			; put into display position.
0016C4  3  AD 36 02     	lda winlft
0016C7  3  8D 58 02     	sta charx
0016CA  3  60           	rts
0016CB  3               
0016CB  3               
0016CB  3               ;----------------------------------------------------------
0016CB  3               ; Effects code.
0016CB  3               ; Ticker routine is called 25 times per second.
0016CB  3               ;
0016CB  3               ; HL = txtscr = left text screen address
0016CB  3               ; DE = txtscr+txtwid-1 = right text screen address
0016CB  3               ; BC = txtpos = text scroller position
0016CB  3               ;
0016CB  3               ;----------------------------------------------------------
0016CB  3               
0016CB  3               .if sflag
0016CB  3               scrly:
0016CB  3               	rts
0016CB  3               	.word txtscr         	; get left screen address.
0016CB  3               	sta scr_l
0016CB  3               	lda txtscr+1
0016CB  3               	sta scr_l+1
0016CB  3               	sta scr_r+1
0016CB  3               	
0016CB  3               	stx xtmp
0016CB  3               
0016CB  3               	clc         		; get right screen address.
0016CB  3               	lda scr_l
0016CB  3               	adc txtwid
0016CB  3               	sta scr_r
0016CB  3               	dec scr_r
0016CB  3               scrly1:
0016CB  3               	ldy txtwid		; set txtwide
0016CB  3               	dey
0016CB  3               	clc
0016CB  3               scrly0:
0016CB  3               	lda (scr_l),y		; scroll 1 line
0016CB  3               	rol a
0016CB  3               	sta (scr_l),y
0016CB  3               	dey
0016CB  3               	bpl scrly0
0016CB  3               
0016CB  3               	clc			; point to next line
0016CB  3               	lda scr_l
0016CB  3               	adc #32
0016CB  3               	sta scr_l
0016CB  3               	bcc scrly1		; repeat 8 times
0016CB  3               
0016CB  3               	lda txtpos 		; get text pointer.
0016CB  3               	sta scr_txt
0016CB  3               	lda txtpos+1
0016CB  3               	sta scr_txt+1
0016CB  3               
0016CB  3               	ldy #0
0016CB  3               	lda (scr_txt),y 		; find character we're displaying.
0016CB  3               	and #127 		; remove end marker bit if applicable.
0016CB  3               	cmp #13			; is it newline?
0016CB  3               	bne scrly5 		; no, it's okay.
0016CB  3               	lda #32			; convert to a space instead.
0016CB  3               scrly5:
0016CB  3               	sta fntaddr		; calculate char address
0016CB  3               	lda #0
0016CB  3               	sta fntaddr+1
0016CB  3               	asl fntaddr  		; multiply char by 8.
0016CB  3               	rol fntaddr+1
0016CB  3               	asl fntaddr
0016CB  3               	rol fntaddr+1
0016CB  3               	asl fntaddr
0016CB  3               	rol fntaddr+1
0016CB  3               	lda fntaddr
0016CB  3               	clc
0016CB  3               	adc FontPtr
0016CB  3               	sta scrly3+1		; that's the low byte.
0016CB  3               	lda fntaddr+1
0016CB  3               	adc FontPtr+1
0016CB  3               	sta scrly3+2		; add displacement.
0016CB  3               
0016CB  3               	ldx #0
0016CB  3               scrly3:
0016CB  3               	lda $3333,x		; get image of char line.
0016CB  3               	and txtbit
0016CB  3               	beq scrly2		; don't plot pixel
0016CB  3               	ldy scrline,x
0016CB  3               	lda (scr_r),y
0016CB  3               	clc
0016CB  3               	ora #1
0016CB  3               	sta (scr_r),y		; plot pixel
0016CB  3               scrly2:
0016CB  3               	inx			; next line of char.
0016CB  3               	cpx #8
0016CB  3               	bne scrly3
0016CB  3               
0016CB  3               	lsr txtbit		; bit of text to display.
0016CB  3               	bcs :+
0016CB  3               	rts
0016CB  3               :
0016CB  3               	ldy #0
0016CB  3               	lda (scr_txt),y 	; what was the character?
0016CB  3               	asl a	  		; end of message?
0016CB  3               	bcs scrly4
0016CB  3               	inc txtpos
0016CB  3               	bne :+
0016CB  3               	inc txtpos+1
0016CB  3               :
0016CB  3               	jmp scrly6 		; not yet - continue.
0016CB  3               scrly4:
0016CB  3               	lda txtini 		; start of scrolling message.
0016CB  3               	sta txtpos
0016CB  3               	lda txtini+1
0016CB  3               	sta txtpos+1
0016CB  3               scrly6:
0016CB  3               	lda #128
0016CB  3               	sta txtbit
0016CB  3               	ldx xtmp
0016CB  3               	rts
0016CB  3               
0016CB  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
0016CB  3               
0016CB  3               ;-------------------------------------------------------
0016CB  3               ; Entry TICKER command
0016CB  3               ;
0016CB  3               ; Entry:
0016CB  3               ;  z80_b = message nr
0016CB  3               ;  z80_c = width
0016CB  3               ;-------------------------------------------------------
0016CB  3               
0016CB  3               iscrly:
0016CB  3               	jsr prescr 		; set up display position.
0016CB  3               
0016CB  3               	lda #<msgdat 		; text messages.
0016CB  3               	sta z80_l
0016CB  3               	lda #>msgdat
0016CB  3               	sta z80_h
0016CB  3               
0016CB  3               	lda z80_c 		; width.
0016CB  3               	sec
0016CB  3               	sbc #1			; subtract one.
0016CB  3               	cmp #32 		; is it between 1 and 32?
0016CB  3               	bcc :+
0016CB  3               	lda #$60
0016CB  3               	jmp iscrl0		; no, disable messages.
0016CB  3               :
0016CB  3               	ldx z80_b		; message number.
0016CB  3               	jsr getwrd 		; find message start.
0016CB  3               
0016CB  3               	lda z80_l		; set initial text position.
0016CB  3               	sta txtini
0016CB  3               	lda z80_h
0016CB  3               	sta txtini+1
0016CB  3               
0016CB  3               	lda #$ad		; code for lda adrr
0016CB  3               iscrl0:
0016CB  3               	sta scrly		; enable/disable scrolling routine.
0016CB  3               
0016CB  3               	jsr prescr 		; set up display position.
0016CB  3               	jsr gprad 		; get print address.
0016CB  3               
0016CB  3               	lda scraddr 		; set text screen address.
0016CB  3               	sta txtscr
0016CB  3               	lda scraddr+1
0016CB  3               	sta txtscr+1
0016CB  3               
0016CB  3               	lda z80_c		; width.
0016CB  3               	sta txtwid		; set width in working storage.
0016CB  3               
0016CB  3               	lda #128 		; start with leftmost bit.
0016CB  3               	sta txtbit
0016CB  3               
0016CB  3               	jmp scrly4
0016CB  3               .endif
0016CB  3               
0016CB  3               ;------------------------------------------------------------------
0016CB  3               ; Sprite table 
0016CB  3               ;------------------------------------------------------------------
0016CB  3               
0016CB  3               
0016CB  3               ; ix+0  = type.
0016CB  3               ; ix+1  = sprite image number.
0016CB  3               ; ix+2  = frame.
0016CB  3               ; ix+3  = y coord.
0016CB  3               ; ix+4  = x coord.
0016CB  3               
0016CB  3               ; ix+5  = new type.
0016CB  3               ; ix+6  = new image number.
0016CB  3               ; ix+7  = new frame.
0016CB  3               ; ix+8  = new y coord.
0016CB  3               ; ix+9  = new x coord.
0016CB  3               
0016CB  3               ; ix+10 = direction.
0016CB  3               ; ix+11 = parameter 1.
0016CB  3               ; ix+12 = parameter 2.
0016CB  3               ; ix+13 = jump pointer low.
0016CB  3               ; ix+14 = jump pointer high.
0016CB  3               ; ix+15 = data pointer low.
0016CB  3               ; ix+16 = data pointer high.
0016CB  3               
0016CB  3               ; block NUMSPR * TABSIZ,255
0016CB  3               
0016CB  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
0016CF  3  FF FF FF FF  
0016D3  3  FF FF FF FF  
001797  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
00179B  3  FF FF FF 00  
00179F  3  C0 78 00 00  
0017A8  3  07           roomtb:	.byte 7                      ; start room map offset.
0017A9  3               
0017A9  3               ; User routine.  Put your own code in here to be called with USER instruction.
0017A9  3               ; if USER has an argument it will be passed in the accumulator.
0017A9  3               
0017A9  3               user:
0017A9  3  60           	rts
0017AA  3               
0017AA  3               ;----------------------------------------------------
0017AA  3               ; Missing vars 
0017AA  3               ;----------------------------------------------------
0017AA  3               
0017AA  3               MAP 		= $9800			; properties map buffer (3x256 bytes)
0017AA  3               SCADTB_lb 	= MAP+3*256		; screen address table lo-byte (256 bytes)
0017AA  3               SCADTB_hb 	= SCADTB_lb+256		; screen address table hi-byte (256 bytes)
0017AA  3               SHRAPN 		= SCADTB_hb+256		; shrapnel table (55x6 bytes)
0017AA  3               
0017AA  3  00 00        FontPtr:	.byte 0,0
0017AC  3  00 00        TmpAddr:	.byte 0,0
0017AE  3               
0017AE  3  00           loopa:		.byte 0
0017AF  3  00           loopb:		.byte 0
0017B0  3  00           loopc:		.byte 0
0017B1  3               
0017B1  3               ; Everything below here will be generated by the editors.
0017B1  3               
0017B1  3               WINDOWTOP = 1
0017B1  3               WINDOWLFT = 1
0017B1  3               WINDOWHGT = 22
0017B1  3               WINDOWWID = 30 ;a
0017B1  3               MAPWID = 11
0017B1  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255
0017B5  3  FF FF FF FF  
0017B9  3  FF FF FF     
0017BC  3               mapdat:
0017BC  3  00 08 10 18          .byte 0,8,16,24,255,255,255,255,255,255,46,1,9,17,25,255,255,255,255,255,255,255,2,10,18,26,255,255,255,255,255,255,255,3,11,19,27,255,255,255,255,255,255,255,4,12,20,28,255,255,255,255,255,255,255,5,13,21,29,255,255,255,255,255,255,255,6,14,22,30
0017C0  3  FF FF FF FF  
0017C4  3  FF FF 2E 01  
001814  3               ,255,255,255,255,255,255,255,7,15,23,39,40,41,42,43,44,45,255
001814  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255
001818  3  FF FF FF FF  
00181C  3  FF FF FF     
00181F  3  00           stmap:  .byte 0
001820  3               
001820  3               evnt00:
001820  3  A9 00                lda #0
001822  3  CD 3E 02             cmp scno
001825  3  F0 03                beq *+5
001827  3  4C 32 18             jmp a00031
00182A  3  A9 96                lda #150
00182C  3  20 76 02             jsr delay
00182F  3  20 CC 13             jsr scrd
001832  3  20 7E 06     a00031: jsr skobj
001835  3  8D 5C 02             sta varobj
001838  3  A9 FF                lda #255
00183A  3  CD 5C 02             cmp varobj
00183D  3  F0 03                beq *+5
00183F  3  4C 45 18             jmp a00063
001842  3  4C 63 18             jmp a00116
001845  3  AD 5C 02     a00063: lda varobj
001848  3  20 F6 05             jsr getob
00184B  3  A9 64                lda #<100
00184D  3  85 66                sta z80_l
00184F  3  A9 00                lda #>100
001851  3  85 67                sta z80_h
001853  3  20 FD 07             jsr addsc
001856  3  A9 17                lda #23
001858  3  8D 59 02             sta chary
00185B  3  A9 18                lda #24
00185D  3  8D 58 02             sta charx
001860  3  20 AB 07             jsr dscor
001863  3  AD 33 02     a00116: lda joyval
001866  3  29 01                and #1
001868  3  F0 03                beq :+
00186A  3  4C A5 18             jmp a00244
00186D  3               :
00186D  3  20 BF 0B             jsr cangr
001870  3  F0 03                beq :+
001872  3  4C A5 18             jmp a00244
001875  3               :
001875  3  A9 01                lda #1
001877  3  A0 06                ldy #6
001879  3  91 68                sta (z80_ix),y
00187B  3  A9 00                lda #0
00187D  3  CD 40 02             cmp vara
001880  3  F0 03                beq *+5
001882  3  4C 88 18             jmp a00182
001885  3  20 7B 12             jsr animsp
001888  3  A0 09        a00182: ldy #9
00188A  3  B1 68                lda (z80_ix),y
00188C  3  18                   clc
00188D  3  69 02                adc #2
00188F  3  91 68                sta (z80_ix),y
001891  3  A9 E6                lda #230
001893  3  A0 09                ldy #9
001895  3  D1 68                cmp (z80_ix),y
001897  3  90 03                bcc *+5
001899  3  4C A5 18             jmp a00244
00189C  3  20 BA 13             jsr scrr
00189F  3  A9 14                lda #20
0018A1  3  A0 09                ldy #9
0018A3  3  91 68                sta (z80_ix),y
0018A5  3  AD 33 02     a00244: lda joyval
0018A8  3  29 02                and #2
0018AA  3  F0 03                beq :+
0018AC  3  4C E7 18             jmp a00372
0018AF  3               :
0018AF  3  20 AB 0B             jsr cangl
0018B2  3  F0 03                beq :+
0018B4  3  4C E7 18             jmp a00372
0018B7  3               :
0018B7  3  A9 00                lda #0
0018B9  3  A0 06                ldy #6
0018BB  3  91 68                sta (z80_ix),y
0018BD  3  A9 00                lda #0
0018BF  3  CD 40 02             cmp vara
0018C2  3  F0 03                beq *+5
0018C4  3  4C CA 18             jmp a00310
0018C7  3  20 7B 12             jsr animsp
0018CA  3  A0 09        a00310: ldy #9
0018CC  3  B1 68                lda (z80_ix),y
0018CE  3  38                   sec
0018CF  3  E9 02                sbc #2
0018D1  3  91 68                sta (z80_ix),y
0018D3  3  A9 0A                lda #10
0018D5  3  A0 09                ldy #9
0018D7  3  D1 68                cmp (z80_ix),y
0018D9  3  B0 03                bcs *+5
0018DB  3  4C E7 18             jmp a00372
0018DE  3  20 9D 13             jsr scrl
0018E1  3  A9 DC                lda #220
0018E3  3  A0 09                ldy #9
0018E5  3  91 68                sta (z80_ix),y
0018E7  3  A9 07        a00372: lda #7
0018E9  3  CD 3E 02             cmp scno
0018EC  3  F0 03                beq *+5
0018EE  3  4C 2D 19             jmp a00496
0018F1  3  AD 33 02             lda joyval
0018F4  3  29 10                and #16
0018F6  3  F0 03                beq :+
0018F8  3  4C FE 18             jmp a00411
0018FB  3               :
0018FB  3  20 33 0D             jsr jump
0018FE  3  20 73 0B     a00411: jsr cangd
001901  3  F0 03                beq :+
001903  3  4C 2A 19             jmp a00491
001906  3               :
001906  3  20 72 14             jsr ifall
001909  3  A9 97                lda #151
00190B  3  A0 08                ldy #8
00190D  3  D1 68                cmp (z80_ix),y
00190F  3  90 03                bcc *+5
001911  3  4C 2A 19             jmp a00491
001914  3  20 73 0B             jsr cangd
001917  3  F0 03                beq :+
001919  3  4C 2A 19             jmp a00491
00191C  3               :
00191C  3  A9 08                lda #8
00191E  3  8D 3E 02             sta scno
001921  3  20 D5 13             jsr nwscr
001924  3  A9 14                lda #20
001926  3  A0 08                ldy #8
001928  3  91 68                sta (z80_ix),y
00192A  3  4C 2A 1A     a00491: jmp a00952
00192D  3  A9 0F        a00496: lda #15
00192F  3  CD 3E 02             cmp scno
001932  3  F0 03                beq *+5
001934  3  4C 73 19             jmp a00620
001937  3  AD 33 02             lda joyval
00193A  3  29 10                and #16
00193C  3  F0 03                beq :+
00193E  3  4C 44 19             jmp a00535
001941  3               :
001941  3  20 33 0D             jsr jump
001944  3  20 73 0B     a00535: jsr cangd
001947  3  F0 03                beq :+
001949  3  4C 70 19             jmp a00615
00194C  3               :
00194C  3  20 72 14             jsr ifall
00194F  3  A9 97                lda #151
001951  3  A0 08                ldy #8
001953  3  D1 68                cmp (z80_ix),y
001955  3  90 03                bcc *+5
001957  3  4C 70 19             jmp a00615
00195A  3  20 73 0B             jsr cangd
00195D  3  F0 03                beq :+
00195F  3  4C 70 19             jmp a00615
001962  3               :
001962  3  A9 10                lda #16
001964  3  8D 3E 02             sta scno
001967  3  20 D5 13             jsr nwscr
00196A  3  A9 14                lda #20
00196C  3  A0 08                ldy #8
00196E  3  91 68                sta (z80_ix),y
001970  3  4C 2A 1A     a00615: jmp a00952
001973  3  A9 17        a00620: lda #23
001975  3  CD 3E 02             cmp scno
001978  3  F0 03                beq *+5
00197A  3  4C B9 19             jmp a00744
00197D  3  AD 33 02             lda joyval
001980  3  29 10                and #16
001982  3  F0 03                beq :+
001984  3  4C 8A 19             jmp a00659
001987  3               :
001987  3  20 33 0D             jsr jump
00198A  3  20 73 0B     a00659: jsr cangd
00198D  3  F0 03                beq :+
00198F  3  4C B6 19             jmp a00739
001992  3               :
001992  3  20 72 14             jsr ifall
001995  3  A9 97                lda #151
001997  3  A0 08                ldy #8
001999  3  D1 68                cmp (z80_ix),y
00199B  3  90 03                bcc *+5
00199D  3  4C B6 19             jmp a00739
0019A0  3  20 73 0B             jsr cangd
0019A3  3  F0 03                beq :+
0019A5  3  4C B6 19             jmp a00739
0019A8  3               :
0019A8  3  A9 18                lda #24
0019AA  3  8D 3E 02             sta scno
0019AD  3  20 D5 13             jsr nwscr
0019B0  3  A9 14                lda #20
0019B2  3  A0 08                ldy #8
0019B4  3  91 68                sta (z80_ix),y
0019B6  3  4C 2A 1A     a00739: jmp a00952
0019B9  3  A9 9D        a00744: lda #157
0019BB  3  A0 08                ldy #8
0019BD  3  D1 68                cmp (z80_ix),y
0019BF  3  90 03                bcc *+5
0019C1  3  4C D5 19             jmp a00798
0019C4  3  20 73 0B             jsr cangd
0019C7  3  F0 03                beq :+
0019C9  3  4C D5 19             jmp a00798
0019CC  3               :
0019CC  3  20 CC 13             jsr scrd
0019CF  3  A9 14                lda #20
0019D1  3  A0 08                ldy #8
0019D3  3  91 68                sta (z80_ix),y
0019D5  3  AD 33 02     a00798: lda joyval
0019D8  3  29 10                and #16
0019DA  3  F0 03                beq :+
0019DC  3  4C E2 19             jmp a00820
0019DF  3               :
0019DF  3  20 33 0D             jsr jump
0019E2  3  20 73 0B     a00820: jsr cangd
0019E5  3  F0 03                beq :+
0019E7  3  4C ED 19             jmp a00838
0019EA  3               :
0019EA  3  20 72 14             jsr ifall
0019ED  3  A9 05        a00838: lda #DEADLY
0019EF  3  85 63                sta z80_b
0019F1  3  20 3C 0C             jsr tded
0019F4  3  C5 63                cmp z80_b
0019F6  3  F0 03                beq :+
0019F8  3  4C 00 1A             jmp a00873
0019FB  3               :
0019FB  3  A9 01                lda #1
0019FD  3  8D 61 02             sta deadf
001A00  3  A9 2D        a00873: lda #45
001A02  3  CD 3E 02             cmp scno
001A05  3  F0 03                beq *+5
001A07  3  4C 2A 1A             jmp a00952
001A0A  3  A9 1E                lda #30
001A0C  3  A0 08                ldy #8
001A0E  3  D1 68                cmp (z80_ix),y
001A10  3  90 03                bcc *+5
001A12  3  4C 2A 1A             jmp a00952
001A15  3  A9 BF                lda #191
001A17  3  A0 09                ldy #9
001A19  3  D1 68                cmp (z80_ix),y
001A1B  3  90 03                bcc *+5
001A1D  3  4C 2A 1A             jmp a00952
001A20  3  A9 64                lda #100
001A22  3  20 76 02             jsr delay
001A25  3  A9 01                lda #1
001A27  3  8D 62 02             sta gamwon
001A2A  3  4C E8 13     a00952: jmp grav
001A2D  3               evnt01:
001A2D  3  20 73 0B             jsr cangd
001A30  3  F0 03                beq :+
001A32  3  4C 4F 1A             jmp b00072
001A35  3               :
001A35  3  20 7B 12             jsr animsp
001A38  3  A0 08                ldy #8
001A3A  3  B1 68                lda (z80_ix),y
001A3C  3  18                   clc
001A3D  3  69 02                adc #2
001A3F  3  91 68                sta (z80_ix),y
001A41  3  A0 08                ldy #8
001A43  3  B1 68                lda (z80_ix),y
001A45  3  18                   clc
001A46  3  69 01                adc #1
001A48  3  A0 08                ldy #8
001A4A  3  91 68                sta (z80_ix),y
001A4C  3  4C 8D 1A             jmp b00201
001A4F  3  A9 FF        b00072: lda #255
001A51  3  A0 05                ldy #5
001A53  3  91 68                sta (z80_ix),y
001A55  3  A9 DC                lda #220
001A57  3  85 65                sta z80_d
001A59  3  20 61 0D             jsr random
001A5C  3  85 67                sta z80_h
001A5E  3  20 5F 05             jsr imul
001A61  3  A5 67                lda z80_h
001A63  3  8D 5B 02             sta varrnd
001A66  3  AD 5B 02             lda varrnd
001A69  3  A0 09                ldy #9
001A6B  3  91 68                sta (z80_ix),y
001A6D  3  A9 0A                lda #10
001A6F  3  A0 08                ldy #8
001A71  3  91 68                sta (z80_ix),y
001A73  3  A9 0A                lda #10
001A75  3  85 62                sta z80_c
001A77  3  A0 09                ldy #9
001A79  3  B1 68                lda (z80_ix),y
001A7B  3  18                   clc
001A7C  3  65 62                adc z80_c
001A7E  3  A0 09                ldy #9
001A80  3  91 68                sta (z80_ix),y
001A82  3  A9 01                lda #1
001A84  3  85 62                sta z80_c
001A86  3  A9 04                lda #4
001A88  3  85 63                sta z80_b
001A8A  3  20 D8 06             jsr spawn
001A8D  3  A9 00        b00201: lda #0
001A8F  3  85 63                sta z80_b
001A91  3  20 BC 12             jsr sktyp
001A94  3  B0 03                bcs :+
001A96  3  4C 9E 1A             jmp b00231
001A99  3               :
001A99  3  A9 01                lda #1
001A9B  3  8D 61 02             sta deadf
001A9E  3  60           b00231: rts
001A9F  3               evnt02:
001A9F  3  A9 00                lda #0
001AA1  3  A0 0B                ldy #11
001AA3  3  D1 68                cmp (z80_ix),y
001AA5  3  F0 03                beq *+5
001AA7  3  4C F3 1A             jmp c00179
001AAA  3  20 AB 0B             jsr cangl
001AAD  3  F0 03                beq :+
001AAF  3  4C EA 1A             jmp c00161
001AB2  3               :
001AB2  3  A0 09                ldy #9
001AB4  3  B1 68                lda (z80_ix),y
001AB6  3  38                   sec
001AB7  3  E9 02                sbc #2
001AB9  3  91 68                sta (z80_ix),y
001ABB  3  A9 10                lda #16
001ABD  3  85 62                sta z80_c
001ABF  3  A0 09                ldy #9
001AC1  3  B1 68                lda (z80_ix),y
001AC3  3  38                   sec
001AC4  3  E5 62                sbc z80_c
001AC6  3  A0 09                ldy #9
001AC8  3  91 68                sta (z80_ix),y
001ACA  3  20 73 0B             jsr cangd
001ACD  3  F0 03                beq :+
001ACF  3  4C D8 1A             jmp c00121
001AD2  3               :
001AD2  3  A9 01                lda #1
001AD4  3  A0 0B                ldy #11
001AD6  3  91 68                sta (z80_ix),y
001AD8  3  A9 10        c00121: lda #16
001ADA  3  85 62                sta z80_c
001ADC  3  A0 09                ldy #9
001ADE  3  B1 68                lda (z80_ix),y
001AE0  3  18                   clc
001AE1  3  65 62                adc z80_c
001AE3  3  A0 09                ldy #9
001AE5  3  91 68                sta (z80_ix),y
001AE7  3  4C F0 1A             jmp c00175
001AEA  3  A9 01        c00161: lda #1
001AEC  3  A0 0B                ldy #11
001AEE  3  91 68                sta (z80_ix),y
001AF0  3  4C 39 1B     c00175: jmp c00330
001AF3  3  20 BF 0B     c00179: jsr cangr
001AF6  3  F0 03                beq :+
001AF8  3  4C 33 1B             jmp c00317
001AFB  3               :
001AFB  3  A0 09                ldy #9
001AFD  3  B1 68                lda (z80_ix),y
001AFF  3  18                   clc
001B00  3  69 02                adc #2
001B02  3  91 68                sta (z80_ix),y
001B04  3  A9 10                lda #16
001B06  3  85 62                sta z80_c
001B08  3  A0 09                ldy #9
001B0A  3  B1 68                lda (z80_ix),y
001B0C  3  18                   clc
001B0D  3  65 62                adc z80_c
001B0F  3  A0 09                ldy #9
001B11  3  91 68                sta (z80_ix),y
001B13  3  20 73 0B             jsr cangd
001B16  3  F0 03                beq :+
001B18  3  4C 21 1B             jmp c00277
001B1B  3               :
001B1B  3  A9 00                lda #0
001B1D  3  A0 0B                ldy #11
001B1F  3  91 68                sta (z80_ix),y
001B21  3  A9 10        c00277: lda #16
001B23  3  85 62                sta z80_c
001B25  3  A0 09                ldy #9
001B27  3  B1 68                lda (z80_ix),y
001B29  3  38                   sec
001B2A  3  E5 62                sbc z80_c
001B2C  3  A0 09                ldy #9
001B2E  3  91 68                sta (z80_ix),y
001B30  3  4C 39 1B             jmp c00330
001B33  3  A9 00        c00317: lda #0
001B35  3  A0 0B                ldy #11
001B37  3  91 68                sta (z80_ix),y
001B39  3  A9 01        c00330: lda #1
001B3B  3  A0 0B                ldy #11
001B3D  3  D1 68                cmp (z80_ix),y
001B3F  3  F0 03                beq *+5
001B41  3  4C 54 1B             jmp c00379
001B44  3  A9 00                lda #0
001B46  3  CD 40 02             cmp vara
001B49  3  F0 03                beq *+5
001B4B  3  4C 51 1B             jmp c00374
001B4E  3  20 7B 12             jsr animsp
001B51  3  4C 61 1B     c00374: jmp c00400
001B54  3  A9 00        c00379: lda #0
001B56  3  CD 40 02             cmp vara
001B59  3  F0 03                beq *+5
001B5B  3  4C 61 1B             jmp c00400
001B5E  3  20 9C 12             jsr animbk
001B61  3  A9 00        c00400: lda #0
001B63  3  85 63                sta z80_b
001B65  3  20 BC 12             jsr sktyp
001B68  3  B0 03                bcs :+
001B6A  3  4C 72 1B             jmp c00430
001B6D  3               :
001B6D  3  A9 01                lda #1
001B6F  3  8D 61 02             sta deadf
001B72  3  60           c00430: rts
001B73  3               evnt03:
001B73  3  A9 2D                lda #45
001B75  3  CD 3E 02             cmp scno
001B78  3  F0 03                beq *+5
001B7A  3  4C EA 1B             jmp d00239
001B7D  3  20 AB 0B             jsr cangl
001B80  3  F0 03                beq :+
001B82  3  4C 9F 1B             jmp d00089
001B85  3               :
001B85  3  20 7B 12             jsr animsp
001B88  3  A0 09                ldy #9
001B8A  3  B1 68                lda (z80_ix),y
001B8C  3  38                   sec
001B8D  3  E9 02                sbc #2
001B8F  3  91 68                sta (z80_ix),y
001B91  3  A0 09                ldy #9
001B93  3  B1 68                lda (z80_ix),y
001B95  3  38                   sec
001B96  3  E9 01                sbc #1
001B98  3  A0 09                ldy #9
001B9A  3  91 68                sta (z80_ix),y
001B9C  3  4C D9 1B             jmp d00209
001B9F  3  A9 FF        d00089: lda #255
001BA1  3  A0 05                ldy #5
001BA3  3  91 68                sta (z80_ix),y
001BA5  3  A9 87                lda #135
001BA7  3  85 65                sta z80_d
001BA9  3  20 61 0D             jsr random
001BAC  3  85 67                sta z80_h
001BAE  3  20 5F 05             jsr imul
001BB1  3  A5 67                lda z80_h
001BB3  3  8D 5B 02             sta varrnd
001BB6  3  A9 8C                lda #140
001BB8  3  A0 09                ldy #9
001BBA  3  91 68                sta (z80_ix),y
001BBC  3  AD 5B 02             lda varrnd
001BBF  3  A0 08                ldy #8
001BC1  3  91 68                sta (z80_ix),y
001BC3  3  A0 09                ldy #9
001BC5  3  B1 68                lda (z80_ix),y
001BC7  3  38                   sec
001BC8  3  E9 01                sbc #1
001BCA  3  A0 09                ldy #9
001BCC  3  91 68                sta (z80_ix),y
001BCE  3  A9 03                lda #3
001BD0  3  85 62                sta z80_c
001BD2  3  A9 06                lda #6
001BD4  3  85 63                sta z80_b
001BD6  3  20 D8 06             jsr spawn
001BD9  3  A9 00        d00209: lda #0
001BDB  3  85 63                sta z80_b
001BDD  3  20 BC 12             jsr sktyp
001BE0  3  B0 03                bcs :+
001BE2  3  4C EA 1B             jmp d00239
001BE5  3               :
001BE5  3  A9 01                lda #1
001BE7  3  8D 61 02             sta deadf
001BEA  3  60           d00239: rts
001BEB  3               evnt04:
001BEB  3  60                   rts
001BEC  3               evnt05:
001BEC  3  20 AB 0B             jsr cangl
001BEF  3  F0 03                beq :+
001BF1  3  4C 19 1C             jmp f00098
001BF4  3               :
001BF4  3  20 7B 12             jsr animsp
001BF7  3  A0 09                ldy #9
001BF9  3  B1 68                lda (z80_ix),y
001BFB  3  38                   sec
001BFC  3  E9 02                sbc #2
001BFE  3  91 68                sta (z80_ix),y
001C00  3  A0 09                ldy #9
001C02  3  B1 68                lda (z80_ix),y
001C04  3  38                   sec
001C05  3  E9 01                sbc #1
001C07  3  A0 09                ldy #9
001C09  3  91 68                sta (z80_ix),y
001C0B  3  A0 08                ldy #8
001C0D  3  B1 68                lda (z80_ix),y
001C0F  3  18                   clc
001C10  3  69 01                adc #1
001C12  3  A0 08                ldy #8
001C14  3  91 68                sta (z80_ix),y
001C16  3  4C 5E 1C             jmp f00244
001C19  3  A9 FF        f00098: lda #255
001C1B  3  A0 05                ldy #5
001C1D  3  91 68                sta (z80_ix),y
001C1F  3  A9 87                lda #135
001C21  3  85 65                sta z80_d
001C23  3  20 61 0D             jsr random
001C26  3  85 67                sta z80_h
001C28  3  20 5F 05             jsr imul
001C2B  3  A5 67                lda z80_h
001C2D  3  8D 5B 02             sta varrnd
001C30  3  A9 DC                lda #220
001C32  3  A0 09                ldy #9
001C34  3  91 68                sta (z80_ix),y
001C36  3  AD 5B 02             lda varrnd
001C39  3  A0 08                ldy #8
001C3B  3  91 68                sta (z80_ix),y
001C3D  3  A0 09                ldy #9
001C3F  3  B1 68                lda (z80_ix),y
001C41  3  38                   sec
001C42  3  E9 01                sbc #1
001C44  3  A0 09                ldy #9
001C46  3  91 68                sta (z80_ix),y
001C48  3  A0 08                ldy #8
001C4A  3  B1 68                lda (z80_ix),y
001C4C  3  18                   clc
001C4D  3  69 01                adc #1
001C4F  3  A0 08                ldy #8
001C51  3  91 68                sta (z80_ix),y
001C53  3  A9 05                lda #5
001C55  3  85 62                sta z80_c
001C57  3  A9 06                lda #6
001C59  3  85 63                sta z80_b
001C5B  3  20 D8 06             jsr spawn
001C5E  3  A9 00        f00244: lda #0
001C60  3  85 63                sta z80_b
001C62  3  20 BC 12             jsr sktyp
001C65  3  B0 03                bcs :+
001C67  3  4C 6F 1C             jmp f00274
001C6A  3               :
001C6A  3  A9 01                lda #1
001C6C  3  8D 61 02             sta deadf
001C6F  3  60           f00274: rts
001C70  3               evnt06:
001C70  3  60                   rts
001C71  3               evnt07:
001C71  3  A9 00                lda #0
001C73  3  A0 0B                ldy #11
001C75  3  D1 68                cmp (z80_ix),y
001C77  3  F0 03                beq *+5
001C79  3  4C 99 1C             jmp h00082
001C7C  3  20 AB 0B             jsr cangl
001C7F  3  F0 03                beq :+
001C81  3  4C 90 1C             jmp h00064
001C84  3               :
001C84  3  A0 09                ldy #9
001C86  3  B1 68                lda (z80_ix),y
001C88  3  38                   sec
001C89  3  E9 02                sbc #2
001C8B  3  91 68                sta (z80_ix),y
001C8D  3  4C 96 1C             jmp h00078
001C90  3  A9 01        h00064: lda #1
001C92  3  A0 0B                ldy #11
001C94  3  91 68                sta (z80_ix),y
001C96  3  4C B3 1C     h00078: jmp h00136
001C99  3  20 BF 0B     h00082: jsr cangr
001C9C  3  F0 03                beq :+
001C9E  3  4C AD 1C             jmp h00123
001CA1  3               :
001CA1  3  A0 09                ldy #9
001CA3  3  B1 68                lda (z80_ix),y
001CA5  3  18                   clc
001CA6  3  69 02                adc #2
001CA8  3  91 68                sta (z80_ix),y
001CAA  3  4C B3 1C             jmp h00136
001CAD  3  A9 00        h00123: lda #0
001CAF  3  A0 0B                ldy #11
001CB1  3  91 68                sta (z80_ix),y
001CB3  3  A9 00        h00136: lda #0
001CB5  3  A0 0A                ldy #10
001CB7  3  D1 68                cmp (z80_ix),y
001CB9  3  F0 03                beq *+5
001CBB  3  4C DB 1C             jmp h00217
001CBE  3  20 3B 0B             jsr cangu
001CC1  3  F0 03                beq :+
001CC3  3  4C D2 1C             jmp h00199
001CC6  3               :
001CC6  3  A0 08                ldy #8
001CC8  3  B1 68                lda (z80_ix),y
001CCA  3  38                   sec
001CCB  3  E9 02                sbc #2
001CCD  3  91 68                sta (z80_ix),y
001CCF  3  4C D8 1C             jmp h00212
001CD2  3  A9 01        h00199: lda #1
001CD4  3  A0 0A                ldy #10
001CD6  3  91 68                sta (z80_ix),y
001CD8  3  4C F8 1C     h00212: jmp h00275
001CDB  3  20 73 0B     h00217: jsr cangd
001CDE  3  F0 03                beq :+
001CE0  3  4C F2 1C             jmp h00262
001CE3  3               :
001CE3  3  A0 08                ldy #8
001CE5  3  B1 68                lda (z80_ix),y
001CE7  3  18                   clc
001CE8  3  69 02                adc #2
001CEA  3  91 68                sta (z80_ix),y
001CEC  3  20 7B 12             jsr animsp
001CEF  3  4C F8 1C             jmp h00275
001CF2  3  A9 00        h00262: lda #0
001CF4  3  A0 0A                ldy #10
001CF6  3  91 68                sta (z80_ix),y
001CF8  3  A9 00        h00275: lda #0
001CFA  3  85 63                sta z80_b
001CFC  3  20 BC 12             jsr sktyp
001CFF  3  B0 03                bcs :+
001D01  3  4C 09 1D             jmp h00305
001D04  3               :
001D04  3  A9 01                lda #1
001D06  3  8D 61 02             sta deadf
001D09  3  60           h00305: rts
001D0A  3               evnt08:
001D0A  3  A9 00                lda #0
001D0C  3  85 63                sta z80_b
001D0E  3  20 BC 12             jsr sktyp
001D11  3  B0 03                bcs :+
001D13  3  4C 35 1D             jmp i00080
001D16  3               :
001D16  3  AD 3F 02             lda numlif
001D19  3  18                   clc
001D1A  3  69 01                adc #1
001D1C  3  8D 3F 02             sta numlif
001D1F  3  A9 17                lda #23
001D21  3  8D 59 02             sta chary
001D24  3  A9 08                lda #8
001D26  3  8D 58 02             sta charx
001D29  3  AD 3F 02             lda numlif
001D2C  3  20 57 13             jsr disply
001D2F  3  A9 FF                lda #255
001D31  3  A0 05                ldy #5
001D33  3  91 68                sta (z80_ix),y
001D35  3  60           i00080: rts
001D36  3               evnt09:
001D36  3  60                   rts
001D37  3               evnt10:
001D37  3  A9 01                lda #1
001D39  3  CD 40 02             cmp vara
001D3C  3  F0 03                beq *+5
001D3E  3  4C 49 1D             jmp k00031
001D41  3  A9 00                lda #0
001D43  3  8D 40 02             sta vara
001D46  3  4C 52 1D             jmp k00046
001D49  3  AD 40 02     k00031: lda vara
001D4C  3  18                   clc
001D4D  3  69 01                adc #1
001D4F  3  8D 40 02             sta vara
001D52  3  60           k00046: rts
001D53  3               evnt11:
001D53  3  AD 44 02             lda vare
001D56  3  38                   sec
001D57  3  E9 01                sbc #1
001D59  3  8D 44 02             sta vare
001D5C  3  60                   rts
001D5D  3               evnt12:
001D5D  3  20 4D 03             jsr cls
001D60  3  A9 03                lda #3
001D62  3  8D 59 02             sta chary
001D65  3  A9 0C                lda #12
001D67  3  8D 58 02             sta charx
001D6A  3  A9 05                lda #5
001D6C  3  20 76 0E             jsr dmsg
001D6F  3  A9 06                lda #6
001D71  3  8D 59 02             sta chary
001D74  3  A9 03                lda #3
001D76  3  8D 58 02             sta charx
001D79  3  A9 06                lda #6
001D7B  3  20 76 0E             jsr dmsg
001D7E  3  A9 08                lda #8
001D80  3  8D 59 02             sta chary
001D83  3  A9 0A                lda #10
001D85  3  8D 58 02             sta charx
001D88  3  A9 07                lda #7
001D8A  3  20 76 0E             jsr dmsg
001D8D  3  A9 0A                lda #10
001D8F  3  8D 59 02             sta chary
001D92  3  A9 0A                lda #10
001D94  3  8D 58 02             sta charx
001D97  3  A9 08                lda #8
001D99  3  20 76 0E             jsr dmsg
001D9C  3  A9 0F                lda #15
001D9E  3  8D 59 02             sta chary
001DA1  3  A9 00                lda #0
001DA3  3  8D 58 02             sta charx
001DA6  3  A9 03                lda #3
001DA8  3  20 76 0E             jsr dmsg
001DAB  3  A9 03                lda #3
001DAD  3  CD 44 02             cmp vare
001DB0  3  F0 03                beq *+5
001DB2  3  4C BB 1D             jmp m00156
001DB5  3  20 67 02             jsr prskey
001DB8  3  4C C3 1D             jmp m00168
001DBB  3  20 67 02     m00156: jsr prskey
001DBE  3  A9 03                lda #3
001DC0  3  8D 44 02             sta vare
001DC3  3  60           m00168: rts
001DC4  3               evnt13:
001DC4  3  A9 0A                lda #10
001DC6  3  8D 3F 02             sta numlif
001DC9  3  20 4D 03             jsr cls
001DCC  3  A9 00                lda #0
001DCE  3  8D 40 02             sta vara
001DD1  3  A9 17                lda #23
001DD3  3  8D 59 02             sta chary
001DD6  3  A9 02                lda #2
001DD8  3  8D 58 02             sta charx
001DDB  3  A9 01                lda #1
001DDD  3  20 76 0E             jsr dmsg
001DE0  3  A9 17                lda #23
001DE2  3  8D 59 02             sta chary
001DE5  3  A9 08                lda #8
001DE7  3  8D 58 02             sta charx
001DEA  3  AD 3F 02             lda numlif
001DED  3  20 57 13             jsr disply
001DF0  3  A9 17                lda #23
001DF2  3  8D 59 02             sta chary
001DF5  3  A9 12                lda #18
001DF7  3  8D 58 02             sta charx
001DFA  3  A9 02                lda #2
001DFC  3  20 76 0E             jsr dmsg
001DFF  3  A9 17                lda #23
001E01  3  8D 59 02             sta chary
001E04  3  A9 18                lda #24
001E06  3  8D 58 02             sta charx
001E09  3  20 AB 07             jsr dscor
001E0C  3  60                   rts
001E0D  3               evnt14:
001E0D  3  60                   rts
001E0E  3               evnt15:
001E0E  3  60                   rts
001E0F  3               evnt16:
001E0F  3  A9 17                lda #23
001E11  3  8D 59 02             sta chary
001E14  3  A9 08                lda #8
001E16  3  8D 58 02             sta charx
001E19  3  20 4D 03             jsr cls
001E1C  3  A9 17                lda #23
001E1E  3  8D 59 02             sta chary
001E21  3  A9 02                lda #2
001E23  3  8D 58 02             sta charx
001E26  3  A9 01                lda #1
001E28  3  20 76 0E             jsr dmsg
001E2B  3  AD 3F 02             lda numlif
001E2E  3  38                   sec
001E2F  3  E9 01                sbc #1
001E31  3  8D 3F 02             sta numlif
001E34  3  A9 17                lda #23
001E36  3  8D 59 02             sta chary
001E39  3  A9 08                lda #8
001E3B  3  8D 58 02             sta charx
001E3E  3  AD 3F 02             lda numlif
001E41  3  20 57 13             jsr disply
001E44  3  A9 17                lda #23
001E46  3  8D 59 02             sta chary
001E49  3  A9 12                lda #18
001E4B  3  8D 58 02             sta charx
001E4E  3  A9 02                lda #2
001E50  3  20 76 0E             jsr dmsg
001E53  3  A9 17                lda #23
001E55  3  8D 59 02             sta chary
001E58  3  A9 18                lda #24
001E5A  3  8D 58 02             sta charx
001E5D  3  20 AB 07             jsr dscor
001E60  3  60                   rts
001E61  3               evnt17:
001E61  3  20 4D 03             jsr cls
001E64  3  A9 00                lda #0
001E66  3  8D 59 02             sta chary
001E69  3  A9 00                lda #0
001E6B  3  8D 58 02             sta charx
001E6E  3  A9 0C                lda #12
001E70  3  20 76 0E             jsr dmsg
001E73  3  A9 12                lda #18
001E75  3  8D 59 02             sta chary
001E78  3  A9 0A                lda #10
001E7A  3  8D 58 02             sta charx
001E7D  3  A9 02                lda #2
001E7F  3  20 76 0E             jsr dmsg
001E82  3  A9 12                lda #18
001E84  3  8D 59 02             sta chary
001E87  3  A9 10                lda #16
001E89  3  8D 58 02             sta charx
001E8C  3  20 AB 07             jsr dscor
001E8F  3  20 67 02             jsr prskey
001E92  3  60                   rts
001E93  3               evnt18:
001E93  3  20 4D 03             jsr cls
001E96  3  A9 01                lda #1
001E98  3  8D 59 02             sta chary
001E9B  3  A9 00                lda #0
001E9D  3  8D 58 02             sta charx
001EA0  3  A9 0A                lda #10
001EA2  3  20 76 0E             jsr dmsg
001EA5  3  A9 13                lda #19
001EA7  3  8D 59 02             sta chary
001EAA  3  A9 09                lda #9
001EAC  3  8D 58 02             sta charx
001EAF  3  A9 02                lda #2
001EB1  3  20 76 0E             jsr dmsg
001EB4  3  A9 13                lda #19
001EB6  3  8D 59 02             sta chary
001EB9  3  A9 10                lda #16
001EBB  3  8D 58 02             sta charx
001EBE  3  20 AB 07             jsr dscor
001EC1  3  20 67 02             jsr prskey
001EC4  3  60                   rts
001EC5  3               evnt19:
001EC5  3  60                   rts
001EC6  3  60           ptcusr: rts
001EC7  3               msgdat:
001EC7  3  47 41 4D 45          .byte "GAME OVER",141
001ECB  3  20 4F 56 45  
001ECF  3  52 8D        
001ED1  3  4C 49 56 45          .byte "LIVES",141
001ED5  3  53 8D        
001ED7  3  53 43 4F 52          .byte "SCORE",141
001EDB  3  45 8D        
001EDD  3  20 20 20 20          .byte "           BY DAZMAN",13
001EE1  3  20 20 20 20  
001EE5  3  20 20 20 42  
001EF2  3  20 20 20 20          .byte "       ",13
001EF6  3  20 20 20 0D  
001EFA  3  20 20 20 20          .byte "        HAPPY HALLOWEEN",13
001EFE  3  20 20 20 20  
001F02  3  48 41 50 50  
001F12  3  8D                   .byte 141
001F13  3  53 50 41 52          .byte "SPARE",141
001F17  3  45 8D        
001F19  3  4F 50 54 49          .byte "OPTIONS",141
001F1D  3  4F 4E 53 8D  
001F21  3  31 3A 20 4B          .byte "1: KEYBOARD Q,A,O,P,SPACE",141
001F25  3  45 59 42 4F  
001F29  3  41 52 44 20  
001F3B  3  32 3A 20 4B          .byte "2: KEMPSTON",141
001F3F  3  45 4D 50 53  
001F43  3  54 4F 4E 8D  
001F47  3  33 3A 20 53          .byte "3: SINCLAIR",141
001F4B  3  49 4E 43 4C  
001F4F  3  41 49 52 8D  
001F53  3  30 20 50 4C          .byte "0 PLAY GAME",141
001F57  3  41 59 20 47  
001F5B  3  41 4D 45 8D  
001F5F  3  0D                   .byte 13
001F60  3  20 20 20 20          .byte "           WELL DONE",13
001F64  3  20 20 20 20  
001F68  3  20 20 20 57  
001F75  3  0D                   .byte 13
001F76  3  20 20 20 20          .byte "        HELPING BRITTLE",13
001F7A  3  20 20 20 20  
001F7E  3  48 45 4C 50  
001F8E  3  0D                   .byte 13
001F8F  3  20 20 20 20          .byte "       COMPLETE THE TASK",13
001F93  3  20 20 20 43  
001F97  3  4F 4D 50 4C  
001FA8  3  0D                   .byte 13
001FA9  3  20 20 20 20          .byte "     PUMPKIN MASTER IS DEAD",13
001FAD  3  20 50 55 4D  
001FB1  3  50 4B 49 4E  
001FC5  3  0D                   .byte 13
001FC6  3  20 20 20 20          .byte "              AND",13
001FCA  3  20 20 20 20  
001FCE  3  20 20 20 20  
001FD8  3  0D                   .byte 13
001FD9  3  20 20 48 41          .byte "  HALLOWEEN IS SAFE ONCE AGAIN",13
001FDD  3  4C 4C 4F 57  
001FE1  3  45 45 4E 20  
001FF8  3  0D                   .byte 13
001FF9  3  0D                   .byte 13
001FFA  3  20 20 20 20          .byte "        HAPPY HALLOWEEN",141
001FFE  3  20 20 20 20  
002002  3  48 41 50 50  
002012  3  54 49 4D 45          .byte "TIME",141
002016  3  8D           
002017  3  0D                   .byte 13
002018  3  0D                   .byte 13
002019  3  0D                   .byte 13
00201A  3  0D                   .byte 13
00201B  3  0D                   .byte 13
00201C  3  20 20 20 20          .byte "            BAD LUCK",13
002020  3  20 20 20 20  
002024  3  20 20 20 20  
002031  3  0D                   .byte 13
002032  3  20 20 20 20          .byte "         BRITTLE FAILED",13
002036  3  20 20 20 20  
00203A  3  20 42 52 49  
00204A  3  0D                   .byte 13
00204B  3  20 20 20 20          .byte "    THE PUMPKIN MASTER WINS",13
00204F  3  54 48 45 20  
002053  3  50 55 4D 50  
002067  3  0D                   .byte 13
002068  3  20 20 20 20          .byte "           THIS TIME",13
00206C  3  20 20 20 20  
002070  3  20 20 20 54  
00207D  3  0D                   .byte 13
00207E  3  0D                   .byte 13
00207F  3  20 20 20 20          .byte "             HA HA",13
002083  3  20 20 20 20  
002087  3  20 20 20 20  
002092  3  8D                   .byte 141
002093  3               nummsg:
002093  3  0D                   .byte 13
002094  3               chgfx:
002094  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002098  3  00 00 00 00  
00209C  3  B5 AA FA 76          .byte 181,170,250,118,150,250,95,77
0020A0  3  96 FA 5F 4D  
0020A4  3  00 FF D5 FF          .byte 0,255,213,255,155,147,1,17
0020A8  3  9B 93 01 11  
0020AC  3  FF 49 02 A5          .byte 255,73,2,165,16,66,137,36
0020B0  3  10 42 89 24  
0020B4  3  FC 4A 02 A1          .byte 252,74,2,161,21,66,138,37
0020B8  3  15 42 8A 25  
0020BC  3  3F 66 49 95          .byte 63,102,73,149,68,82,137,84
0020C0  3  44 52 89 54  
0020C4  3  B5 6B 5A 6D          .byte 181,107,90,109,106,91,236,169
0020C8  3  6A 5B EC A9  
0020CC  3  00 00 18 3C          .byte 0,0,24,60,60,24,0,0
0020D0  3  3C 18 00 00  
0020D4  3  00 FF D5 FF          .byte 0,255,213,255,187,147,129,255
0020D8  3  BB 93 81 FF  
0020DC  3  20 44 08 81          .byte 32,68,8,129,4,64,145,8
0020E0  3  04 40 91 08  
0020E4  3  55 AA 55 AA          .byte 85,170,85,170,85,170,85,170
0020E8  3  55 AA 55 AA  
0020EC  3  18 0C 06 FF          .byte 24,12,6,255,255,6,12,24
0020F0  3  FF 06 0C 18  
0020F4  3  76 6D EB A7          .byte 118,109,235,167,205,161,24,118
0020F8  3  CD A1 18 76  
0020FC  3  DA DA AA AB          .byte 218,218,170,171,173,85,85,85
002100  3  AD 55 55 55  
002104  3  00 04 84 94          .byte 0,4,132,148,134,87,95,222
002108  3  86 57 5F DE  
00210C  3  DE DE 6F 6B          .byte 222,222,111,107,105,57,57,57
002110  3  69 39 39 39  
002114  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002118  3  00 00 00 00  
00211C  3  00 00 00 AA          .byte 0,0,0,170,170,0,0,0
002120  3  AA 00 00 00  
002124  3  00 00 00 AA          .byte 0,0,0,170,170,0,0,0
002128  3  AA 00 00 00  
00212C  3  00 00 00 AA          .byte 0,0,0,170,170,0,0,0
002130  3  AA 00 00 00  
002134  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002138  3  00 00 00 00  
00213C  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
002140  3  FF FF FF FF  
002144  3  7F 7F 3F 3F          .byte 127,127,63,63,31,15,7,1
002148  3  1F 0F 07 01  
00214C  3  01 07 0F 1F          .byte 1,7,15,31,63,63,127,127
002150  3  3F 3F 7F 7F  
002154  3  00 00 10 00          .byte 0,0,16,0,0,0,0,0
002158  3  00 00 00 00  
00215C  3  00 00 00 00          .byte 0,0,0,0,8,0,0,0
002160  3  08 00 00 00  
002164  3  36 0D 01 05          .byte 54,13,1,5,0,3,1,0
002168  3  00 03 01 00  
00216C  3  6C A0 80 A0          .byte 108,160,128,160,0,192,128,0
002170  3  00 C0 80 00  
002174  3               bprop:
002174  3  00                   .byte 0
002175  3  02                   .byte 2
002176  3  02                   .byte 2
002177  3  01                   .byte 1
002178  3  01                   .byte 1
002179  3  01                   .byte 1
00217A  3  02                   .byte 2
00217B  3  02                   .byte 2
00217C  3  02                   .byte 2
00217D  3  02                   .byte 2
00217E  3  02                   .byte 2
00217F  3  02                   .byte 2
002180  3  02                   .byte 2
002181  3  02                   .byte 2
002182  3  05                   .byte 5
002183  3  00                   .byte 0
002184  3  00                   .byte 0
002185  3  00                   .byte 0
002186  3  00                   .byte 0
002187  3  00                   .byte 0
002188  3  05                   .byte 5
002189  3  00                   .byte 0
00218A  3  00                   .byte 0
00218B  3  00                   .byte 0
00218C  3  00                   .byte 0
00218D  3  00                   .byte 0
00218E  3  02                   .byte 2
00218F  3  02                   .byte 2
002190  3               sprgfx:
002190  3  1F 80 29 C0          .byte 31,128,41,192,8,192,8,192,63,128,20,0,1,32,14,16,0,80,7,144,10,96,8,96,0,128,2,128,0,64,5,192
002194  3  08 C0 08 C0  
002198  3  3F 80 14 00  
0021B0  3  07 E0 0A 70          .byte 7,224,10,112,2,48,2,48,15,224,5,0,0,72,3,132,0,20,1,228,2,152,2,24,0,32,0,160,0,16,1,112
0021B4  3  02 30 02 30  
0021B8  3  0F E0 05 00  
0021D0  3  01 F8 02 9C          .byte 1,248,2,156,0,140,0,140,3,248,1,64,0,18,0,225,0,5,0,121,0,166,0,134,0,8,0,40,0,4,0,92
0021D4  3  00 8C 00 8C  
0021D8  3  03 F8 01 40  
0021F0  3  00 7E 00 A7          .byte 0,126,0,167,0,35,0,35,0,254,0,80,128,4,64,56,64,1,64,30,128,41,128,33,0,2,0,10,0,1,0,23
0021F4  3  00 23 00 23  
0021F8  3  00 FE 00 50  
002210  3  1F 80 29 C0          .byte 31,128,41,192,8,192,8,192,63,128,20,0,1,32,14,16,0,72,55,136,50,56,3,48,4,0,36,32,24,16,8,96
002214  3  08 C0 08 C0  
002218  3  3F 80 14 00  
002230  3  07 E0 0A 70          .byte 7,224,10,112,2,48,2,48,15,224,5,0,0,72,3,132,0,18,13,226,12,142,0,204,1,0,9,8,6,4,2,24
002234  3  02 30 02 30  
002238  3  0F E0 05 00  
002250  3  01 F8 02 9C          .byte 1,248,2,156,0,140,0,140,3,248,1,64,0,18,0,225,128,4,131,120,131,35,0,51,0,64,2,66,1,129,0,134
002254  3  00 8C 00 8C  
002258  3  03 F8 01 40  
002270  3  00 7E 00 A7          .byte 0,126,0,167,0,35,0,35,0,254,0,80,128,4,64,56,32,1,32,222,224,200,192,12,0,16,128,144,64,96,128,33
002274  3  00 23 00 23  
002278  3  00 FE 00 50  
002290  3  1F 80 29 C0          .byte 31,128,41,192,8,192,8,192,63,128,20,0,1,64,14,32,0,160,15,32,20,192,16,192,1,0,5,0,0,128,11,128
002294  3  08 C0 08 C0  
002298  3  3F 80 14 00  
0022B0  3  07 E0 0A 70          .byte 7,224,10,112,2,48,2,48,15,224,5,0,0,80,3,136,0,40,3,200,5,48,4,48,0,64,1,64,0,32,2,224
0022B4  3  02 30 02 30  
0022B8  3  0F E0 05 00  
0022D0  3  01 F8 02 9C          .byte 1,248,2,156,0,140,0,140,3,248,1,64,0,20,0,226,0,10,0,242,1,76,1,12,0,16,0,80,0,8,0,184
0022D4  3  00 8C 00 8C  
0022D8  3  03 F8 01 40  
0022F0  3  00 7E 00 A7          .byte 0,126,0,167,0,35,0,35,0,254,0,80,0,5,128,56,128,2,128,60,0,83,0,67,0,4,0,20,0,2,0,46
0022F4  3  00 23 00 23  
0022F8  3  00 FE 00 50  
002310  3  1F 80 29 C0          .byte 31,128,41,192,8,192,8,192,63,128,20,0,1,64,14,32,0,160,11,192,3,0,0,0,8,128,72,96,48,16,16,96
002314  3  08 C0 08 C0  
002318  3  3F 80 14 00  
002330  3  07 E0 0A 70          .byte 7,224,10,112,2,48,2,48,15,224,5,0,0,80,3,136,0,40,2,240,0,192,0,0,2,32,18,24,12,4,4,24
002334  3  02 30 02 30  
002338  3  0F E0 05 00  
002350  3  01 F8 02 9C          .byte 1,248,2,156,0,140,0,140,3,248,1,64,0,20,0,226,0,10,0,188,0,48,0,0,0,136,4,134,3,1,1,6
002354  3  00 8C 00 8C  
002358  3  03 F8 01 40  
002370  3  00 7E 00 A7          .byte 0,126,0,167,0,35,0,35,0,254,0,80,0,5,128,56,128,2,0,47,0,12,0,0,0,34,129,33,64,192,128,65
002374  3  00 23 00 23  
002378  3  00 FE 00 50  
002390  3  01 F8 03 94          .byte 1,248,3,148,3,16,3,16,1,252,0,40,4,128,8,112,10,0,9,224,6,80,6,16,1,0,1,64,2,0,3,160
002394  3  03 10 03 10  
002398  3  01 FC 00 28  
0023B0  3  00 7E 00 E5          .byte 0,126,0,229,0,196,0,196,0,127,0,10,1,32,2,28,2,128,2,120,1,148,1,132,0,64,0,80,0,128,0,232
0023B4  3  00 C4 00 C4  
0023B8  3  00 7F 00 0A  
0023D0  3  80 1F 40 39          .byte 128,31,64,57,0,49,0,49,192,31,128,2,0,72,0,135,0,160,0,158,0,101,0,97,0,16,0,20,0,32,0,58
0023D4  3  00 31 00 31  
0023D8  3  C0 1F 80 02  
0023F0  3  E0 07 50 0E          .byte 224,7,80,14,64,12,64,12,240,7,160,0,0,18,192,33,0,40,128,39,64,25,64,24,0,4,0,5,0,8,128,14
0023F4  3  40 0C 40 0C  
0023F8  3  F0 07 A0 00  
002410  3  01 F8 03 94          .byte 1,248,3,148,3,16,3,16,1,252,0,40,4,128,8,112,18,0,17,236,28,76,12,192,0,32,4,36,8,24,6,16
002414  3  03 10 03 10  
002418  3  01 FC 00 28  
002430  3  00 7E 00 E5          .byte 0,126,0,229,0,196,0,196,0,127,0,10,1,32,2,28,4,128,4,123,7,19,3,48,0,8,1,9,2,6,1,132
002434  3  00 C4 00 C4  
002438  3  00 7F 00 0A  
002450  3  80 1F 40 39          .byte 128,31,64,57,0,49,0,49,192,31,128,2,0,72,0,135,1,32,193,30,193,196,0,204,0,2,64,66,128,129,0,97
002454  3  00 31 00 31  
002458  3  C0 1F 80 02  
002470  3  E0 07 50 0E          .byte 224,7,80,14,64,12,64,12,240,7,160,0,0,18,192,33,0,72,176,71,48,113,0,51,128,0,144,16,96,32,64,24
002474  3  40 0C 40 0C  
002478  3  F0 07 A0 00  
002490  3  01 F8 03 94          .byte 1,248,3,148,3,16,3,16,1,252,0,40,2,128,4,112,5,0,4,240,3,40,3,8,0,128,0,160,1,0,1,208
002494  3  03 10 03 10  
002498  3  01 FC 00 28  
0024B0  3  00 7E 00 E5          .byte 0,126,0,229,0,196,0,196,0,127,0,10,0,160,1,28,1,64,1,60,0,202,0,194,0,32,0,40,0,64,0,116
0024B4  3  00 C4 00 C4  
0024B8  3  00 7F 00 0A  
0024D0  3  80 1F 40 39          .byte 128,31,64,57,0,49,0,49,192,31,128,2,0,40,0,71,0,80,0,79,128,50,128,48,0,8,0,10,0,16,0,29
0024D4  3  00 31 00 31  
0024D8  3  C0 1F 80 02  
0024F0  3  E0 07 50 0E          .byte 224,7,80,14,64,12,64,12,240,7,160,0,0,10,192,17,0,20,192,19,160,12,32,12,0,2,128,2,0,4,64,7
0024F4  3  40 0C 40 0C  
0024F8  3  F0 07 A0 00  
002510  3  01 F8 03 94          .byte 1,248,3,148,3,16,3,16,1,252,0,40,2,128,4,112,5,0,3,208,0,192,0,0,1,16,6,18,8,12,6,8
002514  3  03 10 03 10  
002518  3  01 FC 00 28  
002530  3  00 7E 00 E5          .byte 0,126,0,229,0,196,0,196,0,127,0,10,0,160,1,28,1,64,0,244,0,48,0,0,0,68,129,132,2,3,1,130
002534  3  00 C4 00 C4  
002538  3  00 7F 00 0A  
002550  3  80 1F 40 39          .byte 128,31,64,57,0,49,0,49,192,31,128,2,0,40,0,71,0,80,0,61,0,12,0,0,0,17,32,97,192,128,128,96
002554  3  00 31 00 31  
002558  3  C0 1F 80 02  
002570  3  E0 07 50 0E          .byte 224,7,80,14,64,12,64,12,240,7,160,0,0,10,192,17,0,20,64,15,0,3,0,0,64,4,72,24,48,32,32,24
002574  3  40 0C 40 0C  
002578  3  F0 07 A0 00  
002590  3  00 00 00 00          .byte 0,0,0,0,0,112,3,232,249,192,62,128,7,224,9,240,0,28,3,128,1,240,12,240,13,240,1,240,9,232,11,244
002594  3  00 70 03 E8  
002598  3  F9 C0 3E 80  
0025B0  3  00 00 00 00          .byte 0,0,0,0,0,28,0,250,62,112,15,160,1,248,2,124,0,7,0,224,0,124,3,60,3,124,0,124,2,122,2,253
0025B4  3  00 1C 00 FA  
0025B8  3  3E 70 0F A0  
0025D0  3  00 00 00 00          .byte 0,0,0,0,0,7,128,62,15,156,3,232,0,126,0,159,192,1,0,56,0,31,0,207,0,223,0,31,128,158,64,191
0025D4  3  00 07 80 3E  
0025D8  3  0F 9C 03 E8  
0025F0  3  00 00 00 00          .byte 0,0,0,0,192,1,160,15,3,231,0,250,128,31,192,39,112,0,0,14,192,7,192,51,192,55,192,7,160,39,208,47
0025F4  3  C0 01 A0 0F  
0025F8  3  03 E7 00 FA  
002610  3  00 00 00 00          .byte 0,0,0,0,0,112,3,232,249,192,62,128,7,224,9,240,0,28,3,128,1,240,12,240,13,240,1,240,9,232,11,244
002614  3  00 70 03 E8  
002618  3  F9 C0 3E 80  
002630  3  00 00 00 00          .byte 0,0,0,0,0,28,0,250,62,112,15,160,1,248,2,124,0,7,0,224,0,124,3,60,3,124,0,124,2,122,2,253
002634  3  00 1C 00 FA  
002638  3  3E 70 0F A0  
002650  3  00 00 00 00          .byte 0,0,0,0,0,7,128,62,15,156,3,232,0,126,0,159,192,1,0,56,0,31,0,207,0,223,0,31,128,158,64,191
002654  3  00 07 80 3E  
002658  3  0F 9C 03 E8  
002670  3  00 00 00 00          .byte 0,0,0,0,192,1,160,15,3,231,0,250,128,31,192,39,112,0,0,14,192,7,192,51,192,55,192,7,160,39,208,47
002674  3  C0 01 A0 0F  
002678  3  03 E7 00 FA  
002690  3  00 00 00 00          .byte 0,0,0,0,0,112,3,232,249,192,62,128,7,224,9,240,0,28,3,128,1,240,12,240,13,240,1,240,9,232,11,244
002694  3  00 70 03 E8  
002698  3  F9 C0 3E 80  
0026B0  3  00 00 00 00          .byte 0,0,0,0,0,28,0,250,62,112,15,160,1,248,2,124,0,7,0,224,0,124,3,60,3,124,0,124,2,122,2,253
0026B4  3  00 1C 00 FA  
0026B8  3  3E 70 0F A0  
0026D0  3  00 00 00 00          .byte 0,0,0,0,0,7,128,62,15,156,3,232,0,126,0,159,192,1,0,56,0,31,0,207,0,223,0,31,128,158,64,191
0026D4  3  00 07 80 3E  
0026D8  3  0F 9C 03 E8  
0026F0  3  00 00 00 00          .byte 0,0,0,0,192,1,160,15,3,231,0,250,128,31,192,39,112,0,0,14,192,7,192,51,192,55,192,7,160,39,208,47
0026F4  3  C0 01 A0 0F  
0026F8  3  03 E7 00 FA  
002710  3  00 00 00 00          .byte 0,0,0,0,0,112,3,232,249,192,62,128,7,224,9,240,0,28,3,128,1,240,12,240,13,240,1,240,9,232,11,244
002714  3  00 70 03 E8  
002718  3  F9 C0 3E 80  
002730  3  00 00 00 00          .byte 0,0,0,0,0,28,0,250,62,112,15,160,1,248,2,124,0,7,0,224,0,124,3,60,3,124,0,124,2,122,2,253
002734  3  00 1C 00 FA  
002738  3  3E 70 0F A0  
002750  3  00 00 00 00          .byte 0,0,0,0,0,7,128,62,15,156,3,232,0,126,0,159,192,1,0,56,0,31,0,207,0,223,0,31,128,158,64,191
002754  3  00 07 80 3E  
002758  3  0F 9C 03 E8  
002770  3  00 00 00 00          .byte 0,0,0,0,192,1,160,15,3,231,0,250,128,31,192,39,112,0,0,14,192,7,192,51,192,55,192,7,160,39,208,47
002774  3  C0 01 A0 0F  
002778  3  03 E7 00 FA  
002790  3  00 00 80 01          .byte 0,0,128,1,127,254,107,214,92,58,107,214,72,18,72,18,127,254,71,226,27,216,53,180,86,86,106,106,44,44,24,24
002794  3  7F FE 6B D6  
002798  3  5C 3A 6B D6  
0027B0  3  00 00 60 00          .byte 0,0,96,0,159,255,154,245,151,14,154,245,146,4,146,4,159,255,145,248,6,246,13,109,149,149,154,154,11,11,6,6
0027B4  3  9F FF 9A F5  
0027B8  3  97 0E 9A F5  
0027D0  3  00 00 18 00          .byte 0,0,24,0,231,255,102,189,165,195,102,189,36,129,36,129,231,255,36,126,129,189,67,91,101,101,166,166,194,194,129,129
0027D4  3  E7 FF 66 BD  
0027D8  3  A5 C3 66 BD  
0027F0  3  00 00 06 00          .byte 0,0,6,0,249,255,89,175,233,112,89,175,73,32,73,32,249,255,137,31,96,111,208,214,89,89,169,169,176,176,96,96
0027F4  3  F9 FF 59 AF  
0027F8  3  E9 70 59 AF  
002810  3  00 00 80 01          .byte 0,0,128,1,127,254,107,214,92,58,107,214,72,18,72,18,127,254,71,226,27,216,45,172,114,114,78,78,52,52,24,24
002814  3  7F FE 6B D6  
002818  3  5C 3A 6B D6  
002830  3  00 00 60 00          .byte 0,0,96,0,159,255,154,245,151,14,154,245,146,4,146,4,159,255,145,248,6,246,11,107,156,156,147,147,13,13,6,6
002834  3  9F FF 9A F5  
002838  3  97 0E 9A F5  
002850  3  00 00 18 00          .byte 0,0,24,0,231,255,102,189,165,195,102,189,36,129,36,129,231,255,36,126,129,189,194,218,39,39,228,228,67,67,129,129
002854  3  E7 FF 66 BD  
002858  3  A5 C3 66 BD  
002870  3  00 00 06 00          .byte 0,0,6,0,249,255,89,175,233,112,89,175,73,32,73,32,249,255,137,31,96,111,176,182,201,201,57,57,208,208,96,96
002874  3  F9 FF 59 AF  
002878  3  E9 70 59 AF  
002890  3  00 00 80 01          .byte 0,0,128,1,127,254,107,214,92,58,107,214,72,18,72,18,127,254,71,226,27,216,53,180,86,86,106,106,44,44,24,24
002894  3  7F FE 6B D6  
002898  3  5C 3A 6B D6  
0028B0  3  00 00 60 00          .byte 0,0,96,0,159,255,154,245,151,14,154,245,146,4,146,4,159,255,145,248,6,246,13,109,149,149,154,154,11,11,6,6
0028B4  3  9F FF 9A F5  
0028B8  3  97 0E 9A F5  
0028D0  3  00 00 18 00          .byte 0,0,24,0,231,255,102,189,165,195,102,189,36,129,36,129,231,255,36,126,129,189,67,91,101,101,166,166,194,194,129,129
0028D4  3  E7 FF 66 BD  
0028D8  3  A5 C3 66 BD  
0028F0  3  00 00 06 00          .byte 0,0,6,0,249,255,89,175,233,112,89,175,73,32,73,32,249,255,137,31,96,111,208,214,89,89,169,169,176,176,96,96
0028F4  3  F9 FF 59 AF  
0028F8  3  E9 70 59 AF  
002910  3  00 00 80 01          .byte 0,0,128,1,127,254,107,214,92,58,107,214,72,18,72,18,127,254,71,226,27,216,53,180,86,86,106,106,44,44,24,24
002914  3  7F FE 6B D6  
002918  3  5C 3A 6B D6  
002930  3  00 00 60 00          .byte 0,0,96,0,159,255,154,245,151,14,154,245,146,4,146,4,159,255,145,248,6,246,13,109,149,149,154,154,11,11,6,6
002934  3  9F FF 9A F5  
002938  3  97 0E 9A F5  
002950  3  00 00 18 00          .byte 0,0,24,0,231,255,102,189,165,195,102,189,36,129,36,129,231,255,36,126,129,189,67,91,101,101,166,166,194,194,129,129
002954  3  E7 FF 66 BD  
002958  3  A5 C3 66 BD  
002970  3  00 00 06 00          .byte 0,0,6,0,249,255,89,175,233,112,89,175,73,32,73,32,249,255,137,31,96,111,208,214,89,89,169,169,176,176,96,96
002974  3  F9 FF 59 AF  
002978  3  E9 70 59 AF  
002990  3  00 00 01 80          .byte 0,0,1,128,7,224,31,248,49,140,57,156,125,190,111,246,103,230,101,166,48,12,48,12,28,56,15,240,1,128,0,0
002994  3  07 E0 1F F8  
002998  3  31 8C 39 9C  
0029B0  3  00 00 00 60          .byte 0,0,0,96,1,248,7,254,12,99,14,103,159,111,155,253,153,249,153,105,12,3,12,3,7,14,3,252,0,96,0,0
0029B4  3  01 F8 07 FE  
0029B8  3  0C 63 0E 67  
0029D0  3  00 00 00 18          .byte 0,0,0,24,0,126,129,255,195,24,195,153,231,219,102,255,102,126,102,90,195,0,195,0,129,195,0,255,0,24,0,0
0029D4  3  00 7E 81 FF  
0029D8  3  C3 18 C3 99  
0029F0  3  00 00 00 06          .byte 0,0,0,6,128,31,224,127,48,198,112,230,249,246,217,191,153,159,153,150,48,192,48,192,224,112,192,63,0,6,0,0
0029F4  3  80 1F E0 7F  
0029F8  3  30 C6 70 E6  
002A10  3  00 00 01 80          .byte 0,0,1,128,7,224,31,248,49,140,57,156,125,190,111,246,103,230,117,174,48,12,62,124,31,248,15,240,1,128,0,0
002A14  3  07 E0 1F F8  
002A18  3  31 8C 39 9C  
002A30  3  00 00 00 60          .byte 0,0,0,96,1,248,7,254,12,99,14,103,159,111,155,253,153,249,157,107,12,3,15,159,7,254,3,252,0,96,0,0
002A34  3  01 F8 07 FE  
002A38  3  0C 63 0E 67  
002A50  3  00 00 00 18          .byte 0,0,0,24,0,126,129,255,195,24,195,153,231,219,102,255,102,126,231,90,195,0,195,231,129,255,0,255,0,24,0,0
002A54  3  00 7E 81 FF  
002A58  3  C3 18 C3 99  
002A70  3  00 00 00 06          .byte 0,0,0,6,128,31,224,127,48,198,112,230,249,246,217,191,153,159,185,214,48,192,240,249,224,127,192,63,0,6,0,0
002A74  3  80 1F E0 7F  
002A78  3  30 C6 70 E6  
002A90  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
002A94  3  00 00 00 00  
002A98  3  00 00 00 00  
002AB0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
002AB4  3  00 00 00 00  
002AB8  3  00 00 00 00  
002AD0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
002AD4  3  00 00 00 00  
002AD8  3  00 00 00 00  
002AF0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
002AF4  3  00 00 00 00  
002AF8  3  00 00 00 00  
002B10  3  00 C6 07 0C          .byte 0,198,7,12,31,219,63,158,56,159,74,140,72,192,127,192,63,240,21,128,0,16,2,176,1,224,0,0,0,0,0,0
002B14  3  1F DB 3F 9E  
002B18  3  38 9F 4A 8C  
002B30  3  80 31 01 C3          .byte 128,49,1,195,199,246,143,231,206,39,18,163,18,48,31,240,15,252,5,96,0,4,0,172,0,120,0,0,0,0,0,0
002B34  3  C7 F6 8F E7  
002B38  3  CE 27 12 A3  
002B50  3  60 0C C0 70          .byte 96,12,192,112,177,253,227,249,243,137,196,168,4,140,7,252,3,255,1,88,0,1,0,43,0,30,0,0,0,0,0,0
002B54  3  B1 FD E3 F9  
002B58  3  F3 89 C4 A8  
002B70  3  18 03 30 1C          .byte 24,3,48,28,108,127,120,254,124,226,49,42,1,35,1,255,192,255,0,86,64,0,192,10,128,7,0,0,0,0,0,0
002B74  3  6C 7F 78 FE  
002B78  3  7C E2 31 2A  
002B90  3  00 C0 07 0E          .byte 0,192,7,14,31,220,63,155,56,158,74,159,72,204,127,192,63,240,21,128,0,0,0,0,0,16,2,176,1,224,0,0
002B94  3  1F DC 3F 9B  
002B98  3  38 9E 4A 9F  
002BB0  3  00 30 81 C3          .byte 0,48,129,195,7,247,207,230,142,39,210,167,18,51,31,240,15,252,5,96,0,0,0,0,0,4,0,172,0,120,0,0
002BB4  3  07 F7 CF E6  
002BB8  3  8E 27 D2 A7  
002BD0  3  00 0C E0 70          .byte 0,12,224,112,193,253,179,249,227,137,244,169,196,140,7,252,3,255,1,88,0,0,0,0,0,1,0,43,0,30,0,0
002BD4  3  C1 FD B3 F9  
002BD8  3  E3 89 F4 A9  
002BF0  3  00 03 38 1C          .byte 0,3,56,28,112,127,108,254,120,226,125,42,49,35,1,255,192,255,0,86,0,0,0,0,64,0,192,10,128,7,0,0
002BF4  3  70 7F 6C FE  
002BF8  3  78 E2 7D 2A  
002C10  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,56,56,124,124,226,226,226,226,124,124,56,56,0,0,0,0,0,0,0,0,0,0
002C14  3  00 00 00 00  
002C18  3  00 00 38 38  
002C30  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,14,14,31,31,184,184,184,184,31,31,14,14,0,0,0,0,0,0,0,0,0,0
002C34  3  00 00 00 00  
002C38  3  00 00 0E 0E  
002C50  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,131,131,199,199,46,46,46,46,199,199,131,131,0,0,0,0,0,0,0,0,0,0
002C54  3  00 00 00 00  
002C58  3  00 00 83 83  
002C70  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,224,224,241,241,139,139,139,139,241,241,224,224,0,0,0,0,0,0,0,0,0,0
002C74  3  00 00 00 00  
002C78  3  00 00 E0 E0  
002C90  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,56,56,124,124,142,142,142,142,124,124,56,56,0,0,0,0,0,0,0,0,0,0
002C94  3  00 00 00 00  
002C98  3  00 00 38 38  
002CB0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,14,14,31,31,163,163,163,163,31,31,14,14,0,0,0,0,0,0,0,0,0,0
002CB4  3  00 00 00 00  
002CB8  3  00 00 0E 0E  
002CD0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,131,131,199,199,232,232,232,232,199,199,131,131,0,0,0,0,0,0,0,0,0,0
002CD4  3  00 00 00 00  
002CD8  3  00 00 83 83  
002CF0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,224,224,241,241,58,58,58,58,241,241,224,224,0,0,0,0,0,0,0,0,0,0
002CF4  3  00 00 00 00  
002CF8  3  00 00 E0 E0  
002D10  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,129,0,0,0,0,0,0,0,0,0,129,0,255,0
002D14  3  00 00 00 00  
002D18  3  00 00 00 00  
002D30  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,192,32,64,0,0,0,0,0,0,0,0,32,64,63,192
002D34  3  00 00 00 00  
002D38  3  00 00 00 00  
002D50  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,240,8,16,0,0,0,0,0,0,0,0,8,16,15,240
002D54  3  00 00 00 00  
002D58  3  00 00 00 00  
002D70  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,252,2,4,0,0,0,0,0,0,0,0,2,4,3,252
002D74  3  00 00 00 00  
002D78  3  00 00 00 00  
002D90  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,224,14,80,12,64,12,64,7,240,48,160,170,12
002D94  3  00 00 00 00  
002D98  3  00 00 00 00  
002DB0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,248,3,148,3,16,3,16,1,252,12,40,42,131
002DB4  3  00 00 00 00  
002DB8  3  00 00 00 00  
002DD0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,229,0,196,0,196,0,127,3,10,202,160
002DD4  3  00 00 00 00  
002DD8  3  00 00 00 00  
002DF0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,31,64,57,0,49,0,49,192,31,128,194,50,168
002DF4  3  00 00 00 00  
002DF8  3  00 00 00 00  
002E10  3               frmlst:
002E10  3  00 04                .byte 0,4
002E12  3  04 04                .byte 4,4
002E14  3  08 04                .byte 8,4
002E16  3  0C 04                .byte 12,4
002E18  3  10 02                .byte 16,2
002E1A  3  12 01                .byte 18,1
002E1C  3  13 02                .byte 19,2
002E1E  3  15 02                .byte 21,2
002E20  3  17 01                .byte 23,1
002E22  3  18 01 19 00          .byte 24,1,25,0
002E26  3               scdat:
002E26  3  D8 01 12 01          .word 472,274,116,179,149,158,131,160,217,239,261,142,181,179,140,149,138,168,178,210,122,157,275,144,139,122
002E2A  3  74 00 B3 00  
002E2E  3  95 00 9E 00  
002E5A  3  7A 00 84 00          .word 122,132,125,120,122,113,111,110,110,110,110,110,110,107,61,63,63,58,46,204,36
002E5E  3  7D 00 78 00  
002E62  3  7A 00 71 00  
002E84  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,4,7,7,7,0,0,0,7,7,0,0,7,7,7,0,0,7,0,0,7
002E88  3  06 01 FF 00  
002E8C  3  1C 06 01 FF  
002EA5  3  FF 00 05 06          .byte 255,0,5,6,1,255,0,4,7,0,0,7,0,7,0,0,7,0,7,0,0,7,0,7,0,0,7,255,0,5,6,1,255,0,4
002EA9  3  01 FF 00 04  
002EAD  3  07 00 00 07  
002EC8  3  07 00 00 07          .byte 7,0,0,7,0,7,0,0,7,0,7,0,0,7,0,7,0,7,255,0,6,6,1,255,0,4,7,0,0,7,0,255,7,4
002ECC  3  00 07 00 00  
002ED0  3  07 00 07 00  
002EEA  3  00 07 07 07          .byte 0,7,7,7,0,0,7,7,255,0,7,6,1,255,0,4,7,0,0,7,0,7,0,0,7,0,7,0,0,7,0,7,0
002EEE  3  00 00 07 07  
002EF2  3  FF 00 07 06  
002F0B  3  07 FF 00 06          .byte 7,255,0,6,6,1,255,0,4,7,0,0,7,0,7,0,0,7,0,7,0,0,7,0,7,0,0,7,255,0,5,6,1
002F0F  3  06 01 FF 00  
002F13  3  04 07 00 00  
002F2C  3  FF 00 04 07          .byte 255,0,4,7,0,0,7,0,7,0,0,7,0,7,0,0,7,0,7,0,0,7,255,0,5,6,1,255,0,4,7,7,7
002F30  3  00 00 07 00  
002F34  3  07 00 00 07  
002F4D  3  00 00 07 00          .byte 0,0,7,0,0,7,0,7,0,0,7,0,7,0,0,7,255,0,5,6,1,255,0,28,6,1,0,255,7,5,0,7,7,7
002F51  3  00 07 00 07  
002F55  3  00 00 07 00  
002F6F  3  00 00 07 00          .byte 0,0,7,0,0,7,7,7,0,7,0,0,7,0,7,7,7,0,6,1,0,0,0,7,0,0,0,7,0,0,7,0,0,0
002F73  3  00 07 07 07  
002F77  3  00 07 00 00  
002F91  3  07 FF 00 04          .byte 7,255,0,4,7,0,0,7,0,7,0,0,0,6,1,0,0,0,7,0,0,0,7,0,0,7,0,7,0,7,255,0,4
002F95  3  07 00 00 07  
002F99  3  00 07 00 00  
002FB2  3  07 00 07 00          .byte 7,0,7,0,0,7,0,0,0,6,1,0,0,0,7,0,0,0,7,7,7,0,0,7,0,7,255,0,4,7,7,0,0,0
002FB6  3  00 07 00 00  
002FBA  3  00 06 01 00  
002FD4  3  07 07 07 00          .byte 7,7,7,0,6,1,0,0,0,7,0,0,0,7,0,0,7,0,7,0,7,255,0,4,7,0,7,255,0,4,7,0,6
002FD8  3  06 01 00 00  
002FDC  3  00 07 00 00  
002FF5  3  01 00 00 00          .byte 1,0,0,0,7,0,0,0,7,0,0,7,0,7,0,7,255,0,4,7,0,0,7,0,0,0,7,0,6,1,0,0,0
002FF9  3  07 00 00 00  
002FFD  3  07 00 00 07  
003016  3  07 00 00 00          .byte 7,0,0,0,7,0,0,7,0,7,0,7,255,0,4,7,0,0,7,0,0,0,7,0,6,1,0,0,0,7,0,0,0
00301A  3  07 00 00 07  
00301E  3  00 07 00 07  
003037  3  07 00 00 07          .byte 7,0,0,7,0,7,0,0,7,7,7,0,7,0,0,7,0,7,7,7,0,6,1,255,0,28,6,1,255,0,28,6,1
00303B  3  00 07 00 00  
00303F  3  07 07 07 00  
003058  3  FF 00 1C 06          .byte 255,0,28,6
00305C  3  FF 00 3B 17          .byte 255,0,59,23,255,0,7,25,255,0,5,25,255,0,4,25,255,0,8,20,0,22,0,0,25,255,0,14,25,255,0,7,25
003060  3  FF 00 07 19  
003064  3  FF 00 05 19  
00307D  3  FF 00 48 09          .byte 255,0,72,9,255,0,7,25,255,0,4,9,255,0,10,25,255,0,4,9,9,9,255,0,11,9,255,0,4,25,255,0,11
003081  3  FF 00 07 19  
003085  3  FF 00 04 09  
00309E  3  09 FF 00 0B          .byte 9,255,0,11,9,9,255,0,13,25,0,0,9,9,255,0,10,9,10,9,255,0,5,25,255,0,8,9,9,9,255,0,9
0030A2  3  09 09 FF 00  
0030A6  3  0D 19 00 00  
0030BF  3  FF 09 04 FF          .byte 255,9,4,255,0,13,255,9,4,0,0,0,25,255,0,5,255,9,5,255,0,5,9,9,255,0,4,255,9,6,255,0,7
0030C3  3  00 0D FF 09  
0030C7  3  04 00 00 00  
0030E0  3  09 09 09 0A          .byte 9,9,9,10,9,9,9,0,0,0,255,9,4,0,255,9,8,255,0,5,255,9,4,10,10,10,255,9,16,10,9,9,255,0,4
0030E4  3  09 09 09 00  
0030E8  3  00 00 FF 09  
003103  3  FF 09 16 0A          .byte 255,9,22,10,10,10,9,255,0,4,9,9,0,255,9,5,10,9,9,9,10,255,9,9,10,10,10,9,9,255,0,7,255,9,5
003107  3  0A 0A 09 FF  
00310B  3  00 04 09 09  
003126  3  0A 09 0A 0A          .byte 10,9,10,10,255,9,14,255,0,8,9,10,255,9,4,10,255,9,4,10,10,255,9,4,10,10,9,9,255,0,9,9,10
00312A  3  FF 09 0E FF  
00312E  3  00 08 09 0A  
003147  3  FF 09 0A 0A          .byte 255,9,10,10,10,9,9,10,10,255,0,12,9,9,10,255,9,13,10,10,255,0,13,9,10,255,9,6,255,3,13,4,255,0,6
00314B  3  0A 09 09 0A  
00314F  3  0A FF 00 0C  
00316A  3  05 FF 03 09          .byte 5,255,3,9
00316E  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
003172  3  06 01 FF 00  
003176  3  1C 06 01 FF  
003190  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
003194  3  1C 06 01 FF  
003198  3  00 1C 06 01  
0031B3  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,10,255,2,8,255,0,10,6,1,255,0,28,6,1,255,0,28,6,1
0031B7  3  1C 06 01 FF  
0031BB  3  00 1C 06 01  
0031D4  3  FF 00 1C 06          .byte 255,0,28,6,1,255,0,28,6,1,255,0,28,6
0031D8  3  01 FF 00 1C  
0031DC  3  06 01 FF 00  
0031E2  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0031E6  3  06 01 FF 00  
0031EA  3  1C 06 01 FF  
003204  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,26,8,2,6,1,255,0,4,255,2,4,255,0,17,8,2,0,6,1,255,0,24,8,2
003208  3  1C 06 01 FF  
00320C  3  00 1A 08 02  
003225  3  00 00 06 01          .byte 0,0,6,1,255,0,23,8,2,0,0,0,6,1,255,0,22,8,2,255,0,4,6,1,255,0,7,2,2,255,0,12,8
003229  3  FF 00 17 08  
00322D  3  02 00 00 00  
003246  3  02 FF 00 05          .byte 2,255,0,5,6,1,255,0,9,2,2,255,0,9,8,2,255,0,6,6,1,255,0,11,2,2,255,0,6,2,2,255,0,7
00324A  3  06 01 FF 00  
00324E  3  09 02 02 FF  
003268  3  06 01 FF 00          .byte 6,1,255,0,13,2,2,255,0,13,6,1,255,2,6,255,0,22,6,1,255,0,28,6,1,255,0,16,255,2,9,0,0,0
00326C  3  0D 02 02 FF  
003270  3  00 0D 06 01  
00328A  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6
00328E  3  1C 06 01 FF  
003292  3  00 1C 06     
003295  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
003299  3  06 01 FF 00  
00329D  3  1C 06 01 FF  
0032B7  3  06 01 FF 00          .byte 6,1,255,0,21,2,2,255,0,5,6,1,255,0,18,2,2,2,255,0,7,6,1,255,0,10,255,2,5,255,0,13,6
0032BB  3  15 02 02 FF  
0032BF  3  00 05 06 01  
0032D8  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,6,2,2,255,0,20,6,1,255,0,28,6,1,2,2,2,255,0,25,6,1,255,0,28,6
0032DC  3  06 01 FF 00  
0032E0  3  06 02 02 FF  
0032F9  3  01 FF 00 04          .byte 1,255,0,4,255,2,9,255,0,15,6,1,255,0,13,2,2,255,0,13,6,1,255,0,28,6,1,255,0,28,6,1,255,0,9
0032FD  3  FF 02 09 FF  
003301  3  00 0F 06 01  
00331C  3  FF 02 13 06          .byte 255,2,19,6,1,255,0,28,6,1,255,0,28,6
003320  3  01 FF 00 1C  
003324  3  06 01 FF 00  
00332A  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
00332E  3  06 01 FF 00  
003332  3  1C 06 01 FF  
00334C  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,26,2,2,6,1,255,0,24,2,2,0,0,6,1,255,0,22,2,2
003350  3  1C 06 01 FF  
003354  3  00 1C 06 01  
00336D  3  FF 00 04 06          .byte 255,0,4,6,1,255,0,28,6,1,255,0,16,255,2,4,255,0,8,6,1,255,0,28,6,1,255,0,10,2,2,255,0,16
003371  3  01 FF 00 1C  
003375  3  06 01 FF 00  
00338F  3  06 01 FF 00          .byte 6,1,255,0,12,2,2,255,0,14,6,1,255,2,6,255,0,8,2,2,2,255,0,11,6,1,255,0,28,6,1,255,0,19
003393  3  0C 02 02 FF  
003397  3  00 0E 06 01  
0033B1  3  FF 02 06 00          .byte 255,2,6,0,0,0,6,1,255,0,6,255,2,5,255,0,17,6,1,255,0,28,6
0033B5  3  00 00 06 01  
0033B9  3  FF 00 06 FF  
0033C8  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0033CC  3  06 01 FF 00  
0033D0  3  1C 06 01 FF  
0033EA  3  06 01 FF 00          .byte 6,1,255,0,5,255,2,6,255,0,17,6,1,255,0,19,255,2,9,6,1,255,0,28,6,1,255,0,13,2,2,2,255,0,12
0033EE  3  05 FF 02 06  
0033F2  3  FF 00 11 06  
00340D  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,18,255,2,4,255,0,6,6,1,255,0,28,6,1,255,0,28,6,1
003411  3  1C 06 01 FF  
003415  3  00 1C 06 01  
00342E  3  FF 00 1C 06          .byte 255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6
003432  3  01 FF 00 1C  
003436  3  06 01 FF 00  
00344B  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
00344F  3  06 01 FF 00  
003453  3  1C 06 01 FF  
00346D  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
003471  3  1C 06 01 FF  
003475  3  00 1C 06 01  
003490  3  06 01 00 02          .byte 6,1,0,2,2,0,0,2,2,0,0,2,2,0,0,2,2,0,0,2,2,0,0,2,2,0,0,2,2,0,6,1,255,0,28
003494  3  02 00 00 02  
003498  3  02 00 00 02  
0034B3  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,0,0,0,2,2,0,0,2,2,0,0,2,2,0,0,2,2,0,0,2,2,0,0,2,2,0,0,0
0034B7  3  1C 06 01 00  
0034BB  3  00 00 02 02  
0034D6  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6
0034DA  3  1C 06 01 FF  
0034DE  3  00 1C 06 01  
0034EB  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0034EF  3  06 01 FF 00  
0034F3  3  1C 06 01 FF  
00350D  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,2,8,255,0,24,8,2,6,1,0,2,8,255,0,22,8
003511  3  1C 06 01 FF  
003515  3  00 1C 06 01  
00352E  3  02 00 06 01          .byte 2,0,6,1,0,0,2,8,255,0,20,8,2,0,0,6,1,0,0,0,2,8,255,0,18,8,2,0,0,0,6,1,255,0,4
003532  3  00 00 02 08  
003536  3  FF 00 14 08  
003551  3  02 08 FF 00          .byte 2,8,255,0,16,8,2,255,0,4,6,1,255,0,5,2,8,255,0,14,8,2,255,0,5,6,1,255,0,6,2,8,255,0,12
003555  3  10 08 02 FF  
003559  3  00 04 06 01  
003574  3  08 02 FF 00          .byte 8,2,255,0,6,6,1,255,0,7,2,8,255,0,10,8,2,255,0,7,6,1,255,0,8,2,8,255,0,8,8,2,255,0,8
003578  3  06 06 01 FF  
00357C  3  00 07 02 08  
003597  3  06 01 FF 00          .byte 6,1,255,0,9,2,8,255,0,6,8,2,255,0,9,6,1,255,0,10,2,8,255,0,4,8,2,255,0,10,6,1,255,0,11
00359B  3  09 02 08 FF  
00359F  3  00 06 08 02  
0035BA  3  02 02 00 00          .byte 2,2,0,0,2,2,255,0,11,6
0035BE  3  02 02 FF 00  
0035C2  3  0B 06        
0035C4  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0035C8  3  06 01 FF 00  
0035CC  3  1C 06 01 FF  
0035E6  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0035EA  3  1C 06 01 FF  
0035EE  3  00 1C 06 01  
003609  3  06 01 08 FF          .byte 6,1,8,255,0,5,8,255,0,5,8,255,0,5,8,255,0,5,8,0,0,0,6,1,8,255,0,5,8,255,0,5,8
00360D  3  00 05 08 FF  
003611  3  00 05 08 FF  
00362A  3  FF 00 05 08          .byte 255,0,5,8,255,0,5,8,0,0,0,6,1,8,255,0,5,8,255,0,5,8,255,0,5,8,255,0,5,8,0,0,0
00362E  3  FF 00 05 08  
003632  3  00 00 00 06  
00364B  3  06 01 08 00          .byte 6,1,8,0,0,8,0,0,8,0,0,8,0,0,8,0,0,8,0,0,8,0,0,8,0,0,8,0,0,0,6,1,8
00364F  3  00 08 00 00  
003653  3  08 00 00 08  
00366C  3  00 00 08 00          .byte 0,0,8,0,0,8,0,0,8,0,0,8,0,0,8,0,0,8,0,0,8,0,0,8,0,0,0,6,1,8,0,0,8
003670  3  00 08 00 00  
003674  3  08 00 00 08  
00368D  3  00 00 08 00          .byte 0,0,8,0,0,8,0,0,8,0,0,8,0,0,8,0,0,8,0,0,8,0,0,0,6,1,255,2,25,0,0,0,6
003691  3  00 08 00 00  
003695  3  08 00 00 08  
0036AE  3  01 FF 00 1C          .byte 1,255,0,28,6
0036B2  3  06           
0036B3  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0036B7  3  06 01 FF 00  
0036BB  3  1C 06 01 FF  
0036D5  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,5,8,2,2
0036D9  3  1C 06 01 FF  
0036DD  3  00 1C 06 01  
0036F6  3  08 00 00 00          .byte 8,0,0,0,8,2,2,8,0,0,8,8,2,2,8,255,0,5,6,1,255,0,4,8,8,0,0,8,8,0,8,8,0,0
0036FA  3  08 02 02 08  
0036FE  3  00 00 08 08  
003718  3  02 02 00 08          .byte 2,2,0,8,8,0,0,8,8,255,0,4,6,1,255,0,4,8,8,0,0,8,8,0,8,8,255,0,5,8,8,0,0
00371C  3  08 00 00 08  
003720  3  08 FF 00 04  
003739  3  08 08 FF 00          .byte 8,8,255,0,4,6,1,255,0,4,8,8,2,2,8,8,0,8,8,255,0,5,8,8,0,0,8,8,255,0,4,6,1
00373D  3  04 06 01 FF  
003741  3  00 04 08 08  
00375A  3  FF 00 04 08          .byte 255,0,4,8,8,0,0,8,8,0,8,8,0,2,8,8,0,8,8,0,0,8,8,255,0,4,6,1,255,0,4,8,8
00375E  3  08 00 00 08  
003762  3  08 00 08 08  
00377B  3  00 00 08 08          .byte 0,0,8,8,0,8,8,0,0,8,2,0,8,8,0,0,8,2,255,0,4,6,1,255,0,4,2,2,0,0,2,2,0,0
00377F  3  00 08 08 00  
003783  3  00 08 02 00  
00379D  3  FF 02 04 00          .byte 255,2,4,0,0,255,2,5,255,0,5,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6
0037A1  3  00 FF 02 05  
0037A5  3  FF 00 05 06  
0037B8  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0037BC  3  06 01 FF 00  
0037C0  3  1C 06 01 FF  
0037DA  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,2,2,255,0,7,2,2,255,0,17,6,1,255,0,16,2,2,255,0,10,6
0037DE  3  1C 06 01 FF  
0037E2  3  00 1C 06 01  
0037FB  3  01 FF 00 04          .byte 1,255,0,4,2,2,255,0,22,6,1,255,0,12,2,2,2,255,0,5,2,2,255,0,6,6,1,255,0,28,6,1,255,0,24
0037FF  3  02 02 FF 00  
003803  3  16 06 01 FF  
00381E  3  02 02 00 00          .byte 2,2,0,0,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
003822  3  06 01 FF 00  
003826  3  1C 06 01 FF  
003840  3  06 01 FF 00          .byte 6,1,255,0,28,6
003844  3  1C 06        
003846  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,0,255,2,5
00384A  3  06 01 FF 00  
00384E  3  1C 06 01 FF  
003869  3  FF 00 16 06          .byte 255,0,22,6,1,255,0,28,6,1,255,0,6,2,2,255,0,15,2,2,2,0,0,6,1,255,0,19,2,2,255,0,7
00386D  3  01 FF 00 1C  
003871  3  06 01 FF 00  
00388A  3  06 01 FF 00          .byte 6,1,255,0,8,2,255,0,7,2,255,0,11,6,1,255,0,28,6,1,255,0,9,2,255,0,4,8,2,255,0,12,6
00388E  3  08 02 FF 00  
003892  3  07 02 FF 00  
0038AB  3  01 FF 00 0D          .byte 1,255,0,13,8,2,255,0,13,6,1,255,0,12,2,2,255,0,14,6,1,255,0,28,6,1,255,0,10,255,2,7,0,0
0038AF  3  08 02 FF 00  
0038B3  3  0D 06 01 FF  
0038CD  3  FF 02 07 00          .byte 255,2,7,0,0,6,1,255,0,6,2,2,255,0,20,6,1,255,0,28,6,1,2,2,0,0,2,2,255,0,22,6,1
0038D1  3  00 06 01 FF  
0038D5  3  00 06 02 02  
0038EE  3  00 00 02 02          .byte 0,0,2,2,255,0,24,6,1,255,0,28,6
0038F2  3  FF 00 18 06  
0038F6  3  01 FF 00 1C  
0038FB  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0038FF  3  06 01 FF 00  
003903  3  1C 06 01 FF  
00391D  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,13,8,8,255,0,13,6,1,255,0,12,255,8,4
003921  3  1C 06 01 FF  
003925  3  00 1C 06 01  
00393E  3  FF 00 0C 06          .byte 255,0,12,6,1,255,0,11,255,8,6,255,0,11,6,1,255,0,10,255,8,8,255,0,10,6,1,255,0,9,255,8,10
003942  3  01 FF 00 0B  
003946  3  FF 08 06 FF  
00395F  3  FF 00 09 06          .byte 255,0,9,6,1,255,0,8,255,8,12,255,0,8,6,1,255,0,7,255,8,14,255,0,7,6,1,255,0,6,255,8,16
003963  3  01 FF 00 08  
003967  3  FF 08 0C FF  
003980  3  FF 00 06 06          .byte 255,0,6,6,1,255,0,5,255,8,18,255,0,5,6,1,255,0,4,255,8,20,255,0,4,6,1,0,0,0,255,8,22
003984  3  01 FF 00 05  
003988  3  FF 08 12 FF  
0039A1  3  00 00 00 06          .byte 0,0,0,6,1,0,0,255,8,24,0,0,6
0039A5  3  01 00 00 FF  
0039A9  3  08 18 00 00  
0039AE  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,24
0039B2  3  06 01 FF 00  
0039B6  3  1C 06 01 FF  
0039D0  3  FF 02 04 06          .byte 255,2,4,6,1,255,0,28,6,1,255,0,21,2,255,0,6,6,1,255,0,28,6,1,255,0,16,2,2,2,255,0,9
0039D4  3  01 FF 00 1C  
0039D8  3  06 01 FF 00  
0039F1  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,13,2,255,0,14,6,1,255,0,28,6,1,255,0,8,2,2,2,255,0,17,6,1,255,0,28
0039F5  3  1C 06 01 FF  
0039F9  3  00 0D 02 FF  
003A14  3  06 01 FF 00          .byte 6,1,255,0,5,2,255,0,22,6,1,255,0,28,6,1,2,2,2,255,0,25,6,1,255,0,28,6,1,255,0,28,6
003A18  3  05 02 FF 00  
003A1C  3  16 06 01 FF  
003A35  3  01 FF 00 1C          .byte 1,255,0,28,6
003A39  3  06           
003A3A  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,17
003A3E  3  06 01 FF 00  
003A42  3  1C 06 01 FF  
003A5C  3  02 FF 00 0A          .byte 2,255,0,10,6,1,255,0,21,2,255,0,6,6,1,255,0,7,2,2,255,0,4,2,2,255,0,13,6,1,255,0,24
003A60  3  06 01 FF 00  
003A64  3  15 02 FF 00  
003A7D  3  02 02 00 00          .byte 2,2,0,0,6,1,255,0,4,2,255,0,5,2,255,0,17,6,1,255,0,28,6,1,0,2,2,255,0,25,6,1,255,0,28
003A81  3  06 01 FF 00  
003A85  3  04 02 FF 00  
003AA0  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,10,255,2,8,255,0,10,6,1,255,0,28,6,1,255,0,28,6,1
003AA4  3  1C 06 01 FF  
003AA8  3  00 1C 06 01  
003AC1  3  FF 00 1C 06          .byte 255,0,28,6,1,255,0,28,6,1,255,0,28,6
003AC5  3  01 FF 00 1C  
003AC9  3  06 01 FF 00  
003ACF  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,10,2,2,0,0
003AD3  3  06 01 FF 00  
003AD7  3  1C 06 01 FF  
003AF0  3  FF 02 04 FF          .byte 255,2,4,255,0,8,2,2,6,1,255,0,28,6,1,0,0,255,2,5,255,0,13,2,2,255,0,6,6,1,255,0,28
003AF4  3  00 08 02 02  
003AF8  3  06 01 FF 00  
003B11  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,2,19
003B15  3  1C 06 01 FF  
003B19  3  00 1C 06 01  
003B34  3  FF 00 09 06          .byte 255,0,9,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,19,255,2,9,6,1
003B38  3  01 FF 00 1C  
003B3C  3  06 01 FF 00  
003B55  3  FF 00 1C 06          .byte 255,0,28,6
003B59  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,0,2,0,0,0,2,255,0,16
003B5D  3  06 01 FF 00  
003B61  3  1C 06 01 FF  
003B7C  3  02 00 00 00          .byte 2,0,0,0,2,2,6,1,255,0,28,6,1,255,0,8,2,255,0,9,2,255,0,9,6,1,255,0,28,6,1,255,0,11
003B80  3  02 02 06 01  
003B84  3  FF 00 1C 06  
003B9E  3  02 00 00 00          .byte 2,0,0,0,2,255,0,12,6,1,255,0,28,6,1,255,0,28,6,1,255,0,12,2,255,0,9,2,255,0,5,6,1
003BA2  3  02 FF 00 0C  
003BA6  3  06 01 FF 00  
003BBF  3  FF 00 12 02          .byte 255,0,18,2,255,0,9,6,1,255,0,15,2,255,0,9,2,0,0,6,1,255,0,28,6,1,255,0,28,6,1,0,0
003BC3  3  FF 00 09 06  
003BC7  3  01 FF 00 0F  
003BE0  3  02 FF 00 19          .byte 2,255,0,25,6,1,255,0,28,6,1,255,0,5,2,2,0,0,2,255,0,18,6,1,255,0,28,6,1,255,0,28,6
003BE4  3  06 01 FF 00  
003BE8  3  1C 06 01 FF  
003C01  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
003C05  3  06 01 FF 00  
003C09  3  1C 06 01 FF  
003C23  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,2,4,255,0,11,2,2,2,255,0,10
003C27  3  1C 06 01 FF  
003C2B  3  00 1C 06 01  
003C45  3  06 01 FF 00          .byte 6,1,255,0,5,2,255,0,7,2,255,0,5,2,255,0,8,6,1,255,0,7,255,2,5,255,0,9,2,255,8,4,0,0
003C49  3  05 02 FF 00  
003C4D  3  07 02 FF 00  
003C67  3  06 01 FF 00          .byte 6,1,255,0,22,255,8,4,0,0,6,1,255,0,22,2,8,8,8,0,0,6,1,255,0,23,8,8,8,0,0,6,1
003C6B  3  16 FF 08 04  
003C6F  3  00 00 06 01  
003C88  3  FF 00 17 02          .byte 255,0,23,2,8,8,0,0,6,1,255,0,24,8,8,0,0,6,1,255,0,24,2,8,0,0,6,1,255,0,25,8,0,0
003C8C  3  08 08 00 00  
003C90  3  06 01 FF 00  
003CAA  3  06 01 FF 00          .byte 6,1,255,0,25,2,0,0,6
003CAE  3  19 02 00 00  
003CB2  3  06           
003CB3  3  01 FF 00 19          .byte 1,255,0,25,8,0,0,6,1,255,0,25,8,0,0,6,1,255,0,25,8,0,0,6,1,255,0,25,8,0,0,6,1
003CB7  3  08 00 00 06  
003CBB  3  01 FF 00 19  
003CD4  3  FF 00 19 08          .byte 255,0,25,8,0,0,6,1,255,0,25,8,0,0,6,1,255,0,25,8,0,0,6,1,255,0,25,8,0,0,6,1,255,0,25
003CD8  3  00 00 06 01  
003CDC  3  FF 00 19 08  
003CF7  3  08 00 00 06          .byte 8,0,0,6,1,255,0,25,8,0,0,6,1,255,0,25,8,0,0,6,1,255,0,25,8,0,0,6,1,255,0,25,8
003CFB  3  01 FF 00 19  
003CFF  3  08 00 00 06  
003D18  3  00 00 06 01          .byte 0,0,6,1,255,0,25,8,0,0,6,1,255,0,6,2,2,2,8,255,0,15,8,0,0,6,1,255,0,9,2,2,8
003D1C  3  FF 00 19 08  
003D20  3  00 00 06 01  
003D39  3  FF 00 0D 08          .byte 255,0,13,8,0,0,6,1,255,0,11,2,2,8,255,0,11,8,0,0,6,1,255,0,13,2,2,8,255,0,9,8,0,0
003D3D  3  00 00 06 01  
003D41  3  FF 00 0B 02  
003D5B  3  06 01 FF 00          .byte 6,1,255,0,15,2,2,8,255,0,7,2,0,0,6,1,255,0,17,255,2,4,255,0,7,6,1,255,2,6,255,0,22
003D5F  3  0F 02 02 08  
003D63  3  FF 00 07 02  
003D7C  3  06 01 FF 00          .byte 6,1,255,0,22,255,2,6,6
003D80  3  16 FF 02 06  
003D84  3  06           
003D85  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
003D89  3  06 01 FF 00  
003D8D  3  1C 06 01 FF  
003DA7  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,5,255,2,7,255,0,16,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1
003DAB  3  1C 06 01 FF  
003DAF  3  00 05 FF 02  
003DC8  3  FF 00 19 02          .byte 255,0,25,2,2,0,6,1,255,0,28,6,1,255,0,28,6,1,0,0,0,255,2,25,6,1,255,0,28,6,1,255,0,28
003DCC  3  02 00 06 01  
003DD0  3  FF 00 1C 06  
003DEA  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6
003DEE  3  1C 06 01 FF  
003DF2  3  00 1C 06 01  
003DFF  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
003E03  3  06 01 FF 00  
003E07  3  1C 06 01 FF  
003E21  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,0,0,255,2,6,8,255,0,19,6,1,255,0,8,2,8
003E25  3  1C 06 01 FF  
003E29  3  00 1C 06 01  
003E42  3  FF 00 12 06          .byte 255,0,18,6,1,255,0,9,2,8,255,0,17,6,1,255,0,10,2,8,255,0,16,6,1,255,0,11,2,8,255,0,15
003E46  3  01 FF 00 09  
003E4A  3  02 08 FF 00  
003E63  3  06 01 FF 00          .byte 6,1,255,0,12,2,8,255,0,14,6,1,255,0,13,2,8,255,0,13,6,1,255,0,14,2,8,255,0,12,6,1,255,0,15
003E67  3  0C 02 08 FF  
003E6B  3  00 0E 06 01  
003E86  3  FF 02 05 FF          .byte 255,2,5,255,0,8,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6
003E8A  3  00 08 06 01  
003E8E  3  FF 00 1C 06  
003E9C  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,12,2,8,16,255,0,13,6,1,255,0,13,8,8,255,0,13
003EA0  3  06 01 FF 00  
003EA4  3  1C 06 01 FF  
003EBF  3  06 01 FF 00          .byte 6,1,255,0,10,255,8,7,255,0,11,6,1,255,0,9,255,8,9,255,0,10,6,1,255,0,8,8,255,2,4,8,255,2,4
003EC3  3  0A FF 08 07  
003EC7  3  FF 00 0B 06  
003EE2  3  08 FF 00 09          .byte 8,255,0,9,6,1,255,0,7,8,8,255,16,4,8,255,16,4,8,8,255,0,8,6,1,255,0,7,8,8,8,16,16
003EE6  3  06 01 FF 00  
003EEA  3  07 08 08 FF  
003F03  3  08 02 08 10          .byte 8,2,8,16,16,8,8,8,255,0,8,6,1,255,0,6,8,2,255,8,4,2,16,2,255,8,4,2,8,255,0,7,6
003F07  3  10 08 08 08  
003F0B  3  FF 00 08 06  
003F24  3  01 FF 00 06          .byte 1,255,0,6,8,16,255,8,4,16,16,16,255,8,4,16,8,255,0,7,6,1,255,0,6,8,16,2,255,8,9,2,16
003F28  3  08 10 FF 08  
003F2C  3  04 10 10 10  
003F45  3  08 FF 00 07          .byte 8,255,0,7,6,1,255,0,6,8,16,16,255,2,9,16,16,8,255,0,7,6,1,255,0,6,2,8,255,16,11,8,2
003F49  3  06 01 FF 00  
003F4D  3  06 08 10 10  
003F66  3  FF 00 07 06          .byte 255,0,7,6,1,255,0,7,8,255,16,11,8,255,0,8,6,1,255,0,7,2,8,255,16,9,8,2,255,0,8,6,1
003F6A  3  01 FF 00 07  
003F6E  3  08 FF 10 0B  
003F87  3  FF 00 08 02          .byte 255,0,8,2,2,255,8,7,2,2,255,0,9,6,1,255,0,10,255,2,7,255,0,11,6,1,255,0,28,6,1,255,0,28
003F8B  3  02 FF 08 07  
003F8F  3  02 02 FF 00  
003FA9  3  06 01 FF 00          .byte 6,1,255,0,28,6
003FAD  3  1C 06        
003FAF  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
003FB3  3  06 01 FF 00  
003FB7  3  1C 06 01 FF  
003FD1  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,25,2,2,0,6,1,255,0,28
003FD5  3  1C 06 01 FF  
003FD9  3  00 1C 06 01  
003FF2  3  06 01 FF 00          .byte 6,1,255,0,20,2,0,0,2,255,0,4,6,1,255,0,28,6,1,255,0,18,2,255,0,9,6,1,255,0,16,2,255,0,11
003FF6  3  14 02 00 00  
003FFA  3  02 FF 00 04  
004015  3  06 01 FF 00          .byte 6,1,255,0,7,2,2,2,255,0,18,6,1,0,255,2,4,255,0,7,2,2,2,255,0,13,6,1,255,0,28,6,1
004019  3  07 02 02 02  
00401D  3  FF 00 12 06  
004036  3  FF 00 1C 06          .byte 255,0,28,6,1,255,0,28,6
00403A  3  01 FF 00 1C  
00403E  3  06           
00403F  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
004043  3  06 01 FF 00  
004047  3  1C 06 01 FF  
004061  3  06 01 FF 00          .byte 6,1,255,0,5,2,2,255,0,4,2,2,2,255,0,14,6,1,2,2,255,0,15,2,2,255,0,9,6,1,255,0,28
004065  3  05 02 02 FF  
004069  3  00 04 02 02  
004082  3  06 01 FF 00          .byte 6,1,255,0,22,2,2,255,0,4,6,1,255,0,28,6,1,255,0,28,6,1,255,2,19,255,0,9,6,1,255,0,28
004086  3  16 02 02 FF  
00408A  3  00 04 06 01  
0040A3  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,14,255,2,14,6,1,255,0,28,6,1,255,0,28
0040A7  3  1C 06 01 FF  
0040AB  3  00 1C 06 01  
0040C4  3  06 01 FF 00          .byte 6,1,255,0,28,6
0040C8  3  1C 06        
0040CA  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,2,19,255,0,9,6
0040CE  3  06 01 FF 00  
0040D2  3  1C 06 01 FF  
0040EB  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,6,255,2,22,6,1,255,0,28,6
0040EF  3  06 01 FF 00  
0040F3  3  1C 06 01 FF  
00410C  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,2,23,255,0,5,6,1,255,0,28,6
004110  3  06 01 FF 00  
004114  3  1C 06 01 FF  
00412D  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,25,2,2,2,6,1,255,0,28,6
004131  3  06 01 FF 00  
004135  3  1C 06 01 FF  
004144  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
004148  3  06 01 FF 00  
00414C  3  1C 06 01 FF  
004166  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,5,255,2,5,255,0,18,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1
00416A  3  1C 06 01 FF  
00416E  3  00 05 FF 02  
004187  3  FF 00 1C 06          .byte 255,0,28,6,1,255,0,28,6,1,255,0,16,255,2,8,255,0,4,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
00418B  3  01 FF 00 1C  
00418F  3  06 01 FF 00  
0041A9  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6
0041AD  3  1C 06 01 FF  
0041B1  3  00 1C 06 01  
0041BE  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0041C2  3  06 01 FF 00  
0041C6  3  1C 06 01 FF  
0041E0  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,11
0041E4  3  1C 06 01 FF  
0041E8  3  00 1C 06 01  
004203  3  FF 02 06 FF          .byte 255,2,6,255,0,11,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,0,0,255,2,6,255,0,12,255,2,6
004207  3  00 0B 06 01  
00420B  3  FF 00 1C 06  
004225  3  00 00 06 01          .byte 0,0,6,1,255,0,28,6,1,255,0,12,255,2,4,255,0,12,6,1,255,0,28,6,1,255,0,28,6
004229  3  FF 00 1C 06  
00422D  3  01 FF 00 0C  
004242  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,4
004246  3  06 01 FF 00  
00424A  3  1C 06 01 FF  
004264  3  02 02 FF 00          .byte 2,2,255,0,22,6,1,255,0,28,6,1,255,0,9,2,2,255,0,17,6,1,255,0,28,6,1,255,0,15,2,2,255,0,11
004268  3  16 06 01 FF  
00426C  3  00 1C 06 01  
004287  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
00428B  3  1C 06 01 FF  
00428F  3  00 1C 06 01  
0042AA  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6
0042AE  3  1C 06 01 FF  
0042B2  3  00 1C 06 01  
0042BF  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0042C3  3  06 01 FF 00  
0042C7  3  1C 06 01 FF  
0042E1  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0042E5  3  1C 06 01 FF  
0042E9  3  00 1C 06 01  
004304  3  06 01 FF 00          .byte 6,1,255,0,13,2,2,255,0,13,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,2,13,0,0,255,2,13
004308  3  0D 02 02 FF  
00430C  3  00 0D 06 01  
004327  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6
00432B  3  1C 06 01 FF  
00432F  3  00 1C 06 01  
004337  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,11
00433B  3  06 01 FF 00  
00433F  3  1C 06 01 FF  
004359  3  FF 02 04 FF          .byte 255,2,4,255,0,13,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1
00435D  3  00 0D 06 01  
004361  3  FF 00 1C 06  
00437A  3  FF 00 1C 06          .byte 255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
00437E  3  01 FF 00 1C  
004382  3  06 01 FF 00  
00439B  3  06 01 FF 00          .byte 6,1,255,0,11,255,2,4,255,0,13,6,1,255,0,28,6,1,255,0,28,6
00439F  3  0B FF 02 04  
0043A3  3  FF 00 0D 06  
0043B1  3  01 FF 00 16          .byte 1,255,0,22,255,16,6,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6
0043B5  3  FF 10 06 06  
0043B9  3  01 FF 00 1C  
0043D2  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0043D6  3  06 01 FF 00  
0043DA  3  1C 06 01 FF  
0043F4  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0043F8  3  1C 06 01 FF  
0043FC  3  00 1C 06 01  
004417  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6
00441B  3  1C 06 01 FF  
00441F  3  00 1C 06     
004422  3  01 FF 00 1B          .byte 1,255,0,27,16,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
004426  3  10 06 01 FF  
00442A  3  00 1C 06 01  
004445  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
004449  3  1C 06 01 FF  
00444D  3  00 1C 06 01  
004468  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
00446C  3  1C 06 01 FF  
004470  3  00 1C 06 01  
00448B  3  06 01 FF 00          .byte 6,1,255,0,28,6
00448F  3  1C 06        
004491  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
004495  3  06 01 FF 00  
004499  3  1C 06 01 FF  
0044B3  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0044B7  3  1C 06 01 FF  
0044BB  3  00 1C 06 01  
0044D6  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0044DA  3  1C 06 01 FF  
0044DE  3  00 1C 06 01  
0044F9  3  06 01 FF 00          .byte 6,1,255,0,28,6
0044FD  3  1C 06        
0044FF  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
004503  3  06 01 FF 00  
004507  3  1C 06 01 FF  
004521  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
004525  3  1C 06 01 FF  
004529  3  00 1C 06 01  
004544  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
004548  3  1C 06 01 FF  
00454C  3  00 1C 06 01  
004567  3  06 01 FF 00          .byte 6,1,255,0,28,6
00456B  3  1C 06        
00456D  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
004571  3  06 01 FF 00  
004575  3  1C 06 01 FF  
00458F  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
004593  3  1C 06 01 FF  
004597  3  00 1C 06 01  
0045B2  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0045B6  3  1C 06 01 FF  
0045BA  3  00 1C 06 01  
0045D5  3  06 01 FF 00          .byte 6,1,255,0,28,6
0045D9  3  1C 06        
0045DB  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0045DF  3  06 01 FF 00  
0045E3  3  1C 06 01 FF  
0045FD  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
004601  3  1C 06 01 FF  
004605  3  00 1C 06 01  
004620  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
004624  3  1C 06 01 FF  
004628  3  00 1C 06 01  
004643  3  06 01 FF 00          .byte 6,1,255,0,28,6
004647  3  1C 06        
004649  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
00464D  3  06 01 FF 00  
004651  3  1C 06 01 FF  
00466B  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
00466F  3  1C 06 01 FF  
004673  3  00 1C 06 01  
00468E  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
004692  3  1C 06 01 FF  
004696  3  00 1C 06 01  
0046B1  3  06 01 FF 00          .byte 6,1,255,0,28,6
0046B5  3  1C 06        
0046B7  3  01 FF 00 1C          .byte 1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0046BB  3  06 01 FF 00  
0046BF  3  1C 06 01 FF  
0046D9  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
0046DD  3  1C 06 01 FF  
0046E1  3  00 1C 06 01  
0046FC  3  06 01 FF 00          .byte 6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28,6,1,255,0,28
004700  3  1C 06 01 FF  
004704  3  00 1C 06 01  
00471F  3  06 01 FF 00          .byte 6,1,255,0,28,6
004723  3  1C 06        
004725  3  01 FF 00 1C          .byte 1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,29,1,255,0,29
004729  3  01 01 FF 00  
00472D  3  1C 01 01 FF  
004746  3  01 FF 00 1D          .byte 1,255,0,29,1,255,0,29,1,255,0,29,1,255,0,29,1,255,0,29,1,255,0,29,1,255,0,29,1,255,2,8,255,0,21
00474A  3  01 FF 00 1D  
00474E  3  01 FF 00 1D  
004769  3  01 FF 00 16          .byte 1,255,0,22,255,2,5,0,0,1,255,0,10,255,2,9,255,0,10,1,255,0,29,1,255,0,29,1,255,14,29,1,255,15,29
00476D  3  FF 02 05 00  
004771  3  00 01 FF 00  
00478C  3  01 FF 0F 1D          .byte 1,255,15,29
004790  3  FF 01 4B 1B          .byte 255,1,75,27,255,0,14,255,1,10,27,255,0,19,255,1,5,27,255,0,252,255,2,4,255,0,22,2,2,255,0,6,2,2
004794  3  FF 00 0E FF  
004798  3  01 0A 1B FF  
0047B2  3  FF 00 08 FF          .byte 255,0,8,255,2,4,255,0,63,255,2,4,255,0,12,2,2,2,255,0,62,255,14,30,255,15,60
0047B6  3  02 04 FF 00  
0047BA  3  3F FF 02 04  
0047CD  3  FF 01 3C FF          .byte 255,1,60,255,0,7,26,255,1,6,27,255,0,7,26,1,1,1,27,255,0,0,0,0,2,2,2,255,0,48,2,2,255,0,24
0047D1  3  00 07 1A FF  
0047D5  3  01 06 1B FF  
0047F0  3  02 02 02 FF          .byte 2,2,2,255,0,8,2,2,255,0,4,2,2,255,0,63,255,2,4,255,0,62,255,14,30,255,15,60
0047F4  3  00 08 02 02  
0047F8  3  FF 00 04 02  
00480C  3  FF 01 3C FF          .byte 255,1,60,255,0,7,26,255,1,7,27,255,0,6,26,255,1,7,255,0,0,255,0,39,255,2,4,255,0,23,2,2,255,0,38
004810  3  00 07 1A FF  
004814  3  01 07 1B FF  
00482F  3  FF 02 04 FF          .byte 255,2,4,255,0,30,2,2,2,255,0,5,2,2,2,0,0,2,2,255,0,69,255,14,30,255,15,60
004833  3  00 1E 02 02  
004837  3  02 FF 00 05  
00484B  3  FF 01 40 1B          .byte 255,1,64,27,255,0,5,26,255,1,14,27,255,0,221,255,2,5,255,0,49,255,2,4,255,0,10,2,2,255,0,30,2,2
00484F  3  FF 00 05 1A  
004853  3  FF 01 0E 1B  
00486D  3  FF 00 1E 02          .byte 255,0,30,2,2,255,0,30,2,2,255,0,63,2,2,255,0,32,255,14,30,255,15,60
004871  3  02 FF 00 1E  
004875  3  02 02 FF 00  
004885  3  FF 01 3C FF          .byte 255,1,60,255,0,5,26,255,1,6,27,255,0,0,255,0,73,255,2,5,255,0,75,2,2,2,0,0,2,2,2,255,0,13
004889  3  00 05 1A FF  
00488D  3  01 06 1B FF  
0048A7  3  FF 02 05 FF          .byte 255,2,5,255,0,62,255,14,30,255,15,60
0048AB  3  00 3E FF 0E  
0048AF  3  1E FF 0F 3C  
0048B3  3  FF 01 3C FF          .byte 255,1,60,255,0,5,26,1,1,1,27,255,0,14,26,255,1,5,255,0,27,26,1,1,255,0,25,16,16,0,26,1,255,0,25
0048B7  3  00 05 1A 01  
0048BB  3  01 01 1B FF  
0048D6  3  10 10 00 00          .byte 16,16,0,0,1,255,0,25,12,12,0,0,26,255,0,26,12,12,255,0,20,2,2,0,0,0,255,13,7,255,0,21,255,13,9
0048DA  3  01 FF 00 19  
0048DE  3  0C 0C 00 00  
0048F9  3  FF 00 14 FF          .byte 255,0,20,255,13,10,255,0,14,2,2,0,0,0,13,13,13,0,0,0,255,13,5,255,0,10,2,2,255,0,7,13,13,13
0048FD  3  0D 0A FF 00  
004901  3  0E 02 02 00  
00491B  3  00 00 00 0D          .byte 0,0,0,13,13,255,0,21,255,13,5,0,0,0,13,255,0,21,255,13,6,0,0,13,13,255,0,9,2,2,255,0,9
00491F  3  0D FF 00 15  
004923  3  FF 0D 05 00  
00493C  3  0D 0D 00 FF          .byte 13,13,0,255,13,9,255,0,18,13,13,0,0,255,13,8,0,0,255,2,4,255,0,12,13,13,0,0,0,255,13,7,255,0,19
004940  3  0D 09 FF 00  
004944  3  12 0D 0D 00  
00495F  3  0D 0D FF 00          .byte 13,13,255,0,4,255,13,5,255,14,19,13,13,13,255,0,8,255,15,20,255,13,4,255,0,6,255,15,22,255,13,8
004963  3  04 FF 0D 05  
004967  3  FF 0E 13 0D  
00497F  3  FF 00 00 FF          .byte 255,0,0,255,0,144,255,20,12,255,0,12,255,20,18,255,0,12,255,20,19,255,0,12,255,20,18,255,0,12,255,20,18
004983  3  00 90 FF 14  
004987  3  0C FF 00 0C  
0049A0  3  FF 00 7F             .byte 255,0,127
0049A3  3               numsc:
0049A3  3  2F                   .byte 47
0049A4  3               nmedat:
0049A4  3  00 05 A0 48          .byte 0,5,160,72,6,2,80,208,255
0049A8  3  06 02 50 D0  
0049AC  3  FF           
0049AD  3  00 01 A0 60          .byte 0,1,160,96,255
0049B1  3  FF           
0049B2  3  01 04 10 D8          .byte 1,4,16,216,1,4,32,24,1,4,8,48,1,4,16,88,1,4,40,192,1,4,8,152,0,1,120,120,1,4,8,72,255
0049B6  3  01 04 20 18  
0049BA  3  01 04 08 30  
0049D3  3  01 04 88 18          .byte 1,4,136,24,0,1,112,104,1,4,64,224,1,4,72,48,255
0049D7  3  00 01 70 68  
0049DB  3  01 04 40 E0  
0049E4  3  00 01 70 58          .byte 0,1,112,88,1,4,104,16,1,4,104,208,1,4,56,184,255
0049E8  3  01 04 68 10  
0049EC  3  01 04 68 D0  
0049F5  3  00 00 60 98          .byte 0,0,96,152,1,4,136,24,1,4,72,224,1,4,120,104,1,4,88,192,255
0049F9  3  01 04 88 18  
0049FD  3  01 04 48 E0  
004A0A  3  00 01 48 78          .byte 0,1,72,120,1,4,56,64,1,4,64,176,1,4,64,208,1,4,104,160,255
004A0E  3  01 04 38 40  
004A12  3  01 04 40 B0  
004A1F  3  00 01 68 78          .byte 0,1,104,120,1,4,112,88,1,4,112,152,1,4,112,216,1,4,136,104,8,9,128,40,255
004A23  3  01 04 70 58  
004A27  3  01 04 70 98  
004A38  3  00 00 78 B0          .byte 0,0,120,176,1,4,72,192,1,4,80,128,1,4,64,208,1,4,128,24,255
004A3C  3  01 04 48 C0  
004A40  3  01 04 50 80  
004A4D  3  00 01 68 38          .byte 0,1,104,56,1,4,88,80,1,4,64,32,1,4,64,208,1,4,72,152,255
004A51  3  01 04 58 50  
004A55  3  01 04 40 20  
004A62  3  00 01 58 78          .byte 0,1,88,120,1,4,64,64,1,4,72,192,1,4,24,40,1,4,8,200,255
004A66  3  01 04 40 40  
004A6A  3  01 04 48 C0  
004A77  3  00 01 58 70          .byte 0,1,88,112,1,4,136,208,1,4,112,144,1,4,104,88,1,4,128,40,255
004A7B  3  01 04 88 D0  
004A7F  3  01 04 70 90  
004A8C  3  00 01 28 28          .byte 0,1,40,40,1,4,64,184,1,4,72,40,8,9,120,192,255
004A90  3  01 04 40 B8  
004A94  3  01 04 48 28  
004A9D  3  00 01 48 78          .byte 0,1,72,120,1,4,120,144,1,4,168,152,1,4,160,72,1,4,104,112,255
004AA1  3  01 04 78 90  
004AA5  3  01 04 A8 98  
004AB2  3  00 00 58 78          .byte 0,0,88,120,1,4,80,48,1,4,104,144,1,4,96,200,255
004AB6  3  01 04 50 30  
004ABA  3  01 04 68 90  
004AC3  3  00 01 38 78          .byte 0,1,56,120,1,4,80,120,1,4,96,208,1,4,112,48,8,9,120,120,255
004AC7  3  01 04 50 78  
004ACB  3  01 04 60 D0  
004AD8  3  00 00 30 B0          .byte 0,0,48,176,1,4,64,40,1,4,48,128,1,4,48,96,2,3,112,56,2,3,152,192,255
004ADC  3  01 04 40 28  
004AE0  3  01 04 30 80  
004AF1  3  00 01 40 60          .byte 0,1,64,96,1,4,88,152,1,4,160,56,255
004AF5  3  01 04 58 98  
004AF9  3  01 04 A0 38  
004AFE  3  00 01 50 10          .byte 0,1,80,16,1,4,48,216,1,4,112,32,1,4,112,144,255
004B02  3  01 04 30 D8  
004B06  3  01 04 70 20  
004B0F  3  00 00 A0 E0          .byte 0,0,160,224,1,4,48,40,1,4,32,176,1,4,16,88,255
004B13  3  01 04 30 28  
004B17  3  01 04 20 B0  
004B20  3  00 01 38 38          .byte 0,1,56,56,2,3,112,192,2,3,112,64,1,4,24,208,1,4,88,112,255
004B24  3  02 03 70 C0  
004B28  3  02 03 70 40  
004B35  3  00 01 88 98          .byte 0,1,136,152,1,4,128,200,1,4,104,56,1,4,80,216,255
004B39  3  01 04 80 C8  
004B3D  3  01 04 68 38  
004B46  3  00 01 10 70          .byte 0,1,16,112,2,3,128,136,255
004B4A  3  02 03 80 88  
004B4E  3  FF           
004B4F  3  00 01 88 70          .byte 0,1,136,112,1,4,104,96,1,4,72,160,1,4,80,80,8,9,136,24,255
004B53  3  01 04 68 60  
004B57  3  01 04 48 A0  
004B64  3  00 01 30 68          .byte 0,1,48,104,1,4,128,24,1,4,80,168,2,3,136,192,255
004B68  3  01 04 80 18  
004B6C  3  01 04 50 A8  
004B75  3  00 01 20 18          .byte 0,1,32,24,2,3,32,56,2,3,72,168,2,3,120,56,255
004B79  3  02 03 20 38  
004B7D  3  02 03 48 A8  
004B86  3  07 07 80 30          .byte 7,7,128,48,7,7,72,176,7,7,136,136,0,1,56,64,255
004B8A  3  07 07 48 B0  
004B8E  3  07 07 88 88  
004B97  3  00 01 60 78          .byte 0,1,96,120,2,3,128,40,2,3,128,208,7,7,40,40,255
004B9B  3  02 03 80 28  
004B9F  3  02 03 80 D0  
004BA8  3  00 01 28 30          .byte 0,1,40,48,7,7,32,192,7,7,128,40,8,9,72,136,255
004BAC  3  07 07 20 C0  
004BB0  3  07 07 80 28  
004BB9  3  00 01 68 78          .byte 0,1,104,120,2,3,136,32,2,3,136,80,2,3,136,224,2,3,136,144,255
004BBD  3  02 03 88 20  
004BC1  3  02 03 88 50  
004BCE  3  00 01 28 70          .byte 0,1,40,112,1,4,120,168,1,4,96,208,1,4,152,64,1,4,96,32,255
004BD2  3  01 04 78 A8  
004BD6  3  01 04 60 D0  
004BE3  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,0,1,120,120,5,6,32,216,1,4,56,32,1,4,72,208,255
004BE7  3  FF FF FF FF  
004BEB  3  00 01 78 78  
004BFC  3  00 01 68 18          .byte 0,1,104,24,5,6,136,224,8,9,88,160,255
004C00  3  05 06 88 E0  
004C04  3  08 09 58 A0  
004C09  3  00 01 68 18          .byte 0,1,104,24,5,6,80,208,255
004C0D  3  05 06 50 D0  
004C11  3  FF           
004C12  3  00 01 70 18          .byte 0,1,112,24,5,6,128,208,255
004C16  3  05 06 80 D0  
004C1A  3  FF           
004C1B  3  00 01 58 18          .byte 0,1,88,24,5,6,72,232,255
004C1F  3  05 06 48 E8  
004C23  3  FF           
004C24  3  00 01 78 18          .byte 0,1,120,24,5,6,88,224,8,9,96,112,255
004C28  3  05 06 58 E0  
004C2C  3  08 09 60 70  
004C31  3  00 01 80 18          .byte 0,1,128,24,7,7,56,32,3,6,40,136,255
004C35  3  07 07 38 20  
004C39  3  03 06 28 88  
004C3E  3  00 01 80 78          .byte 0,1,128,120,255
004C42  3  FF           
004C43  3               NUMOBJ = 41
004C43  3               objdta:
004C43  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,3,129,16,3,129,16
004C47  3  00 00 00 00  
004C4B  3  00 00 00 00  
004C69  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,3,56,224,3,56,224
004C6D  3  00 00 00 00  
004C71  3  00 00 00 00  
004C8F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,4,96,16,4,96,16
004C93  3  00 00 00 00  
004C97  3  00 00 00 00  
004CB5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,4,48,184,4,48,184
004CB9  3  00 00 00 00  
004CBD  3  00 00 00 00  
004CDB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,5,128,24,5,128,24
004CDF  3  00 00 00 00  
004CE3  3  00 00 00 00  
004D01  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,5,64,224,5,64,224
004D05  3  00 00 00 00  
004D09  3  00 00 00 00  
004D27  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,6,48,72,6,48,72
004D2B  3  00 00 00 00  
004D2F  3  00 00 00 00  
004D4D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,6,56,216,6,56,216
004D51  3  00 00 00 00  
004D55  3  00 00 00 00  
004D73  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,7,104,56,7,104,56
004D77  3  00 00 00 00  
004D7B  3  00 00 00 00  
004D99  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,8,72,16,8,72,16
004D9D  3  00 00 00 00  
004DA1  3  00 00 00 00  
004DBF  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,7,104,184,7,104,184
004DC3  3  00 00 00 00  
004DC7  3  00 00 00 00  
004DE5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,8,72,224,8,72,224
004DE9  3  00 00 00 00  
004DED  3  00 00 00 00  
004E0B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,9,152,24,9,152,24
004E0F  3  00 00 00 00  
004E13  3  00 00 00 00  
004E31  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,9,152,48,9,152,48
004E35  3  00 00 00 00  
004E39  3  00 00 00 00  
004E57  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,9,152,72,9,152,72
004E5B  3  00 00 00 00  
004E5F  3  00 00 00 00  
004E7D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,9,152,96,9,152,96
004E81  3  00 00 00 00  
004E85  3  00 00 00 00  
004EA3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,9,152,120,9,152,120
004EA7  3  00 00 00 00  
004EAB  3  00 00 00 00  
004EC9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,9,152,144,9,152,144
004ECD  3  00 00 00 00  
004ED1  3  00 00 00 00  
004EEF  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,9,152,168,9,152,168
004EF3  3  00 00 00 00  
004EF7  3  00 00 00 00  
004F15  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,9,152,192,9,152,192
004F19  3  00 00 00 00  
004F1D  3  00 00 00 00  
004F3B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,11,64,16,11,64,16
004F3F  3  00 00 00 00  
004F43  3  00 00 00 00  
004F61  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,11,88,176,11,88,176
004F65  3  00 00 00 00  
004F69  3  00 00 00 00  
004F87  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,12,56,208,12,56,208
004F8B  3  00 00 00 00  
004F8F  3  00 00 00 00  
004FAD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,12,152,32,12,152,32
004FB1  3  00 00 00 00  
004FB5  3  00 00 00 00  
004FD3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,14,136,16,14,136,16
004FD7  3  00 00 00 00  
004FDB  3  00 00 00 00  
004FF9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,14,40,224,14,40,224
004FFD  3  00 00 00 00  
005001  3  00 00 00 00  
00501F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,15,88,24,15,88,24
005023  3  00 00 00 00  
005027  3  00 00 00 00  
005045  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,15,64,208,15,64,208
005049  3  00 00 00 00  
00504D  3  00 00 00 00  
00506B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,16,32,224,16,32,224
00506F  3  00 00 00 00  
005073  3  00 00 00 00  
005091  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,16,112,16,16,112,16
005095  3  00 00 00 00  
005099  3  00 00 00 00  
0050B7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,17,144,56,17,144,56
0050BB  3  00 00 00 00  
0050BF  3  00 00 00 00  
0050DD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,17,32,224,17,32,224
0050E1  3  00 00 00 00  
0050E5  3  00 00 00 00  
005103  3  00 00 20 00          .byte 0,0,32,0,0,8,1,28,16,8,56,0,17,128,0,193,7,240,37,208,15,120,9,200,4,16,70,48,1,194,0,0,45,40,208,45,40,208
005107  3  00 08 01 1C  
00510B  3  10 08 38 00  
005129  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,20,88,216,20,88,216
00512D  3  00 00 00 00  
005131  3  00 00 00 00  
00514F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,21,72,40,21,72,40
005153  3  00 00 00 00  
005157  3  00 00 00 00  
005175  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,23,80,216,23,80,216
005179  3  00 00 00 00  
00517D  3  00 00 00 00  
00519B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,24,56,16,24,56,16
00519F  3  00 00 00 00  
0051A3  3  00 00 00 00  
0051C1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,26,104,184,26,104,184
0051C5  3  00 00 00 00  
0051C9  3  00 00 00 00  
0051E7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,30,144,112,30,144,112
0051EB  3  00 00 00 00  
0051EF  3  00 00 00 00  
00520D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,28,136,200,28,136,200
005211  3  00 00 00 00  
005215  3  00 00 00 00  
005233  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,192,7,240,5,208,15,120,9,200,4,16,6,48,1,192,0,0,39,104,24,39,104,24
005237  3  00 00 00 00  
00523B  3  00 00 00 00  
005259  3               font:
005259  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00525D  3  00 00 00 00  
005261  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
005265  3  30 00 30 00  
005269  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
00526D  3  00 00 00 00  
005271  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
005275  3  6C FE 6C 00  
005279  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
00527D  3  7E 1E 7E 18  
005281  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
005285  3  30 6E CE 00  
005289  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
00528D  3  7E CC 7E 00  
005291  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
005295  3  00 00 00 00  
005299  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
00529D  3  18 18 0C 00  
0052A1  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
0052A5  3  30 30 60 00  
0052A9  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
0052AD  3  7E 18 3C 00  
0052B1  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
0052B5  3  7E 18 18 00  
0052B9  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0052BD  3  00 18 18 30  
0052C1  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
0052C5  3  7E 00 00 00  
0052C9  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
0052CD  3  00 38 38 00  
0052D1  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
0052D5  3  18 30 60 00  
0052D9  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,80
0052DD  3  F6 E6 7C 50  
0052E1  3  00 38 78 18          .byte 0,56,120,24,88,24,126,34
0052E5  3  58 18 7E 22  
0052E9  3  00 7C D6 06          .byte 0,124,214,6,124,192,254,70
0052ED  3  7C C0 FE 46  
0052F1  3  00 7C C6 5C          .byte 0,124,198,92,22,198,124,36
0052F5  3  16 C6 7C 24  
0052F9  3  00 18 38 78          .byte 0,24,56,120,216,254,88,72
0052FD  3  D8 FE 58 48  
005301  3  00 FE C0 FC          .byte 0,254,192,252,22,198,124,36
005305  3  16 C6 7C 24  
005309  3  00 7C C0 FC          .byte 0,124,192,252,206,198,124,72
00530D  3  CE C6 7C 48  
005311  3  00 FE A6 8E          .byte 0,254,166,142,24,50,50,0
005315  3  18 32 32 00  
005319  3  00 7C C6 7C          .byte 0,124,198,124,214,198,124,36
00531D  3  D6 C6 7C 24  
005321  3  00 7C D6 C6          .byte 0,124,214,198,126,6,124,80
005325  3  7E 06 7C 50  
005329  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
00532D  3  00 00 30 00  
005331  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
005335  3  00 30 30 60  
005339  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
00533D  3  30 18 0C 00  
005341  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
005345  3  00 7E 00 00  
005349  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
00534D  3  0C 18 30 00  
005351  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
005355  3  18 00 18 00  
005359  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
00535D  3  FE C0 7C 00  
005361  3  00 7C E6 C6          .byte 0,124,230,198,254,214,198,66
005365  3  FE D6 C6 42  
005369  3  00 FC C6 FC          .byte 0,252,198,252,214,198,254,132
00536D  3  D6 C6 FE 84  
005371  3  00 7C F6 D0          .byte 0,124,246,208,192,198,252,36
005375  3  C0 C6 FC 24  
005379  3  00 F8 EC C6          .byte 0,248,236,198,198,206,248,160
00537D  3  C6 CE F8 A0  
005381  3  00 FE C2 FA          .byte 0,254,194,250,200,192,254,144
005385  3  C8 C0 FE 90  
005389  3  00 FE C2 FC          .byte 0,254,194,252,196,192,196,64
00538D  3  C4 C0 C4 40  
005391  3  00 7C D6 C0          .byte 0,124,214,192,222,198,126,34
005395  3  DE C6 7E 22  
005399  3  00 C6 C6 FE          .byte 0,198,198,254,214,198,214,82
00539D  3  D6 C6 D6 52  
0053A1  3  00 7E 1A 5A          .byte 0,126,26,90,24,24,126,34
0053A5  3  18 18 7E 22  
0053A9  3  00 06 06 06          .byte 0,6,6,6,198,198,124,36
0053AD  3  C6 C6 7C 24  
0053B1  3  00 CC D8 F0          .byte 0,204,216,240,216,220,198,144
0053B5  3  D8 DC C6 90  
0053B9  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,66
0053BD  3  C0 C0 FE 42  
0053C1  3  00 C6 EE FE          .byte 0,198,238,254,214,198,214,18
0053C5  3  D6 C6 D6 12  
0053C9  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,206,136
0053CD  3  DE CE CE 88  
0053D1  3  00 7C D6 C6          .byte 0,124,214,198,214,198,124,36
0053D5  3  D6 C6 7C 24  
0053D9  3  00 FC C6 C6          .byte 0,252,198,198,252,212,192,64
0053DD  3  FC D4 C0 40  
0053E1  3  00 7C D6 C6          .byte 0,124,214,198,246,222,124,4
0053E5  3  F6 DE 7C 04  
0053E9  3  00 FC E6 C6          .byte 0,252,230,198,252,204,198,66
0053ED  3  FC CC C6 42  
0053F1  3  00 7C C0 7C          .byte 0,124,192,124,22,198,124,32
0053F5  3  16 C6 7C 20  
0053F9  3  00 FE B6 32          .byte 0,254,182,50,176,50,48,16
0053FD  3  B0 32 30 10  
005401  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,64
005405  3  C6 C6 7C 40  
005409  3  00 C6 C6 C6          .byte 0,198,198,198,198,236,120,72
00540D  3  C6 EC 78 48  
005411  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,64
005415  3  C6 FE 6C 40  
005419  3  00 C6 6E 3A          .byte 0,198,110,58,56,108,198,128
00541D  3  38 6C C6 80  
005421  3  00 86 CC 7A          .byte 0,134,204,122,48,50,48,18
005425  3  30 32 30 12  
005429  3  00 FE 8C 98          .byte 0,254,140,152,48,96,254,66
00542D  3  30 60 FE 42  
005431  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
005435  3  18 18 1E 00  
005439  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
00543D  3  30 18 0C 00  
005441  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
005445  3  30 30 F0 00  
005449  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
00544D  3  30 30 30 00  
005451  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
005455  3  00 00 00 FF  
005459  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
00545D  3  60 60 FE 00  
005461  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
005465  3  7C CC 7C 00  
005469  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
00546D  3  66 66 7C 00  
005471  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
005475  3  60 60 3C 00  
005479  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
00547D  3  CC CC 7C 00  
005481  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
005485  3  F8 C0 7C 00  
005489  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
00548D  3  30 30 30 00  
005491  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
005495  3  CC 7C 0C 78  
005499  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
00549D  3  CC CC CC 00  
0054A1  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
0054A5  3  30 30 78 00  
0054A9  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
0054AD  3  0C 0C 6C 38  
0054B1  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
0054B5  3  70 78 6C 00  
0054B9  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
0054BD  3  30 30 1C 00  
0054C1  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
0054C5  3  FC FC FC 00  
0054C9  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
0054CD  3  CC CC CC 00  
0054D1  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
0054D5  3  CC CC 78 00  
0054D9  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
0054DD  3  CC F8 C0 C0  
0054E1  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
0054E5  3  CC 7C 0C 0E  
0054E9  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
0054ED  3  60 60 60 00  
0054F1  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
0054F5  3  78 0C F8 00  
0054F9  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
0054FD  3  30 30 1C 00  
005501  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
005505  3  CC CC 78 00  
005509  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
00550D  3  78 78 30 00  
005511  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
005515  3  FC FC 78 00  
005519  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
00551D  3  30 78 CC 00  
005521  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
005525  3  CC 7C 0C 78  
005529  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
00552D  3  30 60 FC 00  
005531  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
005535  3  18 18 1E 00  
005539  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
00553D  3  18 18 18 00  
005541  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
005545  3  30 30 F0 00  
005549  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
00554D  3  00 00 00 00  
005551  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
005555  3  E3 BB C6 7C  
005559  3               
005559  1               eind_asm:
005559  2               ;------------------------------------------------------
005559  2               ; z80.asm
005559  2               ; spectrum stuff
005559  2               ; adresses
005559  2               
005559  2               ;ws	 = $60
005559  2               
005559  2               ;z80_f	 = ws+$00
005559  2               ;z80_a	 = ws+$01
005559  2               ;z80_af	 = z80_f
005559  2               
005559  2               ;z80_c	 = ws+$02
005559  2               ;z80_b	 = ws+$03
005559  2               ;z80_bc	 = z80_c
005559  2               
005559  2               ;z80_e	 = ws+$04
005559  2               ;z80_d	 = ws+$05
005559  2               ;z80_de	 = z80_e
005559  2               
005559  2               ;z80_l	 = ws+$06
005559  2               ;z80_h	 = ws+$07
005559  2               ;z80_hl	 = z80_l
005559  2               
005559  2               ;z80_x    = ws+$08
005559  2               ;z80_i    = ws+$09
005559  2               ;z80_ix	 = z80_x
005559  2               
005559  2               ;z80_iy	 = ws+$0a
005559  2               
005559  2               ;z80_fp	 = ws+$0c
005559  2               ;z80_ap	 = ws+$0d
005559  2               
005559  2               ;z80_cp	 = ws+$0e
005559  2               ;z80_bp	 = ws+$0f
005559  2               ;z80_bcp = z80_cp
005559  2               
005559  2               ;z80_ep	 = ws+$10
005559  2               ;z80_dp	 = ws+$11
005559  2               ;z80_dep = z80_ep
005559  2               
005559  2               ;z80_lp	 = ws+$12
005559  2               ;z80_hp	 = ws+$13
005559  2               ;z80_hlp = z80_lp
005559  2               
005559  2               ;z80_sp   = ws+$14
005559  2               
005559  2               ;z80_reg0 = ws+$16
005559  2               ;z80_reg1 = ws+$17
005559  2               ;z80_reg2 = ws+$18
005559  2               ;z80_reg3 = ws+$19
005559  2               
005559  2               ;z80_r	 = ws+$1a
005559  2               
005559  2               ; Contains seperatly 1 bit set
005559  2               
005559  2               _bitmem0	= $f8
005559  2               _bitmem1	= $f9
005559  2               _bitmem2	= $fa
005559  2               _bitmem3	= $fb
005559  2               _bitmem4	= $fc
005559  2               _bitmem5	= $fd
005559  2               _bitmem6	= $fe
005559  2               _bitmem7	= $ff
005559  2               	
005559  2               ; constants	
005559  2               _bitvalue0	= $01	
005559  2               _bitvalue1	= $02	
005559  2               _bitvalue2	= $04	
005559  2               _bitvalue3	= $08	
005559  2               _bitvalue4	= $10	
005559  2               _bitvalue5	= $20	
005559  2               _bitvalue6	= $40	
005559  2               _bitvalue7	= $80	
005559  2               
005559  2               _notbitvalue0	= $fe	
005559  2               _notbitvalue1	= $fd	
005559  2               _notbitvalue2	= $fb	
005559  2               _notbitvalue3	= $f7	
005559  2               _notbitvalue4	= $ef	
005559  2               _notbitvalue5	= $df	
005559  2               _notbitvalue6	= $bf	
005559  2               _notbitvalue7	= $7f	
005559  2               
005559  2               
005559  2               ;add_hl_bc:
005559  2               ;		lda z80_l
005559  2               ;		clc
005559  2               ;		adc z80_c
005559  2               ;		sta z80_l
005559  2               ;		lda z80_h
005559  2               ;		adc z80_b
005559  2               ;		sta z80_h
005559  2               ;		rts
005559  2               ;		
005559  2               ;add_ix_de:
005559  2               ;		lda z80_ix
005559  2               ;		clc
005559  2               ;		adc z80_e
005559  2               ;		sta z80_ix
005559  2               ;		lda z80_ix+1
005559  2               ;		adc z80_d
005559  2               ;		sta z80_ix+1
005559  2               ;		rts
005559  2               ;		
005559  2               ;add_iy_de:
005559  2               ;		lda z80_iy
005559  2               ;		clc
005559  2               ;		adc z80_e
005559  2               ;		sta z80_iy
005559  2               ;		lda z80_iy+1
005559  2               ;		adc z80_d
005559  2               ;		sta z80_iy+1
005559  2               ;		rts
005559  2               ;		
005559  2               ;add_hl_de:
005559  2               ;		lda z80_l
005559  2               ;		clc
005559  2               ;		adc z80_e
005559  2               ;		sta z80_l
005559  2               ;		lda z80_h
005559  2               ;		adc z80_d
005559  2               ;		sta z80_h
005559  2               ;		rts
005559  2               ;
005559  2               ;add_ix_bc:
005559  2               ;		lda z80_ix
005559  2               ;		clc
005559  2               ;		adc z80_c
005559  2               ;		sta z80_ix
005559  2               ;		lda z80_ix+1
005559  2               ;		adc z80_b
005559  2               ;		sta z80_ix+1
005559  2               ;		rts
005559  2               ;		
005559  2               ;add_iy_bc:
005559  2               ;		lda z80_iy
005559  2               ;		clc
005559  2               ;		adc z80_c
005559  2               ;		sta z80_iy
005559  2               ;		lda z80_iy+1
005559  2               ;		adc z80_b
005559  2               ;		sta z80_iy+1
005559  2               ;		rts
005559  2               ;		
005559  2               sbc_hl_de:
005559  2  A5 66        		lda z80_l
00555B  2  E5 64        		sbc z80_e
00555D  2  85 66        		sta z80_l
00555F  2  A5 67        		lda z80_h
005561  2  E5 65        		sbc z80_d
005563  2  85 67        		sta z80_h
005565  2  60           		rts
005566  2               
005566  2               ;sbc_hl_bc:
005566  2               ;		lda z80_l
005566  2               ;		sbc z80_c
005566  2               ;		sta z80_l
005566  2               ;		lda z80_h
005566  2               ;		sbc z80_b
005566  2               ;		sta z80_h
005566  2               ;		rts
005566  2               ;
005566  2               ;cmp_hl_bc:
005566  2               ;		lda z80_l
005566  2               ;		cmp z80_c
005566  2               ;		bne cmp_hl_bc_end
005566  2               ;		lda z80_h
005566  2               ;		cmp z80_b
005566  2               ;cmp_hl_bc_end:
005566  2               ;		rts
005566  2               ;		
005566  2               ;cmp_iy_ix:
005566  2               ;		lda z80_iy
005566  2               ;		cmp z80_ix
005566  2               ;		bne cmp_iy_ix_end
005566  2               ;		lda z80_iy+1
005566  2               ;		cmp z80_ix+1
005566  2               ;cmp_iy_ix_end:
005566  2               ;		rts
005566  2               ;		
005566  2               ;dec_hl:
005566  2               ;		lda z80_l
005566  2               ;		bne dec_hl_no_dec_h
005566  2               ;		dec z80_h
005566  2               ;dec_hl_no_dec_h:
005566  2               ;		dec z80_l
005566  2               ;		rts
005566  2               ;	
005566  2               ;dec_ix:
005566  2               ;		lda z80_ix
005566  2               ;		bne dec_ix_no_dec_h
005566  2               ;		dec z80_ix+1
005566  2               ;dec_ix_no_dec_h:
005566  2               ;		dec z80_ix
005566  2               ;		rts
005566  2               ;		
005566  2               ;dec_bc:	
005566  2               ;		lda z80_c
005566  2               ;		bne dec_bc_no_dec_b
005566  2               ;		dec z80_b
005566  2               ;dec_bc_no_dec_b:
005566  2               ;		dec z80_c
005566  2               ;		rts
005566  2               ;	
005566  2               ;dec_de:
005566  2               ;		lda z80_e
005566  2               ;		bne dec_de_no_dec_d
005566  2               ;		dec z80_d
005566  2               ;dec_de_no_dec_d:
005566  2               ;		dec z80_e
005566  2               ;		rts
005566  2               ;		
005566  2               ;ex_af_afs:
005566  2               ;	rts
005566  2               ;ex_de_hl:
005566  2               ;		lda z80_e
005566  2               ;		ldx z80_l
005566  2               ;		stx z80_e
005566  2               ;		sta z80_l
005566  2               ;		lda z80_d
005566  2               ;		ldx z80_h
005566  2               ;		stx z80_d
005566  2               ;		sta z80_h
005566  2               ;		rts
005566  2               ;
005566  2               exx:
005566  2  A5 62        		lda z80_c
005568  2  A4 6E        		ldy z80_cp
00556A  2  84 62        		sty z80_c
00556C  2  85 6E        		sta z80_cp
00556E  2  A5 63        		lda z80_b
005570  2  A4 6F        		ldy z80_bp
005572  2  84 63        		sty z80_b
005574  2  85 6F        		sta z80_bp
005576  2  A5 64        		lda z80_e
005578  2  A4 70        		ldy z80_ep
00557A  2  84 64        		sty z80_e
00557C  2  85 70        		sta z80_ep
00557E  2  A5 65        		lda z80_d
005580  2  A4 71        		ldy z80_dp
005582  2  84 65        		sty z80_d
005584  2  85 71        		sta z80_dp		
005586  2  A5 80        		lda scraddr
005588  2  A4 72        		ldy z80_lp
00558A  2  84 80        		sty scraddr
00558C  2  85 72        		sta z80_lp
00558E  2  A5 81        		lda scraddr+1
005590  2  A4 73        		ldy z80_hp
005592  2  84 81        		sty scraddr+1
005594  2  85 73        		sta z80_hp
005596  2  60           		rts
005597  2               		
005597  2               ;ex_sp_hl:
005597  2               ;		tsx
005597  2               ;		lda $0103,x
005597  2               ;		ldy z80_h
005597  2               ;		sta z80_h
005597  2               ;		tya
005597  2               ;		sta $0103,x
005597  2               ;		lda $0104,x
005597  2               ;		ldy z80_l
005597  2               ;		sta z80_l
005597  2               ;		tya
005597  2               ;		sta $104,x
005597  2               ;		rts
005597  2               ;		
005597  2               ;ldi:
005597  2               ;	rts
005597  2               ;ldir:
005597  2               ;		ldy #$00
005597  2               ;		ldx z80_b
005597  2               ;		beq ldir_last_page
005597  2               ;ldir_loop:		
005597  2               ;		lda (z80_hl),y
005597  2               ;		sta (z80_de),y
005597  2               ;		iny
005597  2               ;		bne ldir_loop
005597  2               ;		inc z80_h
005597  2               ;		inc z80_d
005597  2               ;		dex
005597  2               ;		bne ldir_loop
005597  2               ;ldir_last_page:
005597  2               ;		lda z80_c
005597  2               ;		beq ldir_end
005597  2               ;ldir_last_page_loop:		
005597  2               ;		lda (z80_hl),y
005597  2               ;		sta (z80_de),y
005597  2               ;		iny
005597  2               ;		cpy z80_c
005597  2               ;		bne ldir_last_page_loop
005597  2               ;ldir_end:		
005597  2               ;		stx z80_c
005597  2               ;		stx z80_b
005597  2               ;		tya
005597  2               ;		clc
005597  2               ;		adc z80_l
005597  2               ;		sta z80_l
005597  2               ;		bcc *+4
005597  2               ;		inc z80_h
005597  2               ;		tya
005597  2               ;		clc
005597  2               ;		adc z80_e
005597  2               ;		sta z80_e
005597  2               ;		bcc *+4
005597  2               ;		inc z80_d
005597  2               ;		rts
005597  2               ;		
005597  2               ;lddr:		ldy #$00
005597  2               ;lddr_loop:
005597  2               ;		lda (z80_hl),y
005597  2               ;		sta (z80_de),y
005597  2               ;		jsr dec_hl
005597  2               ;		jsr dec_de
005597  2               ;		jsr dec_bc
005597  2               ;		lda z80_b
005597  2               ;		ora z80_c
005597  2               ;		bne lddr_loop
005597  2               ;		rts
005597  2               ;ei:
005597  2               ;		rts
005597  2               ;di:
005597  2               ;		rts
005597  2               		
005597  2               ;-------------------------------------------------------------
005597  2               ; Set bits in bitmem
005597  2               ;-------------------------------------------------------------
005597  2               	
005597  2               z80_init:
005597  2  A2 00        	ldx #$00
005599  2  A9 01        	lda #$01
00559B  2               z80_init_loop:		
00559B  2  95 F8        	sta _bitmem0,x
00559D  2  E8           	inx
00559E  2  0A           	asl a
00559F  2  D0 FA        	bne z80_init_loop
0055A1  2  60           	rts
0055A2  2               
0055A2  2               push_af:
0055A2  2               push_bc:
0055A2  2               push_de:
0055A2  2               push_hl:
0055A2  2               
0055A2  2               pop_af:
0055A2  2               pop_bc:
0055A2  2               pop_de:
0055A2  2               pop_ix:
0055A2  2               pop_hl:
0055A2  2               
0055A2  2               add_hl_hl:
0055A2  2               
0055A2  2               inc_bc:
0055A2  2               inc_de:
0055A2  2               inc_hl:
0055A2  2               inc_ix:
0055A2  2               inc_sp:
0055A2  2               
0055A2  2               cpir:
0055A2  2               
0055A2  2               ex_af_af:
0055A2  2               ;	rts
0055A2  2               
0055A2  1               
