0001   0000             	device zxspectrum48
0002   0000             
0003   0000             
0004   0000             	org 32000-768
0005   7A00             ; Game engine code --------------------------------------------------------------
0006   7A00             
0007   7A00             ; Arcade Game Designer.
0008   7A00             ; (C) 2008 - 2018 Jonathan Cauldwell.
0009   7A00             ; ZX Spectrum Engine v0.6.
0010   7A00             
0011   7A00             ; Global definitions.
0012   7A00             
0013   7A00             SIMASK equ 248             ; SPRITEINK mask - allows users to set BRIGHT/FLASH/CLUT as well.
0014   7A00             SHRAPN equ 63926           ; shrapnel table, just below screen address table.
0015   7A00             SCADTB equ 64256           ; screen address table, just below map.
0016   7A00             MAP    equ 64768           ; properties map buffer.
0017   7A00             loopa  equ 23681           ; loop counter system variable.
0018   7A00             loopb  equ 23728           ; loop counter system variable.
0019   7A00             loopc  equ 23729           ; loop counter system variable.
0020   7A00             
0021   7A00             ; Block characteristics.
0022   7A00             
0023   7A00             PLATFM equ 1               ; platform.
0024   7A00             WALL   equ PLATFM + 1      ; solid wall.
0025   7A00             LADDER equ WALL + 1        ; ladder.
0026   7A00             FODDER equ LADDER + 1      ; fodder block.
0027   7A00             DEADLY equ FODDER + 1      ; deadly block.
0028   7A00             CUSTOM equ DEADLY + 1      ; custom block.
0029   7A00             COLECT equ CUSTOM + 1      ; collectable block.
0030   7A00             NUMTYP equ COLECT + 1      ; number of types.
0031   7A00             
0032   7A00             ; Sprites.
0033   7A00             
0034   7A00             NUMSPR equ 12              ; number of sprites.
0035   7A00             TABSIZ equ 17              ; size of each entry.
0036   7A00             SPRBUF equ NUMSPR * TABSIZ ; size of entire table.
0037   7A00             NMESIZ equ 4               ; bytes stored in nmetab for each sprite.
0038   7A00             X      equ 8               ; new x coordinate of sprite.
0039   7A00             Y      equ X + 1           ; new y coordinate of sprite.
0040   7A00             PAM1ST equ 5               ; first sprite parameter, old x (ix+5).
0041   7A00             
0042   7A00             ; Particle engine.
0043   7A00             
0044   7A00             NUMSHR equ 55              ; pieces of shrapnel.
0045   7A00             SHRSIZ equ 6               ; bytes per particle.
0046   7A00             
0047   7A00             
0048   7A00             ; Game starts here.  No reason why screen data couldn't go between start and contrl to put them in
0049   7A00             ; contended RAM, leaving the code and rest of the game in uncontended memory at 32768 and beyond.
0050   7A00             
0051   7A00                    org 32000
0052   7D00             start  equ $
0053   7D00             
0054   7D00             ; Set up the font.
0055   7D00             
0056   7D00 21 6B BE           ld hl,font-256      ; address of font.
0057   7D03 22 36 5C           ld (23606),hl       ; set up game font.
0058   7D06             
0059   7D06 C3 8C 83           jp game             ; start the game.
0060   7D09             
0061   7D09 00          joyval defb 0              ; joystick reading.
0062   7D0A 00          frmno  defb 0              ; selected frame.
0063   7D0B             
0064   7D0B             ; Don't change the order of these four.  Menu routine relies on winlft following wintop.
0065   7D0B             
0066   7D0B 00          wintop defb WINDOWTOP      ; top of window.
0067   7D0C 00          winlft defb WINDOWLFT      ; left edge.
0068   7D0D 17          winhgt defb WINDOWHGT      ; window height.
0069   7D0E 1E          winwid defb WINDOWWID      ; window width.
0070   7D0F             
0071   7D0F 22          numob  defb NUMOBJ         ; number of objects in game.
0072   7D10             
0073   7D10             ; Variables start here.
0074   7D10             ; Pixel versions of wintop, winlft, winhgt, winwid.
0075   7D10             
0076   7D10 00          wntopx defb (8 * WINDOWTOP)
0077   7D11 00          wnlftx defb (8 * WINDOWLFT)
0078   7D12 A8          wnbotx defb ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
0079   7D13 E0          wnrgtx defb ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)
0080   7D14 00          scno   defb 0              ; present screen number.
0081   7D15 03          numlif defb 3              ; number of lives.
0082   7D16 00          vara   defb 0              ; general-purpose variable.
0083   7D17 00          varb   defb 0              ; general-purpose variable.
0084   7D18 00          varc   defb 0              ; general-purpose variable.
0085   7D19 00          vard   defb 0              ; general-purpose variable.
0086   7D1A 00          vare   defb 0              ; general-purpose variable.
0087   7D1B 00          varf   defb 0              ; general-purpose variable.
0088   7D1C 00          varg   defb 0              ; general-purpose variable.
0089   7D1D 00          varh   defb 0              ; general-purpose variable.
0090   7D1E 00          vari   defb 0              ; general-purpose variable.
0091   7D1F 00          varj   defb 0              ; general-purpose variable.
0092   7D20 00          vark   defb 0              ; general-purpose variable.
0093   7D21 00          varl   defb 0              ; general-purpose variable.
0094   7D22 00          varm   defb 0              ; general-purpose variable.
0095   7D23 00          varn   defb 0              ; general-purpose variable.
0096   7D24 00          varo   defb 0              ; general-purpose variable.
0097   7D25 00          varp   defb 0              ; general-purpose variable.
0098   7D26 00          varq   defb 0              ; general-purpose variable.
0099   7D27 00          varr   defb 0              ; general-purpose variable.
0100   7D28 00          vars   defb 0              ; general-purpose variable.
0101   7D29 00          vart   defb 0              ; general-purpose variable.
0102   7D2A 00          varu   defb 0              ; general-purpose variable.
0103   7D2B 00          varv   defb 0              ; general-purpose variable.
0104   7D2C 00          varw   defb 0              ; general-purpose variable.
0105   7D2D 00          varz   defb 0              ; general-purpose variable.
0106   7D2E 00          contrl defb 0              ; control, 0 = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
0107   7D2F 00          charx  defb 0              ; cursor x position.
0108   7D30 00          chary  defb 0              ; cursor y position.
0109   7D31 00          clock  defb 0              ; last clock reading.
0110   7D32 FF          varrnd defb 255            ; last random number.
0111   7D33 FE          varobj defb 254            ; last object number.
0112   7D34 FF          varopt defb 255            ; last option chosen from menu.
0113   7D35 FF          varblk defb 255            ; block type.
0114   7D36 00          nexlev defb 0              ; next level flag.
0115   7D37 00          restfl defb 0              ; restart screen flag.
0116   7D38 00          deadf  defb 0              ; dead flag.
0117   7D39 00          gamwon defb 0              ; game won flag.
0118   7D3A 00          dispx  defb 0              ; cursor x position.
0119   7D3B 00          dispy  defb 0              ; cursor y position.
0120   7D3C             
0121   7D3C             ; Make sure pointers are arranged in the same order as the data itself.
0122   7D3C             
0123   7D3C 67 B8       frmptr defw frmlst         ; sprite frames.
0124   7D3E 2F A4       blkptr defw chgfx          ; block graphics.
0125   7D40 8F A5       colptr defw bcol           ; address of char colours.
0126   7D42 BB A5       proptr defw bprop          ; address of char properties.
0127   7D44 85 B8       scrptr defw scdat          ; address of screens.
0128   7D46 CB B9       nmeptr defw nmedat         ; enemy start positions.
0129   7D48             
0130   7D48             ; Assorted game routines which can go in contended memory.
0131   7D48             
0132   7D48             ; Modify for inventory.
0133   7D48             
0134   7D48 21 C8 7E    minve  ld hl,invdis        ; routine address.
0135   7D4B 22 D3 7D           ld (mod0+1),hl      ; set up menu routine.
0136   7D4E 22 79 7D           ld (mod2+1),hl      ; set up count routine.
0137   7D51 21 D5 7E           ld hl,fopt          ; find option from available objects.
0138   7D54 22 5B 7E           ld (mod1+1),hl      ; set up routine.
0139   7D57 18 0F              jr dbox             ; do menu routine.
0140   7D59             
0141   7D59             ; Modify for menu.
0142   7D59             
0143   7D59 21 B1 8A    mmenu  ld hl,always        ; routine address.
0144   7D5C 22 D3 7D           ld (mod0+1),hl      ; set up routine.
0145   7D5F 22 79 7D           ld (mod2+1),hl      ; set up count routine.
0146   7D62 21 8A 7E           ld hl,fstd          ; standard option selection.
0147   7D65 22 5B 7E           ld (mod1+1),hl      ; set up routine.
0148   7D68             
0149   7D68             ; Drop through into box routine.
0150   7D68             
0151   7D68             ; Work out size of box for message or menu.
0152   7D68             
0153   7D68             ;dbox   ld hl,nummsg        ; total messages.
0154   7D68             ;       cp (hl)             ; does this one exist?
0155   7D68             ;       ret nc              ; no, nothing to display.
0156   7D68 21 22 A3    dbox   ld hl,msgdat        ; pointer to messages.
0157   7D6B CD 03 8D           call getwrd         ; get message number.
0158   7D6E E5                 push hl             ; store pointer to message.
0159   7D6F 16 01              ld d,1              ; height.
0160   7D71 AF                 xor a               ; start at object zero.
0161   7D72 32 FB 89           ld (combyt),a       ; store number of object in combyt.
0162   7D75 5F                 ld e,a              ; maximum width.
0163   7D76 06 00       dbox5  ld b,0              ; this line's width.
0164   7D78 CD B1 8A    mod2   call always         ; item in player's possession?
0165   7D7B 20 01              jr nz,dbox6         ; not in inventory, skip this line.
0166   7D7D 14                 inc d               ; add to tally.
0167   7D7E 7E          dbox6  ld a,(hl)           ; get character.
0168   7D7F 23                 inc hl              ; next character.
0169   7D80 FE 2C              cp ','              ; reached end of line?
0170   7D82 28 0B              jr z,dbox3          ; yes.
0171   7D84 FE 0D              cp 13               ; reached end of line?
0172   7D86 28 07              jr z,dbox3          ; yes.
0173   7D88 04                 inc b               ; add to this line's width.
0174   7D89 A7                 and a               ; end of message?
0175   7D8A FA 96 7D           jp m,dbox4          ; yes, end count.
0176   7D8D 18 EF              jr dbox6            ; repeat until we find the end.
0177   7D8F 7B          dbox3  ld a,e              ; maximum line width.
0178   7D90 B8                 cp b                ; have we exceeded longest so far?
0179   7D91 30 E3              jr nc,dbox5         ; no, carry on looking.
0180   7D93 58                 ld e,b              ; make this the widest so far.
0181   7D94 18 E0              jr dbox5            ; keep looking.
0182   7D96 7B          dbox4  ld a,e              ; maximum line width.
0183   7D97 B8                 cp b                ; have we exceeded longest so far?
0184   7D98 30 01              jr nc,dbox8         ; no, carry on looking.
0185   7D9A 58                 ld e,b              ; final line is the longest so far.
0186   7D9B 15          dbox8  dec d               ; decrement items found.
0187   7D9C CA A9 7E           jp z,dbox15         ; total was zero.
0188   7D9F 7B                 ld a,e              ; longest line.
0189   7DA0 A7                 and a               ; was it zero?
0190   7DA1 CA A9 7E           jp z,dbox15         ; total was zero.
0191   7DA4 ED 53 00 7F        ld (bwid),de        ; set up size.
0192   7DA8             
0193   7DA8             ; That's set up our box size.
0194   7DA8             
0195   7DA8 3A 0D 7D           ld a,(winhgt)       ; window height in characters.
0196   7DAB 92                 sub d               ; subtract height of box.
0197   7DAC 1F                 rra                 ; divide by 2.
0198   7DAD 21 0B 7D           ld hl,wintop        ; top edge of window.
0199   7DB0 86                 add a,(hl)          ; add displacement.
0200   7DB1 32 02 7F           ld (btop),a         ; set up box top.
0201   7DB4 3A 0E 7D           ld a,(winwid)       ; window width in characters.
0202   7DB7 93                 sub e               ; subtract box width.
0203   7DB8 1F                 rra                 ; divide by 2.
0204   7DB9 23                 inc hl              ; left edge of window.
0205   7DBA 86                 add a,(hl)          ; add displacement.
0206   7DBB 32 03 7F           ld (blft),a         ; box left.
0207   7DBE 2A 36 5C           ld hl,(23606)       ; font.
0208   7DC1 22 CC 87           ld (grbase),hl      ; set up for text display.
0209   7DC4 E1                 pop hl              ; restore message pointer.
0210   7DC5 3A 02 7F           ld a,(btop)         ; box top.
0211   7DC8 32 3A 7D           ld (dispx),a        ; set display coordinate.
0212   7DCB AF                 xor a               ; start at object zero.
0213   7DCC 32 FB 89           ld (combyt),a       ; store number of object in combyt.
0214   7DCF 3A FB 89    dbox2  ld a,(combyt)       ; get object number.
0215   7DD2 CD B1 8A    mod0   call always         ; check inventory for display.
0216   7DD5 C2 97 7E           jp nz,dbox13        ; not in inventory, skip this line.
0217   7DD8             
0218   7DD8 3A 03 7F           ld a,(blft)         ; box left.
0219   7DDB 32 3B 7D           ld (dispy),a        ; set left display position.
0220   7DDE 3A 00 7F           ld a,(bwid)         ; box width.
0221   7DE1 47                 ld b,a              ; store width.
0222   7DE2 7E          dbox0  ld a,(hl)           ; get character.
0223   7DE3 FE 2C              cp ','              ; end of line?
0224   7DE5 28 45              jr z,dbox1          ; yes, next one.
0225   7DE7 FE 0D              cp 13               ; end of option?
0226   7DE9 28 41              jr z,dbox1          ; yes, on to next.
0227   7DEB 05                 dec b               ; one less to display.
0228   7DEC E6 7F              and 127             ; remove terminator.
0229   7DEE C5                 push bc             ; store characters remaining.
0230   7DEF E5                 push hl             ; store address on stack.
0231   7DF0 F5                 push af             ; store character.
0232   7DF1 CD B6 88           call gaadd          ; get attribute address.
0233   7DF4 3A 8D 5C           ld a,(23693)        ; current colour.
0234   7DF7 77                 ld (hl),a           ; set attribute.
0235   7DF8 F1                 pop af              ; restore character.
0236   7DF9 CD 1A 89           call pchr           ; display on screen.
0237   7DFC E1                 pop hl              ; retrieve address of next character.
0238   7DFD C1                 pop bc              ; chars left for this line.
0239   7DFE 7E                 ld a,(hl)           ; get character.
0240   7DFF 23                 inc hl              ; next character.
0241   7E00 FE 80              cp 128              ; end of message?
0242   7E02 D2 3A 7E           jp nc,dbox7         ; yes, job done.
0243   7E05 78                 ld a,b              ; chars remaining.
0244   7E06 A7                 and a               ; are any left?
0245   7E07 20 D9              jr nz,dbox0         ; yes, continue.
0246   7E09             
0247   7E09             ; Reached limit of characters per line.
0248   7E09             
0249   7E09 7E          dbox9  ld a,(hl)           ; get character.
0250   7E0A 23                 inc hl              ; next one.
0251   7E0B FE 2C              cp ','              ; another line?
0252   7E0D 28 21              jr z,dbox10         ; yes, do next line.
0253   7E0F FE 0D              cp 13               ; another line?
0254   7E11 28 1D              jr z,dbox10         ; yes, on to next.
0255   7E13 FE 80              cp 128              ; end of message?
0256   7E15 30 2A              jr nc,dbox11        ; yes, finish message.
0257   7E17 18 F0              jr dbox9
0258   7E19             
0259   7E19             ; Fill box to end of line.
0260   7E19             
0261   7E19 E5          dboxf  push hl             ; store address on stack.
0262   7E1A C5                 push bc             ; store characters remaining.
0263   7E1B CD B6 88           call gaadd          ; get attribute address.
0264   7E1E 3A 8D 5C           ld a,(23693)        ; current colour.
0265   7E21 77                 ld (hl),a           ; set attribute.
0266   7E22 3E 20              ld a,32             ; space character.
0267   7E24 CD 1A 89           call pchr           ; display character.
0268   7E27 C1                 pop bc              ; retrieve character count.
0269   7E28 E1                 pop hl              ; retrieve address of next character.
0270   7E29 10 EE              djnz dboxf          ; repeat for remaining chars on line.
0271   7E2B C9                 ret
0272   7E2C 23          dbox1  inc hl              ; skip character.
0273   7E2D CD 19 7E           call dboxf          ; fill box out to right side.
0274   7E30 3A 3A 7D    dbox10 ld a,(dispx)        ; x coordinate.
0275   7E33 3C                 inc a               ; down a line.
0276   7E34 32 3A 7D           ld (dispx),a        ; next position.
0277   7E37 C3 CF 7D           jp dbox2            ; next line.
0278   7E3A 78          dbox7  ld a,b              ; chars remaining.
0279   7E3B A7                 and a               ; are any left?
0280   7E3C 28 03              jr z,dbox11         ; no, nothing to draw.
0281   7E3E CD 19 7E           call dboxf          ; fill message to line.
0282   7E41             
0283   7E41             ; Drawn the box menu, now select option.
0284   7E41             
0285   7E41 3A 02 7F    dbox11 ld a,(btop)         ; box top.
0286   7E44 32 3A 7D           ld (dispx),a        ; set bar position.
0287   7E47 CD AE 8B    dbox14 call joykey         ; get controls.
0288   7E4A E6 1F              and 31              ; anything pressed?
0289   7E4C 20 F9              jr nz,dbox14        ; yes, debounce it.
0290   7E4E CD AB 7E           call dbar           ; draw bar.
0291   7E51 CD AE 8B    dbox12 call joykey         ; get controls.
0292   7E54 E6 1C              and 28              ; anything pressed?
0293   7E56 28 F9              jr z,dbox12         ; no, nothing.
0294   7E58 E6 10              and 16              ; fire button pressed?
0295   7E5A C2 8A 7E    mod1   jp nz,fstd          ; yes, job done.
0296   7E5D CD AB 7E           call dbar           ; delete bar.
0297   7E60 3A 09 7D           ld a,(joyval)       ; joystick reading.
0298   7E63 E6 08              and 8               ; going up?
0299   7E65 20 13              jr nz,dboxu         ; yes, go up.
0300   7E67 3A 3A 7D           ld a,(dispx)        ; vertical position of bar.
0301   7E6A 3C                 inc a               ; look down.
0302   7E6B 21 02 7F           ld hl,btop          ; top of box.
0303   7E6E 96                 sub (hl)            ; find distance from top.
0304   7E6F 2B                 dec hl              ; point to height.
0305   7E70 BE                 cp (hl)             ; are we at end?
0306   7E71 CA 47 7E           jp z,dbox14         ; yes, go no further.
0307   7E74 21 3A 7D           ld hl,dispx         ; coordinate.
0308   7E77 34                 inc (hl)            ; move bar.
0309   7E78 18 CD              jr dbox14           ; continue.
0310   7E7A 3A 3A 7D    dboxu  ld a,(dispx)        ; vertical position of bar.
0311   7E7D 21 02 7F           ld hl,btop          ; top of box.
0312   7E80 BE                 cp (hl)             ; are we at the top?
0313   7E81 CA 47 7E           jp z,dbox14         ; yes, go no further.
0314   7E84 21 3A 7D           ld hl,dispx         ; coordinate.
0315   7E87 35                 dec (hl)            ; move bar.
0316   7E88 18 BD              jr dbox14           ; continue.
0317   7E8A 3A 3A 7D    fstd   ld a,(dispx)        ; bar position.
0318   7E8D 21 02 7F           ld hl,btop          ; top of menu.
0319   7E90 96                 sub (hl)            ; find selected option.
0320   7E91 32 34 7D           ld (varopt),a       ; store the option.
0321   7E94 C3 C6 7F           jp redraw           ; redraw the screen.
0322   7E97             
0323   7E97             ; Option not available.  Skip this line.
0324   7E97             
0325   7E97 7E          dbox13 ld a,(hl)           ; get character.
0326   7E98 23                 inc hl              ; next one.
0327   7E99 FE 2C              cp ','              ; another line?
0328   7E9B CA CF 7D           jp z,dbox2          ; yes, do next line.
0329   7E9E FE 0D              cp 13               ; another line?
0330   7EA0 CA CF 7D           jp z,dbox2          ; yes, on to next line.
0331   7EA3 A7                 and a               ; end of message?
0332   7EA4 FA 41 7E           jp m,dbox11         ; yes, finish message.
0333   7EA7 18 EE              jr dbox13
0334   7EA9 E1          dbox15 pop hl              ; pop message pointer from the stack.
0335   7EAA C9                 ret
0336   7EAB             
0337   7EAB 3A 03 7F    dbar   ld a,(blft)         ; box left.
0338   7EAE 32 3B 7D           ld (dispy),a        ; set display coordinate.
0339   7EB1 CD 88 88           call gprad          ; get printing address.
0340   7EB4 EB                 ex de,hl            ; flip into hl register pair.
0341   7EB5 3A 00 7F           ld a,(bwid)         ; box width.
0342   7EB8 4F                 ld c,a              ; loop counter in c.
0343   7EB9 54                 ld d,h              ; store screen address high byte.
0344   7EBA 06 08       dbar1  ld b,8              ; pixel height in b.
0345   7EBC 7E          dbar0  ld a,(hl)           ; get screen byte.
0346   7EBD 2F                 cpl                 ; reverse all bits.
0347   7EBE 77                 ld (hl),a           ; write back to screen.
0348   7EBF 24                 inc h               ; next line down.
0349   7EC0 10 FA              djnz dbar0          ; draw rest of character.
0350   7EC2 62                 ld h,d              ; rsetore screen address.
0351   7EC3 2C                 inc l               ; one char right.
0352   7EC4 0D                 dec c               ; decrement character counter.
0353   7EC5 20 F3              jr nz,dbar1         ; repeat for whole line.
0354   7EC7 C9                 ret
0355   7EC8             
0356   7EC8 E5          invdis push hl             ; store message text pointer.
0357   7EC9 D5                 push de             ; store de pair for line count.
0358   7ECA 21 FB 89           ld hl,combyt        ; object number.
0359   7ECD 7E                 ld a,(hl)           ; get object number.
0360   7ECE 34                 inc (hl)            ; ready for next one.
0361   7ECF CD E7 86           call gotob          ; check if we have object.
0362   7ED2 D1                 pop de              ; retrieve de pair from stack.
0363   7ED3 E1                 pop hl              ; retrieve text pointer.
0364   7ED4 C9                 ret
0365   7ED5             ;always xor a               ; set zero flag.
0366   7ED5             ;       ret
0367   7ED5             
0368   7ED5             ; Find option selected.
0369   7ED5             
0370   7ED5 3A 3A 7D    fopt   ld a,(dispx)
0371   7ED8 21 02 7F           ld hl,btop          ; top of menu.
0372   7EDB 96                 sub (hl)            ; find selected option.
0373   7EDC 3C                 inc a               ; object 0 needs one iteration, 1 needs 2 and so on.
0374   7EDD 47                 ld b,a              ; option selected in b register.
0375   7EDE 21 FB 89           ld hl,combyt        ; object number.
0376   7EE1 36 00              ld (hl),0           ; set to first item.
0377   7EE3 C5          fopt0  push bc             ; store option counter in b register.
0378   7EE4 CD F4 7E           call fobj           ; find next object in inventory.
0379   7EE7 C1                 pop bc              ; restore option counter.
0380   7EE8 10 F9              djnz fopt0          ; repeat for relevant steps down the list.
0381   7EEA 3A FB 89           ld a,(combyt)       ; get option.
0382   7EED 3D                 dec a               ; one less, due to where we increment combyt.
0383   7EEE 32 34 7D           ld (varopt),a       ; store the option.
0384   7EF1 C3 C6 7F           jp redraw           ; redraw the screen.
0385   7EF4             
0386   7EF4 21 FB 89    fobj   ld hl,combyt        ; object number.
0387   7EF7 7E                 ld a,(hl)           ; get object number.
0388   7EF8 34                 inc (hl)            ; ready for next item.
0389   7EF9 C8                 ret z               ; in case we loop back to zero.
0390   7EFA CD E7 86           call gotob          ; do we have this item?
0391   7EFD C8                 ret z               ; yes, it's on the list.
0392   7EFE 18 F4              jr fobj             ; repeat until we find next item in pockets.
0393   7F00             
0394   7F00 00          bwid   defb 0              ; box/menu width.
0395   7F01 00          blen   defb 0              ; box/menu height.
0396   7F02 00          btop   defb 0              ; box coordinates.
0397   7F03 00          blft   defb 0
0398   7F04             
0399   7F04             ; Wait for keypress.
0400   7F04             
0401   7F04 CD 10 7F    prskey call debkey         ; debounce key.
0402   7F07 CD 5B 7F    prsky0 call vsync          ; vertical synch.
0403   7F0A CD 8E 02           call 654            ; return keyboard state in e.
0404   7F0D 1C                 inc e               ; is it 255?
0405   7F0E 28 F7              jr z,prsky0         ; yes, repeat until key pressed.
0406   7F10             
0407   7F10             ; Debounce keypress.
0408   7F10             
0409   7F10 CD 5B 7F    debkey call vsync          ; update scrolling, sounds etc.
0410   7F13 CD 8E 02           call 654            ; d=shift, e=key.
0411   7F16 1C                 inc e               ; is it 255?
0412   7F17 20 F7              jr nz,debkey        ; no - loop until key is released.
0413   7F19 C9                 ret
0414   7F1A             
0415   7F1A             ; Delay routine.
0416   7F1A             
0417   7F1A C5          delay  push bc             ; store loop counter.
0418   7F1B CD 5B 7F           call vsync          ; wait for interrupt.
0419   7F1E C1                 pop bc              ; restore counter.
0420   7F1F 10 F9              djnz delay          ; repeat.
0421   7F21 C9                 ret
0422   7F22             
0423   7F22             ; Clear sprite table.
0424   7F22             
0425   7F22 21 C4 92    xspr   ld hl,sprtab        ; sprite table.
0426   7F25 06 CC              ld b,SPRBUF         ; length of table.
0427   7F27 36 FF       xspr0  ld (hl),255         ; clear one byte.
0428   7F29 23                 inc hl              ; move to next byte.
0429   7F2A 10 FB              djnz xspr0          ; repeat for rest of table.
0430   7F2C C9                 ret
0431   7F2D             
0432   7F2D CD D4 85    silenc call silen1         ; silence channel 1.
0433   7F30 CD E1 85           call silen2         ; silence channel 2.
0434   7F33 CD EE 85           call silen3         ; silence channel 3.
0435   7F36 C3 32 85           jp plsnd            ; play all channels to switch them off.
0436   7F39             
0437   7F39             ; Initialise all objects.
0438   7F39             
0439   7F39 DD 21 FD B9 iniob  ld ix,objdta        ; objects table.
0440   7F3D 3A 0F 7D           ld a,(numob)        ; number of objects in the game.
0441   7F40 47                 ld b,a              ; loop counter.
0442   7F41 11 27 00           ld de,39            ; distance between objects.
0443   7F44 DD 7E 24    iniob0 ld a,(ix+36)        ; start screen.
0444   7F47 DD 77 21           ld (ix+33),a        ; set start screen.
0445   7F4A DD 7E 25           ld a,(ix+37)        ; find start x.
0446   7F4D DD 77 22           ld (ix+34),a        ; set start x.
0447   7F50 DD 7E 26           ld a,(ix+38)        ; get initial y.
0448   7F53 DD 77 23           ld (ix+35),a        ; set y coord.
0449   7F56 DD 19              add ix,de           ; point to next object.
0450   7F58 10 EA              djnz iniob0         ; repeat.
0451   7F5A C9                 ret
0452   7F5B             
0453   7F5B             ; Screen synchronisation.
0454   7F5B             
0455   7F5B CD AE 8B    vsync  call joykey         ; read joystick/keyboard.
0456   7F5E 3A C5 7F           ld a,(sndtyp)       ; sound to play.
0457   7F61 A7                 and a               ; any sound?
0458   7F62 CA 8C 7F           jp z,vsync1         ; no.
0459   7F65 47                 ld b,a              ; outer loop.
0460   7F66 3A 48 5C           ld a,(23624)        ; border colour.
0461   7F69 1F                 rra                 ; put border bits into d0, d1 and d2.
0462   7F6A 1F                 rra
0463   7F6B 1F                 rra
0464   7F6C 4F                 ld c,a              ; first value to write to speaker.
0465   7F6D 78                 ld a,b              ; sound.
0466   7F6E A7                 and a               ; test it.
0467   7F6F FA A4 7F           jp m,vsync6         ; play white noise.
0468   7F72 79          vsync2 ld a,c              ; get speaker value.
0469   7F73 D3 FE              out (254),a         ; write to speaker.
0470   7F75 EE F8              xor 248             ; toggle all except the border bits.
0471   7F77 4F                 ld c,a              ; store value for next time.
0472   7F78 50                 ld d,b              ; store loop counter.
0473   7F79 21 31 7D    vsync3 ld hl,clock         ; previous clock setting.
0474   7F7C 3A 78 5C           ld a,(23672)        ; current clock setting.
0475   7F7F BE                 cp (hl)             ; subtract last reading.
0476   7F80 C2 88 7F           jp nz,vsync4        ; yes, no more processing please.
0477   7F83 10 F4              djnz vsync3         ; loop.
0478   7F85 42                 ld b,d              ; restore loop counter.
0479   7F86 10 EA              djnz vsync2         ; continue noise.
0480   7F88 7A          vsync4 ld a,d              ; where we got to.
0481   7F89 32 C5 7F    vsynca ld (sndtyp),a       ; remember for next time.
0482   7F8C 3A 78 5C    vsync1 ld a,(23672)        ; clock low.
0483   7F8F 1F                 rra                 ; rotate bit into carry.
0484   7F90 DC 9E 7F           call c,vsync5       ; time to play sound and do shrapnel/ticker stuff.
0485   7F93 21 31 7D           ld hl,clock         ; last clock reading.
0486   7F96 3A 78 5C    vsync0 ld a,(23672)        ; current clock reading.
0487   7F99 BE                 cp (hl)             ; are they the same?
0488   7F9A 28 FA              jr z,vsync0         ; yes, wait until clock changes.
0489   7F9C 77                 ld (hl),a           ; set new clock reading.
0490   7F9D C9                 ret
0491   7F9E CD 32 85    vsync5 call plsnd          ; play sound.
0492   7FA1 C3 A1 80           jp proshr           ; shrapnel and stuff.
0493   7FA4             
0494   7FA4             ; Play white noise.
0495   7FA4             
0496   7FA4 78          vsync6 ld a,b              ; 128 - 255.
0497   7FA5 D6 7F              sub 127
0498   7FA7 47                 ld b,a
0499   7FA8 21 31 7D           ld hl,clock         ; previous clock setting.
0500   7FAB ED 5F       vsync7 ld a,r              ; get random speaker value.
0501   7FAD E6 F8              and 248             ; only retain the speaker/earphone bits.
0502   7FAF B1                 or c                ; merge with border colour.
0503   7FB0 D3 FE              out (254),a         ; write to speaker.
0504   7FB2 3A 78 5C           ld a,(23672)        ; current clock setting.
0505   7FB5 BE                 cp (hl)             ; subtract last reading.
0506   7FB6 C2 C2 7F           jp nz,vsync8        ; yes, no more processing please.
0507   7FB9 78                 ld a,b
0508   7FBA E6 7F              and 127
0509   7FBC 3C                 inc a
0510   7FBD 3D          vsync9 dec a
0511   7FBE 20 FD              jr nz,vsync9        ; loop.
0512   7FC0 10 E9              djnz vsync7         ; continue noise.
0513   7FC2 AF          vsync8 xor a
0514   7FC3 18 C4              jr vsynca
0515   7FC5 00          sndtyp defb 0
0516   7FC6             ;clock  defb 0              ; last clock reading.
0517   7FC6             
0518   7FC6             ; Redraw the screen.
0519   7FC6             
0520   7FC6             ; Remove old copy of all sprites for redraw.
0521   7FC6             
0522   7FC6 DD E5       redraw push ix             ; place sprite pointer on stack.
0523   7FC8 CD A8 89           call droom          ; show screen layout.
0524   7FCB CD 35 86           call shwob          ; draw objects.
0525   7FCE 06 0C       numsp0 ld b,NUMSPR         ; sprites to draw.
0526   7FD0 DD 21 C4 92        ld ix,sprtab        ; sprite table.
0527   7FD4 DD 7E 00    redrw0 ld a,(ix+0)         ; old sprite type.
0528   7FD7 3C                 inc a               ; is it enabled?
0529   7FD8 28 0C              jr z,redrw1         ; no, find next one.
0530   7FDA DD 7E 03           ld a,(ix+3)         ; sprite x.
0531   7FDD FE B1              cp 177              ; beyond maximum?
0532   7FDF 30 05              jr nc,redrw1        ; yes, nothing to draw.
0533   7FE1 C5                 push bc             ; store sprite counter.
0534   7FE2 CD 70 8E           call sspria         ; show single sprite.
0535   7FE5 C1                 pop bc              ; retrieve sprite counter.
0536   7FE6 11 11 00    redrw1 ld de,TABSIZ        ; distance to next odd/even entry.
0537   7FE9 DD 19              add ix,de           ; next sprite.
0538   7FEB 10 E7              djnz redrw0         ; repeat for remaining sprites.
0539   7FED CD 43 83    rpblc1 call dshrp          ; redraw shrapnel.
0540   7FF0 DD E1              pop ix              ; retrieve sprite pointer.
0541   7FF2 C9                 ret
0542   7FF3             
0543   7FF3             ; Clear screen routine.
0544   7FF3             
0545   7FF3 21 00 40    cls    ld hl,16384         ; screen address.
0546   7FF6 75                 ld (hl),l           ; blank first byte.
0547   7FF7 11 01 40           ld de,16385         ; second byte.
0548   7FFA 01 00 18           ld bc,6144          ; bytes to copy.
0549   7FFD ED B0              ldir                ; blank them all.
0550   7FFF 3A 8D 5C           ld a,(23693)        ; fetch attributes.
0551   8002 77                 ld (hl),a           ; set first attribute cell.
0552   8003 01 FF 02           ld bc,767           ; number of attributes.
0553   8006 ED B0              ldir                ; set all attributes.
0554   8008 21 00 00           ld hl,0             ; set hl to origin (0, 0).
0555   800B 22 2F 7D           ld (charx),hl       ; reset coordinates.
0556   800E C9                 ret
0557   800F             
0558   800F             ; Set palette routine and data.
0559   800F             ; Palette.
0560   800F             ; 48955 = register select port.
0561   800F             ; 65339 = data read/write port.
0562   800F             
0563   800F             ; 48955 = write to register:
0564   800F             ; d0-d5 : select register sub-group.
0565   800F             ; d6-d7 : select register group.
0566   800F             ;         00 = sub-group determines entry in palette table.
0567   800F             ;         64 = mode select, write d0 to 65339 to toggle mode on/off.
0568   800F             
0569   800F             ; 65339 = data read/write:
0570   800F             ; d0-d1 : blue intensity (last bit duplicated so Bb is Bbb)
0571   800F             ; d2-d4 : red intensity
0572   800F             ; d5-d7 : green intensity
0573   800F             
0574   800F 01 3B BF    setpal ld bc,48955         ; register select.
0575   8012 3E 40              ld a,64             ; mode select.
0576   8014 ED 79              out (c),a           ; set ULAplus mode.
0577   8016 06 FF              ld b,255            ; data write.
0578   8018 3E 01              ld a,1              ; mode on.
0579   801A ED 79              out (c),a           ; switch on ULAplus.
0580   801C             
0581   801C 06 40              ld b,64             ; number of palette table entries to write.
0582   801E 21 2B BF    setpa1 ld hl,palett        ; palette we want.
0583   8021 1E 00              ld e,0              ; register number.
0584   8023 C5          setpa0 push bc             ; store counter.
0585   8024 06 BF              ld b,191            ; register select.
0586   8026 7B                 ld a,e              ; register number to write.
0587   8027 ED 79              out (c),a           ; write to port.
0588   8029 06 FF              ld b,255            ; data select.
0589   802B 7E                 ld a,(hl)           ; get colour data from table.
0590   802C ED 79              out (c),a           ; write to port.
0591   802E 1C                 inc e               ; next clut entry.
0592   802F 23                 inc hl              ; next table entry.
0593   8030 C1                 pop bc              ; restore counter from stack.
0594   8031 10 F0              djnz setpa0         ; set rest of palette.
0595   8033 C9                 ret
0596   8034             
0597   8034             endpal equ $
0598   8034             
0599   8034 7E          fdchk  ld a,(hl)           ; fetch cell.
0600   8035 FE 04              cp FODDER           ; is it fodder?
0601   8037 C0                 ret nz              ; no.
0602   8038 36 00              ld (hl),0           ; rewrite block type.
0603   803A E5                 push hl             ; store pointer to block.
0604   803B 11 00 FD           ld de,MAP           ; address of map.
0605   803E A7                 and a               ; clear carry flag for subtraction.
0606   803F ED 52              sbc hl,de           ; find simple displacement for block.
0607   8041 7D                 ld a,l              ; low byte is y coordinate.
0608   8042 E6 1F              and 31              ; column position 0 - 31.
0609   8044 32 3B 7D           ld (dispy),a        ; set up y position.
0610   8047 29                 add hl,hl           ; multiply displacement by 8.
0611   8048 29                 add hl,hl
0612   8049 29                 add hl,hl
0613   804A 7C                 ld a,h              ; x coordinate now in h.
0614   804B 32 3A 7D           ld (dispx),a        ; set the display coordinate.
0615   804E AF                 xor a               ; block to write.
0616   804F CD FF 88           call pattr          ; write block.
0617   8052 E1                 pop hl              ; restore block pointer.
0618   8053 C9                 ret
0619   8054             
0620   8054             ; Colour a sprite.
0621   8054             
0622   8054 DD 7E 08    cspr   ld a,(ix+8)         ; look at the vertical first.
0623   8057 FE B1              cp 177              ; is it out-of-range?
0624   8059 D0                 ret nc              ; yes, can't colour it.
0625   805A 07                 rlca                ; divide by 64.
0626   805B 07                 rlca                ; quicker than 6 rrca operations.
0627   805C 6F                 ld l,a              ; store in e register for now.
0628   805D E6 03              and 3               ; mask to find segment.
0629   805F C6 58              add a,88            ; attributes start at 88*256=22528.
0630   8061 67                 ld h,a              ; that's our high byte sorted.
0631   8062 7D                 ld a,l              ; vertical/64 - same as vertical*4.
0632   8063 E6 E0              and 224             ; want a multiple of 32.
0633   8065 6F                 ld l,a              ; vertical element calculated.
0634   8066 DD 7E 09           ld a,(ix+9)         ; get horizontal position.
0635   8069 1F                 rra                 ; divide by 8.
0636   806A 1F                 rra
0637   806B 1F                 rra
0638   806C E6 1F              and 31              ; want result in range 0-31.
0639   806E 85                 add a,l             ; add to existing low byte.
0640   806F 6F                 ld l,a              ; that's the low byte done.
0641   8070             
0642   8070 11 1E 00           ld de,30            ; distance to next line down.
0643   8073 DD 7E 08           ld a,(ix+8)         ; x coordinate.
0644   8076 06 03       cspr2  ld b,3              ; default rows to write.
0645   8078 E6 07              and 7               ; does x straddle cells?
0646   807A 20 01              jr nz,cspr0         ; yes, loop counter is good.
0647   807C 05                 dec b               ; one less row to write.
0648   807D 7E          cspr0  ld a,(hl)           ; get attributes.
0649   807E E6 F8       cspr3  and SIMASK          ; remove ink.
0650   8080 B1                 or c                ; put in the new ink.
0651   8081 77                 ld (hl),a           ; write back again.
0652   8082 2C                 inc l               ; next cell.
0653   8083 7E                 ld a,(hl)           ; get attributes.
0654   8084 E6 F8       cspr4  and SIMASK          ; remove ink.
0655   8086 B1                 or c                ; put in the new ink.
0656   8087 77                 ld (hl),a           ; write back again.
0657   8088 2C                 inc l               ; next cell.
0658   8089 DD 7E 09           ld a,(ix+9)         ; y coordinate.
0659   808C E6 07              and 7               ; straddling cells?
0660   808E 28 05              jr z,cspr1          ; no, only 2 wide.
0661   8090 7E                 ld a,(hl)           ; get attributes.
0662   8091 E6 F8       cspr5  and SIMASK          ; remove ink.
0663   8093 B1                 or c                ; put in the new ink.
0664   8094 77                 ld (hl),a           ; write back again.
0665   8095 19          cspr1  add hl,de           ; next row.
0666   8096 10 E5              djnz cspr0
0667   8098 C9                 ret
0668   8099             
0669   8099             ; Scrolly text and puzzle variables.
0670   8099             
0671   8099 80          txtbit defb 128            ; bit to write.
0672   809A 10          txtwid defb 16             ; width of ticker message.
0673   809B 22 A3       txtpos defw msgdat
0674   809D 22 A3       txtini defw msgdat
0675   809F 16 40       txtscr defw 16406
0676   80A1             
0677   80A1             ; Specialist routines.
0678   80A1             ; Process shrapnel.
0679   80A1             
0680   80A1 DD 21 B6 F9 proshr ld ix,SHRAPN        ; table.
0681   80A5 06 37              ld b,NUMSHR         ; shrapnel pieces to process.
0682   80A7 11 06 00           ld de,SHRSIZ        ; distance to next.
0683   80AA DD 7E 00    prosh0 ld a,(ix+0)         ; on/off marker.
0684   80AD 17                 rla                 ; check its status.
0685   80AE D4 B8 80    proshx call nc,prosh1      ; on, so process it.
0686   80B1 DD 19              add ix,de           ; point there.
0687   80B3 10 F5              djnz prosh0         ; round again.
0688   80B5 C3 39 92           jp scrly
0689   80B8 C5          prosh1 push bc             ; store counter.
0690   80B9 CD 42 81           call plot           ; delete the pixel.
0691   80BC DD 7E 00           ld a,(ix+0)         ; restore shrapnel type.
0692   80BF 21 D5 80           ld hl,shrptr        ; shrapnel routine pointers.
0693   80C2 CD CD 80           call prosh2         ; run the routine.
0694   80C5 CD 20 81           call chkxy          ; check x and y are good before we redisplay.
0695   80C8 C1                 pop bc              ; restore counter.
0696   80C9 11 06 00           ld de,SHRSIZ        ; distance to next.
0697   80CC C9                 ret
0698   80CD 07          prosh2 rlca                ; 2 bytes per address.
0699   80CE 5F                 ld e,a              ; copy to de.
0700   80CF 19                 add hl,de           ; point to address of routine.
0701   80D0 7E                 ld a,(hl)           ; get address low.
0702   80D1 23                 inc hl              ; point to second byte.
0703   80D2 66                 ld h,(hl)           ; fetch high byte from table.
0704   80D3 6F                 ld l,a              ; put low byte in l.
0705   80D4 E9                 jp (hl)             ; jump to routine.
0706   80D5             
0707   80D5 D6 81       shrptr defw laser          ; laser.
0708   80D7 AF 81              defw trail          ; vapour trail.
0709   80D9 E5 80              defw shrap          ; shrapnel from explosion.
0710   80DB 10 81              defw dotl           ; horizontal starfield left.
0711   80DD 14 81              defw dotr           ; horizontal starfield right.
0712   80DF 18 81              defw dotu           ; vertical starfield up.
0713   80E1 1C 81              defw dotd           ; vertical starfield down.
0714   80E3 21 A3              defw ptcusr         ; user particle.
0715   80E5             
0716   80E5             ; Explosion shrapnel.
0717   80E5             
0718   80E5 DD 5E 01    shrap  ld e,(ix+1)         ; get the angle.
0719   80E8 16 00              ld d,0              ; no high byte.
0720   80EA 21 6F 81           ld hl,shrsin        ; shrapnel sine table.
0721   80ED 19                 add hl,de           ; point to sine.
0722   80EE             
0723   80EE 5E                 ld e,(hl)           ; fetch value from table.
0724   80EF 23                 inc hl              ; next byte of table.
0725   80F0 56                 ld d,(hl)           ; fetch value from table.
0726   80F1 23                 inc hl              ; next byte of table.
0727   80F2 4E                 ld c,(hl)           ; fetch value from table.
0728   80F3 23                 inc hl              ; next byte of table.
0729   80F4 46                 ld b,(hl)           ; fetch value from table.
0730   80F5 DD 6E 02           ld l,(ix+2)         ; x coordinate in hl.
0731   80F8 DD 66 03           ld h,(ix+3)
0732   80FB 19                 add hl,de           ; add sine.
0733   80FC DD 75 02           ld (ix+2),l         ; store new coordinate.
0734   80FF DD 74 03           ld (ix+3),h
0735   8102 DD 6E 04           ld l,(ix+4)         ; y coordinate in hl.
0736   8105 DD 66 05           ld h,(ix+5)
0737   8108 09                 add hl,bc           ; add cosine.
0738   8109 DD 75 04           ld (ix+4),l         ; store new coordinate.
0739   810C DD 74 05           ld (ix+5),h
0740   810F C9                 ret
0741   8110             
0742   8110 DD 35 05    dotl   dec (ix+5)          ; move left.
0743   8113 C9                 ret
0744   8114 DD 34 05    dotr   inc (ix+5)          ; move left.
0745   8117 C9                 ret
0746   8118 DD 35 03    dotu   dec (ix+3)          ; move up.
0747   811B C9                 ret
0748   811C DD 34 03    dotd   inc (ix+3)          ; move down.
0749   811F C9                 ret
0750   8120             
0751   8120             ; Check coordinates are good before redrawing at new position.
0752   8120             
0753   8120 21 10 7D    chkxy  ld hl,wntopx        ; window top.
0754   8123 DD 7E 03           ld a,(ix+3)         ; fetch shrapnel coordinate.
0755   8126 BE                 cp (hl)             ; compare with top window limit.
0756   8127 38 41              jr c,kilshr         ; out of window, kill shrapnel.
0757   8129 23                 inc hl              ; left edge.
0758   812A DD 7E 05           ld a,(ix+5)         ; fetch shrapnel coordinate.
0759   812D BE                 cp (hl)             ; compare with left window limit.
0760   812E 38 3A              jr c,kilshr         ; out of window, kill shrapnel.
0761   8130             
0762   8130 23                 inc hl              ; point to bottom.
0763   8131 7E                 ld a,(hl)           ; fetch window limit.
0764   8132 C6 0F              add a,15            ; add height of sprite.
0765   8134 DD BE 03           cp (ix+3)           ; compare with shrapnel x coordinate.
0766   8137 38 31              jr c,kilshr         ; off screen, kill shrapnel.
0767   8139 23                 inc hl              ; point to right edge.
0768   813A 7E                 ld a,(hl)           ; fetch shrapnel y coordinate.
0769   813B C6 0F              add a,15            ; add width of sprite.
0770   813D DD BE 05           cp (ix+5)           ; compare with window limit.
0771   8140 38 28              jr c,kilshr         ; off screen, kill shrapnel.
0772   8142             
0773   8142             ; Drop through.
0774   8142             ; Display shrapnel.
0775   8142             
0776   8142 DD 6E 03    plot   ld l,(ix+3)         ; x integer.
0777   8145 DD 66 05           ld h,(ix+5)         ; y integer.
0778   8148 22 3A 7D           ld (dispx),hl       ; workspace coordinates.
0779   814B DD 7E 00           ld a,(ix+0)         ; type.
0780   814E A7                 and a               ; is it a laser?
0781   814F 28 12              jr z,plot1          ; yes, draw laser instead.
0782   8151 7C          plot0  ld a,h              ; which pixel within byte do we
0783   8152 E6 07              and 7               ; want to set first?
0784   8154 16 00              ld d,0              ; no high byte.
0785   8156 5F                 ld e,a              ; copy to de.
0786   8157 21 01 82           ld hl,dots          ; table of small pixel positions.
0787   815A 19                 add hl,de           ; hl points to values we want to POKE to screen.
0788   815B 5E                 ld e,(hl)           ; get value.
0789   815C CD 53 8E           call scadd          ; screen address.
0790   815F 7E                 ld a,(hl)           ; see what's already there.
0791   8160 AB                 xor e               ; merge with pixels.
0792   8161 77                 ld (hl),a           ; put back on screen.
0793   8162 C9                 ret
0794   8163 CD 53 8E    plot1  call scadd          ; screen address.
0795   8166 7E                 ld a,(hl)           ; fetch byte there.
0796   8167 2F                 cpl                 ; toggle all bits.
0797   8168 77                 ld (hl),a           ; new byte.
0798   8169 C9                 ret
0799   816A             
0800   816A DD 36 00 80 kilshr ld (ix+0),128       ; switch off shrapnel.
0801   816E C9                 ret
0802   816F             
0803   816F             ;explc  defb 0              ; explosion counter.
0804   816F             
0805   816F             shrsin defw 0,1024,391,946,724,724,946,391
0805   816F 000000048701B203D402D402B2038701
0806   817F                    defw 1024,0,946,65144,724,64811,391,64589
0806   817F 00040000B20378FED4022BFD87014DFC
0807   818F                    defw 0,64512,65144,64589,64811,64811,64589,65144
0807   818F 000000FC78FE4DFC2BFD2BFD4DFC78FE
0808   819F                    defw 64512,0,64589,391,64811,724,65144,946
0808   819F 00FC00004DFC87012BFDD40278FEB203
0809   81AF             
0810   81AF DD 35 01    trail  dec (ix+1)          ; time remaining.
0811   81B2 CA D1 81           jp z,trailk         ; time to switch it off.
0812   81B5 CD 35 83           call qrand          ; get a random number.
0813   81B8 1F                 rra                 ; x or y axis?
0814   81B9 38 0B              jr c,trailv         ; use x.
0815   81BB 1F                 rra                 ; which direction?
0816   81BC 38 04              jr c,traill         ; go left.
0817   81BE DD 34 05           inc (ix+5)          ; go right.
0818   81C1 C9                 ret
0819   81C2 DD 35 05    traill dec (ix+5)          ; go left.
0820   81C5 C9                 ret
0821   81C6 1F          trailv rra                 ; which direction?
0822   81C7 38 04              jr c,trailu         ; go up.
0823   81C9 DD 34 03           inc (ix+3)          ; go down.
0824   81CC C9                 ret
0825   81CD DD 35 03    trailu dec (ix+3)          ; go up.
0826   81D0 C9                 ret
0827   81D1 DD 36 03 C8 trailk ld (ix+3),200       ; set off-screen to kill vapour trail.
0828   81D5 C9                 ret
0829   81D6             
0830   81D6 DD 7E 01    laser  ld a,(ix+1)         ; direction.
0831   81D9 1F                 rra                 ; left or right?
0832   81DA 30 04              jr nc,laserl        ; move left.
0833   81DC 06 08              ld b,8              ; distance to travel.
0834   81DE 18 02              jr laserm           ; move laser.
0835   81E0 06 F8       laserl ld b,248            ; distance to travel.
0836   81E2 DD 7E 05    laserm ld a,(ix+5)         ; y position.
0837   81E5 80                 add a,b             ; add distance.
0838   81E6 DD 77 05           ld (ix+5),a         ; set new y coordinate.
0839   81E9             
0840   81E9             ; Test new block.
0841   81E9             
0842   81E9 32 3B 7D           ld (dispy),a        ; set y for block collision detection purposes.
0843   81EC DD 7E 03           ld a,(ix+3)         ; get x.
0844   81EF 32 3A 7D           ld (dispx),a        ; set coordinate for collision test.
0845   81F2 CD 46 8B           call tstbl          ; get block type there.
0846   81F5 FE 02              cp WALL             ; is it solid?
0847   81F7 28 D8              jr z,trailk         ; yes, it cannot pass.
0848   81F9 FE 04              cp FODDER           ; is it fodder?
0849   81FB C0                 ret nz              ; no, ignore it.
0850   81FC CD 34 80           call fdchk          ; remove fodder block.
0851   81FF 18 D0              jr trailk           ; destroy laser.
0852   8201             
0853   8201             dots   defb 128,64,32,16,8,4,2,1
0853   8201 8040201008040201
0854   8209             
0855   8209             ; Plot, preserving de.
0856   8209             
0857   8209 D5          plotde push de             ; put de on stack.
0858   820A CD 42 81           call plot           ; plot pixel.
0859   820D D1                 pop de              ; restore de from stack.
0860   820E C9                 ret
0861   820F             
0862   820F             ; Shoot a laser.
0863   820F             
0864   820F 4F          shoot  ld c,a              ; store direction in c register.
0865   8210 DD 7E 08           ld a,(ix+8)         ; x coordinate.
0866   8213 C6 07       shoot1 add a,7             ; down 7 pixels.
0867   8215 6F                 ld l,a              ; puty x coordinate in l.
0868   8216 DD 66 09           ld h,(ix+9)         ; y coordinate in h.
0869   8219 DD E5              push ix             ; store pointer to sprite.
0870   821B CD DD 82           call fpslot         ; find particle slot.
0871   821E 30 2C              jr nc,vapou2        ; failed, restore ix.
0872   8220 DD 36 00 00        ld (ix+0),0         ; set up a laser.
0873   8224 DD 71 01           ld (ix+1),c         ; set the direction.
0874   8227 DD 75 03           ld (ix+3),l         ; set x coordinate.
0875   822A CB 19              rr c                ; check direction we want.
0876   822C 38 08              jr c,shootr         ; shoot right.
0877   822E 7C                 ld a,h              ; y position.
0878   822F             ;       dec a               ; left a pixel.
0879   822F E6 F8       shoot0 and 248             ; align on character boundary.
0880   8231 DD 77 05           ld (ix+5),a         ; set y coordinate.
0881   8234 18 2D              jr vapou0           ; draw first image.
0882   8236 7C          shootr ld a,h              ; y position.
0883   8237 C6 0F              add a,15            ; look right.
0884   8239 18 F4              jr shoot0           ; align and continue.
0885   823B             
0886   823B             ; Create a bit of vapour trail.
0887   823B             
0888   823B DD E5       vapour push ix             ; store pointer to sprite.
0889   823D DD 6E 08           ld l,(ix+8)         ; x coordinate.
0890   8240 DD 66 09           ld h,(ix+9)         ; y coordinate.
0891   8243 11 07 07    vapou3 ld de,7*256+7       ; mid-point of sprite.
0892   8246 19                 add hl,de           ; point to centre of sprite.
0893   8247 CD DD 82           call fpslot         ; find particle slot.
0894   824A 38 03              jr c,vapou1         ; no, we can use it.
0895   824C DD E1       vapou2 pop ix              ; restore sprite pointer.
0896   824E C9                 ret                 ; out of slots, can't generate anything.
0897   824F             
0898   824F DD 75 03    vapou1 ld (ix+3),l         ; set up x.
0899   8252 DD 74 05           ld (ix+5),h         ; set up y coordinate.
0900   8255 CD 35 83           call qrand          ; get quick random number.
0901   8258 E6 0F              and 15              ; random time.
0902   825A C6 0F              add a,15            ; minimum time on screen.
0903   825C DD 77 01           ld (ix+1),a         ; set time on screen.
0904   825F DD 36 00 01        ld (ix+0),1         ; define particle as vapour trail.
0905   8263 CD 20 81    vapou0 call chkxy          ; plot first position.
0906   8266 18 E4              jr vapou2
0907   8268             
0908   8268             ; Create a user particle.
0909   8268             
0910   8268 08          ptusr  ex af,af'           ; store timer.
0911   8269 DD 6E 08           ld l,(ix+8)         ; x coordinate.
0912   826C DD 66 09           ld h,(ix+9)         ; y coordinate.
0913   826F 11 07 07           ld de,7*256+7       ; mid-point of sprite.
0914   8272 19                 add hl,de           ; point to centre of sprite.
0915   8273 CD DD 82           call fpslot         ; find particle slot.
0916   8276 38 01              jr c,ptusr1         ; no, we can use it.
0917   8278 C9                 ret                 ; out of slots, can't generate anything.
0918   8279             
0919   8279 DD 75 03    ptusr1 ld (ix+3),l         ; set up x.
0920   827C DD 74 05           ld (ix+5),h         ; set up y coordinate.
0921   827F 08                 ex af,af'           ; restore timer.
0922   8280 DD 77 01           ld (ix+1),a         ; set time on screen.
0923   8283 DD 36 00 07        ld (ix+0),7         ; define particle as user particle.
0924   8287 C3 20 81           jp chkxy            ; plot first position.
0925   828A             
0926   828A             
0927   828A             ; Create a vertical or horizontal star.
0928   828A             
0929   828A DD E5       star   push ix             ; store pointer to sprite.
0930   828C CD DD 82           call fpslot         ; find particle slot.
0931   828F DA 95 82           jp c,star7          ; found one we can use.
0932   8292 DD E1       star0  pop ix              ; restore sprite pointer.
0933   8294 C9                 ret                 ; out of slots, can't generate anything.
0934   8295             
0935   8295 79          star7  ld a,c              ; direction.
0936   8296 E6 03              and 3               ; is it left?
0937   8298 28 21              jr z,star1          ; yes, it's horizontal.
0938   829A 3D                 dec a               ; is it right?
0939   829B 28 2C              jr z,star2          ; yes, it's horizontal.
0940   829D 3D                 dec a               ; is it up?
0941   829E 28 35              jr z,star3          ; yes, it's vertical.
0942   82A0             
0943   82A0 3A 10 7D           ld a,(wntopx)       ; get edge of screen.
0944   82A3 3C                 inc a               ; down one pixel.
0945   82A4 DD 77 03    star8  ld (ix+3),a         ; set x coord.
0946   82A7 CD 35 83           call qrand          ; get quick random number.
0947   82AA DD 77 05    star9  ld (ix+5),a         ; set y position.
0948   82AD 79                 ld a,c              ; direction.
0949   82AE E6 03              and 3               ; zero to three.
0950   82B0 C6 03              add a,3             ; 3 to 6 for starfield.
0951   82B2 DD 77 00           ld (ix+0),a         ; define particle as star.
0952   82B5 CD 20 81           call chkxy          ; plot first position.
0953   82B8 C3 92 82           jp star0
0954   82BB CD 35 83    star1  call qrand          ; get quick random number.
0955   82BE DD 77 03           ld (ix+3),a         ; set x coord.
0956   82C1 3A 13 7D           ld a,(wnrgtx)       ; get edge of screen.
0957   82C4 C6 0F              add a,15            ; add width of sprite minus 1.
0958   82C6 C3 AA 82           jp star9
0959   82C9 CD 35 83    star2  call qrand          ; get quick random number.
0960   82CC DD 77 03           ld (ix+3),a         ; set x coord.
0961   82CF 3A 11 7D           ld a,(wnlftx)       ; get edge of screen.
0962   82D2 C3 AA 82           jp star9
0963   82D5 3A 12 7D    star3  ld a,(wnbotx)       ; get edge of screen.
0964   82D8 C6 0F              add a,15            ; height of sprite minus one pixel.
0965   82DA C3 A4 82           jp star8
0966   82DD             
0967   82DD             
0968   82DD             ; Find particle slot for lasers or vapour trail.
0969   82DD             ; Can't use alternate accumulator.
0970   82DD             
0971   82DD DD 21 B6 F9 fpslot ld ix,SHRAPN        ; shrapnel table.
0972   82E1 11 06 00           ld de,SHRSIZ        ; size of each particle.
0973   82E4 06 37              ld b,NUMSHR         ; number of pieces in table.
0974   82E6 DD 7E 00    fpslt0 ld a,(ix+0)         ; get type.
0975   82E9 17                 rla                 ; is this slot in use?
0976   82EA D8                 ret c               ; no, we can use it.
0977   82EB DD 19              add ix,de           ; point to more shrapnel.
0978   82ED 10 F7              djnz fpslt0         ; repeat for all shrapnel.
0979   82EF C9                 ret                 ; out of slots, can't generate anything.
0980   82F0             
0981   82F0             ; Create an explosion at sprite position.
0982   82F0             
0983   82F0 4F          explod ld c,a              ; particles to create.
0984   82F1 DD E5              push ix             ; store pointer to sprite.
0985   82F3 DD 6E 08           ld l,(ix+8)         ; x coordinate.
0986   82F6 DD 66 09           ld h,(ix+9)         ; y coordinate.
0987   82F9 DD 21 B6 F9        ld ix,SHRAPN        ; shrapnel table.
0988   82FD 11 06 00           ld de,SHRSIZ        ; size of each particle.
0989   8300 06 37              ld b,NUMSHR         ; number of pieces in table.
0990   8302 DD 7E 00    expld0 ld a,(ix+0)         ; get type.
0991   8305 17                 rla                 ; is this slot in use?
0992   8306 38 07              jr c,expld1         ; no, we can use it.
0993   8308 DD 19       expld2 add ix,de           ; point to more shrapnel.
0994   830A 10 F6              djnz expld0         ; repeat for all shrapnel.
0995   830C DD E1       expld3 pop ix              ; restore sprite pointer.
0996   830E C9                 ret                 ; out of slots, can't generate any more.
0997   830F 79          expld1 ld a,c              ; shrapnel counter.
0998   8310 E6 0F              and 15              ; 0 to 15.
0999   8312 85                 add a,l             ; add to x.
1000   8313 DD 77 03           ld (ix+3),a         ; x coord.
1001   8316 3A 42 83           ld a,(seed3)        ; crap random number.
1002   8319 E6 0F              and 15              ; 0 to 15.
1003   831B 84                 add a,h             ; add to y.
1004   831C DD 77 05           ld (ix+5),a         ; y coord.
1005   831F DD 36 00 02        ld (ix+0),2         ; switch it on.
1006   8323 D9                 exx                 ; store coordinates.
1007   8324 CD 20 81           call chkxy          ; plot first position.
1008   8327 CD 35 83           call qrand          ; quick random angle.
1009   832A E6 3C              and 60              ; keep within range.
1010   832C DD 77 01           ld (ix+1),a         ; angle.
1011   832F D9                 exx                 ; restore coordinates.
1012   8330 0D                 dec c               ; one less piece of shrapnel to generate.
1013   8331 20 D5              jr nz,expld2        ; back to main explosion loop.
1014   8333 18 D7              jr expld3           ; restore sprite pointer and exit.
1015   8335 3A 42 83    qrand  ld a,(seed3)        ; random seed.
1016   8338 6F                 ld l,a              ; low byte.
1017   8339 26 00              ld h,0              ; no high byte.
1018   833B ED 5F              ld a,r              ; r register.
1019   833D AE                 xor (hl)            ; combine with seed.
1020   833E 32 42 83           ld (seed3),a        ; new seed.
1021   8341 C9                 ret
1022   8342 00          seed3  defb 0
1023   8343             
1024   8343             ; Display all shrapnel.
1025   8343             
1026   8343 21 09 82    dshrp  ld hl,plotde        ; display routine.
1027   8346 22 AF 80           ld (proshx+1),hl    ; modify routine.
1028   8349 CD A1 80           call proshr         ; process shrapnel.
1029   834C 21 B8 80           ld hl,prosh1        ; processing routine.
1030   834F 22 AF 80           ld (proshx+1),hl    ; modify the call.
1031   8352 C9                 ret
1032   8353             
1033   8353             ; Particle engine.
1034   8353             
1035   8353 21 B6 F9    inishr ld hl,SHRAPN        ; table.
1036   8356 06 37              ld b,NUMSHR         ; shrapnel pieces to process.
1037   8358 11 06 00           ld de,SHRSIZ        ; distance to next.
1038   835B 36 FF       inish0 ld (hl),255         ; kill the shrapnel.
1039   835D 19                 add hl,de           ; point there.
1040   835E 10 FB              djnz inish0         ; round again.
1041   8360 C9                 ret
1042   8361             
1043   8361             ; Check for collision between laser and sprite.
1044   8361             
1045   8361 21 B6 F9    lcol   ld hl,SHRAPN        ; shrapnel table.
1046   8364 11 06 00           ld de,SHRSIZ        ; size of each particle.
1047   8367 06 37              ld b,NUMSHR         ; number of pieces in table.
1048   8369 7E          lcol0  ld a,(hl)           ; get type.
1049   836A A7                 and a               ; is this slot a laser?
1050   836B 28 04              jr z,lcol1          ; yes, check collision.
1051   836D 19          lcol3  add hl,de           ; point to more shrapnel.
1052   836E 10 F9              djnz lcol0          ; repeat for all shrapnel.
1053   8370 C9                 ret                 ; no collision, carry not set.
1054   8371 E5          lcol1  push hl             ; store pointer to laser.
1055   8372 23                 inc hl              ; direction.
1056   8373 23                 inc hl              ; not used.
1057   8374 23                 inc hl              ; x position.
1058   8375 7E                 ld a,(hl)           ; get x.
1059   8376 DD 96 08           sub (ix+X)          ; subtract sprite x.
1060   8379 FE 10       lcolh  cp 16               ; within range?
1061   837B 30 0A              jr nc,lcol2         ; no, missed.
1062   837D 23                 inc hl              ; not used.
1063   837E 23                 inc hl              ; y position.
1064   837F 7E                 ld a,(hl)           ; get y.
1065   8380 DD 96 09           sub (ix+Y)          ; subtract sprite y.
1066   8383 FE 10              cp 16               ; within range?
1067   8385 38 03              jr c,lcol4          ; yes, collision occurred.
1068   8387 E1          lcol2  pop hl              ; restore laser pointer from stack.
1069   8388 18 E3              jr lcol3
1070   838A E1          lcol4  pop hl              ; restore laser pointer.
1071   838B C9                 ret                 ; return with carry set for collision.
1072   838C             
1073   838C             ; Main game engine code starts here.
1074   838C             
1075   838C             game   equ $
1076   838C             
1077   838C             ; Set up screen address table.
1078   838C             
1079   838C 21 00 40    setsat ld hl,16384         ; start of screen.
1080   838F 11 00 FB           ld de,SCADTB        ; screen address table.
1081   8392 06 00              ld b,0              ; vertical lines on screen.
1082   8394 EB          setsa0 ex de,hl            ; flip table and screen address.
1083   8395 72                 ld (hl),d           ; write high byte.
1084   8396 24                 inc h               ; second table.
1085   8397 73                 ld (hl),e           ; write low byte.
1086   8398 25                 dec h               ; back to first table.
1087   8399 2C                 inc l               ; next position in table.
1088   839A EB                 ex de,hl            ; flip table and screen address back again.
1089   839B CD 19 8F           call nline          ; next line down.
1090   839E 10 F4              djnz setsa0         ; repeat for all lines.
1091   83A0             
1092   83A0 CD 0F 80           call setpal         ; set up ULAplus palette.
1093   83A3 CD 53 83    rpblc2 call inishr         ; initialise particle engine.
1094   83A6 CD 23 A2    evintr call evnt12         ; call intro/menu event.
1095   83A9             
1096   83A9 21 00 FD           ld hl,MAP           ; block properties.
1097   83AC 11 01 FD           ld de,MAP+1         ; next byte.
1098   83AF 01 FF 02           ld bc,767           ; size of property map.
1099   83B2 36 02              ld (hl),WALL        ; write default property.
1100   83B4 ED B0              ldir
1101   83B6 CD 39 7F           call iniob          ; initialise objects.
1102   83B9 AF                 xor a               ; put zero in accumulator.
1103   83BA 32 39 7D           ld (gamwon),a       ; reset game won flag.
1104   83BD             
1105   83BD 21 BA 87           ld hl,score         ; score.
1106   83C0 CD DC 84           call inisc          ; init the score.
1107   83C3 3A 40 94    mapst  ld a,(stmap)        ; start position on map.
1108   83C6 32 A1 93           ld (roomtb),a       ; set up position in table, if there is one.
1109   83C9 CD D0 8F    inipbl call initsc         ; set up first screen.
1110   83CC DD 21 90 93        ld ix,ssprit        ; default to spare sprite in table.
1111   83D0 CD 24 A2    evini  call evnt13         ; initialisation.
1112   83D3             
1113   83D3             ; Two restarts.
1114   83D3             ; First restart - clear all sprites and initialise everything.
1115   83D3             
1116   83D3 CD AD 84    rstrt  call rsevt          ; restart events.
1117   83D6 CD 22 7F           call xspr           ; clear sprite table.
1118   83D9 CD 22 91           call sprlst         ; fetch pointer to screen sprites.
1119   83DC CD 6B 91           call ispr           ; initialise sprite table.
1120   83DF 18 0C              jr rstrt0
1121   83E1             
1122   83E1             ; Second restart - clear all but player, and don't initialise him.
1123   83E1             
1124   83E1 CD AD 84    rstrtn call rsevt          ; restart events.
1125   83E4 CD 39 91           call nspr           ; clear all non-player sprites.
1126   83E7 CD 22 91           call sprlst         ; fetch pointer to screen sprites.
1127   83EA CD 91 91           call kspr           ; initialise sprite table, no more players.
1128   83ED             
1129   83ED             
1130   83ED             ; Set up the player and/or enemy sprites.
1131   83ED             
1132   83ED AF          rstrt0 xor a               ; zero in accumulator.
1133   83EE 32 36 7D           ld (nexlev),a       ; reset next level flag.
1134   83F1 32 37 7D           ld (restfl),a       ; reset restart flag.
1135   83F4 32 38 7D           ld (deadf),a        ; reset dead flag.
1136   83F7 CD A8 89           call droom          ; show screen layout.
1137   83FA CD 53 83    rpblc0 call inishr         ; initialise particle engine.
1138   83FD CD 35 86           call shwob          ; draw objects.
1139   8400 DD 21 C4 92        ld ix,sprtab        ; address of sprite table, even sprites.
1140   8404 CD A3 8D           call dspr           ; display sprites.
1141   8407 DD 21 D5 92        ld ix,sprtab+TABSIZ ; address of first odd sprite.
1142   840B CD A3 8D           call dspr           ; display sprites.
1143   840E             
1144   840E CD 5B 7F    mloop  call vsync          ; synchronise with display.
1145   8411             
1146   8411 DD 21 C4 92        ld ix,sprtab        ; address of sprite table, even sprites.
1147   8415 CD A3 8D           call dspr           ; display even sprites.
1148   8418             
1149   8418 CD 32 85           call plsnd          ; play sounds.
1150   841B CD 5B 7F           call vsync          ; synchronise with display.
1151   841E DD 21 D5 92        ld ix,sprtab+TABSIZ ; address of first odd sprite.
1152   8422 CD A3 8D           call dspr           ; display odd sprites.
1153   8425 DD 21 90 93        ld ix,ssprit        ; point to spare sprite for spawning purposes.
1154   8429 CD FD A1    evlp1  call evnt10         ; called once per main loop.
1155   842C CD 5E 8D           call pspr           ; process sprites.
1156   842F             
1157   842F             ; Main loop events.
1158   842F             
1159   842F DD 21 90 93        ld ix,ssprit        ; point to spare sprite for spawning purposes.
1160   8433 CD 22 A2    evlp2  call evnt11         ; called once per main loop.
1161   8436             
1162   8436 CD 0F 8D    bsortx call bsort          ; sort sprites.
1163   8439 3A 36 7D           ld a,(nexlev)       ; finished level flag.
1164   843C A7                 and a               ; has it been set?
1165   843D 20 1D              jr nz,newlev        ; yes, go to next level.
1166   843F 3A 39 7D           ld a,(gamwon)       ; finished game flag.
1167   8442 A7                 and a               ; has it been set?
1168   8443 20 27              jr nz,evwon         ; yes, finish the game.
1169   8445 3A 37 7D           ld a,(restfl)       ; finished level flag.
1170   8448 3D                 dec a               ; has it been set?
1171   8449 28 88              jr z,rstrt          ; yes, go to next level.
1172   844B 3D                 dec a               ; has it been set?
1173   844C 28 93              jr z,rstrtn         ; yes, go to next level.
1174   844E             
1175   844E 3A 38 7D           ld a,(deadf)        ; dead flag.
1176   8451 A7                 and a               ; is it non-zero?
1177   8452 20 1E              jr nz,pdead         ; yes, player dead.
1178   8454             
1179   8454 21 0A 7D           ld hl,frmno         ; game frame.
1180   8457 34                 inc (hl)            ; advance the frame.
1181   8458             
1182   8458             ; Back to start of main loop.
1183   8458             
1184   8458 C3 0E 84    qoff   jp mloop            ; switched to a jp nz,mloop during test mode.
1185   845B C9                 ret
1186   845C 3A 14 7D    newlev ld a,(scno)         ; current screen.
1187   845F 21 CA B9           ld hl,numsc         ; total number of screens.
1188   8462 3C                 inc a               ; next screen.
1189   8463 BE                 cp (hl)             ; reached the limit?
1190   8464 30 06              jr nc,evwon         ; yes, game finished.
1191   8466 32 14 7D           ld (scno),a         ; set new level number.
1192   8469 C3 D3 83           jp rstrt            ; restart, clearing all aliens.
1193   846C CD 1F A3    evwon  call evnt18         ; game completed.
1194   846F C3 83 84           jp tidyup           ; tidy up and return to BASIC/calling routine.
1195   8472             
1196   8472             ; Player dead.
1197   8472             
1198   8472 AF          pdead  xor a               ; zeroise accumulator.
1199   8473 32 38 7D           ld (deadf),a        ; reset dead flag.
1200   8476 CD 1D A3    evdie  call evnt16         ; death subroutine.
1201   8479 3A 15 7D           ld a,(numlif)       ; number of lives.
1202   847C A7                 and a               ; reached zero yet?
1203   847D C2 D3 83           jp nz,rstrt         ; restart game.
1204   8480 CD 1E A3    evfail call evnt17         ; failure event.
1205   8483 21 C0 87    tidyup ld hl,hiscor        ; high score.
1206   8486 11 BA 87           ld de,score         ; player's score.
1207   8489 06 06              ld b,6              ; digits to check.
1208   848B 1A          tidyu2 ld a,(de)           ; get score digit.
1209   848C BE                 cp (hl)             ; are we larger than high score digit?
1210   848D 38 06              jr c,tidyu0         ; high score is bigger.
1211   848F 20 0C              jr nz,tidyu1        ; score is greater, record new high score.
1212   8491 23                 inc hl              ; next digit of high score.
1213   8492 13                 inc de              ; next digit of score.
1214   8493 10 F6              djnz tidyu2         ; repeat for all digits.
1215   8495 21 58 27    tidyu0 ld hl,10072         ; BASIC likes this in alternate hl.
1216   8498 D9                 exx                 ; flip hl into alternate registers.
1217   8499 01 BA 87           ld bc,score         ; return pointing to score.
1218   849C C9                 ret
1219   849D 21 BA 87    tidyu1 ld hl,score         ; score.
1220   84A0 11 C0 87           ld de,hiscor        ; high score.
1221   84A3 01 06 00           ld bc,6             ; digits to copy.
1222   84A6 ED B0              ldir                ; copy score to high score.
1223   84A8 CD 20 A3    evnewh call evnt19         ; new high score event.
1224   84AB 18 E8              jr tidyu0           ; tidy up.
1225   84AD             
1226   84AD             ; Restart event.
1227   84AD             
1228   84AD DD 21 90 93 rsevt  ld ix,ssprit        ; default to spare element in table.
1229   84B1 C3 2D A2    evrs   jp evnt14           ; call restart event.
1230   84B4             
1231   84B4             ; Copy number passed in a to string position bc, right-justified.
1232   84B4             
1233   84B4 6F          num2ch ld l,a              ; put accumulator in l.
1234   84B5 26 00              ld h,0              ; blank high byte of hl.
1235   84B7 3E 20              ld a,32             ; leading spaces.
1236   84B9 11 64 00           ld de,100           ; hundreds column.
1237   84BC CD CA 84           call numdg          ; show digit.
1238   84BF 11 0A 00           ld de,10            ; tens column.
1239   84C2 CD CA 84           call numdg          ; show digit.
1240   84C5 F6 10              or 16               ; last digit is always shown.
1241   84C7 11 01 00           ld de,1             ; units column.
1242   84CA E6 30       numdg  and 48              ; clear carry, clear digit.
1243   84CC ED 52       numdg1 sbc hl,de           ; subtract from column.
1244   84CE 38 05              jr c,numdg0         ; nothing to show.
1245   84D0 F6 10              or 16               ; something to show, make it a digit.
1246   84D2 3C                 inc a               ; increment digit.
1247   84D3 18 F7              jr numdg1           ; repeat until column is zero.
1248   84D5 19          numdg0 add hl,de           ; restore total.
1249   84D6 FE 20              cp 32               ; leading space?
1250   84D8 C8                 ret z               ; yes, don't write that.
1251   84D9 02                 ld (bc),a           ; write digit to buffer.
1252   84DA 03                 inc bc              ; next buffer position.
1253   84DB C9                 ret
1254   84DC             
1255   84DC 06 06       inisc  ld b,6              ; digits to initialise.
1256   84DE 36 30       inisc0 ld (hl),'0'         ; write zero digit.
1257   84E0 23                 inc hl              ; next column.
1258   84E1 10 FB              djnz inisc0         ; repeat for all digits.
1259   84E3 C9                 ret
1260   84E4             
1261   84E4             
1262   84E4             ; Multiply h by d and return in hl.
1263   84E4             
1264   84E4 5A          imul   ld e,d              ; HL = H * D
1265   84E5 4C                 ld c,h              ; make c first multiplier.
1266   84E6 21 00 00    imul0  ld hl,0             ; zeroise total.
1267   84E9 54                 ld d,h              ; zeroise high byte.
1268   84EA 06 08              ld b,8              ; repeat 8 times.
1269   84EC CB 19       imul1  rr c                ; rotate rightmost bit into carry.
1270   84EE 30 02              jr nc,imul2         ; wasn't set.
1271   84F0 19                 add hl,de           ; bit was set, so add de.
1272   84F1 A7                 and a               ; reset carry.
1273   84F2 CB 13       imul2  rl e                ; shift de 1 bit left.
1274   84F4 CB 12              rl d
1275   84F6 10 F4              djnz imul1          ; repeat 8 times.
1276   84F8 C9                 ret
1277   84F9             
1278   84F9             ; Divide d by e and return in d, remainder in a.
1279   84F9             
1280   84F9 AF          idiv   xor a
1281   84FA 06 08              ld b,8              ; bits to shift.
1282   84FC CB 22       idiv0  sla d               ; multiply d by 2.
1283   84FE 17                 rla                 ; shift carry into remainder.
1284   84FF BB                 cp e                ; test if e is smaller.
1285   8500 38 02              jr c,idiv1          ; e is greater, no division this time.
1286   8502 93                 sub e               ; subtract it.
1287   8503 14                 inc d               ; rotate into d.
1288   8504 10 F6       idiv1  djnz idiv0
1289   8506 C9                 ret
1290   8507             
1291   8507             ; Initialise a sound.
1292   8507             
1293   8507 ED 5B 2C 85 isnd   ld de,(ch1ptr)      ; first pointer.
1294   850B 1A                 ld a,(de)           ; get first byte.
1295   850C 3C                 inc a               ; reached the end?
1296   850D 28 11              jr z,isnd1          ; that'll do.
1297   850F ED 5B 2E 85        ld de,(ch2ptr)      ; second pointer.
1298   8513 1A                 ld a,(de)           ; get first byte.
1299   8514 3C                 inc a               ; reached the end?
1300   8515 28 0D              jr z,isnd2          ; that'll do.
1301   8517 ED 5B 30 85        ld de,(ch3ptr)      ; final pointer.
1302   851B 1A                 ld a,(de)           ; get first byte.
1303   851C 3C                 inc a               ; reached the end?
1304   851D 28 09              jr z,isnd3          ; that'll do.
1305   851F C9                 ret
1306   8520 22 2C 85    isnd1  ld (ch1ptr),hl      ; set up the sound.
1307   8523 C9                 ret
1308   8524 22 2E 85    isnd2  ld (ch2ptr),hl      ; set up the sound.
1309   8527 C9                 ret
1310   8528 22 30 85    isnd3  ld (ch3ptr),hl      ; set up the sound.
1311   852B C9                 ret
1312   852C             
1313   852C             
1314   852C 68 8E       ch1ptr defw spmask
1315   852E 68 8E       ch2ptr defw spmask
1316   8530 68 8E       ch3ptr defw spmask
1317   8532             
1318   8532 CD 0A 86    plsnd  call plsnd1         ; first channel.
1319   8535 CD 6A 85           call plsnd2         ; second one.
1320   8538 CD 95 85           call plsnd3         ; final channel.
1321   853B             
1322   853B             ; Write the contents of our AY buffer to the AY registers.
1323   853B             
1324   853B 21 53 85    w8912  ld hl,snddat        ; start of AY-3-8912 register data.
1325   853E 11 00 0E           ld de,14*256        ; start with register 0, 14 to write.
1326   8541 0E FD              ld c,253            ; low byte of port to write.
1327   8543 06 FF       w8912a ld b,255            ; port 65533=select soundchip register.
1328   8545 ED 59              out (c),e           ; tell chip which register we're writing.
1329   8547 7E                 ld a,(hl)           ; value to write.
1330   8548 06 BF              ld b,191            ; port 49149=write value to register.
1331   854A ED 79              out (c),a           ; this is what we're putting there.
1332   854C 1C                 inc e               ; next sound chip register.
1333   854D 23                 inc hl              ; next byte to write.
1334   854E 15                 dec d               ; decrement loop counter.
1335   854F C2 43 85           jp nz,w8912a        ; repeat until done.
1336   8552 C9                 ret
1337   8553             
1338   8553 00 00       snddat defw 0              ; tone registers, channel A.
1339   8555 00 00              defw 0              ; channel B tone registers.
1340   8557 00 00              defw 0              ; as above, channel C.
1341   8559 00          sndwnp defb 0              ; white noise period.
1342   855A 3C          sndmix defb 60             ; tone/noise mixer control.
1343   855B 00          sndv1  defb 0              ; channel A amplitude/envelope generator.
1344   855C 00          sndv2  defb 0              ; channel B amplitude/envelope.
1345   855D 00          sndv3  defb 0              ; channel C amplitude/envelope.
1346   855E 00 00              defw 0              ; duration of each note.
1347   8560 00                 defb 0
1348   8561             
1349   8561 23          plwn   inc hl              ; next byte of sound.
1350   8562 E6 38              and 56              ; check if we're bothering with white noise.
1351   8564 C0                 ret nz              ; we're not.
1352   8565 7E                 ld a,(hl)           ; fetch byte.
1353   8566 32 59 85           ld (sndwnp),a       ; set white noise period.
1354   8569 C9                 ret
1355   856A             
1356   856A             
1357   856A CD 00 86    plsnd2 call cksnd2         ; check sound for first channel.
1358   856D FE FF              cp 255              ; reached end?
1359   856F 28 70              jr z,silen2         ; silence this channel.
1360   8571 E6 0F              and 15              ; sound bits.
1361   8573 32 5C 85           ld (sndv2),a        ; set volume for channel.
1362   8576 3A 5A 85           ld a,(sndmix)       ; mixer byte.
1363   8579 E6 ED              and 237             ; remove bits for this channel.
1364   857B 47                 ld b,a              ; store in b register.
1365   857C CD C0 85           call plmix          ; fetch mixer details.
1366   857F E6 12              and 18              ; mixer bits we want.
1367   8581 B0                 or b                ; combine with mixer bits.
1368   8582 32 5A 85           ld (sndmix),a       ; new mixer value.
1369   8585 CD 61 85           call plwn           ; white noise check.
1370   8588 23                 inc hl              ; tone low.
1371   8589 5E                 ld e,(hl)           ; fetch value.
1372   858A 23                 inc hl              ; tone high.
1373   858B 56                 ld d,(hl)           ; fetch value.
1374   858C ED 53 55 85        ld (snddat+2),de    ; set tone.
1375   8590 23                 inc hl              ; next bit of sound.
1376   8591 22 2E 85           ld (ch2ptr),hl      ; set pointer.
1377   8594 C9                 ret
1378   8595             
1379   8595 CD 05 86    plsnd3 call cksnd3         ; check sound for first channel.
1380   8598 FE FF              cp 255              ; reached end?
1381   859A 28 52              jr z,silen3         ; silence last channel.
1382   859C E6 0F              and 15              ; sound bits.
1383   859E 32 5D 85           ld (sndv3),a        ; set volume for channel.
1384   85A1 3A 5A 85           ld a,(sndmix)       ; mixer byte.
1385   85A4 E6 DB              and 219             ; remove bits for this channel.
1386   85A6 47                 ld b,a              ; store in b register.
1387   85A7 CD C0 85           call plmix          ; fetch mixer details.
1388   85AA E6 24              and 36              ; mixer bits we want.
1389   85AC B0                 or b                ; combine with mixer bits.
1390   85AD 32 5A 85           ld (sndmix),a       ; new mixer value.
1391   85B0 CD 61 85           call plwn           ; white noise check.
1392   85B3 23                 inc hl              ; tone low.
1393   85B4 5E                 ld e,(hl)           ; fetch value.
1394   85B5 23                 inc hl              ; tone high.
1395   85B6 56                 ld d,(hl)           ; fetch value.
1396   85B7 ED 53 57 85        ld (snddat+4),de    ; set tone.
1397   85BB 23                 inc hl              ; next bit of sound.
1398   85BC 22 30 85           ld (ch3ptr),hl      ; set pointer.
1399   85BF C9                 ret
1400   85C0             
1401   85C0 7E          plmix  ld a,(hl)           ; fetch mixer byte.
1402   85C1 E6 C0              and 192             ; mix bits are d6 and d7.
1403   85C3 07                 rlca                ; rotate into d0 and d1.
1404   85C4 07                 rlca
1405   85C5 5F                 ld e,a              ; displacement in de.
1406   85C6 16 00              ld d,0
1407   85C8 E5                 push hl             ; store pointer on stack.
1408   85C9 21 D0 85           ld hl,mixtab        ; mixer table.
1409   85CC 19                 add hl,de           ; point to mixer byte.
1410   85CD 7E                 ld a,(hl)           ; fetch mixer value.
1411   85CE E1                 pop hl              ; restore pointer.
1412   85CF C9                 ret
1413   85D0 3F 38 07 00 mixtab defb 63,56,7,0      ; mixer byte settings.
1414   85D4             
1415   85D4 AF          silen1 xor a               ; zero.
1416   85D5 32 5B 85           ld (sndv1),a        ; sound off.
1417   85D8 3A 5A 85           ld a,(sndmix)       ; mixer byte.
1418   85DB F6 09              or 9                ; mix bits off.
1419   85DD 32 5A 85           ld (sndmix),a       ; mixer setting for channel.
1420   85E0 C9                 ret
1421   85E1 AF          silen2 xor a               ; zero.
1422   85E2 32 5C 85           ld (sndv2),a        ; sound off.
1423   85E5 3A 5A 85           ld a,(sndmix)       ; mixer byte.
1424   85E8 F6 12              or 18               ; mix bits off.
1425   85EA 32 5A 85           ld (sndmix),a       ; mixer setting for channel.
1426   85ED C9                 ret
1427   85EE AF          silen3 xor a               ; zero.
1428   85EF 32 5D 85           ld (sndv3),a        ; sound off.
1429   85F2 3A 5A 85           ld a,(sndmix)       ; mixer byte.
1430   85F5 F6 24              or 36               ; mix bits off.
1431   85F7 32 5A 85           ld (sndmix),a       ; mixer setting for channel.
1432   85FA C9                 ret
1433   85FB 2A 2C 85    cksnd1 ld hl,(ch1ptr)      ; pointer to sound.
1434   85FE 7E                 ld a,(hl)           ; fetch mixer/flag.
1435   85FF C9                 ret
1436   8600 2A 2E 85    cksnd2 ld hl,(ch2ptr)      ; pointer to sound.
1437   8603 7E                 ld a,(hl)           ; fetch mixer/flag.
1438   8604 C9                 ret
1439   8605 2A 30 85    cksnd3 ld hl,(ch3ptr)      ; pointer to sound.
1440   8608 7E                 ld a,(hl)           ; fetch mixer/flag.
1441   8609 C9                 ret
1442   860A             
1443   860A CD FB 85    plsnd1 call cksnd1         ; check sound for first channel.
1444   860D FE FF              cp 255              ; reached end?
1445   860F 28 C3              jr z,silen1         ; silence first channel.
1446   8611 E6 0F              and 15              ; sound bits.
1447   8613 32 5B 85           ld (sndv1),a        ; set volume for channel.
1448   8616 3A 5A 85           ld a,(sndmix)       ; mixer byte.
1449   8619 E6 F6              and 246             ; remove bits for this channel.
1450   861B 47                 ld b,a              ; store in b register.
1451   861C CD C0 85           call plmix          ; fetch mixer details.
1452   861F E6 09              and 9               ; mixer bits we want.
1453   8621 B0                 or b                ; combine with mixer bits.
1454   8622 32 5A 85           ld (sndmix),a       ; new mixer value.
1455   8625 CD 61 85           call plwn           ; white noise check.
1456   8628 23                 inc hl              ; tone low.
1457   8629 5E                 ld e,(hl)           ; fetch value.
1458   862A 23                 inc hl              ; tone high.
1459   862B 56                 ld d,(hl)           ; fetch value.
1460   862C ED 53 53 85        ld (snddat),de      ; set tone.
1461   8630 23                 inc hl              ; next bit of sound.
1462   8631 22 2C 85           ld (ch1ptr),hl      ; set pointer.
1463   8634 C9                 ret
1464   8635             
1465   8635             
1466   8635             ; Objects handling.
1467   8635             ; 32 bytes for image
1468   8635             ; 1 for colour
1469   8635             ; 3 for room, x and y
1470   8635             ; 3 for starting room, x and y.
1471   8635             ; 254 = disabled.
1472   8635             ; 255 = object in player's pockets.
1473   8635             
1474   8635             ; Show items present.
1475   8635             
1476   8635 21 FD B9    shwob  ld hl,objdta        ; objects table.
1477   8638 11 21 00           ld de,33            ; distance to room number.
1478   863B 19                 add hl,de           ; point to room data.
1479   863C 3A 0F 7D           ld a,(numob)        ; number of objects in the game.
1480   863F 47                 ld b,a              ; loop counter.
1481   8640 C5          shwob0 push bc             ; store count.
1482   8641 E5                 push hl             ; store item pointer.
1483   8642 3A 14 7D           ld a,(scno)         ; current location.
1484   8645 BE                 cp (hl)             ; same as an item?
1485   8646 CC 61 86           call z,dobjc        ; yes, display object in colour.
1486   8649 E1                 pop hl              ; restore pointer.
1487   864A C1                 pop bc              ; restore counter.
1488   864B 11 27 00           ld de,39            ; distance to next item.
1489   864E 19                 add hl,de           ; point to it.
1490   864F 10 EF              djnz shwob0         ; repeat for others.
1491   8651 C9                 ret
1492   8652             
1493   8652             ; Display object.
1494   8652             ; hl must point to object's room number.
1495   8652             
1496   8652 23          dobj   inc hl              ; point to x.
1497   8653 11 3A 7D    dobj0  ld de,dispx         ; coordinates.
1498   8656 ED A0              ldi                 ; transfer x coord.
1499   8658 ED A0              ldi                 ; transfer y too.
1500   865A 11 DC FF           ld de,65500         ; minus 36.
1501   865D 19                 add hl,de           ; point to image.
1502   865E C3 36 89    dobj1  jp sprite           ; draw this sprite.
1503   8661             
1504   8661 CD 52 86    dobjc  call dobj           ; display object.
1505   8664 4E                 ld c,(hl)           ; put ink in c register.
1506   8665             
1507   8665             ; Need to write attribute routine here.
1508   8665             ; set up colour in c register first.
1509   8665             
1510   8665 7E          cobj   ld a,(hl)           ; get colour byte.
1511   8666 A7                 and a               ; test it.
1512   8667 F8                 ret m               ; colour not set.
1513   8668 26 16              ld h,22             ; quarter of attrubte address.
1514   866A 3A 3A 7D           ld a,(dispx)        ; x coord.
1515   866D E6 F8              and 248             ; only want multiple of 8.
1516   866F 17                 rla                 ; multiply by 4.
1517   8670 CB 14              rl h
1518   8672 17                 rla
1519   8673 CB 14              rl h                ; high byte now set up.
1520   8675 6F                 ld l,a
1521   8676 3A 3B 7D           ld a,(dispy)        ; take y position.
1522   8679 1F                 rra                 ; divide it by 8.
1523   867A 1F                 rra
1524   867B 1F                 rra
1525   867C E6 1F              and 31              ; remove unwanted bits.
1526   867E 85                 add a,l             ; add to low byte.
1527   867F 6F                 ld l,a              ; low byte of address.
1528   8680                    
1529   8680 11 1E 00           ld de,30            ; distance to next line down.
1530   8683 3A 3A 7D           ld a,(dispx)        ; x coordinate.
1531   8686 06 03              ld b,3              ; default rows to write.
1532   8688 E6 07              and 7               ; does x straddle cells?
1533   868A 20 01              jr nz,cobj0         ; yes, loop counter is good.
1534   868C 05                 dec b               ; one less row to write.
1535   868D 7E          cobj0  ld a,(hl)           ; get attributes.
1536   868E E6 F8              and 248             ; remove ink.
1537   8690 B1                 or c                ; put in the new ink.
1538   8691 77                 ld (hl),a           ; write back again.
1539   8692 2C                 inc l               ; next cell.
1540   8693 7E                 ld a,(hl)           ; get attributes.
1541   8694 E6 F8              and 248             ; remove ink.
1542   8696 B1                 or c                ; put in the new ink.
1543   8697 77                 ld (hl),a           ; write back again.
1544   8698 2C                 inc l               ; next cell.
1545   8699 3A 3B 7D           ld a,(dispy)        ; y coordinate.
1546   869C E6 07              and 7               ; straddling cells?
1547   869E 28 05              jr z,cobj1          ; no, only 2 wide.
1548   86A0 7E                 ld a,(hl)           ; get attributes.
1549   86A1 E6 F8              and 248             ; remove ink.
1550   86A3 B1                 or c                ; put in the new ink.
1551   86A4 77                 ld (hl),a           ; write back again.
1552   86A5 19          cobj1  add hl,de           ; next row.
1553   86A6 10 E5              djnz cobj0
1554   86A8 C9                 ret
1555   86A9             
1556   86A9             ; Remove an object.
1557   86A9             
1558   86A9 21 0F 7D    remob  ld hl,numob         ; number of objects in game.
1559   86AC BE                 cp (hl)             ; are we checking past the end?
1560   86AD D0                 ret nc              ; yes, can't get non-existent item.
1561   86AE F5                 push af             ; remember object.
1562   86AF CD B9 86           call getob          ; pick it up if we haven't already got it.
1563   86B2 F1                 pop af              ; retrieve object number.
1564   86B3 CD E7 86           call gotob          ; get its address.
1565   86B6 36 FE              ld (hl),254         ; remove it.
1566   86B8 C9                 ret
1567   86B9             
1568   86B9             ; Pick up object number held in the accumulator.
1569   86B9             
1570   86B9 21 0F 7D    getob  ld hl,numob         ; number of objects in game.
1571   86BC BE                 cp (hl)             ; are we checking past the end?
1572   86BD D0                 ret nc              ; yes, can't get non-existent item.
1573   86BE CD E7 86           call gotob          ; check if we already have it.
1574   86C1 C8                 ret z               ; we already do.
1575   86C2 EB                 ex de,hl            ; object address in de.
1576   86C3 21 14 7D           ld hl,scno          ; current screen.
1577   86C6 BE                 cp (hl)             ; is it on this screen?
1578   86C7 EB                 ex de,hl            ; object address back in hl.
1579   86C8 20 1A              jr nz,getob0        ; not on screen, so nothing to delete.
1580   86CA 36 FF              ld (hl),255         ; pick it up.
1581   86CC 23                 inc hl              ; point to x coord.
1582   86CD 5E          getob1 ld e,(hl)           ; x coord.
1583   86CE 23                 inc hl              ; back to y coord.
1584   86CF 56                 ld d,(hl)           ; y coord.
1585   86D0 ED 53 3A 7D        ld (dispx),de       ; set display coords.
1586   86D4 11 DD FF           ld de,65501         ; minus graphic size.
1587   86D7 19                 add hl,de           ; point to graphics.
1588   86D8 CD 5E 86           call dobj1          ; delete object sprite.
1589   86DB 3A 8F A5           ld a,(bcol)         ; first block colour.
1590   86DE E6 07              and 7               ; only want ink attribute.
1591   86E0 4F                 ld c,a              ; set up colour.
1592   86E1 C3 65 86           jp cobj             ; colour object's old position.
1593   86E4 36 FF       getob0 ld (hl),255         ; pick it up.
1594   86E6 C9                 ret
1595   86E7             
1596   86E7             ; Got object check.
1597   86E7             ; Call with object in accumulator, returns zero set if in pockets.
1598   86E7             
1599   86E7 21 0F 7D    gotob  ld hl,numob         ; number of objects in game.
1600   86EA BE                 cp (hl)             ; are we checking past the end?
1601   86EB 30 06              jr nc,gotob0        ; yes, we can't have a non-existent object.
1602   86ED CD F7 86           call findob         ; find the object.
1603   86F0 FE FF       gotob1 cp 255              ; in pockets?
1604   86F2 C9                 ret
1605   86F3 3E FE       gotob0 ld a,254            ; missing.
1606   86F5 18 F9              jr gotob1
1607   86F7             
1608   86F7 21 FD B9    findob ld hl,objdta        ; objects.
1609   86FA 11 27 00           ld de,39            ; size of each object.
1610   86FD A7                 and a               ; is it zero?
1611   86FE 28 04              jr z,fndob1         ; yes, skip loop.
1612   8700 47                 ld b,a              ; loop counter in b.
1613   8701 19          fndob2 add hl,de           ; point to next one.
1614   8702 10 FD              djnz fndob2         ; repeat until we find address.
1615   8704 1E 21       fndob1 ld e,33             ; distance to room it's in.
1616   8706 19                 add hl,de           ; point to room.
1617   8707 7E                 ld a,(hl)           ; fetch status.
1618   8708 C9                 ret
1619   8709             
1620   8709             ; Drop object number at (dispx, dispy).
1621   8709             
1622   8709 21 0F 7D    drpob  ld hl,numob         ; number of objects in game.
1623   870C BE                 cp (hl)             ; are we checking past the end?
1624   870D D0                 ret nc              ; yes, can't drop non-existent item.
1625   870E CD E7 86           call gotob          ; make sure object is in inventory.
1626   8711 3A 14 7D           ld a,(scno)         ; screen number.
1627   8714 BE                 cp (hl)             ; already on this screen?
1628   8715 C8                 ret z               ; yes, nothing to do.
1629   8716 77                 ld (hl),a           ; bring onto screen.
1630   8717 23                 inc hl              ; point to x coord.
1631   8718 3A 3A 7D           ld a,(dispx)        ; sprite x coordinate.
1632   871B 77                 ld (hl),a           ; set x coord.
1633   871C 23                 inc hl              ; point to object y.
1634   871D 3A 3B 7D           ld a,(dispy)        ; sprite y coordinate.
1635   8720 77                 ld (hl),a           ; set the y position.
1636   8721 11 DD FF           ld de,65501         ; minus graphic size.
1637   8724 19                 add hl,de           ; point to graphics.
1638   8725 CD 5E 86           call dobj1          ; delete object sprite.
1639   8728 4E                 ld c,(hl)           ; put ink in c register.
1640   8729 C3 65 86           jp cobj             ; colour the object.
1641   872C             
1642   872C             ; Seek objects at sprite position.
1643   872C             
1644   872C 21 FD B9    skobj  ld hl,objdta        ; pointer to objects.
1645   872F 11 21 00           ld de,33            ; distance to room number.
1646   8732 19                 add hl,de           ; point to room data.
1647   8733 11 27 00           ld de,39            ; size of each object.
1648   8736 3A 0F 7D           ld a,(numob)        ; number of objects in game.
1649   8739 47                 ld b,a              ; set up the loop counter.
1650   873A 3A 14 7D    skobj0 ld a,(scno)         ; current room number.
1651   873D BE                 cp (hl)             ; is object in here?
1652   873E CC 47 87           call z,skobj1       ; yes, check coordinates.
1653   8741 19                 add hl,de           ; point to next object in table.
1654   8742 10 F6              djnz skobj0         ; repeat for all objects.
1655   8744 3E FF              ld a,255            ; end of list and nothing found, return 255.
1656   8746 C9                 ret
1657   8747 23          skobj1 inc hl              ; point to x coordinate.
1658   8748 7E                 ld a,(hl)           ; get coordinate.
1659   8749 DD 96 08           sub (ix+8)          ; subtract sprite x.
1660   874C C6 0F              add a,15            ; add sprite height minus one.
1661   874E FE 1F              cp 31               ; within range?
1662   8750 D2 66 87           jp nc,skobj2        ; no, ignore object.
1663   8753 23                 inc hl              ; point to y coordinate now.
1664   8754 7E                 ld a,(hl)           ; get coordinate.
1665   8755 DD 96 09           sub (ix+9)          ; subtract the sprite y.
1666   8758 C6 0F              add a,15            ; add sprite width minus one.
1667   875A FE 1F              cp 31               ; within range?
1668   875C D2 65 87           jp nc,skobj3        ; no, ignore object.
1669   875F D1                 pop de              ; remove return address from stack.
1670   8760 3A 0F 7D           ld a,(numob)        ; objects in game.
1671   8763 90                 sub b               ; subtract loop counter.
1672   8764 C9                 ret                 ; accumulator now points to object.
1673   8765 2B          skobj3 dec hl              ; back to y position.
1674   8766 2B          skobj2 dec hl              ; back to room.
1675   8767 C9                 ret
1676   8768             
1677   8768             
1678   8768             ; Spawn a new sprite.
1679   8768             
1680   8768 21 C4 92    spawn  ld hl,sprtab        ; sprite table.
1681   876B 3E 0C       numsp1 ld a,NUMSPR         ; number of sprites.
1682   876D 11 11 00           ld de,TABSIZ        ; size of each entry.
1683   8770 08          spaw0  ex af,af'           ; store loop counter.
1684   8771 7E                 ld a,(hl)           ; get sprite type.
1685   8772 3C                 inc a               ; is it an unused slot?
1686   8773 28 05              jr z,spaw1          ; yes, we can use this one.
1687   8775 19                 add hl,de           ; point to next sprite in table.
1688   8776 08                 ex af,af'           ; restore loop counter.
1689   8777 3D                 dec a               ; one less iteration.
1690   8778 20 F6              jr nz,spaw0         ; keep going until we find a slot.
1691   877A             
1692   877A             ; Didn't find one but drop through and set up a dummy sprite instead.
1693   877A             
1694   877A DD E5       spaw1  push ix             ; existing sprite address on stack.
1695   877C 22 B7 87           ld (spptr),hl       ; store spawned sprite address.
1696   877F 71                 ld (hl),c           ; set the type.
1697   8780 23                 inc hl              ; point to image.
1698   8781 70                 ld (hl),b           ; set the image.
1699   8782 23                 inc hl              ; next byte.
1700   8783 36 00              ld (hl),0           ; frame zero.
1701   8785 23                 inc hl              ; next byte.
1702   8786 DD 7E 08           ld a,(ix+X)         ; x coordinate.
1703   8789 77                 ld (hl),a           ; set sprite coordinate.
1704   878A 23                 inc hl              ; next byte.
1705   878B DD 7E 09           ld a,(ix+Y)         ; y coordinate.
1706   878E 77                 ld (hl),a           ; set sprite coordinate.
1707   878F 23                 inc hl              ; next byte.
1708   8790 EB                 ex de,hl            ; swap address into de.
1709   8791 2A B7 87           ld hl,(spptr)       ; restore address of details.
1710   8794 01 05 00           ld bc,5             ; number of bytes to duplicate.
1711   8797 ED B0              ldir                ; copy first version to new version.
1712   8799 EB                 ex de,hl            ; swap address into de.
1713   879A DD 7E 0A           ld a,(ix+10)        ; direction of original.
1714   879D 77                 ld (hl),a           ; set the direction.
1715   879E 23                 inc hl              ; next byte.
1716   879F 70                 ld (hl),b           ; reset parameter.
1717   87A0 23                 inc hl              ; next byte.
1718   87A1 70                 ld (hl),b           ; reset parameter.
1719   87A2 23                 inc hl              ; next byte.
1720   87A3 70                 ld (hl),b           ; reset parameter.
1721   87A4 23                 inc hl              ; next byte.
1722   87A5 70                 ld (hl),b           ; reset parameter.
1723   87A6 DD 2A B7 87 rtssp  ld ix,(spptr)       ; address of new sprite.
1724   87AA CD E2 A1    evis1  call evnt09         ; call sprite initialisation event.
1725   87AD DD 2A B7 87        ld ix,(spptr)       ; address of new sprite.
1726   87B1 CD 70 8E           call sspria         ; display the new sprite.
1727   87B4 DD E1              pop ix              ; address of original sprite.
1728   87B6 C9                 ret
1729   87B7             
1730   87B7 00 00       spptr  defw 0              ; spawned sprite pointer.
1731   87B9 00          seed   defb 0              ; seed for random numbers.
1732   87BA             score  defb '000000'       ; player's score.
1732   87BA 303030303030
1733   87C0             hiscor defb '000000'       ; high score.
1733   87C0 303030303030
1734   87C6             bonus  defb '000000'       ; bonus.
1734   87C6 303030303030
1735   87CC 00 3C       grbase defw 15360          ; graphics base address.
1736   87CE             
1737   87CE 7B          checkx ld a,e              ; x position.
1738   87CF FE 18              cp 24               ; off screen?
1739   87D1 D8                 ret c               ; no, it's okay.
1740   87D2 E1                 pop hl              ; remove return address from stack.
1741   87D3 C9                 ret
1742   87D4             
1743   87D4             ; Displays the current high score.
1744   87D4             
1745   87D4 21 C0 87    dhisc  ld hl,hiscor        ; high score text.
1746   87D7 18 03              jr dscor1           ; check in printable range then show 6 digits.
1747   87D9             
1748   87D9             ; Displays the current score.
1749   87D9             
1750   87D9 21 BA 87    dscor  ld hl,score         ; score text.
1751   87DC CD F2 8C    dscor1 call preprt         ; set up font and print position.
1752   87DF CD CE 87           call checkx         ; make sure we're in a printable range.
1753   87E2 06 06              ld b,6              ; digits to display.
1754   87E4 3A 5F 8C           ld a,(prtmod)       ; get print mode.
1755   87E7 A7                 and a               ; standard size text?
1756   87E8 C2 0E 88           jp nz,bscor0        ; no, show double-height.
1757   87EB C5          dscor0 push bc             ; place counter onto the stack.
1758   87EC E5                 push hl
1759   87ED 7E                 ld a,(hl)           ; fetch character.
1760   87EE CD CE 88           call pchar          ; display character.
1761   87F1 CD B6 88           call gaadd          ; get attribute address.
1762   87F4 3A 8D 5C           ld a,(23693)        ; current cell colours.
1763   87F7 77                 ld (hl),a           ; write to attribute cell.
1764   87F8 21 3B 7D           ld hl,dispy         ; y coordinate.
1765   87FB 34                 inc (hl)            ; move along one.
1766   87FC E1                 pop hl
1767   87FD 23                 inc hl              ; next score column.
1768   87FE C1                 pop bc              ; retrieve character counter.
1769   87FF 10 EA              djnz dscor0         ; repeat for all digits.
1770   8801 2A 3E 7D           ld hl,(blkptr)      ; blocks.
1771   8804 22 CC 87           ld (grbase),hl      ; set graphics base.
1772   8807 2A 3A 7D    dscor2 ld hl,(dispx)       ; general coordinates.
1773   880A 22 2F 7D           ld (charx),hl       ; set up display coordinates.
1774   880D C9                 ret
1775   880E             
1776   880E             ; Displays the current score in double-height characters.
1777   880E             
1778   880E C5          bscor0 push bc             ; place counter onto the stack.
1779   880F E5                 push hl
1780   8810 7E                 ld a,(hl)           ; fetch character.
1781   8811 CD 83 8C           call bchar          ; display big char.
1782   8814 E1                 pop hl
1783   8815 23                 inc hl              ; next score column.
1784   8816 C1                 pop bc              ; retrieve character counter.
1785   8817 10 F5              djnz bscor0         ; repeat for all digits.
1786   8819 C3 07 88           jp dscor2           ; tidy up line and column variables.
1787   881C             
1788   881C             ; Adds number in the hl pair to the score.
1789   881C             
1790   881C 11 BB 87    addsc  ld de,score+1       ; ten thousands column.
1791   881F 01 10 27           ld bc,10000         ; amount to add each time.
1792   8822 CD 3E 88           call incsc          ; add to score.
1793   8825 13                 inc de              ; thousands column.
1794   8826 01 E8 03           ld bc,1000          ; amount to add each time.
1795   8829 CD 3E 88           call incsc          ; add to score.
1796   882C 13                 inc de              ; hundreds column.
1797   882D 01 64 00           ld bc,100           ; amount to add each time.
1798   8830 CD 3E 88           call incsc          ; add to score.
1799   8833 13                 inc de              ; tens column.
1800   8834 01 0A 00           ld bc,10            ; amount to add each time.
1801   8837 CD 3E 88           call incsc          ; add to score.
1802   883A 13                 inc de              ; units column.
1803   883B 01 01 00           ld bc,1             ; units.
1804   883E E5          incsc  push hl             ; store amount to add.
1805   883F A7                 and a               ; clear the carry flag.
1806   8840 ED 42              sbc hl,bc           ; subtract from amount to add.
1807   8842 38 09              jr c,incsc0         ; too much, restore value.
1808   8844 F1                 pop af              ; delete the previous amount from the stack.
1809   8845 D5                 push de             ; store column position.
1810   8846 CD 4F 88           call incsc2         ; do the increment.
1811   8849 D1                 pop de              ; restore column.
1812   884A C3 3E 88           jp incsc            ; repeat until all added.
1813   884D E1          incsc0 pop hl              ; restore previous value.
1814   884E C9                 ret
1815   884F 1A          incsc2 ld a,(de)           ; get amount.
1816   8850 3C                 inc a               ; add one to column.
1817   8851 12                 ld (de),a           ; write new column total.
1818   8852 FE 3A              cp '9'+1            ; gone beyond range of digits?
1819   8854 D8                 ret c               ; no, carry on.
1820   8855 3E 30              ld a,'0'            ; mae it zero.
1821   8857 12                 ld (de),a           ; write new column total.
1822   8858 1B                 dec de              ; back one column.
1823   8859 18 F4              jr incsc2
1824   885B             
1825   885B             ; Add bonus to score.
1826   885B             
1827   885B 11 BF 87    addbo  ld de,score+5       ; last score digit.
1828   885E 21 CB 87           ld hl,bonus+5       ; last bonus digit.
1829   8861 A7                 and a               ; clear carry.
1830   8862 01 30 06           ld bc,6*256+48      ; 6 digits to add, ASCII '0' in c.
1831   8865 1A          addbo0 ld a,(de)           ; get score.
1832   8866 8E                 adc a,(hl)          ; add bonus.
1833   8867 91                 sub c               ; 0 to 18.
1834   8868 71                 ld (hl),c           ; zeroise bonus.
1835   8869 2B                 dec hl              ; next bonus.
1836   886A FE 3A              cp 58               ; carried?
1837   886C 38 02              jr c,addbo1         ; no, do next one.
1838   886E D6 0A              sub 10              ; subtract 10.
1839   8870 12          addbo1 ld (de),a           ; write new score.
1840   8871 1B                 dec de              ; next score digit.
1841   8872 3F                 ccf                 ; set carry for next digit.
1842   8873 10 F0              djnz addbo0         ; repeat for all 6 digits.
1843   8875 C9                 ret
1844   8876             
1845   8876             ; Swap score and bonus.
1846   8876             
1847   8876 11 BA 87    swpsb  ld de,score         ; first score digit.
1848   8879 21 C6 87           ld hl,bonus         ; first bonus digit.
1849   887C 06 06              ld b,6              ; digits to add.
1850   887E 1A          swpsb0 ld a,(de)           ; get score and bonus digits.
1851   887F 4E                 ld c,(hl)
1852   8880 EB                 ex de,hl            ; swap pointers.
1853   8881 71                 ld (hl),c           ; write bonus and score digits.
1854   8882 12                 ld (de),a
1855   8883 23                 inc hl              ; next score and bonus.
1856   8884 13                 inc de
1857   8885 10 F7              djnz swpsb0         ; repeat for all 6 digits.
1858   8887 C9                 ret
1859   8888             
1860   8888             ; Get print address.
1861   8888             
1862   8888 3A 3A 7D    gprad  ld a,(dispx)        ; returns scr. add. in de.
1863   888B 5F                 ld e,a              ; place in e for now.
1864   888C E6 18              and 24              ; which of 3 segments do we need?
1865   888E C6 40              add a,64            ; add 64 for start address of screen.
1866   8890 57                 ld d,a              ; that's our high byte.
1867   8891 7B                 ld a,e              ; restore x coordinate.
1868   8892 0F                 rrca                ; multiply by 32.
1869   8893 0F                 rrca
1870   8894 0F                 rrca
1871   8895 E6 E0              and 224             ; lines within segment.
1872   8897 5F                 ld e,a              ; set up low byte for x.
1873   8898 3A 3B 7D           ld a,(dispy)        ; now get y coordinate.
1874   889B 83                 add a,e             ; add to low byte.
1875   889C 5F                 ld e,a              ; final low byte.
1876   889D C9                 ret
1877   889E             
1878   889E             ; Get property buffer address of char at (dispx, dispy) in hl.
1879   889E             
1880   889E 3A 3A 7D    pradd  ld a,(dispx)        ; x coordinate.
1881   88A1 0F                 rrca                ; multiply by 32.
1882   88A2 0F                 rrca
1883   88A3 0F                 rrca
1884   88A4 6F                 ld l,a              ; store shift in l.
1885   88A5 E6 03              and 3               ; high byte bits.
1886   88A7 C6 FD              add a,253           ; 88 * 256 = 64768, start of properties map.
1887   88A9 67                 ld h,a              ; that's our high byte.
1888   88AA 7D                 ld a,l              ; restore shift result.
1889   88AB E6 E0              and 224             ; only want low bits.
1890   88AD 6F                 ld l,a              ; put into low byte.
1891   88AE 3A 3B 7D           ld a,(dispy)        ; fetch y coordinate.
1892   88B1 E6 1F              and 31              ; should be in range 0 - 31.
1893   88B3 85                 add a,l             ; add to low byte.
1894   88B4 6F                 ld l,a              ; new low byte.
1895   88B5 C9                 ret
1896   88B6             
1897   88B6             ; Get attribute address of char at (dispx, dispy) in hl.
1898   88B6             
1899   88B6 3A 3A 7D    gaadd  ld a,(dispx)        ; x coordinate.
1900   88B9 0F                 rrca                ; multiply by 32.
1901   88BA 0F                 rrca
1902   88BB 0F                 rrca
1903   88BC 6F                 ld l,a              ; store shift in l.
1904   88BD E6 03              and 3               ; high byte bits.
1905   88BF C6 58              add a,88            ; 88 * 256 = 22528, start of screen attributes.
1906   88C1 67                 ld h,a              ; that's our high byte.
1907   88C2 7D                 ld a,l              ; restore shift result.
1908   88C3 E6 E0              and 224             ; only want low bits.
1909   88C5 6F                 ld l,a              ; put into low byte.
1910   88C6 3A 3B 7D           ld a,(dispy)        ; fetch y coordinate.
1911   88C9 E6 1F              and 31              ; should be in range 0 - 31.
1912   88CB 85                 add a,l             ; add to low byte.
1913   88CC 6F                 ld l,a              ; new low byte.
1914   88CD C9                 ret
1915   88CE             
1916   88CE 07          pchar  rlca                ; multiply char by 8.
1917   88CF 07                 rlca
1918   88D0 07                 rlca
1919   88D1 5F                 ld e,a              ; store shift in e.
1920   88D2 E6 07              and 7               ; only want high byte bits.
1921   88D4 57                 ld d,a              ; store in d.
1922   88D5 7B                 ld a,e              ; restore shifted value.
1923   88D6 E6 F8              and 248             ; only want low byte bits.
1924   88D8 5F                 ld e,a              ; that's the low byte.
1925   88D9 2A CC 87           ld hl,(grbase)      ; address of graphics.
1926   88DC 19                 add hl,de           ; add displacement.
1927   88DD CD 88 88    pchark call gprad          ; get screen address.
1928   88E0             ;       ldi                 ; transfer byte.
1929   88E0             ;       dec de              ; back again.
1930   88E0             ;       inc d               ; next screen row down.
1931   88E0             ;       ldi                 ; transfer byte.
1932   88E0             ;       dec de              ; back again.
1933   88E0             ;       inc d               ; next screen row down.
1934   88E0             ;       ldi                 ; transfer byte.
1935   88E0             ;       dec de              ; back again.
1936   88E0             ;       inc d               ; next screen row down.
1937   88E0             ;       ldi                 ; transfer byte.
1938   88E0             ;       dec de              ; back again.
1939   88E0             ;       inc d               ; next screen row down.
1940   88E0             ;       ldi                 ; transfer byte.
1941   88E0             ;       dec de              ; back again.
1942   88E0             ;       inc d               ; next screen row down.
1943   88E0             ;       ldi                 ; transfer byte.
1944   88E0             ;       dec de              ; back again.
1945   88E0             ;       inc d               ; next screen row down.
1946   88E0             ;       ldi                 ; transfer byte.
1947   88E0             ;       dec de              ; back again.
1948   88E0             ;       inc d               ; next screen row down.
1949   88E0             ;       ldi                 ; transfer byte.
1950   88E0 7E                 ld a,(hl)           ; get image byte.
1951   88E1 12                 ld (de),a           ; copy to screen.
1952   88E2 23                 inc hl              ; next image byte.
1953   88E3 14                 inc d               ; next screen row down.
1954   88E4 7E                 ld a,(hl)           ; get image byte.
1955   88E5 12                 ld (de),a           ; copy to screen.
1956   88E6 23                 inc hl              ; next image byte.
1957   88E7 14                 inc d               ; next screen row down.
1958   88E8 7E                 ld a,(hl)           ; get image byte.
1959   88E9 12                 ld (de),a           ; copy to screen.
1960   88EA 23                 inc hl              ; next image byte.
1961   88EB 14                 inc d               ; next screen row down.
1962   88EC 7E                 ld a,(hl)           ; get image byte.
1963   88ED 12                 ld (de),a           ; copy to screen.
1964   88EE 23                 inc hl              ; next image byte.
1965   88EF 14                 inc d               ; next screen row down.
1966   88F0 7E                 ld a,(hl)           ; get image byte.
1967   88F1 12                 ld (de),a           ; copy to screen.
1968   88F2 23                 inc hl              ; next image byte.
1969   88F3 14                 inc d               ; next screen row down.
1970   88F4 7E                 ld a,(hl)           ; get image byte.
1971   88F5 12                 ld (de),a           ; copy to screen.
1972   88F6 23                 inc hl              ; next image byte.
1973   88F7 14                 inc d               ; next screen row down.
1974   88F8 7E                 ld a,(hl)           ; get image byte.
1975   88F9 12                 ld (de),a           ; copy to screen.
1976   88FA 23                 inc hl              ; next image byte.
1977   88FB 14                 inc d               ; next screen row down.
1978   88FC 7E                 ld a,(hl)           ; get image byte.
1979   88FD 12                 ld (de),a           ; copy to screen.
1980   88FE C9                 ret
1981   88FF             
1982   88FF             ; Print attributes, properties and pixels.
1983   88FF             
1984   88FF 47          pattr  ld b,a              ; store cell in b register for now.
1985   8900 5F                 ld e,a              ; displacement in e.
1986   8901 16 00              ld d,0              ; no high byte.
1987   8903 2A 42 7D           ld hl,(proptr)      ; pointer to properties.
1988   8906 19                 add hl,de           ; property cell address.
1989   8907 4E                 ld c,(hl)           ; fetch byte.
1990   8908 CD 9E 88           call pradd          ; get property buffer address.
1991   890B 71                 ld (hl),c           ; write property.
1992   890C 78                 ld a,b              ; restore cell.
1993   890D             
1994   890D             ; Print attributes, no properties.
1995   890D             
1996   890D 5F          panp   ld e,a              ; displacement in e.
1997   890E 16 00              ld d,0              ; no high byte.
1998   8910 2A 40 7D           ld hl,(colptr)      ; pointer to colours.
1999   8913 19                 add hl,de           ; colour cell address.
2000   8914 4E                 ld c,(hl)           ; fetch byte.
2001   8915 CD B6 88           call gaadd          ; get attribute address.
2002   8918 71                 ld (hl),c           ; write colour.
2003   8919 78                 ld a,b              ; restore cell.
2004   891A             
2005   891A             ; Print character pixels, no more.
2006   891A             
2007   891A CD CE 88    pchr   call pchar          ; show character in accumulator.
2008   891D 21 3B 7D           ld hl,dispy         ; y coordinate.
2009   8920 34                 inc (hl)            ; move along one.
2010   8921 C9                 ret
2011   8922             
2012   8922             ; Shifter sprite routine for objects.
2013   8922             
2014   8922 EE 07       sprit7 xor 7
2015   8924 3C                 inc a
2016   8925 CB 15       sprit3 rl l                ; shift into position.
2017   8927 CB 11              rl c
2018   8929 CB 14              rl h
2019   892B 3D                 dec a               ; one less iteration.
2020   892C C2 25 89           jp nz,sprit3
2021   892F 7D                 ld a,l
2022   8930 69                 ld l,c
2023   8931 4C                 ld c,h
2024   8932 67                 ld h,a
2025   8933 C3 5E 89           jp sprit0           ; now apply to screen.
2026   8936             
2027   8936 E5          sprite push hl             ; store sprite graphic address.
2028   8937 CD 53 8E           call scadd          ; get screen address in hl.
2029   893A EB                 ex de,hl            ; switch to de.
2030   893B E1                 pop hl              ; restore graphic address.
2031   893C 3A 3B 7D           ld a,(dispy)        ; y position.
2032   893F E6 07              and 7               ; position straddling cells.
2033   8941 47                 ld b,a              ; store in b register.
2034   8942 3E 10              ld a,16             ; pixel height.
2035   8944 08          sprit1 ex af,af'
2036   8945 4E                 ld c,(hl)           ; fetch first byte.
2037   8946 23                 inc hl              ; next byte.
2038   8947 E5                 push hl             ; store source address.
2039   8948 6E                 ld l,(hl)
2040   8949 26 00              ld h,0
2041   894B 78                 ld a,b              ; position straddling cells.
2042   894C A7                 and a               ; is it zero?
2043   894D 28 0F              jr z,sprit0         ; yes, apply to screen.
2044   894F FE 05              cp 5
2045   8951 30 CF              jr nc,sprit7
2046   8953 A7                 and a               ; clear carry.
2047   8954 CB 19       sprit2 rr c
2048   8956 CB 1D              rr l
2049   8958 CB 1C              rr h
2050   895A 3D                 dec a
2051   895B C2 54 89           jp nz,sprit2
2052   895E 1A          sprit0 ld a,(de)           ; fetch screen image.
2053   895F A9                 xor c               ; merge with graphic.
2054   8960 12                 ld (de),a           ; write to screen.
2055   8961 1C                 inc e               ; next screen byte.
2056   8962 1A                 ld a,(de)           ; fetch screen image.
2057   8963 AD                 xor l               ; combine with graphic.
2058   8964 12                 ld (de),a           ; write to screen.
2059   8965 13                 inc de              ; next screen address.
2060   8966 1A                 ld a,(de)           ; fetch screen image.
2061   8967 AC                 xor h               ; combine with graphic.
2062   8968 12                 ld (de),a           ; write to screen.
2063   8969 1B                 dec de              ; left to middle byte.
2064   896A 1D                 dec e               ; back to start byte.
2065   896B 14                 inc d               ; increment line number.
2066   896C 7A                 ld a,d              ; segment address.
2067   896D E6 07              and 7               ; reached end of segment?
2068   896F C2 7D 89           jp nz,sprit6        ; no, just do next line within cell.
2069   8972 7B                 ld a,e              ; low byte.
2070   8973 C6 20              add a,32            ; look down.
2071   8975 5F                 ld e,a              ; new address.
2072   8976 DA 7D 89           jp c,sprit6         ; done.
2073   8979 7A                 ld a,d              ; high byte.
2074   897A D6 08              sub 8               ; start of segment.
2075   897C 57                 ld d,a              ; new high byte.
2076   897D E1          sprit6 pop hl              ; restore source address.
2077   897E 23                 inc hl              ; next source byte.
2078   897F 08                 ex af,af'
2079   8980 3D                 dec a
2080   8981 C2 44 89           jp nz,sprit1
2081   8984 C9                 ret
2082   8985             
2083   8985             ; Get room address.
2084   8985             
2085   8985 3A 14 7D    groom  ld a,(scno)         ; screen number.
2086   8988 11 00 00    groomx ld de,0             ; start at zero.
2087   898B 2A 44 7D           ld hl,(scrptr)      ; pointer to screens.
2088   898E A7                 and a               ; is it the first one?
2089   898F 28 0A       groom1 jr z,groom0         ; no more screens to skip.
2090   8991 4E                 ld c,(hl)           ; low byte of screen size.
2091   8992 23                 inc hl              ; point to high byte.
2092   8993 46                 ld b,(hl)           ; high byte of screen size.
2093   8994 23                 inc hl              ; next address.
2094   8995 EB                 ex de,hl            ; put total in hl, pointer in de.
2095   8996 09                 add hl,bc           ; skip a screen.
2096   8997 EB                 ex de,hl            ; put total in de, pointer in hl.
2097   8998 3D                 dec a               ; one less iteration.
2098   8999 18 F4              jr groom1           ; loop until we reach the end.
2099   899B 2A 44 7D    groom0 ld hl,(scrptr)      ; pointer to screens.
2100   899E 19                 add hl,de           ; add displacement.
2101   899F 3A CA B9           ld a,(numsc)        ; number of screens.
2102   89A2 16 00              ld d,0              ; zeroise high byte.
2103   89A4 5F                 ld e,a              ; displacement in de.
2104   89A5 19                 add hl,de           ; add double displacement to address.
2105   89A6 19                 add hl,de
2106   89A7 C9                 ret
2107   89A8             
2108   89A8             ; Draw present room.
2109   89A8             
2110   89A8 3A 0B 7D    droom  ld a,(wintop)       ; window top.
2111   89AB 32 3A 7D           ld (dispx),a        ; set x coordinate.
2112   89AE 2A 3E 7D    droom2 ld hl,(blkptr)      ; blocks.
2113   89B1 22 CC 87           ld (grbase),hl      ; set graphics base.
2114   89B4 CD 85 89           call groom          ; get address of current room.
2115   89B7 AF                 xor a               ; zero in accumulator.
2116   89B8 32 FC 89           ld (comcnt),a       ; reset compression counter.
2117   89BB 3A 0D 7D           ld a,(winhgt)       ; height of window.
2118   89BE F5          droom0 push af             ; store row counter.
2119   89BF 3A 0C 7D           ld a,(winlft)       ; window left edge.
2120   89C2 32 3B 7D           ld (dispy),a        ; set cursor position.
2121   89C5 3A 0E 7D           ld a,(winwid)       ; width of window.
2122   89C8 F5          droom1 push af             ; store column counter.
2123   89C9 CD E1 89           call flbyt          ; decompress next byte on the fly.
2124   89CC E5                 push hl             ; store address of cell.
2125   89CD CD FF 88           call pattr          ; show attributes and block.
2126   89D0 E1                 pop hl              ; restore cell address.
2127   89D1 F1                 pop af              ; restore loop counter.
2128   89D2 3D                 dec a               ; one less column.
2129   89D3 20 F3              jr nz,droom1        ; repeat for entire line.
2130   89D5 3A 3A 7D           ld a,(dispx)        ; x coord.
2131   89D8 3C                 inc a               ; move down one line.
2132   89D9 32 3A 7D           ld (dispx),a        ; set new position.
2133   89DC F1                 pop af              ; restore row counter.
2134   89DD 3D                 dec a               ; one less row.
2135   89DE 20 DE              jr nz,droom0        ; repeat for all rows.
2136   89E0 C9                 ret
2137   89E1             
2138   89E1             ; Decompress bytes on-the-fly.
2139   89E1             
2140   89E1 3A FC 89    flbyt  ld a,(comcnt)       ; compression counter.
2141   89E4 A7                 and a               ; any more to decompress?
2142   89E5 20 0C              jr nz,flbyt1        ; yes.
2143   89E7 7E                 ld a,(hl)           ; fetch next byte.
2144   89E8 23                 inc hl              ; point to next cell.
2145   89E9 FE FF              cp 255              ; is this byte a control code?
2146   89EB C0                 ret nz              ; no, this byte is uncompressed.
2147   89EC 7E                 ld a,(hl)           ; fetch byte type.
2148   89ED 32 FB 89           ld (combyt),a       ; set up the type.
2149   89F0 23                 inc hl              ; point to quantity.
2150   89F1 7E                 ld a,(hl)           ; get quantity.
2151   89F2 23                 inc hl              ; point to next byte.
2152   89F3 3D          flbyt1 dec a               ; one less.
2153   89F4 32 FC 89           ld (comcnt),a       ; store new quantity.
2154   89F7 3A FB 89           ld a,(combyt)       ; byte to expand.
2155   89FA C9                 ret
2156   89FB             
2157   89FB             
2158   89FB 00          combyt defb 0              ; byte type compressed.
2159   89FC 00          comcnt defb 0              ; compression counter.
2160   89FD             
2161   89FD             ; Ladder down check.
2162   89FD             
2163   89FD DD 7E 08    laddd  ld a,(ix+8)         ; x coordinate.
2164   8A00 E6 FE              and 254             ; make it even.
2165   8A02 DD 77 08           ld (ix+8),a         ; reset it.
2166   8A05 DD 66 09           ld h,(ix+9)         ; y coordinate.
2167   8A08 C6 10       numsp5 add a,16            ; look down 16 pixels.
2168   8A0A 6F                 ld l,a              ; coords in hl.
2169   8A0B 18 0E              jr laddv
2170   8A0D             
2171   8A0D             ; Ladder up check.
2172   8A0D             
2173   8A0D DD 7E 08    laddu  ld a,(ix+8)         ; x coordinate.
2174   8A10 E6 FE              and 254             ; make it even.
2175   8A12 DD 77 08           ld (ix+8),a         ; reset it.
2176   8A15 DD 66 09           ld h,(ix+9)         ; y coordinate.
2177   8A18 C6 0E       numsp6 add a,14            ; look 2 pixels above feet.
2178   8A1A 6F                 ld l,a              ; coords in hl.
2179   8A1B 22 3A 7D    laddv  ld (dispx),hl       ; set up test coordinates.
2180   8A1E CD 46 8B           call tstbl          ; get map address.
2181   8A21 CD D2 8A           call ldchk          ; standard ladder check.
2182   8A24 C0                 ret nz              ; no way through.
2183   8A25 23                 inc hl              ; look right one cell.
2184   8A26 CD D2 8A           call ldchk          ; do the check.
2185   8A29 C0                 ret nz              ; impassable.
2186   8A2A 3A 3B 7D           ld a,(dispy)        ; y coordinate.
2187   8A2D E6 07              and 7               ; position straddling block cells.
2188   8A2F C8                 ret z               ; no more checks needed.
2189   8A30 23                 inc hl              ; look to third cell.
2190   8A31 CD D2 8A           call ldchk          ; do the check.
2191   8A34 C9                 ret                 ; return with zero flag set accordingly.
2192   8A35             
2193   8A35             ; Can go up check.
2194   8A35             
2195   8A35 DD 7E 08    cangu  ld a,(ix+8)         ; x coordinate.
2196   8A38 DD 66 09           ld h,(ix+9)         ; y coordinate.
2197   8A3B D6 02              sub 2               ; look up 2 pixels.
2198   8A3D 6F                 ld l,a              ; coords in hl.
2199   8A3E 22 3A 7D           ld (dispx),hl       ; set up test coordinates.
2200   8A41 CD 46 8B           call tstbl          ; get map address.
2201   8A44 CD A8 8A           call lrchk          ; standard left/right check.
2202   8A47 C0                 ret nz              ; no way through.
2203   8A48 23                 inc hl              ; look right one cell.
2204   8A49 CD A8 8A           call lrchk          ; do the check.
2205   8A4C C0                 ret nz              ; impassable.
2206   8A4D 3A 3B 7D           ld a,(dispy)        ; y coordinate.
2207   8A50 E6 07              and 7               ; position straddling block cells.
2208   8A52 C8                 ret z               ; no more checks needed.
2209   8A53 23                 inc hl              ; look to third cell.
2210   8A54 CD A8 8A           call lrchk          ; do the check.
2211   8A57 C9                 ret                 ; return with zero flag set accordingly.
2212   8A58             
2213   8A58             ; Can go down check.
2214   8A58             
2215   8A58 DD 7E 08    cangd  ld a,(ix+8)         ; x coordinate.
2216   8A5B DD 66 09           ld h,(ix+9)         ; y coordinate.
2217   8A5E C6 10       numsp3 add a,16            ; look down 16 pixels.
2218   8A60 6F                 ld l,a              ; coords in hl.
2219   8A61 22 3A 7D           ld (dispx),hl       ; set up test coordinates.
2220   8A64 CD 46 8B           call tstbl          ; get map address.
2221   8A67 CD B6 8A           call plchk          ; block, platform check.
2222   8A6A C0                 ret nz              ; no way through.
2223   8A6B 23                 inc hl              ; look right one cell.
2224   8A6C CD B6 8A           call plchk          ; block, platform check.
2225   8A6F C0                 ret nz              ; impassable.
2226   8A70 3A 3B 7D           ld a,(dispy)        ; y coordinate.
2227   8A73 E6 07              and 7               ; position straddling block cells.
2228   8A75 C8                 ret z               ; no more checks needed.
2229   8A76 23                 inc hl              ; look to third cell.
2230   8A77 CD B6 8A           call plchk          ; block, platform check.
2231   8A7A C9                 ret                 ; return with zero flag set accordingly.
2232   8A7B             
2233   8A7B             ; Can go left check.
2234   8A7B             
2235   8A7B DD 6E 08    cangl  ld l,(ix+8)         ; x coordinate.
2236   8A7E DD 7E 09           ld a,(ix+9)         ; y coordinate.
2237   8A81 D6 02              sub 2               ; look left 2 pixels.
2238   8A83 67                 ld h,a              ; coords in hl.
2239   8A84 18 09              jr cangh            ; test if we can go there.
2240   8A86             
2241   8A86             ; Can go right check.
2242   8A86             
2243   8A86 DD 6E 08    cangr  ld l,(ix+8)         ; x coordinate.
2244   8A89 DD 7E 09           ld a,(ix+9)         ; y coordinate.
2245   8A8C C6 10              add a,16            ; look right 16 pixels.
2246   8A8E 67                 ld h,a              ; coords in hl.
2247   8A8F             
2248   8A8F 22 3A 7D    cangh  ld (dispx),hl       ; set up test coordinates.
2249   8A92 06 03       cangh2 ld b,3              ; default rows to write.
2250   8A94 7D                 ld a,l              ; x position.
2251   8A95 E6 07              and 7               ; does x straddle cells?
2252   8A97 20 01              jr nz,cangh0        ; yes, loop counter is good.
2253   8A99 05                 dec b               ; one less row to write.
2254   8A9A CD 46 8B    cangh0 call tstbl          ; get map address.
2255   8A9D 11 20 00           ld de,32            ; distance to next cell.
2256   8AA0 CD A8 8A    cangh1 call lrchk          ; standard left/right check.
2257   8AA3 C0                 ret nz              ; no way through.
2258   8AA4 19                 add hl,de           ; look down.
2259   8AA5 10 F9              djnz cangh1
2260   8AA7 C9                 ret
2261   8AA8             
2262   8AA8             ; Check left/right movement is okay.
2263   8AA8             
2264   8AA8 7E          lrchk  ld a,(hl)           ; fetch map cell.
2265   8AA9 FE 02              cp WALL             ; is it passable?
2266   8AAB 28 06              jr z,lrchkx         ; no.
2267   8AAD FE 04              cp FODDER           ; fodder has to be dug.
2268   8AAF 28 02              jr z,lrchkx         ; not passable.
2269   8AB1 AF          always xor a               ; report it as okay.
2270   8AB2 C9                 ret
2271   8AB3 AF          lrchkx xor a               ; reset all bits.
2272   8AB4 3C                 inc a
2273   8AB5 C9                 ret
2274   8AB6             
2275   8AB6             ; Check platform or solid item is not in way.
2276   8AB6             
2277   8AB6 7E          plchk  ld a,(hl)           ; fetch map cell.
2278   8AB7 FE 02              cp WALL             ; is it passable?
2279   8AB9 28 F8              jr z,lrchkx         ; no.
2280   8ABB FE 04              cp FODDER           ; fodder has to be dug.
2281   8ABD 28 F4              jr z,lrchkx         ; not passable.
2282   8ABF FE 01              cp PLATFM           ; platform is solid.
2283   8AC1 28 06              jr z,plchkx         ; not passable.
2284   8AC3 FE 03              cp LADDER           ; is it a ladder?
2285   8AC5 28 EC              jr z,lrchkx         ; on ladder, deny movement.
2286   8AC7 AF          plchk0 xor a               ; report it as okay.
2287   8AC8 C9                 ret
2288   8AC9 3A 3A 7D    plchkx ld a,(dispx)        ; x coordinate.
2289   8ACC E6 07              and 7               ; position straddling blocks.
2290   8ACE 28 E3              jr z,lrchkx         ; on platform, deny movement.
2291   8AD0 18 F5              jr plchk0
2292   8AD2             
2293   8AD2             ; Check ladder is available.
2294   8AD2             
2295   8AD2 7E          ldchk  ld a,(hl)           ; fetch cell.
2296   8AD3 FE 03              cp LADDER           ; is it a ladder?
2297   8AD5 C9                 ret                 ; return with zero flag set accordingly.
2298   8AD6             
2299   8AD6             ; Get collectables.
2300   8AD6             
2301   8AD6 06 07       getcol ld b,COLECT         ; collectable blocks.
2302   8AD8 CD FE 8A           call tded           ; test for collectable blocks.
2303   8ADB B8                 cp b                ; did we find one?
2304   8ADC C0                 ret nz              ; none were found, job done.
2305   8ADD CD E5 8A           call gtblk          ; get block.
agdcode.asm(2306): error: Label not found: evnt20
2306   8AE0 CD 00 00           call evnt20         ; collected block event.
2307   8AE3 18 F1              jr getcol           ; repeat until none left.
2308   8AE5             
2309   8AE5             ; Get collectable block.
2310   8AE5             
2311   8AE5 36 00       gtblk  ld (hl),0           ; make it empty now.
2312   8AE7 11 00 FD           ld de,MAP           ; map address.
2313   8AEA A7                 and a               ; clear carry.
2314   8AEB ED 52              sbc hl,de           ; find cell number.
2315   8AED 7D                 ld a,l              ; get low byte of cell number.
2316   8AEE E6 1F              and 31              ; 0 - 31 is column.
2317   8AF0 57                 ld d,a              ; store y in d register.
2318   8AF1 29                 add hl,hl           ; multiply by 8.
2319   8AF2 29                 add hl,hl
2320   8AF3 29                 add hl,hl           ; x is now in h.
2321   8AF4 5C                 ld e,h              ; put x in e.
2322   8AF5 ED 53 3A 7D        ld (dispx),de       ; set display coordinates.
2323   8AF9 AF                 xor a               ; block zero.
2324   8AFA CD 1A 89           call pchr           ; display block on screen.
2325   8AFD C9                 ret
2326   8AFE             
2327   8AFE             ; Touched deadly block check.
2328   8AFE             ; Returns with DEADLY (must be non-zero) in accumulator if true.
2329   8AFE             
2330   8AFE DD 6E 08    tded   ld l,(ix+8)         ; x coordinate.
2331   8B01 DD 66 09           ld h,(ix+9)         ; y coordinate.
2332   8B04 22 3A 7D           ld (dispx),hl       ; set up test coordinates.
2333   8B07 CD 46 8B           call tstbl          ; get map address.
2334   8B0A 11 1F 00           ld de,31            ; default distance to next line down.
2335   8B0D B8                 cp b                ; is this the required block?
2336   8B0E C8                 ret z               ; yes.
2337   8B0F 23                 inc hl              ; next cell.
2338   8B10 7E                 ld a,(hl)           ; fetch type.
2339   8B11 B8                 cp b                ; is this deadly/custom?
2340   8B12 C8                 ret z               ; yes.
2341   8B13 3A 3B 7D           ld a,(dispy)        ; horizontal position.
2342   8B16 4F                 ld c,a              ; store column in c register.
2343   8B17 E6 07              and 7               ; is it straddling cells?
2344   8B19 28 05              jr z,tded0          ; no.
2345   8B1B 23                 inc hl              ; last cell.
2346   8B1C 7E                 ld a,(hl)           ; fetch type.
2347   8B1D B8                 cp b                ; is this the block?
2348   8B1E C8                 ret z               ; yes.
2349   8B1F 1B                 dec de              ; one less cell to next row down.
2350   8B20 19          tded0  add hl,de           ; point to next row.
2351   8B21 7E                 ld a,(hl)           ; fetch left cell block.
2352   8B22 B8                 cp b                ; is this fatal?
2353   8B23 C8                 ret z               ; yes.
2354   8B24 23                 inc hl              ; next cell.
2355   8B25 7E                 ld a,(hl)           ; fetch type.
2356   8B26 B8                 cp b                ; is this fatal?
2357   8B27 C8                 ret z               ; yes.
2358   8B28 79                 ld a,c              ; horizontal position.
2359   8B29 E6 07              and 7               ; is it straddling cells?
2360   8B2B 28 04              jr z,tded1          ; no.
2361   8B2D 23                 inc hl              ; last cell.
2362   8B2E 7E                 ld a,(hl)           ; fetch type.
2363   8B2F B8                 cp b                ; is this fatal?
2364   8B30 C8                 ret z               ; yes.
2365   8B31 3A 3A 7D    tded1  ld a,(dispx)        ; vertical position.
2366   8B34 E6 07              and 7               ; is it straddling cells?
2367   8B36 C8                 ret z               ; no, job done.
2368   8B37 19                 add hl,de           ; point to next row.
2369   8B38 7E                 ld a,(hl)           ; fetch left cell block.
2370   8B39 B8                 cp b                ; is this fatal?
2371   8B3A C8                 ret z               ; yes.
2372   8B3B 23                 inc hl              ; next cell.
2373   8B3C 7E                 ld a,(hl)           ; fetch type.
2374   8B3D B8                 cp b                ; is this fatal?
2375   8B3E C8                 ret z               ; yes.
2376   8B3F 79                 ld a,c              ; horizontal position.
2377   8B40 E6 07              and 7               ; is it straddling cells?
2378   8B42 C8                 ret z               ; no.
2379   8B43 23                 inc hl              ; last cell.
2380   8B44 7E                 ld a,(hl)           ; fetch final type.
2381   8B45 C9                 ret                 ; return with final type in accumulator.
2382   8B46             
2383   8B46             
2384   8B46             ; Fetch block type at (dispx, dispy).
2385   8B46             
2386   8B46 3A 3A 7D    tstbl  ld a,(dispx)        ; fetch x coord.
2387   8B49 07                 rlca                ; divide by 8,
2388   8B4A 07                 rlca                ; and multiply by 32.
2389   8B4B 57                 ld d,a              ; store in d.
2390   8B4C E6 E0              and 224             ; mask off high bits.
2391   8B4E 5F                 ld e,a              ; low byte.
2392   8B4F 7A                 ld a,d              ; restore shift result.
2393   8B50 E6 03              and 3               ; high bits.
2394   8B52 57                 ld d,a              ; got displacement in de.
2395   8B53 3A 3B 7D           ld a,(dispy)        ; y coord.
2396   8B56 1F                 rra                 ; divide by 8.
2397   8B57 1F                 rra
2398   8B58 1F                 rra
2399   8B59 E6 1F              and 31              ; only want 0 - 31.
2400   8B5B 83                 add a,e             ; add to displacement.
2401   8B5C 5F                 ld e,a              ; displacement in de.
2402   8B5D 21 00 FD           ld hl,MAP           ; position of dummy screen.
2403   8B60 19                 add hl,de           ; point to address.
2404   8B61 7E                 ld a,(hl)           ; fetch byte there.
2405   8B62 C9                 ret
2406   8B63             
2407   8B63             ; Jump - if we can.
2408   8B63             ; Requires initial speed to be set up in accumulator prior to call.
2409   8B63             
2410   8B63 ED 44       jump   neg                 ; switch sign so we jump up.
2411   8B65 4F                 ld c,a              ; store in c register.
2412   8B66             ;       ld a,(ix+8)         ; x coordinate.
2413   8B66             ;       ld h,(ix+9)         ; y coordinate.
2414   8B66             ;numsp4 add a,16            ; look down 16 pixels.
2415   8B66             ;       ld l,a              ; coords in hl.
2416   8B66             ;       and 7               ; are we on platform boundary?
2417   8B66             ;       ret nz              ; no, cannot jump.
2418   8B66             ;       ld (dispx),hl       ; set up test coordinates.
2419   8B66             ;       ld b,a              ; copy to b register.
2420   8B66             ;       call tstbl          ; get map address.
2421   8B66             ;       call plchk          ; block, platform check.
2422   8B66             ;       jr nz,jump0         ; it's solid, we can jump.
2423   8B66             ;       inc hl              ; look right one cell.
2424   8B66             ;       call plchk          ; block, platform check.
2425   8B66             ;       jr nz,jump0         ; it's solid, we can jump.
2426   8B66             ;       ld a,b              ; y coordinate.
2427   8B66             ;       and 7               ; position straddling block cells.
2428   8B66             ;       ret z               ; no more checks needed.
2429   8B66             ;       inc hl              ; look to third cell.
2430   8B66             ;       call plchk          ; block, platform check.
2431   8B66             ;       ret z               ; not solid, don't jump.
2432   8B66 DD 7E 0D    jump0  ld a,(ix+13)        ; jumping flag.
2433   8B69 A7                 and a               ; is it set?
2434   8B6A C0                 ret nz              ; already in the air.
2435   8B6B DD 34 0D           inc (ix+13)         ; set it.
2436   8B6E DD 71 0E           ld (ix+14),c        ; set jump height.
2437   8B71 C9                 ret
2438   8B72             
2439   8B72 DD 7E 0D    hop    ld a,(ix+13)        ; jumping flag.
2440   8B75 A7                 and a               ; is it set?
2441   8B76 C0                 ret nz              ; already in the air.
2442   8B77 DD 36 0D FF        ld (ix+13),255      ; set it.
2443   8B7B DD 36 0E 00        ld (ix+14),0        ; set jump table displacement.
2444   8B7F C9                 ret
2445   8B80             
2446   8B80             ; Random numbers code.
2447   8B80             ; Pseudo-random number generator, 8-bit.
2448   8B80             
2449   8B80 21 B9 87    random ld hl,seed          ; set up seed pointer.
2450   8B83 7E                 ld a,(hl)           ; get last random number.
2451   8B84 47                 ld b,a              ; copy to b register.
2452   8B85 0F                 rrca                ; multiply by 32.
2453   8B86 0F                 rrca
2454   8B87 0F                 rrca
2455   8B88 EE 1F              xor 31
2456   8B8A 80                 add a,b
2457   8B8B DE FF              sbc a,255
2458   8B8D 77                 ld (hl),a           ; store new seed.
2459   8B8E 32 32 7D           ld (varrnd),a       ; return number in variable.
2460   8B91 C9                 ret
2461   8B92             
2462   8B92             
2463   8B92             ; Keyboard test routine.
2464   8B92             
2465   8B92 4F          ktest  ld c,a              ; key to test in c.
2466   8B93 E6 07              and 7               ; mask bits d0-d2 for row.
2467   8B95 3C                 inc a               ; in range 1-8.
2468   8B96 47                 ld b,a              ; place in b.
2469   8B97 CB 39              srl c               ; divide c by 8
2470   8B99 CB 39              srl c               ; to find position within row.
2471   8B9B CB 39              srl c
2472   8B9D 3E 05              ld a,5              ; only 5 keys per row.
2473   8B9F 91                 sub c               ; subtract position.
2474   8BA0 4F                 ld c,a              ; put in c.
2475   8BA1 3E FE              ld a,254            ; high byte of port to read.
2476   8BA3 0F          ktest0 rrca                ; rotate into position.
2477   8BA4 10 FD              djnz ktest0         ; repeat until we've found relevant row.
2478   8BA6 DB FE              in a,(254)          ; read port (a=high, 254=low).
2479   8BA8 1F          ktest1 rra                 ; rotate bit out of result.
2480   8BA9 0D                 dec c               ; loop counter.
2481   8BAA C2 A8 8B           jp nz,ktest1        ; repeat until bit for position in carry.
2482   8BAD C9                 ret
2483   8BAE             
2484   8BAE             
2485   8BAE             ; Joystick and keyboard reading routines.
2486   8BAE             
2487   8BAE 3A 2E 7D    joykey ld a,(contrl)       ; control flag.
2488   8BB1 3D                 dec a               ; is it the keyboard?
2489   8BB2 28 18              jr z,joyjoy         ; no, it's Kempston joystick.
2490   8BB4 3D                 dec a               ; Sinclair?
2491   8BB5 28 34              jr z,joysin         ; read Sinclair joystick.
2492   8BB7             
2493   8BB7             ; Keyboard controls.
2494   8BB7             
2495   8BB7 21 72 C2           ld hl,keys+6        ; address of last key.
2496   8BBA 1E 00              ld e,0              ; zero reading.
2497   8BBC 16 07              ld d,7              ; keys to read.
2498   8BBE 7E          joyke0 ld a,(hl)           ; get key from table.
2499   8BBF CD 92 8B           call ktest          ; being pressed?
2500   8BC2 3F                 ccf                 ; complement the carry.
2501   8BC3 CB 13              rl e                ; rotate into reading.
2502   8BC5 2B                 dec hl              ; next key.
2503   8BC6 15                 dec d               ; one less to do.
2504   8BC7 C2 BE 8B           jp nz,joyke0        ; repeat for all keys.
2505   8BCA 18 1A              jr joyjo1           ; store the value.
2506   8BCC             
2507   8BCC             ; Kempston joystick controls.
2508   8BCC             
2509   8BCC 01 1F 00    joyjoy ld bc,31            ; port for Kempston interface.
2510   8BCF ED 78              in a,(c)            ; read it.
2511   8BD1 5F          joyjo3 ld e,a              ; copy to e register.
2512   8BD2 3A 71 C2           ld a,(keys+5)       ; key six.
2513   8BD5 CD 92 8B           call ktest          ; being pressed?
2514   8BD8 38 02              jr c,joyjo0         ; not pressed.
2515   8BDA CB EB              set 5,e             ; set bit d5.
2516   8BDC 3A 72 C2    joyjo0 ld a,(keys+6)       ; key seven.
2517   8BDF CD 92 8B           call ktest          ; being pressed?
2518   8BE2 38 02              jr c,joyjo1         ; not pressed.
2519   8BE4 CB F3              set 6,e             ; set bit d6.
2520   8BE6 7B          joyjo1 ld a,e              ; copy e register to accumulator.
2521   8BE7 32 09 7D    joyjo2 ld (joyval),a       ; remember value.
2522   8BEA C9                 ret
2523   8BEB             
2524   8BEB             ; Sinclair joystick controls.
2525   8BEB             
2526   8BEB 01 FE EF    joysin ld bc,61438         ; port for Sinclair 2.
2527   8BEE ED 78              in a,(c)            ; read joystick.
2528   8BF0 57                 ld d,a              ; clear values.
2529   8BF1 AF                 xor a               ; clear accumulator.
2530   8BF2 1E 10              ld e,16             ; Kempston fire bit value.
2531   8BF4 CB 42              bit 0,d             ; fire bit pressed?
2532   8BF6 CC 17 8C           call z,joysi0       ; add bit.
2533   8BF9 1E 01              ld e,1              ; Kempston bit value.
2534   8BFB CB 5A              bit 3,d             ; fire bit pressed?
2535   8BFD CC 17 8C           call z,joysi0       ; add bit.
2536   8C00 1E 02              ld e,2              ; Kempston bit value.
2537   8C02 CB 62              bit 4,d             ; fire bit pressed?
2538   8C04 CC 17 8C           call z,joysi0       ; add bit.
2539   8C07 1E 08              ld e,8              ; Kempston bit value.
2540   8C09 CB 4A              bit 1,d             ; fire bit pressed?
2541   8C0B CC 17 8C           call z,joysi0       ; add bit.
2542   8C0E 1E 04              ld e,4              ; Kempston bit value.
2543   8C10 CB 52              bit 2,d             ; fire bit pressed?
2544   8C12 CC 17 8C           call z,joysi0       ; add bit.
2545   8C15 18 BA              jr joyjo3           ; read last 2 keys a la Kempston.
2546   8C17             
2547   8C17 83          joysi0 add a,e             ; add bit value.
2548   8C18 C9                 ret
2549   8C19             
2550   8C19             ; Display message.
2551   8C19             
2552   8C19             ;dmsg   ld hl,nummsg        ; total messages.
2553   8C19             ;       cp (hl)             ; does this one exist?
2554   8C19             ;       ret nc              ; no, nothing to display.
2555   8C19 21 22 A3    dmsg   ld hl,msgdat        ; pointer to messages.
2556   8C1C CD 03 8D           call getwrd         ; get message number.
2557   8C1F CD F2 8C    dmsg3  call preprt         ; pre-printing stuff.
2558   8C22 CD CE 87           call checkx         ; make sure we're in a printable range.
2559   8C25 3A 5F 8C           ld a,(prtmod)       ; print mode.
2560   8C28 A7                 and a               ; standard size?
2561   8C29 C2 60 8C           jp nz,bmsg1         ; no, double-height text.
2562   8C2C E5          dmsg0  push hl             ; store string pointer.
2563   8C2D 7E                 ld a,(hl)           ; fetch byte to display.
2564   8C2E E6 7F              and 127             ; remove any end marker.
2565   8C30 FE 0D              cp 13               ; newline character?
2566   8C32 28 1B              jr z,dmsg1
2567   8C34 CD CE 88           call pchar          ; display character.
2568   8C37 CD B6 88           call gaadd          ; get attribute address.
2569   8C3A 3A 8D 5C           ld a,(23693)        ; current cell colours.
2570   8C3D 77                 ld (hl),a           ; write to attribute cell.
2571   8C3E CD E0 8C           call nexpos         ; display position.
2572   8C41 20 03              jr nz,dmsg2         ; not on a new line.
2573   8C43 CD EA 8C           call nexlin         ; next line down.
2574   8C46 E1          dmsg2  pop hl
2575   8C47 7E                 ld a,(hl)           ; fetch last character.
2576   8C48 17                 rla                 ; was it the end?
2577   8C49 DA 07 88           jp c,dscor2         ; yes, job done.
2578   8C4C 23                 inc hl              ; next character to display.
2579   8C4D 18 DD              jr dmsg0
2580   8C4F 21 3A 7D    dmsg1  ld hl,dispx         ; x coordinate.
2581   8C52 34                 inc (hl)            ; newline.
2582   8C53 7E                 ld a,(hl)           ; fetch position.
2583   8C54 FE 18              cp 24               ; past screen edge?
2584   8C56 38 02              jr c,dmsg4          ; no, it's okay.
2585   8C58 36 00              ld (hl),0           ; restart at top.
2586   8C5A 23          dmsg4  inc hl              ; y coordinate.
2587   8C5B 36 00              ld (hl),0           ; carriage return.
2588   8C5D 18 E7              jr dmsg2
2589   8C5F 00          prtmod defb 0              ; print mode, 0 = standard, 1 = double-height.
2590   8C60             
2591   8C60             ; Display message in big text.
2592   8C60             
2593   8C60 7E          bmsg1  ld a,(hl)           ; get character to display.
2594   8C61 E5                 push hl             ; store pointer to message.
2595   8C62 E6 7F              and 127             ; only want 7 bits.
2596   8C64 FE 0D              cp 13               ; newline character?
2597   8C66 28 0A              jr z,bmsg2
2598   8C68 CD 83 8C           call bchar          ; display big char.
2599   8C6B E1          bmsg3  pop hl              ; retrieve message pointer.
2600   8C6C 7E                 ld a,(hl)           ; look at last character.
2601   8C6D 23                 inc hl              ; next character in list.
2602   8C6E 17                 rla                 ; was terminator flag set?
2603   8C6F 30 EF              jr nc,bmsg1         ; no, keep going.
2604   8C71 C9                 ret
2605   8C72 21 2F 7D    bmsg2  ld hl,charx         ; x coordinate.
2606   8C75 34                 inc (hl)            ; newline.
2607   8C76 34                 inc (hl)            ; newline.
2608   8C77 7E                 ld a,(hl)           ; fetch position.
2609   8C78 FE 17              cp 23               ; past screen edge?
2610   8C7A 38 EF              jr c,bmsg3          ; no, it's okay.
2611   8C7C 36 00              ld (hl),0           ; restart at top.
2612   8C7E 23                 inc hl              ; y coordinate.
2613   8C7F 36 00              ld (hl),0           ; carriage return.
2614   8C81 18 E8              jr bmsg3
2615   8C83             
2616   8C83             
2617   8C83             ; Big character display.
2618   8C83             
2619   8C83 07          bchar  rlca                ; multiply char by 8.
2620   8C84 07                 rlca
2621   8C85 07                 rlca
2622   8C86 5F                 ld e,a              ; store shift in e.
2623   8C87 E6 07              and 7               ; only want high byte bits.
2624   8C89 57                 ld d,a              ; store in d.
2625   8C8A 7B                 ld a,e              ; restore shifted value.
2626   8C8B E6 F8              and 248             ; only want low byte bits.
2627   8C8D 5F                 ld e,a              ; that's the low byte.
2628   8C8E 2A 36 5C           ld hl,(23606)       ; address of font.
2629   8C91 19                 add hl,de           ; add displacement.
2630   8C92 CD 88 88           call gprad          ; get screen address.
2631   8C95 EB                 ex de,hl            ; font in de, screen address in hl.
2632   8C96 06 08              ld b,8              ; height of character in font.
2633   8C98 1A          bchar0 ld a,(de)           ; get a bit of the font.
2634   8C99 13                 inc de              ; next line of font.
2635   8C9A 77                 ld (hl),a           ; write to screen.
2636   8C9B 24                 inc h               ; down a line.
2637   8C9C 77                 ld (hl),a           ; write to screen.
2638   8C9D CD 19 8F           call nline          ; next line down.
2639   8CA0 10 F6              djnz bchar0         ; repeat.
2640   8CA2 CD B6 88           call gaadd          ; get attribute address.
2641   8CA5 3A 8D 5C           ld a,(23693)        ; current colour.
2642   8CA8 77                 ld (hl),a           ; set attribute.
2643   8CA9 4F                 ld c,a              ; copy colour to c.
2644   8CAA 11 20 00           ld de,32            ; distance to next line.
2645   8CAD 19                 add hl,de           ; point to second cell.
2646   8CAE 7C                 ld a,h              ; high byte of address.
2647   8CAF FE 5B              cp 91               ; past edge of screen?
2648   8CB1 30 01              jr nc,bchar1        ; yes, don't write to printer buffer/sysvars.
2649   8CB3 71                 ld (hl),c           ; set second cell's attributes.
2650   8CB4 CD E0 8C    bchar1 call nexpos         ; display position.
2651   8CB7 C2 BE 8C           jp nz,bchar2        ; not on a new line.
2652   8CBA 34          bchar3 inc (hl)            ; newline.
2653   8CBB CD EA 8C           call nexlin         ; next line check.
2654   8CBE C3 07 88    bchar2 jp dscor2           ; tidy up line and column variables.
2655   8CC1             
2656   8CC1             ; Display a character.
2657   8CC1             
2658   8CC1 47          achar  ld b,a              ; copy to b.
2659   8CC2 CD F2 8C           call preprt         ; get ready to print.
2660   8CC5 3A 5F 8C           ld a,(prtmod)       ; print mode.
2661   8CC8 A7                 and a               ; standard size?
2662   8CC9 78                 ld a,b              ; character in accumulator.
2663   8CCA C2 83 8C           jp nz,bchar         ; no, double-height text.
2664   8CCD CD CE 88           call pchar          ; display character.
2665   8CD0 CD B6 88           call gaadd          ; get attribute address.
2666   8CD3 3A 8D 5C           ld a,(23693)        ; current cell colours.
2667   8CD6 77                 ld (hl),a           ; write to attribute cell.
2668   8CD7 CD E0 8C           call nexpos         ; display position.
2669   8CDA CA BA 8C           jp z,bchar3         ; next line down.
2670   8CDD C3 BE 8C           jp bchar2           ; tidy up.
2671   8CE0             
2672   8CE0             ; Get next print column position.
2673   8CE0             
2674   8CE0 21 3B 7D    nexpos ld hl,dispy         ; display position.
2675   8CE3 7E                 ld a,(hl)           ; get coordinate.
2676   8CE4 3C                 inc a               ; move along one position.
2677   8CE5 E6 1F              and 31              ; reached edge of screen?
2678   8CE7 77                 ld (hl),a           ; set new position.
2679   8CE8 2B                 dec hl              ; point to x now.
2680   8CE9 C9                 ret                 ; return with status in zero flag.
2681   8CEA             
2682   8CEA             ; Get next print line position.
2683   8CEA             
2684   8CEA 34          nexlin inc (hl)            ; newline.
2685   8CEB 7E                 ld a,(hl)           ; vertical position.
2686   8CEC FE 18              cp 24               ; past screen edge?
2687   8CEE D8                 ret c               ; no, still okay.
2688   8CEF 36 00              ld (hl),0           ; restart at top.
2689   8CF1 C9                 ret
2690   8CF2             
2691   8CF2             ; Pre-print preliminaries.
2692   8CF2             
2693   8CF2 ED 5B 36 5C preprt ld de,(23606)       ; font pointer.
2694   8CF6 ED 53 CC 87        ld (grbase),de      ; set up graphics base.
2695   8CFA ED 5B 2F 7D prescr ld de,(charx)       ; display coordinates.
2696   8CFE ED 53 3A 7D        ld (dispx),de       ; set up general coordinates.
2697   8D02 C9                 ret
2698   8D03             
2699   8D03             ; On entry: hl points to word list
2700   8D03             ;           a contains word number.
2701   8D03             
2702   8D03 A7          getwrd and a               ; first word in list?
2703   8D04 C8                 ret z               ; yep, don't search.
2704   8D05 47                 ld b,a
2705   8D06 7E          getwd0 ld a,(hl)
2706   8D07 23                 inc hl
2707   8D08 FE 80              cp 128              ; found end?
2708   8D0A 38 FA              jr c,getwd0         ; no, carry on.
2709   8D0C 10 F8              djnz getwd0         ; until we have right number.
2710   8D0E C9                 ret
2711   8D0F             
2712   8D0F             
2713   8D0F             ; Bubble sort.
2714   8D0F             
2715   8D0F 06 0B       bsort  ld b,NUMSPR - 1     ; sprites to swap.
2716   8D11 DD 21 C4 92        ld ix,sprtab        ; sprite table.
2717   8D15 C5          bsort0 push bc             ; store loop counter for now.
2718   8D16             
2719   8D16 DD 7E 00           ld a,(ix+0)         ; first sprite type.
2720   8D19 3C                 inc a               ; is it switched off?
2721   8D1A 28 22              jr z,swemp          ; yes, may need to switch another in here.
2722   8D1C             
2723   8D1C DD 7E 11           ld a,(ix+TABSIZ)    ; check next slot exists.
2724   8D1F 3C                 inc a               ; is it enabled?
2725   8D20 28 08              jr z,bsort2         ; no, nothing to swap.
2726   8D22             
2727   8D22 DD 7E 14           ld a,(ix+(3+TABSIZ)); fetch next sprite's coordinate.
2728   8D25 DD BE 03           cp (ix+3)           ; compare with this x coordinate.
2729   8D28 38 09              jr c,bsort1         ; next sprite is higher - may need to switch.
2730   8D2A 11 11 00    bsort2 ld de,TABSIZ        ; distance to next odd/even entry.
2731   8D2D DD 19              add ix,de           ; next sprite.
2732   8D2F C1                 pop bc              ; retrieve loop counter.
2733   8D30 10 E3              djnz bsort0         ; repeat for remaining sprites.
2734   8D32 C9                 ret
2735   8D33             
2736   8D33 DD 7E 11    bsort1 ld a,(ix+TABSIZ)    ; sprite on/off flag.
2737   8D36 3C                 inc a               ; is it enabled?
2738   8D37 28 F1              jr z,bsort2         ; no, nothing to swap.
2739   8D39 CD 49 8D           call swspr          ; swap positions.
2740   8D3C 18 EC              jr bsort2
2741   8D3E             
2742   8D3E DD 7E 11    swemp  ld a,(ix+TABSIZ)    ; next table entry.
2743   8D41 3C                 inc a               ; is that one on?
2744   8D42 28 E6              jr z,bsort2         ; no, nothing to swap.
2745   8D44 CD 49 8D           call swspr          ; swap positions.
2746   8D47 18 E1              jr bsort2
2747   8D49             
2748   8D49             ; Swap sprites.
2749   8D49             
2750   8D49 DD E5       swspr  push ix             ; table address on stack.
2751   8D4B E1                 pop hl              ; pop into hl pair.
2752   8D4C 54                 ld d,h              ; copy to de pair.
2753   8D4D 5D                 ld e,l
2754   8D4E 01 11 00           ld bc,TABSIZ        ; distance to second entry.
2755   8D51 09                 add hl,bc           ; point to second sprite entry.
2756   8D52 06 11              ld b,TABSIZ         ; bytes to swap.
2757   8D54 4E          swspr0 ld c,(hl)           ; fetch second byte.
2758   8D55 1A                 ld a,(de)           ; fetch first byte.
2759   8D56 77                 ld (hl),a           ; copy to second.
2760   8D57 79                 ld a,c              ; second byte in accumulator.
2761   8D58 12                 ld (de),a           ; copy to first sprite entry.
2762   8D59 13                 inc de              ; next byte.
2763   8D5A 23                 inc hl              ; next byte.
2764   8D5B 10 F7              djnz swspr0         ; swap all bytes in table entry.
2765   8D5D C9                 ret
2766   8D5E             
2767   8D5E             
2768   8D5E             ; Process sprites.
2769   8D5E             
2770   8D5E 06 0C       pspr   ld b,NUMSPR         ; sprites to process.
2771   8D60 DD 21 C4 92        ld ix,sprtab        ; sprite table.
2772   8D64 C5          pspr1  push bc             ; store loop counter for now.
2773   8D65 DD 7E 00           ld a,(ix+0)         ; fetch sprite type.
2774   8D68 FE 09              cp 9                ; within range of sprite types?
2775   8D6A DC 76 8D           call c,pspr2        ; yes, process this one.
2776   8D6D 11 11 00           ld de,TABSIZ        ; distance to next odd/even entry.
2777   8D70 DD 19              add ix,de           ; next sprite.
2778   8D72 C1                 pop bc              ; retrieve loop counter.
2779   8D73 10 EF              djnz pspr1          ; repeat for remaining sprites.
2780   8D75 C9                 ret
2781   8D76 DD 22 8F 8D pspr2  ld (ogptr),ix       ; store original sprite pointer.
2782   8D7A CD 82 8D           call pspr3          ; do the routine.
2783   8D7D DD 2A 8F 8D rtorg  ld ix,(ogptr)       ; restore original pointer to sprite.
2784   8D81 C9          rtorg0 ret
2785   8D82 21 91 8D    pspr3  ld hl,evtyp0        ; sprite type events list.
2786   8D85 87          pspr4  add a,a             ; double accumulator.
2787   8D86 5F                 ld e,a              ; copy to de.
2788   8D87 16 00              ld d,0              ; no high byte.
2789   8D89 19                 add hl,de           ; point to address of routine.
2790   8D8A 5E                 ld e,(hl)           ; address low.
2791   8D8B 23                 inc hl              ; next byte of address.
2792   8D8C 56                 ld d,(hl)           ; address high.
2793   8D8D EB                 ex de,hl            ; swap address into hl.
2794   8D8E E9                 jp (hl)             ; go there.
2795   8D8F 00 00       ogptr  defw 0              ; original sprite pointer.
2796   8D91             
2797   8D91             ; Address of each sprite type's routine.
2798   8D91             
2799   8D91 41 94       evtyp0 defw evnt00
2800   8D93 2F 9B       evtyp1 defw evnt01
2801   8D95 56 9E       evtyp2 defw evnt02
2802   8D97 91 A0       evtyp3 defw evnt03
2803   8D99 E1 A0       evtyp4 defw evnt04
2804   8D9B 85 A1       evtyp5 defw evnt05
2805   8D9D 86 A1       evtyp6 defw evnt06
2806   8D9F 87 A1       evtyp7 defw evnt07
2807   8DA1 88 A1       evtyp8 defw evnt08
2808   8DA3             
2809   8DA3             
2810   8DA3             ; Display sprites.
2811   8DA3             
2812   8DA3 06 06       dspr   ld b,NUMSPR/2       ; number of sprites to display.
2813   8DA5 C5          dspr0  push bc             ; store loop counter for now.
2814   8DA6 DD 7E 00           ld a,(ix+0)         ; get sprite type.
2815   8DA9 3C                 inc a               ; is it enabled?
2816   8DAA 20 21              jr nz,dspr1         ; yes, it needs deleting.
2817   8DAC DD 7E 05    dspr5  ld a,(ix+5)         ; new type.
2818   8DAF 3C                 inc a               ; is it enabled?
2819   8DB0 20 4E              jr nz,dspr3         ; yes, it needs drawing.
2820   8DB2             
2821   8DB2 DD E5       dspr2  push ix             ; put ix on stack.
2822   8DB4 E1                 pop hl              ; pop into hl.
2823   8DB5 5D                 ld e,l              ; copy to de.
2824   8DB6 54                 ld d,h
2825   8DB7             
2826   8DB7             ;dspr2  ld e,ixl            ; copy ix to de.
2827   8DB7             ;       ld d,ixh
2828   8DB7             ;       ld l,e              ; copy to hl.
2829   8DB7             ;       ld h,d
2830   8DB7 01 05 00           ld bc,5             ; distance to new type.
2831   8DBA 09                 add hl,bc           ; point to new properties.
2832   8DBB ED A0              ldi                 ; copy to old positions.
2833   8DBD ED A0              ldi
2834   8DBF ED A0              ldi
2835   8DC1 ED A0              ldi
2836   8DC3 ED A0              ldi
2837   8DC5 0E 22              ld c,TABSIZ*2       ; distance to next odd/even entry.
2838   8DC7 DD 09              add ix,bc           ; next sprite.
2839   8DC9 C1                 pop bc              ; retrieve loop counter.
2840   8DCA 10 D9              djnz dspr0          ; repeat for remaining sprites.
2841   8DCC C9                 ret
2842   8DCD             ;dspr1  ld a,(ix+3)         ; old x coord.
2843   8DCD             ;       cp 177              ; beyond maximum?
2844   8DCD             ;       jr nc,dspr5         ; yes, don't delete it.
2845   8DCD DD 7E 05    dspr1  ld a,(ix+5)         ; type of new sprite.
2846   8DD0 3C                 inc a               ; is this enabled?
2847   8DD1 20 06              jr nz,dspr4         ; yes, display both.
2848   8DD3 CD 70 8E    dspr6  call sspria         ; show single sprite.
2849   8DD6 C3 B2 8D           jp dspr2
2850   8DD9             
2851   8DD9             ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
2852   8DD9             
2853   8DD9 DD 7E 04    dspr4  ld a,(ix+4)         ; old y.
2854   8DDC DD BE 09           cp (ix+9)           ; compare with new value.
2855   8DDF 20 19              jr nz,dspr7         ; they differ, need to redraw.
2856   8DE1 DD 7E 03           ld a,(ix+3)         ; old x.
2857   8DE4 DD BE 08           cp (ix+8)           ; compare against new value.
2858   8DE7 20 11              jr nz,dspr7         ; they differ, need to redraw.
2859   8DE9 DD 7E 02           ld a,(ix+2)         ; old frame.
2860   8DEC DD BE 07           cp (ix+7)           ; compare against new value.
2861   8DEF 20 09              jr nz,dspr7         ; they differ, need to redraw.
2862   8DF1 DD 7E 01           ld a,(ix+1)         ; old image.
2863   8DF4 DD BE 06           cp (ix+6)           ; compare against new value.
2864   8DF7 CA B2 8D           jp z,dspr2          ; everything is the same, don't redraw.
2865   8DFA CD 85 8E    dspr7  call sspric         ; delete old sprite, draw new one simultaneously.
2866   8DFD C3 B2 8D           jp dspr2
2867   8E00 CD 7F 8E    dspr3  call ssprib         ; show single sprite.
2868   8E03 C3 B2 8D           jp dspr2
2869   8E06             
2870   8E06             
2871   8E06             ; Get sprite address calculations.
2872   8E06             ; gspran = new sprite, gsprad = old sprite.
2873   8E06             
2874   8E06 DD 6E 08    gspran ld l,(ix+8)         ; new x coordinate.
2875   8E09 DD 66 09           ld h,(ix+9)         ; new y coordinate.
2876   8E0C 22 3A 7D           ld (dispx),hl       ; set display coordinates.
2877   8E0F DD 7E 06           ld a,(ix+6)         ; new sprite image.
2878   8E12 CD 19 91           call gfrm           ; fetch start frame for this sprite.
2879   8E15 7E                 ld a,(hl)           ; frame in accumulator.
2880   8E16 DD 86 07           add a,(ix+7)        ; new add frame number.
2881   8E19 C3 2F 8E           jp gspra0
2882   8E1C             
2883   8E1C DD 6E 03    gsprad ld l,(ix+3)         ; x coordinate.
2884   8E1F DD 66 04           ld h,(ix+4)         ; y coordinate.
2885   8E22 22 3A 7D           ld (dispx),hl       ; set display coordinates.
2886   8E25 DD 7E 01           ld a,(ix+1)         ; sprite image.
2887   8E28 CD 19 91           call gfrm           ; fetch start frame for this sprite.
2888   8E2B 7E                 ld a,(hl)           ; frame in accumulator.
2889   8E2C DD 86 02           add a,(ix+2)        ; add frame number.
2890   8E2F             
2891   8E2F 0F          gspra0 rrca                ; multiply by 128.
2892   8E30 57                 ld d,a              ; store in d.
2893   8E31 E6 80              and 128             ; low byte bit.
2894   8E33 5F                 ld e,a              ; got low byte.
2895   8E34 7A                 ld a,d              ; restore result.
2896   8E35 E6 7F              and 127             ; high byte bits.
2897   8E37 57                 ld d,a              ; displacement high byte.
2898   8E38 21 E7 A5           ld hl,sprgfx        ; address of play sprites.
2899   8E3B 19                 add hl,de           ; point to frame.
2900   8E3C             
2901   8E3C 3A 3B 7D           ld a,(dispy)        ; y coordinate.
2902   8E3F E6 06              and 6               ; position within byte boundary.
2903   8E41 4F                 ld c,a              ; low byte of table displacement.
2904   8E42 07                 rlca                ; multiply by 32.
2905   8E43 07                 rlca                ; already a multiple
2906   8E44 07                 rlca                ; of 2, so just 4
2907   8E45 07                 rlca                ; shifts needed.
2908   8E46 5F                 ld e,a              ; put displacement in low byte of de.
2909   8E47 16 00              ld d,0              ; zero the high byte.
2910   8E49 42                 ld b,d              ; no high byte for mask displacement either.
2911   8E4A 19                 add hl,de           ; add to sprite address.
2912   8E4B EB                 ex de,hl            ; need it in de for now.
2913   8E4C 21 68 8E           ld hl,spmask        ; pointer to mask table.
2914   8E4F 09                 add hl,bc           ; add displacement to pointer.
2915   8E50 4E                 ld c,(hl)           ; left mask.
2916   8E51 23                 inc hl
2917   8E52 46                 ld b,(hl)           ; right mask.
2918   8E53             
2919   8E53             ; Drop into screen address routine.
2920   8E53             ; This routine returns a screen address for (dispx, dispy) in hl.
2921   8E53             
2922   8E53 3A 3A 7D    scadd  ld a,(dispx)        ; coordinate.
2923   8E56 6F                 ld l,a              ; low byte of table.
2924   8E57 26 FB              ld h,251            ; high byte of 64256 (SCADTB).
2925   8E59 7E                 ld a,(hl)           ; fetch high byte.
2926   8E5A 24                 inc h               ; point to low byte table.
2927   8E5B 6E                 ld l,(hl)           ; fetch low byte.
2928   8E5C 67                 ld h,a              ; hl points to start of line.
2929   8E5D 3A 3B 7D           ld a,(dispy)        ; y pixel coordinate.
2930   8E60 0F                 rrca                ; divide by 8.
2931   8E61 0F                 rrca
2932   8E62 0F                 rrca
2933   8E63 E6 1F              and 31              ; squares 0 - 31 across screen.
2934   8E65 85                 add a,l             ; add to address.
2935   8E66 6F                 ld l,a              ; copy to hl = address of screen.
2936   8E67 C9                 ret
2937   8E68             
2938   8E68             spmask defb 255,0,63,192,15,240,3,252
2938   8E68 FF003FC00FF003FC
2939   8E70             
2940   8E70             
2941   8E70             ; These are the sprite routines.
2942   8E70             ; sspria = single sprite, old (ix).
2943   8E70             ; ssprib = single sprite, new (ix+5).
2944   8E70             ; sspric = both sprites, old (ix) and new (ix+5).
2945   8E70             
2946   8E70 CD 1C 8E    sspria call gsprad         ; get old sprite address.
2947   8E73 3E 10       sspri2 ld a,16             ; vertical lines.
2948   8E75 08          sspri0 ex af,af'           ; store line counter away in alternate registers.
2949   8E76 CD 08 8F           call dline          ; draw a line.
2950   8E79 08                 ex af,af'           ; restore line counter.
2951   8E7A 3D                 dec a               ; one less to go.
2952   8E7B C2 75 8E           jp nz,sspri0
2953   8E7E C9                 ret
2954   8E7F             
2955   8E7F CD 06 8E    ssprib call gspran         ; get new sprite address.
2956   8E82 C3 73 8E           jp sspri2
2957   8E85             
2958   8E85 CD 1C 8E    sspric call gsprad         ; get old sprite address.
2959   8E88 D9                 exx                 ; store addresses.
2960   8E89 CD 06 8E           call gspran         ; get new sprite addresses.
2961   8E8C CD 08 8F           call dline          ; draw a line.
2962   8E8F D9                 exx                 ; restore old addresses.
2963   8E90 CD 08 8F           call dline          ; delete a line.
2964   8E93 D9                 exx                 ; flip to new sprite addresses.
2965   8E94 CD 08 8F           call dline          ; draw a line.
2966   8E97 D9                 exx                 ; restore old addresses.
2967   8E98 CD 08 8F           call dline          ; delete a line.
2968   8E9B D9                 exx                 ; flip to new sprite addresses.
2969   8E9C CD 08 8F           call dline          ; draw a line.
2970   8E9F D9                 exx                 ; restore old addresses.
2971   8EA0 CD 08 8F           call dline          ; delete a line.
2972   8EA3 D9                 exx                 ; flip to new sprite addresses.
2973   8EA4 CD 08 8F           call dline          ; draw a line.
2974   8EA7 D9                 exx                 ; restore old addresses.
2975   8EA8 CD 08 8F           call dline          ; delete a line.
2976   8EAB D9                 exx                 ; flip to new sprite addresses.
2977   8EAC CD 08 8F           call dline          ; draw a line.
2978   8EAF D9                 exx                 ; restore old addresses.
2979   8EB0 CD 08 8F           call dline          ; delete a line.
2980   8EB3 D9                 exx                 ; flip to new sprite addresses.
2981   8EB4 CD 08 8F           call dline          ; draw a line.
2982   8EB7 D9                 exx                 ; restore old addresses.
2983   8EB8 CD 08 8F           call dline          ; delete a line.
2984   8EBB D9                 exx                 ; flip to new sprite addresses.
2985   8EBC CD 08 8F           call dline          ; draw a line.
2986   8EBF D9                 exx                 ; restore old addresses.
2987   8EC0 CD 08 8F           call dline          ; delete a line.
2988   8EC3 D9                 exx                 ; flip to new sprite addresses.
2989   8EC4 CD 08 8F           call dline          ; draw a line.
2990   8EC7 D9                 exx                 ; restore old addresses.
2991   8EC8 CD 08 8F           call dline          ; delete a line.
2992   8ECB D9                 exx                 ; flip to new sprite addresses.
2993   8ECC CD 08 8F           call dline          ; draw a line.
2994   8ECF D9                 exx                 ; restore old addresses.
2995   8ED0 CD 08 8F           call dline          ; delete a line.
2996   8ED3 D9                 exx                 ; flip to new sprite addresses.
2997   8ED4 CD 08 8F           call dline          ; draw a line.
2998   8ED7 D9                 exx                 ; restore old addresses.
2999   8ED8 CD 08 8F           call dline          ; delete a line.
3000   8EDB D9                 exx                 ; flip to new sprite addresses.
3001   8EDC CD 08 8F           call dline          ; draw a line.
3002   8EDF D9                 exx                 ; restore old addresses.
3003   8EE0 CD 08 8F           call dline          ; delete a line.
3004   8EE3 D9                 exx                 ; flip to new sprite addresses.
3005   8EE4 CD 08 8F           call dline          ; draw a line.
3006   8EE7 D9                 exx                 ; restore old addresses.
3007   8EE8 CD 08 8F           call dline          ; delete a line.
3008   8EEB D9                 exx                 ; flip to new sprite addresses.
3009   8EEC CD 08 8F           call dline          ; draw a line.
3010   8EEF D9                 exx                 ; restore old addresses.
3011   8EF0 CD 08 8F           call dline          ; delete a line.
3012   8EF3 D9                 exx                 ; flip to new sprite addresses.
3013   8EF4 CD 08 8F           call dline          ; draw a line.
3014   8EF7 D9                 exx                 ; restore old addresses.
3015   8EF8 CD 08 8F           call dline          ; delete a line.
3016   8EFB D9                 exx                 ; flip to new sprite addresses.
3017   8EFC CD 08 8F           call dline          ; draw a line.
3018   8EFF D9                 exx                 ; restore old addresses.
3019   8F00 CD 08 8F           call dline          ; delete a line.
3020   8F03 D9                 exx                 ; flip to new sprite addresses.
3021   8F04 CD 08 8F           call dline          ; draw a line.
3022   8F07 D9                 exx                 ; restore old addresses.
3023   8F08             
3024   8F08             ; Drop through.
3025   8F08             ; Line drawn, now work out next target address.
3026   8F08             
3027   8F08 1A          dline  ld a,(de)           ; graphic data.
3028   8F09 A1                 and c               ; mask away what's not needed.
3029   8F0A AE                 xor (hl)            ; XOR with what's there.
3030   8F0B 77                 ld (hl),a           ; bung it in.
3031   8F0C 2C                 inc l               ; next screen address.
3032   8F0D 2C                 inc l               ; next screen address.
3033   8F0E 1A                 ld a,(de)           ; fetch data.
3034   8F0F A0                 and b               ; mask away unwanted bits.
3035   8F10 AE                 xor (hl)            ; XOR with what's there.
3036   8F11 77                 ld (hl),a           ; bung it in.
3037   8F12 13                 inc de              ; next graphic.
3038   8F13 2D                 dec l               ; one character cell to the left.
3039   8F14 1A                 ld a,(de)           ; second bit of data.
3040   8F15 AE                 xor (hl)            ; XOR with what's there.
3041   8F16 77                 ld (hl),a           ; bung it in.
3042   8F17 13                 inc de              ; point to next line of data.
3043   8F18 2D                 dec l               ; another char left.
3044   8F19             
3045   8F19             ; Line drawn, now work out next target address.
3046   8F19             
3047   8F19 24          nline  inc h               ; increment pixel.
3048   8F1A 7C                 ld a,h              ; get pixel address.
3049   8F1B E6 07              and 7               ; straddling character position?
3050   8F1D C0                 ret nz              ; no, we're on next line already.
3051   8F1E 7C                 ld a,h              ; get pixel address.
3052   8F1F D6 08              sub 8               ; subtract 8 for start of segment.
3053   8F21 67                 ld h,a              ; new high byte of address.
3054   8F22 7D                 ld a,l              ; get low byte of address.
3055   8F23 C6 20              add a,32            ; one line down.
3056   8F25 6F                 ld l,a              ; new low byte.
3057   8F26 D0                 ret nc              ; not reached next segment yet.
3058   8F27 7C                 ld a,h              ; address high.
3059   8F28 C6 08              add a,8             ; add 8 to next segment.
3060   8F2A 67                 ld h,a              ; new high byte.
3061   8F2B FE 58              cp 88               ; reached end of screen?
3062   8F2D D8                 ret c               ; not yet.
3063   8F2E 26 38              ld h,56             ; back to ROM.
3064   8F30 C9                 ret
3065   8F31             
3066   8F31             
3067   8F31             ; Animates a sprite.
3068   8F31             
3069   8F31 21 0A 7D    animsp ld hl,frmno         ; game frame.
3070   8F34 A6                 and (hl)            ; is it time to change the frame?
3071   8F35 C0                 ret nz              ; not this frame.
3072   8F36 DD 7E 06           ld a,(ix+6)         ; sprite image.
3073   8F39 CD 19 91           call gfrm           ; get frame data.
3074   8F3C 23                 inc hl              ; point to frames.
3075   8F3D DD 7E 07           ld a,(ix+7)         ; sprite frame.
3076   8F40 3C                 inc a               ; next one along.
3077   8F41 BE                 cp (hl)             ; reached the last frame?
3078   8F42 38 01              jr c,anims0         ; no, not yet.
3079   8F44 AF                 xor a               ; start at first frame.
3080   8F45 DD 77 07    anims0 ld (ix+7),a         ; new frame.
3081   8F48 C9                 ret
3082   8F49 21 0A 7D    animbk ld hl,frmno         ; game frame.
3083   8F4C A6                 and (hl)            ; is it time to change the frame?
3084   8F4D C0                 ret nz              ; not this frame.
3085   8F4E DD 7E 06           ld a,(ix+6)         ; sprite image.
3086   8F51 CD 19 91           call gfrm           ; get frame data.
3087   8F54 23                 inc hl              ; point to frames.
3088   8F55 DD 7E 07           ld a,(ix+7)         ; sprite frame.
3089   8F58 A7                 and a               ; first one?
3090   8F59 20 01              jr nz,rtanb0        ; yes, start at end.
3091   8F5B 7E                 ld a,(hl)           ; last sprite.
3092   8F5C 3D          rtanb0 dec a               ; next one along.
3093   8F5D 18 E6              jr anims0           ; set new frame.
3094   8F5F             
3095   8F5F             ; Check for collision with other sprite, strict enforcement.
3096   8F5F             
3097   8F5F 21 C4 92    sktyp  ld hl,sprtab        ; sprite table.
3098   8F62 3E 0C       numsp2 ld a,NUMSPR         ; number of sprites.
3099   8F64 08          sktyp0 ex af,af'           ; store loop counter.
3100   8F65 22 80 8F           ld (skptr),hl       ; store pointer to sprite.
3101   8F68 7E                 ld a,(hl)           ; get sprite type.
3102   8F69 B8                 cp b                ; is it the type we seek?
3103   8F6A 28 16              jr z,coltyp         ; yes, we can use this one.
3104   8F6C 2A 80 8F    sktyp1 ld hl,(skptr)       ; retrieve sprite pointer.
3105   8F6F 11 11 00           ld de,TABSIZ        ; size of each entry.
3106   8F72 19                 add hl,de           ; point to next sprite in table.
3107   8F73 08                 ex af,af'           ; restore loop counter.
3108   8F74 3D                 dec a               ; one less iteration.
3109   8F75 C2 64 8F           jp nz,sktyp0        ; keep going until we find a slot.
3110   8F78 21 00 00           ld hl,0             ; default to ROM address - no sprite.
3111   8F7B 22 80 8F           ld (skptr),hl       ; store pointer to sprite.
3112   8F7E B4                 or h                ; don't return with zero flag set.
3113   8F7F C9                 ret                 ; didn't find one.
3114   8F80 00 00       skptr  defw 0              ; search pointer.
3115   8F82             
3116   8F82 DD 7E 00    coltyp ld a,(ix+0)         ; current sprite type.
3117   8F85 B8                 cp b                ; seeking sprite of same type?
3118   8F86 28 27              jr z,colty1         ; yes, need to check we're not detecting ourselves.
3119   8F88 11 08 00    colty0 ld de,X             ; distance to x position in table.
3120   8F8B 19                 add hl,de           ; point to coords.
3121   8F8C 5E                 ld e,(hl)           ; fetch x coordinate.
3122   8F8D 23                 inc hl              ; now point to y.
3123   8F8E 56                 ld d,(hl)           ; that's y coordinate.
3124   8F8F             
3125   8F8F             ; Drop into collision detection.
3126   8F8F             
3127   8F8F DD 7E 08    colc16 ld a,(ix+X)         ; x coord.
3128   8F92 93                 sub e               ; subtract x.
3129   8F93 30 02              jr nc,colc1a        ; result is positive.
3130   8F95 ED 44              neg                 ; make negative positive.
3131   8F97 FE 10       colc1a cp 16               ; within x range?
3132   8F99 30 D1              jr nc,sktyp1        ; no - they've missed.
3133   8F9B 4F                 ld c,a              ; store difference.
3134   8F9C DD 7E 09           ld a,(ix+Y)         ; y coord.
3135   8F9F 92                 sub d               ; subtract y.
3136   8FA0 30 02              jr nc,colc1b        ; result is positive.
3137   8FA2 ED 44              neg                 ; make negative positive.
3138   8FA4 FE 10       colc1b cp 16               ; within y range?
3139   8FA6 30 C4              jr nc,sktyp1        ; no - they've missed.
3140   8FA8 81                 add a,c             ; add x difference.
3141   8FA9 FE 1A              cp 26               ; only 5 corner pixels touching?
3142   8FAB D8                 ret c               ; carry set if there's a collision.
3143   8FAC C3 6C 8F           jp sktyp1           ; try next sprite in table.
3144   8FAF             
3145   8FAF DD E5       colty1 push ix             ; base sprite address onto stack.
3146   8FB1 D1                 pop de              ; pop it into de.
3147   8FB2 EB                 ex de,hl            ; flip hl into de.
3148   8FB3 ED 52              sbc hl,de           ; compare the two.
3149   8FB5 EB                 ex de,hl            ; restore hl.
3150   8FB6 28 B4              jr z,sktyp1         ; addresses are identical.
3151   8FB8 C3 88 8F           jp colty0
3152   8FBB             
3153   8FBB             ; Display number.
3154   8FBB             
3155   8FBB 01 CC 8F    disply ld bc,displ0        ; display workspace.
3156   8FBE CD B4 84           call num2ch         ; convert accumulator to string.
3157   8FC1 0B                 dec bc              ; back one character.
3158   8FC2 0A                 ld a,(bc)           ; fetch digit.
3159   8FC3 F6 80              or 128              ; insert end marker.
3160   8FC5 02                 ld (bc),a           ; new value.
3161   8FC6 21 CC 8F           ld hl,displ0        ; display space.
3162   8FC9 C3 1F 8C           jp dmsg3            ; display the string.
3163   8FCC 00 00 00 8D displ0 defb 0,0,0,13+128
3164   8FD0             
3165   8FD0             
3166   8FD0             ; Initialise screen.
3167   8FD0             
3168   8FD0 3A A1 93    initsc ld a,(roomtb)       ; whereabouts in the map are we?
3169   8FD3 CD DD 8F           call tstsc          ; find displacement.
3170   8FD6 FE FF              cp 255              ; is it valid?
3171   8FD8 C8                 ret z               ; no, it's rubbish.
3172   8FD9 32 14 7D           ld (scno),a         ; store new room number.
3173   8FDC C9                 ret
3174   8FDD             
3175   8FDD             ; Test screen.
3176   8FDD             
3177   8FDD 21 1F 94    tstsc  ld hl,mapdat-MAPWID ; start of map data, subtract width for negative.
3178   8FE0 47                 ld b,a              ; store room in b for now.
3179   8FE1 C6 0B              add a,MAPWID        ; add width in case we're negative.
3180   8FE3 5F                 ld e,a              ; screen into e.
3181   8FE4 16 00              ld d,0              ; zeroise d.
3182   8FE6 19                 add hl,de           ; add displacement to map data.
3183   8FE7 7E                 ld a,(hl)           ; find room number there.
3184   8FE8 C9                 ret
3185   8FE9             
3186   8FE9             ; Screen left.
3187   8FE9             
3188   8FE9 3A A1 93    scrl   ld a,(roomtb)       ; present room table pointer.
3189   8FEC 3D                 dec a               ; room left.
3190   8FED CD DD 8F    scrl0  call tstsc          ; test screen.
3191   8FF0 3C                 inc a               ; is there a screen this way?
3192   8FF1 C8                 ret z               ; no, return to loop.
3193   8FF2 78                 ld a,b              ; restore room displacement.
3194   8FF3 32 A1 93           ld (roomtb),a       ; new room table position.
3195   8FF6 CD D0 8F    scrl1  call initsc         ; set new screen.
3196   8FF9 21 37 7D           ld hl,restfl        ; restart screen flag.
3197   8FFC 36 02              ld (hl),2           ; set it.
3198   8FFE C9                 ret
3199   8FFF 3A A1 93    scrr   ld a,(roomtb)       ; room table pointer.
3200   9002 3C                 inc a               ; room right.
3201   9003 18 E8              jr scrl0
3202   9005 3A A1 93    scru   ld a,(roomtb)       ; room table pointer.
3203   9008 D6 0B              sub MAPWID          ; room up.
3204   900A 18 E1              jr scrl0
3205   900C 3A A1 93    scrd   ld a,(roomtb)       ; room table pointer.
3206   900F C6 0B              add a,MAPWID        ; room down.
3207   9011 18 DA              jr scrl0
3208   9013             
3209   9013             ; Jump to new screen.
3210   9013             
3211   9013 21 2A 94    nwscr  ld hl,mapdat        ; start of map data.
3212   9016 01 00 50           ld bc,256*80        ; zero room count, 80 to search.
3213   9019 BE          nwscr0 cp (hl)             ; have we found a match for screen?
3214   901A 28 05              jr z,nwscr1         ; yes, set new point in map.
3215   901C 23                 inc hl              ; next room.
3216   901D 0C                 inc c               ; count rooms.
3217   901E 10 F9              djnz nwscr0         ; keep looking.
3218   9020 C9                 ret
3219   9021 79          nwscr1 ld a,c              ; room displacement.
3220   9022 32 A1 93           ld (roomtb),a       ; set the map position.
3221   9025 18 CF              jr scrl1            ; draw new room.
3222   9027             
3223   9027             
3224   9027             ; Gravity processing.
3225   9027             
3226   9027 DD 7E 0D    grav   ld a,(ix+13)        ; in-air flag.
3227   902A A7                 and a               ; are we in the air?
3228   902B C8                 ret z               ; no we are not.
3229   902C 3C                 inc a               ; increment it.
3230   902D CA 77 90           jp z,ogrv           ; set to 255, use old gravity.
3231   9030 DD 77 0D           ld (ix+13),a        ; write new setting.
3232   9033 1F                 rra                 ; every other frame.
3233   9034 30 0A              jr nc,grav0         ; don't apply gravity this time.
3234   9036 DD 7E 0E           ld a,(ix+14)        ; pixels to move.
3235   9039 FE 10              cp 16               ; reached maximum?
3236   903B 28 03              jr z,grav0          ; yes, continue.
3237   903D DD 34 0E           inc (ix+14)         ; slow down ascent/speed up fall.
3238   9040 DD 7E 0E    grav0  ld a,(ix+14)        ; get distance to move.
3239   9043 CB 2F              sra a               ; divide by 2.
3240   9045 A7                 and a               ; any movement required?
3241   9046 C8                 ret z               ; no, not this time.
3242   9047 FE 80              cp 128              ; is it up or down?
3243   9049 30 0C              jr nc,gravu         ; it's up.
3244   904B 47          gravd  ld b,a              ; set pixels to move.
3245   904C CD 58 8A    gravd0 call cangd          ; can we go down?
3246   904F 20 15              jr nz,gravst        ; can't move down, so stop.
3247   9051 DD 34 08           inc (ix+8)          ; adjust new x coord.
3248   9054 10 F6              djnz gravd0
3249   9056 C9                 ret
3250   9057 ED 44       gravu  neg                 ; flip the sign so it's positive.
3251   9059 47                 ld b,a              ; set pixels to move.
3252   905A CD 35 8A    gravu0 call cangu          ; can we go up?
3253   905D C2 FE 90           jp nz,ifalls        ; can't move up, go down next.
3254   9060 DD 35 08           dec (ix+8)          ; adjust new x coord.
3255   9063 10 F5              djnz gravu0
3256   9065 C9                 ret
3257   9066 DD 7E 0E    gravst ld a,(ix+14)        ; jump pointer high.
3258   9069 DD 36 0D 00        ld (ix+13),0        ; reset falling flag.
3259   906D DD 36 0E 00        ld (ix+14),0        ; store new speed.
3260   9071 FE 08              cp 8                ; was speed the maximum?
3261   9073 CA 1C A3    evftf  jp z,evnt15         ; yes, fallen too far.
3262   9076 C9                 ret
3263   9077             
3264   9077             ; Old gravity processing for compatibility with 4.6 and 4.7.
3265   9077             
3266   9077 DD 5E 0E    ogrv   ld e,(ix+14)        ; get index to table.
3267   907A 16 00              ld d,0              ; no high byte.
3268   907C 21 6B C2           ld hl,jtab          ; jump table.
3269   907F 19                 add hl,de           ; hl points to jump value.
3270   9080 7E                 ld a,(hl)           ; pixels to move.
3271   9081 FE 63              cp 99               ; reached the end?
3272   9083 20 04              jr nz,ogrv0         ; no, continue.
3273   9085 2B                 dec hl              ; go back to previous value.
3274   9086 7E                 ld a,(hl)           ; fetch that from table.
3275   9087 18 03              jr ogrv1
3276   9089 DD 34 0E    ogrv0  inc (ix+14)         ; point to next table entry.
3277   908C A7          ogrv1  and a               ; any movement required?
3278   908D C8                 ret z               ; no, not this time.
3279   908E FE 80              cp 128              ; is it up or down?
3280   9090 30 0C              jr nc,ogrvu         ; it's up.
3281   9092 47          ogrvd  ld b,a              ; set pixels to move.
3282   9093 CD 58 8A    ogrvd0 call cangd          ; can we go down?
3283   9096 20 14              jr nz,ogrvst        ; can't move down, so stop.
3284   9098 DD 34 08           inc (ix+8)          ; adjust new x coord.
3285   909B 10 F6              djnz ogrvd0
3286   909D C9                 ret
3287   909E ED 44       ogrvu  neg                 ; flip the sign so it's positive.
3288   90A0 47                 ld b,a              ; set pixels to move.
3289   90A1 CD 35 8A    ogrvu0 call cangu          ; can we go up?
3290   90A4 20 1D              jr nz,ogrv2         ; can't move up, go down next.
3291   90A6 DD 35 08           dec (ix+8)          ; adjust new x coord.
3292   90A9 10 F6              djnz ogrvu0
3293   90AB C9                 ret
3294   90AC DD 5E 0E    ogrvst ld e,(ix+14)        ; get index to table.
3295   90AF 16 00              ld d,0              ; no high byte.
3296   90B1 21 6B C2           ld hl,jtab          ; jump table.
3297   90B4 19                 add hl,de           ; hl points to jump value.
3298   90B5 7E                 ld a,(hl)           ; fetch byte from table.
3299   90B6 FE 63              cp 99               ; is it the end marker?
3300   90B8 DD 36 0D 00        ld (ix+13),0        ; reset jump flag.
3301   90BC DD 36 0E 00        ld (ix+14),0        ; reset pointer.
3302   90C0 C3 73 90           jp evftf
3303   90C3 21 6B C2    ogrv2  ld hl,jtab          ; jump table.
3304   90C6 06 00              ld b,0              ; offset into table.
3305   90C8 7E          ogrv4  ld a,(hl)           ; fetch table byte.
3306   90C9 FE 64              cp 100              ; hit end or downward move?
3307   90CB 38 04              jr c,ogrv3          ; yes.
3308   90CD 23                 inc hl              ; next byte of table.
3309   90CE 04                 inc b               ; next offset.
3310   90CF 18 F7              jr ogrv4            ; keep going until we find crest/end of table.
3311   90D1 DD 70 0E    ogrv3  ld (ix+14),b        ; set next table offset.
3312   90D4 C9                 ret
3313   90D5             
3314   90D5             ; Initiate fall check.
3315   90D5             
3316   90D5 DD 7E 0D    ifall  ld a,(ix+13)        ; jump pointer flag.
3317   90D8 A7                 and a               ; are we in the air?
3318   90D9 C0                 ret nz              ; if set, we're already in the air.
3319   90DA DD 66 09           ld h,(ix+9)         ; y coordinate.
3320   90DD 3E 10              ld a,16             ; look down 16 pixels.
3321   90DF DD 86 08           add a,(ix+8)        ; add x coordinate.
3322   90E2 6F                 ld l,a              ; coords in hl.
3323   90E3 22 3A 7D           ld (dispx),hl       ; set up test coordinates.
3324   90E6 CD 46 8B           call tstbl          ; get map address.
3325   90E9 CD B6 8A           call plchk          ; block, platform check.
3326   90EC C0                 ret nz              ; it's solid, don't fall.
3327   90ED 23                 inc hl              ; look right one cell.
3328   90EE CD B6 8A           call plchk          ; block, platform check.
3329   90F1 C0                 ret nz              ; it's solid, don't fall.
3330   90F2 3A 3B 7D           ld a,(dispy)        ; y coordinate.
3331   90F5 E6 07              and 7               ; position straddling block cells.
3332   90F7 28 05              jr z,ifalls         ; no more checks needed.
3333   90F9 23                 inc hl              ; look to third cell.
3334   90FA CD B6 8A           call plchk          ; block, platform check.
3335   90FD C0                 ret nz              ; it's solid, don't fall.
3336   90FE DD 34 0D    ifalls inc (ix+13)         ; set in air flag.
3337   9101 DD 36 0E 00        ld (ix+14),0        ; initial speed = 0.
3338   9105 C9                 ret
3339   9106 DD 7E 0D    tfall  ld a,(ix+13)        ; jump pointer flag.
3340   9109 A7                 and a               ; are we in the air?
3341   910A C0                 ret nz              ; if set, we're already in the air.
3342   910B CD D5 90           call ifall          ; do fall test.
3343   910E DD 7E 0D           ld a,(ix+13)        ; get falling flag.
3344   9111 A7                 and a               ; is it set?
3345   9112 C8                 ret z               ; no.
3346   9113 DD 36 0D FF        ld (ix+13),255      ; we're using the table.
3347   9117 18 AA              jr ogrv2            ; find position in table.
3348   9119             
3349   9119             
3350   9119             ; Get frame data for a particular sprite.
3351   9119             
3352   9119 07          gfrm   rlca                ; multiple of 2.
3353   911A 5F                 ld e,a              ; copy to de.
3354   911B 16 00              ld d,0              ; no high byte as max sprite is 128.
3355   911D 2A 3C 7D           ld hl,(frmptr)      ; frames used by game.
3356   9120 19                 add hl,de           ; point to frame start.
3357   9121 C9                 ret
3358   9122             
3359   9122             ; Find sprite list for current room.
3360   9122             
3361   9122 3A 14 7D    sprlst ld a,(scno)         ; screen number.
3362   9125 2A 46 7D    sprls2 ld hl,(nmeptr)      ; pointer to enemies.
3363   9128 47                 ld b,a              ; loop counter in b register.
3364   9129 A7                 and a               ; is it the first screen?
3365   912A C8                 ret z               ; yes, don't need to search data.
3366   912B 11 04 00           ld de,NMESIZ        ; bytes to skip.
3367   912E 7E          sprls1 ld a,(hl)           ; fetch type of sprite.
3368   912F 3C                 inc a               ; is it an end marker?
3369   9130 28 03              jr z,sprls0         ; yes, end of this room.
3370   9132 19                 add hl,de           ; point to next sprite in list.
3371   9133 18 F9              jr sprls1           ; continue until end of room.
3372   9135 23          sprls0 inc hl              ; point to start of next screen.
3373   9136 10 F6              djnz sprls1         ; continue until room found.
3374   9138 C9                 ret
3375   9139             
3376   9139             
3377   9139             ; Clear all but a single player sprite.
3378   9139             
3379   9139 06 0C       nspr   ld b,NUMSPR         ; sprite slots in table.
3380   913B DD 21 C4 92        ld ix,sprtab        ; sprite table.
3381   913F 11 11 00           ld de,TABSIZ        ; distance to next odd/even entry.
3382   9142 DD 7E 00    nspr0  ld a,(ix+0)         ; fetch sprite type.
3383   9145 A7                 and a               ; is it a player?
3384   9146 28 0D              jr z,nspr1          ; yes, keep this one.
3385   9148 DD 36 00 FF        ld (ix+0),255       ; delete sprite.
3386   914C DD 36 05 FF        ld (ix+5),255       ; remove next type.
3387   9150 DD 19              add ix,de           ; next sprite.
3388   9152 10 EE              djnz nspr0          ; one less space in the table.
3389   9154 C9                 ret
3390   9155 DD 36 00 FF nspr1  ld (ix+0),255       ; delete sprite.
3391   9159 DD 19              add ix,de           ; point to next sprite.
3392   915B 10 01              djnz nspr2          ; one less to do.
3393   915D C9                 ret
3394   915E DD 36 00 FF nspr2  ld (ix+0),255       ; delete sprite.
3395   9162 DD 36 05 FF        ld (ix+5),255       ; remove next type.
3396   9166 DD 19              add ix,de           ; next sprite.
3397   9168 10 F4              djnz nspr2          ; one less space in the table.
3398   916A C9                 ret
3399   916B             
3400   916B             
3401   916B             ; Two initialisation routines.
3402   916B             ; Initialise sprites - copy everything from list to table.
3403   916B             
3404   916B 06 0C       ispr   ld b,NUMSPR         ; sprite slots in table.
3405   916D DD 21 C4 92        ld ix,sprtab        ; sprite table.
3406   9171 7E          ispr2  ld a,(hl)           ; fetch byte.
3407   9172 FE FF              cp 255              ; is it an end marker?
3408   9174 C8                 ret z               ; yes, no more to do.
3409   9175 DD 7E 00    ispr1  ld a,(ix+0)         ; fetch sprite type.
3410   9178 FE FF              cp 255              ; is it enabled yet?
3411   917A 20 07              jr nz,ispr4         ; yes, try another slot.
3412   917C DD 7E 05           ld a,(ix+5)         ; next type.
3413   917F FE FF              cp 255              ; is it enabled yet?
3414   9181 28 08              jr z,ispr3          ; no, process this one.
3415   9183 11 11 00    ispr4  ld de,TABSIZ        ; distance to next odd/even entry.
3416   9186 DD 19              add ix,de           ; next sprite.
3417   9188 10 EB              djnz ispr1          ; repeat for remaining sprites.
3418   918A C9                 ret                 ; no more room in table.
3419   918B CD C0 91    ispr3  call cpsp           ; initialise a sprite.
3420   918E 10 E1              djnz ispr2          ; one less space in the table.
3421   9190 C9                 ret
3422   9191             
3423   9191             ; Initialise sprites - but not player, we're keeping the old one.
3424   9191             
3425   9191 06 0C       kspr   ld b,NUMSPR         ; sprite slots in table.
3426   9193 DD 21 C4 92        ld ix,sprtab        ; sprite table.
3427   9197 7E          kspr2  ld a,(hl)           ; fetch byte.
3428   9198 FE FF              cp 255              ; is it an end marker?
3429   919A C8                 ret z               ; yes, no more to do.
3430   919B A7                 and a               ; is it a player sprite?
3431   919C 20 06              jr nz,kspr1         ; no, add to table as normal.
3432   919E 11 04 00           ld de,NMESIZ        ; distance to next item in list.
3433   91A1 19                 add hl,de           ; point to next one.
3434   91A2 18 F3              jr kspr2
3435   91A4 DD 7E 00    kspr1  ld a,(ix+0)         ; fetch sprite type.
3436   91A7 FE FF              cp 255              ; is it enabled yet?
3437   91A9 20 07              jr nz,kspr4         ; yes, try another slot.
3438   91AB DD 7E 05           ld a,(ix+5)         ; next type.
3439   91AE FE FF              cp 255              ; is it enabled yet?
3440   91B0 28 08              jr z,kspr3          ; no, process this one.
3441   91B2 11 11 00    kspr4  ld de,TABSIZ        ; distance to next odd/even entry.
3442   91B5 DD 19              add ix,de           ; next sprite.
3443   91B7 10 EB              djnz kspr1          ; repeat for remaining sprites.
3444   91B9 C9                 ret                 ; no more room in table.
3445   91BA CD C0 91    kspr3  call cpsp           ; copy sprite to table.
3446   91BD 10 D8              djnz kspr2          ; one less space in the table.
3447   91BF C9                 ret
3448   91C0             
3449   91C0             ; Copy sprite from list to table.
3450   91C0             
3451   91C0 7E          cpsp   ld a,(hl)           ; fetch byte from table.
3452   91C1 DD 77 00           ld (ix+0),a         ; set up type.
3453   91C4 DD 77 05           ld (ix+PAM1ST),a    ; set up type.
3454   91C7 23                 inc hl              ; move to next byte.
3455   91C8 7E                 ld a,(hl)           ; fetch byte from table.
3456   91C9 DD 77 06           ld (ix+6),a         ; set up image.
3457   91CC 23                 inc hl              ; move to next byte.
3458   91CD 7E                 ld a,(hl)           ; fetch byte from table.
3459   91CE DD 36 03 C8        ld (ix+3),200       ; set initial coordinate off screen.
3460   91D2 DD 77 08           ld (ix+8),a         ; set up coordinate.
3461   91D5 23                 inc hl              ; move to next byte.
3462   91D6 7E                 ld a,(hl)           ; fetch byte from table.
3463   91D7 DD 77 09           ld (ix+9),a         ; set up coordinate.
3464   91DA 23                 inc hl              ; move to next byte.
3465   91DB AF                 xor a               ; zeroes in accumulator.
3466   91DC DD 77 07           ld (ix+7),a         ; reset frame number.
3467   91DF DD 77 0A           ld (ix+10),a        ; reset direction.
3468   91E2             ;       ld (ix+12),a        ; reset parameter B.
3469   91E2 DD 77 0D           ld (ix+13),a        ; reset jump pointer low.
3470   91E5 DD 77 0E           ld (ix+14),a        ; reset jump pointer high.
3471   91E8 DD 36 10 FF        ld (ix+16),255      ; reset data pointer to auto-restore.
3472   91EC DD E5              push ix             ; store ix pair.
3473   91EE E5                 push hl             ; store hl pair.
3474   91EF C5                 push bc
3475   91F0 CD E2 A1    evis0  call evnt09         ; perform event.
3476   91F3 C1                 pop bc
3477   91F4 E1                 pop hl              ; restore hl.
3478   91F5 DD E1              pop ix              ; restore ix.
3479   91F7 11 11 00           ld de,TABSIZ        ; distance to next odd/even entry.
3480   91FA DD 19              add ix,de           ; next sprite.
3481   91FC C9                 ret
3482   91FD             
3483   91FD             ; Clear the play area window.
3484   91FD             
3485   91FD 2A 0B 7D    clw    ld hl,(wintop)      ; get coordinates of window.
3486   9200 22 3A 7D           ld (dispx),hl       ; put into dispx for calculation.
3487   9203 3A 0D 7D           ld a,(winhgt)       ; height of window.
3488   9206 47                 ld b,a              ; copy to b register.
3489   9207 C5          clw3   push bc             ; store lines on stack.
3490   9208 3A 0E 7D           ld a,(winwid)       ; width of window.
3491   920B 08          clw2   ex af,af'           ; store column counter.
3492   920C CD 88 88           call gprad          ; get print address.
3493   920F AF                 xor a               ; zero byute to write.
3494   9210 06 08              ld b,8              ; pixel height of each cell.
3495   9212 12          clw1   ld (de),a           ; copy to screen.
3496   9213 14                 inc d               ; next screen row down.
3497   9214 10 FC              djnz clw1
3498   9216 CD B6 88           call gaadd          ; get attribute address.
3499   9219 3A 8D 5C           ld a,(23693)        ; get colour.
3500   921C 77                 ld (hl),a           ; write colour.
3501   921D 21 3B 7D           ld hl,dispy         ; column position.
3502   9220 34                 inc (hl)            ; next column.
3503   9221 08                 ex af,af'           ; restore column counter.
3504   9222 3D                 dec a               ; one less to do.
3505   9223 20 E6              jr nz,clw2          ; repeat for remaining columns.
3506   9225 3A 0C 7D           ld a,(winlft)       ; get left edge.
3507   9228 32 3B 7D           ld (dispy),a        ; reset y.
3508   922B 21 3A 7D           ld hl,dispx         ; line.
3509   922E 34                 inc (hl)            ; next line down.
3510   922F C1                 pop bc              ; restore line counter.
3511   9230 10 D5              djnz clw3           ; repeat down the screen.
3512   9232 2A 0B 7D           ld hl,(wintop)      ; get coordinates of window.
3513   9235 22 2F 7D           ld (charx),hl       ; put into display position.
3514   9238 C9                 ret
3515   9239             
3516   9239             ; Effects code.
3517   9239             ; Ticker routine is called 25 times per second.
3518   9239             
3519   9239 C9          scrly  ret
3520   923A 9F 80              defw txtscr         ; get screen address.
3521   923C 06 08              ld b,8              ; 8 pixel rows.
3522   923E E5                 push hl             ; store screen address.
3523   923F C5          scrly1 push bc             ; store rows on stack.
3524   9240 E5                 push hl
3525   9241 3A 9A 80           ld a,(txtwid)       ; characters wide.
3526   9244 47                 ld b,a              ; put into the loop counter.
3527   9245 A7                 and a               ; reset carry flag.
3528   9246 CB 16       scrly0 rl (hl)             ; rotate left.
3529   9248 2D                 dec l               ; char left.
3530   9249 10 FB              djnz scrly0         ; repeat for width of ticker message.
3531   924B E1                 pop hl
3532   924C 24                 inc h               ; next row down.
3533   924D C1                 pop bc              ; retrieve row counter from stack.
3534   924E 10 EF              djnz scrly1         ; repeat for all rows.
3535   9250 2A 9B 80           ld hl,(txtpos)      ; get text pointer.
3536   9253 7E                 ld a,(hl)           ; find character we're displaying.
3537   9254 E6 7F              and 127             ; remove end marker bit if applicable.
3538   9256 FE 0D              cp 13               ; is it newline?
3539   9258 20 02              jr nz,scrly5        ; no, it's okay.
3540   925A 3E 20              ld a,32             ; convert to a space instead.
3541   925C 07          scrly5 rlca
3542   925D 07                 rlca
3543   925E 07                 rlca                ; multiply by 8 to find char.
3544   925F 47                 ld b,a              ; store shift in b.
3545   9260 E6 03              and 3               ; keep within 768-byte range of font.
3546   9262 57                 ld d,a              ; that's our high byte.
3547   9263 78                 ld a,b              ; restore the shift.
3548   9264 E6 F8              and 248
3549   9266 5F                 ld e,a
3550   9267 2A 36 5C           ld hl,(23606)       ; font address.
3551   926A 19                 add hl,de           ; point to image of character.
3552   926B EB                 ex de,hl            ; need the address in de.
3553   926C E1                 pop hl
3554   926D             
3555   926D 3A 99 80           ld a,(txtbit)
3556   9270 4F                 ld c,a
3557   9271 06 08              ld b,8
3558   9273 1A          scrly3 ld a,(de)           ; get image of char line.
3559   9274 A1                 and c               ; test relevant bit of char.
3560   9275 28 01              jr z,scrly2         ; not set - skip.
3561   9277 34                 inc (hl)            ; set bit.
3562   9278 24          scrly2 inc h               ; next line of window.
3563   9279 13                 inc de              ; next line of char.
3564   927A 10 F7              djnz scrly3
3565   927C 21 99 80           ld hl,txtbit        ; bit of text to display.
3566   927F CB 0E              rrc (hl)            ; next bit of char to use.
3567   9281 D0                 ret nc              ; not reached end of character yet.
3568   9282 2A 9B 80           ld hl,(txtpos)      ; text pointer.
3569   9285 7E                 ld a,(hl)           ; what was the character?
3570   9286 23                 inc hl              ; next character in message.
3571   9287 17                 rla                 ; end of message?
3572   9288             ;       ret nc              ; not yet, exit here.
3573   9288             ;       ld a,201            ; code for ret.
3574   9288             ;       ld (scrly),a        ; disable scrolling routine.
3575   9288 30 03              jr nc,scrly6        ; not yet - continue.
3576   928A 2A 9D 80    scrly4 ld hl,(txtini)      ; start of scrolling message.
3577   928D 22 9B 80    scrly6 ld (txtpos),hl      ; new text pointer position.
3578   9290 C9                 ret
3579   9291             
3580   9291 CD FA 8C    iscrly call prescr         ; set up display position.
3581   9294 21 22 A3           ld hl,msgdat        ; text messages.
3582   9297 78                 ld a,b              ; width.
3583   9298 3D                 dec a               ; subtract one.
3584   9299 FE 20              cp 32               ; is it between 1 and 32?
3585   929B 30 0B              jr nc,iscrl0        ; no, disable messages.
3586   929D 79                 ld a,c              ; message number.
3587   929E 50                 ld d,b              ; copy width to d.
3588   929F CD 03 8D           call getwrd         ; find message start.
3589   92A2 42                 ld b,d              ; restore width to b register.
3590   92A3 22 9D 80           ld (txtini),hl      ; set initial text position.
3591   92A6 3E 2A              ld a,42             ; code for ld hl,(nn).
3592   92A8 32 39 92    iscrl0 ld (scrly),a        ; enable/disable scrolling routine.
3593   92AB CD FA 8C           call prescr         ; set up display position.
3594   92AE CD 88 88           call gprad          ; get print address.
3595   92B1 68                 ld l,b              ; width in b so copy to hl.
3596   92B2 26 00              ld h,0              ; no high byte.
3597   92B4 2B                 dec hl              ; width minus one.
3598   92B5 19                 add hl,de           ; add width.
3599   92B6 22 9F 80           ld (txtscr),hl      ; set text screen address.
3600   92B9 78                 ld a,b              ; width.
3601   92BA 32 9A 80           ld (txtwid),a       ; set width in working storage.
3602   92BD 21 99 80           ld hl,txtbit        ; bit of text to display.
3603   92C0 36 80              ld (hl),128         ; start with leftmost bit.
3604   92C2 18 C6              jr scrly4
3605   92C4             
3606   92C4             ; Sprite table.
3607   92C4             ; ix+0  = type.
3608   92C4             ; ix+1  = sprite image number.
3609   92C4             ; ix+2  = frame.
3610   92C4             ; ix+3  = x coord.
3611   92C4             ; ix+4  = y coord.
3612   92C4             
3613   92C4             ; ix+5  = new type.
3614   92C4             ; ix+6  = new image number.
3615   92C4             ; ix+7  = new frame.
3616   92C4             ; ix+8  = new x coord.
3617   92C4             ; ix+9  = new y coord.
3618   92C4             
3619   92C4             ; ix+10 = direction.
3620   92C4             ; ix+11 = parameter 1.
3621   92C4             ; ix+12 = parameter 2.
3622   92C4             ; ix+13 = jump pointer low.
3623   92C4             ; ix+14 = jump pointer high.
3624   92C4             ; ix+15 = data pointer low.
3625   92C4             ; ix+16 = data pointer high.
3626   92C4             
3627   92C4             
3628   92C4             sprtab equ $
3629   92C4             
3630   92C4             ;       block NUMSPR * TABSIZ,255
3631   92C4             
3632   92C4                    defb 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
3632   92C4 FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3633   92D5                    defb 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
3633   92D5 FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3634   92E6                    defb 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
3634   92E6 FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3635   92F7                    defb 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
3635   92F7 FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3636   9308                    defb 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
3636   9308 FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3637   9319                    defb 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
3637   9319 FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3638   932A                    defb 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
3638   932A FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3639   933B                    defb 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
3639   933B FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3640   934C                    defb 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
3640   934C FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3641   935D                    defb 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
3641   935D FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3642   936E                    defb 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
3642   936E FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3643   937F                    defb 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
3643   937F FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
3644   9390             ssprit defb 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
3644   9390 FFFFFFFFFFFFFF00C078000000FFFFFFFF
3645   93A1             
3646   93A1 22          roomtb defb 34                     ; room number.
3647   93A2             
3648   93A2             ; Everything below here will be generated by the editors.
3649   93A2             
3650   93A2             ; Sounds.
3651   93A2             
3652   93A2 8F          fx1    defb 128+15         ; volume and mixer.
3653   93A3 1F                 defb 31             ; white noise.
3654   93A4 E8 03              defw 1000           ; tone register.
3655   93A6 8F                 defb 128+15         ; volume and mixer.
3656   93A7 19                 defb 25             ; white noise.
3657   93A8 E8 03              defw 1000           ; tone register.
3658   93AA 8E                 defb 128+14         ; volume and mixer.
3659   93AB 13                 defb 19             ; white noise.
3660   93AC E8 03              defw 1000           ; tone register.
3661   93AE 8D                 defb 128+13         ; volume and mixer.
3662   93AF 0D                 defb 13             ; white noise.
3663   93B0 E8 03              defw 1000           ; tone register.
3664   93B2 8C                 defb 128+12         ; volume and mixer.
3665   93B3 07                 defb 7              ; white noise.
3666   93B4 E8 03              defw 1000           ; tone register.
3667   93B6 8B                 defb 128+11         ; volume and mixer.
3668   93B7 00                 defb 0              ; white noise.
3669   93B8 E8 03              defw 1000           ; tone register.
3670   93BA 8A                 defb 128+10         ; volume and mixer.
3671   93BB 06                 defb 6              ; white noise.
3672   93BC E8 03              defw 1000           ; tone register.
3673   93BE 88                 defb 128+8          ; volume and mixer.
3674   93BF 0C                 defb 12             ; white noise.
3675   93C0 E8 03              defw 1000           ; tone register.
3676   93C2 86                 defb 128+6          ; volume and mixer.
3677   93C3 12                 defb 18             ; white noise.
3678   93C4 E8 03              defw 1000           ; tone register.
3679   93C6 83                 defb 128+3          ; volume and mixer.
3680   93C7 18                 defb 24             ; white noise.
3681   93C8 E8 03              defw 1000           ; tone register.
3682   93CA FF                 defb 255
3683   93CB             
3684   93CB 4F          fx2    defb 064+15         ; volume and mixer.
3685   93CC 1B                 defb 27             ; white noise.
3686   93CD E8 03              defw 1000           ; tone register.
3687   93CF 4E                 defb 064+14         ; volume and mixer.
3688   93D0 1F                 defb 31             ; white noise.
3689   93D1 D0 07              defw 2000           ; tone register.
3690   93D3 4D                 defb 064+13         ; volume and mixer.
3691   93D4 1C                 defb 28             ; white noise.
3692   93D5 B8 0B              defw 3000           ; tone register.
3693   93D7 4C                 defb 064+12         ; volume and mixer.
3694   93D8 1F                 defb 31             ; white noise.
3695   93D9 D0 07              defw 2000           ; tone register.
3696   93DB 4B                 defb 064+11         ; volume and mixer.
3697   93DC 1D                 defb 29             ; white noise.
3698   93DD E8 03              defw 1000           ; tone register.
3699   93DF 4A                 defb 064+10         ; volume and mixer.
3700   93E0 1F                 defb 31             ; white noise.
3701   93E1 D0 07              defw 2000           ; tone register.
3702   93E3 49                 defb 064+9          ; volume and mixer.
3703   93E4 1E                 defb 30             ; white noise.
3704   93E5 B8 0B              defw 3000           ; tone register.
3705   93E7 48                 defb 064+8          ; volume and mixer.
3706   93E8 1F                 defb 31             ; white noise.
3707   93E9 D0 07              defw 2000           ; tone register.
3708   93EB 47                 defb 064+7          ; volume and mixer.
3709   93EC 1F                 defb 31             ; white noise.
3710   93ED E8 03              defw 1000           ; tone register.
3711   93EF 46                 defb 064+6          ; volume and mixer.
3712   93F0 1F                 defb 31             ; white noise.
3713   93F1 D0 07              defw 2000           ; tone register.
3714   93F3 FF                 defb 255
3715   93F4             
3716   93F4 4F          fx3    defb 064+15         ; volume and mixer.
3717   93F5 00                 defb 0              ; white noise.
3718   93F6 A0 0F              defw 4000           ; tone register.
3719   93F8 4F                 defb 064+15         ; volume and mixer.
3720   93F9 00                 defb 0              ; white noise.
3721   93FA 04 10              defw 4100           ; tone register.
3722   93FC 4E                 defb 064+14         ; volume and mixer.
3723   93FD 00                 defb 0              ; white noise.
3724   93FE 68 10              defw 4200           ; tone register.
3725   9400 4E                 defb 064+14         ; volume and mixer.
3726   9401 00                 defb 0              ; white noise.
3727   9402 CC 10              defw 4300           ; tone register.
3728   9404 4D                 defb 064+13         ; volume and mixer.
3729   9405 00                 defb 0              ; white noise.
3730   9406 30 11              defw 4400           ; tone register.
3731   9408 4D                 defb 064+13         ; volume and mixer.
3732   9409 00                 defb 0              ; white noise.
3733   940A 94 11              defw 4500           ; tone register.
3734   940C 4C                 defb 064+12         ; volume and mixer.
3735   940D 00                 defb 0              ; white noise.
3736   940E F8 11              defw 4600           ; tone register.
3737   9410 4C                 defb 064+12         ; volume and mixer.
3738   9411 00                 defb 0              ; white noise.
3739   9412 5C 12              defw 4700           ; tone register.
3740   9414 4B                 defb 064+11         ; volume and mixer.
3741   9415 00                 defb 0              ; white noise.
3742   9416 C0 12              defw 4800           ; tone register.
3743   9418 4A                 defb 064+10         ; volume and mixer.
3744   9419 00                 defb 0              ; white noise.
3745   941A 24 13              defw 4900           ; tone register.
3746   941C FF                 defb 255
3747   941D             
3748   941D 63                 defb 99             ; temporary marker.
3749   941E             
3750   941E             ; User routine.  Put your own code in here to be called with USER instruction.
3751   941E             ; if USER has an argument it will be passed in the accumulator.
3752   941E             
3753   941E C9          user   ret
3754   941F             
3755   941F             ; Game-specific data and events code generated by the compiler ------------------
3756   941F             
3757   941F             
3758   941F             WINDOWTOP equ 0
3759   941F             WINDOWLFT equ 0
3760   941F             WINDOWHGT equ 23
3761   941F             WINDOWWID equ 30 ;@
3762   941F             MAPWID equ 11
3763   941F                    defb 255,255,255,255,255,255,255,255,255,255,255
3763   941F FFFFFFFFFFFFFFFFFFFFFF
3764   942A             mapdat equ $
3765   942A                    defb 255,255,255,255,0,255,255,255,255,255,255
3765   942A FFFFFFFF00FFFFFFFFFFFF
3766   9435                    defb 255,255,255,255,255,255,255,255,255,255,255
3766   9435 FFFFFFFFFFFFFFFFFFFFFF
3767   9440 0A          stmap  defb 10
3768   9441             evnt00 equ $
3769   9441 3E 01              ld a,1
3770   9443 21 1A 7D           ld hl,vare
3771   9446 BE                 cp (hl)
3772   9447 C2 9D 94           jp nz,a00162
3773   944A 3E 02              ld a,2
3774   944C DD BE 06           cp (ix+6)
3775   944F C2 6B 94           jp nz,a00075
3776   9452 CD 86 8A           call cangr
3777   9455 C2 63 94           jp nz,a00061
3778   9458 3E 06              ld a,6
3779   945A E6 07              and 7
3780   945C 4F                 ld c,a
3781   945D CD 54 80           call cspr
3782   9460 C3 6B 94           jp a00075
3783   9463 3E 04       a00061 ld a,4
3784   9465 E6 07              and 7
3785   9467 4F                 ld c,a
3786   9468 CD 54 80           call cspr
3787   946B 3E 03       a00075 ld a,3
3788   946D DD BE 06           cp (ix+6)
3789   9470 C2 8C 94           jp nz,a00131
3790   9473 CD 7B 8A           call cangl
3791   9476 C2 84 94           jp nz,a00116
3792   9479 3E 06              ld a,6
3793   947B E6 07              and 7
3794   947D 4F                 ld c,a
3795   947E CD 54 80           call cspr
3796   9481 C3 8C 94           jp a00131
3797   9484 3E 04       a00116 ld a,4
3798   9486 E6 07              and 7
3799   9488 4F                 ld c,a
3800   9489 CD 54 80           call cspr
3801   948C 06 06       a00131 ld b,CUSTOM
3802   948E CD FE 8A           call tded
3803   9491 B8                 cp b
3804   9492 C2 9D 94           jp nz,a00162
3805   9495 3E 07              ld a,7
3806   9497 E6 07              and 7
3807   9499 4F                 ld c,a
3808   949A CD 54 80           call cspr
3809   949D DD 7E 08    a00162 ld a,(ix+8)
3810   94A0 FE C8              cp 200
3811   94A2 D2 FB 9A           jp nc,a03071
3812   94A5 3E 0F              ld a,15
3813   94A7 DD BE 08           cp (ix+8)
3814   94AA D2 7F 95           jp nc,a00562
3815   94AD 0E 10              ld c,16
3816   94AF DD 7E 08           ld a,(ix+8)
3817   94B2 91                 sub c
3818   94B3 DD 77 08           ld (ix+8),a
3819   94B6 3E 02              ld a,2
3820   94B8 DD BE 06           cp (ix+6)
3821   94BB C2 02 95           jp nz,a00335
3822   94BE 3E 01              ld a,1
3823   94C0 21 1A 7D           ld hl,vare
3824   94C3 BE                 cp (hl)
3825   94C4 C2 D8 94           jp nz,a00263
3826   94C7 CD 86 8A           call cangr
3827   94CA C2 D0 94           jp nz,a00248
3828   94CD C3 D8 94           jp a00263
3829   94D0 3E 04       a00248 ld a,4
3830   94D2 E6 07              and 7
3831   94D4 4F                 ld c,a
3832   94D5 CD 54 80           call cspr
3833   94D8 3E 03       a00263 ld a,3
3834   94DA DD BE 06           cp (ix+6)
3835   94DD C2 F1 94           jp nz,a00304
3836   94E0 CD 7B 8A           call cangl
3837   94E3 C2 E9 94           jp nz,a00289
3838   94E6 C3 F1 94           jp a00304
3839   94E9 3E 04       a00289 ld a,4
3840   94EB E6 07              and 7
3841   94ED 4F                 ld c,a
3842   94EE CD 54 80           call cspr
3843   94F1 06 06       a00304 ld b,CUSTOM
3844   94F3 CD FE 8A           call tded
3845   94F6 B8                 cp b
3846   94F7 C2 02 95           jp nz,a00335
3847   94FA 3E 07              ld a,7
3848   94FC E6 07              and 7
3849   94FE 4F                 ld c,a
3850   94FF CD 54 80           call cspr
3851   9502 AF          a00335 xor a
3852   9503 32 26 7D           ld (varq),a
3853   9506 3A 31 7D           ld a,(clock)
3854   9509 FE 32              cp 50
3855   950B D2 13 95           jp nc,a00365
3856   950E 3E 01              ld a,1
3857   9510 32 26 7D           ld (varq),a
3858   9513 3E 64       a00365 ld a,100
3859   9515 21 31 7D           ld hl,clock
3860   9518 BE                 cp (hl)
3861   9519 D2 29 95           jp nc,a00404
3862   951C 3A 31 7D           ld a,(clock)
3863   951F FE 96              cp 150
3864   9521 D2 29 95           jp nc,a00404
3865   9524 3E 01              ld a,1
3866   9526 32 26 7D           ld (varq),a
3867   9529 3E C8       a00404 ld a,200
3868   952B 21 31 7D           ld hl,clock
3869   952E BE                 cp (hl)
3870   952F D2 37 95           jp nc,a00430
3871   9532 3E 01              ld a,1
3872   9534 32 26 7D           ld (varq),a
3873   9537 AF          a00430 xor a
3874   9538 21 26 7D           ld hl,varq
3875   953B BE                 cp (hl)
3876   953C C2 5A 95           jp nz,a00496
3877   953F 3E 01              ld a,1
3878   9541 CD B9 86           call getob
3879   9544 AF                 xor a
3880   9545 CD B9 86           call getob
3881   9548 DD 7E 09           ld a,(ix+9)
3882   954B 67                 ld h,a
3883   954C DD 7E 08           ld a,(ix+8)
3884   954F 6F                 ld l,a
3885   9550 22 3A 7D           ld (dispx),hl
3886   9553 AF                 xor a
3887   9554 CD 09 87           call drpob
3888   9557 C3 73 95           jp a00541
3889   955A 3E 01       a00496 ld a,1
3890   955C CD B9 86           call getob
3891   955F AF                 xor a
3892   9560 CD B9 86           call getob
3893   9563 DD 7E 09           ld a,(ix+9)
3894   9566 67                 ld h,a
3895   9567 DD 7E 08           ld a,(ix+8)
3896   956A 6F                 ld l,a
3897   956B 22 3A 7D           ld (dispx),hl
3898   956E 3E 01              ld a,1
3899   9570 CD 09 87           call drpob
3900   9573 0E 10       a00541 ld c,16
3901   9575 DD 7E 08           ld a,(ix+8)
3902   9578 81                 add a,c
3903   9579 DD 77 08           ld (ix+8),a
3904   957C C3 88 95           jp a00578
3905   957F AF          a00562 xor a
3906   9580 CD B9 86           call getob
3907   9583 3E 01              ld a,1
3908   9585 CD B9 86           call getob
3909   9588 DD 7E 0A    a00578 ld a,(ix+10)
3910   958B 32 24 7D           ld (varo),a
3911   958E DD 7E 0A           ld a,(ix+10)
3912   9591 32 25 7D           ld (varp),a
3913   9594 3A 24 7D           ld a,(varo)
3914   9597 1F                 rra
3915   9598 1F                 rra
3916   9599 1F                 rra
3917   959A 1F                 rra
3918   959B E6 0F              and 15
3919   959D 32 24 7D           ld (varo),a
3920   95A0 3A 24 7D           ld a,(varo)
3921   95A3 32 26 7D           ld (varq),a
3922   95A6 3A 26 7D           ld a,(varq)
3923   95A9 87                 add a,a
3924   95AA 87                 add a,a
3925   95AB 87                 add a,a
3926   95AC 87                 add a,a
3927   95AD 32 26 7D           ld (varq),a
3928   95B0 3A 26 7D           ld a,(varq)
3929   95B3 4F                 ld c,a
3930   95B4 3A 25 7D           ld a,(varp)
3931   95B7 91                 sub c
3932   95B8 32 25 7D           ld (varp),a
3933   95BB 3E 01              ld a,1
3934   95BD 21 1D 7D           ld hl,varh
3935   95C0 BE                 cp (hl)
3936   95C1 C2 DC 95           jp nz,a00735
3937   95C4 21 32 00           ld hl,50
3938   95C7 CD 1C 88           call addsc
3939   95CA 3E 0A              ld a,10
3940   95CC 32 24 7D           ld (varo),a
3941   95CF 0E 02              ld c,2
3942   95D1 DD 7E 08           ld a,(ix+8)
3943   95D4 91                 sub c
3944   95D5 DD 77 08           ld (ix+8),a
3945   95D8 AF                 xor a
3946   95D9 32 1D 7D           ld (varh),a
3947   95DC 3E 08       a00735 ld a,8
3948   95DE 21 25 7D           ld hl,varp
3949   95E1 BE                 cp (hl)
3950   95E2 C2 E9 95           jp nz,a00759
3951   95E5 AF                 xor a
3952   95E6 32 25 7D           ld (varp),a
3953   95E9 3E 08       a00759 ld a,8
3954   95EB 21 24 7D           ld hl,varo
3955   95EE BE                 cp (hl)
3956   95EF C2 F6 95           jp nz,a00784
3957   95F2 AF                 xor a
3958   95F3 32 24 7D           ld (varo),a
3959   95F6 DD 7E 09    a00784 ld a,(ix+9)
3960   95F9 FE 04              cp 4
3961   95FB D2 03 96           jp nc,a00806
3962   95FE 3E F0              ld a,240
3963   9600 DD 77 09           ld (ix+9),a
3964   9603 DD 7E 08    a00806 ld a,(ix+8)
3965   9606 FE 10              cp 16
3966   9608 D2 15 96           jp nc,a00835
3967   960B 3E 10              ld a,16
3968   960D DD 77 08           ld (ix+8),a
3969   9610 3E 01              ld a,1
3970   9612 32 24 7D           ld (varo),a
3971   9615 3E F0       a00835 ld a,240
3972   9617 DD BE 09           cp (ix+9)
3973   961A D2 22 96           jp nc,a00857
3974   961D 3E 04              ld a,4
3975   961F DD 77 09           ld (ix+9),a
3976   9622 3E A0       a00857 ld a,160
3977   9624 DD BE 08           cp (ix+8)
3978   9627 D2 2F 96           jp nc,a00879
3979   962A 3E 0C              ld a,12
3980   962C 32 24 7D           ld (varo),a
3981   962F 3A 24 7D    a00879 ld a,(varo)
3982   9632 FE 08              cp 8
3983   9634 D2 7B 96           jp nc,a01012
3984   9637 AF                 xor a
3985   9638 21 24 7D           ld hl,varo
3986   963B BE                 cp (hl)
3987   963C D2 4C 96           jp nc,a00930
3988   963F CD 58 8A           call cangd
3989   9642 C2 4C 96           jp nz,a00930
3990   9645 DD 7E 08           ld a,(ix+8)
3991   9648 3C                 inc a
3992   9649 DD 77 08           ld (ix+8),a
3993   964C 3E 01       a00930 ld a,1
3994   964E 21 24 7D           ld hl,varo
3995   9651 BE                 cp (hl)
3996   9652 D2 62 96           jp nc,a00969
3997   9655 CD 58 8A           call cangd
3998   9658 C2 62 96           jp nz,a00969
3999   965B DD 7E 08           ld a,(ix+8)
4000   965E 3C                 inc a
4001   965F DD 77 08           ld (ix+8),a
4002   9662 3E 02       a00969 ld a,2
4003   9664 21 24 7D           ld hl,varo
4004   9667 BE                 cp (hl)
4005   9668 D2 78 96           jp nc,a01008
4006   966B CD 58 8A           call cangd
4007   966E C2 78 96           jp nz,a01008
4008   9671 DD 7E 08           ld a,(ix+8)
4009   9674 3C                 inc a
4010   9675 DD 77 08           ld (ix+8),a
4011   9678 C3 FF 96    a01008 jp a01248
4012   967B 3E 08       a01012 ld a,8
4013   967D 21 24 7D           ld hl,varo
4014   9680 BE                 cp (hl)
4015   9681 D2 AD 96           jp nc,a01102
4016   9684 AF                 xor a
4017   9685 32 26 7D           ld (varq),a
4018   9688 3E 0F              ld a,15
4019   968A DD BE 08           cp (ix+8)
4020   968D D2 9E 96           jp nc,a01075
4021   9690 0E 10              ld c,16
4022   9692 DD 7E 08           ld a,(ix+8)
4023   9695 91                 sub c
4024   9696 DD 77 08           ld (ix+8),a
4025   9699 3E 01              ld a,1
4026   969B 32 26 7D           ld (varq),a
4027   969E CD 35 8A    a01075 call cangu
4028   96A1 C2 AD 96           jp nz,a01102
4029   96A4 0E FF              ld c,255
4030   96A6 DD 7E 08           ld a,(ix+8)
4031   96A9 81                 add a,c
4032   96AA DD 77 08           ld (ix+8),a
4033   96AD 3E 09       a01102 ld a,9
4034   96AF 21 24 7D           ld hl,varo
4035   96B2 BE                 cp (hl)
4036   96B3 D2 CD 96           jp nc,a01158
4037   96B6 CD 35 8A           call cangu
4038   96B9 C2 C8 96           jp nz,a01149
4039   96BC 0E FF              ld c,255
4040   96BE DD 7E 08           ld a,(ix+8)
4041   96C1 81                 add a,c
4042   96C2 DD 77 08           ld (ix+8),a
4043   96C5 C3 CD 96           jp a01158
4044   96C8 3E 01       a01149 ld a,1
4045   96CA 32 24 7D           ld (varo),a
4046   96CD 3E 0A       a01158 ld a,10
4047   96CF 21 24 7D           ld hl,varo
4048   96D2 BE                 cp (hl)
4049   96D3 D2 ED 96           jp nc,a01214
4050   96D6 CD 35 8A           call cangu
4051   96D9 C2 E8 96           jp nz,a01206
4052   96DC 0E FF              ld c,255
4053   96DE DD 7E 08           ld a,(ix+8)
4054   96E1 81                 add a,c
4055   96E2 DD 77 08           ld (ix+8),a
4056   96E5 C3 ED 96           jp a01214
4057   96E8 3E 01       a01206 ld a,1
4058   96EA 32 24 7D           ld (varo),a
4059   96ED 3E 01       a01214 ld a,1
4060   96EF 21 26 7D           ld hl,varq
4061   96F2 BE                 cp (hl)
4062   96F3 C2 FF 96           jp nz,a01248
4063   96F6 0E 10              ld c,16
4064   96F8 DD 7E 08           ld a,(ix+8)
4065   96FB 81                 add a,c
4066   96FC DD 77 08           ld (ix+8),a
4067   96FF 3A 25 7D    a01248 ld a,(varp)
4068   9702 FE 08              cp 8
4069   9704 D2 63 97           jp nc,a01420
4070   9707 AF                 xor a
4071   9708 21 25 7D           ld hl,varp
4072   970B BE                 cp (hl)
4073   970C D2 24 97           jp nc,a01312
4074   970F CD 86 8A           call cangr
4075   9712 C2 1F 97           jp nz,a01303
4076   9715 DD 7E 09           ld a,(ix+9)
4077   9718 3C                 inc a
4078   9719 DD 77 09           ld (ix+9),a
4079   971C C3 24 97           jp a01312
4080   971F 3E 0A       a01303 ld a,10
4081   9721 32 25 7D           ld (varp),a
4082   9724 3E 01       a01312 ld a,1
4083   9726 21 25 7D           ld hl,varp
4084   9729 BE                 cp (hl)
4085   972A D2 42 97           jp nc,a01364
4086   972D CD 86 8A           call cangr
4087   9730 C2 3D 97           jp nz,a01355
4088   9733 DD 7E 09           ld a,(ix+9)
4089   9736 3C                 inc a
4090   9737 DD 77 09           ld (ix+9),a
4091   973A C3 42 97           jp a01364
4092   973D 3E 0A       a01355 ld a,10
4093   973F 32 25 7D           ld (varp),a
4094   9742 3E 02       a01364 ld a,2
4095   9744 21 25 7D           ld hl,varp
4096   9747 BE                 cp (hl)
4097   9748 D2 60 97           jp nc,a01415
4098   974B CD 86 8A           call cangr
4099   974E C2 5B 97           jp nz,a01407
4100   9751 DD 7E 09           ld a,(ix+9)
4101   9754 3C                 inc a
4102   9755 DD 77 09           ld (ix+9),a
4103   9758 C3 60 97           jp a01415
4104   975B 3E 0A       a01407 ld a,10
4105   975D 32 25 7D           ld (varp),a
4106   9760 C3 C3 97    a01415 jp a01588
4107   9763 3E 08       a01420 ld a,8
4108   9765 21 25 7D           ld hl,varp
4109   9768 BE                 cp (hl)
4110   9769 D2 83 97           jp nc,a01476
4111   976C CD 7B 8A           call cangl
4112   976F C2 7E 97           jp nz,a01467
4113   9772 0E FF              ld c,255
4114   9774 DD 7E 09           ld a,(ix+9)
4115   9777 81                 add a,c
4116   9778 DD 77 09           ld (ix+9),a
4117   977B C3 83 97           jp a01476
4118   977E 3E 02       a01467 ld a,2
4119   9780 32 25 7D           ld (varp),a
4120   9783 3E 09       a01476 ld a,9
4121   9785 21 25 7D           ld hl,varp
4122   9788 BE                 cp (hl)
4123   9789 D2 A3 97           jp nc,a01532
4124   978C CD 7B 8A           call cangl
4125   978F C2 9E 97           jp nz,a01523
4126   9792 0E FF              ld c,255
4127   9794 DD 7E 09           ld a,(ix+9)
4128   9797 81                 add a,c
4129   9798 DD 77 09           ld (ix+9),a
4130   979B C3 A3 97           jp a01532
4131   979E 3E 02       a01523 ld a,2
4132   97A0 32 25 7D           ld (varp),a
4133   97A3 3E 0A       a01532 ld a,10
4134   97A5 21 25 7D           ld hl,varp
4135   97A8 BE                 cp (hl)
4136   97A9 D2 C3 97           jp nc,a01588
4137   97AC CD 7B 8A           call cangl
4138   97AF C2 BE 97           jp nz,a01580
4139   97B2 0E FF              ld c,255
4140   97B4 DD 7E 09           ld a,(ix+9)
4141   97B7 81                 add a,c
4142   97B8 DD 77 09           ld (ix+9),a
4143   97BB C3 C3 97           jp a01588
4144   97BE 3E 02       a01580 ld a,2
4145   97C0 32 25 7D           ld (varp),a
4146   97C3 AF          a01588 xor a
4147   97C4 21 25 7D           ld hl,varp
4148   97C7 BE                 cp (hl)
4149   97C8 D2 18 98           jp nc,a01741
4150   97CB CD 58 8A           call cangd
4151   97CE C2 D4 97           jp nz,a01618
4152   97D1 C3 18 98           jp a01741
4153   97D4 DD 7E 09    a01618 ld a,(ix+9)
4154   97D7 21 17 7D           ld hl,varb
4155   97DA BE                 cp (hl)
4156   97DB D2 DE 97           jp nc,a01636
4157   97DE 3A 17 7D    a01636 ld a,(varb)
4158   97E1 DD BE 09           cp (ix+9)
4159   97E4 D2 E7 97           jp nc,a01650
4160   97E7 AF          a01650 xor a
4161   97E8 32 26 7D           ld (varq),a
4162   97EB AF                 xor a
4163   97EC 21 18 7D           ld hl,varc
4164   97EF BE                 cp (hl)
4165   97F0 C2 F8 97           jp nz,a01683
4166   97F3 3E 01              ld a,1
4167   97F5 32 26 7D           ld (varq),a
4168   97F8 3E 02       a01683 ld a,2
4169   97FA 21 18 7D           ld hl,varc
4170   97FD BE                 cp (hl)
4171   97FE C2 06 98           jp nz,a01708
4172   9801 3E 01              ld a,1
4173   9803 32 26 7D           ld (varq),a
4174   9806 3E 01       a01708 ld a,1
4175   9808 21 26 7D           ld hl,varq
4176   980B BE                 cp (hl)
4177   980C C2 18 98           jp nz,a01741
4178   980F 3E 05              ld a,5
4179   9811 32 C5 7F           ld (sndtyp),a
4180   9814 AF                 xor a
4181   9815 CD 31 8F           call animsp
4182   9818 3A 09 7D    a01741 ld a,(joyval)
4183   981B E6 01              and 1
4184   981D CA B6 98           jp z,a02026
4185   9820 3E 08              ld a,8
4186   9822 21 25 7D           ld hl,varp
4187   9825 BE                 cp (hl)
4188   9826 D2 77 98           jp nc,a01909
4189   9829 CD 58 8A           call cangd
4190   982C C2 3B 98           jp nz,a01802
4191   982F 0E FF              ld c,255
4192   9831 3A 25 7D           ld a,(varp)
4193   9834 81                 add a,c
4194   9835 32 25 7D           ld (varp),a
4195   9838 C3 74 98           jp a01905
4196   983B 3A 09 7D    a01802 ld a,(joyval)
4197   983E E6 02              and 2
4198   9840 CA 46 98           jp z,a01820
4199   9843 C3 74 98           jp a01905
4200   9846 3E 03       a01820 ld a,3
4201   9848 DD 77 06           ld (ix+6),a
4202   984B 3E 01              ld a,1
4203   984D DD 77 07           ld (ix+7),a
4204   9850 3E 02              ld a,2
4205   9852 21 18 7D           ld hl,varc
4206   9855 BE                 cp (hl)
4207   9856 C2 5E 98           jp nz,a01862
4208   9859 3E 0A              ld a,10
4209   985B 32 C5 7F           ld (sndtyp),a
4210   985E AF          a01862 xor a
4211   985F 21 18 7D           ld hl,varc
4212   9862 BE                 cp (hl)
4213   9863 C2 74 98           jp nz,a01905
4214   9866 3E 0A              ld a,10
4215   9868 32 C5 7F           ld (sndtyp),a
4216   986B 0E FF              ld c,255
4217   986D 3A 25 7D           ld a,(varp)
4218   9870 81                 add a,c
4219   9871 32 25 7D           ld (varp),a
4220   9874 C3 7B 98    a01905 jp a01917
4221   9877 AF          a01909 xor a
4222   9878 DD 77 06           ld (ix+6),a
4223   987B 3A 25 7D    a01917 ld a,(varp)
4224   987E FE 03              cp 3
4225   9880 D2 B3 98           jp nc,a02021
4226   9883 AF                 xor a
4227   9884 21 25 7D           ld hl,varp
4228   9887 BE                 cp (hl)
4229   9888 C2 A4 98           jp nz,a01992
4230   988B AF                 xor a
4231   988C 21 18 7D           ld hl,varc
4232   988F BE                 cp (hl)
4233   9890 C2 9D 98           jp nz,a01980
4234   9893 3A 25 7D           ld a,(varp)
4235   9896 3C                 inc a
4236   9897 32 25 7D           ld (varp),a
4237   989A C3 A1 98           jp a01988
4238   989D AF          a01980 xor a
4239   989E CD 31 8F           call animsp
4240   98A1 C3 B3 98    a01988 jp a02021
4241   98A4 AF          a01992 xor a
4242   98A5 21 18 7D           ld hl,varc
4243   98A8 BE                 cp (hl)
4244   98A9 C2 B3 98           jp nz,a02021
4245   98AC 3A 25 7D           ld a,(varp)
4246   98AF 3C                 inc a
4247   98B0 32 25 7D           ld (varp),a
4248   98B3 C3 0F 99    a02021 jp a02185
4249   98B6 3A 09 7D    a02026 ld a,(joyval)
4250   98B9 E6 02              and 2
4251   98BB CA C1 98           jp z,a02043
4252   98BE C3 0F 99           jp a02185
4253   98C1 AF          a02043 xor a
4254   98C2 21 25 7D           ld hl,varp
4255   98C5 BE                 cp (hl)
4256   98C6 D2 0F 99           jp nc,a02185
4257   98C9 CD 58 8A           call cangd
4258   98CC C2 D2 98           jp nz,a02073
4259   98CF C3 0F 99           jp a02185
4260   98D2 AF          a02073 xor a
4261   98D3 21 18 7D           ld hl,varc
4262   98D6 BE                 cp (hl)
4263   98D7 C2 E8 98           jp nz,a02116
4264   98DA 3E 0A              ld a,10
4265   98DC 32 C5 7F           ld (sndtyp),a
4266   98DF 0E FF              ld c,255
4267   98E1 3A 25 7D           ld a,(varp)
4268   98E4 81                 add a,c
4269   98E5 32 25 7D           ld (varp),a
4270   98E8 3E 02       a02116 ld a,2
4271   98EA 21 18 7D           ld hl,varc
4272   98ED BE                 cp (hl)
4273   98EE C2 F6 98           jp nz,a02142
4274   98F1 3E 0A              ld a,10
4275   98F3 32 C5 7F           ld (sndtyp),a
4276   98F6 3E 02       a02142 ld a,2
4277   98F8 DD 77 06           ld (ix+6),a
4278   98FB 3E 01              ld a,1
4279   98FD DD 77 07           ld (ix+7),a
4280   9900 DD 7E 09           ld a,(ix+9)
4281   9903 21 17 7D           ld hl,varb
4282   9906 BE                 cp (hl)
4283   9907 D2 0F 99           jp nc,a02185
4284   990A 3E 03              ld a,3
4285   990C DD 77 06           ld (ix+6),a
4286   990F 3A 09 7D    a02185 ld a,(joyval)
4287   9912 E6 02              and 2
4288   9914 CA B4 99           jp z,a02482
4289   9917 3E 08              ld a,8
4290   9919 21 25 7D           ld hl,varp
4291   991C BE                 cp (hl)
4292   991D D2 2F 99           jp nc,a02244
4293   9920 AF                 xor a
4294   9921 21 18 7D           ld hl,varc
4295   9924 BE                 cp (hl)
4296   9925 C2 2F 99           jp nz,a02244
4297   9928 3A 25 7D           ld a,(varp)
4298   992B 3C                 inc a
4299   992C 32 25 7D           ld (varp),a
4300   992F 3E 0B       a02244 ld a,11
4301   9931 21 25 7D           ld hl,varp
4302   9934 BE                 cp (hl)
4303   9935 D2 3D 99           jp nc,a02269
4304   9938 3E 0B              ld a,11
4305   993A 32 25 7D           ld (varp),a
4306   993D AF          a02269 xor a
4307   993E 21 25 7D           ld hl,varp
4308   9941 BE                 cp (hl)
4309   9942 C2 59 99           jp nz,a02323
4310   9945 AF                 xor a
4311   9946 21 18 7D           ld hl,varc
4312   9949 BE                 cp (hl)
4313   994A C2 55 99           jp nz,a02315
4314   994D 3E 09              ld a,9
4315   994F 32 25 7D           ld (varp),a
4316   9952 C3 59 99           jp a02323
4317   9955 AF          a02315 xor a
4318   9956 CD 31 8F           call animsp
4319   9959 3A 25 7D    a02323 ld a,(varp)
4320   995C FE 05              cp 5
4321   995E D2 AF 99           jp nc,a02473
4322   9961 CD 58 8A           call cangd
4323   9964 C2 73 99           jp nz,a02367
4324   9967 0E FF              ld c,255
4325   9969 3A 25 7D           ld a,(varp)
4326   996C 81                 add a,c
4327   996D 32 25 7D           ld (varp),a
4328   9970 C3 AC 99           jp a02469
4329   9973 3A 09 7D    a02367 ld a,(joyval)
4330   9976 E6 01              and 1
4331   9978 CA 7E 99           jp z,a02384
4332   997B C3 AC 99           jp a02469
4333   997E 3E 02       a02384 ld a,2
4334   9980 DD 77 06           ld (ix+6),a
4335   9983 3E 01              ld a,1
4336   9985 DD 77 07           ld (ix+7),a
4337   9988 3E 02              ld a,2
4338   998A 21 18 7D           ld hl,varc
4339   998D BE                 cp (hl)
4340   998E C2 96 99           jp nz,a02426
4341   9991 3E 0A              ld a,10
4342   9993 32 C5 7F           ld (sndtyp),a
4343   9996 AF          a02426 xor a
4344   9997 21 18 7D           ld hl,varc
4345   999A BE                 cp (hl)
4346   999B C2 AC 99           jp nz,a02469
4347   999E 3E 0A              ld a,10
4348   99A0 32 C5 7F           ld (sndtyp),a
4349   99A3 0E FF              ld c,255
4350   99A5 3A 25 7D           ld a,(varp)
4351   99A8 81                 add a,c
4352   99A9 32 25 7D           ld (varp),a
4353   99AC C3 B4 99    a02469 jp a02482
4354   99AF 3E 01       a02473 ld a,1
4355   99B1 DD 77 06           ld (ix+6),a
4356   99B4 3A 09 7D    a02482 ld a,(joyval)
4357   99B7 E6 10              and 16
4358   99B9 CA F4 99           jp z,a02593
4359   99BC AF                 xor a
4360   99BD DD BE 0C           cp (ix+12)
4361   99C0 C2 EF 99           jp nz,a02585
4362   99C3 3E 0A              ld a,10
4363   99C5 32 C5 7F           ld (sndtyp),a
4364   99C8 3E 09              ld a,9
4365   99CA 21 24 7D           ld hl,varo
4366   99CD BE                 cp (hl)
4367   99CE D2 E2 99           jp nc,a02563
4368   99D1 3A 24 7D           ld a,(varo)
4369   99D4 FE 0D              cp 13
4370   99D6 D2 E2 99           jp nc,a02563
4371   99D9 0E 02              ld c,2
4372   99DB 3A 24 7D           ld a,(varo)
4373   99DE 81                 add a,c
4374   99DF 32 24 7D           ld (varo),a
4375   99E2 3A 24 7D    a02563 ld a,(varo)
4376   99E5 FE 05              cp 5
4377   99E7 D2 EF 99           jp nc,a02585
4378   99EA 3E 0B              ld a,11
4379   99EC 32 24 7D           ld (varo),a
4380   99EF 3E 02       a02585 ld a,2
4381   99F1 DD 77 0C           ld (ix+12),a
4382   99F4 AF          a02593 xor a
4383   99F5 32 2F 7D           ld (charx),a
4384   99F8 AF                 xor a
4385   99F9 32 30 7D           ld (chary),a
4386   99FC AF                 xor a
4387   99FD DD BE 0C           cp (ix+12)
4388   9A00 D2 1F 9A           jp nc,a02671
4389   9A03 3A 09 7D           ld a,(joyval)
4390   9A06 E6 10              and 16
4391   9A08 CA 0E 9A           jp z,a02640
4392   9A0B C3 1F 9A           jp a02671
4393   9A0E DD 7E 0C    a02640 ld a,(ix+12)
4394   9A11 FE 07              cp 7
4395   9A13 D2 1F 9A           jp nc,a02671
4396   9A16 0E FF              ld c,255
4397   9A18 DD 7E 0C           ld a,(ix+12)
4398   9A1B 81                 add a,c
4399   9A1C DD 77 0C           ld (ix+12),a
4400   9A1F CD 58 8A    a02671 call cangd
4401   9A22 C2 98 9A           jp nz,a02887
4402   9A25 DD 7E 06           ld a,(ix+6)
4403   9A28 FE 02              cp 2
4404   9A2A D2 36 9A           jp nc,a02710
4405   9A2D 0E 02              ld c,2
4406   9A2F DD 7E 06           ld a,(ix+6)
4407   9A32 81                 add a,c
4408   9A33 DD 77 06           ld (ix+6),a
4409   9A36 3A 09 7D    a02710 ld a,(joyval)
4410   9A39 E6 10              and 16
4411   9A3B CA 68 9A           jp z,a02799
4412   9A3E DD 7E 07           ld a,(ix+7)
4413   9A41 FE 02              cp 2
4414   9A43 D2 65 9A           jp nc,a02795
4415   9A46 AF                 xor a
4416   9A47 21 18 7D           ld hl,varc
4417   9A4A BE                 cp (hl)
4418   9A4B C2 55 9A           jp nz,a02765
4419   9A4E DD 7E 07           ld a,(ix+7)
4420   9A51 3C                 inc a
4421   9A52 DD 77 07           ld (ix+7),a
4422   9A55 3E 02       a02765 ld a,2
4423   9A57 21 18 7D           ld hl,varc
4424   9A5A BE                 cp (hl)
4425   9A5B C2 65 9A           jp nz,a02795
4426   9A5E DD 7E 07           ld a,(ix+7)
4427   9A61 3C                 inc a
4428   9A62 DD 77 07           ld (ix+7),a
4429   9A65 C3 6C 9A    a02795 jp a02807
4430   9A68 AF          a02799 xor a
4431   9A69 DD 77 07           ld (ix+7),a
4432   9A6C AF          a02807 xor a
4433   9A6D 21 18 7D           ld hl,varc
4434   9A70 BE                 cp (hl)
4435   9A71 C2 95 9A           jp nz,a02883
4436   9A74 3E 08              ld a,8
4437   9A76 21 24 7D           ld hl,varo
4438   9A79 BE                 cp (hl)
4439   9A7A D2 86 9A           jp nc,a02858
4440   9A7D 0E FF              ld c,255
4441   9A7F 3A 24 7D           ld a,(varo)
4442   9A82 81                 add a,c
4443   9A83 32 24 7D           ld (varo),a
4444   9A86 3A 24 7D    a02858 ld a,(varo)
4445   9A89 FE 04              cp 4
4446   9A8B D2 95 9A           jp nc,a02883
4447   9A8E 3A 24 7D           ld a,(varo)
4448   9A91 3C                 inc a
4449   9A92 32 24 7D           ld (varo),a
4450   9A95 C3 D4 9A    a02883 jp a02996
4451   9A98 AF          a02887 xor a
4452   9A99 DD BE 0C           cp (ix+12)
4453   9A9C C2 A3 9A           jp nz,a02908
4454   9A9F AF                 xor a
4455   9AA0 32 24 7D           ld (varo),a
4456   9AA3 AF          a02908 xor a
4457   9AA4 21 25 7D           ld hl,varp
4458   9AA7 BE                 cp (hl)
4459   9AA8 C2 D4 9A           jp nz,a02996
4460   9AAB 3E 01              ld a,1
4461   9AAD DD BE 06           cp (ix+6)
4462   9AB0 D2 C3 9A           jp nc,a02966
4463   9AB3 0E 02              ld c,2
4464   9AB5 DD 7E 06           ld a,(ix+6)
4465   9AB8 91                 sub c
4466   9AB9 DD 77 06           ld (ix+6),a
4467   9ABC AF                 xor a
4468   9ABD DD 77 07           ld (ix+7),a
4469   9AC0 C3 D4 9A           jp a02996
4470   9AC3 3E 01       a02966 ld a,1
4471   9AC5 DD BE 06           cp (ix+6)
4472   9AC8 D2 D4 9A           jp nc,a02996
4473   9ACB 0E FE              ld c,254
4474   9ACD DD 7E 06           ld a,(ix+6)
4475   9AD0 81                 add a,c
4476   9AD1 DD 77 06           ld (ix+6),a
4477   9AD4 3A 24 7D    a02996 ld a,(varo)
4478   9AD7 87                 add a,a
4479   9AD8 87                 add a,a
4480   9AD9 87                 add a,a
4481   9ADA 87                 add a,a
4482   9ADB 32 24 7D           ld (varo),a
4483   9ADE 3A 25 7D           ld a,(varp)
4484   9AE1 4F                 ld c,a
4485   9AE2 3A 24 7D           ld a,(varo)
4486   9AE5 81                 add a,c
4487   9AE6 32 24 7D           ld (varo),a
4488   9AE9 3A 24 7D           ld a,(varo)
4489   9AEC DD 77 0A           ld (ix+10),a
4490   9AEF DD 7E 08           ld a,(ix+8)
4491   9AF2 32 16 7D           ld (vara),a
4492   9AF5 DD 7E 09           ld a,(ix+9)
4493   9AF8 32 17 7D           ld (varb),a
4494   9AFB 3E 01       a03071 ld a,1
4495   9AFD 21 1A 7D           ld hl,vare
4496   9B00 BE                 cp (hl)
4497   9B01 C2 2E 9B           jp nz,a03163
4498   9B04 3E 06              ld a,6
4499   9B06 E6 07              and 7
4500   9B08 4F                 ld c,a
4501   9B09 CD 54 80           call cspr
4502   9B0C 3E 0F              ld a,15
4503   9B0E DD BE 08           cp (ix+8)
4504   9B11 D2 2E 9B           jp nc,a03163
4505   9B14 0E 10              ld c,16
4506   9B16 DD 7E 08           ld a,(ix+8)
4507   9B19 91                 sub c
4508   9B1A DD 77 08           ld (ix+8),a
4509   9B1D 3E 02              ld a,2
4510   9B1F E6 07              and 7
4511   9B21 4F                 ld c,a
4512   9B22 CD 54 80           call cspr
4513   9B25 0E 10              ld c,16
4514   9B27 DD 7E 08           ld a,(ix+8)
4515   9B2A 81                 add a,c
4516   9B2B DD 77 08           ld (ix+8),a
4517   9B2E C9          a03163 ret
4518   9B2F             evnt01 equ $
4519   9B2F DD 7E 0A           ld a,(ix+10)
4520   9B32 32 24 7D           ld (varo),a
4521   9B35 DD 7E 0A           ld a,(ix+10)
4522   9B38 32 32 7D           ld (varrnd),a
4523   9B3B 3A 32 7D           ld a,(varrnd)
4524   9B3E CB 3F              srl a
4525   9B40 32 32 7D           ld (varrnd),a
4526   9B43 3A 32 7D           ld a,(varrnd)
4527   9B46 32 25 7D           ld (varp),a
4528   9B49 3A 32 7D           ld a,(varrnd)
4529   9B4C 87                 add a,a
4530   9B4D 32 32 7D           ld (varrnd),a
4531   9B50 3A 32 7D           ld a,(varrnd)
4532   9B53 4F                 ld c,a
4533   9B54 3A 24 7D           ld a,(varo)
4534   9B57 91                 sub c
4535   9B58 32 24 7D           ld (varo),a
4536   9B5B 3A 25 7D           ld a,(varp)
4537   9B5E 32 32 7D           ld (varrnd),a
4538   9B61 3A 32 7D           ld a,(varrnd)
4539   9B64 CB 3F              srl a
4540   9B66 32 32 7D           ld (varrnd),a
4541   9B69 3A 32 7D           ld a,(varrnd)
4542   9B6C 87                 add a,a
4543   9B6D 32 32 7D           ld (varrnd),a
4544   9B70 3A 32 7D           ld a,(varrnd)
4545   9B73 4F                 ld c,a
4546   9B74 3A 25 7D           ld a,(varp)
4547   9B77 91                 sub c
4548   9B78 32 25 7D           ld (varp),a
4549   9B7B 3A 32 7D           ld a,(varrnd)
4550   9B7E CB 3F              srl a
4551   9B80 32 32 7D           ld (varrnd),a
4552   9B83 3A 32 7D           ld a,(varrnd)
4553   9B86 DD 77 0A           ld (ix+10),a
4554   9B89 AF                 xor a
4555   9B8A 32 32 7D           ld (varrnd),a
4556   9B8D 06 00              ld b,0
4557   9B8F CD 5F 8F           call sktyp
4558   9B92 D2 A3 9B           jp nc,b00210
4559   9B95 3A 16 7D           ld a,(vara)
4560   9B98 DD BE 08           cp (ix+8)
4561   9B9B D2 A3 9B           jp nc,b00210
4562   9B9E 3E 01              ld a,1
4563   9BA0 32 32 7D           ld (varrnd),a
4564   9BA3 0E 10       b00210 ld c,16
4565   9BA5 DD 7E 08           ld a,(ix+8)
4566   9BA8 91                 sub c
4567   9BA9 DD 77 08           ld (ix+8),a
4568   9BAC 06 00              ld b,0
4569   9BAE CD 5F 8F           call sktyp
4570   9BB1 D2 C2 9B           jp nc,b00262
4571   9BB4 3A 16 7D           ld a,(vara)
4572   9BB7 DD BE 08           cp (ix+8)
4573   9BBA D2 C2 9B           jp nc,b00262
4574   9BBD 3E 01              ld a,1
4575   9BBF 32 32 7D           ld (varrnd),a
4576   9BC2 0E 10       b00262 ld c,16
4577   9BC4 DD 7E 08           ld a,(ix+8)
4578   9BC7 81                 add a,c
4579   9BC8 DD 77 08           ld (ix+8),a
4580   9BCB 3E 01              ld a,1
4581   9BCD 21 32 7D           ld hl,varrnd
4582   9BD0 BE                 cp (hl)
4583   9BD1 C2 03 9C           jp nz,b00382
4584   9BD4 0E 04              ld c,4
4585   9BD6 DD 7E 0A           ld a,(ix+10)
4586   9BD9 81                 add a,c
4587   9BDA DD 77 0A           ld (ix+10),a
4588   9BDD DD 7E 0A           ld a,(ix+10)
4589   9BE0 CD B9 86           call getob
4590   9BE3 0E 04              ld c,4
4591   9BE5 DD 7E 0A           ld a,(ix+10)
4592   9BE8 91                 sub c
4593   9BE9 DD 77 0A           ld (ix+10),a
4594   9BEC 3E 01              ld a,1
4595   9BEE 32 1D 7D           ld (varh),a
4596   9BF1 3E 14              ld a,20
4597   9BF3 DD 77 0C           ld (ix+12),a
4598   9BF6 DD 7E 0A           ld a,(ix+10)
4599   9BF9 87                 add a,a
4600   9BFA DD 77 0A           ld (ix+10),a
4601   9BFD 3E 02              ld a,2
4602   9BFF DD 77 05           ld (ix+5),a
4603   9C02 C9                 ret
4604   9C03 0E 14       b00382 ld c,20
4605   9C05 DD 7E 08           ld a,(ix+8)
4606   9C08 91                 sub c
4607   9C09 DD 77 08           ld (ix+8),a
4608   9C0C CD 35 8A           call cangu
4609   9C0F C2 6A 9C           jp nz,b00576
4610   9C12 3E 14              ld a,20
4611   9C14 57                 ld d,a
4612   9C15 CD 80 8B           call random
4613   9C18 67                 ld h,a
4614   9C19 CD E4 84           call imul
4615   9C1C 7C                 ld a,h
4616   9C1D 32 32 7D           ld (varrnd),a
4617   9C20 AF                 xor a
4618   9C21 21 32 7D           ld hl,varrnd
4619   9C24 BE                 cp (hl)
4620   9C25 C2 3E 9C           jp nz,b00492
4621   9C28 DD 7E 08           ld a,(ix+8)
4622   9C2B 21 16 7D           ld hl,vara
4623   9C2E BE                 cp (hl)
4624   9C2F D2 39 9C           jp nc,b00484
4625   9C32 AF                 xor a
4626   9C33 32 25 7D           ld (varp),a
4627   9C36 C3 3E 9C           jp b00492
4628   9C39 3E 01       b00484 ld a,1
4629   9C3B 32 25 7D           ld (varp),a
4630   9C3E 3E 14       b00492 ld a,20
4631   9C40 57                 ld d,a
4632   9C41 CD 80 8B           call random
4633   9C44 67                 ld h,a
4634   9C45 CD E4 84           call imul
4635   9C48 7C                 ld a,h
4636   9C49 32 32 7D           ld (varrnd),a
4637   9C4C AF                 xor a
4638   9C4D 21 32 7D           ld hl,varrnd
4639   9C50 BE                 cp (hl)
4640   9C51 C2 6A 9C           jp nz,b00576
4641   9C54 DD 7E 09           ld a,(ix+9)
4642   9C57 21 17 7D           ld hl,varb
4643   9C5A BE                 cp (hl)
4644   9C5B D2 65 9C           jp nc,b00568
4645   9C5E AF                 xor a
4646   9C5F 32 24 7D           ld (varo),a
4647   9C62 C3 6A 9C           jp b00576
4648   9C65 3E 01       b00568 ld a,1
4649   9C67 32 24 7D           ld (varo),a
4650   9C6A 0E 14       b00576 ld c,20
4651   9C6C DD 7E 08           ld a,(ix+8)
4652   9C6F 81                 add a,c
4653   9C70 DD 77 08           ld (ix+8),a
4654   9C73 AF                 xor a
4655   9C74 21 24 7D           ld hl,varo
4656   9C77 BE                 cp (hl)
4657   9C78 C2 B2 9C           jp nz,b00703
4658   9C7B 0E 10              ld c,16
4659   9C7D DD 7E 09           ld a,(ix+9)
4660   9C80 81                 add a,c
4661   9C81 DD 77 09           ld (ix+9),a
4662   9C84 06 01              ld b,1
4663   9C86 CD 5F 8F           call sktyp
4664   9C89 D2 91 9C           jp nc,b00648
4665   9C8C 3E 01              ld a,1
4666   9C8E 32 24 7D           ld (varo),a
4667   9C91 0E 10       b00648 ld c,16
4668   9C93 DD 7E 09           ld a,(ix+9)
4669   9C96 91                 sub c
4670   9C97 DD 77 09           ld (ix+9),a
4671   9C9A CD 86 8A           call cangr
4672   9C9D C2 AA 9C           jp nz,b00691
4673   9CA0 DD 7E 09           ld a,(ix+9)
4674   9CA3 3C                 inc a
4675   9CA4 DD 77 09           ld (ix+9),a
4676   9CA7 C3 AF 9C           jp b00699
4677   9CAA 3E 01       b00691 ld a,1
4678   9CAC 32 24 7D           ld (varo),a
4679   9CAF C3 E4 9C    b00699 jp b00792
4680   9CB2 0E 10       b00703 ld c,16
4681   9CB4 DD 7E 09           ld a,(ix+9)
4682   9CB7 91                 sub c
4683   9CB8 DD 77 09           ld (ix+9),a
4684   9CBB 06 01              ld b,1
4685   9CBD CD 5F 8F           call sktyp
4686   9CC0 D2 C7 9C           jp nc,b00741
4687   9CC3 AF                 xor a
4688   9CC4 32 24 7D           ld (varo),a
4689   9CC7 0E 10       b00741 ld c,16
4690   9CC9 DD 7E 09           ld a,(ix+9)
4691   9CCC 81                 add a,c
4692   9CCD DD 77 09           ld (ix+9),a
4693   9CD0 CD 7B 8A           call cangl
4694   9CD3 C2 E0 9C           jp nz,b00784
4695   9CD6 DD 7E 09           ld a,(ix+9)
4696   9CD9 3D                 dec a
4697   9CDA DD 77 09           ld (ix+9),a
4698   9CDD C3 E4 9C           jp b00792
4699   9CE0 AF          b00784 xor a
4700   9CE1 32 24 7D           ld (varo),a
4701   9CE4 AF          b00792 xor a
4702   9CE5 21 25 7D           ld hl,varp
4703   9CE8 BE                 cp (hl)
4704   9CE9 C2 44 9D           jp nz,b00963
4705   9CEC 0E 10              ld c,16
4706   9CEE DD 7E 08           ld a,(ix+8)
4707   9CF1 81                 add a,c
4708   9CF2 DD 77 08           ld (ix+8),a
4709   9CF5 06 01              ld b,1
4710   9CF7 CD 5F 8F           call sktyp
4711   9CFA D2 02 9D           jp nc,b00847
4712   9CFD 3E 01              ld a,1
4713   9CFF 32 25 7D           ld (varp),a
4714   9D02 0E 10       b00847 ld c,16
4715   9D04 DD 7E 08           ld a,(ix+8)
4716   9D07 91                 sub c
4717   9D08 DD 77 08           ld (ix+8),a
4718   9D0B 3E 01              ld a,1
4719   9D0D 32 32 7D           ld (varrnd),a
4720   9D10 CD 58 8A           call cangd
4721   9D13 C2 19 9D           jp nz,b00886
4722   9D16 C3 1D 9D           jp b00894
4723   9D19 AF          b00886 xor a
4724   9D1A 32 32 7D           ld (varrnd),a
4725   9D1D 3E 8C       b00894 ld a,140
4726   9D1F DD BE 08           cp (ix+8)
4727   9D22 D2 29 9D           jp nc,b00916
4728   9D25 AF                 xor a
4729   9D26 32 32 7D           ld (varrnd),a
4730   9D29 3E 01       b00916 ld a,1
4731   9D2B 21 32 7D           ld hl,varrnd
4732   9D2E BE                 cp (hl)
4733   9D2F C2 3C 9D           jp nz,b00950
4734   9D32 DD 7E 08           ld a,(ix+8)
4735   9D35 3C                 inc a
4736   9D36 DD 77 08           ld (ix+8),a
4737   9D39 C3 41 9D           jp b00959
4738   9D3C 3E 01       b00950 ld a,1
4739   9D3E 32 25 7D           ld (varp),a
4740   9D41 C3 96 9D    b00959 jp b01112
4741   9D44 0E 10       b00963 ld c,16
4742   9D46 DD 7E 08           ld a,(ix+8)
4743   9D49 91                 sub c
4744   9D4A DD 77 08           ld (ix+8),a
4745   9D4D 06 01              ld b,1
4746   9D4F CD 5F 8F           call sktyp
4747   9D52 D2 59 9D           jp nc,b01000
4748   9D55 AF                 xor a
4749   9D56 32 25 7D           ld (varp),a
4750   9D59 3E 01       b01000 ld a,1
4751   9D5B 32 32 7D           ld (varrnd),a
4752   9D5E CD 35 8A           call cangu
4753   9D61 C2 67 9D           jp nz,b01023
4754   9D64 C3 6B 9D           jp b01031
4755   9D67 AF          b01023 xor a
4756   9D68 32 32 7D           ld (varrnd),a
4757   9D6B 0E 10       b01031 ld c,16
4758   9D6D DD 7E 08           ld a,(ix+8)
4759   9D70 81                 add a,c
4760   9D71 DD 77 08           ld (ix+8),a
4761   9D74 AF                 xor a
4762   9D75 DD BE 08           cp (ix+8)
4763   9D78 C2 7F 9D           jp nz,b01069
4764   9D7B AF                 xor a
4765   9D7C 32 32 7D           ld (varrnd),a
4766   9D7F 3E 01       b01069 ld a,1
4767   9D81 21 32 7D           ld hl,varrnd
4768   9D84 BE                 cp (hl)
4769   9D85 C2 92 9D           jp nz,b01104
4770   9D88 DD 7E 08           ld a,(ix+8)
4771   9D8B 3D                 dec a
4772   9D8C DD 77 08           ld (ix+8),a
4773   9D8F C3 96 9D           jp b01112
4774   9D92 AF          b01104 xor a
4775   9D93 32 25 7D           ld (varp),a
4776   9D96 AF          b01112 xor a
4777   9D97 21 24 7D           ld hl,varo
4778   9D9A BE                 cp (hl)
4779   9D9B C2 A6 9D           jp nz,b01141
4780   9D9E 3E 07              ld a,7
4781   9DA0 DD 77 06           ld (ix+6),a
4782   9DA3 C3 AB 9D           jp b01149
4783   9DA6 3E 06       b01141 ld a,6
4784   9DA8 DD 77 06           ld (ix+6),a
4785   9DAB AF          b01149 xor a
4786   9DAC 32 32 7D           ld (varrnd),a
4787   9DAF AF                 xor a
4788   9DB0 21 18 7D           ld hl,varc
4789   9DB3 BE                 cp (hl)
4790   9DB4 C2 BC 9D           jp nz,b01183
4791   9DB7 3E 01              ld a,1
4792   9DB9 32 32 7D           ld (varrnd),a
4793   9DBC 3E 02       b01183 ld a,2
4794   9DBE 21 18 7D           ld hl,varc
4795   9DC1 BE                 cp (hl)
4796   9DC2 C2 CA 9D           jp nz,b01208
4797   9DC5 3E 01              ld a,1
4798   9DC7 32 32 7D           ld (varrnd),a
4799   9DCA 3E 01       b01208 ld a,1
4800   9DCC 21 32 7D           ld hl,varrnd
4801   9DCF BE                 cp (hl)
4802   9DD0 C2 E0 9D           jp nz,b01250
4803   9DD3 3E 01              ld a,1
4804   9DD5 21 25 7D           ld hl,varp
4805   9DD8 BE                 cp (hl)
4806   9DD9 C2 E0 9D           jp nz,b01250
4807   9DDC AF                 xor a
4808   9DDD CD 31 8F           call animsp
4809   9DE0 0E 04       b01250 ld c,4
4810   9DE2 DD 7E 0A           ld a,(ix+10)
4811   9DE5 81                 add a,c
4812   9DE6 DD 77 0A           ld (ix+10),a
4813   9DE9 3E 10              ld a,16
4814   9DEB DD BE 08           cp (ix+8)
4815   9DEE D2 1D 9E           jp nc,b01359
4816   9DF1 0E 10              ld c,16
4817   9DF3 DD 7E 08           ld a,(ix+8)
4818   9DF6 91                 sub c
4819   9DF7 DD 77 08           ld (ix+8),a
4820   9DFA DD 7E 0A           ld a,(ix+10)
4821   9DFD CD B9 86           call getob
4822   9E00 DD 7E 09           ld a,(ix+9)
4823   9E03 67                 ld h,a
4824   9E04 DD 7E 08           ld a,(ix+8)
4825   9E07 6F                 ld l,a
4826   9E08 22 3A 7D           ld (dispx),hl
4827   9E0B DD 7E 0A           ld a,(ix+10)
4828   9E0E CD 09 87           call drpob
4829   9E11 0E 10              ld c,16
4830   9E13 DD 7E 08           ld a,(ix+8)
4831   9E16 81                 add a,c
4832   9E17 DD 77 08           ld (ix+8),a
4833   9E1A C3 23 9E           jp b01368
4834   9E1D DD 7E 0A    b01359 ld a,(ix+10)
4835   9E20 CD B9 86           call getob
4836   9E23 0E 04       b01368 ld c,4
4837   9E25 DD 7E 0A           ld a,(ix+10)
4838   9E28 91                 sub c
4839   9E29 DD 77 0A           ld (ix+10),a
4840   9E2C DD 7E 0A           ld a,(ix+10)
4841   9E2F 87                 add a,a
4842   9E30 87                 add a,a
4843   9E31 DD 77 0A           ld (ix+10),a
4844   9E34 3A 24 7D           ld a,(varo)
4845   9E37 4F                 ld c,a
4846   9E38 DD 7E 0A           ld a,(ix+10)
4847   9E3B 81                 add a,c
4848   9E3C DD 77 0A           ld (ix+10),a
4849   9E3F 3A 25 7D           ld a,(varp)
4850   9E42 4F                 ld c,a
4851   9E43 DD 7E 0A           ld a,(ix+10)
4852   9E46 81                 add a,c
4853   9E47 DD 77 0A           ld (ix+10),a
4854   9E4A 3A 25 7D           ld a,(varp)
4855   9E4D 4F                 ld c,a
4856   9E4E DD 7E 0A           ld a,(ix+10)
4857   9E51 81                 add a,c
4858   9E52 DD 77 0A           ld (ix+10),a
4859   9E55 C9                 ret
4860   9E56             evnt02 equ $
4861   9E56 3E 09              ld a,9
4862   9E58 DD 77 06           ld (ix+6),a
4863   9E5B AF                 xor a
4864   9E5C DD 77 07           ld (ix+7),a
4865   9E5F DD 7E 0A           ld a,(ix+10)
4866   9E62 32 25 7D           ld (varp),a
4867   9E65 DD 7E 0A           ld a,(ix+10)
4868   9E68 CB 3F              srl a
4869   9E6A DD 77 0A           ld (ix+10),a
4870   9E6D DD 7E 0A           ld a,(ix+10)
4871   9E70 32 26 7D           ld (varq),a
4872   9E73 3A 26 7D           ld a,(varq)
4873   9E76 87                 add a,a
4874   9E77 32 26 7D           ld (varq),a
4875   9E7A 3A 26 7D           ld a,(varq)
4876   9E7D 4F                 ld c,a
4877   9E7E 3A 25 7D           ld a,(varp)
4878   9E81 91                 sub c
4879   9E82 32 25 7D           ld (varp),a
4880   9E85 AF                 xor a
4881   9E86 DD BE 0C           cp (ix+12)
4882   9E89 D2 93 9E           jp nc,c00112
4883   9E8C DD 7E 0C           ld a,(ix+12)
4884   9E8F 3D                 dec a
4885   9E90 DD 77 0C           ld (ix+12),a
4886   9E93 AF          c00112 xor a
4887   9E94 DD BE 0C           cp (ix+12)
4888   9E97 C2 12 9F           jp nz,c00336
4889   9E9A AF                 xor a
4890   9E9B 32 32 7D           ld (varrnd),a
4891   9E9E 06 00              ld b,0
4892   9EA0 CD 5F 8F           call sktyp
4893   9EA3 D2 B4 9E           jp nc,c00169
4894   9EA6 3A 16 7D           ld a,(vara)
4895   9EA9 DD BE 08           cp (ix+8)
4896   9EAC D2 B4 9E           jp nc,c00169
4897   9EAF 3E 01              ld a,1
4898   9EB1 32 32 7D           ld (varrnd),a
4899   9EB4 0E 10       c00169 ld c,16
4900   9EB6 DD 7E 08           ld a,(ix+8)
4901   9EB9 91                 sub c
4902   9EBA DD 77 08           ld (ix+8),a
4903   9EBD 06 00              ld b,0
4904   9EBF CD 5F 8F           call sktyp
4905   9EC2 D2 D3 9E           jp nc,c00221
4906   9EC5 3A 16 7D           ld a,(vara)
4907   9EC8 DD BE 08           cp (ix+8)
4908   9ECB D2 D3 9E           jp nc,c00221
4909   9ECE 3E 01              ld a,1
4910   9ED0 32 32 7D           ld (varrnd),a
4911   9ED3 0E 10       c00221 ld c,16
4912   9ED5 DD 7E 08           ld a,(ix+8)
4913   9ED8 81                 add a,c
4914   9ED9 DD 77 08           ld (ix+8),a
4915   9EDC 3E 01              ld a,1
4916   9EDE 21 32 7D           ld hl,varrnd
4917   9EE1 BE                 cp (hl)
4918   9EE2 C2 12 9F           jp nz,c00336
4919   9EE5 3E 01              ld a,1
4920   9EE7 32 1D 7D           ld (varh),a
4921   9EEA 3E 01              ld a,1
4922   9EEC 32 25 7D           ld (varp),a
4923   9EEF 3E 0A              ld a,10
4924   9EF1 DD 77 0C           ld (ix+12),a
4925   9EF4 0E 0A              ld c,10
4926   9EF6 DD 7E 0A           ld a,(ix+10)
4927   9EF9 81                 add a,c
4928   9EFA DD 77 0A           ld (ix+10),a
4929   9EFD DD 7E 0A           ld a,(ix+10)
4930   9F00 CD B9 86           call getob
4931   9F03 0E 0A              ld c,10
4932   9F05 DD 7E 0A           ld a,(ix+10)
4933   9F08 91                 sub c
4934   9F09 DD 77 0A           ld (ix+10),a
4935   9F0C 3E 03              ld a,3
4936   9F0E DD 77 05           ld (ix+5),a
4937   9F11 C9                 ret
4938   9F12 3E A8       c00336 ld a,168
4939   9F14 DD BE 08           cp (ix+8)
4940   9F17 D2 46 9F           jp nc,c00430
4941   9F1A 0E 0A              ld c,10
4942   9F1C DD 7E 0A           ld a,(ix+10)
4943   9F1F 81                 add a,c
4944   9F20 DD 77 0A           ld (ix+10),a
4945   9F23 DD 7E 0A           ld a,(ix+10)
4946   9F26 CD B9 86           call getob
4947   9F29 0E 0A              ld c,10
4948   9F2B DD 7E 0A           ld a,(ix+10)
4949   9F2E 91                 sub c
4950   9F2F DD 77 0A           ld (ix+10),a
4951   9F32 AF                 xor a
4952   9F33 DD 77 07           ld (ix+7),a
4953   9F36 3E 0C              ld a,12
4954   9F38 DD 77 06           ld (ix+6),a
4955   9F3B 3E DC              ld a,220
4956   9F3D DD 77 0C           ld (ix+12),a
4957   9F40 3E 04              ld a,4
4958   9F42 DD 77 05           ld (ix+5),a
4959   9F45 C9                 ret
4960   9F46 CD 58 8A    c00430 call cangd
4961   9F49 C2 53 A0           jp nz,c00910
4962   9F4C DD 7E 08           ld a,(ix+8)
4963   9F4F 3C                 inc a
4964   9F50 DD 77 08           ld (ix+8),a
4965   9F53 CD 58 8A           call cangd
4966   9F56 C2 5C 9F           jp nz,c00466
4967   9F59 C3 75 9F           jp c00512
4968   9F5C 0E 0A       c00466 ld c,10
4969   9F5E DD 7E 0A           ld a,(ix+10)
4970   9F61 81                 add a,c
4971   9F62 DD 77 0A           ld (ix+10),a
4972   9F65 DD 7E 0A           ld a,(ix+10)
4973   9F68 CD B9 86           call getob
4974   9F6B 0E 0A              ld c,10
4975   9F6D DD 7E 0A           ld a,(ix+10)
4976   9F70 91                 sub c
4977   9F71 DD 77 0A           ld (ix+10),a
4978   9F74 C9                 ret
4979   9F75 3E 1E       c00512 ld a,30
4980   9F77 57                 ld d,a
4981   9F78 CD 80 8B           call random
4982   9F7B 67                 ld h,a
4983   9F7C CD E4 84           call imul
4984   9F7F 7C                 ld a,h
4985   9F80 32 32 7D           ld (varrnd),a
4986   9F83 3E 01              ld a,1
4987   9F85 21 32 7D           ld hl,varrnd
4988   9F88 BE                 cp (hl)
4989   9F89 C2 A0 9F           jp nz,c00595
4990   9F8C AF                 xor a
4991   9F8D 21 25 7D           ld hl,varp
4992   9F90 BE                 cp (hl)
4993   9F91 C2 9C 9F           jp nz,c00587
4994   9F94 3E 01              ld a,1
4995   9F96 32 25 7D           ld (varp),a
4996   9F99 C3 A0 9F           jp c00595
4997   9F9C AF          c00587 xor a
4998   9F9D 32 25 7D           ld (varp),a
4999   9FA0 AF          c00595 xor a
5000   9FA1 21 25 7D           ld hl,varp
5001   9FA4 BE                 cp (hl)
5002   9FA5 C2 D0 9F           jp nz,c00676
5003   9FA8 DD 7E 09           ld a,(ix+9)
5004   9FAB FE F0              cp 240
5005   9FAD D2 C8 9F           jp nc,c00664
5006   9FB0 CD 86 8A           call cangr
5007   9FB3 C2 C0 9F           jp nz,c00651
5008   9FB6 DD 7E 09           ld a,(ix+9)
5009   9FB9 3C                 inc a
5010   9FBA DD 77 09           ld (ix+9),a
5011   9FBD C3 C5 9F           jp c00660
5012   9FC0 3E 01       c00651 ld a,1
5013   9FC2 32 25 7D           ld (varp),a
5014   9FC5 C3 CD 9F    c00660 jp c00672
5015   9FC8 3E 01       c00664 ld a,1
5016   9FCA 32 25 7D           ld (varp),a
5017   9FCD C3 F2 9F    c00672 jp c00736
5018   9FD0 AF          c00676 xor a
5019   9FD1 DD BE 09           cp (ix+9)
5020   9FD4 D2 EE 9F           jp nc,c00728
5021   9FD7 CD 7B 8A           call cangl
5022   9FDA C2 E7 9F           jp nz,c00715
5023   9FDD DD 7E 09           ld a,(ix+9)
5024   9FE0 3D                 dec a
5025   9FE1 DD 77 09           ld (ix+9),a
5026   9FE4 C3 EB 9F           jp c00723
5027   9FE7 AF          c00715 xor a
5028   9FE8 32 25 7D           ld (varp),a
5029   9FEB C3 F2 9F    c00723 jp c00736
5030   9FEE AF          c00728 xor a
5031   9FEF 32 25 7D           ld (varp),a
5032   9FF2 3E 10       c00736 ld a,16
5033   9FF4 DD BE 08           cp (ix+8)
5034   9FF7 D2 38 A0           jp nc,c00862
5035   9FFA 0E 10              ld c,16
5036   9FFC DD 7E 08           ld a,(ix+8)
5037   9FFF 91                 sub c
5038   A000 DD 77 08           ld (ix+8),a
5039   A003 0E 0A              ld c,10
5040   A005 DD 7E 0A           ld a,(ix+10)
5041   A008 81                 add a,c
5042   A009 DD 77 0A           ld (ix+10),a
5043   A00C DD 7E 0A           ld a,(ix+10)
5044   A00F CD B9 86           call getob
5045   A012 DD 7E 09           ld a,(ix+9)
5046   A015 67                 ld h,a
5047   A016 DD 7E 08           ld a,(ix+8)
5048   A019 6F                 ld l,a
5049   A01A 22 3A 7D           ld (dispx),hl
5050   A01D DD 7E 0A           ld a,(ix+10)
5051   A020 CD 09 87           call drpob
5052   A023 0E 0A              ld c,10
5053   A025 DD 7E 0A           ld a,(ix+10)
5054   A028 91                 sub c
5055   A029 DD 77 0A           ld (ix+10),a
5056   A02C 0E 10              ld c,16
5057   A02E DD 7E 08           ld a,(ix+8)
5058   A031 81                 add a,c
5059   A032 DD 77 08           ld (ix+8),a
5060   A035 C3 50 A0           jp c00906
5061   A038 0E 0A       c00862 ld c,10
5062   A03A DD 7E 0A           ld a,(ix+10)
5063   A03D 81                 add a,c
5064   A03E DD 77 0A           ld (ix+10),a
5065   A041 DD 7E 0A           ld a,(ix+10)
5066   A044 CD B9 86           call getob
5067   A047 0E 0A              ld c,10
5068   A049 DD 7E 0A           ld a,(ix+10)
5069   A04C 91                 sub c
5070   A04D DD 77 0A           ld (ix+10),a
5071   A050 C3 7E A0    c00906 jp c00987
5072   A053 0E 0A       c00910 ld c,10
5073   A055 DD 7E 0A           ld a,(ix+10)
5074   A058 81                 add a,c
5075   A059 DD 77 0A           ld (ix+10),a
5076   A05C DD 7E 0A           ld a,(ix+10)
5077   A05F CD B9 86           call getob
5078   A062 0E 0A              ld c,10
5079   A064 DD 7E 0A           ld a,(ix+10)
5080   A067 91                 sub c
5081   A068 DD 77 0A           ld (ix+10),a
5082   A06B 3E FF              ld a,255
5083   A06D DD 77 0C           ld (ix+12),a
5084   A070 3E 08              ld a,8
5085   A072 DD 77 06           ld (ix+6),a
5086   A075 AF                 xor a
5087   A076 DD 77 07           ld (ix+7),a
5088   A079 3E 08              ld a,8
5089   A07B DD 77 05           ld (ix+5),a
5090   A07E DD 7E 0A    c00987 ld a,(ix+10)
5091   A081 87                 add a,a
5092   A082 DD 77 0A           ld (ix+10),a
5093   A085 3A 25 7D           ld a,(varp)
5094   A088 4F                 ld c,a
5095   A089 DD 7E 0A           ld a,(ix+10)
5096   A08C 81                 add a,c
5097   A08D DD 77 0A           ld (ix+10),a
5098   A090 C9                 ret
5099   A091             evnt03 equ $
5100   A091 3E 0A              ld a,10
5101   A093 DD 77 06           ld (ix+6),a
5102   A096 AF                 xor a
5103   A097 CD 31 8F           call animsp
5104   A09A DD 7E 08           ld a,(ix+8)
5105   A09D FE A8              cp 168
5106   A09F D2 CD A0           jp nc,d00111
5107   A0A2 DD 7E 0B           ld a,(ix+11)
5108   A0A5 4F                 ld c,a
5109   A0A6 DD 7E 08           ld a,(ix+8)
5110   A0A9 81                 add a,c
5111   A0AA DD 77 08           ld (ix+8),a
5112   A0AD AF                 xor a
5113   A0AE DD BE 0C           cp (ix+12)
5114   A0B1 D2 BE A0           jp nc,d00085
5115   A0B4 DD 7E 0C           ld a,(ix+12)
5116   A0B7 3D                 dec a
5117   A0B8 DD 77 0C           ld (ix+12),a
5118   A0BB C3 CA A0           jp d00106
5119   A0BE DD 7E 0B    d00085 ld a,(ix+11)
5120   A0C1 3C                 inc a
5121   A0C2 DD 77 0B           ld (ix+11),a
5122   A0C5 3E 03              ld a,3
5123   A0C7 DD 77 0C           ld (ix+12),a
5124   A0CA C3 E0 A0    d00106 jp d00144
5125   A0CD AF          d00111 xor a
5126   A0CE DD 77 07           ld (ix+7),a
5127   A0D1 3E 0C              ld a,12
5128   A0D3 DD 77 06           ld (ix+6),a
5129   A0D6 3E DC              ld a,220
5130   A0D8 DD 77 0C           ld (ix+12),a
5131   A0DB 3E 04              ld a,4
5132   A0DD DD 77 05           ld (ix+5),a
5133   A0E0 C9          d00144 ret
5134   A0E1             evnt04 equ $
5135   A0E1 3E 78              ld a,120
5136   A0E3 DD BE 0C           cp (ix+12)
5137   A0E6 D2 35 A1           jp nc,e00147
5138   A0E9 3E 0C              ld a,12
5139   A0EB DD 77 06           ld (ix+6),a
5140   A0EE DD 7E 0C           ld a,(ix+12)
5141   A0F1 3D                 dec a
5142   A0F2 DD 77 0C           ld (ix+12),a
5143   A0F5 3E D9              ld a,217
5144   A0F7 DD BE 0C           cp (ix+12)
5145   A0FA C2 02 A1           jp nz,e00060
5146   A0FD 3E 01              ld a,1
5147   A0FF DD 77 07           ld (ix+7),a
5148   A102 3E D6       e00060 ld a,214
5149   A104 DD BE 0C           cp (ix+12)
5150   A107 C2 0F A1           jp nz,e00082
5151   A10A 3E 02              ld a,2
5152   A10C DD 77 07           ld (ix+7),a
5153   A10F 3E D3       e00082 ld a,211
5154   A111 DD BE 0C           cp (ix+12)
5155   A114 C2 1C A1           jp nz,e00104
5156   A117 3E C8              ld a,200
5157   A119 DD 77 08           ld (ix+8),a
5158   A11C 3E 78       e00104 ld a,120
5159   A11E DD BE 0C           cp (ix+12)
5160   A121 C2 32 A1           jp nz,e00143
5161   A124 3E B0              ld a,176
5162   A126 DD 77 08           ld (ix+8),a
5163   A129 3E 0D              ld a,13
5164   A12B DD 77 06           ld (ix+6),a
5165   A12E AF                 xor a
5166   A12F DD 77 07           ld (ix+7),a
5167   A132 C3 77 A1    e00143 jp e00260
5168   A135 3E 02       e00147 ld a,2
5169   A137 DD BE 07           cp (ix+7)
5170   A13A C2 42 A1           jp nz,e00168
5171   A13D DD 36 05 FF        ld (ix+5),255
5172   A141 C9                 ret
5173   A142 DD 7E 08    e00168 ld a,(ix+8)
5174   A145 3D                 dec a
5175   A146 DD 77 08           ld (ix+8),a
5176   A149 3A 18 7D           ld a,(varc)
5177   A14C FE 02              cp 2
5178   A14E D2 5F A1           jp nc,e00218
5179   A151 DD 7E 09           ld a,(ix+9)
5180   A154 3C                 inc a
5181   A155 DD 77 09           ld (ix+9),a
5182   A158 AF                 xor a
5183   A159 DD 77 07           ld (ix+7),a
5184   A15C C3 6B A1           jp e00239
5185   A15F DD 7E 09    e00218 ld a,(ix+9)
5186   A162 3D                 dec a
5187   A163 DD 77 09           ld (ix+9),a
5188   A166 3E 01              ld a,1
5189   A168 DD 77 07           ld (ix+7),a
5190   A16B AF          e00239 xor a
5191   A16C DD BE 08           cp (ix+8)
5192   A16F C2 77 A1           jp nz,e00260
5193   A172 3E 02              ld a,2
5194   A174 DD 77 07           ld (ix+7),a
5195   A177 06 00       e00260 ld b,0
5196   A179 CD 5F 8F           call sktyp
5197   A17C D2 84 A1           jp nc,e00281
5198   A17F 3E 02              ld a,2
5199   A181 DD 77 07           ld (ix+7),a
5200   A184 C9          e00281 ret
5201   A185             evnt05 equ $
5202   A185 C9                 ret
5203   A186             evnt06 equ $
5204   A186 C9                 ret
5205   A187             evnt07 equ $
5206   A187 C9                 ret
5207   A188             evnt08 equ $
5208   A188 AF                 xor a
5209   A189 DD BE 0C           cp (ix+12)
5210   A18C D2 98 A1           jp nc,i00033
5211   A18F 0E FF              ld c,255
5212   A191 DD 7E 0C           ld a,(ix+12)
5213   A194 81                 add a,c
5214   A195 DD 77 0C           ld (ix+12),a
5215   A198 3E D2       i00033 ld a,210
5216   A19A DD BE 0C           cp (ix+12)
5217   A19D C2 A4 A1           jp nz,i00055
5218   A1A0 AF                 xor a
5219   A1A1 CD 31 8F           call animsp
5220   A1A4 3E B4       i00055 ld a,180
5221   A1A6 DD BE 0C           cp (ix+12)
5222   A1A9 C2 B0 A1           jp nz,i00076
5223   A1AC AF                 xor a
5224   A1AD CD 31 8F           call animsp
5225   A1B0 3E A0       i00076 ld a,160
5226   A1B2 DD BE 0C           cp (ix+12)
5227   A1B5 C2 CA A1           jp nz,i00124
5228   A1B8 DD 7E 0A           ld a,(ix+10)
5229   A1BB 87                 add a,a
5230   A1BC 87                 add a,a
5231   A1BD DD 77 0A           ld (ix+10),a
5232   A1C0 3E 01              ld a,1
5233   A1C2 DD 77 05           ld (ix+5),a
5234   A1C5 3E 06              ld a,6
5235   A1C7 DD 77 06           ld (ix+6),a
5236   A1CA 06 00       i00124 ld b,0
5237   A1CC CD 5F 8F           call sktyp
5238   A1CF D2 E1 A1           jp nc,i00162
5239   A1D2 3E 01              ld a,1
5240   A1D4 32 1D 7D           ld (varh),a
5241   A1D7 3E 03              ld a,3
5242   A1D9 DD 77 0C           ld (ix+12),a
5243   A1DC 3E 03              ld a,3
5244   A1DE DD 77 05           ld (ix+5),a
5245   A1E1 C9          i00162 ret
5246   A1E2             evnt09 equ $
5247   A1E2 3E 08              ld a,8
5248   A1E4 DD BE 05           cp (ix+5)
5249   A1E7 C2 FC A1           jp nz,j00047
5250   A1EA 3E FF              ld a,255
5251   A1EC DD 77 0C           ld (ix+12),a
5252   A1EF 3A 1E 7D           ld a,(vari)
5253   A1F2 DD 77 0A           ld (ix+10),a
5254   A1F5 3A 1E 7D           ld a,(vari)
5255   A1F8 3C                 inc a
5256   A1F9 32 1E 7D           ld (vari),a
5257   A1FC C9          j00047 ret
5258   A1FD             evnt10 equ $
5259   A1FD 3A 18 7D           ld a,(varc)
5260   A200 3C                 inc a
5261   A201 32 18 7D           ld (varc),a
5262   A204 3E 03              ld a,3
5263   A206 21 18 7D           ld hl,varc
5264   A209 BE                 cp (hl)
5265   A20A D2 11 A2           jp nc,k00040
5266   A20D AF                 xor a
5267   A20E 32 18 7D           ld (varc),a
5268   A211 AF          k00040 xor a
5269   A212 32 2F 7D           ld (charx),a
5270   A215 AF                 xor a
5271   A216 32 30 7D           ld (chary),a
5272   A219 3E 47              ld a,71
5273   A21B 32 8D 5C           ld (23693),a
5274   A21E CD D9 87           call dscor
5275   A221 C9                 ret
5276   A222             evnt11 equ $
5277   A222 C9                 ret
5278   A223             evnt12 equ $
5279   A223 C9                 ret
5280   A224             evnt13 equ $
5281   A224 AF                 xor a
5282   A225 32 1E 7D           ld (vari),a
5283   A228 AF                 xor a
5284   A229 32 1A 7D           ld (vare),a
5285   A22C C9                 ret
5286   A22D             evnt14 equ $
5287   A22D AF                 xor a
5288   A22E CD 9B 22           call 8859
5289   A231 AF                 xor a
5290   A232 32 26 7D           ld (varq),a
5291   A235 3E 15              ld a,21
5292   A237 32 81 5C           ld (loopa),a
5293   A23A 3A 26 7D    o00027 ld a,(varq)
5294   A23D 32 2F 7D           ld (charx),a
5295   A240 3E 1E              ld a,30
5296   A242 32 30 7D           ld (chary),a
5297   A245 21 2F A4           ld hl,chgfx
5298   A248 22 CC 87           ld (grbase),hl
5299   A24B 2A 2F 7D           ld hl,(charx)
5300   A24E 22 3A 7D           ld (dispx),hl
5301   A251 AF                 xor a
5302   A252 CD FF 88           call pattr
5303   A255 2A 3A 7D           ld hl,(dispx)
5304   A258 22 2F 7D           ld (charx),hl
5305   A25B 21 2F A4           ld hl,chgfx
5306   A25E 22 CC 87           ld (grbase),hl
5307   A261 2A 2F 7D           ld hl,(charx)
5308   A264 22 3A 7D           ld (dispx),hl
5309   A267 AF                 xor a
5310   A268 CD FF 88           call pattr
5311   A26B 2A 3A 7D           ld hl,(dispx)
5312   A26E 22 2F 7D           ld (charx),hl
5313   A271 3A 26 7D           ld a,(varq)
5314   A274 3C                 inc a
5315   A275 32 26 7D           ld (varq),a
5316   A278 21 81 5C           ld hl,loopa
5317   A27B 35                 dec (hl)
5318   A27C C2 3A A2           jp nz,o00027
5319   A27F 3E 17              ld a,23
5320   A281 32 2F 7D           ld (charx),a
5321   A284 AF                 xor a
5322   A285 32 30 7D           ld (chary),a
5323   A288 3E 20              ld a,32
5324   A28A 32 81 5C           ld (loopa),a
5325   A28D 21 2F A4    o00176 ld hl,chgfx
5326   A290 22 CC 87           ld (grbase),hl
5327   A293 2A 2F 7D           ld hl,(charx)
5328   A296 22 3A 7D           ld (dispx),hl
5329   A299 3E 03              ld a,3
5330   A29B CD FF 88           call pattr
5331   A29E 2A 3A 7D           ld hl,(dispx)
5332   A2A1 22 2F 7D           ld (charx),hl
5333   A2A4 21 81 5C           ld hl,loopa
5334   A2A7 35                 dec (hl)
5335   A2A8 C2 8D A2           jp nz,o00176
5336   A2AB 3E 15              ld a,21
5337   A2AD 32 2F 7D           ld (charx),a
5338   A2B0 3E 1E              ld a,30
5339   A2B2 32 30 7D           ld (chary),a
5340   A2B5 21 2F A4           ld hl,chgfx
5341   A2B8 22 CC 87           ld (grbase),hl
5342   A2BB 2A 2F 7D           ld hl,(charx)
5343   A2BE 22 3A 7D           ld (dispx),hl
5344   A2C1 3E 01              ld a,1
5345   A2C3 CD FF 88           call pattr
5346   A2C6 2A 3A 7D           ld hl,(dispx)
5347   A2C9 22 2F 7D           ld (charx),hl
5348   A2CC 21 2F A4           ld hl,chgfx
5349   A2CF 22 CC 87           ld (grbase),hl
5350   A2D2 2A 2F 7D           ld hl,(charx)
5351   A2D5 22 3A 7D           ld (dispx),hl
5352   A2D8 3E 01              ld a,1
5353   A2DA CD FF 88           call pattr
5354   A2DD 2A 3A 7D           ld hl,(dispx)
5355   A2E0 22 2F 7D           ld (charx),hl
5356   A2E3 3E 16              ld a,22
5357   A2E5 32 2F 7D           ld (charx),a
5358   A2E8 3E 1E              ld a,30
5359   A2EA 32 30 7D           ld (chary),a
5360   A2ED 21 2F A4           ld hl,chgfx
5361   A2F0 22 CC 87           ld (grbase),hl
5362   A2F3 2A 2F 7D           ld hl,(charx)
5363   A2F6 22 3A 7D           ld (dispx),hl
5364   A2F9 3E 02              ld a,2
5365   A2FB CD FF 88           call pattr
5366   A2FE 2A 3A 7D           ld hl,(dispx)
5367   A301 22 2F 7D           ld (charx),hl
5368   A304 21 2F A4           ld hl,chgfx
5369   A307 22 CC 87           ld (grbase),hl
5370   A30A 2A 2F 7D           ld hl,(charx)
5371   A30D 22 3A 7D           ld (dispx),hl
5372   A310 3E 02              ld a,2
5373   A312 CD FF 88           call pattr
5374   A315 2A 3A 7D           ld hl,(dispx)
5375   A318 22 2F 7D           ld (charx),hl
5376   A31B C9                 ret
5377   A31C             evnt15 equ $
5378   A31C C9                 ret
5379   A31D             evnt16 equ $
5380   A31D C9                 ret
5381   A31E             evnt17 equ $
5382   A31E C9                 ret
5383   A31F             evnt18 equ $
5384   A31F C9                 ret
5385   A320             evnt19 equ $
5386   A320 C9                 ret
5387   A321 C9          ptcusr ret
5388   A322             msgdat equ $
5389   A322                    defb 'TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT',13
5389   A322 5454545454545454545454545454545454545454545454545454545454545454
5389   A342 0D
5390   A343                    defb 'TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT',13
5390   A343 5454545454545454545454545454545454545454545454545454545454545454
5390   A363 0D
5391   A364                    defb 'TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT',13
5391   A364 5454545454545454545454545454545454545454545454545454545454545454
5391   A384 0D
5392   A385                    defb 'TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT',13
5392   A385 5454545454545454545454545454545454545454545454545454545454545454
5392   A3A5 0D
5393   A3A6                    defb 'TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT',13
5393   A3A6 5454545454545454545454545454545454545454545454545454545454545454
5393   A3C6 0D
5394   A3C7                    defb 'TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT',13
5394   A3C7 5454545454545454545454545454545454545454545454545454545454545454
5394   A3E7 0D
5395   A3E8 0D                 defb 13
5396   A3E9 8D                 defb 141
5397   A3EA                    defb 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',13
5397   A3EA 4141414141414141414141414141414141414141414141414141414141414141
5397   A40A 0D
5398   A40B                    defb 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',13
5398   A40B 4141414141414141414141414141414141414141414141414141414141414141
5398   A42B 0D
5399   A42C 41 8D              defb 'A',141
5400   A42E 02          nummsg defb 2
5401   A42F             chgfx  equ $
5402   A42F                    defb 0,0,0,0,0,0,0,0
5402   A42F 0000000000000000
5403   A437                    defb 0,26,165,83,148,37,170,85
5403   A437 001AA5539425AA55
5404   A43F                    defb 255,222,106,89,107,92,107,191
5404   A43F FFDE6A596B5C6BBF
5405   A447                    defb 128,97,63,2,0,96,185,30
5405   A447 80613F020060B91E
5406   A44F                    defb 0,0,0,0,0,4,106,149
5406   A44F 0000000000046A95
5407   A457                    defb 213,164,1,0,0,0,0,0
5407   A457 D5A4010000000000
5408   A45F                    defb 213,164,1,0,0,0,0,0
5408   A45F D5A4010000000000
5409   A467                    defb 0,0,6,31,63,49,96,96
5409   A467 0000061F3F316060
5410   A46F                    defb 0,57,127,102,194,192,248,252
5410   A46F 00397F66C2C0F8FC
5411   A477                    defb 0,192,224,32,87,30,28,8
5411   A477 00C0E020571E1C08
5412   A47F                    defb 0,0,0,0,128,96,16,16
5412   A47F 0000000080601010
5413   A487                    defb 96,33,17,49,121,97,64,128
5413   A487 6021113179614080
5414   A48F                    defb 242,192,128,128,0,0,128,0
5414   A48F F2C0808000008000
5415   A497                    defb 8,24,4,0,0,0,0,0
5415   A497 0818040000000000
5416   A49F                    defb 8,8,8,8,24,124,62,38
5416   A49F 08080808187C3E26
5417   A4A7                    defb 128,128,128,71,63,31,30,60
5417   A4A7 808080473F1F1E3C
5418   A4AF                    defb 0,0,1,0,0,0,0,2
5418   A4AF 0000010000000002
5419   A4B7                    defb 0,4,4,248,112,0,0,0
5419   A4B7 000404F870000000
5420   A4BF                    defb 3,1,1,1,2,44,16,16
5420   A4BF 03010101022C1010
5421   A4C7                    defb 60,60,28,28,14,7,3,0
5421   A4C7 3C3C1C1C0E070300
5422   A4CF                    defb 20,12,14,6,15,51,192,0
5422   A4CF 140C0E060F33C000
5423   A4D7                    defb 4,2,1,4,8,224,0,0
5423   A4D7 0402010408E00000
5424   A4DF                    defb 0,32,192,0,0,0,0,0
5424   A4DF 0020C00000000000
5425   A4E7                    defb 0,0,0,16,0,0,0,0
5425   A4E7 0000001000000000
5426   A4EF                    defb 0,0,0,0,0,0,0,0
5426   A4EF 0000000000000000
5427   A4F7                    defb 0,0,0,0,0,0,0,0
5427   A4F7 0000000000000000
5428   A4FF                    defb 0,0,0,0,0,0,0,0
5428   A4FF 0000000000000000
5429   A507                    defb 0,0,0,0,0,0,0,0
5429   A507 0000000000000000
5430   A50F                    defb 0,0,0,0,0,0,0,0
5430   A50F 0000000000000000
5431   A517                    defb 0,0,0,0,0,0,0,0
5431   A517 0000000000000000
5432   A51F                    defb 0,0,0,0,0,0,0,0
5432   A51F 0000000000000000
5433   A527                    defb 0,0,0,0,0,0,0,0
5433   A527 0000000000000000
5434   A52F                    defb 0,0,0,0,0,0,0,0
5434   A52F 0000000000000000
5435   A537                    defb 0,0,0,0,0,0,0,0
5435   A537 0000000000000000
5436   A53F                    defb 0,0,0,0,0,0,0,0
5436   A53F 0000000000000000
5437   A547                    defb 0,0,0,0,0,0,0,0
5437   A547 0000000000000000
5438   A54F                    defb 0,0,0,0,0,0,0,0
5438   A54F 0000000000000000
5439   A557                    defb 0,0,0,0,0,0,0,0
5439   A557 0000000000000000
5440   A55F                    defb 0,0,0,0,0,0,0,0
5440   A55F 0000000000000000
5441   A567                    defb 0,0,40,16,40,0,0,0
5441   A567 0000281028000000
5442   A56F                    defb 0,0,40,16,40,0,0,0
5442   A56F 0000281028000000
5443   A577                    defb 106,213,171,213,171,213,171,86
5443   A577 6AD5ABD5ABD5AB56
5444   A57F                    defb 106,213,171,213,171,86,106,86
5444   A57F 6AD5ABD5AB566A56
5445   A587                    defb 60,44,52,44,20,24,24,16
5445   A587 3C2C342C14181810
5446   A58F             bcol   equ $
5447   A58F 47                 defb 71
5448   A590 44                 defb 68
5449   A591 02                 defb 2
5450   A592 05                 defb 5
5451   A593 45                 defb 69
5452   A594 42                 defb 66
5453   A595 44                 defb 68
5454   A596 47                 defb 71
5455   A597 47                 defb 71
5456   A598 47                 defb 71
5457   A599 47                 defb 71
5458   A59A 47                 defb 71
5459   A59B 47                 defb 71
5460   A59C 47                 defb 71
5461   A59D 47                 defb 71
5462   A59E 47                 defb 71
5463   A59F 47                 defb 71
5464   A5A0 47                 defb 71
5465   A5A1 47                 defb 71
5466   A5A2 47                 defb 71
5467   A5A3 47                 defb 71
5468   A5A4 47                 defb 71
5469   A5A5 47                 defb 71
5470   A5A6 47                 defb 71
5471   A5A7 47                 defb 71
5472   A5A8 47                 defb 71
5473   A5A9 47                 defb 71
5474   A5AA 47                 defb 71
5475   A5AB 47                 defb 71
5476   A5AC 47                 defb 71
5477   A5AD 47                 defb 71
5478   A5AE 47                 defb 71
5479   A5AF 47                 defb 71
5480   A5B0 47                 defb 71
5481   A5B1 47                 defb 71
5482   A5B2 47                 defb 71
5483   A5B3 47                 defb 71
5484   A5B4 47                 defb 71
5485   A5B5 47                 defb 71
5486   A5B6 43                 defb 67
5487   A5B7 44                 defb 68
5488   A5B8 42                 defb 66
5489   A5B9 42                 defb 66
5490   A5BA 42                 defb 66
5491   A5BB             bprop  equ $
5492   A5BB 00                 defb 0
5493   A5BC 02                 defb 2
5494   A5BD 00                 defb 0
5495   A5BE 00                 defb 0
5496   A5BF 00                 defb 0
5497   A5C0 00                 defb 0
5498   A5C1 00                 defb 0
5499   A5C2 06                 defb 6
5500   A5C3 06                 defb 6
5501   A5C4 06                 defb 6
5502   A5C5 06                 defb 6
5503   A5C6 06                 defb 6
5504   A5C7 06                 defb 6
5505   A5C8 06                 defb 6
5506   A5C9 06                 defb 6
5507   A5CA 06                 defb 6
5508   A5CB 06                 defb 6
5509   A5CC 06                 defb 6
5510   A5CD 06                 defb 6
5511   A5CE 06                 defb 6
5512   A5CF 06                 defb 6
5513   A5D0 06                 defb 6
5514   A5D1 06                 defb 6
5515   A5D2 00                 defb 0
5516   A5D3 00                 defb 0
5517   A5D4 00                 defb 0
5518   A5D5 00                 defb 0
5519   A5D6 00                 defb 0
5520   A5D7 00                 defb 0
5521   A5D8 00                 defb 0
5522   A5D9 00                 defb 0
5523   A5DA 00                 defb 0
5524   A5DB 00                 defb 0
5525   A5DC 00                 defb 0
5526   A5DD 00                 defb 0
5527   A5DE 00                 defb 0
5528   A5DF 00                 defb 0
5529   A5E0 00                 defb 0
5530   A5E1 00                 defb 0
5531   A5E2 00                 defb 0
5532   A5E3 00                 defb 0
5533   A5E4 02                 defb 2
5534   A5E5 02                 defb 2
5535   A5E6 02                 defb 2
5536   A5E7             sprgfx equ $
5537   A5E7                    defb 7,224,8,16,18,8,20,8,20,240,17,80,17,88,9,120,7,224,2,0,5,224,2,232,6,104,7,128,0,112,3,128
5537   A5E7 07E008101208140814F011501158097807E0020005E002E80668078000700380
5538   A607                    defb 1,248,2,4,4,130,5,2,5,60,4,84,4,86,2,94,1,248,0,128,1,120,0,186,1,154,1,224,0,28,0,224
5538   A607 01F8020404820502053C04540456025E01F80080017800BA019A01E0001C00E0
5539   A627                    defb 0,126,0,129,129,32,129,64,1,79,1,21,129,21,128,151,0,126,0,32,0,94,128,46,128,102,0,120,0,7,0,56
5539   A627 007E008181208140014F011581158097007E0020005E802E8066007800070038
5540   A647                    defb 128,31,64,32,32,72,32,80,192,83,64,69,96,69,224,37,128,31,0,8,128,23,160,11,160,25,0,30,192,1,0,14
5540   A647 801F402020482050C05340456045E025801F00088017A00BA019001EC001000E
5541   A667                    defb 7,224,8,16,18,8,20,8,20,240,17,80,17,88,9,120,7,224,12,12,9,236,3,240,27,96,22,96,0,0,0,224
5541   A667 07E008101208140814F011501158097807E00C0C09EC03F01B601660000000E0
5542   A687                    defb 1,248,2,4,4,130,5,2,5,60,4,84,4,86,2,94,1,248,3,3,2,123,0,252,6,216,5,152,0,0,0,56
5542   A687 01F8020404820502053C04540456025E01F80303027B00FC06D8059800000038
5543   A6A7                    defb 0,126,0,129,129,32,129,64,1,79,1,21,129,21,128,151,0,126,192,192,192,158,0,63,1,182,1,102,0,0,0,14
5543   A6A7 007E008181208140014F011581158097007EC0C0C09E003F01B601660000000E
5544   A6C7                    defb 128,31,64,32,32,72,32,80,192,83,64,69,96,69,224,37,128,31,48,48,176,39,192,15,128,109,128,89,0,0,128,3
5544   A6C7 801F402020482050C05340456045E025801F3030B027C00F806D805900008003
5545   A6E7                    defb 7,224,8,16,18,8,20,8,20,240,17,80,17,88,9,120,55,224,54,24,16,232,3,228,3,236,11,216,13,16,6,0
5545   A6E7 07E008101208140814F011501158097837E0361810E803E403EC0BD80D100600
5546   A707                    defb 1,248,2,4,4,130,5,2,5,60,4,84,4,86,2,94,13,248,13,134,4,58,0,249,0,251,2,246,3,68,1,128
5546   A707 01F8020404820502053C04540456025E0DF80D86043A00F900FB02F603440180
5547   A727                    defb 0,126,0,129,129,32,129,64,1,79,1,21,129,21,128,151,3,126,131,97,129,14,64,62,192,62,128,189,0,209,0,96
5547   A727 007E008181208140014F011581158097037E8361810E403EC03E80BD00D10060
5548   A747                    defb 128,31,64,32,32,72,32,80,192,83,64,69,96,69,224,37,128,223,96,216,160,67,144,15,176,15,96,47,64,52,0,24
5548   A747 801F402020482050C05340456045E02580DF60D8A043900FB00F602F40340018
5549   A767                    defb 7,224,8,16,16,72,16,40,15,40,10,136,26,136,30,144,7,224,0,64,7,160,23,64,22,96,1,224,14,0,1,192
5549   A767 07E00810104810280F280A881A881E9007E0004007A01740166001E00E0001C0
5550   A787                    defb 1,248,2,4,4,18,4,10,3,202,2,162,6,162,7,164,1,248,0,16,1,232,5,208,5,152,0,120,3,128,0,112
5550   A787 01F802040412040A03CA02A206A207A401F8001001E805D00598007803800070
5551   A7A7                    defb 0,126,0,129,129,4,129,2,128,242,128,168,129,168,1,233,0,126,0,4,0,122,1,116,1,102,0,30,0,224,0,28
5551   A7A7 007E00818104810280F280A881A801E9007E0004007A01740166001E00E0001C
5552   A7C7                    defb 128,31,64,32,32,65,160,64,160,60,32,42,32,106,64,122,128,31,0,1,128,30,0,93,128,89,128,7,0,56,0,7
5552   A7C7 801F40202041A040A03C202A206A407A801F0001801E005D8059800700380007
5553   A7E7                    defb 7,224,8,16,16,72,16,40,15,40,10,136,26,136,30,144,7,224,48,48,55,144,15,192,6,216,6,104,0,0,7,0
5553   A7E7 07E00810104810280F280A881A881E9007E0303037900FC006D8066800000700
5554   A807                    defb 1,248,2,4,4,18,4,10,3,202,2,162,6,162,7,164,1,248,12,12,13,228,3,240,1,182,1,154,0,0,1,192
5554   A807 01F802040412040A03CA02A206A207A401F80C0C0DE403F001B6019A000001C0
5555   A827                    defb 0,126,0,129,129,4,129,2,128,242,128,168,129,168,1,233,0,126,3,3,3,121,0,252,128,109,128,102,0,0,0,112
5555   A827 007E00818104810280F280A881A801E9007E0303037900FC806D806600000070
5556   A847                    defb 128,31,64,32,32,65,160,64,160,60,32,42,32,106,64,122,128,31,192,192,64,222,0,63,96,27,160,25,0,0,0,28
5556   A847 801F40202041A040A03C202A206A407A801FC0C040DE003F601BA0190000001C
5557   A867                    defb 7,224,8,16,16,72,16,40,15,40,10,136,26,136,30,144,7,236,24,108,23,8,39,192,55,192,27,208,8,176,0,96
5557   A867 07E00810104810280F280A881A881E9007EC186C170827C037C01BD008B00060
5558   A887                    defb 1,248,2,4,4,18,4,10,3,202,2,162,6,162,7,164,1,251,6,27,5,194,9,240,13,240,6,244,2,44,0,24
5558   A887 01F802040412040A03CA02A206A207A401FB061B05C209F00DF006F4022C0018
5559   A8A7                    defb 0,126,0,129,129,4,129,2,128,242,128,168,129,168,1,233,192,126,193,134,129,112,2,124,3,124,1,189,0,139,0,6
5559   A8A7 007E00818104810280F280A881A801E9C07EC1868170027C037C01BD008B0006
5560   A8C7                    defb 128,31,64,32,32,65,160,64,160,60,32,42,32,106,64,122,176,31,176,97,32,92,0,159,0,223,64,111,192,34,128,1
5560   A8C7 801F40202041A040A03C202A206A407AB01FB061205C009F00DF406FC0228001
5561   A8E7                    defb 0,0,32,252,49,2,50,65,110,129,36,190,18,42,9,171,4,175,6,92,7,192,7,96,3,252,0,242,0,100,0,24
5561   A8E7 000020FC310232416E8124BE122A09AB04AF065C07C0076003FC00F200640018
5562   A907                    defb 0,0,8,63,140,64,76,144,91,160,137,47,132,138,194,106,193,43,1,151,1,240,1,216,0,255,128,60,0,25,0,6
5562   A907 0000083F8C404C905BA0892F848AC26AC12B019701F001D800FF803C00190006
5563   A927                    defb 0,0,194,15,35,16,19,36,22,232,226,75,161,34,176,154,240,74,192,101,0,124,0,118,192,63,32,15,64,6,128,1
5563   A927 0000C20F2310132416E8E24BA122B09AF04AC065007C0076C03F200F40068001
5564   A947                    defb 0,0,240,131,8,196,4,201,5,186,248,146,168,72,172,38,188,18,112,25,0,31,128,29,240,15,200,3,144,1,96,0
5564   A947 0000F08308C404C905BAF892A848AC26BC127019001F801DF00FC80390016000
5565   A967                    defb 1,248,2,4,4,130,5,2,5,60,4,84,4,86,7,222,2,120,4,192,9,64,19,232,63,244,115,228,0,200,0,112
5565   A967 01F8020404820502053C0454045607DE027804C0094013E83FF473E400C80070
5566   A987                    defb 0,126,0,129,129,32,129,64,1,79,1,21,129,21,129,247,0,158,1,48,2,80,4,250,15,253,28,249,0,50,0,28
5566   A987 007E008181208140014F0115811581F7009E0130025004FA0FFD1CF90032001C
5567   A9A7                    defb 128,31,64,32,32,72,32,80,192,83,64,69,96,69,224,125,128,39,0,76,0,148,129,62,67,255,71,62,128,12,0,7
5567   A9A7 801F402020482050C05340456045E07D8027004C0094813E43FF473E800C0007
5568   A9C7                    defb 224,7,16,8,8,18,8,20,240,20,80,17,88,17,120,31,224,9,0,19,0,37,160,79,208,255,145,207,32,3,192,1
5568   A9C7 E007100808120814F01450115811781FE00900130025A04FD0FF91CF2003C001
5569   A9E7                    defb 1,248,2,4,4,130,5,2,5,60,4,84,4,86,7,222,127,120,240,192,41,64,7,232,7,244,3,228,0,200,0,112
5569   A9E7 01F8020404820502053C0454045607DE7F78F0C0294007E807F403E400C80070
5570   AA07                    defb 0,126,0,129,129,32,129,64,1,79,1,21,129,21,129,247,31,222,60,48,10,80,1,250,1,253,0,249,0,50,0,28
5570   AA07 007E008181208140014F0115811581F71FDE3C300A5001FA01FD00F90032001C
5571   AA27                    defb 128,31,64,32,32,72,32,80,192,83,64,69,96,69,224,125,135,247,15,12,2,148,128,126,64,127,64,62,128,12,0,7
5571   AA27 801F402020482050C05340456045E07D87F70F0C0294807E407F403E800C0007
5572   AA47                    defb 224,7,16,8,8,18,8,20,240,20,80,17,88,17,120,31,225,253,3,195,0,165,160,31,208,31,144,15,32,3,192,1
5572   AA47 E007100808120814F01450115811781FE1FD03C300A5A01FD01F900F2003C001
5573   AA67                    defb 0,0,63,4,64,140,130,76,129,118,125,36,84,72,213,144,245,32,58,96,3,224,6,224,63,192,79,0,38,0,24,0
5573   AA67 00003F04408C824C81767D245448D590F5203A6003E006E03FC04F0026001800
5574   AA87                    defb 0,0,15,193,16,35,32,147,160,93,31,73,21,18,53,100,61,72,14,152,0,248,1,184,15,240,19,192,9,128,6,0
5574   AA87 00000FC110232093A05D1F49151235643D480E9800F801B80FF013C009800600
5575   AAA7                    defb 0,0,67,240,196,8,200,36,104,23,71,210,133,68,13,89,15,82,3,166,0,62,0,110,3,252,4,240,2,96,1,128
5575   AAA7 000043F0C408C824681747D285440D590F5203A6003E006E03FC04F002600180
5576   AAC7                    defb 0,0,16,252,49,2,50,9,218,5,145,244,33,81,67,86,131,212,128,233,128,15,128,27,0,255,1,60,0,152,0,96
5576   AAC7 000010FC31023209DA0591F42151435683D480E9800F801B00FF013C00980060
5577   AAE7                    defb 31,128,32,64,65,32,64,160,60,160,42,32,106,32,123,224,30,64,3,32,2,144,23,200,47,252,39,206,19,0,14,0
5577   AAE7 1F802040412040A03CA02A206A207BE01E400320029017C82FFC27CE13000E00
5578   AB07                    defb 7,224,8,16,16,72,16,40,15,40,10,136,26,136,30,248,7,144,0,200,0,164,5,242,11,255,137,243,4,192,3,128
5578   AB07 07E00810104810280F280A881A881EF8079000C800A405F20BFF89F304C00380
5579   AB27                    defb 1,248,2,4,4,18,4,10,3,202,2,162,6,162,7,190,1,228,0,50,0,41,129,124,194,255,226,124,1,48,0,224
5579   AB27 01F802040412040A03CA02A206A207BE01E400320029817CC2FFE27C013000E0
5580   AB47                    defb 0,126,0,129,129,4,129,2,128,242,128,168,129,168,129,239,0,121,128,12,64,10,32,95,240,191,56,159,0,76,0,56
5580   AB47 007E00818104810280F280A881A881EF0079800C400A205FF0BF389F004C0038
5581   AB67                    defb 31,128,32,64,65,32,64,160,60,160,42,32,106,32,123,224,30,254,3,15,2,148,23,224,47,224,39,192,19,0,14,0
5581   AB67 1F802040412040A03CA02A206A207BE01EFE030F029417E02FE027C013000E00
5582   AB87                    defb 7,224,8,16,16,72,16,40,15,40,10,136,26,136,30,248,135,191,192,195,0,165,5,248,11,248,9,240,4,192,3,128
5582   AB87 07E00810104810280F280A881A881EF887BFC0C300A505F80BF809F004C00380
5583   ABA7                    defb 1,248,2,4,4,18,4,10,3,202,2,162,6,162,7,190,225,239,240,48,64,41,1,126,2,254,2,124,1,48,0,224
5583   ABA7 01F802040412040A03CA02A206A207BEE1EFF0304029017E02FE027C013000E0
5584   ABC7                    defb 0,126,0,129,129,4,129,2,128,242,128,168,129,168,129,239,248,123,60,12,80,10,128,95,128,191,0,159,0,76,0,56
5584   ABC7 007E00818104810280F280A881A881EFF87B3C0C500A805F80BF009F004C0038
5585   ABE7                    defb 3,224,4,16,8,40,8,8,7,240,2,160,2,160,7,240,11,232,17,196,18,36,52,22,46,58,19,228,10,40,6,48
5585   ABE7 03E004100828080807F002A002A007F00BE811C4122434162E3A13E40A280630
5586   AC07                    defb 0,248,1,4,2,10,2,2,1,252,0,168,0,168,1,252,2,250,4,113,4,137,141,5,139,142,4,249,2,138,1,140
5586   AC07 00F80104020A020201FC00A800A801FC02FA047104898D058B8E04F9028A018C
5587   AC27                    defb 0,62,0,65,128,130,128,128,0,127,0,42,0,42,0,127,128,190,65,28,65,34,99,65,162,227,65,62,128,162,0,99
5587   AC27 003E004180828080007F002A002A007F80BE411C41226341A2E3413E80A20063
5588   AC47                    defb 128,15,64,16,160,32,32,32,192,31,128,10,128,10,192,31,160,47,16,71,144,72,88,208,232,184,144,79,160,40,192,24
5588   AC47 800F4010A0202020C01F800A800AC01FA02F1047904858D0E8B8904FA028C018
5589   AC67                    defb 0,0,3,224,4,16,8,40,8,8,7,240,122,175,42,170,19,228,9,200,28,28,38,50,36,18,18,36,11,232,6,48
5589   AC67 000003E004100828080807F07AAF2AAA13E409C81C1C2632241212240BE80630
5590   AC87                    defb 0,0,0,248,1,4,2,10,2,2,1,252,222,171,138,170,4,249,2,114,7,7,137,140,137,4,4,137,2,250,1,140
5590   AC87 000000F80104020A020201FCDEAB8AAA04F902720707898C8904048902FA018C
5591   ACA7                    defb 0,0,0,62,0,65,128,130,128,128,0,127,247,170,162,170,65,62,128,156,193,193,34,99,34,65,65,34,128,190,0,99
5591   ACA7 0000003E004180828080007FF7AAA2AA413E809CC1C122632241412280BE0063
5592   ACC7                    defb 0,0,128,15,64,16,160,32,32,32,192,31,189,234,168,170,144,79,32,39,112,112,200,152,72,144,144,72,160,47,192,24
5592   ACC7 0000800F4010A0202020C01FBDEAA8AA904F20277070C89848909048A02FC018
5593   ACE7                    defb 0,0,0,0,3,224,4,16,8,40,8,8,7,240,14,184,18,164,35,226,77,217,118,55,36,18,18,36,11,232,6,48
5593   ACE7 0000000003E004100828080807F00EB812A423E24DD97637241212240BE80630
5594   AD07                    defb 0,0,0,0,0,248,1,4,2,10,2,2,1,252,3,174,4,169,136,248,83,118,221,141,137,4,4,137,2,250,1,140
5594   AD07 0000000000F80104020A020201FC03AE04A988F85376DD8D8904048902FA018C
5595   AD27                    defb 0,0,0,0,0,62,0,65,128,130,128,128,0,127,128,235,65,42,34,62,148,221,119,99,34,65,65,34,128,190,0,99
5595   AD27 00000000003E004180828080007F80EB412A223E94DD77632241412280BE0063
5596   AD47                    defb 0,0,0,0,128,15,64,16,160,32,32,32,192,31,224,58,144,74,136,143,101,55,221,216,72,144,144,72,160,47,192,24
5596   AD47 00000000800F4010A0202020C01FE03A904A888F6537DDD848909048A02FC018
5597   AD67                    defb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,192,7,240,11,152,45,172,54,236,58,158,29,126
5597   AD67 00000000000000000000000000000000000001C007F00B982DAC36EC3A9E1D7E
5598   AD87                    defb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,1,252,2,230,11,107,13,187,142,167,135,95
5598   AD87 000000000000000000000000000000000000007001FC02E60B6B0DBB8EA7875F
5599   ADA7                    defb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,127,128,185,194,218,195,110,227,169,225,215
5599   ADA7 000000000000000000000000000000000000001C007F80B9C2DAC36EE3A9E1D7
5600   ADC7                    defb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,192,31,96,46,176,182,176,219,120,234,248,117
5600   ADC7 0000000000000000000000000000000000000007C01F602EB0B6B0DB78EAF875
5601   ADE7                    defb 0,0,0,0,0,0,0,0,0,0,5,224,14,248,38,204,195,86,119,118,161,79,179,127,81,111,43,111,54,247,29,254
5601   ADE7 0000000000000000000005E00EF826CCC3567776A14FB37F516F2B6F36F71DFE
5602   AE07                    defb 0,0,0,0,0,0,0,0,0,0,1,120,3,190,9,179,176,213,157,221,232,83,236,223,212,91,202,219,205,189,135,127
5602   AE07 00000000000000000000017803BE09B3B0D59DDDE853ECDFD45BCADBCDBD877F
5603   AE27                    defb 0,0,0,0,0,0,0,0,0,0,0,94,128,239,194,108,108,53,103,119,250,20,251,55,245,22,242,182,115,111,225,223
5603   AE27 00000000000000000000005E80EFC26C6C356777FA14FB37F516F2B6736FE1DF
5604   AE47                    defb 0,0,0,0,0,0,0,0,0,0,128,23,224,59,48,155,91,13,217,221,62,133,254,205,189,69,188,173,220,219,248,119
5604   AE47 000000000000000000008017E03B309B5B0DD9DD3E85FECDBD45BCADDCDBF877
5605   AE67                    defb 0,128,2,176,0,188,2,190,0,83,1,85,64,93,129,83,160,95,200,109,242,237,119,219,31,62,0,254,31,204,53,228
5605   AE67 008002B000BC02BE00530155405D8153A05FC86DF2ED77DB1F3E00FE1FCC35E4
5606   AE87                    defb 0,32,0,172,0,47,128,175,192,20,64,85,80,23,224,84,232,23,114,27,124,187,221,246,135,207,128,63,7,243,13,121
5606   AE87 002000AC002F80AFC01440555017E054E817721B7CBBDDF687CF803F07F30D79
5607   AEA7                    defb 0,8,0,43,192,11,224,43,48,5,80,21,212,5,56,21,250,5,220,134,223,46,183,125,225,243,224,15,193,252,67,94
5607   AEA7 0008002BC00BE02B30055015D4053815FA05DC86DF2EB77DE1F3E00FC1FC435E
5608   AEC7                    defb 0,2,192,10,240,2,248,10,76,1,84,5,117,1,78,5,126,129,183,33,183,203,109,223,248,124,248,3,48,127,144,215
5608   AEC7 0002C00AF002F80A4C01540575014E057E81B721B7CB6DDFF87CF803307F90D7
5609   AEE7                    defb 1,8,1,8,3,216,7,176,8,194,53,230,254,54,32,43,24,92,7,48,3,104,1,152,9,240,14,224,7,0,0,0
5609   AEE7 0108010803D807B008C235E6FE36202B185C07300368019809F00EE007000000
5610   AF07                    defb 0,66,0,66,0,246,1,236,130,48,141,121,191,141,200,10,6,23,1,204,0,218,0,102,2,124,3,184,1,192,0,0
5610   AF07 0042004200F601EC82308D79BF8DC80A061701CC00DA0066027C03B801C00000
5611   AF27                    defb 128,16,128,16,128,61,0,123,32,140,99,94,111,227,178,2,193,133,0,115,128,54,128,25,0,159,0,238,0,112,0,0
5611   AF27 80108010803D007B208C635E6FE3B202C185007380368019009F00EE00700000
5612   AF47                    defb 32,4,32,4,96,15,192,30,8,35,152,215,219,248,172,128,112,97,192,28,160,13,96,6,192,39,128,59,0,28,0,0
5612   AF47 20042004600FC01E082398D7DBF8AC807061C01CA00D6006C027803B001C0000
5613   AF67                    defb 1,8,1,8,3,216,7,176,8,192,53,224,254,48,32,32,24,86,7,55,3,100,1,152,9,240,14,224,7,0,0,0
5613   AF67 0108010803D807B008C035E0FE302020185607370364019809F00EE007000000
5614   AF87                    defb 0,66,0,66,0,246,1,236,2,48,13,120,63,140,8,8,134,21,193,205,0,217,0,102,2,124,3,184,1,192,0,0
5614   AF87 0042004200F601EC02300D783F8C08088615C1CD00D90066027C03B801C00000
5615   AFA7                    defb 128,16,128,16,128,61,0,123,0,140,3,94,15,227,2,2,97,133,112,115,64,54,128,25,0,159,0,238,0,112,0,0
5615   AFA7 80108010803D007B008C035E0FE302026185707340368019009F00EE00700000
5616   AFC7                    defb 32,4,32,4,96,15,192,30,0,35,128,215,195,248,128,128,88,97,220,28,144,13,96,6,192,39,128,59,0,28,0,0
5616   AFC7 20042004600FC01E002380D7C3F880805861DC1C900D6006C027803B001C0000
5617   AFE7                    defb 1,8,1,8,3,216,7,176,8,192,53,224,254,48,32,32,24,112,7,56,3,157,1,203,9,246,14,228,7,0,0,0
5617   AFE7 0108010803D807B008C035E0FE30202018700738039D01CB09F60EE407000000
5618   B007                    defb 0,66,0,66,0,246,1,236,2,48,13,120,63,140,8,8,6,28,1,206,64,231,192,114,130,125,3,185,1,192,0,0
5618   B007 0042004200F601EC02300D783F8C0808061C01CE40E7C072827D03B901C00000
5619   B027                    defb 128,16,128,16,128,61,0,123,0,140,3,94,15,227,2,2,1,135,128,115,208,57,176,28,96,159,64,238,0,112,0,0
5619   B027 80108010803D007B008C035E0FE3020201878073D039B01C609F40EE00700000
5620   B047                    defb 32,4,32,4,96,15,192,30,0,35,128,215,195,248,128,128,192,97,224,28,116,14,44,7,216,39,144,59,0,28,0,0
5620   B047 20042004600FC01E002380D7C3F88080C061E01C740E2C07D827903B001C0000
5621   B067                    defb 16,128,16,128,27,192,13,224,67,16,103,172,108,127,212,4,58,24,12,224,22,192,25,128,15,144,7,112,0,224,0,0
5621   B067 108010801BC00DE0431067AC6C7FD4043A180CE016C019800F90077000E00000
5622   B087                    defb 4,32,4,32,6,240,3,120,16,196,25,235,219,31,53,1,14,134,3,56,5,176,6,96,3,228,1,220,0,56,0,0
5622   B087 0420042006F0037810C419EBDB1F35010E86033805B0066003E401DC00380000
5623   B0A7                    defb 1,8,1,8,1,188,0,222,4,49,198,122,246,199,77,64,131,161,0,206,1,108,1,152,0,249,0,119,0,14,0,0
5623   B0A7 0108010801BC00DE0431C67AF6C74D4083A100CE016C019800F90077000E0000
5624   B0C7                    defb 0,66,0,66,0,111,128,55,65,12,177,158,253,177,19,80,96,232,128,51,0,91,0,102,64,62,192,29,128,3,0,0
5624   B0C7 00420042006F8037410CB19EFDB1135060E88033005B0066403EC01D80030000
5625   B0E7                    defb 16,128,16,128,27,192,13,224,3,16,7,172,12,127,4,4,106,24,236,224,38,192,25,128,15,144,7,112,0,224,0,0
5625   B0E7 108010801BC00DE0031007AC0C7F04046A18ECE026C019800F90077000E00000
5626   B107                    defb 4,32,4,32,6,240,3,120,0,196,1,235,195,31,1,1,26,134,59,56,9,176,6,96,3,228,1,220,0,56,0,0
5626   B107 0420042006F0037800C401EBC31F01011A863B3809B0066003E401DC00380000
5627   B127                    defb 1,8,1,8,1,188,0,222,0,49,192,122,240,199,64,64,134,161,14,206,2,108,1,152,0,249,0,119,0,14,0,0
5627   B127 0108010801BC00DE0031C07AF0C7404086A10ECE026C019800F90077000E0000
5628   B147                    defb 0,66,0,66,0,111,128,55,64,12,176,30,252,49,16,16,97,168,131,179,0,155,0,102,64,62,192,29,128,3,0,0
5628   B147 00420042006F8037400CB01EFC31101061A883B3009B0066403EC01D80030000
5629   B167                    defb 16,128,16,128,27,192,13,224,3,16,7,172,12,127,4,4,14,24,28,224,185,192,211,128,111,144,39,112,0,224,0,0
5629   B167 108010801BC00DE0031007AC0C7F04040E181CE0B9C0D3806F90277000E00000
5630   B187                    defb 4,32,4,32,6,240,3,120,0,196,1,235,195,31,1,1,3,134,7,56,46,112,52,224,27,228,9,220,0,56,0,0
5630   B187 0420042006F0037800C401EBC31F0101038607382E7034E01BE409DC00380000
5631   B1A7                    defb 1,8,1,8,1,188,0,222,0,49,192,122,240,199,64,64,128,225,1,206,11,156,13,56,6,249,2,119,0,14,0,0
5631   B1A7 0108010801BC00DE0031C07AF0C7404080E101CE0B9C0D3806F90277000E0000
5632   B1C7                    defb 0,66,0,66,0,111,128,55,64,12,176,30,252,49,16,16,96,56,128,115,2,231,3,78,65,190,192,157,128,3,0,0
5632   B1C7 00420042006F8037400CB01EFC3110106038807302E7034E41BEC09D80030000
5633   B1E7                    defb 0,1,0,1,0,123,0,246,1,24,6,188,31,198,4,4,3,12,0,246,0,66,0,132,1,30,1,60,1,226,0,124
5633   B1E7 00010001007B00F6011806BC1FC60404030C00F600420084011E013C01E2007C
5634   B207                    defb 64,0,64,0,192,30,128,61,0,70,1,175,135,241,1,1,0,195,128,61,128,16,0,33,128,71,0,79,128,120,0,31
5634   B207 40004000C01E803D004601AF87F1010100C3803D801000218047004F8078001F
5635   B227                    defb 16,0,16,0,176,7,96,15,128,17,192,107,97,252,64,64,192,48,96,15,32,4,64,8,224,17,192,19,32,30,192,7
5635   B227 10001000B007600F8011C06B61FC4040C030600F20044008E011C013201EC007
5636   B247                    defb 4,0,4,0,236,1,216,3,96,4,240,26,24,127,16,16,48,12,216,3,8,1,16,2,120,4,240,4,136,7,240,1
5636   B247 04000400EC01D8036004F01A187F1010300CD803080110027804F0048807F001
5637   B267                    defb 0,0,0,1,0,1,0,123,0,246,1,24,6,188,31,198,4,4,3,12,0,246,56,66,116,142,125,28,125,226,56,124
5637   B267 000000010001007B00F6011806BC1FC60404030C00F63842748E7D1C7DE2387C
5638   B287                    defb 0,0,64,0,64,0,192,30,128,61,0,70,1,175,135,241,1,1,0,195,128,61,142,16,157,35,31,71,159,120,14,31
5638   B287 000040004000C01E803D004601AF87F1010100C3803D8E109D231F479F780E1F
5639   B2A7                    defb 0,0,16,0,16,0,176,7,96,15,128,17,192,107,97,252,64,64,192,48,96,15,35,132,231,72,199,209,39,222,195,135
5639   B2A7 000010001000B007600F8011C06B61FC4040C030600F2384E748C7D127DEC387
5640   B2C7                    defb 0,0,4,0,4,0,236,1,216,3,96,4,240,26,24,127,16,16,48,12,216,3,8,225,57,210,113,244,137,247,240,225
5640   B2C7 000004000400EC01D8036004F01A187F1010300CD80308E139D271F489F7F0E1
5641   B2E7                    defb 0,1,0,1,0,123,0,246,1,24,6,188,31,198,4,4,3,12,61,246,122,66,253,132,253,30,255,60,126,226,60,124
5641   B2E7 00010001007B00F6011806BC1FC60404030C3DF67A42FD84FD1EFF3C7EE23C7C
5642   B307                    defb 64,0,64,0,192,30,128,61,0,70,1,175,135,241,1,1,0,195,143,125,158,144,63,97,191,71,63,207,159,184,15,31
5642   B307 40004000C01E803D004601AF87F1010100C38F7D9E903F61BF473FCF9FB80F1F
5643   B327                    defb 16,0,16,0,176,7,96,15,128,17,192,107,97,252,64,64,192,48,99,223,39,164,79,216,239,209,207,243,39,238,195,199
5643   B327 10001000B007600F8011C06B61FC4040C03063DF27A44FD8EFD1CFF327EEC3C7
5644   B347                    defb 4,0,4,0,236,1,216,3,96,4,240,26,24,127,16,16,48,12,216,247,9,233,19,246,123,244,243,252,137,251,240,241
5644   B347 04000400EC01D8036004F01A187F1010300CD8F709E913F67BF4F3FC89FBF0F1
5645   B367                    defb 0,0,0,32,15,160,31,96,34,216,104,156,124,126,225,254,141,62,130,198,1,216,1,156,2,12,3,0,2,0,0,0
5645   B367 000000200FA01F6022D8689C7C7EE1FE8D3E82C601D8019C020C030002000000
5646   B387                    defb 0,0,0,8,3,232,7,216,8,182,26,39,159,31,184,127,163,79,160,177,0,118,0,103,0,131,0,192,0,128,0,0
5646   B387 0000000803E807D808B61A279F1FB87FA34FA0B100760067008300C000800000
5647   B3A7                    defb 0,0,0,2,0,250,1,246,130,45,198,137,231,199,238,31,232,211,104,44,128,29,192,25,192,32,0,48,0,32,0,0
5647   B3A7 0000000200FA01F6822DC689E7C7EE1FE8D3682C801DC019C020003000200000
5648   B3C7                    defb 0,0,128,0,128,62,128,125,96,139,113,162,249,241,251,135,250,52,26,11,96,7,112,6,48,8,0,12,0,8,0,0
5648   B3C7 00008000803E807D608B71A2F9F1FB87FA341A0B600770063008000C00080000
5649   B3E7                    defb 0,0,16,0,25,192,15,32,6,180,11,52,105,204,68,112,210,32,218,32,191,208,31,216,31,188,15,20,6,4,0,0
5649   B3E7 0000100019C00F2006B40B3469CC4470D220DA20BFD01FD81FBC0F1406040000
5650   B407                    defb 0,0,4,0,6,112,3,200,1,173,2,205,26,115,17,28,52,136,54,136,47,244,7,246,7,239,3,197,1,129,0,0
5650   B407 00000400067003C801AD02CD1A73111C348836882FF407F607EF03C501810000
5651   B427                    defb 0,0,1,0,1,156,0,242,64,107,64,179,198,156,4,71,13,34,13,162,11,253,129,253,193,251,64,241,64,96,0,0
5651   B427 00000100019C00F2406B40B3C69C04470D220DA20BFD81FDC1FB40F140600000
5652   B447                    defb 0,0,0,64,0,103,128,60,208,26,208,44,49,167,193,17,131,72,131,104,66,255,96,127,240,126,80,60,16,24,0,0
5652   B447 000000400067803CD01AD02C31A7C1118348836842FF607FF07E503C10180000
5653   B467                    defb 0,0,16,0,25,192,15,32,6,180,11,52,105,204,68,112,210,34,218,70,191,187,31,184,31,208,15,0,6,0,0,0
5653   B467 0000100019C00F2006B40B3469CC4470D222DA46BFBB1FB81FD00F0006000000
5654   B487                    defb 0,0,4,0,6,112,3,200,1,173,2,205,26,115,17,28,180,136,182,145,239,238,7,238,7,244,3,192,1,128,0,0
5654   B487 00000400067003C801AD02CD1A73111CB488B691EFEE07EE07F403C001800000
5655   B4A7                    defb 0,0,1,0,1,156,0,242,64,107,64,179,198,156,4,71,45,34,109,164,187,251,129,251,1,253,0,240,0,96,0,0
5655   B4A7 00000100019C00F2406B40B3C69C04472D226DA4BBFB81FB01FD00F000600000
5656   B4C7                    defb 0,0,0,64,0,103,128,60,208,26,208,44,49,167,193,17,139,72,27,105,238,254,224,126,64,127,0,60,0,24,0,0
5656   B4C7 000000400067803CD01AD02C31A7C1118B481B69EEFEE07E407F003C00180000
5657   B4E7                    defb 0,0,0,0,0,0,3,224,6,176,6,176,11,104,25,204,9,72,4,144,3,96,0,128,11,232,4,16,0,0,0,0
5657   B4E7 00000000000003E006B006B00B6819CC09480490036000800BE8041000000000
5658   B507                    defb 0,0,0,0,0,0,0,248,1,172,1,172,2,218,6,115,2,82,1,36,0,216,0,32,2,250,1,4,0,0,0,0
5658   B507 00000000000000F801AC01AC02DA06730252012400D8002002FA010400000000
5659   B527                    defb 0,0,0,0,0,0,0,62,0,107,0,107,128,182,193,156,128,148,0,73,0,54,0,8,128,190,0,65,0,0,0,0
5659   B527 000000000000003E006B006B80B6C19C809400490036000880BE004100000000
5660   B547                    defb 0,0,0,0,0,0,128,15,192,26,192,26,160,45,48,103,32,37,64,18,128,13,0,2,160,47,64,16,0,0,0,0
5660   B547 000000000000800FC01AC01AA02D306720254012800D0002A02F401000000000
5661   B567                    defb 0,0,0,0,0,0,0,0,0,0,0,0,5,64,4,0,8,32,9,64,4,64,0,0,4,64,5,64,5,64,4,64
5661   B567 0000000000000000000000000540040008200940044000000440054005400440
5662   B587                    defb 0,0,0,0,0,0,0,0,0,0,0,0,1,80,1,0,2,8,2,80,1,16,0,0,1,16,1,80,1,80,1,16
5662   B587 0000000000000000000000000150010002080250011000000110015001500110
5663   B5A7                    defb 0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,64,0,130,0,148,0,68,0,0,0,68,0,84,0,84,0,68
5663   B5A7 0000000000000000000000000054004000820094004400000044005400540044
5664   B5C7                    defb 0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,16,128,32,0,37,0,17,0,0,0,17,0,21,0,21,0,17
5664   B5C7 0000000000000000000000000015001080200025001100000011001500150011
5665   B5E7                    defb 0,16,24,56,24,100,36,64,6,64,0,0,5,80,20,0,8,32,9,64,4,64,0,0,5,64,4,64,0,0,0,0
5665   B5E7 0010183818642440064000000550140008200940044000000540044000000000
5666   B607                    defb 0,4,6,14,6,25,9,16,1,144,0,0,1,84,5,0,2,8,2,80,1,16,0,0,1,80,1,16,0,0,0,0
5666   B607 0004060E06190910019000000154050002080250011000000150011000000000
5667   B627                    defb 0,1,129,131,65,134,2,68,0,100,0,0,0,85,1,64,0,130,0,148,0,68,0,0,0,84,0,68,0,0,0,0
5667   B627 0001818341860244006400000055014000820094004400000054004400000000
5668   B647                    defb 64,0,224,96,144,97,0,145,0,25,0,0,64,21,0,80,128,32,0,37,0,17,0,0,0,21,0,17,0,0,0,0
5668   B647 4000E06090610091001900004015005080200025001100000015001100000000
5669   B667                    defb 96,22,144,1,192,13,40,34,0,0,0,0,96,6,144,9,136,17,64,6,0,2,0,0,0,0,0,0,0,0,0,0
5669   B667 60169001C00D2822000000006006900988114006000200000000000000000000
5670   B687                    defb 152,5,100,0,112,3,138,8,0,0,0,0,152,1,100,2,98,4,144,1,128,0,0,0,0,0,0,0,0,0,0,0
5670   B687 9805640070038A08000000009801640262049001800000000000000000000000
5671   B6A7                    defb 102,1,25,0,220,0,34,130,0,0,0,0,102,0,153,0,24,129,100,0,32,0,0,0,0,0,0,0,0,0,0,0
5671   B6A7 66011900DC002282000000006600990018816400200000000000000000000000
5672   B6C7                    defb 89,128,6,64,55,0,136,160,0,0,0,0,25,128,38,64,70,32,25,0,8,0,0,0,0,0,0,0,0,0,0,0
5672   B6C7 59800640370088A0000000001980264046201900080000000000000000000000
5673   B6E7                    defb 0,0,7,192,24,48,32,8,64,100,64,20,128,10,128,10,128,2,144,2,80,4,72,4,32,8,24,48,7,192,0,0
5673   B6E7 000007C01830200840644014800A800A80029002500448042008183007C00000
5674   B707                    defb 0,0,1,240,6,12,8,2,16,25,16,5,160,2,160,2,160,0,164,0,20,1,18,1,8,2,6,12,1,240,0,0
5674   B707 000001F0060C080210191005A002A002A000A400140112010802060C01F00000
5675   B727                    defb 0,0,0,124,1,131,130,0,68,6,68,1,168,0,168,0,40,0,41,0,69,0,68,128,130,0,1,131,0,124,0,0
5675   B727 0000007C0183820044064401A800A800280029004500448082000183007C0000
5676   B747                    defb 0,0,0,31,192,96,32,128,145,1,81,0,42,0,42,0,10,0,10,64,17,64,17,32,32,128,192,96,0,31,0,0
5676   B747 0000001FC0602080910151002A002A000A000A40114011202080C060001F0000
5677   B767                    defb 15,224,16,16,32,8,64,100,64,20,128,10,128,10,128,10,160,2,160,2,144,2,80,4,72,4,32,8,24,48,7,192
5677   B767 0FE01010200840644014800A800A800AA002A0029002500448042008183007C0
5678   B787                    defb 3,248,4,4,8,2,16,25,16,5,160,2,160,2,160,2,168,0,168,0,164,0,20,1,18,1,8,2,6,12,1,240
5678   B787 03F80404080210191005A002A002A002A800A800A400140112010802060C01F0
5679   B7A7                    defb 0,254,1,1,130,0,68,6,68,1,168,0,168,0,168,0,42,0,42,0,41,0,69,0,68,128,130,0,1,131,0,124
5679   B7A7 00FE0101820044064401A800A800A8002A002A0029004500448082000183007C
5680   B7C7                    defb 128,63,64,64,32,128,145,1,81,0,42,0,42,0,42,0,10,128,10,128,10,64,17,64,17,32,32,128,192,96,0,31
5680   B7C7 803F40402080910151002A002A002A000A800A800A40114011202080C060001F
5681   B7E7                    defb 4,32,6,96,114,78,16,8,0,0,192,3,96,6,0,0,0,0,96,6,192,3,0,0,16,8,114,78,6,96,4,32
5681   B7E7 04200660724E10080000C0036006000000006006C00300001008724E06600420
5682   B807                    defb 1,8,1,152,156,147,4,2,0,0,240,0,152,1,0,0,0,0,152,1,240,0,0,0,4,2,156,147,1,152,1,8
5682   B807 010801989C9304020000F0009801000000009801F000000004029C9301980108
5683   B827                    defb 0,66,0,102,231,36,129,0,0,0,60,0,102,0,0,0,0,0,102,0,60,0,0,0,129,0,231,36,0,102,0,66
5683   B827 00420066E724810000003C0066000000000066003C0000008100E72400660042
5684   B847                    defb 128,16,128,25,57,201,32,64,0,0,15,0,25,128,0,0,0,0,25,128,15,0,0,0,32,64,57,201,128,25,128,16
5684   B847 8010801939C9204000000F0019800000000019800F000000204039C980198010
5685   B867             frmlst equ $
5686   B867 00 03              defb 0,3
5687   B869 03 03              defb 3,3
5688   B86B 06 03              defb 6,3
5689   B86D 09 03              defb 9,3
5690   B86F 0C 03              defb 12,3
5691   B871 0F 03              defb 15,3
5692   B873 12 03              defb 18,3
5693   B875 15 03              defb 21,3
5694   B877 18 03              defb 24,3
5695   B879 1B 01              defb 27,1
5696   B87B 1C 02              defb 28,2
5697   B87D 1E 01              defb 30,1
5698   B87F 1F 03              defb 31,3
5699   B881 22 03 25 00        defb 34,3,37,0
5700   B885             scdat  equ $
5701   B885 7B 00 C6 00        defw 123,198
5702   B889                    defb 255,0,80,23,255,0,5,23,255,0,6,23,255,0,5,23,255,0,4,7,8,9,10,255,0,26,11,12,13,14,255,0,26
5702   B889 FF005017FF000517FF000617FF000517FF00040708090AFF001A0B0C0D0EFF00
5702   B8A9 1A
5703   B8AA                    defb 15,16,17,18,255,0,26,19,20,21,22,255,0,5,23,255,0,8,23,255,0,34,23,255,0,12,23,255,0,5,23,255,0,102
5703   B8AA 0F101112FF001A13141516FF000517FF000817FF002217FF000C17FF000517FF
5703   B8CA 0066
5704   B8CC                    defb 255,1,14,255,0,10,23,255,0,5,6,255,5,12,6,255,0,4,23,255,0,70,23,255,0,8,23,255,0,6,23,255,0,48
5704   B8CC FF010EFF000A17FF000506FF050C06FF000417FF004617FF000817FF000617FF
5704   B8EC 0030
5705   B8EE                    defb 23,255,0,76,255,1,8,255,0,16,255,1,6,255,2,8,255,4,16,255,2,6
5705   B8EE 17FF004CFF0108FF0010FF0106FF0208FF0410FF0206
5706   B904                    defb 255,0,80,23,255,0,5,23,255,0,6,23,255,0,5,23,255,0,29,1,1,255,0,11,1,1,1,255,0,7,7,8,9
5706   B904 FF005017FF000517FF000617FF000517FF001D0101FF000B010101FF00070708
5706   B924 09
5707   B925                    defb 10,0,0,0,5,5,255,0,11,5,41,5,255,0,7,11,12,13,14,255,0,17,42,255,0,8,15,16,17,18,255,0,17
5707   B925 0A0000000505FF000B052905FF00070B0C0D0EFF00112AFF00080F101112FF00
5707   B945 11
5708   B946                    defb 43,255,0,8,19,20,21,22,0,23,255,0,12,23,255,0,5,23,255,0,18,1,1,1,255,0,27,5,41,5,255,0,28
5708   B946 2BFF0008131415160017FF000C17FF000517FF0012010101FF001B052905FF00
5708   B966 1C
5709   B967                    defb 42,255,0,29,43,255,0,16,23,255,0,4,1,1,1,255,0,10,7,8,9,10,0,0,23,255,0,10,5,41,5,255,0,10
5709   B967 2AFF001D2BFF001017FF0004010101FF000A0708090A000017FF000A052905FF
5709   B987 000A
5710   B989                    defb 11,12,13,14,255,0,14,42,255,0,11,15,16,17,18,255,0,13,23,43,255,0,7,23,0,0,0,19,20,21,22,255,0,48
5710   B989 0B0C0D0EFF000E2AFF000B0F101112FF000D172BFF00071700000013141516FF
5710   B9A9 0030
5711   B9AB                    defb 23,255,1,4,255,0,26,255,5,4,255,0,42,255,1,8,255,0,16,255,1,6,255,2,8,255,4,16,255,2,6
5711   B9AB 17FF0104FF001AFF0504FF002AFF0108FF0010FF0106FF0208FF0410FF0206
5712   B9CA 02          numsc  defb 2
5713   B9CB             nmedat defb 0,0,152,8,8,8,80,120,8,8,80,72,8,8,80,168,8,8,152,208,8,8,152,40,255
5713   B9CB 000098080808507808085048080850A8080898D008089828FF
5714   B9E4                    defb 0,0,152,8,8,8,16,72,8,8,16,176,8,8,56,120,8,8,88,64,8,8,128,120,255
5714   B9E4 0000980808081048080810B0080838780808584008088078FF
5715   B9FD             NUMOBJ equ 34
5716   B9FD             objdta equ $
5717   B9FD                    defb 0,0,0,0,30,56,59,124,125,174,125,182,255,214,255,222,255,222,255,220,127,188,63,120,30,240,8,32,4,64,2,128,71,255,80,88,255,80,88
5717   B9FD 000000001E383B7C7DAE7DB6FFD6FFDEFFDEFFDC7FBC3F781EF0082004400280
5717   BA1D 47FF5058FF5058
5718   BA24                    defb 0,0,30,0,59,0,125,184,125,188,255,204,255,214,255,214,255,222,127,158,63,60,30,124,9,248,8,240,4,64,2,128,71,255,8,8,255,8,8
5718   BA24 00001E003B007DB87DBCFFCCFFD6FFD6FFDE7F9E3F3C1E7C09F808F004400280
5718   BA44 47FF0808FF0808
5719   BA4B                    defb 0,0,30,0,59,0,125,128,125,128,255,192,255,192,255,192,255,192,127,128,63,0,30,0,8,0,8,0,4,0,2,0,71,255,0,0,255,0,0
5719   BA4B 00001E003B007D807D80FFC0FFC0FFC0FFC07F803F001E000800080004000200
5719   BA6B 47FF0000FF0000
5720   BA72                    defb 0,0,0,240,1,216,3,188,3,188,7,254,7,254,7,254,7,254,3,252,1,248,0,240,0,32,0,64,0,128,0,128,71,255,64,112,255,64,112
5720   BA72 000000F001D803BC03BC07FE07FE07FE07FE03FC01F800F00020004000800080
5720   BA92 47FF4070FF4070
5721   BA99                    defb 0,0,3,192,7,224,15,176,15,208,31,216,31,248,31,248,31,248,15,240,7,224,7,224,3,192,1,0,0,128,1,0,71,255,64,144,255,64,144
5721   BA99 000003C007E00FB00FD01FD81FF81FF81FF80FF007E007E003C0010000800100
5721   BAB9 47FF4090FF4090
5722   BAC0                    defb 0,0,3,192,7,224,15,176,15,208,31,216,31,248,31,248,31,248,15,240,7,224,7,224,3,192,1,0,0,128,1,0,71,255,0,0,255,0,0
5722   BAC0 000003C007E00FB00FD01FD81FF81FF81FF80FF007E007E003C0010000800100
5722   BAE0 47FF0000FF0000
5723   BAE7                    defb 0,0,3,192,7,224,15,176,15,208,31,216,31,248,31,248,31,248,15,240,7,224,7,224,3,192,1,0,0,128,1,0,71,255,0,0,255,0,0
5723   BAE7 000003C007E00FB00FD01FD81FF81FF81FF80FF007E007E003C0010000800100
5723   BB07 47FF0000FF0000
5724   BB0E                    defb 0,0,3,192,7,224,15,176,15,208,31,216,31,248,31,248,31,248,15,240,7,224,7,224,3,192,1,0,0,128,1,0,71,255,0,0,255,0,0
5724   BB0E 000003C007E00FB00FD01FD81FF81FF81FF80FF007E007E003C0010000800100
5724   BB2E 47FF0000FF0000
5725   BB35                    defb 0,0,3,192,7,224,15,176,15,208,31,216,31,248,31,248,31,248,15,240,7,224,7,224,3,192,1,0,0,128,1,0,71,255,0,0,255,0,0
5725   BB35 000003C007E00FB00FD01FD81FF81FF81FF80FF007E007E003C0010000800100
5725   BB55 47FF0000FF0000
5726   BB5C                    defb 0,0,3,192,7,224,15,176,15,208,31,216,31,248,31,248,31,248,15,240,7,224,7,224,3,192,1,0,0,128,1,0,71,255,0,0,255,0,0
5726   BB5C 000003C007E00FB00FD01FD81FF81FF81FF80FF007E007E003C0010000800100
5726   BB7C 47FF0000FF0000
5727   BB83                    defb 0,0,0,0,0,0,0,0,0,0,5,64,27,176,55,216,119,220,111,236,239,238,144,18,110,236,17,16,9,32,5,64,71,255,0,0,255,0,0
5727   BB83 0000000000000000000005401BB037D877DC6FECEFEE90126EEC111009200540
5727   BBA3 47FF0000FF0000
5728   BBAA                    defb 0,0,0,0,0,0,0,0,0,0,5,64,27,176,55,216,119,220,111,236,239,238,144,18,110,236,17,16,9,32,5,64,71,255,0,0,255,0,0
5728   BBAA 0000000000000000000005401BB037D877DC6FECEFEE90126EEC111009200540
5728   BBCA 47FF0000FF0000
5729   BBD1                    defb 0,0,0,0,0,0,0,0,0,0,5,64,27,176,55,216,119,220,111,236,239,238,144,18,110,236,17,16,9,32,5,64,71,255,0,0,255,0,0
5729   BBD1 0000000000000000000005401BB037D877DC6FECEFEE90126EEC111009200540
5729   BBF1 47FF0000FF0000
5730   BBF8                    defb 0,0,0,0,0,0,0,0,0,0,5,64,27,176,55,216,119,220,111,236,239,238,144,18,110,236,17,16,9,32,5,64,71,255,0,0,255,0,0
5730   BBF8 0000000000000000000005401BB037D877DC6FECEFEE90126EEC111009200540
5730   BC18 47FF0000FF0000
5731   BC1F                    defb 0,0,0,0,0,0,0,0,0,0,5,64,27,176,55,216,119,220,111,236,239,238,144,18,110,236,17,16,9,32,5,64,71,255,0,0,255,0,0
5731   BC1F 0000000000000000000005401BB037D877DC6FECEFEE90126EEC111009200540
5731   BC3F 47FF0000FF0000
5732   BC46                    defb 0,0,0,0,0,0,0,0,0,0,5,64,27,176,55,216,119,220,111,236,239,238,144,18,110,236,17,16,9,32,5,64,71,255,0,0,255,0,0
5732   BC46 0000000000000000000005401BB037D877DC6FECEFEE90126EEC111009200540
5732   BC66 47FF0000FF0000
5733   BC6D                    defb 0,0,0,0,0,0,3,224,6,176,6,176,11,104,25,204,9,72,4,144,3,96,0,128,11,232,4,16,0,0,0,0,71,255,0,0,255,0,0
5733   BC6D 00000000000003E006B006B00B6819CC09480490036000800BE8041000000000
5733   BC8D 47FF0000FF0000
5734   BC94                    defb 0,0,3,192,5,96,10,176,13,80,26,168,21,88,26,168,21,88,26,168,13,80,10,176,5,96,2,192,1,128,1,0,71,255,32,24,255,32,24
5734   BC94 000003C005600AB00D501AA815581AA815581AA80D500AB0056002C001800100
5734   BCB4 47FF2018FF2018
5735   BCBB                    defb 0,0,3,192,4,32,8,16,8,80,16,40,16,40,16,8,16,8,16,8,8,16,8,16,4,32,2,64,1,128,1,0,71,255,0,0,255,0,0
5735   BCBB 000003C004200810085010281028100810081008081008100420024001800100
5735   BCDB 47FF0000FF0000
5736   BCE2                    defb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,255,0,0,255,0,0
5736   BCE2 0000000000000000000000000000000000000000000000000000000000000000
5736   BD02 47FF0000FF0000
5737   BD09                    defb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,255,0,0,255,0,0
5737   BD09 0000000000000000000000000000000000000000000000000000000000000000
5737   BD29 47FF0000FF0000
5738   BD30                    defb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,255,0,0,255,0,0
5738   BD30 0000000000000000000000000000000000000000000000000000000000000000
5738   BD50 47FF0000FF0000
5739   BD57                    defb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,255,0,0,255,0,0
5739   BD57 0000000000000000000000000000000000000000000000000000000000000000
5739   BD77 47FF0000FF0000
5740   BD7E                    defb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,255,0,0,255,0,0
5740   BD7E 0000000000000000000000000000000000000000000000000000000000000000
5740   BD9E 47FF0000FF0000
5741   BDA5                    defb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,255,0,0,255,0,0
5741   BDA5 0000000000000000000000000000000000000000000000000000000000000000
5741   BDC5 47FF0000FF0000
5742   BDCC                    defb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,255,0,0,255,0,0
5742   BDCC 0000000000000000000000000000000000000000000000000000000000000000
5742   BDEC 47FF0000FF0000
5743   BDF3                    defb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,255,0,0,255,0,0
5743   BDF3 0000000000000000000000000000000000000000000000000000000000000000
5743   BE13 47FF0000FF0000
5744   BE1A                    defb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,255,0,0,255,0,0
5744   BE1A 0000000000000000000000000000000000000000000000000000000000000000
5744   BE3A 47FF0000FF0000
5745   BE41                    defb 0,0,0,0,0,0,0,0,59,184,34,168,58,168,10,168,59,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,255,0,0,255,0,0
5745   BE41 00000000000000003BB822A83AA80AA83BB80000000000000000000000000000
5745   BE61 47FF0000FF0000
5746   BE68                    defb 0,0,0,0,0,0,0,0,59,184,10,40,11,168,8,168,11,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,255,0,0,255,0,0
5746   BE68 00000000000000003BB80A280BA808A80BB80000000000000000000000000000
5746   BE88 47FF0000FF0000
5747   BE8F                    defb 0,0,0,0,0,0,0,0,46,238,42,170,42,170,42,170,46,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,255,0,0,255,0,0
5747   BE8F 00000000000000002EEE2AAA2AAA2AAA2EEE0000000000000000000000000000
5747   BEAF 47FF0000FF0000
5748   BEB6                    defb 0,0,0,0,0,0,0,0,46,238,40,170,46,170,34,170,46,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,255,0,0,255,0,0
5748   BEB6 00000000000000002EEE28AA2EAA22AA2EEE0000000000000000000000000000
5748   BED6 47FF0000FF0000
5749   BEDD                    defb 0,0,0,0,0,0,0,0,238,238,42,170,234,170,138,170,238,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,255,0,0,255,0,0
5749   BEDD 0000000000000000EEEE2AAAEAAA8AAAEEEE0000000000000000000000000000
5749   BEFD 47FF0000FF0000
5750   BF04                    defb 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,255,0,0,255,0,0
5750   BF04 0000000000000000000000000000000000000000000000000000000000000000
5750   BF24 47FF0000FF0000
5751   BF2B             palett equ $
5752   BF2B                    defb 0,2,20,19,128,227,200,146,0,2,20,19,128,227,200,146
5752   BF2B 0002141380E3C8920002141380E3C892
5753   BF3B                    defb 0,35,60,63,224,227,252,255,0,35,60,63,224,227,252,255
5753   BF3B 00233C3FE0E3FCFF00233C3FE0E3FCFF
5754   BF4B                    defb 0,33,39,162,243,64,128,244,0,33,39,162,243,64,128,244
5754   BF4B 002127A2F34080F4002127A2F34080F4
5755   BF5B                    defb 0,44,80,120,108,109,146,219,0,44,80,120,108,109,146,219
5755   BF5B 002C50786C6D92DB002C50786C6D92DB
5756   BF6B             font   equ $
5757   BF6B                    defb 135,62,2,205,153,128,205,158
5757   BF6B 873E02CD9980CD9E
5758   BF73                    defb 135,201,201,201,201,201,0,24
5758   BF73 87C9C9C9C9C90018
5759   BF7B                    defb 108,108,108,0,0,0,0,0
5759   BF7B 6C6C6C0000000000
5760   BF83                    defb 108,108,254,108,254,108,108,0
5760   BF83 6C6CFE6CFE6C6C00
5761   BF8B                    defb 48,124,192,120,12,248,48,0
5761   BF8B 307CC0780CF83000
5762   BF93                    defb 0,198,204,24,48,102,198,0
5762   BF93 00C6CC183066C600
5763   BF9B                    defb 56,108,56,118,220,204,118,0
5763   BF9B 386C3876DCCC7600
5764   BFA3                    defb 96,96,192,0,0,0,0,0
5764   BFA3 6060C00000000000
5765   BFAB                    defb 24,48,96,96,96,48,24,0
5765   BFAB 1830606060301800
5766   BFB3                    defb 96,48,24,24,24,48,96,0
5766   BFB3 6030181818306000
5767   BFBB                    defb 0,102,60,255,60,102,0,0
5767   BFBB 00663CFF3C660000
5768   BFC3                    defb 0,48,48,252,48,48,0,0
5768   BFC3 003030FC30300000
5769   BFCB                    defb 0,0,0,0,0,48,48,96
5769   BFCB 0000000000303060
5770   BFD3                    defb 0,0,0,252,0,0,0,0
5770   BFD3 000000FC00000000
5771   BFDB                    defb 0,0,0,0,0,48,48,0
5771   BFDB 0000000000303000
5772   BFE3                    defb 6,12,24,48,96,192,128,0
5772   BFE3 060C183060C08000
5773   BFEB                    defb 56,76,198,198,198,100,56,0
5773   BFEB 384CC6C6C6643800
5774   BFF3                    defb 24,56,24,24,24,24,126,0
5774   BFF3 1838181818187E00
5775   BFFB                    defb 124,198,14,60,120,224,254,0
5775   BFFB 7CC60E3C78E0FE00
5776   C003                    defb 126,12,24,60,6,198,124,0
5776   C003 7E0C183C06C67C00
5777   C00B                    defb 28,60,108,204,254,12,12,0
5777   C00B 1C3C6CCCFE0C0C00
5778   C013                    defb 252,192,252,6,6,198,124,0
5778   C013 FCC0FC0606C67C00
5779   C01B                    defb 60,96,192,252,198,198,124,0
5779   C01B 3C60C0FCC6C67C00
5780   C023                    defb 254,198,12,24,48,48,48,0
5780   C023 FEC60C1830303000
5781   C02B                    defb 124,198,198,124,198,198,124,0
5781   C02B 7CC6C67CC6C67C00
5782   C033                    defb 124,198,198,126,6,12,120,0
5782   C033 7CC6C67E060C7800
5783   C03B                    defb 0,48,48,0,0,48,48,0
5783   C03B 0030300000303000
5784   C043                    defb 0,48,48,0,0,48,48,96
5784   C043 0030300000303060
5785   C04B                    defb 24,48,96,192,96,48,24,0
5785   C04B 183060C060301800
5786   C053                    defb 0,0,252,0,0,252,0,0
5786   C053 0000FC0000FC0000
5787   C05B                    defb 96,48,24,12,24,48,96,0
5787   C05B 6030180C18306000
5788   C063                    defb 120,204,12,24,48,0,48,0
5788   C063 78CC0C1830003000
5789   C06B                    defb 124,198,222,222,222,192,120,0
5789   C06B 7CC6DEDEDEC07800
5790   C073                    defb 56,108,198,198,254,198,198,0
5790   C073 386CC6C6FEC6C600
5791   C07B                    defb 252,198,198,252,198,198,252,0
5791   C07B FCC6C6FCC6C6FC00
5792   C083                    defb 60,102,192,192,192,102,60,0
5792   C083 3C66C0C0C0663C00
5793   C08B                    defb 248,204,198,198,198,204,248,0
5793   C08B F8CCC6C6C6CCF800
5794   C093                    defb 254,192,192,252,192,192,254,0
5794   C093 FEC0C0FCC0C0FE00
5795   C09B                    defb 254,192,192,252,192,192,192,0
5795   C09B FEC0C0FCC0C0C000
5796   C0A3                    defb 62,96,192,206,198,102,62,0
5796   C0A3 3E60C0CEC6663E00
5797   C0AB                    defb 198,198,198,254,198,198,198,0
5797   C0AB C6C6C6FEC6C6C600
5798   C0B3                    defb 126,24,24,24,24,24,126,0
5798   C0B3 7E18181818187E00
5799   C0BB                    defb 30,6,6,6,198,198,124,0
5799   C0BB 1E060606C6C67C00
5800   C0C3                    defb 198,204,216,240,248,220,206,0
5800   C0C3 C6CCD8F0F8DCCE00
5801   C0CB                    defb 96,96,96,96,96,96,126,0
5801   C0CB 6060606060607E00
5802   C0D3                    defb 198,238,254,254,214,198,198,0
5802   C0D3 C6EEFEFED6C6C600
5803   C0DB                    defb 198,230,246,254,222,206,198,0
5803   C0DB C6E6F6FEDECEC600
5804   C0E3                    defb 124,198,198,198,198,198,124,0
5804   C0E3 7CC6C6C6C6C67C00
5805   C0EB                    defb 252,198,198,198,252,192,192,0
5805   C0EB FCC6C6C6FCC0C000
5806   C0F3                    defb 124,198,198,198,222,204,122,0
5806   C0F3 7CC6C6C6DECC7A00
5807   C0FB                    defb 252,198,198,206,248,220,206,0
5807   C0FB FCC6C6CEF8DCCE00
5808   C103                    defb 120,204,192,124,6,198,124,0
5808   C103 78CCC07C06C67C00
5809   C10B                    defb 126,24,24,24,24,24,24,0
5809   C10B 7E18181818181800
5810   C113                    defb 198,198,198,198,198,198,124,0
5810   C113 C6C6C6C6C6C67C00
5811   C11B                    defb 198,198,198,238,124,56,16,0
5811   C11B C6C6C6EE7C381000
5812   C123                    defb 198,198,214,254,254,238,198,0
5812   C123 C6C6D6FEFEEEC600
5813   C12B                    defb 198,238,124,56,124,238,198,0
5813   C12B C6EE7C387CEEC600
5814   C133                    defb 102,102,102,60,24,24,24,0
5814   C133 6666663C18181800
5815   C13B                    defb 254,14,28,56,112,224,254,0
5815   C13B FE0E1C3870E0FE00
5816   C143                    defb 120,96,96,96,96,96,120,0
5816   C143 7860606060607800
5817   C14B                    defb 192,96,48,24,12,6,2,0
5817   C14B C06030180C060200
5818   C153                    defb 120,24,24,24,24,24,120,0
5818   C153 7818181818187800
5819   C15B                    defb 16,56,108,198,0,0,0,0
5819   C15B 10386CC600000000
5820   C163                    defb 0,0,0,0,0,0,0,255
5820   C163 00000000000000FF
5821   C16B                    defb 48,48,24,0,0,0,0,0
5821   C16B 3030180000000000
5822   C173                    defb 0,0,60,102,102,102,59,0
5822   C173 00003C6666663B00
5823   C17B                    defb 96,96,124,102,102,102,124,0
5823   C17B 60607C6666667C00
5824   C183                    defb 0,0,62,96,96,96,62,0
5824   C183 00003E6060603E00
5825   C18B                    defb 6,6,62,102,102,102,62,0
5825   C18B 06063E6666663E00
5826   C193                    defb 0,0,60,102,126,96,62,0
5826   C193 00003C667E603E00
5827   C19B                    defb 14,24,24,126,24,24,24,0
5827   C19B 0E18187E18181800
5828   C1A3                    defb 0,0,62,102,102,62,6,60
5828   C1A3 00003E66663E063C
5829   C1AB                    defb 96,96,96,124,102,102,102,0
5829   C1AB 6060607C66666600
5830   C1B3                    defb 0,24,0,24,24,24,24,0
5830   C1B3 0018001818181800
5831   C1BB                    defb 0,6,0,6,6,6,102,60
5831   C1BB 000600060606663C
5832   C1C3                    defb 96,96,98,100,104,124,102,0
5832   C1C3 60606264687C6600
5833   C1CB                    defb 24,24,24,24,24,24,24,0
5833   C1CB 1818181818181800
5834   C1D3                    defb 0,0,118,107,107,107,107,0
5834   C1D3 0000766B6B6B6B00
5835   C1DB                    defb 0,0,124,102,102,102,102,0
5835   C1DB 00007C6666666600
5836   C1E3                    defb 0,0,60,102,102,102,60,0
5836   C1E3 00003C6666663C00
5837   C1EB                    defb 0,0,124,102,102,124,96,96
5837   C1EB 00007C66667C6060
5838   C1F3                    defb 0,0,62,102,102,62,6,6
5838   C1F3 00003E66663E0606
5839   C1FB                    defb 0,0,110,112,96,96,96,0
5839   C1FB 00006E7060606000
5840   C203                    defb 0,0,60,64,60,6,124,0
5840   C203 00003C403C067C00
5841   C20B                    defb 48,48,252,48,48,48,28,0
5841   C20B 3030FC3030301C00
5842   C213                    defb 0,0,102,102,102,102,60,0
5842   C213 0000666666663C00
5843   C21B                    defb 0,0,102,102,102,36,24,0
5843   C21B 0000666666241800
5844   C223                    defb 0,0,99,107,107,107,54,0
5844   C223 0000636B6B6B3600
5845   C22B                    defb 0,0,99,54,28,54,99,0
5845   C22B 000063361C366300
5846   C233                    defb 0,0,102,102,44,24,48,96
5846   C233 000066662C183060
5847   C23B                    defb 0,0,126,12,24,48,126,0
5847   C23B 00007E0C18307E00
5848   C243                    defb 28,48,48,224,48,48,28,0
5848   C243 1C3030E030301C00
5849   C24B                    defb 24,24,24,0,24,24,24,0
5849   C24B 1818180018181800
5850   C253                    defb 224,48,48,28,48,48,224,0
5850   C253 E030301C3030E000
5851   C25B                    defb 118,220,0,0,0,0,0,0
5851   C25B 76DC000000000000
5852   C263                    defb 0,16,56,108,198,198,254,0
5852   C263 0010386CC6C6FE00
5853   C26B             jtab   equ $
5854   C26B 63                 defb 99
5855   C26C             keys   defb 35,27,29,28,16,31,1,36,28,20,12
5855   C26C 231B1D1C101F01241C140C
5856   C277             	savetap "test.tap",start
5857   C277             
