ca65 V2.9.2 - (C) Copyright 1998-2000 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $0300
000000r 1               	.DEFINE header   1		; Header Wouter Ras emulator
000000r 1               	.DEFINE filenaam "AGD"
000000r 1               
000000r 1               .org asm_code-22*header
0002EA  1               
0002EA  1               .IF header
0002EA  1               ;********************************************************************
0002EA  1               ; ATM Header for Atom emulator Wouter Ras
0002EA  1               
0002EA  1               name_start:
0002EA  1  41 47 44     	.byte filenaam			; Filename
0002ED  1               name_end:
0002ED  1  00 00 00 00  	.repeat 16-name_end+name_start	; Fill with 0 till 16 chars
0002F1  1  00 00 00 00  
0002F5  1  00 00 00 00  
0002FA  1               	  .byte $0
0002FA  1               	.endrep
0002FA  1               
0002FA  1  00 03        	.word asm_code			; 2 bytes startaddress
0002FC  1  00 03        	.word exec			; 2 bytes linkaddress
0002FE  1  F5 36        	.word eind_asm-start_asm	; 2 bytes filelength
000300  1               
000300  1               ;********************************************************************
000300  1               .ENDIF
000300  1               
000300  1               exec:
000300  1               start_asm:
000300  1               	.include "z80-zp.inc"
000300  1               	.include "game.inc"
000300  2               .segment "ZEROPAGE"
000300  2               
000300  2               ws	 = $60
000300  2               
000300  2               z80_f	 = ws+$00
000300  2               z80_a	 = ws+$01
000300  2               z80_af	 = z80_f
000300  2               
000300  2               z80_c	 = ws+$02
000300  2               z80_b	 = ws+$03
000300  2               z80_bc	 = z80_c
000300  2               
000300  2               z80_e	 = ws+$04
000300  2               z80_d	 = ws+$05
000300  2               z80_de	 = z80_e
000300  2               
000300  2               z80_l	 = ws+$06
000300  2               z80_h	 = ws+$07
000300  2               z80_hl	 = z80_l
000300  2               
000300  2               z80_x    = ws+$08
000300  2               z80_i    = ws+$09
000300  2               z80_ix	 = z80_x
000300  2               
000300  2               z80_iy	 = ws+$0a
000300  2               
000300  2               z80_fp	 = ws+$0c
000300  2               z80_ap	 = ws+$0d
000300  2               
000300  2               z80_cp	 = ws+$0e
000300  2               z80_bp	 = ws+$0f
000300  2               z80_bcp	 = z80_cp
000300  2               
000300  2               z80_ep	 = ws+$10
000300  2               z80_dp	 = ws+$11
000300  2               z80_dep	 = z80_ep
000300  2               
000300  2               z80_lp	 = ws+$12
000300  2               z80_hp	 = ws+$13
000300  2               z80_hlp	 = z80_lp
000300  2               
000300  2               z80_sp   = ws+$14
000300  2               
000300  2               z80_reg0 = ws+$16
000300  2               z80_reg1 = ws+$17
000300  2               z80_reg2 = ws+$18
000300  2               z80_reg3 = ws+$19
000300  2               
000300  2               z80_r	 = ws+$1a
000300  2               
000300  2               
000300  1               	.include "z80.asm"
000300  2               .include "ladder.inc" 
000300  2               
000300  3               ; Game engine code --------------------------------------------------------------
000300  3               
000300  3               ; Arcade Game Designer.
000300  3               ; (C) 2008 Jonathan Cauldwell.
000300  3               ; ZX Spectrum Next Engine v0.1.
000300  3               
000300  3               ; Global definitions ------------------------------------------------------------
000300  3               
000300  3               	FONT = font		; Font address
000300  3               	SIMASK = 248		; SPRITEINK mask - default to just INK.
000300  3               ;	SHRAPN = 63926		; shrapnel table, just below screen address table.
000300  3               ;	SCADTB = 64256		; screen address table, just below map.
000300  3               ;	MAP = 22528		; properties map buffer.
000300  3               
000300  3               ;	loopa = 23681           ; loop counter system variable.
000300  3               ;	loopb = 23728           ; loop counter system variable.
000300  3               ;	loopc = 23729           ; loop counter system variable.
000300  3               
000300  3               ; Block characteristics.
000300  3               
000300  3               	PLATFM = 1		; platform.
000300  3               	WALL = PLATFM + 1	; solid wall.
000300  3               	LADDER = WALL + 1	; ladder.
000300  3               	FODDER = LADDER + 1	; fodder block.
000300  3               	DEADLY = FODDER + 1	; deadly block.
000300  3               	CUSTOM = DEADLY + 1	; custom block.
000300  3               	NUMTYP = CUSTOM + 1	; number of types.
000300  3               
000300  3               ; Sprites.
000300  3               
000300  3               	NUMSPR = 12		; number of sprites.
000300  3               	TABSIZ = 17		; size of each entry.
000300  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000300  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
000300  3               	var_X  = 8		; new x coordinate of sprite.
000300  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
000300  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
000300  3               
000300  3               ; Particle engine.
000300  3               
000300  3               	NUMSHR = 55		; pieces of shrapnel.
000300  3               	SHRSIZ = 6		; bytes per particle.
000300  3               
000300  3               ; Local vars
000300  3               
000300  3               	scraddr	= $80
000300  3               	fntaddr	= $82
000300  3               	tileaddr= $84
000300  3               	bufaddr	= $86
000300  3               	tmp     = $88
000300  3               
000300  3               ; System constants
000300  3               
000300  3               	TxtInvert   = $ff	; Invert byte for character printing
000300  3               	ScrFillByte = $ff	; Screen fill byte for CLS
000300  3               	ScrMode     = $f0	; Screen mode:
000300  3               				;  $d0 = CLEAR4a colour
000300  3               				;  $f0 = CLEAR4  mono
000300  3               	ScrSelAddr  = $b000	; Screen selection address
000300  3               	KeyRowAddr  = $b000	; PIA key matrix row
000300  3               	KeyColAddr  = $b001	; PIA key matrix column
000300  3               
000300  3               ; System calls
000300  3               
000300  3               	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
000300  3               	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
000300  3               	OSRDCH   = $fe94	; get key subroutine
000300  3                       READKEY  = $fe71	; scan key matrix subroutine
000300  3               
000300  3               ;===============================================================
000300  3               ; Game starts here
000300  3               ;===============================================================
000300  3               
000300  3               .segment "CODE"
000300  3               
000300  3               ;--------------------------------------------------------------
000300  3               ; If a font is required...
000300  3               ;--------------------------------------------------------------
000300  3               
000300  3  A9 93        	lda #<(FONT-256)	; address of font.
000302  3  8D 28 27     	sta FontPtr
000305  3  A9 34        	lda #>(FONT-256)
000307  3  8D 29 27     	sta FontPtr+1
00030A  3               
00030A  3  4C DF 0B     	jmp game	 	; start the game.
00030D  3               
00030D  3  00           contrl:	.byte 0			; control, 0 = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
00030E  3  00           joyval:	.byte 0			; joystick reading.
00030F  3  00           frmno:	.byte 0			; selected frame.
000310  3               
000310  3               ; Don't change the order of these four.  
000310  3               ; Menu routine relies on winlft following wintop.
000310  3               
000310  3  01           wintop:	.byte WINDOWTOP		; top of window.
000311  3  01           winlft:	.byte WINDOWLFT		; left edge.
000312  3  16           winhgt:	.byte WINDOWHGT		; window height.
000313  3  16           winwid:	.byte WINDOWWID		; window width.
000314  3  01           numob:	.byte NUMOBJ		; number of objects in game.
000315  3               
000315  3               ; Variables start here.
000315  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000315  3               
000315  3  08           wntopx:	.byte (8 * WINDOWTOP)
000316  3  08           wnlftx:	.byte (8 * WINDOWLFT)
000317  3  A8           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
000318  3  A8           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)
000319  3               
000319  3  00           scno:	.byte 0			; present screen number.
00031A  3  03           numlif:	.byte 3			; number of lives.
00031B  3               
00031B  3  00           vara:	.byte 0			; general-purpose variable.
00031C  3  00           varb:	.byte 0			; general-purpose variable.
00031D  3  00           varc:	.byte 0			; general-purpose variable.
00031E  3  00           vard:	.byte 0			; general-purpose variable.
00031F  3  00           vare:	.byte 0			; general-purpose variable.
000320  3  00           varf:	.byte 0			; general-purpose variable.
000321  3  00           varg:	.byte 0			; general-purpose variable.
000322  3  00           varh:	.byte 0			; general-purpose variable.
000323  3  00           vari:	.byte 0			; general-purpose variable.
000324  3  00           varj:	.byte 0			; general-purpose variable.
000325  3  00           vark:	.byte 0			; general-purpose variable.
000326  3  00           varl:	.byte 0			; general-purpose variable.
000327  3  00           varm:	.byte 0			; general-purpose variable.
000328  3  00           varn:	.byte 0			; general-purpose variable.
000329  3  00           varo:	.byte 0			; general-purpose variable.
00032A  3  00           varp:	.byte 0			; general-purpose variable.
00032B  3  00           varq:	.byte 0			; general-purpose variable.
00032C  3  00           varr:	.byte 0			; general-purpose variable.
00032D  3  00           vars:	.byte 0			; general-purpose variable.
00032E  3  00           vart:	.byte 0			; general-purpose variable.
00032F  3  00           varu:	.byte 0			; general-purpose variable.
000330  3  00           varv:	.byte 0			; general-purpose variable.
000331  3  00           varw:	.byte 0			; general-purpose variable.
000332  3  00           varz:	.byte 0			; general-purpose variable.
000333  3               
000333  3  00           charx:	.byte 0			; cursor x position.
000334  3  00           chary:	.byte 0			; cursor y position.
000335  3               
000335  3  00           clock:	.byte 0			; last clock reading.
000336  3  FF           varrnd:	.byte 255		; last random number.
000337  3  FE           varobj:	.byte 254		; last object number.
000338  3  FF           varopt:	.byte 255		; last option chosen from menu.
000339  3  FF           varblk:	.byte 255		; block type.
00033A  3  00           nexlev:	.byte 0			; next level flag.
00033B  3  00           restfl:	.byte 0			; restart screen flag.
00033C  3  00           deadf:	.byte 0			; dead flag.
00033D  3  00           gamwon:	.byte 0			; game won flag.
00033E  3  00           dispx:	.byte 0			; cursor x position.
00033F  3  00           dispy:	.byte 0			; cursor y position.
000340  3               
000340  3               ; Make sure pointers are arranged in the same order as the data itself.
000340  3               
000340  3  FE 30        frmptr:	.word frmlst         ; sprite frames.
000342  3               
000342  3               ; Assorted game routines which can go in contended memory.
000342  3               
000342  3               ;--------------------------------------------------------------
000342  3               ; Modify for inventory.
000342  3               ; called by the INV command
000342  3               ;
000342  3               ; Input:
000342  3               ;  X   = message nr with objects seperated with ,
000342  3               ;
000342  3               ; Output:
000342  3               ;  OPT = selected line nr of INV menu
000342  3               ;--------------------------------------------------------------
000342  3               
000342  3               minve:
000342  3  A9 5F        	lda #<(invdis)		; routine address.
000344  3  8D 31 04     	sta mod0+1		; set up menu routine.
000347  3  8D 9E 03     	sta mod2+1		; set up count routine.
00034A  3  A9 05        	lda #>(invdis)
00034C  3  8D 32 04     	sta mod0+2
00034F  3  8D 9F 03     	sta mod2+2
000352  3  A9 77        	lda #<(fopt)		; find option from available objects.
000354  3  8D D0 04     	sta mod1+1		; set up routine.
000357  3  A9 05        	lda #>(fopt)
000359  3  8D D1 04     	sta mod1+1+1
00035C  3  4C 79 03     	jmp dbox		; do menu routine.
00035F  3               
00035F  3               ;--------------------------------------------------------------
00035F  3               ; Modify for menu.
00035F  3               ; called by the MENU command
00035F  3               ;
00035F  3               ; Input:
00035F  3               ;  X   = message nr with menu items seperated with ,
00035F  3               ;
00035F  3               ; Output:
00035F  3               ;  OPT = selected line nr of MENU menu
00035F  3               ;--------------------------------------------------------------
00035F  3               
00035F  3               mmenu:
00035F  3  A9 93        	lda #<(always)		; routine address.
000361  3  8D 31 04     	sta mod0+1		; set up routine.
000364  3  8D 9E 03     	sta mod2+1		; set up count routine.
000367  3  A9 14        	lda #>(always)
000369  3  8D 32 04     	sta mod0+2
00036C  3  8D 9F 03     	sta mod2+2
00036F  3               
00036F  3  A9 04        	lda #<(fstd)		; standard option selection.
000371  3  8D D0 04     	sta mod1+1		; set up routine.
000374  3  A9 05        	lda #>(fstd)
000376  3  8D D1 04     	sta mod1+2
000379  3               
000379  3               ; Drop through into box routine.
000379  3               
000379  3               ;--------------------------------------------------------------
000379  3               ; Work out size of box for message or menu.
000379  3               ;--------------------------------------------------------------
000379  3               
000379  3               dbox:
000379  3  A9 9E        	lda #<(msgdat)		; pointer to messages.
00037B  3  85 66        	sta z80_l
00037D  3  A9 2A        	lda #>(msgdat)
00037F  3  85 67        	sta z80_h
000381  3               	
000381  3  20 C6 17     	jsr getwrd		; get message number.
000384  3               
000384  3  A5 67        	lda z80_h		; store pointer to message.
000386  3  8D 2A 27     	sta TmpAddr
000389  3  A5 66        	lda z80_l
00038B  3  8D 2B 27     	sta TmpAddr+1
00038E  3               
00038E  3  A9 01        	lda #1			; height.
000390  3  85 65        	sta z80_d
000392  3  A9 00        	lda #0			; start at object zero.
000394  3  8D 71 13     	sta combyt		; store number of object in combyt.
000397  3  85 64        	sta z80_e		; maximum width.
000399  3               dbox5:
000399  3  A9 00        	lda #0			; this line"s width.
00039B  3  85 63        	sta z80_b
00039D  3               mod2:
00039D  3  20 93 14     	jsr always		; item in player"s possession?
0003A0  3  C9 FF        	cmp #255
0003A2  3  D0 02        	bne dbox6		; not in inventory, skip this line.
0003A4  3  E6 65        	inc z80_d		; add to tally.
0003A6  3               dbox6:
0003A6  3  A0 00        	ldy #0			; get character.
0003A8  3  B1 66        	lda (z80_hl),y
0003AA  3  85 61        	sta z80_a
0003AC  3  E6 66        	inc z80_l		; next character.
0003AE  3  D0 02        	bne :+
0003B0  3  E6 67        	inc z80_h
0003B2  3               :
0003B2  3  A5 61        	lda z80_a		; reached end of line?
0003B4  3  C9 2C        	cmp #','
0003B6  3  F0 09        	beq dbox3		; yes.
0003B8  3  E6 63        	inc z80_b		; add to this line"s width.
0003BA  3  A5 61        	lda z80_a
0003BC  3  30 10        	bmi dbox4		; end of message? yes, end count.
0003BE  3  4C A6 03     	jmp dbox6		; repeat until we find the end.
0003C1  3               dbox3:
0003C1  3  A5 64        	lda z80_e		; maximum line width.
0003C3  3  C5 63        	cmp z80_b		; have we exceeded longest so far?
0003C5  3  10 D2        	bpl dbox5		; no, carry on looking.
0003C7  3  A5 63        	lda z80_b		; make this the widest so far.
0003C9  3  85 64        	sta z80_e
0003CB  3  4C 99 03     	jmp dbox5		; keep looking.
0003CE  3               dbox4:
0003CE  3  A5 64        	lda z80_e		; maximum line width.
0003D0  3  C5 63        	cmp z80_b		; have we exceeded longest so far?
0003D2  3  10 04        	bpl dbox8		; no, carry on looking.
0003D4  3  A5 63        	lda z80_b		; final line is the longest so far.
0003D6  3  85 64        	sta z80_e
0003D8  3               dbox8:
0003D8  3  C6 65        	dec z80_d		; decrement items found.
0003DA  3  D0 03        	bne :+			; total was zero.
0003DC  3  4C 2A 05     	jmp dbox15		
0003DF  3               :
0003DF  3  A5 64        	lda z80_e		; longest line.
0003E1  3  D0 03        	bne :+			; was it zero?
0003E3  3  4C 2A 05     	jmp dbox15		; total was zero.
0003E6  3               :
0003E6  3  8D B3 05     	sta bwid		; set up size.
0003E9  3  A5 65        	lda z80_d
0003EB  3  8D B4 05     	sta blen
0003EE  3               
0003EE  3               ;--------------------------------------------------------------
0003EE  3               ; That's set up our box size.
0003EE  3               ;--------------------------------------------------------------
0003EE  3               
0003EE  3  AD 12 03     	lda winhgt		; window height in characters.
0003F1  3  38           	sec
0003F2  3  E5 65        	sbc z80_d		; subtract height of box.
0003F4  3  4A           	lsr a			; divide by 2.
0003F5  3  18           	clc
0003F6  3  6D 10 03     	adc wintop		; add top edge of window.
0003F9  3  8D B5 05     	sta btop		; set up box top.
0003FC  3               
0003FC  3  AD 13 03     	lda winwid		; window width in characters.
0003FF  3  38           	sec	
000400  3  E5 64        	sbc z80_e		; subtract box width.
000402  3  4A           	lsr a			; divide by 2.
000403  3  18           	clc
000404  3  6D 11 03     	adc winlft		; add left edge of window.
000407  3  8D B6 05     	sta blft		; box left.
00040A  3               
00040A  3  AD 28 27     	lda FontPtr		; font.
00040D  3  8D 1D 10     	sta grbase		; set up for text display.
000410  3  AD 29 27     	lda FontPtr+1
000413  3  8D 1E 10     	sta grbase+1
000416  3               
000416  3  AD 2B 27     	lda TmpAddr+1		; restore message pointer.
000419  3  85 66        	sta z80_l
00041B  3  AD 2A 27     	lda TmpAddr
00041E  3  85 67        	sta z80_h
000420  3               
000420  3  AD B5 05     	lda btop		; box top.
000423  3  8D 3F 03     	sta dispy		; set display coordinate.
000426  3  A9 00        	lda #0			; start at object zero.
000428  3  8D 71 13     	sta combyt		; store number of object in combyt.
00042B  3               dbox2:
00042B  3  AD 71 13     	lda combyt		; get object number.
00042E  3  85 61        	sta z80_a
000430  3               mod0:
000430  3  20 93 14     	jsr always		; check inventory for display.
000433  3  C9 FF        	cmp #255
000435  3  F0 03        	beq :+			
000437  3  4C 11 05     	jmp dbox13		; not in inventory, skip this line.
00043A  3               :
00043A  3  AD B6 05     	lda blft		; box left.
00043D  3  8D 3E 03     	sta dispx		; set left display position.
000440  3  AD B3 05     	lda bwid		; box width.
000443  3  85 63        	sta z80_b		; store width.
000445  3               dbox0:
000445  3  A0 00        	ldy #0			; get character.
000447  3  B1 66        	lda (z80_hl),y
000449  3  C9 2C        	cmp #','		; end of line?
00044B  3  D0 03        	bne :+
00044D  3  4C 9B 04     	jmp dbox1		; yes, next one.
000450  3               :
000450  3  C6 63        	dec z80_b		; one less to display.
000452  3  29 7F        	and #127		; remove terminator.
000454  3               
000454  3  20 32 12     	jsr pchr		; display on screen.
000457  3               
000457  3  A0 00        	ldy #0
000459  3  B1 66        	lda (z80_hl),y		; get character.
00045B  3  85 61        	sta z80_a
00045D  3  E6 66        	inc z80_l		; next character.
00045F  3  D0 02        	bne :+
000461  3  E6 67        	inc z80_h
000463  3               :
000463  3  A5 61        	lda z80_a
000465  3  C9 80        	cmp #128		; end of message?
000467  3  30 03        	bmi :+
000469  3  4C AA 04     	jmp dbox7		; yes, job done.
00046C  3               :
00046C  3  A5 63        	lda z80_b		; chars remaining.
00046E  3  F0 03        	beq :+			; are any left?
000470  3  4C 45 04     	jmp dbox0		; yes, continue.
000473  3               :
000473  3               ;---------------------------------------------------
000473  3               ; Reached limit of characters per line.
000473  3               ;---------------------------------------------------
000473  3               
000473  3               dbox9:
000473  3  A0 00        	ldy #0
000475  3  B1 66        	lda (z80_hl),y		; get character.
000477  3  E6 66        	inc z80_l		; next one.
000479  3  D0 02        	bne :+
00047B  3  E6 67        	inc z80_h
00047D  3               :
00047D  3  C9 2C        	cmp #','		; another line?
00047F  3  D0 03        	bne :+
000481  3  4C A4 04     	jmp dbox10		; yes, do next line.
000484  3               :
000484  3  C9 80        	cmp #128		; end of message?
000486  3  B0 03        	bcs :+
000488  3  4C B4 04     	jmp dbox11		; yes, finish message.
00048B  3               :
00048B  3  4C 73 04     	jmp dbox9
00048E  3               
00048E  3               ;---------------------------------------------------
00048E  3               ; Fill box to end of line.
00048E  3               ;---------------------------------------------------
00048E  3               
00048E  3               dboxf:
00048E  3  A9 20        	lda #32			; space character.
000490  3  20 32 12     	jsr pchr		; display character.
000493  3  C6 63        	dec z80_b
000495  3  F0 03        	beq :+
000497  3  4C 8E 04     	jmp dboxf		; repeat for remaining chars on line.
00049A  3               :
00049A  3  60           	rts
00049B  3               dbox1:
00049B  3  E6 66        	inc z80_l		; skip character.
00049D  3  D0 02        	bne :+
00049F  3  E6 67        	inc z80_h
0004A1  3               :
0004A1  3  20 8E 04     	jsr dboxf		; fill box out to right side.
0004A4  3               dbox10:
0004A4  3  EE 3F 03     	inc dispy		; y coordinate down a line next position.
0004A7  3  4C 2B 04     	jmp dbox2		; next line.
0004AA  3               dbox7:
0004AA  3  A5 63        	lda z80_b		; chars remaining.
0004AC  3  D0 03        	bne :+			; are any left?
0004AE  3  4C B4 04     	jmp dbox11		; no, nothing to draw.
0004B1  3               :
0004B1  3  20 8E 04     	jsr dboxf		; fill message to line.
0004B4  3               
0004B4  3               ;------------------------------------------------------
0004B4  3               ; Drawn the box menu, now select option.
0004B4  3               ;------------------------------------------------------
0004B4  3               
0004B4  3               dbox11:
0004B4  3  AD B5 05     	lda btop		; box top.
0004B7  3  8D 3F 03     	sta dispy		; set bar position.
0004BA  3               dbox14:
0004BA  3  20 36 16     	jsr joykey		; get controls.
0004BD  3  C9 7F        	cmp #$7f		; anything pressed?
0004BF  3  D0 F9        	bne dbox14		; yes, debounce it.
0004C1  3  20 35 05     	jsr dbar		; draw bar.
0004C4  3               dbox12:
0004C4  3  20 36 16     	jsr joykey		; get controls.
0004C7  3  C9 7F        	cmp #$7f		; anything pressed?
0004C9  3  F0 F9        	beq dbox12		; no, nothing.
0004CB  3  29 10        	and #16			; fire button pressed?
0004CD  3  D0 03        	bne :+
0004CF  3               mod1:
0004CF  3  4C 04 05     	jmp fstd		; yes, job done.
0004D2  3               :
0004D2  3  20 35 05     	jsr dbar		; delete bar.
0004D5  3               
0004D5  3  AD 0E 03     	lda joyval		; joystick reading.
0004D8  3  29 08        	and #8			; going up?
0004DA  3  F0 17        	beq dboxu		; yes, go up.
0004DC  3               
0004DC  3  AE 3F 03     	ldx dispy		; vertical position of bar.
0004DF  3  E8           	inx			; look down.
0004E0  3  8A           	txa
0004E1  3  38           	sec
0004E2  3  ED B5 05     	sbc btop		; find distance from top.
0004E5  3  CD B4 05     	cmp blen		; top of box.
0004E8  3  D0 03        	bne :+
0004EA  3  4C BA 04     	jmp dbox14		; yes, go no further.
0004ED  3               :
0004ED  3  EE 3F 03     	inc dispy		; move bar.
0004F0  3  4C BA 04     	jmp dbox14		; continue.
0004F3  3               dboxu:
0004F3  3  AD 3F 03     	lda dispy		; vertical position of bar.
0004F6  3  CD B5 05     	cmp btop		; are we at the top?
0004F9  3  D0 03        	bne :+
0004FB  3  4C BA 04     	jmp dbox14		; yes, go no further.
0004FE  3               :
0004FE  3  CE 3F 03     	dec dispy		; move bar.
000501  3  4C BA 04     	jmp dbox14		; continue.
000504  3               fstd:
000504  3  AD 3F 03     	lda dispy		; bar position.
000507  3  38           	sec
000508  3  ED B5 05     	sbc btop		; find selected option.
00050B  3  8D 38 03     	sta varopt		; store the option.
00050E  3  4C 21 06     	jmp redraw		; redraw the screen.
000511  3               
000511  3               ;------------------------------------------------------
000511  3               ; Option not available.  Skip this line.
000511  3               ;------------------------------------------------------
000511  3               
000511  3               dbox13:
000511  3  A0 00        	ldy #0
000513  3  B1 66        	lda (z80_hl),y		; get character.
000515  3  E6 66        	inc z80_l		; next one.
000517  3  D0 02        	bne :+
000519  3  E6 67        	inc z80_h
00051B  3               :
00051B  3  C9 2C        	cmp #','		; another line?
00051D  3  D0 03        	bne :+
00051F  3  4C 2B 04     	jmp dbox2		; yes, do next line.
000522  3               :
000522  3  10 03        	bpl :+			; end of message?
000524  3  4C B4 04     	jmp dbox11		; yes, finish message.
000527  3               :
000527  3  4C 11 05     	jmp dbox13
00052A  3               dbox15:
00052A  3  AD 2A 27     	lda TmpAddr		; pop message pointer from the stack.
00052D  3  85 67        	sta z80_h
00052F  3  AD 2B 27     	lda TmpAddr+1
000532  3  85 66        	sta z80_l
000534  3  60           	rts
000535  3               
000535  3               ;------------------------------------------------------
000535  3               ; Invert bar
000535  3               ;------------------------------------------------------
000535  3               
000535  3               dbar:
000535  3  AD B6 05     	lda blft		; box left.
000538  3  8D 3E 03     	sta dispx		; set display coordinate.
00053B  3  20 64 11     	jsr gprad		; get printing address.
00053E  3               
00053E  3  AD B3 05     	lda bwid		; box width.
000541  3  85 62        	sta z80_c		; loop counter in c.
000543  3  A5 67        	lda z80_h		
000545  3  85 65        	sta z80_d		; store screen address high byte.
000547  3               dbar1:
000547  3  A2 07        	ldx #7			; pixel height in b.
000549  3               dbar0:
000549  3  BC DA 11     	ldy scrtab,x
00054C  3  B1 80        	lda (scraddr),y		; get screen byte.
00054E  3  49 FF        	eor #255		; reverse all bits.
000550  3  91 80        	sta (scraddr),y		; write back to screen.
000552  3  CA           	dex			; next line down.
000553  3  10 F4        	bpl dbar0		; draw rest of character.
000555  3               
000555  3  E6 80        	inc scraddr		; one char right.
000557  3  C6 62        	dec z80_c		; decrement character counter.
000559  3  F0 03        	beq :+
00055B  3  4C 47 05     	jmp dbar1		; repeat for whole line.
00055E  3               :
00055E  3  60           	rts
00055F  3               
00055F  3               ;------------------------------------------------------
00055F  3               ; Point to object
00055F  3               ;
00055F  3               ; Input:
00055F  3               ;  -
00055F  3               ;
00055F  3               ; Output:
00055F  3               ;  A = object number, A=255 if already in possession
00055F  3               ;------------------------------------------------------
00055F  3               
00055F  3               invdis:
00055F  3  A5 66        	lda z80_l		; store message text pointer.
000561  3  48           	pha
000562  3  A5 67        	lda z80_h
000564  3  48           	pha
000565  3  AD 71 13     	lda combyt		; object number.
000568  3  EE 71 13     	inc combyt		; ready for next one.
00056B  3  20 BC 0E     	jsr gotob		; check if we have object.
00056E  3  A8           	tay
00056F  3  68           	pla
000570  3  85 67        	sta z80_h
000572  3  68           	pla
000573  3  85 66        	sta z80_l
000575  3  98           	tya
000576  3  60           	rts
000577  3               
000577  3               ;------------------------------------------------------
000577  3               ; Find option selected.
000577  3               ;
000577  3               ; Input:
000577  3               ;  -
000577  3               ;
000577  3               ; Output:
000577  3               ;  OPT = selected object
000577  3               ;------------------------------------------------------
000577  3               
000577  3               fopt:
000577  3  AD 3F 03     	lda dispy
00057A  3  38           	sec
00057B  3  ED B5 05     	sbc btop		; find selected option.
00057E  3  85 8A        	sta tmp+2		; option selected in b register.
000580  3  E6 8A        	inc tmp+2
000582  3               
000582  3  A9 00        	lda #0			; set to first item.
000584  3  8D 71 13     	sta combyt		; object number.
000587  3               fopt0:
000587  3  20 9D 05     	jsr fobj		; find next object in inventory.
00058A  3  C6 8A        	dec tmp+2
00058C  3  F0 03        	beq :+
00058E  3  4C 87 05     	jmp fopt0		; repeat for relevant steps down the list.
000591  3               :
000591  3  AD 71 13     	lda combyt		; get option.
000594  3  8D 38 03     	sta varopt		; store the option.
000597  3  CE 38 03     	dec varopt		; one less, due to where we increment combyt.
00059A  3  4C 21 06     	jmp redraw		; redraw the screen.
00059D  3               fobj:
00059D  3  AD 71 13     	lda combyt		; object number.
0005A0  3  EE 71 13     	inc combyt		; ready for next item.
0005A3  3  C9 00        	cmp #0
0005A5  3  D0 01        	bne :+			; in case we loop back to zero.
0005A7  3  60           	rts
0005A8  3               :
0005A8  3  20 BC 0E     	jsr gotob		; do we have this item?
0005AB  3  C9 FF        	cmp #255
0005AD  3  F0 01        	beq :+
0005AF  3  60           	rts
0005B0  3               :
0005B0  3  4C 9D 05     	jmp fobj		; yes, it's on the list.
0005B3  3               
0005B3  3  00           bwid:	.byte 0              ; box/menu width.
0005B4  3  00           blen:	.byte 0              ; box/menu height.
0005B5  3  00           btop:	.byte 0              ; box coordinates.
0005B6  3  00           blft:	.byte 0
0005B7  3               
0005B7  3               ;----------------------------------------------------
0005B7  3               ; Wait for keypress.
0005B7  3               ;----------------------------------------------------
0005B7  3               
0005B7  3               prskey:
0005B7  3  4C 94 FE     	jmp OSRDCH		; wait until key pressed
0005BA  3               
0005BA  3               ;----------------------------------------------------
0005BA  3               ; Delay routine 1/50 sec
0005BA  3               ;
0005BA  3               ; Wait 1/60 sec = 16666 usec
0005BA  3               ; Wait 208 x 16 =  3328 usec
0005BA  3               ;                 19994 usec
0005BA  3               ; rts           =     6 usec
0005BA  3               ; Total         = 20000 usec
0005BA  3               ;----------------------------------------------------
0005BA  3               
0005BA  3               delay:
0005BA  3  8D D3 12     	sta xtmp
0005BD  3               del_loop:
0005BD  3  20 66 FE     	jsr SCRSYNC		; wait for flyback
0005C0  3               
0005C0  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
0005C2  3               delay1:
0005C2  3  61 80        	adc ($80,x)		;	 6 usec
0005C4  3  61 80        	adc ($80,x)		;	 6 usec
0005C6  3  88           	dey			;	 2 usec
0005C7  3  D0 F9        	bne delay1		;	 2 usec
0005C9  3  EA           	nop			; 2 usec
0005CA  3  EA           	nop			; 2 usec
0005CB  3               				; tot: 20000 usec
0005CB  3  CE D3 12     	dec xtmp
0005CE  3  D0 ED        	bne del_loop
0005D0  3  60           	rts
0005D1  3               
0005D1  3               ;----------------------------------------------------
0005D1  3               ; Clear sprite table.
0005D1  3               ;
0005D1  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
0005D1  3               ;----------------------------------------------------
0005D1  3               
0005D1  3               xspr:
0005D1  3  A9 FF        	lda #255		; clear byte.
0005D3  3  A2 00        	ldx #0			; length of table.
0005D5  3               xspr0:
0005D5  3  9D 7F 20     	sta sprtab,x		; sprite table.
0005D8  3  E8           	inx			; move to next byte.
0005D9  3  E0 CC        	cpx #SPRBUF
0005DB  3  D0 F8        	bne xspr0		; repeat for rest of table.
0005DD  3  60           	rts
0005DE  3               
0005DE  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0005DE  3               ; Sound, NOT IMPLEMENTED!!!
0005DE  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0005DE  3               ;
0005DE  3               ;silenc:
0005DE  3               ;	jsr silen1 		; silence channel 1.
0005DE  3               ;	jsr silen2 		; silence channel 2.
0005DE  3               ;	jsr silen3 		; silence channel 3.
0005DE  3               ;	jmp plsnd 		; play all channels to switch them off.
0005DE  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0005DE  3               
0005DE  3               ;-------------------------------------------------------------
0005DE  3               ; Initialise all objects.
0005DE  3               ;
0005DE  3               ; Reset current room,y,x to start room,y,x for all objects
0005DE  3               ;-------------------------------------------------------------
0005DE  3               
0005DE  3               iniob:
0005DE  3  A9 2D        	lda #<objdta 		; objects table.
0005E0  3  85 68        	sta z80_x
0005E2  3  A9 35        	lda #>objdta
0005E4  3  85 69        	sta z80_i
0005E6  3               
0005E6  3  AE 14 03     	ldx numob 		; number of objects in the game.
0005E9  3               iniob0:
0005E9  3  A0 23        	ldy #35
0005EB  3  B1 68        	lda (z80_ix),y 		; start screen.
0005ED  3  A0 20        	ldy #32
0005EF  3  91 68        	sta (z80_ix),y 		; set start screen.
0005F1  3               
0005F1  3  A0 24        	ldy #36
0005F3  3  B1 68        	lda (z80_ix),y 		; find start y.
0005F5  3  A0 21        	ldy #33
0005F7  3  91 68        	sta (z80_ix),y 		; set start y.
0005F9  3               
0005F9  3  A0 25        	ldy #37
0005FB  3  B1 68        	lda (z80_ix),y 		; get initial x.
0005FD  3  A0 22        	ldy #34
0005FF  3  91 68        	sta (z80_ix),y 		; set x coord.
000601  3               
000601  3  18           	clc 			; point to next object.
000602  3  A5 68        	lda z80_x
000604  3  69 26        	adc #38			; distance between objects.
000606  3  85 68        	sta z80_x
000608  3  90 02        	bcc :+
00060A  3  E6 69        	inc z80_i
00060C  3               :
00060C  3  CA           	dex 			; repeat.
00060D  3  D0 DA        	bne iniob0
00060F  3               
00060F  3  60           	rts
000610  3               
000610  3               ;-------------------------------------------------------------
000610  3               ; Screen synchronisation.
000610  3               ;
000610  3               ;  - read joystick/keyboard
000610  3               ;  - handle sound		NOT IMPLEMENTED!!
000610  3               ;  - sync framerate with clock	NOT IMPLEMENTED!!
000610  3               ;  - handle shrapnel		NOT IMPLEMENTED!!
000610  3               ;-------------------------------------------------------------
000610  3               
000610  3               vsync:
000610  3  20 36 16     	jsr joykey		; read joystick/keyboard.
000613  3  20 6B FE     	jsr SCRSYNC1		; Wait for flyback
000616  3  AD 35 03     	lda clock
000619  3  29 01        	and #1
00061B  3  D0 03        	bne:+
00061D  3  20 4C 07     	jsr proshr
000620  3               :
000620  3  60           	rts
000621  3               
000621  3               ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
000621  3               ; Sound + border colour, NOT IMPLEMENTED!!
000621  3               ;
000621  3               ;	lda sndtyp 	; sound to play.
000621  3               ;	bne :+ 	; any sound?
000621  3               ;	jmp vsync1 	; no.
000621  3               ;:
000621  3               ;	sta z80_b 	; outer loop.
000621  3               ;	lda 23624 	; border colour.
000621  3               ;	sta z80_a
000621  3               ;
000621  3               ;	; 52.xx.xx rra
000621  3               ;	lsr z80_a  	; put border bits into d0, d1 and d2.
000621  3               ;
000621  3               ;	; 52.xx.xx rra  	
000621  3               ;	lsr z80_a
000621  3               ;
000621  3               ;	; 52.xx.xx rra  	
000621  3               ;	lsr z80_a
000621  3               ;
000621  3               ;	; 29.03.03 ld c, a 	; first value to write to speaker.
000621  3               ;	lda z80_a
000621  3               ;	sta z80_c
000621  3               ;
000621  3               ;	; 29.03.03 ld a, b 	; sound.
000621  3               ;	lda z80_b
000621  3               ;	sta z80_a
000621  3               ;
000621  3               ;	; 02.03.xx and a 	; test it.
000621  3               ;	lda z80_a
000621  3               ;	and z80_a
000621  3               ;
000621  3               ;	; 27.06.00 jp m, vsync6 	; play white noise.
000621  3               ;	bpl :+
000621  3               ;	jmp vsync6
000621  3               ;:
000621  3               ;vsync2:
000621  3               ;	; 29.03.03 ld a, c 	; get speaker value.
000621  3               ;	lda z80_c
000621  3               ;	sta z80_a
000621  3               ;
000621  3               ;	; 39.02.03 out (254), a 	; write to speaker.
000621  3               ;	lda z80_a
000621  3               ;	sta 254
000621  3               ;
000621  3               ;	; 64.05.xx xor 248 	; toggle all except the border bits.
000621  3               ;	lda z80_a
000621  3               ;	eor #248
000621  3               ;	sta z80_a
000621  3               ;
000621  3               ;	; 29.03.03 ld c, a 	; store value for next time.
000621  3               ;	lda z80_a
000621  3               ;	sta z80_c
000621  3               ;
000621  3               ;	; 29.03.03 ld d, b 	; store loop counter.
000621  3               ;	lda z80_b
000621  3               ;	sta z80_d
000621  3               ;
000621  3               ;vsync3:
000621  3               ;	; 29.04.00 ld hl, clock 	; previous clock setting.
000621  3               ;	lda #<(clock)
000621  3               ;	sta z80_l
000621  3               ;	lda #>(clock)
000621  3               ;	sta z80_h
000621  3               ;
000621  3               ;	; 29.03.02 ld a, (23672) 	; current clock setting.
000621  3               ;	lda 23672
000621  3               ;	sta z80_a
000621  3               ;
000621  3               ;	; 06.01.xx cp (hl) 	; subtract last reading.
000621  3               ;	lda z80_a
000621  3               ;	ldy #0
000621  3               ;	cmp (z80_hl),y
000621  3               ;
000621  3               ;	; 27.06.00 jp nz, vsync4 	; yes, no more processing please.
000621  3               ;	beq :+
000621  3               ;	jmp vsync4
000621  3               ;:
000621  3               ;	; 15.00.xx djnz vsync3 	; loop.
000621  3               ;	dec z80_b
000621  3               ;	beq :+
000621  3               ;	jmp vsync3
000621  3               ;:
000621  3               ;	; 29.03.03 ld b, d 	; restore loop counter.
000621  3               ;	lda z80_d
000621  3               ;	sta z80_b
000621  3               ;
000621  3               ;	; 15.00.xx djnz vsync2 	; continue noise.
000621  3               ;	dec z80_b
000621  3               ;	beq :+
000621  3               ;	jmp vsync2
000621  3               ;:
000621  3               ;vsync4:
000621  3               ;	; 29.03.03 ld a, d 	; where we got to.
000621  3               ;	lda z80_d
000621  3               ;	sta z80_a
000621  3               ;
000621  3               ;vsynca:
000621  3               ;	; 29.02.03 ld (sndtyp), a 	; remember for next time.
000621  3               ;	lda z80_a
000621  3               ;	sta sndtyp
000621  3               ;
000621  3               ;vsync1:
000621  3               ;	; 29.03.02 ld a, (23672) 	; clock low.
000621  3               ;	lda 23672
000621  3               ;	sta z80_a
000621  3               ;
000621  3               ;	; 52.xx.xx rra  	; rotate bit into carry.
000621  3               ;	lsr z80_a
000621  3               ;
000621  3               ;	; 04.06.00 call c, vsync5 	; time to play sound and do shrapnel/ticker stuff.
000621  3               ;	bcc :+
000621  3               ;	jsr vsync5
000621  3               ;:
000621  3               ;	; 29.04.00 ld hl, clock 	; last clock reading.
000621  3               ;	lda #<(clock)
000621  3               ;	sta z80_l
000621  3               ;	lda #>(clock)
000621  3               ;	sta z80_h
000621  3               ;
000621  3               ;vsync0:
000621  3               ;	; 29.03.02 ld a, (23672) 	; current clock reading.
000621  3               ;	lda 23672
000621  3               ;	sta z80_a
000621  3               ;
000621  3               ;	; 06.01.xx cp (hl) 	; are they the same?
000621  3               ;	lda z80_a
000621  3               ;	ldy #0
000621  3               ;	cmp (z80_hl),y
000621  3               ;
000621  3               ;	; 28.06.00 jr z, vsync0 	; yes, wait until clock changes.
000621  3               ;	bne :+
000621  3               ;	jmp vsync0
000621  3               ;:
000621  3               ;	; 29.01.03 ld (hl), a 	; set new clock reading.
000621  3               ;	lda z80_a
000621  3               ;	ldy #0
000621  3               ;	sta (z80_hl),y
000621  3               ;
000621  3               ;	; 43.xx.xx rts  	
000621  3               ;	rts
000621  3               ;
000621  3               ;vsync5:
000621  3               ;	; 04.00.xx call plsnd 	; play sound.
000621  3               ;	jsr plsnd
000621  3               ;
000621  3               ;	; 27.00.xx jp proshr 	; shrapnel and stuff.
000621  3               ;	jmp proshr
000621  3               ;
000621  3               ;
000621  3               ;; Play white noise.
000621  3               ;
000621  3               ;vsync6:
000621  3               ;	; 29.03.03 ld a, b 	; 128 - 255.
000621  3               ;	lda z80_b
000621  3               ;	sta z80_a
000621  3               ;
000621  3               ;	; 63.05.xx sub 127 	
000621  3               ;	sec
000621  3               ;	lda z80_a
000621  3               ;	sbc #(127)
000621  3               ;	sta z80_a
000621  3               ;
000621  3               ;	; 29.03.03 ld b, a 	
000621  3               ;	lda z80_a
000621  3               ;	sta z80_b
000621  3               ;
000621  3               ;	; 29.04.00 ld hl, clock 	; previous clock setting.
000621  3               ;	lda #<(clock)
000621  3               ;	sta z80_l
000621  3               ;	lda #>(clock)
000621  3               ;	sta z80_h
000621  3               ;
000621  3               ;vsync7:
000621  3               ;	; 29.03.03 ld a, r 	; get random speaker value.
000621  3               ;	lda z80_r
000621  3               ;	sta z80_a
000621  3               ;
000621  3               ;	; 02.05.xx and 248 	; only rtsain the speaker/earphone bits.
000621  3               ;	lda z80_a
000621  3               ;	and #248
000621  3               ;
000621  3               ;	; 36.03.xx or c 	; merge with border colour.
000621  3               ;	lda z80_a
000621  3               ;	ora z80_a
000621  3               ;	sta z80_a
000621  3               ;
000621  3               ;	; 39.02.03 out (254), a 	; write to speaker.
000621  3               ;	lda z80_a
000621  3               ;	sta 254
000621  3               ;
000621  3               ;	; 29.03.02 ld a, (23672) 	; current clock setting.
000621  3               ;	lda 23672
000621  3               ;	sta z80_a
000621  3               ;
000621  3               ;	; 06.01.xx cp (hl) 	; subtract last reading.
000621  3               ;	lda z80_a
000621  3               ;	ldy #0
000621  3               ;	cmp (z80_hl),y
000621  3               ;
000621  3               ;	; 27.06.00 jp nz, vsync8 	; yes, no more processing please.
000621  3               ;	beq :+
000621  3               ;	jmp vsync8
000621  3               ;:
000621  3               ;	; 29.03.03 ld a, b 	
000621  3               ;	lda z80_b
000621  3               ;	sta z80_a
000621  3               ;
000621  3               ;	; 02.05.xx and 127 	
000621  3               ;	lda z80_a
000621  3               ;	and #127
000621  3               ;
000621  3               ;	; 22.03.xx inc a 	
000621  3               ;	inc z80_a
000621  3               ;
000621  3               ;vsync9:
000621  3               ;	; 13.03.xx dec a 	
000621  3               ;	dec z80_a
000621  3               ;
000621  3               ;	; 28.06.00 jr nz, vsync9 	; loop.
000621  3               ;	beq :+
000621  3               ;	jmp vsync9
000621  3               ;:
000621  3               ;	; 15.00.xx djnz vsync7 	; continue noise.
000621  3               ;	dec z80_b
000621  3               ;	beq :+
000621  3               ;	jmp vsync7
000621  3               ;:
000621  3               ;vsync8:
000621  3               ;	; 64.03.xx xor a 	
000621  3               ;	lda z80_a
000621  3               ;	eor z80_a
000621  3               ;	sta z80_a
000621  3               ;
000621  3               ;	; 28.00.xx jr vsynca 	
000621  3               ;	jmp vsynca
000621  3               ;
000621  3               ;	; 98.00.00 sndtyp .byte 0
000621  3               ;sndtyp:	.byte 0
000621  3               ;
000621  3               ;
000621  3               ; clock  .byte 0              ; last clock reading.
000621  3               ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
000621  3               
000621  3               ;-----------------------------------------------
000621  3               ; Redraw the screen.
000621  3               ;
000621  3               ; Remove old copy of all sprites for redraw.
000621  3               ;-----------------------------------------------
000621  3               
000621  3               redraw:
000621  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
000623  3  48           	pha
000624  3  A5 68        	lda z80_x
000626  3  48           	pha
000627  3               
000627  3  20 0A 13     	jsr droom		; show screen layout.
00062A  3  20 D6 0D     	jsr shwob		; draw objects.
00062D  3               numsp0:
00062D  3  A9 0C        	lda #NUMSPR		; sprites to draw.
00062F  3  85 88        	sta tmp
000631  3               
000631  3  A9 7F        	lda #<sprtab		; sprite table.
000633  3  85 68        	sta z80_x
000635  3  A9 20        	lda #>sprtab
000637  3  85 69        	sta z80_i
000639  3               redrw0:
000639  3  A0 00        	ldy #0
00063B  3  B1 68        	lda (z80_ix),y		; old sprite type.
00063D  3  C9 FF        	cmp #255		; is it enabled?
00063F  3  F0 0B        	beq redrw1 		; no, find next one.
000641  3               
000641  3  A0 03        	ldy #3
000643  3  B1 68        	lda (z80_ix),y 		; sprite y.
000645  3  C9 B1        	cmp #177		; beyond maximum?
000647  3  B0 03        	bcs redrw1		; yes, nothing to draw.
000649  3               
000649  3  20 13 1A     	jsr sspria		; show single sprite.
00064C  3               redrw1:
00064C  3  18           	clc			; next sprite.
00064D  3  A5 68        	lda z80_x
00064F  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
000651  3  85 68        	sta z80_x
000653  3  90 02        	bcc :+
000655  3  E6 69        	inc z80_i
000657  3               :
000657  3  C6 88        	dec tmp			; repeat for remaining sprites.
000659  3  D0 DE        	bne redrw0
00065B  3               rpblc1:
00065B  3               ;	jsr dshrp		; redraw shrapnel.
00065B  3               
00065B  3  68           	pla			; retrieve sprite pointer.
00065C  3  85 68        	sta z80_x
00065E  3  68           	pla
00065F  3  85 69        	sta z80_i
000661  3               
000661  3  60           	rts
000662  3               
000662  3               ;----------------------------------------------------------------------
000662  3               ; Clear screen routine.
000662  3               ;
000662  3               ; Fill screenmem $8000-$97ff with ScrFillByte
000662  3               ;----------------------------------------------------------------------
000662  3               
000662  3               cls:
000662  3  A9 80        	lda #>$8000		; screen address.
000664  3  8D 6D 06     	sta clsloop+2
000667  3  A9 FF        	lda #ScrFillByte
000669  3  A0 00        	ldy #0
00066B  3               clsloop:
00066B  3  99 00 80     	sta $8000,y
00066E  3  C8           	iny
00066F  3  D0 FA        	bne clsloop
000671  3  EE 6D 06     	inc clsloop+2
000674  3  AE 6D 06     	ldx clsloop+2
000677  3  E0 98        	cpx #>$9800
000679  3  D0 F0        	bne clsloop
00067B  3  60           	rts
00067C  3               
00067C  3               ;----------------------------------------------------------------------
00067C  3               ; Atomic palette is static 
00067C  3               ;----------------------------------------------------------------------
00067C  3               
00067C  3               setpal:
00067C  3  60           	rts
00067D  3               
00067D  3               ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
00067D  3               ; FODDER check
00067D  3               
00067D  3               fdchk:
00067D  3               	; 29.03.01 ld a, (hl) 	; fetch cell.
00067D  3  A0 00        	ldy #0
00067F  3  B1 66        	lda (z80_hl),y
000681  3  85 61        	sta z80_a
000683  3               
000683  3               	; 06.00.xx cp FODDER 	; is it fodder?
000683  3  A5 61        	lda z80_a
000685  3  C5 04        	cmp FODDER
000687  3               
000687  3               	; 43.06.xx rts nz 	; no.
000687  3  F0 01        	beq :+
000689  3  60           	rts
00068A  3               :
00068A  3               	; 29.01.05 ld (hl), 0 	; rewrite block type.
00068A  3  A9 00        	lda #0
00068C  3  A0 00        	ldy #0
00068E  3  91 66        	sta (z80_hl),y
000690  3               
000690  3               	; 41.04.xx push hl 	; store pointer to block.
000690  3  A5 67        	lda z80_h
000692  3  48           	pha
000693  3  A5 66        	lda z80_l
000695  3  48           	pha
000696  3               
000696  3               	; 29.04.00 ld de, MAP 	; address of map.
000696  3  A9 5E        	lda #<(MAP)
000698  3  85 64        	sta z80_e
00069A  3  A9 21        	lda #>(MAP)
00069C  3  85 65        	sta z80_d
00069E  3               
00069E  3               	; 02.03.xx and a 	; clear carry flag for subtraction.
00069E  3  A5 61        	lda z80_a
0006A0  3  25 61        	and z80_a
0006A2  3               
0006A2  3               	; 57.04.04 sbc hl, de 	; find simple displacement for block.
0006A2  3  20 E7 38     	jsr sbc_hl_de
0006A5  3               
0006A5  3               	; 29.03.03 ld a, l 	; low byte is y coordinate.
0006A5  3  A5 66        	lda z80_l
0006A7  3  85 61        	sta z80_a
0006A9  3               
0006A9  3               	; 02.05.xx and 31 	; column position 0 - 31.
0006A9  3  A5 61        	lda z80_a
0006AB  3  29 1F        	and #31
0006AD  3               
0006AD  3               	; 29.02.03 ld (dispy), a 	; set up y position.
0006AD  3  A5 61        	lda z80_a
0006AF  3  8D 3F 03     	sta dispy
0006B2  3               
0006B2  3               	; 01.04.04 add hl, hl 	; multiply displacement by 8.
0006B2  3  20 F4 39     	jsr add_hl_hl
0006B5  3               
0006B5  3               	; 01.04.04 add hl, hl 	
0006B5  3  20 F4 39     	jsr add_hl_hl
0006B8  3               
0006B8  3               	; 01.04.04 add hl, hl 	
0006B8  3  20 F4 39     	jsr add_hl_hl
0006BB  3               
0006BB  3               	; 29.03.03 ld a, h 	; x coordinate now in h.
0006BB  3  A5 67        	lda z80_h
0006BD  3  85 61        	sta z80_a
0006BF  3               
0006BF  3               	; 29.02.03 ld (dispx), a 	; set the display coordinate.
0006BF  3  A5 61        	lda z80_a
0006C1  3  8D 3E 03     	sta dispx
0006C4  3               
0006C4  3               	; 64.03.xx xor a 	; block to write.
0006C4  3  A5 61        	lda z80_a
0006C6  3  45 61        	eor z80_a
0006C8  3  85 61        	sta z80_a
0006CA  3               
0006CA  3               	; 04.00.xx call pattr 	; write block.
0006CA  3  20 E2 11     	jsr pattr
0006CD  3               
0006CD  3               	; 40.04.xx pop hl 	; restore block pointer.
0006CD  3  68           	pla
0006CE  3  85 66        	sta z80_l
0006D0  3  68           	pla
0006D1  3  85 67        	sta z80_h
0006D3  3               
0006D3  3               	; 43.xx.xx rts  	
0006D3  3  60           	rts
0006D4  3               
0006D4  3               ; Colour a sprite.
0006D4  3               
0006D4  3               cspr:
0006D4  3               	; 29.03.01 ld l, (ix+8) 	; y coordinate.
0006D4  3  A0 08        	ldy #8
0006D6  3  B1 68        	lda (z80_ix),y
0006D8  3  85 66        	sta z80_l
0006DA  3               
0006DA  3               	; 29.03.01 ld h, (ix+9) 	; x coordinate.
0006DA  3  A0 09        	ldy #9
0006DC  3  B1 68        	lda (z80_ix),y
0006DE  3  85 67        	sta z80_h
0006E0  3               
0006E0  3               	; 29.03.05 ld e, 3 	; default width.
0006E0  3  A9 03        	lda #3; default width.
0006E2  3  85 64        	sta z80_e
0006E4  3               
0006E4  3               	; 29.03.03 ld a, h 	; horizontal position.
0006E4  3  A5 67        	lda z80_h
0006E6  3  85 61        	sta z80_a
0006E8  3               
0006E8  3               	; 02.05.xx and 7 	; is it straddling cells?
0006E8  3  A5 61        	lda z80_a
0006EA  3  29 07        	and #7
0006EC  3               
0006EC  3               	; 28.06.00 jr nz, cspr0 	; yes, width is okay.
0006EC  3  F0 03        	beq :+
0006EE  3  4C F3 06     	jmp cspr0
0006F1  3               :
0006F1  3               	; 13.03.xx dec e 	; decrement width as we"re aligned on char boundary.
0006F1  3  C6 64        	dec z80_e
0006F3  3               
0006F3  3               cspr0:
0006F3  3               	; 29.02.04 ld (dispx), hl 	; set up coords for calculation.
0006F3  3  A5 66        	lda z80_l
0006F5  3  8D 3E 03     	sta dispx
0006F8  3  A5 67        	lda z80_h
0006FA  3  8D 3F 03     	sta dispx+1
0006FD  3               
0006FD  3               	; 04.00.xx call scadd 	; find screen address.
0006FD  3  20 F6 19     	jsr scadd
000700  3               
000700  3               	; 59.05.03 set 5, h 	; switch to attribute screen.
000700  3  A5 67        	lda z80_h
000702  3  09 20        	ora #_bitvalue5
000704  3  85 67        	sta z80_h
000706  3               
000706  3               	; 29.03.05 ld b, 16 	; height of sprite.
000706  3  A9 10        	lda #16; height of sprite.
000708  3  85 63        	sta z80_b
00070A  3               
00070A  3               cspr2:
00070A  3               	; 29.03.03 ld d, e 	; copy width to d.
00070A  3  A5 64        	lda z80_e
00070C  3  85 65        	sta z80_d
00070E  3               
00070E  3               	; 41.04.xx push hl 	; store attribute address.
00070E  3  A5 67        	lda z80_h
000710  3  48           	pha
000711  3  A5 66        	lda z80_l
000713  3  48           	pha
000714  3               
000714  3               cspr1:
000714  3               	; 29.03.01 ld a, (hl) 	; fetch screen contents.
000714  3  A0 00        	ldy #0
000716  3  B1 66        	lda (z80_hl),y
000718  3  85 61        	sta z80_a
00071A  3               
00071A  3               	; 02.00.xx and SIMASK 	; remove ink.
00071A  3  A5 61        	lda z80_a
00071C  3  25 F8        	and SIMASK
00071E  3               
00071E  3               	; 36.03.xx or c 	; put in the new ink.
00071E  3  A5 61        	lda z80_a
000720  3  05 61        	ora z80_a
000722  3  85 61        	sta z80_a
000724  3               
000724  3               	; 29.01.03 ld (hl), a 	; write back to screen.
000724  3  A5 61        	lda z80_a
000726  3  A0 00        	ldy #0
000728  3  91 66        	sta (z80_hl),y
00072A  3               
00072A  3               	; 22.03.xx inc l 	; adjacent byte.
00072A  3  E6 66        	inc z80_l
00072C  3               
00072C  3               	; 13.03.xx dec d 	; one less byte to write.
00072C  3  C6 65        	dec z80_d
00072E  3               
00072E  3               	; 28.06.00 jr nz, cspr1 	; repeat for all columns.
00072E  3  F0 03        	beq :+
000730  3  4C 14 07     	jmp cspr1
000733  3               :
000733  3               	; 40.04.xx pop hl 	; restore attribute address.
000733  3  68           	pla
000734  3  85 66        	sta z80_l
000736  3  68           	pla
000737  3  85 67        	sta z80_h
000739  3               
000739  3               	; 04.00.xx call nattr 	; get address of next attribute cell down.
000739  3  20 7D 1A     	jsr nattr
00073C  3               
00073C  3               	; 15.00.xx djnz cspr2 	; repeat for all rows.
00073C  3  C6 63        	dec z80_b
00073E  3  F0 03        	beq :+
000740  3  4C 0A 07     	jmp cspr2
000743  3               :
000743  3               	; 43.xx.xx rts  	
000743  3  60           	rts
000744  3               
000744  3               
000744  3               ;----------------------------------------------------
000744  3               ; Scrolly text and puzzle variables. NOT IMPLEMENTED!!
000744  3               ;----------------------------------------------------
000744  3               
000744  3  80           txtbit:	.byte 128		; bit to write.
000745  3  10           txtwid:	.byte 16		; width of ticker message.
000746  3  9E 2A        txtpos:	.word msgdat
000748  3  9E 2A        txtini:	.word msgdat
00074A  3  16 40        txtscr:	.word 16406
00074C  3               
00074C  3               ;----------------------------------------------------
00074C  3               ; Specialist routines.
00074C  3               ; Process shrapnel.
00074C  3               ;----------------------------------------------------
00074C  3               
00074C  3               proshr:
00074C  3  A9 DE        	lda #<SHRAPN		; table.
00074E  3  85 68        	sta z80_x
000750  3  A9 25        	lda #>SHRAPN
000752  3  85 69        	sta z80_i
000754  3               
000754  3  A9 37        	lda #NUMSHR		; shrapnel pieces to process.
000756  3  85 63        	sta z80_b
000758  3               prosh0:
000758  3  A0 00        	ldy #0
00075A  3  B1 68        	lda (z80_ix),y		; on/off marker.
00075C  3  0A           	asl a
00075D  3               proshx:
00075D  3  B0 03        	bcs :+
00075F  3  20 74 07     	jsr prosh1 		; on, so process it.
000762  3               :
000762  3  18           	clc
000763  3  A5 68        	lda z80_x
000765  3  69 06        	adc #SHRSIZ
000767  3  85 68        	sta z80_x
000769  3  90 02        	bcc :+
00076B  3  E6 69        	inc z80_i
00076D  3               :
00076D  3  C6 63        	dec z80_b		; round again.
00076F  3  D0 E7        	bne prosh0
000771  3  4C F0 1E     	jmp scrly
000774  3               
000774  3               ;----------------------------------------------------
000774  3               ; Proces shrapnel piece
000774  3               ;----------------------------------------------------
000774  3               
000774  3               prosh1:
000774  3  20 6B 08     	jsr plot 		; delete the pixel.
000777  3               
000777  3  A9 A1        	lda #<shrptr		; shrapnel routine pointers.
000779  3  85 66        	sta z80_l
00077B  3  A9 07        	lda #>shrptr
00077D  3  85 67        	sta z80_h
00077F  3               
00077F  3  A0 00        	ldy #0
000781  3  B1 68        	lda (z80_ix),y		; restore shrapnel type.
000783  3  20 92 07     	jsr prosh2 		; run the routine.
000786  3  20 35 08     	jsr chkxy		; check x and y are good before we redisplay.
000789  3               
000789  3  A9 06        	lda #<SHRSIZ 		; distance to next.
00078B  3  85 64        	sta z80_e
00078D  3  A9 00        	lda #>SHRSIZ
00078F  3  85 65        	sta z80_d
000791  3  60           	rts
000792  3               
000792  3               ;----------------------------------------------------
000792  3               ; Run the routine
000792  3               ;----------------------------------------------------
000792  3               
000792  3               prosh2:
000792  3  0A           	asl a 			; 2 bytes per address.
000793  3  A8           	tay
000794  3  B9 A1 07     	lda shrptr,y
000797  3  85 66        	sta z80_l
000799  3  B9 A2 07     	lda shrptr+1,y 		; fetch high byte from table.
00079C  3  85 67        	sta z80_h
00079E  3  6C 66 00     	jmp (z80_hl) 		; jump to routine.
0007A1  3               
0007A1  3               ;----------------------------------------------------
0007A1  3               ; Paricle routine table
0007A1  3               ;----------------------------------------------------
0007A1  3               
0007A1  3  3E 09        shrptr:	.word laser		; laser.
0007A3  3  EC 08        	.word trail		; vapour trail.
0007A5  3  B1 07        	.word shrap		; shrapnel from explosion.
0007A7  3  0D 08        	.word dotl		; horizontal starfield left.
0007A9  3  17 08        	.word dotr		; horizontal starfield right.
0007AB  3  21 08        	.word dotu		; vertical starfield up.
0007AD  3  2B 08        	.word dotd		; vertical starfield down.
0007AF  3  9D 2A        	.word ptcusr		; user particle.
0007B1  3               
0007B1  3               ;----------------------------------------------------
0007B1  3               ; Explosion shrapnel.
0007B1  3               ;----------------------------------------------------
0007B1  3               
0007B1  3               shrap:
0007B1  3  A0 01        	ldy #1
0007B3  3  B1 68        	lda (z80_ix),y 		; get the angle.
0007B5  3  18           	clc
0007B6  3  69 AC        	adc #<shrsin		; shrapnel sine table.
0007B8  3  85 66        	sta z80_l
0007BA  3  A9 08        	lda #>shrsin
0007BC  3  69 00        	adc #0
0007BE  3  85 67        	sta z80_h
0007C0  3               
0007C0  3  A0 00        	ldy #0
0007C2  3  B1 66        	lda (z80_hl),y 		; fetch value from table.
0007C4  3  85 64        	sta z80_e
0007C6  3  E6 66        	inc z80_l 		; next byte of table.
0007C8  3  D0 02        	bne :+
0007CA  3  E6 67        	inc z80_h
0007CC  3               :
0007CC  3  A0 00        	ldy #0
0007CE  3  B1 66        	lda (z80_hl),y		; fetch value from table.
0007D0  3  85 65        	sta z80_d
0007D2  3  E6 66        	inc z80_l		; next byte of table.
0007D4  3  D0 02        	bne :+
0007D6  3  E6 67        	inc z80_h
0007D8  3               :
0007D8  3  A0 00        	ldy #0
0007DA  3  B1 66        	lda (z80_hl),y 		; fetch value from table.
0007DC  3  85 62        	sta z80_c
0007DE  3  E6 66        	inc z80_l 		; next byte of table.
0007E0  3  D0 02        	bne :+
0007E2  3  E6 67        	inc z80_h
0007E4  3               :
0007E4  3  A0 00        	ldy #0
0007E6  3  B1 66        	lda (z80_hl),y 		; fetch value from table.
0007E8  3  85 63        	sta z80_b
0007EA  3               
0007EA  3  A0 02        	ldy #2
0007EC  3  B1 68        	lda (z80_ix),y 		; x coordinate in hl.
0007EE  3  18           	clc
0007EF  3  65 64        	adc z80_e		; add sine lb
0007F1  3  91 68        	sta (z80_ix),y		; store new coordinate lb.
0007F3  3  A0 03        	ldy #3
0007F5  3  B1 68        	lda (z80_ix),y
0007F7  3  65 65        	adc z80_d		; add sine hb
0007F9  3  91 68        	sta (z80_ix),y		; store new coordinate hb.
0007FB  3               
0007FB  3  A0 04        	ldy #4
0007FD  3  B1 68        	lda (z80_ix),y	 	; y coordinate in hl.
0007FF  3  18           	clc
000800  3  65 62        	adc z80_c		; add cosine lb
000802  3  91 68        	sta (z80_ix),y		; store new coordinate lb.
000804  3  A0 05        	ldy #5
000806  3  B1 68        	lda (z80_ix),y
000808  3  65 63        	adc z80_b		; add cosine lb
00080A  3  91 68        	sta (z80_ix),y		; store new coordinate hb.
00080C  3               
00080C  3  60           	rts
00080D  3               
00080D  3               ;----------------------------------------------------
00080D  3               ; Move dots
00080D  3               ;----------------------------------------------------
00080D  3               
00080D  3               dotl:
00080D  3  A0 05        	ldy #5
00080F  3  B1 68        	lda (z80_ix),y
000811  3  38           	sec
000812  3  E9 01        	sbc #1		 	; move left.
000814  3  91 68        	sta (z80_ix),y
000816  3  60           	rts
000817  3               dotr:
000817  3  A0 05        	ldy #5
000819  3  B1 68        	lda (z80_ix),y
00081B  3  18           	clc
00081C  3  69 01        	adc #1		 	; move left.
00081E  3  91 68        	sta (z80_ix),y
000820  3  60           	rts
000821  3               dotu:
000821  3  A0 03        	ldy #3
000823  3  B1 68        	lda (z80_ix),y
000825  3  38           	sec
000826  3  E9 01        	sbc #1		 	; move up.
000828  3  91 6B        	sta (z80_ix+3),y
00082A  3  60           	rts
00082B  3               dotd:
00082B  3  A0 03        	ldy #3
00082D  3  B1 68        	lda (z80_ix),y
00082F  3  18           	clc
000830  3  69 01        	adc #1			; move down.
000832  3  91 68        	sta (z80_ix),y
000834  3  60           	rts
000835  3               
000835  3               ;----------------------------------------------------
000835  3               ; Check coordinates are good before redrawing at new position.
000835  3               ;----------------------------------------------------
000835  3               
000835  3               chkxy:
000835  3  A0 03        	ldy #3
000837  3  B1 68        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000839  3  CD 15 03     	cmp wntopx		; window top.
00083C  3  B0 03        	bcs :+			; compare with top window limit.
00083E  3  4C A5 08     	jmp kilshr		; out of window, kill shrapnel.
000841  3               :
000841  3  A0 05        	ldy #5
000843  3  B1 68        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000845  3  CD 16 03     	cmp wnlftx		; left edge.
000848  3  B0 03        	bcs :+			; compare with left window limit.
00084A  3  4C A5 08     	jmp kilshr		; out of window, kill shrapnel.
00084D  3               :
00084D  3  A0 03        	ldy #3
00084F  3  B1 68        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000851  3  18           	clc
000852  3  69 0F        	adc #15			; add height of sprite.
000854  3  CD 17 03     	cmp wnbotx		; point to bottom.
000857  3  90 03        	bcc :+			; compare with shrapnel x coordinate.
000859  3  4C A5 08     	jmp kilshr		; off screen, kill shrapnel..
00085C  3               :
00085C  3  A0 05        	ldy #5
00085E  3  B1 68        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000860  3  18           	clc
000861  3  69 0F        	adc #15			; add width of sprite.
000863  3  CD 18 03     	cmp wnrgtx		; point to right edge.
000866  3  90 03        	bcc :+			; compare with window limit.
000868  3  4C A5 08     	jmp kilshr		; off screen, kill shrapnel.
00086B  3               :
00086B  3               
00086B  3               ;----------------------------------------------------
00086B  3               ; Drop through.
00086B  3               ; Display shrapnel.
00086B  3               ;----------------------------------------------------
00086B  3               
00086B  3               plot:
00086B  3  A0 03        	ldy #3
00086D  3  B1 68        	lda (z80_ix),y		; y integer.
00086F  3  8D 3F 03     	sta dispy	 	; workspace coordinates.
000872  3  A0 05        	ldy #5
000874  3  B1 68        	lda (z80_ix),y	 	; x integer.
000876  3  8D 3E 03     	sta dispx 		; workspace coordinates.
000879  3               
000879  3  A0 00        	ldy #0
00087B  3  B1 68        	lda (z80_ix),y 		; type.
00087D  3  D0 03        	bne :+			; is it a laser?
00087F  3  4C 99 08     	jmp plot1 		; yes, draw laser instead.
000882  3               :
000882  3               plot0:
000882  3  AD 3E 03     	lda dispx		; which pixel within byte do we
000885  3  29 07        	and #7			; want to set first?
000887  3  A8           	tay
000888  3  B9 71 09     	lda dots,y 		; table of small pixel positions.
00088B  3  85 64        	sta z80_e 		; get value.
00088D  3               
00088D  3  20 F6 19     	jsr scadd 		; screen address.
000890  3  A0 00        	ldy #0
000892  3  B1 80        	lda (scraddr),y		; see what's already there.
000894  3  45 64        	eor z80_e
000896  3  91 80        	sta (scraddr),y 	; put back on screen.
000898  3  60           	rts
000899  3               
000899  3               plot1:
000899  3  20 F6 19     	jsr scadd 		; screen address.
00089C  3  A0 00        	ldy #0
00089E  3  B1 80        	lda (scraddr),y 	; fetch byte there.
0008A0  3  49 FF        	eor #255 		; toggle all bits.
0008A2  3  91 80        	sta (scraddr),y 	; new byte.
0008A4  3  60           	rts
0008A5  3               
0008A5  3               ;----------------------------------------------------
0008A5  3               ; Switch off shrapnel
0008A5  3               ;----------------------------------------------------
0008A5  3               
0008A5  3               kilshr:
0008A5  3  A9 80        	lda #128
0008A7  3  A0 00        	ldy #0
0008A9  3  91 68        	sta (z80_ix),y	; switch off shrapnel.
0008AB  3  60           	rts
0008AC  3               
0008AC  3               ;----------------------------------------------------
0008AC  3               ; Sine/cosine table
0008AC  3               ;----------------------------------------------------
0008AC  3               
0008AC  3  00 00 00 04  shrsin:	.word 0,1024,391,946,724,724,946,391
0008B0  3  87 01 B2 03  
0008B4  3  D4 02 D4 02  
0008BC  3  00 04 00 00  	.word 1024,0,946,65144,724,64811,391,64589
0008C0  3  B2 03 78 FE  
0008C4  3  D4 02 2B FD  
0008CC  3  00 00 00 FC  	.word 0,64512,65144,64589,64811,64811,64589,65144
0008D0  3  78 FE 4D FC  
0008D4  3  2B FD 2B FD  
0008DC  3  00 FC 00 00  	.word 64512,0,64589,391,64811,724,65144,946
0008E0  3  4D FC 87 01  
0008E4  3  2B FD D4 02  
0008EC  3               
0008EC  3               ;----------------------------------------------------
0008EC  3               ; Create trail
0008EC  3               ;----------------------------------------------------
0008EC  3               
0008EC  3               trail:
0008EC  3  A0 01        	ldy #1
0008EE  3  B1 68        	lda (z80_ix),y 	; time remaining.
0008F0  3  38           	sec
0008F1  3  E9 01        	sbc #1
0008F3  3  91 68        	sta (z80_ix),y
0008F5  3  D0 03        	bne :+
0008F7  3  4C 37 09     	jmp trailk		; time to switch it off.
0008FA  3               :
0008FA  3  20 57 0B     	jsr qrand		; get a random number.
0008FD  3  4A           	lsr a 			; x or y axis?
0008FE  3  90 03        	bcc :+
000900  3  4C 1D 09     	jmp trailv		; use y.
000903  3               :
000903  3               ; Trail horizontal
000903  3               
000903  3  4A           	lsr a 			; which direction?
000904  3  90 03        	bcc :+
000906  3  4C 13 09     	jmp traill		; go left.
000909  3               :
000909  3               ; Trail right
000909  3               
000909  3  A0 05        	ldy #5
00090B  3  B1 68        	lda (z80_ix),y
00090D  3  18           	clc
00090E  3  69 01        	adc #1	 		; go right.
000910  3  91 68        	sta (z80_ix),y
000912  3  60           	rts
000913  3               
000913  3               ; Trail left
000913  3               
000913  3               traill:
000913  3  A0 05        	ldy #5
000915  3  B1 68        	lda (z80_ix),y
000917  3  38           	sec
000918  3  E9 01        	sbc #1 			; go left.
00091A  3  91 68        	sta (z80_ix),y
00091C  3  60           	rts
00091D  3               
00091D  3               ; Trail vertical
00091D  3               
00091D  3               trailv:
00091D  3  4A           	lsr a		 	; which direction?
00091E  3  90 03        	bcc :+
000920  3  4C 2D 09     	jmp trailu		; go up.
000923  3               :
000923  3               ; Trail down
000923  3               
000923  3  A0 03        	ldy #3
000925  3  B1 68        	lda (z80_ix),y
000927  3  18           	clc
000928  3  69 01        	adc #1 			; go down.
00092A  3  91 68        	sta (z80_ix),y
00092C  3  60           	rts
00092D  3               
00092D  3               ; Trail up
00092D  3               
00092D  3               trailu:
00092D  3  A0 03        	ldy #3
00092F  3  B1 68        	lda (z80_ix),y
000931  3  38           	sec
000932  3  E9 01        	sbc #1 			; go up.
000934  3  91 68        	sta (z80_ix),y
000936  3  60           	rts
000937  3               
000937  3               ; Kill trail
000937  3               
000937  3               trailk:
000937  3  A9 C8        	lda #200		; set off-screen to kill vapour trail.
000939  3  A0 03        	ldy #3
00093B  3  91 68        	sta (z80_ix),y
00093D  3  60           	rts
00093E  3               
00093E  3               ;----------------------------------------------------
00093E  3               ; Create laser beam
00093E  3               ;----------------------------------------------------
00093E  3               
00093E  3               laser:
00093E  3  A0 01        	ldy #1
000940  3  B1 68        	lda (z80_ix),y 		; direction.
000942  3  4A           	lsr a 			; left or right?
000943  3  B0 03        	bcs :+
000945  3  4C 4F 09     	jmp laserl		; move left.
000948  3               :
000948  3               ; Laser right
000948  3               
000948  3  A9 08        	lda #8			; distance to travel.
00094A  3  85 63        	sta z80_b
00094C  3  4C 53 09     	jmp laserm		; move laser.
00094F  3               
00094F  3               ; Laser left
00094F  3               
00094F  3               laserl:
00094F  3  A9 F8        	lda #248		; distance to travel.
000951  3  85 63        	sta z80_b
000953  3               laserm:
000953  3  A0 05        	ldy #5
000955  3  B1 68        	lda (z80_ix),y		; x position.
000957  3  18           	clc
000958  3  65 63        	adc z80_b		; add distance.
00095A  3  91 68        	sta (z80_ix),y		; set new x coordinate.
00095C  3               
00095C  3               ; Test new block.
00095C  3               
00095C  3  8D 3E 03     	sta dispx 		; set x for block collision detection purposes.
00095F  3  A0 03        	ldy #3
000961  3  B1 68        	lda (z80_ix),y 		; get y.
000963  3  8D 3F 03     	sta dispy		; set coordinate for collision test.
000966  3  20 85 15     	jsr tstbl 		; get block type there.
000969  3  C9 02        	cmp #WALL		; is it solid?
00096B  3  D0 03        	bne :+
00096D  3  4C 37 09     	jmp trailk		; yes, it cannot pass.
000970  3               :
000970  3  60           	rts
000971  3               
000971  3               ;----------------------------------------------------
000971  3               ; Dots mask
000971  3               ;----------------------------------------------------
000971  3               
000971  3  80 40 20 10  dots:	.byte 128,64,32,16,8,4,2,1
000975  3  08 04 02 01  
000979  3               
000979  3               
000979  3               ;----------------------------------------------------
000979  3               ; Plot, preserving de.
000979  3               ;----------------------------------------------------
000979  3               
000979  3               plotde:
000979  3  A5 65        	lda z80_d 		; put de on stack.
00097B  3  48           	pha
00097C  3  A5 64        	lda z80_e
00097E  3  48           	pha
00097F  3               
00097F  3  20 6B 08     	jsr plot 		; plot pixel.
000982  3               
000982  3  68           	pla			; restore de from stack.
000983  3  85 64        	sta z80_e
000985  3  68           	pla
000986  3  85 65        	sta z80_d
000988  3               
000988  3  60           	rts
000989  3               
000989  3               ;----------------------------------------------------
000989  3               ; Shoot a laser.
000989  3               ;----------------------------------------------------
000989  3               
000989  3               shoot:
000989  3  85 62        	sta z80_c		; store direction in c register.
00098B  3  A0 08        	ldy #8
00098D  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00098F  3               shoot1:
00098F  3  18           	clc
000990  3  69 07        	adc #7 			; down 7 pixels.
000992  3  85 66        	sta z80_l 		; puty y coordinate in l.
000994  3               
000994  3  A0 09        	ldy #9
000996  3  B1 68        	lda (z80_ix),y 		; x coordinate in h.
000998  3  85 67        	sta z80_h
00099A  3               
00099A  3  A5 69        	lda z80_i		; store pointer to sprite.
00099C  3  48           	pha
00099D  3  A5 68        	lda z80_x
00099F  3  48           	pha
0009A0  3               
0009A0  3  20 C3 0A     	jsr fpslot 		; find particle slot.
0009A3  3  B0 03        	bcs :+
0009A5  3  4C F3 09     	jmp vapou2		; failed, restore ix.
0009A8  3               :
0009A8  3  A9 00        	lda #0
0009AA  3  A0 00        	ldy #0
0009AC  3  91 68        	sta (z80_ix),y 		; set up a laser.
0009AE  3               
0009AE  3  A5 62        	lda z80_c
0009B0  3  A0 01        	ldy #1
0009B2  3  91 68        	sta (z80_ix),y 		; set the direction.
0009B4  3               
0009B4  3  A5 66        	lda z80_l
0009B6  3  A0 03        	ldy #3
0009B8  3  91 68        	sta (z80_ix),y		; set y coordinate.
0009BA  3               
0009BA  3  46 62        	lsr z80_c		; check direction we want.
0009BC  3  90 03        	bcc :+
0009BE  3  4C CC 09     	jmp shootr		; shoot right.
0009C1  3               :
0009C1  3  A5 67        	lda z80_h		; y position.
0009C3  3               shoot0:
0009C3  3  29 F8        	and #248		; align on character boundary.
0009C5  3  A0 05        	ldy #5
0009C7  3  91 68        	sta (z80_ix),y		; set x coordinate.
0009C9  3  4C 18 0A     	jmp vapou0 		; draw first image.
0009CC  3               shootr:
0009CC  3  A5 67        	lda z80_h		; x position.
0009CE  3  18           	clc
0009CF  3  69 0F        	adc #15			; look right.
0009D1  3  4C C3 09     	jmp shoot0		; align and continue.
0009D4  3               
0009D4  3               ;----------------------------------------------------
0009D4  3               ; Create a bit of vapour trail.
0009D4  3               ;----------------------------------------------------
0009D4  3               
0009D4  3               vapour:
0009D4  3  A5 69        	lda z80_i		; store pointer to sprite.
0009D6  3  48           	pha
0009D7  3  A5 68        	lda z80_x
0009D9  3  48           	pha
0009DA  3               
0009DA  3  A0 08        	ldy #8
0009DC  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0009DE  3  18           	clc
0009DF  3  69 07        	adc #7			; mid-point of sprite.
0009E1  3  85 66        	sta z80_l
0009E3  3               
0009E3  3  A0 09        	ldy #9
0009E5  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0009E7  3  69 07        	adc #7
0009E9  3  85 67        	sta z80_h
0009EB  3               
0009EB  3  20 C3 0A     	jsr fpslot 		; find particle slot.
0009EE  3  90 03        	bcc :+
0009F0  3  4C FA 09     	jmp vapou1		; no, we can use it.
0009F3  3               :
0009F3  3               vapou2:
0009F3  3  68           	pla
0009F4  3  85 68        	sta z80_x
0009F6  3  68           	pla
0009F7  3  85 69        	sta z80_i
0009F9  3  60           	rts
0009FA  3               vapou1:
0009FA  3  A5 66        	lda z80_l
0009FC  3  A0 03        	ldy #3
0009FE  3  91 68        	sta (z80_ix),y		; set up y.
000A00  3               
000A00  3  A5 67        	lda z80_h
000A02  3  A0 05        	ldy #5
000A04  3  91 68        	sta (z80_ix),y 		; set up x coordinate.
000A06  3               
000A06  3  20 57 0B     	jsr qrand		; get quick random number.
000A09  3  29 0F        	and #15			; random time.
000A0B  3  18           	clc
000A0C  3  69 0F        	adc #15			; minimum time on screen.
000A0E  3  A0 01        	ldy #1
000A10  3  91 68        	sta (z80_ix),y		; set time on screen.
000A12  3               
000A12  3  A9 01        	lda #1
000A14  3  A0 00        	ldy #0
000A16  3  91 68        	sta (z80_ix),y		; define particle as vapour trail.
000A18  3               vapou0:
000A18  3  20 35 08     	jsr chkxy		; plot first position.
000A1B  3  4C F3 09     	jmp vapou2
000A1E  3               
000A1E  3               ;----------------------------------------------------
000A1E  3               ; Create a user particle.
000A1E  3               ;----------------------------------------------------
000A1E  3               
000A1E  3               ptusr:
000A1E  3  85 60        	sta z80_f		; store timer.
000A20  3               
000A20  3  A0 08        	ldy #8
000A22  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000A24  3  18           	clc
000A25  3  69 07        	adc #7			; mid-point of sprite.
000A27  3  85 66        	sta z80_l
000A29  3               
000A29  3  A0 09        	ldy #9
000A2B  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000A2D  3  18           	clc
000A2E  3  69 07        	adc #7			; mid-point of sprite.
000A30  3  85 67        	sta z80_h
000A32  3               
000A32  3  20 C3 0A     	jsr fpslot 		; find particle slot.
000A35  3  B0 01        	bcs ptusr1
000A37  3  60           	rts 			; out of slots, can't generate anything.
000A38  3               ptusr1:
000A38  3  A5 66        	lda z80_l
000A3A  3  A0 03        	ldy #3
000A3C  3  91 68        	sta (z80_ix),y 		; set up y.
000A3E  3               
000A3E  3  A5 67        	lda z80_h
000A40  3  A0 05        	ldy #5
000A42  3  91 68        	sta (z80_ix),y		; set up x coordinate.
000A44  3               
000A44  3  A5 60        	lda z80_f 		; restore timer.
000A46  3  A0 01        	ldy #1
000A48  3  91 68        	sta (z80_ix),y		; set time on screen.
000A4A  3               
000A4A  3  A9 07        	lda #7
000A4C  3  A0 00        	ldy #0
000A4E  3  91 68        	sta (z80_ix),y		; define particle as user particle.
000A50  3               
000A50  3  4C 35 08     	jmp chkxy		; plot first position.
000A53  3               
000A53  3               ;----------------------------------------------------
000A53  3               ; Create a vertical or horizontal star.
000A53  3               ;----------------------------------------------------
000A53  3               
000A53  3               star:
000A53  3  A5 69        	lda z80_i		; store pointer to sprite.
000A55  3  48           	pha
000A56  3  A5 68        	lda z80_x
000A58  3  48           	pha
000A59  3               
000A59  3  20 C3 0A     	jsr fpslot 		; find particle slot.
000A5C  3  B0 07        	bcs star7		; found one we can use.
000A5E  3               star0:
000A5E  3  68           	pla 			; restore sprite pointer.
000A5F  3  85 68        	sta z80_x
000A61  3  68           	pla
000A62  3  85 69        	sta z80_i
000A64  3  60           	rts 			; out of slots, can't generate anything.
000A65  3               star7:
000A65  3  A5 62        	lda z80_c		; direction.
000A67  3  29 03        	and #3 			; is it left?
000A69  3  D0 03        	bne :+
000A6B  3  4C 9D 0A     	jmp star1 		; yes, it's left.
000A6E  3               :
000A6E  3  C9 01        	cmp #1 			; is it right?
000A70  3  D0 03        	bne :+
000A72  3  4C AD 0A     	jmp star2 		; yes, it's right.
000A75  3               :
000A75  3  C9 02        	cmp #2 			; is it up?
000A77  3  D0 03        	bne :+
000A79  3  4C BA 0A     	jmp star3 		; yes, it's up.
000A7C  3               :
000A7C  3  AC 15 03     	ldy wntopx 		; get edge of screen.
000A7F  3  C8           	iny			; down one pixel.
000A80  3  98           	tya
000A81  3               star8:
000A81  3  A0 03        	ldy #3
000A83  3  91 68        	sta (z80_ix),y 		; set y coord.
000A85  3  20 57 0B     	jsr qrand 		; get quick random number.
000A88  3               star9:
000A88  3  A0 05        	ldy #5
000A8A  3  91 68        	sta (z80_ix),y		; set x position.
000A8C  3               
000A8C  3  A5 62        	lda z80_c		; direction.
000A8E  3  29 03        	and #3			; zero to three.
000A90  3  18           	clc
000A91  3  69 03        	adc #3			; 3 to 6 for starfield.
000A93  3  A0 00        	ldy #0
000A95  3  91 68        	sta (z80_ix),y		; define particle as star.
000A97  3  20 35 08     	jsr chkxy		; plot first position.
000A9A  3  4C 5E 0A     	jmp star0
000A9D  3               star1:
000A9D  3  20 57 0B     	jsr qrand		; get quick random number.
000AA0  3  A0 03        	ldy #3
000AA2  3  91 68        	sta (z80_ix),y 		; set y coord.
000AA4  3               
000AA4  3  AD 18 03     	lda wnrgtx 		; get edge of screen.
000AA7  3  18           	clc
000AA8  3  69 0F        	adc #15			; add width of sprite minus 1.
000AAA  3  4C 88 0A     	jmp star9
000AAD  3               star2:
000AAD  3  20 57 0B     	jsr qrand 		; get quick random number.
000AB0  3  A0 03        	ldy #3
000AB2  3  91 68        	sta (z80_ix),y		; set y coord.
000AB4  3               
000AB4  3  AD 16 03     	lda wnlftx		; get edge of screen.
000AB7  3  4C 88 0A     	jmp star9
000ABA  3               star3:
000ABA  3  AD 17 03     	lda wnbotx 		; get edge of screen.
000ABD  3  18           	clc
000ABE  3  69 0F        	adc #15 		; height of sprite minus one pixel.
000AC0  3  4C 81 0A     	jmp star8
000AC3  3               
000AC3  3               ;----------------------------------------------------
000AC3  3               ; Find particle slot for lasers or vapour trail.
000AC3  3               ; can't use alternate accumulator.
000AC3  3               ;----------------------------------------------------
000AC3  3               
000AC3  3               fpslot:
000AC3  3  A9 DE        	lda #<SHRAPN 		; shrapnel table.
000AC5  3  85 68        	sta z80_x
000AC7  3  A9 25        	lda #>SHRAPN
000AC9  3  85 69        	sta z80_i
000ACB  3               
000ACB  3  A9 37        	lda #NUMSHR		; number of pieces in table.
000ACD  3  85 63        	sta z80_b
000ACF  3               fpslt0:
000ACF  3  A0 00        	ldy #0
000AD1  3  B1 68        	lda (z80_ix),y		; get type.
000AD3  3  0A           	asl a  			; is this slot in use?
000AD4  3  90 01        	bcc :+
000AD6  3  60           	rts			; no, we can use it.
000AD7  3               :
000AD7  3  18           	clc			; point to more shrapnel.
000AD8  3  A5 68        	lda z80_x
000ADA  3  69 06        	adc #SHRSIZ
000ADC  3  85 68        	sta z80_x
000ADE  3  90 02        	bcc :+
000AE0  3  E6 69        	inc z80_i
000AE2  3               :
000AE2  3  C6 63        	dec z80_b		; repeat for all shrapnel.
000AE4  3  D0 E9        	bne fpslt0
000AE6  3               
000AE6  3  18           	clc
000AE7  3  60           	rts 			; out of slots, can't generate anything.
000AE8  3               
000AE8  3               ;----------------------------------------------------
000AE8  3               ; Create an explosion at sprite position.
000AE8  3               ;----------------------------------------------------
000AE8  3               
000AE8  3               explod:
000AE8  3  60           	rts
000AE9  3  85 62        	sta z80_c 		; particles to create.
000AEB  3               
000AEB  3  A5 69        	lda z80_i 		; store pointer to sprite.
000AED  3  48           	pha
000AEE  3  A5 68        	lda z80_x
000AF0  3  48           	pha
000AF1  3               
000AF1  3  A0 08        	ldy #8
000AF3  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000AF5  3  85 66        	sta z80_l
000AF7  3  A0 09        	ldy #9
000AF9  3  B1 68        	lda (z80_ix),y		; x coordinate.
000AFB  3  85 67        	sta z80_h
000AFD  3               
000AFD  3  A9 DE        	lda #<SHRAPN		; shrapnel table.
000AFF  3  85 68        	sta z80_x
000B01  3  A9 25        	lda #>SHRAPN
000B03  3  85 69        	sta z80_i
000B05  3               
000B05  3  A9 37        	lda #NUMSHR		; number of pieces in table.
000B07  3  85 63        	sta z80_b
000B09  3               expld0:
000B09  3  A0 00        	ldy #0
000B0B  3  B1 68        	lda (z80_ix),y		; get type.
000B0D  3  06 61        	asl z80_a 		; is this slot in use?
000B0F  3  B0 16        	bcs expld1		; no, we can use it.
000B11  3               expld2:
000B11  3  18           	clc
000B12  3  A5 68        	lda z80_x
000B14  3  69 06        	adc #SHRSIZ
000B16  3  85 68        	sta z80_x
000B18  3  90 02        	bcc :+
000B1A  3  E6 69        	inc z80_i
000B1C  3               :
000B1C  3  C6 63        	dec z80_b		; repeat for all shrapnel.
000B1E  3  D0 E9        	bne expld0
000B20  3               expld3:
000B20  3  68           	pla			; restore sprite pointer.
000B21  3  85 68        	sta z80_x
000B23  3  68           	pla
000B24  3  85 69        	sta z80_i
000B26  3  60           	rts 			; out of slots, can't generate any more.
000B27  3               
000B27  3               expld1:
000B27  3  A5 62        	lda z80_c		; shrapnel counter.
000B29  3  29 0F        	and #15			; 0 to 15.
000B2B  3  18           	clc			; add to x.
000B2C  3  65 66        	adc z80_l
000B2E  3  A0 03        	ldy #3
000B30  3  91 68        	sta (z80_ix),y		; y coord.
000B32  3               
000B32  3  AD 61 0B     	lda seed3 		; crap random number.
000B35  3  29 0F        	and #15			; 0 to 15.
000B37  3  18           	clc 			; add to y.
000B38  3  65 67        	adc z80_h
000B3A  3  A0 05        	ldy #5
000B3C  3  91 68        	sta (z80_ix),y		; x coord.
000B3E  3               
000B3E  3  A9 02        	lda #2
000B40  3  A0 00        	ldy #0
000B42  3  91 68        	sta (z80_ix),y		; switch it on.
000B44  3               
000B44  3               ;	jsr exx 		; store coordinates.
000B44  3  20 35 08     	jsr chkxy		; plot first position.
000B47  3  20 57 0B     	jsr qrand		; quick random angle.
000B4A  3  29 3C        	and #60 		; keep within range.
000B4C  3  A0 01        	ldy #1
000B4E  3  91 68        	sta (z80_ix),y		; angle.
000B50  3               ;	jsr exx			; restore coordinates.
000B50  3               
000B50  3  C6 62        	dec z80_c		; one less piece of shrapnel to generate.
000B52  3  D0 BD        	bne expld2 		; back to main explosion loop.
000B54  3  4C 20 0B     	jmp expld3 		; restore sprite pointer and exit.
000B57  3               
000B57  3               ;----------------------------------------------------
000B57  3               ; Quick random
000B57  3               ;----------------------------------------------------
000B57  3               
000B57  3               qrand:
000B57  3  20 EB 15     	jsr random		; r register.
000B5A  3  4D 61 0B     	eor seed3		; combine with seed.
000B5D  3  8D 61 0B     	sta seed3 		; new seed.
000B60  3  60           	rts
000B61  3               
000B61  3  00           seed3:	.byte 0
000B62  3               
000B62  3               ;----------------------------------------------------
000B62  3               ; Display all shrapnel.
000B62  3               ;----------------------------------------------------
000B62  3               
000B62  3               dshrp:
000B62  3  A9 79        	lda #<plotde		; display routine.
000B64  3  8D 5E 07     	sta proshx+1
000B67  3  A9 09        	lda #>plotde
000B69  3  8D 5F 07     	sta proshx+2
000B6C  3  20 4C 07     	jsr proshr		; process shrapnel.
000B6F  3               
000B6F  3  A9 74        	lda #<prosh1		; processing routine.
000B71  3  8D 5E 07     	sta proshx+1
000B74  3  A9 07        	lda #>prosh1
000B76  3  8D 5F 07     	sta proshx+2
000B79  3  60           	rts
000B7A  3               
000B7A  3               ;------------------------------------------------------
000B7A  3               ; Particle engine.
000B7A  3               ;
000B7A  3               ; Init particle data for 55 particles in SHRAPN table.
000B7A  3               ; Every particle has 6 bytes.
000B7A  3               ;
000B7A  3               ; global:	-
000B7A  3               ; local:	x,y,hl
000B7A  3               ; calls:	-
000B7A  3               ;------------------------------------------------------
000B7A  3               
000B7A  3               inishr:
000B7A  3  A9 DE        	lda #<SHRAPN 		; table.
000B7C  3  85 66        	sta z80_l
000B7E  3  A9 25        	lda #>SHRAPN
000B80  3  85 67        	sta z80_h
000B82  3               
000B82  3  A0 00        	ldy #0
000B84  3  A2 37        	ldx #NUMSHR		; shrapnel pieces to process.
000B86  3               inish0:
000B86  3  A9 FF        	lda #255 		; kill the shrapnel.
000B88  3  91 66        	sta (z80_hl),y
000B8A  3               
000B8A  3  18           	clc 			; point there.
000B8B  3  A5 66        	lda z80_l
000B8D  3  69 06        	adc #SHRSIZ		; distance to next.
000B8F  3  85 66        	sta z80_l
000B91  3  90 02        	bcc :+
000B93  3  E6 67        	inc z80_h
000B95  3               :
000B95  3  CA           	dex
000B96  3  D0 EE        	bne inish0 		; round again.
000B98  3  60           	rts
000B99  3               
000B99  3               ;------------------------------------------------------
000B99  3               ; Check for collision between laser and sprite.
000B99  3               ;------------------------------------------------------
000B99  3               
000B99  3               lcol:
000B99  3  A9 DE        	lda #<SHRAPN		; shrapnel table.
000B9B  3  85 66        	sta z80_l
000B9D  3  A9 25        	lda #>SHRAPN
000B9F  3  85 67        	sta z80_h
000BA1  3               
000BA1  3  A9 37        	lda #NUMSHR		; number of pieces in table.
000BA3  3  85 63        	sta z80_b
000BA5  3               lcol0:
000BA5  3  A0 00        	ldy #0
000BA7  3  B1 66        	lda (z80_hl),y 		; get type.
000BA9  3  F0 10        	beq lcol1		; yes, check collision.
000BAB  3               lcol3:
000BAB  3  18           	clc			; point to more shrapnel.
000BAC  3  A5 66        	lda z80_l
000BAE  3  69 06        	adc #SHRSIZ
000BB0  3  85 66        	sta z80_l
000BB2  3  90 02        	bcc :+
000BB4  3  E6 67        	inc z80_h
000BB6  3               :
000BB6  3  C6 63        	dec z80_b		; repeat for all shrapnel.
000BB8  3  D0 EB        	bne lcol0
000BBA  3  60           	rts 			; no collision, carry not set.
000BBB  3               lcol1:
000BBB  3               ;	lda z80_h		; store pointer to laser.
000BBB  3               ;	pha
000BBB  3               ;	lda z80_l
000BBB  3               ;	pha
000BBB  3               
000BBB  3               ;	clc
000BBB  3               ;	lda z80_l		; direction.
000BBB  3               ;	adc #3
000BBB  3               ;	sta z80_l
000BBB  3               ;	bcc :+
000BBB  3               ;	inc z80_h
000BBB  3               ;:
000BBB  3               ;	ldy #0
000BBB  3  A0 03        	ldy #3
000BBD  3  B1 66        	lda (z80_hl),y		; get y.
000BBF  3  38           	sec
000BC0  3  A0 08        	ldy #8
000BC2  3  F1 68        	sbc (z80_ix),y		; subtract sprite y.
000BC4  3               lcolh:
000BC4  3  C9 10        	cmp #16 		; within range?
000BC6  3  B0 03        	bcs :+
000BC8  3  4C DB 0B     	jmp lcol2		; no, missed.
000BCB  3               :
000BCB  3               ;	inc z80_l		; not used.
000BCB  3               ;	bne :+
000BCB  3               ;	inc z80_h
000BCB  3               ;:
000BCB  3               ;	inc z80_l 		; x position.
000BCB  3               ;	bne :+
000BCB  3               ;	inc z80_h
000BCB  3               ;:
000BCB  3               ;	ldy #0
000BCB  3  A0 05        	ldy #5
000BCD  3  B1 66        	lda (z80_hl),y 		; get x.
000BCF  3  38           	sec
000BD0  3  A0 09        	ldy #9
000BD2  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
000BD4  3  C9 10        	cmp #16			; within range?
000BD6  3  90 03        	bcc :+
000BD8  3  4C DE 0B     	jmp lcol4 		; yes, collision occurred.
000BDB  3               :
000BDB  3               lcol2:
000BDB  3               ;	pla 			; restore laser pointer from stack.
000BDB  3               ;	sta z80_l
000BDB  3               ;	pla
000BDB  3               ;	sta z80_h
000BDB  3  4C AB 0B     	jmp lcol3
000BDE  3               lcol4:
000BDE  3               ;	pla 			; restore laser pointer.
000BDE  3               ;	sta z80_l
000BDE  3               ;	pla
000BDE  3               ;	sta z80_h
000BDE  3  60           	rts 			; return with carry set for collision.
000BDF  3               
000BDF  3               ;------------------------------------------------------
000BDF  3               ; Main game engine code starts here.
000BDF  3               ; After initialisation, mloop is the main loop
000BDF  3               ;------------------------------------------------------
000BDF  3               
000BDF  3               game:
000BDF  3               
000BDF  3               ; Set up screen address table.
000BDF  3               
000BDF  3               setsat:
000BDF  3  A9 00        	lda #<$8000		; start of screen.
000BE1  3  85 80        	sta scraddr
000BE3  3  A9 80        	lda #>$8000
000BE5  3  85 81        	sta scraddr+1
000BE7  3               
000BE7  3  A0 00        	ldy #0			; vertical lines on screen.
000BE9  3               setsa0:
000BE9  3  A5 80        	lda scraddr
000BEB  3  99 5E 24     	sta SCADTB_lb,y		; write low byte.
000BEE  3  A5 81        	lda scraddr+1
000BF0  3  99 1E 25     	sta SCADTB_hb,y		; write high byte.
000BF3  3  20 71 1A     	jsr nline		; next line down.
000BF6  3  C8           	iny			; next position in table.
000BF7  3  C0 C0        	cpy #192		; vertical lines on screen.
000BF9  3  D0 EE        	bne setsa0
000BFB  3               
000BFB  3               ; Init graphics mode
000BFB  3               
000BFB  3  A9 F0        	lda #ScrMode		; graphics mode
000BFD  3  8D 00 B0     	sta ScrSelAddr 		; screen selection address
000C00  3  20 62 06     	jsr cls
000C03  3               
000C03  3  20 7C 06     	jsr setpal 		; set up palette.
000C06  3               rpblc2:
000C06  3  20 7A 0B     	jsr inishr 		; initialise particle engine.
000C09  3               evintr:
000C09  3  20 13 2A     	jsr evnt12 		; call intro/menu event.
000C0C  3               
000C0C  3  A9 02        	lda #WALL 		; write default property.
000C0E  3  A2 00        	ldx #0
000C10  3               clrmap:
000C10  3  9D 5E 21     	sta MAP,x 		; block properties.
000C13  3  9D 5E 22     	sta MAP+256,x
000C16  3  9D 5E 23     	sta MAP+512,x
000C19  3  E8           	inx			; next byte.
000C1A  3  D0 F4        	bne clrmap
000C1C  3               
000C1C  3  20 DE 05     	jsr iniob 		; initialise objects.
000C1F  3               
000C1F  3  A9 00        	lda #0			; put zero in accumulator.
000C21  3  8D 3D 03     	sta gamwon		; reset game won flag.
000C24  3               
000C24  3  20 86 0D     	jsr inisc 		; init the score.
000C27  3               mapst:
000C27  3  AD 50 27     	lda stmap 		; start position on map.
000C2A  3  8D 5C 21     	sta roomtb		; set up position in table, if there is one.
000C2D  3               
000C2D  3               inipbl:
000C2D  3  20 CE 1B     	jsr initsc 		; set up first screen.
000C30  3               
000C30  3  A9 4B        	lda #<ssprit 		; default to spare sprite in table.
000C32  3  85 68        	sta z80_x
000C34  3  A9 21        	lda #>ssprit
000C36  3  85 69        	sta z80_i
000C38  3               evini:
000C38  3  20 14 2A     	jsr evnt13 		; initialisation.
000C3B  3               
000C3B  3               ; Two restarts.
000C3B  3               ; First restart - clear all sprites and initialise everything.
000C3B  3               
000C3B  3               rstrt:
000C3B  3  20 33 0D     	jsr rsevt 		; restart events.
000C3E  3  20 D1 05     	jsr xspr 		; clear sprite table.
000C41  3  20 31 1D     	jsr sprlst 		; fetch pointer to screen sprites.
000C44  3  20 BB 1D     	jsr ispr 		; initialise sprite table.
000C47  3               
000C47  3  4C 56 0C     	jmp rstrt0
000C4A  3               
000C4A  3               ; Second restart - clear all but player, and don't initialise him.
000C4A  3               
000C4A  3               rstrtn:
000C4A  3  20 33 0D     	jsr rsevt		; restart events.
000C4D  3  20 5F 1D     	jsr nspr 		; clear all non-player sprites.
000C50  3  20 31 1D     	jsr sprlst 		; fetch pointer to screen sprites.
000C53  3  20 F4 1D     	jsr kspr 		; initialise sprite table, no more players.
000C56  3               
000C56  3               ; Set up the player and/or enemy sprites.
000C56  3               
000C56  3               rstrt0:
000C56  3  A9 00        	lda #0 			; zero in accumulator.
000C58  3  8D 3A 03     	sta nexlev 		; reset next level flag.
000C5B  3  8D 3B 03     	sta restfl 		; reset restart flag.
000C5E  3  8D 3C 03     	sta deadf 		; reset dead flag.
000C61  3  20 0A 13     	jsr droom 		; show screen layout.
000C64  3               rpblc0:
000C64  3  20 7A 0B     	jsr inishr 		; initialise particle engine.
000C67  3  20 D6 0D     	jsr shwob		; draw objects.
000C6A  3               
000C6A  3  A9 7F        	lda #<sprtab 		; address of sprite table, even sprites.
000C6C  3  85 68        	sta z80_x
000C6E  3  A9 20        	lda #>sprtab
000C70  3  85 69        	sta z80_i
000C72  3  20 F1 18     	jsr dspr 		; display sprites.
000C75  3               
000C75  3  A9 90        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000C77  3  85 68        	sta z80_x
000C79  3  A9 20        	lda #>(sprtab+TABSIZ)
000C7B  3  85 69        	sta z80_i
000C7D  3  20 F1 18     	jsr dspr 		; display sprites.
000C80  3               mloop:
000C80  3  20 10 06     	jsr vsync 		; synchronise with display.
000C83  3               
000C83  3  A9 7F        	lda #<sprtab 		; address of sprite table, even sprites.
000C85  3  85 68        	sta z80_x
000C87  3  A9 20        	lda #>sprtab
000C89  3  85 69        	sta z80_i
000C8B  3  20 F1 18     	jsr dspr 		; display even sprites.
000C8E  3               
000C8E  3               ;	jsr plsnd 		; play sounds.
000C8E  3  20 10 06     	jsr vsync 		; synchronise with display.
000C91  3               
000C91  3  A9 90        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000C93  3  85 68        	sta z80_x
000C95  3  A9 20        	lda #>(sprtab+TABSIZ)
000C97  3  85 69        	sta z80_i
000C99  3  20 F1 18     	jsr dspr 		; display odd sprites.
000C9C  3               
000C9C  3  A9 4B        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
000C9E  3  85 68        	sta z80_x
000CA0  3  A9 21        	lda #>(ssprit)
000CA2  3  85 69        	sta z80_i
000CA4  3               evlp1:
000CA4  3  20 11 2A     	jsr evnt10 		; called once per main loop.
000CA7  3  20 66 18     	jsr pspr 		; process sprites.
000CAA  3               
000CAA  3               ; Main loop events.
000CAA  3               
000CAA  3  A9 4B        	lda #<ssprit 		; point to spare sprite for spawning purposes.
000CAC  3  85 68        	sta z80_x
000CAE  3  A9 21        	lda #>ssprit
000CB0  3  85 69        	sta z80_i
000CB2  3               evlp2:
000CB2  3  20 12 2A     	jsr evnt11 		; called once per main loop.
000CB5  3               bsortx:
000CB5  3  20 DF 17     	jsr bsort 		; sort sprites.
000CB8  3               
000CB8  3  AD 3A 03     	lda nexlev		; finished level flag.
000CBB  3  D0 21        	bne newlev		; is set, go to next level.
000CBD  3  AD 3D 03     	lda gamwon		; finished game flag.
000CC0  3  D0 2D        	bne evwon		; is set, finish the game.
000CC2  3  AD 3B 03     	lda restfl 		; finished level flag.
000CC5  3  C9 01        	cmp #1			; has it been set?
000CC7  3  D0 03        	bne :+
000CC9  3  4C 3B 0C     	jmp rstrt		; yes, go to next level.
000CCC  3               :
000CCC  3  C9 02        	cmp #2			; has it been set?
000CCE  3  D0 03        	bne :+
000CD0  3  4C 4A 0C     	jmp rstrtn		; yes, go to next level.
000CD3  3               :
000CD3  3  AD 3C 03     	lda deadf 		; dead flag.
000CD6  3  D0 1D        	bne pdead		; yes, player dead.
000CD8  3               
000CD8  3               ; back to start of main loop.
000CD8  3               
000CD8  3  EE 35 03     	inc clock
000CDB  3  4C 80 0C     	jmp mloop		; switched to a jmp mloop during test mode.
000CDE  3               
000CDE  3               ;----------------------------------------------------------
000CDE  3               ; New level
000CDE  3               ;----------------------------------------------------------
000CDE  3               
000CDE  3               newlev:
000CDE  3  AD 19 03     	lda scno 			; current screen.
000CE1  3  18           	clc
000CE2  3  69 01        	adc #1				; next screen.
000CE4  3  CD AC 34     	cmp numsc			; total number of screens.
000CE7  3  B0 06        	bcs evwon			; yes, game finished.
000CE9  3  8D 19 03     	sta scno			; set new level number.
000CEC  3  4C 3B 0C     	jmp rstrt			; restart, clearing all aliens.
000CEF  3               
000CEF  3               evwon:
000CEF  3  20 96 2A     	jsr evnt18		 	; game completed.
000CF2  3  4C 08 0D     	jmp tidyup			; tidy up and return to BASIC/calling routine.
000CF5  3               
000CF5  3               ;----------------------------------------------------------
000CF5  3               ; Player dead.
000CF5  3               ;----------------------------------------------------------
000CF5  3               
000CF5  3               pdead:
000CF5  3  A9 00        	lda #0				; zeroise accumulator.
000CF7  3  8D 3C 03     	sta deadf			; reset dead flag.
000CFA  3               evdie:
000CFA  3  20 86 2A     	jsr evnt16 			; death subroutine.
000CFD  3  AD 1A 03     	lda numlif			; number of lives.
000D00  3  F0 03        	beq :+
000D02  3  4C 3B 0C     	jmp rstrt 			; restart game.
000D05  3               :
000D05  3               evfail:
000D05  3  20 90 2A     	jsr evnt17 			; failure event.
000D08  3               
000D08  3               ;----------------------------------------------------------
000D08  3               ; Tidy things up
000D08  3               ;----------------------------------------------------------
000D08  3               
000D08  3               tidyup:
000D08  3  A0 00        	ldy #0				; digits to check.
000D0A  3               tidyu2:
000D0A  3  B9 0B 10     	lda score,y 			; get score digit.
000D0D  3  CD 11 10     	cmp hiscor 			; are we larger than high score digit?
000D10  3  90 07        	bcc tidyu0			; high score is bigger.
000D12  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
000D14  3  C8           	iny				; next digit of high score.
000D15  3  C0 06        	cpy #6
000D17  3  D0 F1        	bne tidyu2			; repeat for all digits
000D19  3               tidyu0:
000D19  3  A9 0B        	lda #<score			; return pointing to score.
000D1B  3  85 62        	sta z80_c
000D1D  3  A9 10        	lda #>score
000D1F  3  85 63        	sta z80_b
000D21  3  60           	rts
000D22  3               tidyu1:
000D22  3  A0 05        	ldy #5
000D24  3               tidyu3:
000D24  3  B9 0B 10     	lda score,y			; score.
000D27  3  99 11 10     	sta hiscor,y			; high score.
000D2A  3  88           	dey
000D2B  3  10 F7        	bpl tidyu3 			; copy score to high score.
000D2D  3               evnewh:
000D2D  3  20 9C 2A     	jsr evnt19			; new high score event.
000D30  3  4C 19 0D     	jmp tidyu0			; tidy up.
000D33  3               
000D33  3               ;--------------------------------------------------
000D33  3               ; Restart event.
000D33  3               ;--------------------------------------------------
000D33  3               
000D33  3               rsevt:
000D33  3  A9 4B        	lda #<ssprit 			; default to spare element in table.
000D35  3  85 68        	sta z80_x
000D37  3  A9 21        	lda #>ssprit
000D39  3  85 69        	sta z80_i
000D3B  3               evrs:
000D3B  3  4C 5F 2A     	jmp evnt14	 		; call restart event.
000D3E  3               
000D3E  3               ;------------------------------------------------------------------
000D3E  3               ; Copy number passed in a to string position bc, right-justified.
000D3E  3               ;
000D3E  3               ; Input:
000D3E  3               ;  A  = number
000D3E  3               ;  BC = string address
000D3E  3               ;
000D3E  3               ; Output:
000D3E  3               ;  BC = string with number
000D3E  3               ;-----------------------------------------------------------------
000D3E  3               
000D3E  3               num2ch:
000D3E  3  85 65        	sta z80_d		; Save number
000D40  3               
000D40  3  A9 00        	lda #0
000D42  3  8D 85 0D     	sta flag
000D45  3               
000D45  3  A2 64        	ldx #100		; hundreds column.
000D47  3  86 64        	stx z80_e
000D49  3  20 5A 0D     	jsr numdg		; show digit.
000D4C  3               
000D4C  3  A2 0A        	ldx #10			; tens column.
000D4E  3  86 64        	stx z80_e
000D50  3  20 5A 0D     	jsr numdg		; show digit.
000D53  3               
000D53  3  EE 85 0D     	inc flag
000D56  3  A2 01        	ldx #1			; units column.
000D58  3  86 64        	stx z80_e
000D5A  3               numdg:
000D5A  3  A9 30        	lda #48			; clear digit.
000D5C  3  85 61        	sta z80_a
000D5E  3               numdg1:
000D5E  3  A5 65        	lda z80_d
000D60  3  C5 64        	cmp z80_e
000D62  3  90 0F        	bcc numdg0		; nothing to show.
000D64  3  38           	sec
000D65  3  A5 65        	lda z80_d
000D67  3  E5 64        	sbc z80_e		; subtract from column.
000D69  3  85 65        	sta z80_d
000D6B  3  E6 61        	inc z80_a		; increment digit.
000D6D  3  EE 85 0D     	inc flag
000D70  3  4C 5E 0D     	jmp numdg1		; repeat until column is zero.
000D73  3               numdg0:
000D73  3  A0 00        	ldy #0
000D75  3  A5 61        	lda z80_a
000D77  3  91 62        	sta (z80_bc),y		; write digit to buffer.
000D79  3  AD 85 0D     	lda flag
000D7C  3  F0 06        	beq :+
000D7E  3  E6 62        	inc z80_c		; next buffer position.
000D80  3  D0 02        	bne :+
000D82  3  E6 63        	inc z80_b
000D84  3               :
000D84  3  60           	rts
000D85  3               
000D85  3  00           flag:	.byte 0
000D86  3               
000D86  3               ;---------------------------------------------------------
000D86  3               ; Reset score to "000000"
000D86  3               ;---------------------------------------------------------
000D86  3               
000D86  3               inisc:
000D86  3  A9 30        	lda #'0'
000D88  3  A2 05        	ldx #5			; digits to initialise.
000D8A  3               inisc0:
000D8A  3  9D 0B 10     	sta score,x 		; write zero digit.
000D8D  3  CA           	dex			; next column.
000D8E  3  10 FA        	bpl inisc0		; repeat for all digits.
000D90  3               
000D90  3  60           	rts
000D91  3               
000D91  3               ;-----------------------------------------------------
000D91  3               ; Multiply h by d and return in hl.
000D91  3               ;
000D91  3               ; Input:
000D91  3               ;  H = first number
000D91  3               ;  D = second number
000D91  3               ;
000D91  3               ; Output:
000D91  3               ;  HL = result H x D
000D91  3               ;-----------------------------------------------------
000D91  3               
000D91  3               imul:
000D91  3  A5 65        	lda z80_d		; HL = H * D
000D93  3  85 64        	sta z80_e
000D95  3  A5 67        	lda z80_h
000D97  3  85 62        	sta z80_c		; make c first multiplier.
000D99  3               imul0:
000D99  3  A9 00        	lda #0			; zeroise total.
000D9B  3  85 66        	sta z80_l
000D9D  3  85 67        	sta z80_h
000D9F  3               
000D9F  3  A5 67        	lda z80_h
000DA1  3  85 65        	sta z80_d		; zeroise high byte.
000DA3  3               
000DA3  3  A2 08        	ldx #8			; repeat 8 times.
000DA5  3               imul1:
000DA5  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
000DA7  3  90 0E        	bcc imul2		; wasn't set.
000DA9  3  18           	clc			; bit was set, so add de.
000DAA  3  A5 66        	lda z80_l
000DAC  3  65 64        	adc z80_e
000DAE  3  85 66        	sta z80_l
000DB0  3  A5 67        	lda z80_h
000DB2  3  65 65        	adc z80_d
000DB4  3  85 67        	sta z80_h
000DB6  3  18           	clc 			; reset carry.
000DB7  3               imul2:
000DB7  3  06 64        	asl z80_e 		; shift de 1 bit left.
000DB9  3  26 65        	rol z80_d
000DBB  3  CA           	dex
000DBC  3  D0 E7        	bne imul1		; repeat 8 times.
000DBE  3               
000DBE  3  60           	rts
000DBF  3               
000DBF  3               ;-----------------------------------------------
000DBF  3               ; Divide d by e and return in d, remainder in a.
000DBF  3               ;
000DBF  3               ; Input:
000DBF  3               ;  D = first number
000DBF  3               ;  E = second number
000DBF  3               ;
000DBF  3               ; Output:
000DBF  3               ;  D = result D/E
000DBF  3               ;  A = remainder
000DBF  3               ;-----------------------------------------------
000DBF  3               
000DBF  3               idiv:
000DBF  3  A9 08        	lda #8		 	; bits to shift.
000DC1  3  85 63        	sta z80_b
000DC3  3  A9 00        	lda #0
000DC5  3  06 65        	asl z80_d
000DC7  3               idiv0:
000DC7  3  2A           	rol a 			; multiply d by 2.
000DC8  3  C5 64        	cmp z80_e 		; test if e is smaller.
000DCA  3  90 02        	bcc idiv1		; e is greater, no division this time.
000DCC  3  E5 64        	sbc z80_e		; subtract it.
000DCE  3               idiv1:
000DCE  3  26 65        	rol z80_d		; rotate into d.
000DD0  3  C6 63        	dec z80_b
000DD2  3  D0 F3        	bne idiv0		; repeat
000DD4  3  60           	rts
000DD5  3               
000DD5  3               ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
000DD5  3               ; Initialise a sound.
000DD5  3               ;
000DD5  3               ;isnd:
000DD5  3               ;	; 29.04.02 ld de, (ch1ptr) 	; first pointer.
000DD5  3               ;	lda ch1ptr
000DD5  3               ;	sta z80_e
000DD5  3               ;	lda ch1ptr+1
000DD5  3               ;	sta z80_d
000DD5  3               ;
000DD5  3               ;	; 29.03.01 ld a, (de) 	; get first byte.
000DD5  3               ;	ldy #0
000DD5  3               ;	lda (z80_de),y
000DD5  3               ;	sta z80_a
000DD5  3               ;
000DD5  3               ;	; 22.03.xx inc a 	; reached the end?
000DD5  3               ;	inc z80_a
000DD5  3               ;
000DD5  3               ;	; 28.06.00 jr z, isnd1 	; that"ll do.
000DD5  3               ;	bne :+
000DD5  3               ;	jmp isnd1
000DD5  3               ;:
000DD5  3               ;	; 29.04.02 ld de, (ch2ptr) 	; second pointer.
000DD5  3               ;	lda ch2ptr
000DD5  3               ;	sta z80_e
000DD5  3               ;	lda ch2ptr+1
000DD5  3               ;	sta z80_d
000DD5  3               ;
000DD5  3               ;	; 29.03.01 ld a, (de) 	; get first byte.
000DD5  3               ;	ldy #0
000DD5  3               ;	lda (z80_de),y
000DD5  3               ;	sta z80_a
000DD5  3               ;
000DD5  3               ;	; 22.03.xx inc a 	; reached the end?
000DD5  3               ;	inc z80_a
000DD5  3               ;
000DD5  3               ;	; 28.06.00 jr z, isnd2 	; that"ll do.
000DD5  3               ;	bne :+
000DD5  3               ;	jmp isnd2
000DD5  3               ;:
000DD5  3               ;	; 29.04.02 ld de, (ch3ptr) 	; final pointer.
000DD5  3               ;	lda ch3ptr
000DD5  3               ;	sta z80_e
000DD5  3               ;	lda ch3ptr+1
000DD5  3               ;	sta z80_d
000DD5  3               ;
000DD5  3               ;	; 29.03.01 ld a, (de) 	; get first byte.
000DD5  3               ;	ldy #0
000DD5  3               ;	lda (z80_de),y
000DD5  3               ;	sta z80_a
000DD5  3               ;
000DD5  3               ;	; 22.03.xx inc a 	; reached the end?
000DD5  3               ;	inc z80_a
000DD5  3               ;
000DD5  3               ;	; 28.06.00 jr z, isnd3 	; that"ll do.
000DD5  3               ;	bne :+
000DD5  3               ;	jmp isnd3
000DD5  3               ;:
000DD5  3               ;	; 43.xx.xx rts  	
000DD5  3               ;	rts
000DD5  3               ;
000DD5  3               ;isnd1:
000DD5  3               ;	; 29.02.04 ld (ch1ptr), hl 	; set up the sound.
000DD5  3               ;	lda z80_l
000DD5  3               ;	sta ch1ptr
000DD5  3               ;	lda z80_h
000DD5  3               ;	sta ch1ptr+1
000DD5  3               ;
000DD5  3               ;	; 43.xx.xx rts  	
000DD5  3               ;	rts
000DD5  3               ;
000DD5  3               ;isnd2:
000DD5  3               ;	; 29.02.04 ld (ch2ptr), hl 	; set up the sound.
000DD5  3               ;	lda z80_l
000DD5  3               ;	sta ch2ptr
000DD5  3               ;	lda z80_h
000DD5  3               ;	sta ch2ptr+1
000DD5  3               ;
000DD5  3               ;	; 43.xx.xx rts  	
000DD5  3               ;	rts
000DD5  3               ;
000DD5  3               ;isnd3:
000DD5  3               ;	; 29.02.04 ld (ch3ptr), hl 	; set up the sound.
000DD5  3               ;	lda z80_l
000DD5  3               ;	sta ch3ptr
000DD5  3               ;	lda z80_h
000DD5  3               ;	sta ch3ptr+1
000DD5  3               ;
000DD5  3               ;	; 43.xx.xx rts  	
000DD5  3               ;	rts
000DD5  3               ;
000DD5  3               ;	; 98.00.01 ch1ptr .word spmask
000DD5  3               ;ch1ptr:	.word spmask
000DD5  3               ;
000DD5  3               ;	; 98.00.01 ch2ptr .word spmask
000DD5  3               ;ch2ptr:	.word spmask
000DD5  3               ;
000DD5  3               ;	; 98.00.01 ch3ptr .word spmask
000DD5  3               ;ch3ptr:	.word spmask
000DD5  3               ;
000DD5  3               
000DD5  3               plsnd:
000DD5  3  60           	rts
000DD6  3               
000DD6  3               ;	; 04.00.xx call plsnd1 	; first channel.
000DD6  3               ;	jsr plsnd1
000DD6  3               ;
000DD6  3               ;	; 04.00.xx call plsnd2 	; second one.
000DD6  3               ;	jsr plsnd2
000DD6  3               ;
000DD6  3               ;	; 04.00.xx call plsnd3 	; final channel.
000DD6  3               ;	jsr plsnd3
000DD6  3               ;
000DD6  3               
000DD6  3               ; Write the contents of our AY buffer to the AY registers.
000DD6  3               ;
000DD6  3               ;w8912:
000DD6  3               ;	; 29.04.00 ld hl, snddat 	; start of AY-3-8912 register data.
000DD6  3               ;	lda #<(snddat)
000DD6  3               ;	sta z80_l
000DD6  3               ;	lda #>(snddat)
000DD6  3               ;	sta z80_h
000DD6  3               ;
000DD6  3               ;	; 29.04.00 ld de, 14*256 	; start with register 0, 14 to write.
000DD6  3               ;	lda #<(14*256)
000DD6  3               ;	sta z80_e
000DD6  3               ;	lda #>(14*256)
000DD6  3               ;	sta z80_d
000DD6  3               ;
000DD6  3               ;	; 29.03.05 ld c, 253 	; low byte of port to write.
000DD6  3               ;	lda #253; low byte of port to write.
000DD6  3               ;	sta z80_c
000DD6  3               ;
000DD6  3               ;w8912a:
000DD6  3               ;	; 29.03.05 ld b, 255 	; port 65533=select soundchip register.
000DD6  3               ;	lda #255; port 65533=select soundchip register.
000DD6  3               ;	sta z80_b
000DD6  3               ;
000DD6  3               ;	; 39.02.03 out (c), e 	; tell chip which register we"re writing.
000DD6  3               ;	lda z80_e
000DD6  3               ;	sta z80_c
000DD6  3               ;
000DD6  3               ;	; 29.03.01 ld a, (hl) 	; value to write.
000DD6  3               ;	ldy #0
000DD6  3               ;	lda (z80_hl),y
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 29.03.05 ld b, 191 	; port 49149=write value to register.
000DD6  3               ;	lda #191; port 49149=write value to register.
000DD6  3               ;	sta z80_b
000DD6  3               ;
000DD6  3               ;	; 39.02.03 out (c), a 	; this is what we"re putting there.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta z80_c
000DD6  3               ;
000DD6  3               ;	; 22.03.xx inc e 	; next sound chip register.
000DD6  3               ;	inc z80_e
000DD6  3               ;
000DD6  3               ;	; 22.04.xx inc hl 	; next byte to write.
000DD6  3               ;	inc z80_l
000DD6  3               ;	bne :+
000DD6  3               ;	inc z80_h
000DD6  3               ;:
000DD6  3               ;	; 13.03.xx dec d 	; decrement loop counter.
000DD6  3               ;	dec z80_d
000DD6  3               ;
000DD6  3               ;	; 27.06.00 jp nz, w8912a 	; repeat until done.
000DD6  3               ;	beq :+
000DD6  3               ;	jmp w8912a
000DD6  3               ;:
000DD6  3               ;	; 43.xx.xx rts  	
000DD6  3               ;	rts
000DD6  3               ;
000DD6  3               ;	; 98.00.01 snddat .word 0              ; tone registers, channel A.
000DD6  3               ;snddat:	.word 0              ; tone registers, channel A.
000DD6  3               ;
000DD6  3               ;	; 98.00.01 .word 0              ; channel B tone registers.
000DD6  3               ;	.word 0              ; channel B tone registers.
000DD6  3               ;
000DD6  3               ;	; 98.00.01 .word 0              ; as above, channel C.
000DD6  3               ;	.word 0              ; as above, channel C.
000DD6  3               ;
000DD6  3               ;	; 98.00.00 sndwnp .byte 0              ; white noise period.
000DD6  3               ;sndwnp:	.byte 0              ; white noise period.
000DD6  3               ;
000DD6  3               ;	; 98.00.00 sndmix .byte 60             ; tone/noise mixer control.
000DD6  3               ;sndmix:	.byte 60             ; tone/noise mixer control.
000DD6  3               ;
000DD6  3               ;	; 98.00.00 sndv1  .byte 0              ; channel A amplitude/envelope generator.
000DD6  3               ;sndv1:	.byte 0              ; channel A amplitude/envelope generator.
000DD6  3               ;
000DD6  3               ;	; 98.00.00 sndv2  .byte 0              ; channel B amplitude/envelope.
000DD6  3               ;sndv2:	.byte 0              ; channel B amplitude/envelope.
000DD6  3               ;
000DD6  3               ;	; 98.00.00 sndv3  .byte 0              ; channel C amplitude/envelope.
000DD6  3               ;sndv3:	.byte 0              ; channel C amplitude/envelope.
000DD6  3               ;
000DD6  3               ;	; 98.00.01 .word 0              ; duration of each note.
000DD6  3               ;	.word 0              ; duration of each note.
000DD6  3               ;
000DD6  3               ;	; 98.00.00 .byte 0
000DD6  3               ;	.byte 0
000DD6  3               ;
000DD6  3               ;plwn:
000DD6  3               ;	; 22.04.xx inc hl 	; next byte of sound.
000DD6  3               ;	inc z80_l
000DD6  3               ;	bne :+
000DD6  3               ;	inc z80_h
000DD6  3               ;:
000DD6  3               ;	; 02.05.xx and 56 	; check if we"re bothering with white noise.
000DD6  3               ;	lda z80_a
000DD6  3               ;	and #56
000DD6  3               ;
000DD6  3               ;	; 43.06.xx rts nz 	; we"re not.
000DD6  3               ;	beq :+
000DD6  3               ;	rts
000DD6  3               ;:
000DD6  3               ;	; 29.03.01 ld a, (hl) 	; fetch byte.
000DD6  3               ;	ldy #0
000DD6  3               ;	lda (z80_hl),y
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 29.02.03 ld (sndwnp), a 	; set white noise period.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta sndwnp
000DD6  3               ;
000DD6  3               ;	; 43.xx.xx rts  	
000DD6  3               ;	rts
000DD6  3               ;
000DD6  3               ;plsnd2:
000DD6  3               ;	; 04.00.xx call cksnd2 	; check sound for first channel.
000DD6  3               ;	jsr cksnd2
000DD6  3               ;
000DD6  3               ;	; 06.05.xx cp 255 	; reached end?
000DD6  3               ;	lda z80_a
000DD6  3               ;	cmp #255
000DD6  3               ;
000DD6  3               ;	; 28.06.00 jr z, silen2 	; silence this channel.
000DD6  3               ;	bne :+
000DD6  3               ;	jmp silen2
000DD6  3               ;:
000DD6  3               ;	; 02.05.xx and 15 	; sound bits.
000DD6  3               ;	lda z80_a
000DD6  3               ;	and #15
000DD6  3               ;
000DD6  3               ;	; 29.02.03 ld (sndv2), a 	; set volume for channel.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta sndv2
000DD6  3               ;
000DD6  3               ;	; 29.03.02 ld a, (sndmix) 	; mixer byte.
000DD6  3               ;	lda sndmix
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 02.05.xx and 237 	; remove bits for this channel.
000DD6  3               ;	lda z80_a
000DD6  3               ;	and #237
000DD6  3               ;
000DD6  3               ;	; 29.03.03 ld b, a 	; store in b register.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta z80_b
000DD6  3               ;
000DD6  3               ;	; 04.00.xx call plmix 	; fetch mixer details.
000DD6  3               ;	jsr plmix
000DD6  3               ;
000DD6  3               ;	; 02.05.xx and 18 	; mixer bits we want.
000DD6  3               ;	lda z80_a
000DD6  3               ;	and #18
000DD6  3               ;
000DD6  3               ;	; 36.03.xx or b 	; combine with mixer bits.
000DD6  3               ;	lda z80_a
000DD6  3               ;	ora z80_a
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 29.02.03 ld (sndmix), a 	; new mixer value.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta sndmix
000DD6  3               ;
000DD6  3               ;	; 04.00.xx call plwn 	; white noise check.
000DD6  3               ;	jsr plwn
000DD6  3               ;
000DD6  3               ;	; 22.04.xx inc hl 	; tone low.
000DD6  3               ;	inc z80_l
000DD6  3               ;	bne :+
000DD6  3               ;	inc z80_h
000DD6  3               ;:
000DD6  3               ;	; 29.03.01 ld e, (hl) 	; fetch value.
000DD6  3               ;	ldy #0
000DD6  3               ;	lda (z80_hl),y
000DD6  3               ;	sta z80_e
000DD6  3               ;
000DD6  3               ;	; 22.04.xx inc hl 	; tone high.
000DD6  3               ;	inc z80_l
000DD6  3               ;	bne :+
000DD6  3               ;	inc z80_h
000DD6  3               ;:
000DD6  3               ;	; 29.03.01 ld d, (hl) 	; fetch value.
000DD6  3               ;	ldy #0
000DD6  3               ;	lda (z80_hl),y
000DD6  3               ;	sta z80_d
000DD6  3               ;
000DD6  3               ;	; 29.02.04 ld (snddat+2), de 	; set tone.
000DD6  3               ;	lda z80_e
000DD6  3               ;	sta snddat+2
000DD6  3               ;	lda z80_d
000DD6  3               ;	sta snddat+2+1
000DD6  3               ;
000DD6  3               ;	; 22.04.xx inc hl 	; next bit of sound.
000DD6  3               ;	inc z80_l
000DD6  3               ;	bne :+
000DD6  3               ;	inc z80_h
000DD6  3               ;:
000DD6  3               ;	; 29.02.04 ld (ch2ptr), hl 	; set pointer.
000DD6  3               ;	lda z80_l
000DD6  3               ;	sta ch2ptr
000DD6  3               ;	lda z80_h
000DD6  3               ;	sta ch2ptr+1
000DD6  3               ;
000DD6  3               ;	; 43.xx.xx rts  	
000DD6  3               ;	rts
000DD6  3               ;
000DD6  3               ;plsnd3:
000DD6  3               ;	; 04.00.xx call cksnd3 	; check sound for first channel.
000DD6  3               ;	jsr cksnd3
000DD6  3               ;
000DD6  3               ;	; 06.05.xx cp 255 	; reached end?
000DD6  3               ;	lda z80_a
000DD6  3               ;	cmp #255
000DD6  3               ;
000DD6  3               ;	; 28.06.00 jr z, silen3 	; silence last channel.
000DD6  3               ;	bne :+
000DD6  3               ;	jmp silen3
000DD6  3               ;:
000DD6  3               ;	; 02.05.xx and 15 	; sound bits.
000DD6  3               ;	lda z80_a
000DD6  3               ;	and #15
000DD6  3               ;
000DD6  3               ;	; 29.02.03 ld (sndv3), a 	; set volume for channel.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta sndv3
000DD6  3               ;
000DD6  3               ;	; 29.03.02 ld a, (sndmix) 	; mixer byte.
000DD6  3               ;	lda sndmix
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 02.05.xx and 219 	; remove bits for this channel.
000DD6  3               ;	lda z80_a
000DD6  3               ;	and #219
000DD6  3               ;
000DD6  3               ;	; 29.03.03 ld b, a 	; store in b register.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta z80_b
000DD6  3               ;
000DD6  3               ;	; 04.00.xx call plmix 	; fetch mixer details.
000DD6  3               ;	jsr plmix
000DD6  3               ;
000DD6  3               ;	; 02.05.xx and 36 	; mixer bits we want.
000DD6  3               ;	lda z80_a
000DD6  3               ;	and #36
000DD6  3               ;
000DD6  3               ;	; 36.03.xx or b 	; combine with mixer bits.
000DD6  3               ;	lda z80_a
000DD6  3               ;	ora z80_a
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 29.02.03 ld (sndmix), a 	; new mixer value.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta sndmix
000DD6  3               ;
000DD6  3               ;	; 04.00.xx call plwn 	; white noise check.
000DD6  3               ;	jsr plwn
000DD6  3               ;
000DD6  3               ;	; 22.04.xx inc hl 	; tone low.
000DD6  3               ;	inc z80_l
000DD6  3               ;	bne :+
000DD6  3               ;	inc z80_h
000DD6  3               ;:
000DD6  3               ;	; 29.03.01 ld e, (hl) 	; fetch value.
000DD6  3               ;	ldy #0
000DD6  3               ;	lda (z80_hl),y
000DD6  3               ;	sta z80_e
000DD6  3               ;
000DD6  3               ;	; 22.04.xx inc hl 	; tone high.
000DD6  3               ;	inc z80_l
000DD6  3               ;	bne :+
000DD6  3               ;	inc z80_h
000DD6  3               ;:
000DD6  3               ;	; 29.03.01 ld d, (hl) 	; fetch value.
000DD6  3               ;	ldy #0
000DD6  3               ;	lda (z80_hl),y
000DD6  3               ;	sta z80_d
000DD6  3               ;
000DD6  3               ;	; 29.02.04 ld (snddat+4), de 	; set tone.
000DD6  3               ;	lda z80_e
000DD6  3               ;	sta snddat+4
000DD6  3               ;	lda z80_d
000DD6  3               ;	sta snddat+4+1
000DD6  3               ;
000DD6  3               ;	; 22.04.xx inc hl 	; next bit of sound.
000DD6  3               ;	inc z80_l
000DD6  3               ;	bne :+
000DD6  3               ;	inc z80_h
000DD6  3               ;:
000DD6  3               ;	; 29.02.04 ld (ch3ptr), hl 	; set pointer.
000DD6  3               ;	lda z80_l
000DD6  3               ;	sta ch3ptr
000DD6  3               ;	lda z80_h
000DD6  3               ;	sta ch3ptr+1
000DD6  3               ;
000DD6  3               ;	; 43.xx.xx rts  	
000DD6  3               ;	rts
000DD6  3               ;
000DD6  3               ;plmix:
000DD6  3               ;	; 29.03.01 ld a, (hl) 	; fetch mixer byte.
000DD6  3               ;	ldy #0
000DD6  3               ;	lda (z80_hl),y
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 02.05.xx and 192 	; mix bits are d6 and d7.
000DD6  3               ;	lda z80_a
000DD6  3               ;	and #192
000DD6  3               ;
000DD6  3               ;	; 49.xx.xx rlca  	; rotate into d0 and d1.
000DD6  3               ;	rol z80_a
000DD6  3               ;
000DD6  3               ;	; 49.xx.xx rlca  	
000DD6  3               ;	rol z80_a
000DD6  3               ;
000DD6  3               ;	; 29.03.03 ld e, a 	; displacement in de.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta z80_e
000DD6  3               ;
000DD6  3               ;	; 29.03.05 ld d, 0 	
000DD6  3               ;	lda #0
000DD6  3               ;	sta z80_d
000DD6  3               ;
000DD6  3               ;	; 41.04.xx push hl 	; store pointer on stack.
000DD6  3               ;	lda z80_h
000DD6  3               ;	pha
000DD6  3               ;	lda z80_l
000DD6  3               ;	pha
000DD6  3               ;
000DD6  3               ;	; 29.04.00 ld hl, mixtab 	; mixer table.
000DD6  3               ;	lda #<(mixtab)
000DD6  3               ;	sta z80_l
000DD6  3               ;	lda #>(mixtab)
000DD6  3               ;	sta z80_h
000DD6  3               ;
000DD6  3               ;	; 01.04.04 add hl, de 	; point to mixer byte.
000DD6  3               ;	jsr add_hl_de
000DD6  3               ;
000DD6  3               ;	; 29.03.01 ld a, (hl) 	; fetch mixer value.
000DD6  3               ;	ldy #0
000DD6  3               ;	lda (z80_hl),y
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 40.04.xx pop hl 	; restore pointer.
000DD6  3               ;	pla
000DD6  3               ;	sta z80_l
000DD6  3               ;	pla
000DD6  3               ;	sta z80_h
000DD6  3               ;
000DD6  3               ;	; 43.xx.xx rts  	
000DD6  3               ;	rts
000DD6  3               ;
000DD6  3               ;	; 98.00.00 mixtab .byte 63,56,7,0      ; mixer byte settings.
000DD6  3               ;mixtab:	.byte 63,56,7,0      ; mixer byte settings.
000DD6  3               ;
000DD6  3               ;silen1:
000DD6  3               ;	; 64.03.xx xor a 	; zero.
000DD6  3               ;	lda z80_a
000DD6  3               ;	eor z80_a
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 29.02.03 ld (sndv1), a 	; sound off.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta sndv1
000DD6  3               ;
000DD6  3               ;	; 29.03.02 ld a, (sndmix) 	; mixer byte.
000DD6  3               ;	lda sndmix
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 36.05.xx or 9 	; mix bits off.
000DD6  3               ;	lda z80_a
000DD6  3               ;	ora #9
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 29.02.03 ld (sndmix), a 	; mixer setting for channel.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta sndmix
000DD6  3               ;
000DD6  3               ;	; 43.xx.xx rts  	
000DD6  3               ;	rts
000DD6  3               ;
000DD6  3               ;silen2:
000DD6  3               ;	; 64.03.xx xor a 	; zero.
000DD6  3               ;	lda z80_a
000DD6  3               ;	eor z80_a
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 29.02.03 ld (sndv2), a 	; sound off.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta sndv2
000DD6  3               ;
000DD6  3               ;	; 29.03.02 ld a, (sndmix) 	; mixer byte.
000DD6  3               ;	lda sndmix
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 36.05.xx or 18 	; mix bits off.
000DD6  3               ;	lda z80_a
000DD6  3               ;	ora #18
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 29.02.03 ld (sndmix), a 	; mixer setting for channel.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta sndmix
000DD6  3               ;
000DD6  3               ;	; 43.xx.xx rts  	
000DD6  3               ;	rts
000DD6  3               ;
000DD6  3               ;silen3:
000DD6  3               ;	; 64.03.xx xor a 	; zero.
000DD6  3               ;	lda z80_a
000DD6  3               ;	eor z80_a
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 29.02.03 ld (sndv3), a 	; sound off.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta sndv3
000DD6  3               ;
000DD6  3               ;	; 29.03.02 ld a, (sndmix) 	; mixer byte.
000DD6  3               ;	lda sndmix
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 36.05.xx or 36 	; mix bits off.
000DD6  3               ;	lda z80_a
000DD6  3               ;	ora #36
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 29.02.03 ld (sndmix), a 	; mixer setting for channel.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta sndmix
000DD6  3               ;
000DD6  3               ;	; 43.xx.xx rts  	
000DD6  3               ;	rts
000DD6  3               ;
000DD6  3               ;cksnd1:
000DD6  3               ;	; 29.04.02 ld hl, (ch1ptr) 	; pointer to sound.
000DD6  3               ;	lda ch1ptr
000DD6  3               ;	sta z80_l
000DD6  3               ;	lda ch1ptr+1
000DD6  3               ;	sta z80_h
000DD6  3               ;
000DD6  3               ;	; 29.03.01 ld a, (hl) 	; fetch mixer/flag.
000DD6  3               ;	ldy #0
000DD6  3               ;	lda (z80_hl),y
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 43.xx.xx rts  	
000DD6  3               ;	rts
000DD6  3               ;
000DD6  3               ;cksnd2:
000DD6  3               ;	; 29.04.02 ld hl, (ch2ptr) 	; pointer to sound.
000DD6  3               ;	lda ch2ptr
000DD6  3               ;	sta z80_l
000DD6  3               ;	lda ch2ptr+1
000DD6  3               ;	sta z80_h
000DD6  3               ;
000DD6  3               ;	; 29.03.01 ld a, (hl) 	; fetch mixer/flag.
000DD6  3               ;	ldy #0
000DD6  3               ;	lda (z80_hl),y
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 43.xx.xx rts  	
000DD6  3               ;	rts
000DD6  3               ;
000DD6  3               ;cksnd3:
000DD6  3               ;	; 29.04.02 ld hl, (ch3ptr) 	; pointer to sound.
000DD6  3               ;	lda ch3ptr
000DD6  3               ;	sta z80_l
000DD6  3               ;	lda ch3ptr+1
000DD6  3               ;	sta z80_h
000DD6  3               ;
000DD6  3               ;	; 29.03.01 ld a, (hl) 	; fetch mixer/flag.
000DD6  3               ;	ldy #0
000DD6  3               ;	lda (z80_hl),y
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 43.xx.xx rts  	
000DD6  3               ;	rts
000DD6  3               ;
000DD6  3               ;plsnd1:
000DD6  3               ;	; 04.00.xx call cksnd1 	; check sound for first channel.
000DD6  3               ;	jsr cksnd1
000DD6  3               ;
000DD6  3               ;	; 06.05.xx cp 255 	; reached end?
000DD6  3               ;	lda z80_a
000DD6  3               ;	cmp #255
000DD6  3               ;
000DD6  3               ;	; 28.06.00 jr z, silen1 	; silence first channel.
000DD6  3               ;	bne :+
000DD6  3               ;	jmp silen1
000DD6  3               ;:
000DD6  3               ;	; 02.05.xx and 15 	; sound bits.
000DD6  3               ;	lda z80_a
000DD6  3               ;	and #15
000DD6  3               ;
000DD6  3               ;	; 29.02.03 ld (sndv1), a 	; set volume for channel.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta sndv1
000DD6  3               ;
000DD6  3               ;	; 29.03.02 ld a, (sndmix) 	; mixer byte.
000DD6  3               ;	lda sndmix
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 02.05.xx and 246 	; remove bits for this channel.
000DD6  3               ;	lda z80_a
000DD6  3               ;	and #246
000DD6  3               ;
000DD6  3               ;	; 29.03.03 ld b, a 	; store in b register.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta z80_b
000DD6  3               ;
000DD6  3               ;	; 04.00.xx call plmix 	; fetch mixer details.
000DD6  3               ;	jsr plmix
000DD6  3               ;
000DD6  3               ;	; 02.05.xx and 9 	; mixer bits we want.
000DD6  3               ;	lda z80_a
000DD6  3               ;	and #9
000DD6  3               ;
000DD6  3               ;	; 36.03.xx or b 	; combine with mixer bits.
000DD6  3               ;	lda z80_a
000DD6  3               ;	ora z80_a
000DD6  3               ;	sta z80_a
000DD6  3               ;
000DD6  3               ;	; 29.02.03 ld (sndmix), a 	; new mixer value.
000DD6  3               ;	lda z80_a
000DD6  3               ;	sta sndmix
000DD6  3               ;
000DD6  3               ;	; 04.00.xx call plwn 	; white noise check.
000DD6  3               ;	jsr plwn
000DD6  3               ;
000DD6  3               ;	; 22.04.xx inc hl 	; tone low.
000DD6  3               ;	inc z80_l
000DD6  3               ;	bne :+
000DD6  3               ;	inc z80_h
000DD6  3               ;:
000DD6  3               ;	; 29.03.01 ld e, (hl) 	; fetch value.
000DD6  3               ;	ldy #0
000DD6  3               ;	lda (z80_hl),y
000DD6  3               ;	sta z80_e
000DD6  3               ;
000DD6  3               ;	; 22.04.xx inc hl 	; tone high.
000DD6  3               ;	inc z80_l
000DD6  3               ;	bne :+
000DD6  3               ;	inc z80_h
000DD6  3               ;:
000DD6  3               ;	; 29.03.01 ld d, (hl) 	; fetch value.
000DD6  3               ;	ldy #0
000DD6  3               ;	lda (z80_hl),y
000DD6  3               ;	sta z80_d
000DD6  3               ;
000DD6  3               ;	; 29.02.04 ld (snddat), de 	; set tone.
000DD6  3               ;	lda z80_e
000DD6  3               ;	sta snddat
000DD6  3               ;	lda z80_d
000DD6  3               ;	sta snddat+1
000DD6  3               ;
000DD6  3               ;	; 22.04.xx inc hl 	; next bit of sound.
000DD6  3               ;	inc z80_l
000DD6  3               ;	bne :+
000DD6  3               ;	inc z80_h
000DD6  3               ;:
000DD6  3               ;	; 29.02.04 ld (ch1ptr), hl 	; set pointer.
000DD6  3               ;	lda z80_l
000DD6  3               ;	sta ch1ptr
000DD6  3               ;	lda z80_h
000DD6  3               ;	sta ch1ptr+1
000DD6  3               ;
000DD6  3               ;	; 43.xx.xx rts  	
000DD6  3               ;	rts
000DD6  3               ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
000DD6  3               
000DD6  3               
000DD6  3               ;---------------------------------------------------
000DD6  3               ; Objects handling.
000DD6  3               ; 32 bytes for image
000DD6  3               ; 3 for room, y and x
000DD6  3               ; 3 for starting room, y and x.
000DD6  3               ; 254 = disabled.
000DD6  3               ; 255 = object in player"s pockets.
000DD6  3               ;---------------------------------------------------
000DD6  3               
000DD6  3               ;---------------------------------------------------
000DD6  3               ; Show items present.
000DD6  3               ;---------------------------------------------------
000DD6  3               
000DD6  3               shwob:
000DD6  3  A9 2D        	lda #<objdta 			; objects table.
000DD8  3  85 66        	sta z80_l
000DDA  3  A9 35        	lda #>objdta
000DDC  3  85 67        	sta z80_h
000DDE  3               
000DDE  3  AE 14 03     	ldx numob 			; number of objects in the game.
000DE1  3               shwob0:
000DE1  3  A0 20        	ldy #32 			; distance to room number.
000DE3  3  B1 66        	lda (z80_hl),y 			; same as an item?
000DE5  3  CD 19 03     	cmp scno 			; current location.
000DE8  3  D0 03        	bne :+
000DEA  3  20 FE 0D     	jsr dobj 			; yes, display object.
000DED  3               :
000DED  3  18           	clc
000DEE  3  A5 66        	lda z80_l
000DF0  3  69 26        	adc #38 			; distance to next item.
000DF2  3  85 66        	sta z80_l
000DF4  3  A5 67        	lda z80_h
000DF6  3  69 00        	adc #0
000DF8  3  85 67        	sta z80_h	 		; point to it.
000DFA  3  CA           	dex
000DFB  3  D0 E4        	bne shwob0 			; repeat for others.
000DFD  3  60           	rts
000DFE  3               
000DFE  3               ;---------------------------------------------------
000DFE  3               ; Display object.
000DFE  3               ; hl must point to object's start address.
000DFE  3               ;
000DFE  3               ; Input:
000DFE  3               ;  HL = object address
000DFE  3               ;---------------------------------------------------
000DFE  3               
000DFE  3               dobj:
000DFE  3  A0 21        	ldy #33
000E00  3  B1 66        	lda (z80_hl),y 			; point to y.
000E02  3  8D 3F 03     	sta dispy
000E05  3  C8           	iny
000E06  3  B1 66        	lda (z80_hl),y 			; point to x.
000E08  3  8D 3E 03     	sta dispx
000E0B  3               dobj1:
000E0B  3  4C 4D 12     	jmp sprite 			; draw this sprite.
000E0E  3               
000E0E  3               
000E0E  3               ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
000E0E  3               ; Colour an object/sprite at dispx, dispy.
000E0E  3               ; set up colour in c register first.
000E0E  3               
000E0E  3               cobj:
000E0E  3               	; 41.04.xx push hl 	; store sprite graphic address.
000E0E  3  A5 67        	lda z80_h
000E10  3  48           	pha
000E11  3  A5 66        	lda z80_l
000E13  3  48           	pha
000E14  3               
000E14  3               	; 04.00.xx call scadd 	; get screen address in hl.
000E14  3  20 F6 19     	jsr scadd
000E17  3               
000E17  3               	; 59.05.03 set 5, h 	; switch to attribute screen.
000E17  3  A5 67        	lda z80_h
000E19  3  09 20        	ora #_bitvalue5
000E1B  3  85 67        	sta z80_h
000E1D  3               
000E1D  3               	; 29.03.05 ld d, 3 	; default columns to write.
000E1D  3  A9 03        	lda #3; default columns to write.
000E1F  3  85 65        	sta z80_d
000E21  3               
000E21  3               	; 29.03.02 ld a, (dispy) 	; y position.
000E21  3  AD 3F 03     	lda dispy
000E24  3  85 61        	sta z80_a
000E26  3               
000E26  3               	; 02.05.xx and 7 	; does y straddle cells?
000E26  3  A5 61        	lda z80_a
000E28  3  29 07        	and #7
000E2A  3               
000E2A  3               	; 28.06.00 jr nz, cobj0 	; yes, loop counter is good.
000E2A  3  F0 03        	beq :+
000E2C  3  4C 31 0E     	jmp cobj0
000E2F  3               :
000E2F  3               	; 13.03.xx dec d 	; one less column to write.
000E2F  3  C6 65        	dec z80_d
000E31  3               
000E31  3               cobj0:
000E31  3               	; 29.03.05 ld b, 16 	; rows to write.
000E31  3  A9 10        	lda #16; rows to write.
000E33  3  85 63        	sta z80_b
000E35  3               
000E35  3               cobj2:
000E35  3               	; 41.04.xx push bc 	; store row counter.
000E35  3  A5 63        	lda z80_b
000E37  3  48           	pha
000E38  3  A5 62        	lda z80_c
000E3A  3  48           	pha
000E3B  3               
000E3B  3               	; 29.03.03 ld b, d 	; column counter.
000E3B  3  A5 65        	lda z80_d
000E3D  3  85 63        	sta z80_b
000E3F  3               
000E3F  3               	; 41.04.xx push hl 	; store address.
000E3F  3  A5 67        	lda z80_h
000E41  3  48           	pha
000E42  3  A5 66        	lda z80_l
000E44  3  48           	pha
000E45  3               
000E45  3               cobj1:
000E45  3               	; 29.01.03 ld (hl), c 	; write attribute.
000E45  3  A5 62        	lda z80_c
000E47  3  A0 00        	ldy #0
000E49  3  91 66        	sta (z80_hl),y
000E4B  3               
000E4B  3               	; 22.04.xx inc hl 	; next cell.
000E4B  3  E6 66        	inc z80_l
000E4D  3  D0 02        	bne :+
000E4F  3  E6 67        	inc z80_h
000E51  3               :
000E51  3               	; 15.00.xx djnz cobj1 	; repeat for columns.
000E51  3  C6 63        	dec z80_b
000E53  3  F0 03        	beq :+
000E55  3  4C 45 0E     	jmp cobj1
000E58  3               :
000E58  3               	; 40.04.xx pop hl 	; restore attribute address.
000E58  3  68           	pla
000E59  3  85 66        	sta z80_l
000E5B  3  68           	pla
000E5C  3  85 67        	sta z80_h
000E5E  3               
000E5E  3               	; 04.00.xx call nattr 	; next attribute address in hl.
000E5E  3  20 7D 1A     	jsr nattr
000E61  3               
000E61  3               	; 40.04.xx pop bc 	; restore row counter.
000E61  3  68           	pla
000E62  3  85 62        	sta z80_c
000E64  3  68           	pla
000E65  3  85 63        	sta z80_b
000E67  3               
000E67  3               	; 15.00.xx djnz cobj2 	; repeat for all rows.
000E67  3  C6 63        	dec z80_b
000E69  3  F0 03        	beq :+
000E6B  3  4C 35 0E     	jmp cobj2
000E6E  3               :
000E6E  3               	; 40.04.xx pop hl 	
000E6E  3  68           	pla
000E6F  3  85 66        	sta z80_l
000E71  3  68           	pla
000E72  3  85 67        	sta z80_h
000E74  3               
000E74  3               	; 43.xx.xx rts  	
000E74  3  60           	rts
000E75  3               ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
000E75  3               
000E75  3               
000E75  3               ;--------------------------------------
000E75  3               ; Remove an object.
000E75  3               ;
000E75  3               ; Input:
000E75  3               ;  A = object number
000E75  3               ;--------------------------------------
000E75  3               
000E75  3               remob:
000E75  3  CD 14 03     	cmp numob			; number of objects in game.
000E78  3  90 01        	bcc :+				; are we checking past the end?
000E7A  3  60           	rts				; yes, can't get non-existent item.
000E7B  3               :
000E7B  3  48           	pha				; remember object.
000E7C  3  20 8A 0E     	jsr getob			; pick it up if we haven't already got it.
000E7F  3  68           	pla				; retrieve object number.
000E80  3  20 BC 0E     	jsr gotob			; get its address.
000E83  3  A9 FE        	lda #254
000E85  3  A0 20        	ldy #32
000E87  3  91 66        	sta (z80_hl),y			; remove it.
000E89  3  60           	rts
000E8A  3               
000E8A  3               ;---------------------------------------------------
000E8A  3               ; Pick up object number held in the accumulator.
000E8A  3               ;
000E8A  3               ; Input:
000E8A  3               ;  A = object number
000E8A  3               ;---------------------------------------------------
000E8A  3               
000E8A  3               getob:
000E8A  3  CD 14 03     	cmp numob 		; number of objects in game.
000E8D  3  90 01        	bcc :+			; are we checking past the end?
000E8F  3  60           	rts			; yes, can't get non-existent item.
000E90  3               :
000E90  3  20 BC 0E     	jsr gotob 		; check if we already have it.
000E93  3  C9 FF        	cmp #255
000E95  3  D0 01        	bne :+
000E97  3  60           	rts			; we already do.
000E98  3               :
000E98  3  A0 20        	ldy #32
000E9A  3  B1 66        	lda (z80_hl),y		; is it on this screen?
000E9C  3  CD 19 03     	cmp scno 		; current screen.
000E9F  3  D0 16        	bne getob0		; not on screen, so nothing to delete.
000EA1  3               
000EA1  3  A9 FF        	lda #255
000EA3  3  91 66        	sta (z80_hl),y		; pick it up.
000EA5  3  C8           	iny 			; point to y coord.
000EA6  3               getob1:
000EA6  3  A0 21        	ldy #33
000EA8  3  B1 66        	lda (z80_hl),y		; y coord.
000EAA  3  8D 3F 03     	sta dispy
000EAD  3  A0 22        	ldy #34
000EAF  3  B1 66        	lda (z80_hl),y 		; x coord.
000EB1  3  8D 3E 03     	sta dispx
000EB4  3  4C 0B 0E     	jmp dobj1 		; delete object sprite.
000EB7  3               getob0:
000EB7  3  A9 FF        	lda #255
000EB9  3  91 66        	sta (z80_hl),y 		; pick it up.
000EBB  3  60           	rts
000EBC  3               
000EBC  3               ;-----------------------------------------------------------------
000EBC  3               ; Got object check.
000EBC  3               ; Call with object in accumulator, rtsurns zero set if in pockets.
000EBC  3               ;
000EBC  3               ; Input:
000EBC  3               ;  A = object number
000EBC  3               ;-----------------------------------------------------------------
000EBC  3               
000EBC  3               gotob:
000EBC  3  CD 14 03     	cmp numob 		; number of objects in game.
000EBF  3  90 03        	bcc :+ 			; are we checking past the end?
000EC1  3  4C C8 0E     	jmp gotob0 		; yes, we can't have a non-existent object.
000EC4  3               :
000EC4  3  20 CD 0E     	jsr findob		; find the object.
000EC7  3               gotob1:
000EC7  3               ;	cmp #255 		; in pockets?
000EC7  3  60           	rts
000EC8  3               
000EC8  3               gotob0:
000EC8  3  A9 FE        	lda #254 		; missing.
000ECA  3  4C C7 0E     	jmp gotob1
000ECD  3               
000ECD  3               findob:
000ECD  3  48           	pha			; save object number
000ECE  3  A9 2D        	lda #<objdta 		; objects.
000ED0  3  85 66        	sta z80_l
000ED2  3  A9 35        	lda #>objdta
000ED4  3  85 67        	sta z80_h
000ED6  3  68           	pla			; retreive object number
000ED7  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
000ED9  3  AA           	tax 			; loop counter
000EDA  3               fndob2:
000EDA  3  18           	clc
000EDB  3  A5 66        	lda z80_l
000EDD  3  69 26        	adc #38 		; size of each object.
000EDF  3  85 66        	sta z80_l
000EE1  3  90 02        	bcc :+
000EE3  3  E6 67        	inc z80_h
000EE5  3               :
000EE5  3  CA           	dex 			; repeat until we find address.
000EE6  3  D0 F2        	bne fndob2
000EE8  3               fndob1:
000EE8  3  A0 20        	ldy #32			; distance to room it's in.
000EEA  3  B1 66        	lda (z80_hl),y		; fetch status.
000EEC  3  60           	rts
000EED  3               
000EED  3               ;---------------------------------------------
000EED  3               ; Drop object number at (dispx, dispy).
000EED  3               ;
000EED  3               ; Input:
000EED  3               ;  A = object number
000EED  3               ;---------------------------------------------
000EED  3               
000EED  3               drpob:
000EED  3  CD 14 03     	cmp numob 		; are we checking past the end?
000EF0  3  90 01        	bcc :+
000EF2  3  60           	rts			; yes, can't drop non-existent item.
000EF3  3               :
000EF3  3  20 BC 0E     	jsr gotob		; make sure object is in inventory.
000EF6  3  CD 19 03     	cmp scno		; already on this screen?
000EF9  3  D0 01        	bne :+
000EFB  3  60           	rts			; yes, nothing to do.
000EFC  3               :
000EFC  3  A0 20        	ldy #32
000EFE  3  AD 19 03     	lda scno
000F01  3  91 66        	sta (z80_hl),y		; bring onto screen.
000F03  3  AD 3F 03     	lda dispy		; sprite y coordinate.
000F06  3  C8           	iny 
000F07  3  91 66        	sta (z80_hl),y		; point to object y.
000F09  3  AD 3E 03     	lda dispx 		; sprite x coordinate.
000F0C  3  C8           	iny
000F0D  3  91 66        	sta (z80_hl),y 		; point to object x
000F0F  3  4C FE 0D     	jmp dobj		; draw the object sprite.
000F12  3               
000F12  3               ;-----------------------------------------------
000F12  3               ; Seek objects at sprite position.
000F12  3               ;
000F12  3               ; Output:
000F12  3               ;  A = object number, if not found A=255
000F12  3               ;-----------------------------------------------
000F12  3               
000F12  3               skobj:
000F12  3  A9 2D        	lda #<objdta 		; pointer to objects.
000F14  3  85 66        	sta z80_l
000F16  3  A9 35        	lda #>objdta
000F18  3  85 67        	sta z80_h
000F1A  3               
000F1A  3  AD 14 03     	lda numob 		; number of objects in game.
000F1D  3  85 63        	sta z80_b 		; set up the loop counter.
000F1F  3               skobj0:
000F1F  3  AD 19 03     	lda scno		; current room number.
000F22  3  A0 20        	ldy #32
000F24  3  D1 66        	cmp (z80_hl),y		; is object in here?
000F26  3  D0 03        	bne :+
000F28  3  20 3D 0F     	jsr skobj1		; yes, check coordinates.
000F2B  3               :
000F2B  3  18           	clc			; point to next object in table.
000F2C  3  A5 66        	lda z80_l
000F2E  3  69 26        	adc #38			; size of each object.
000F30  3  85 66        	sta z80_l
000F32  3  90 02        	bcc :+
000F34  3  E6 67        	inc z80_h
000F36  3               :
000F36  3  C6 63        	dec z80_b
000F38  3  D0 E5        	bne skobj0		; repeat for all objects.
000F3A  3               
000F3A  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
000F3C  3  60           	rts
000F3D  3               
000F3D  3               skobj1:
000F3D  3  A0 21        	ldy #33			; point to y coordinate.
000F3F  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
000F41  3  38           	sec
000F42  3  A0 08        	ldy #8
000F44  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
000F46  3  18           	clc
000F47  3  69 0F        	adc #15			; add sprite height minus one.
000F49  3  C9 1F        	cmp #31			; within range?
000F4B  3  90 03        	bcc :+
000F4D  3  4C 6B 0F     	jmp skobj2		; no, ignore object.
000F50  3               :
000F50  3  A0 22        	ldy #34			; point to x coordinate now.
000F52  3  B1 66        	lda (z80_hl),y 		; get coordinate.
000F54  3  38           	sec
000F55  3  A0 09        	ldy #9
000F57  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
000F59  3  18           	clc			; add sprite width minus one.
000F5A  3  69 0F        	adc #15
000F5C  3  C9 1F        	cmp #31			; within range?
000F5E  3  90 03        	bcc :+
000F60  3  4C 6B 0F     	jmp skobj2		; no, ignore object.
000F63  3               :
000F63  3  68           	pla			; remove return address from stack.
000F64  3  68           	pla
000F65  3               
000F65  3  AD 14 03     	lda numob 		; objects in game.
000F68  3  38           	sec
000F69  3  E5 63        	sbc z80_b		; subtract loop counter.
000F6B  3               skobj2:
000F6B  3  60           	rts			; accumulator now points to object.
000F6C  3               
000F6C  3               
000F6C  3               ;---------------------------------------------------------------------
000F6C  3               ; Spawn a new sprite.
000F6C  3               ;---------------------------------------------------------------------
000F6C  3               
000F6C  3               spawn:
000F6C  3  A9 7F        	lda #<sprtab		; sprite table.
000F6E  3  85 66        	sta z80_l
000F70  3  A9 20        	lda #>sprtab
000F72  3  85 67        	sta z80_h
000F74  3               numsp1:
000F74  3  A2 0C        	ldx #NUMSPR		; number of sprites.
000F76  3               spaw0:
000F76  3  A0 00        	ldy #0
000F78  3  B1 66        	lda (z80_hl),y		; get sprite type.
000F7A  3  C9 FF        	cmp #255		; is it an unused slot?
000F7C  3  F0 0E        	beq spaw1 		; yes, we can use this one.
000F7E  3               
000F7E  3  18           	clc 			; point to next sprite in table.
000F7F  3  A5 66        	lda z80_l
000F81  3  69 11        	adc #TABSIZ		; size of each entry.
000F83  3  85 66        	sta z80_l
000F85  3  90 02        	bcc :+
000F87  3  E6 67        	inc z80_h
000F89  3               :
000F89  3  CA           	dex			; one less iteration.
000F8A  3  D0 EA        	bne spaw0		; keep going until we find a slot.
000F8C  3               
000F8C  3               ; Didn't find one but drop through and set up a dummy sprite instead.
000F8C  3               
000F8C  3               spaw1:
000F8C  3  A5 69        	lda z80_i		; address of original sprite.
000F8E  3  48           	pha
000F8F  3  A5 68        	lda z80_x
000F91  3  48           	pha
000F92  3               
000F92  3  A5 66        	lda z80_l		; store spawned sprite address.
000F94  3  8D 08 10     	sta spptr
000F97  3  A5 67        	lda z80_h
000F99  3  8D 09 10     	sta spptr+1
000F9C  3               
000F9C  3  A5 62        	lda z80_c
000F9E  3  A0 00        	ldy #0
000FA0  3  91 66        	sta (z80_hl),y 		; set the type.
000FA2  3  A0 05        	ldy #5
000FA4  3  91 66        	sta (z80_hl),y		; copy
000FA6  3               
000FA6  3  A5 63        	lda z80_b
000FA8  3  A0 01        	ldy #1
000FAA  3  91 66        	sta (z80_hl),y		; set the image.
000FAC  3  A0 06        	ldy #6
000FAE  3  91 66        	sta (z80_hl),y		; copy
000FB0  3               
000FB0  3  A9 00        	lda #0 			; frame zero.
000FB2  3  A0 02        	ldy #2
000FB4  3  91 66        	sta (z80_hl),y		; set frame.
000FB6  3  A0 07        	ldy #7
000FB8  3  91 66        	sta (z80_hl),y		; copy
000FBA  3               
000FBA  3  A0 09        	ldy #9
000FBC  3  B1 68        	lda (z80_ix),y 		; x coordinate.
000FBE  3  A0 03        	ldy #3
000FC0  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
000FC2  3  A0 08        	ldy #8
000FC4  3  91 66        	sta (z80_hl),y		; copy
000FC6  3               
000FC6  3  A0 08        	ldy #8
000FC8  3  B1 68        	lda (z80_ix),y 		; y coordinate.
000FCA  3  A0 04        	ldy #4
000FCC  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
000FCE  3  A0 09        	ldy #9
000FD0  3  91 66        	sta (z80_hl),y		; copy
000FD2  3               
000FD2  3  A0 0A        	ldy #10			; direction of original.
000FD4  3  B1 68        	lda (z80_ix),y
000FD6  3  91 66        	sta (z80_hl),y		; direction
000FD8  3               
000FD8  3  A5 63        	lda z80_b
000FDA  3  A0 0B        	ldy #11
000FDC  3  91 66        	sta (z80_hl),y		; reset parameter.
000FDE  3  C8           	iny
000FDF  3  91 66        	sta (z80_hl),y		; reset parameter.
000FE1  3  C8           	iny
000FE2  3  91 66        	sta (z80_hl),y		; reset parameter.
000FE4  3  C8           	iny
000FE5  3  91 66        	sta (z80_hl),y		; reset parameter.
000FE7  3               rtssp:
000FE7  3  AD 08 10     	lda spptr		; address of new sprite.
000FEA  3  85 68        	sta z80_x
000FEC  3  AD 09 10     	lda spptr+1
000FEF  3  85 69        	sta z80_i
000FF1  3               evis1:
000FF1  3  20 F0 29     	jsr evnt09 		; call sprite initialisation event.
000FF4  3               
000FF4  3  AD 08 10     	lda spptr 		; address of new sprite.
000FF7  3  85 68        	sta z80_x
000FF9  3  AD 09 10     	lda spptr+1
000FFC  3  85 69        	sta z80_i
000FFE  3  20 13 1A     	jsr sspria 		; display the new sprite.
001001  3               
001001  3  68           	pla			; address of original sprite.
001002  3  85 68        	sta z80_x
001004  3  68           	pla
001005  3  85 69        	sta z80_i
001007  3               
001007  3  60           	rts
001008  3               
001008  3  00 00        spptr:	.word 0			; spawned sprite pointer.
00100A  3  00           seed:	.byte 0			; seed for random numbers.
00100B  3  30 30 30 30  score:	.byte "000000"		; player"s score.
00100F  3  30 30        
001011  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
001015  3  30 30        
001017  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
00101B  3  30 30        
00101D  3  00 3C        grbase:	.word 15360		; graphics base address.
00101F  3               
00101F  3               ;----------------------------------------------------
00101F  3               ; Check y-pos
00101F  3               ;----------------------------------------------------
00101F  3               
00101F  3               checkx:
00101F  3  AD 3F 03     	lda dispy		; y position.
001022  3  C9 18        	cmp #24			; off screen?
001024  3  B0 01        	bcs :+
001026  3  60           	rts			; no, it's okay.
001027  3               :
001027  3  68           	pla					; remove return address from stack.
001028  3  85 66        	sta z80_l
00102A  3  68           	pla
00102B  3  85 67        	sta z80_h
00102D  3  60           	rts
00102E  3               
00102E  3               ;-----------------------------------------------
00102E  3               ; Displays the current high score.
00102E  3               ;-----------------------------------------------
00102E  3               
00102E  3               dhisc:
00102E  3  A9 11        	lda #<hiscor 		; high score text.
001030  3  85 66        	sta z80_l
001032  3  A9 10        	lda #>hiscor
001034  3  85 67        	sta z80_h
001036  3  4C 41 10     	jmp dscor1		; check in printable range then show 6 digits.
001039  3               
001039  3               ;------------------------------------------------------
001039  3               ; Displays the current score.
001039  3               ;------------------------------------------------------
001039  3               
001039  3               dscor:
001039  3  A9 0B        	lda #<score		; score text.
00103B  3  85 66        	sta z80_l
00103D  3  A9 10        	lda #>score
00103F  3  85 67        	sta z80_h
001041  3               dscor1:
001041  3  20 AD 17     	jsr preprt		; set up font and print position.
001044  3  20 1F 10     	jsr checkx		; make sure we're in a printable range.
001047  3               
001047  3  A9 06        	lda #6			; digits to display.
001049  3  85 63        	sta z80_b
00104B  3  AD 09 17     	lda prtmod		; get print mode.
00104E  3  F0 03        	beq :+			; standard size text?
001050  3  4C 74 10     	jmp bscor0		; no, show double-height.
001053  3               :
001053  3               dscor0:
001053  3  A0 00        	ldy #0
001055  3  B1 66        	lda (z80_hl),y 		; fetch character.
001057  3  20 9F 11     	jsr pchar 		; display character.
00105A  3  EE 3E 03     	inc dispx		; move along x coordinate
00105D  3               
00105D  3  E6 66        	inc z80_l		; next score column.
00105F  3  D0 02        	bne :+
001061  3  E6 67        	inc z80_h
001063  3               :
001063  3  C6 63        	dec z80_b
001065  3  D0 EC        	bne dscor0 		; repeat for all digits.
001067  3               dscor2:
001067  3  AD 3E 03     	lda dispx 		; set up display coordinates.
00106A  3  8D 33 03     	sta charx
00106D  3  AD 3F 03     	lda dispy
001070  3  8D 34 03     	sta chary
001073  3  60           	rts
001074  3               
001074  3               ;------------------------------------------------------
001074  3               ; Displays the current score in double-height characters.
001074  3               ;
001074  3               ; Input:
001074  3               ;  B  = digit number
001074  3               ;  HL = score string
001074  3               ;------------------------------------------------------
001074  3               
001074  3               bscor0:
001074  3  A0 00        	ldy #0
001076  3               
001076  3  B1 66        	lda (z80_hl),y 		; fetch character.
001078  3  20 23 17     	jsr bchar 		; display big char.
00107B  3               
00107B  3  E6 66        	inc z80_l 		; next score column.
00107D  3  D0 02        	bne :+
00107F  3  E6 67        	inc z80_h
001081  3               :
001081  3  C6 63        	dec z80_b
001083  3  F0 03        	beq :+
001085  3  4C 74 10     	jmp bscor0 		; repeat for all digits.
001088  3               :
001088  3  4C 67 10     	jmp dscor2 		; tidy up line and column variables.
00108B  3               
00108B  3               ;-----------------------------------------------------
00108B  3               ; Adds number in the hl pair to the score.
00108B  3               ;-----------------------------------------------------
00108B  3               
00108B  3               addsc:
00108B  3  A9 0C        	lda #<(score+1) 	; ten thousands column.
00108D  3  85 64        	sta z80_e
00108F  3  A9 10        	lda #>(score+1)
001091  3  85 65        	sta z80_d
001093  3  A9 10        	lda #<10000		; amount to add each time.
001095  3  85 62        	sta z80_c
001097  3  A9 27        	lda #>10000
001099  3  85 63        	sta z80_b
00109B  3  20 DF 10     	jsr incsc		; add to score.
00109E  3               
00109E  3  E6 64        	inc z80_e		; thousands column.
0010A0  3  D0 02        	bne :+
0010A2  3  E6 65        	inc z80_d
0010A4  3               :
0010A4  3  A9 E8        	lda #<1000		; amount to add each time.
0010A6  3  85 62        	sta z80_c
0010A8  3  A9 03        	lda #>1000
0010AA  3  85 63        	sta z80_b
0010AC  3  20 DF 10     	jsr incsc 		; add to score.
0010AF  3               
0010AF  3  E6 64        	inc z80_e		; hundreds column.
0010B1  3  D0 02        	bne :+
0010B3  3  E6 65        	inc z80_d
0010B5  3               :
0010B5  3  A9 64        	lda #<100		; amount to add each time.
0010B7  3  85 62        	sta z80_c
0010B9  3  A9 00        	lda #>100
0010BB  3  85 63        	sta z80_b
0010BD  3  20 DF 10     	jsr incsc		; add to score.
0010C0  3               
0010C0  3  E6 64        	inc z80_e 		; tens column.
0010C2  3  D0 02        	bne :+
0010C4  3  E6 65        	inc z80_d
0010C6  3               :
0010C6  3  A9 0A        	lda #<10		; amount to add each time.
0010C8  3  85 62        	sta z80_c
0010CA  3  A9 00        	lda #>10
0010CC  3  85 63        	sta z80_b
0010CE  3  20 DF 10     	jsr incsc 		; add to score.
0010D1  3               
0010D1  3  E6 64        	inc z80_e		; units column.
0010D3  3  D0 02        	bne :+
0010D5  3  E6 65        	inc z80_d
0010D7  3               :
0010D7  3  A9 01        	lda #<1			; units.
0010D9  3  85 62        	sta z80_c
0010DB  3  A9 00        	lda #>1
0010DD  3  85 63        	sta z80_b
0010DF  3               incsc:
0010DF  3  A5 67        	lda z80_h		; store amount to add.
0010E1  3  48           	pha
0010E2  3  A5 66        	lda z80_l
0010E4  3  48           	pha
0010E5  3               
0010E5  3  38           	sec			; subtract from amount to add.
0010E6  3  A5 66        	lda z80_l
0010E8  3  E5 62        	sbc z80_c
0010EA  3  85 66        	sta z80_l
0010EC  3  A5 67        	lda z80_h
0010EE  3  E5 63        	sbc z80_b
0010F0  3  85 67        	sta z80_h
0010F2  3  90 14        	bcc incsc0		; too much, restore value.
0010F4  3               
0010F4  3  68           	pla			; delete the previous amount from the stack.
0010F5  3  68           	pla
0010F6  3               
0010F6  3  A5 65        	lda z80_d 		; store column position.
0010F8  3  48           	pha
0010F9  3  A5 64        	lda z80_e
0010FB  3  48           	pha
0010FC  3  20 0F 11     	jsr incsc2		; do the increment.
0010FF  3               
0010FF  3  68           	pla			; restore column.
001100  3  85 64        	sta z80_e
001102  3  68           	pla
001103  3  85 65        	sta z80_d
001105  3  4C DF 10     	jmp incsc		; repeat until all added.
001108  3               
001108  3               incsc0:
001108  3  68           	pla			; restore previous value.
001109  3  85 66        	sta z80_l
00110B  3  68           	pla
00110C  3  85 67        	sta z80_h
00110E  3  60           	rts
00110F  3               incsc2:
00110F  3  A0 00        	ldy #0
001111  3  B1 64        	lda (z80_de),y 		; get amount.
001113  3  18           	clc
001114  3  69 01        	adc #1			; add one to column.
001116  3  91 64        	sta (z80_de),y		; write new column total.
001118  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
00111A  3  B0 01        	bcs :+
00111C  3  60           	rts			; no, carry on.
00111D  3               :
00111D  3  A9 30        	lda #'0'		; make it zero.
00111F  3  91 64        	sta (z80_de),y		; write new column total.
001121  3  C6 64        	dec z80_e		; back one column.
001123  3  D0 02        	bne :+
001125  3  C6 65        	dec z80_d
001127  3               :
001127  3  4C 0F 11     	jmp incsc2
00112A  3               
00112A  3               ;------------------------------------
00112A  3               ; Add bonus to score and reset bonus
00112A  3               ; NEEDS TO BE TESTED!!!!!!!!!!!!!!!!!
00112A  3               ;------------------------------------
00112A  3               
00112A  3               addbo:
00112A  3  A2 05        	ldx #5			; last digit.
00112C  3  18           	clc			; clear carry.
00112D  3               addbo0:
00112D  3  BD 0B 10     	lda score,x		; get score.
001130  3  7D 17 10     	adc bonus,x		; add bonus.
001133  3  38           	sec			; 0 to 18.
001134  3  E9 30        	sbc #48
001136  3  48           	pha
001137  3  A9 30        	lda #'0'
001139  3  9D 17 10     	sta bonus,x		; zeroise bonus.
00113C  3  68           	pla
00113D  3  C9 3A        	cmp #58			; carried?
00113F  3  B0 07        	bcs addbo2		; no, do next one.
001141  3  38           	sec
001142  3  E9 0A        	sbc #10			; subtract 10.
001144  3  38           	sec
001145  3  4C 49 11     	jmp addbo1
001148  3               addbo2:
001148  3  18           	clc
001149  3               addbo1:
001149  3  9D 0B 10     	sta score,x		; write new score.
00114C  3  CA           	dex			; next digit.
00114D  3  10 DE        	bpl addbo0		; repeat for all 6 digits.
00114F  3  60           	rts
001150  3               
001150  3               ;------------------------------------
001150  3               ; Swap score and bonus.
001150  3               ;------------------------------------
001150  3               
001150  3               swpsb:
001150  3  A2 05        	ldx #5			; digits to add.
001152  3               swpsb0:
001152  3  BD 0B 10     	lda score,x 		; get score digits.
001155  3  48           	pha			; save digit
001156  3  BD 17 10     	lda bonus,x 		; get bonus digits.
001159  3  9D 0B 10     	sta score,x		; switch score-bonus
00115C  3  68           	pla
00115D  3  9D 17 10     	sta bonus,x
001160  3  CA           	dex 			; repeat for all 6 digits.
001161  3  10 EF        	bpl swpsb0
001163  3  60           	rts
001164  3               
001164  3               ;----------------------------------------------------
001164  3               ; Get print address.
001164  3               ;----------------------------------------------------
001164  3               
001164  3               gprad:
001164  3  AD 3E 03     	lda dispx		; get x
001167  3  85 80        	sta scraddr		; store lb address
001169  3  AD 3F 03     	lda dispy		; get y
00116C  3  09 80        	ora #$80		; add $80
00116E  3  85 81        	sta scraddr+1		; store hb address
001170  3  60           	rts
001171  3               
001171  3               ;--------------------------------------------------------------
001171  3               ; Get property buffer address of char at (dispx, dispy) in hl.
001171  3               ; 
001171  3               ; Output:
001171  3               ;  buffaddr = bufaddr = MAP + dispy*32 + dispx
001171  3               ;--------------------------------------------------------------
001171  3               
001171  3               pradd:
001171  3  AD 3F 03     	lda dispy 		; y coordinate.
001174  3  85 86        	sta bufaddr
001176  3  A9 00        	lda #0
001178  3  85 87        	sta bufaddr+1
00117A  3  06 86        	asl bufaddr  		; multiply char by 32
00117C  3  26 87        	rol bufaddr+1
00117E  3  06 86        	asl bufaddr
001180  3  26 87        	rol bufaddr+1
001182  3  06 86        	asl bufaddr
001184  3  26 87        	rol bufaddr+1
001186  3  06 86        	asl bufaddr
001188  3  26 87        	rol bufaddr+1
00118A  3  06 86        	asl bufaddr
00118C  3  26 87        	rol bufaddr+1
00118E  3  18           	clc			; add address of MAP graphics.
00118F  3  A5 86        	lda bufaddr
001191  3  6D 3E 03     	adc dispx
001194  3  69 5E        	adc #<MAP
001196  3  85 86        	sta bufaddr
001198  3  A5 87        	lda bufaddr+1
00119A  3  69 21        	adc #>MAP
00119C  3  85 87        	sta bufaddr+1
00119E  3  60           	rts
00119F  3               
00119F  3               ;----------------------------------------------------
00119F  3               ; Display character in A at dispx,dispy.
00119F  3               ;
00119F  3               ; Input:
00119F  3               ;  A 	   = character to print
00119F  3               ;----------------------------------------------------
00119F  3               
00119F  3               pchar:
00119F  3  85 82        	sta fntaddr
0011A1  3  A9 00        	lda #0
0011A3  3  85 83        	sta fntaddr+1
0011A5  3  06 82        	asl fntaddr  		; multiply char by 8.
0011A7  3  26 83        	rol fntaddr+1
0011A9  3  06 82        	asl fntaddr
0011AB  3  26 83        	rol fntaddr+1
0011AD  3  06 82        	asl fntaddr
0011AF  3  26 83        	rol fntaddr+1
0011B1  3               
0011B1  3  A5 82        	lda fntaddr
0011B3  3  18           	clc
0011B4  3  6D 28 27     	adc FontPtr
0011B7  3  85 82        	sta fntaddr		; that's the low byte.
0011B9  3  A5 83        	lda fntaddr+1
0011BB  3  6D 29 27     	adc FontPtr+1
0011BE  3  85 83        	sta fntaddr+1		; add displacement.
0011C0  3               pchark:
0011C0  3  20 64 11     	jsr gprad		; get screen address.
0011C3  3  A2 07        	ldx #7			; lines to write.
0011C5  3               pchar0:
0011C5  3  A0 00        	ldy #0
0011C7  3  B1 82        	lda (fntaddr),y 	; get image byte.
0011C9  3  BC DA 11     	ldy scrtab,x		; Get rowoffset
0011CC  3               
0011CC  3  49 FF        	eor #TxtInvert		; Invert
0011CE  3               
0011CE  3  91 80        	sta (scraddr),y 	; copy to screen.
0011D0  3  E6 82        	inc fntaddr		; next image byte.
0011D2  3  D0 02        	bne :+
0011D4  3  E6 83        	inc fntaddr+1
0011D6  3               :
0011D6  3  CA           	dex			; next screen row down.
0011D7  3  10 EC        	bpl pchar0		; repeat.
0011D9  3  60           	rts
0011DA  3               
0011DA  3  E0 C0 A0 80  scrtab:	.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
0011DE  3  60 40 20 00  
0011E2  3               
0011E2  3               ;----------------------------------------------
0011E2  3               ; Print attributes, properties and pixels.
0011E2  3               ;
0011E2  3               ; Input:
0011E2  3               ;  A		= tile number
0011E2  3               ;----------------------------------------------
0011E2  3               
0011E2  3               pattr:
0011E2  3  85 63        	sta z80_b		; store cell in b register for now.
0011E4  3  AA           	tax
0011E5  3  BD 7A 2B     	lda bprop,x 		; block properties.
0011E8  3  85 62        	sta z80_c
0011EA  3  20 71 11     	jsr pradd 		; get property buffer address.
0011ED  3  A5 62        	lda z80_c
0011EF  3  A0 00        	ldy #0
0011F1  3  91 86        	sta (bufaddr),y 	; write property.
0011F3  3  A5 63        	lda z80_b 		; restore cell.
0011F5  3               
0011F5  3               ; Print attributes, no properties.
0011F5  3               
0011F5  3               panp:
0011F5  3  85 64        	sta z80_e		; displacement in e.
0011F7  3  A9 00        	lda #0
0011F9  3  85 65        	sta z80_d		; no high byte.
0011FB  3  06 64        	asl z80_e  		; multiply char by 8.
0011FD  3  26 65        	rol z80_d
0011FF  3  06 64        	asl z80_e
001201  3  26 65        	rol z80_d
001203  3  06 64        	asl z80_e
001205  3  26 65        	rol z80_d
001207  3  18           	clc
001208  3  A5 64        	lda z80_e
00120A  3  69 56        	adc #<chgfx 		; address of graphics.
00120C  3  85 84        	sta tileaddr
00120E  3  A5 65        	lda z80_d
001210  3  69 2B        	adc #>chgfx
001212  3  85 85        	sta tileaddr+1
001214  3  20 64 11     	jsr gprad 		; get screen address.
001217  3  A2 07        	ldx #7			; number of pixel rows to write.
001219  3               panp0:
001219  3  A0 00        	ldy #0
00121B  3  B1 84        	lda (tileaddr),y 	; get image byte.
00121D  3  BC DA 11     	ldy scrtab,x
001220  3  91 80        	sta (scraddr),y 	; copy to screen.
001222  3  E6 84        	inc tileaddr 		; next image byte.
001224  3  D0 02        	bne :+
001226  3  E6 85        	inc tileaddr+1
001228  3               :
001228  3  CA           	dex	 		; repeat for 8 pixel rows.
001229  3  10 EE        	bpl panp0
00122B  3  EE 3E 03     	inc dispx 		; move along one.
00122E  3  EE 33 03     	inc charx
001231  3  60           	rts
001232  3               
001232  3               ;----------------------------------------------
001232  3               ; Print character pixels, no more.
001232  3               ;
001232  3               ; Input:
001232  3               ;  A		= character to print
001232  3               ;----------------------------------------------
001232  3               
001232  3               pchr:
001232  3  20 9F 11     	jsr pchar 		; show character in accumulator.
001235  3  EE 3E 03     	inc dispx		; move along one.
001238  3  60           	rts
001239  3               
001239  3               ;----------------------------------------------------
001239  3               ; Shifter sprite routine for objects.
001239  3               ;----------------------------------------------------
001239  3               
001239  3               sprit7:
001239  3  A5 63        	lda z80_b
00123B  3  F0 0F        	beq sprit0
00123D  3  85 61        	sta z80_a
00123F  3               sprit3:
00123F  3  4E D0 12     	lsr spr			; shift into position.
001242  3  6E D1 12     	ror spr+1
001245  3  6E D2 12     	ror spr+2
001248  3  C6 61        	dec z80_a		; one less iteration.
00124A  3  D0 F3        	bne sprit3
00124C  3               sprit0:
00124C  3  60           	rts 			; now apply to screen.
00124D  3               
00124D  3               ;----------------------------------------------------
00124D  3               ; Draw sprite
00124D  3               ;----------------------------------------------------
00124D  3               
00124D  3               sprite:
00124D  3  8E D3 12     	stx xtmp		; Save X-reg
001250  3  20 F6 19     	jsr scadd 		; get screen address in scraddr.
001253  3               
001253  3  AD 3E 03     	lda dispx 		; x position.
001256  3  29 07        	and #7 			; position straddling cells.
001258  3  85 63        	sta z80_b		; store in b register.
00125A  3               
00125A  3  A5 66        	lda z80_l		; store sprite graphic address.
00125C  3  8D 6F 12     	sta sprit1+1
00125F  3  8D 76 12     	sta sprit2+1
001262  3  A5 67        	lda z80_h
001264  3  8D 70 12     	sta sprit1+2
001267  3  8D 77 12     	sta sprit2+2
00126A  3               
00126A  3  A2 00        	ldx #0			; pixel height.
00126C  3  A0 00        	ldy #0
00126E  3               sprit1:
00126E  3  BD 2D 35     	lda objdta,x		; fetch first byte.
001271  3  8D D0 12     	sta spr
001274  3  E8           	inx
001275  3               sprit2:
001275  3  BD 2D 35     	lda objdta,x
001278  3  8D D1 12     	sta spr+1
00127B  3               
00127B  3  A9 00        	lda #0
00127D  3  8D D2 12     	sta spr+2
001280  3  20 39 12     	jsr sprit7		; shift sprite
001283  3               
001283  3  CA           	dex
001284  3  AD D0 12     	lda spr			; fetch graphic.
001287  3  BC B0 12     	ldy spritetab,x
00128A  3  51 80        	eor (scraddr),y		; merge with screen image.
00128C  3  91 80        	sta (scraddr),y		; write to screen.
00128E  3  E8           	inx			; next screen byte.
00128F  3               
00128F  3  AD D1 12     	lda spr+1		; fetch graphic.
001292  3  BC B0 12     	ldy spritetab,x
001295  3  51 80        	eor (scraddr),y		; merge with screen image.
001297  3  91 80        	sta (scraddr),y		; write to screen.
001299  3  C8           	iny
00129A  3               
00129A  3  AD D2 12     	lda spr+2		; fetch graphic.
00129D  3  51 80        	eor (scraddr),y		; merge with screen image.
00129F  3  91 80        	sta (scraddr),y		; write to screen.
0012A1  3               
0012A1  3  E8           	inx			; next source byte.
0012A2  3  E0 10        	cpx #16
0012A4  3  D0 02        	bne :+
0012A6  3  E6 81        	inc scraddr+1
0012A8  3               :
0012A8  3  E0 20        	cpx #32
0012AA  3  D0 C2        	bne sprit1		; repeat
0012AC  3               
0012AC  3  AE D3 12     	ldx xtmp		; retreive X-reg
0012AF  3  60           	rts
0012B0  3               
0012B0  3               spritetab:
0012B0  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
0012B4  3  40 41 60 61  
0012B8  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0012BC  3  C0 C1 E0 E1  
0012C0  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
0012C4  3  40 41 60 61  
0012C8  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0012CC  3  C0 C1 E0 E1  
0012D0  3               
0012D0  3  00 00 00     spr:	.byte 0,0,0
0012D3  3               
0012D3  3  00           xtmp:	.byte 0
0012D4  3               
0012D4  3               ;-----------------------------------------------------------
0012D4  3               ; Get room address.
0012D4  3               ;-----------------------------------------------------------
0012D4  3               
0012D4  3               groom:
0012D4  3  AE 19 03     	ldx scno 		; screen number.
0012D7  3  A0 00        	ldy #0
0012D9  3               groomx:
0012D9  3  A9 08        	lda #<scdat 		; pointer to screens.
0012DB  3  85 66        	sta z80_l
0012DD  3  A9 31        	lda #>scdat
0012DF  3  85 67        	sta z80_h
0012E1  3               groom1:
0012E1  3  E0 00        	cpx #0			; is it the first one?
0012E3  3  F0 15        	beq groom0 		; no more screens to skip.
0012E5  3               
0012E5  3  18           	clc
0012E6  3  A5 66        	lda z80_l
0012E8  3  79 08 31     	adc scdat,y 		; low byte of screen size.
0012EB  3  85 66        	sta z80_l
0012ED  3  C8           	iny			; point to high byte.
0012EE  3  A5 67        	lda z80_h
0012F0  3  79 08 31     	adc scdat,y 		; high byte of screen size.
0012F3  3  85 67        	sta z80_h
0012F5  3  C8           	iny			; next address.
0012F6  3               
0012F6  3  CA           	dex 			; one less iteration.
0012F7  3  4C E1 12     	jmp groom1 		; loop until we reach the end.
0012FA  3               groom0:
0012FA  3  AD AC 34     	lda numsc 		; add displacement.
0012FD  3  0A           	asl a
0012FE  3  18           	clc			; add double displacement to address.
0012FF  3  65 66        	adc z80_l
001301  3  85 66        	sta z80_l
001303  3  A5 67        	lda z80_h
001305  3  69 00        	adc #0
001307  3  85 67        	sta z80_h
001309  3  60           	rts
00130A  3               
00130A  3               ;-----------------------------------------------------------
00130A  3               ; Draw present room.
00130A  3               ;-----------------------------------------------------------
00130A  3               
00130A  3               droom:
00130A  3  AD 10 03     	lda wintop 		; window top.
00130D  3  8D 3F 03     	sta dispy		; set cursor y position.
001310  3               droom2:
001310  3  20 D4 12     	jsr groom 		; get address of current room.
001313  3  A9 00        	lda #0	 		; zero in accumulator.
001315  3  8D 72 13     	sta comcnt 		; reset compression counter.
001318  3  AD 12 03     	lda winhgt 		; height of window.
00131B  3  8D 3F 13     	sta rrow		; set row counter
00131E  3               droom0:
00131E  3  AD 11 03     	lda winlft 		; window left edge.
001321  3  8D 3E 03     	sta dispx 		; set cursor x position.
001324  3  AD 13 03     	lda winwid 		; width of window.
001327  3  8D 3E 13     	sta rcol		; set column counter
00132A  3               droom1:
00132A  3  20 40 13     	jsr flbyt 		; decompress next byte on the fly.
00132D  3  20 E2 11     	jsr pattr 		; show attributes and block.
001330  3  CE 3E 13     	dec rcol		; one less column.
001333  3  D0 F5        	bne droom1 		; repeat for entire line.
001335  3  EE 3F 03     	inc dispy		; move down one line.
001338  3  CE 3F 13     	dec rrow 		; one less row.
00133B  3  D0 E1        	bne droom0 		; repeat for all rows.
00133D  3  60           	rts
00133E  3               
00133E  3  00           rcol:	.byte 0
00133F  3  00           rrow:	.byte 0
001340  3               
001340  3               ;----------------------------------------------
001340  3               ; Decompress bytes on-the-fly.
001340  3               ;----------------------------------------------
001340  3               
001340  3               flbyt:
001340  3  AD 72 13     	lda comcnt 		; compression counter.
001343  3  D0 22        	bne flbyt1		; any more to decompress?  yes.
001345  3               
001345  3  A0 00        	ldy #0
001347  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
001349  3  E6 66        	inc z80_l 		; point to next cell.
00134B  3  D0 02        	bne :+
00134D  3  E6 67        	inc z80_h
00134F  3               :
00134F  3  C9 FF        	cmp #255 		; is this byte a control code?
001351  3  F0 01        	beq :+
001353  3  60           	rts 			; no, this byte is uncompressed.
001354  3               :
001354  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
001356  3  8D 71 13     	sta combyt 		; set up the type.
001359  3  E6 66        	inc z80_l 		; point to quantity.
00135B  3  D0 02        	bne :+
00135D  3  E6 67        	inc z80_h
00135F  3               :
00135F  3  B1 66        	lda (z80_hl),y 		; get quantity.
001361  3  E6 66        	inc z80_l 		; point to next byte.
001363  3  D0 02        	bne :+
001365  3  E6 67        	inc z80_h
001367  3               :
001367  3               flbyt1:
001367  3  8D 72 13     	sta comcnt 		; store new quantity.
00136A  3  CE 72 13     	dec comcnt		; one less.
00136D  3  AD 71 13     	lda combyt 		; byte to expand.
001370  3  60           	rts
001371  3               
001371  3  00           combyt:	.byte 0			; byte type compressed.
001372  3  00           comcnt:	.byte 0			; compression counter.
001373  3               
001373  3               ;------------------------------------------
001373  3               ; Ladder down check.
001373  3               ;
001373  3               ; Input:
001373  3               ;  IX = sprite pointer
001373  3               ;------------------------------------------
001373  3               
001373  3               laddd:
001373  3  A0 09        	ldy #9
001375  3  B1 68        	lda (z80_ix),y		; x coordinate.
001377  3  8D 3E 03     	sta dispx
00137A  3               
00137A  3  A0 08        	ldy #8
00137C  3  B1 68        	lda (z80_ix),y		; y coordinate.
00137E  3  29 FE        	and #254		; make it even.
001380  3  91 68        	sta (z80_ix),y 		; reset it.
001382  3               numsp5:
001382  3  18           	clc 			; look down 16 pixels.
001383  3  69 10        	adc #16
001385  3  8D 3F 03     	sta dispy		; coords in dispx,dispy.
001388  3  4C A0 13     	jmp laddv
00138B  3               
00138B  3               ;------------------------------------------
00138B  3               ; Ladder up check.
00138B  3               ;
00138B  3               ; Input:
00138B  3               ;  IX = sprite pointer
00138B  3               ;
00138B  3               ; Output:
00138B  3               ;  A  = 0 is ok, A <>0 is not ok
00138B  3               ;------------------------------------------
00138B  3               
00138B  3               laddu:
00138B  3  A0 09        	ldy #9
00138D  3  B1 68        	lda (z80_ix),y		; x coordinate.
00138F  3  8D 3E 03     	sta dispx
001392  3               
001392  3  A0 08        	ldy #8
001394  3  B1 68        	lda (z80_ix),y		; y coordinate.
001396  3  29 FE        	and #254 		; make it even.
001398  3  91 68        	sta (z80_ix),y		; reset it.
00139A  3               numsp6:
00139A  3  18           	clc 			; look 2 pixels above feet.
00139B  3  69 0E        	adc #14
00139D  3  8D 3F 03     	sta dispy		; coords in dispx,dispy.
0013A0  3               laddv:
0013A0  3  20 85 15     	jsr tstbl 		; get map address.
0013A3  3  20 BA 14     	jsr ldchk 		; standard ladder check.
0013A6  3  F0 01        	beq :+
0013A8  3  60           	rts 			; no way through.
0013A9  3               :
0013A9  3  E6 86        	inc bufaddr 		; look right one cell.
0013AB  3  D0 02        	bne :+
0013AD  3  E6 87        	inc bufaddr+1
0013AF  3               :
0013AF  3  20 BA 14     	jsr ldchk 		; do the check.
0013B2  3  F0 01        	beq :+
0013B4  3  60           	rts 			; impassable.
0013B5  3               :
0013B5  3  AD 3E 03     	lda dispx 		; y coordinate.
0013B8  3  29 07        	and #7 			; position straddling block cells.
0013BA  3  D0 01        	bne :+
0013BC  3  60           	rts 			; no more checks needed.
0013BD  3               :
0013BD  3  E6 86        	inc bufaddr 		; look to third cell.
0013BF  3  D0 02        	bne :+
0013C1  3  E6 87        	inc bufaddr+1
0013C3  3               :
0013C3  3  20 BA 14     	jsr ldchk 		; do the check.
0013C6  3  60           	rts  			; return with zero flag set accordingly.
0013C7  3               
0013C7  3               ;---------------------------------------------------------
0013C7  3               ; Can go up check.
0013C7  3               ;
0013C7  3               ; Input:
0013C7  3               ;  IX = sprite pointer
0013C7  3               ;
0013C7  3               ; Output:
0013C7  3               ;  A  = 0 is ok, A <>0 is not ok
0013C7  3               ;---------------------------------------------------------
0013C7  3               
0013C7  3               cangu:
0013C7  3  A0 09        	ldy #9
0013C9  3  B1 68        	lda (z80_ix),y		; x coordinate.
0013CB  3  8D 3E 03     	sta dispx
0013CE  3  A0 08        	ldy #8
0013D0  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0013D2  3  38           	sec
0013D3  3  E9 02        	sbc #2
0013D5  3  8D 3F 03     	sta dispy		; coords in dispx,dispy.
0013D8  3  20 85 15     	jsr tstbl 		; get map address.
0013DB  3  20 84 14     	jsr lrchk 		; standard left/right check.
0013DE  3  F0 01        	beq :+
0013E0  3  60           	rts			; no way through.
0013E1  3               :
0013E1  3  E6 86        	inc bufaddr		; look right one cell.
0013E3  3  D0 02        	bne :+
0013E5  3  E6 87        	inc bufaddr+1
0013E7  3               :
0013E7  3  20 84 14     	jsr lrchk 		; do the check.
0013EA  3  F0 01        	beq :+
0013EC  3  60           	rts			; impassable.
0013ED  3               :
0013ED  3  AD 3E 03     	lda dispx		; x coordinate.
0013F0  3  29 07        	and #7			; position straddling block cells.
0013F2  3  D0 01        	bne :+
0013F4  3  60           	rts			; no more checks needed.
0013F5  3               :
0013F5  3  E6 86        	inc bufaddr		; look to third cell.
0013F7  3  D0 02        	bne :+
0013F9  3  E6 87        	inc bufaddr+1
0013FB  3               :
0013FB  3  20 84 14     	jsr lrchk		; do the check.
0013FE  3  60           	rts 			; return with zero flag set accordingly.
0013FF  3               
0013FF  3               ;---------------------------------------------------------
0013FF  3               ; Can go down check.
0013FF  3               ;
0013FF  3               ; Input:
0013FF  3               ;  IX = sprite pointer
0013FF  3               ;
0013FF  3               ; Output:
0013FF  3               ;  A  = 0 is ok, A <>0 is not ok
0013FF  3               ;---------------------------------------------------------
0013FF  3               
0013FF  3               cangd:
0013FF  3  A0 09        	ldy #9
001401  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001403  3  8D 3E 03     	sta dispx
001406  3  A0 08        	ldy #8
001408  3  B1 68        	lda (z80_ix),y		; y coordinate.
00140A  3               numsp3:
00140A  3  18           	clc
00140B  3  69 10        	adc #16 		; look down 16 pixels.
00140D  3  8D 3F 03     	sta dispy		; coords in dispx,dispy.
001410  3  20 85 15     	jsr tstbl 		; get map address.
001413  3  20 99 14     	jsr plchk 		; block, platform check.
001416  3  F0 01        	beq :+
001418  3  60           	rts			; no way through.
001419  3               :
001419  3  E6 86        	inc bufaddr		; look right one cell.
00141B  3  D0 02        	bne :+
00141D  3  E6 87        	inc bufaddr+1
00141F  3               :
00141F  3  20 99 14     	jsr plchk		; block, platform check.
001422  3  F0 01        	beq :+
001424  3  60           	rts			; impassable.
001425  3               :
001425  3  AD 3E 03     	lda dispx		; x coordinate.
001428  3  29 07        	and #7			; position straddling block cells.
00142A  3  D0 01        	bne :+
00142C  3  60           	rts			; no more checks needed.
00142D  3               :
00142D  3  E6 86        	inc bufaddr		; look to third cell.
00142F  3  D0 02        	bne :+
001431  3  E6 87        	inc bufaddr+1
001433  3               :
001433  3  20 99 14     	jsr plchk		; block, platform check.
001436  3  60           	rts			; return with zero flag set accordingly.
001437  3               
001437  3               ;---------------------------------------------------------
001437  3               ; Can go left check.
001437  3               ;
001437  3               ; Input:
001437  3               ;  IX = sprite pointer
001437  3               ;
001437  3               ; Output:
001437  3               ;  A  = 0 is ok, A <>0 is not ok
001437  3               ;---------------------------------------------------------
001437  3               
001437  3               cangl:
001437  3  A0 08        	ldy #8
001439  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00143B  3  8D 3F 03     	sta dispy
00143E  3  A0 09        	ldy #9
001440  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001442  3  38           	sec
001443  3  E9 02        	sbc #2			; look left 2 pixels.
001445  3  8D 3E 03     	sta dispx		; coords in dispx,dispy.
001448  3  4C 5C 14     	jmp cangh		; test if we can go there.
00144B  3               
00144B  3               ;---------------------------------------------------------
00144B  3               ; Can go right check.
00144B  3               ;
00144B  3               ; Input:
00144B  3               ;  IX = sprite pointer
00144B  3               ;
00144B  3               ; Output:
00144B  3               ;  A  = 0 is ok, A <>0 is not ok
00144B  3               ;---------------------------------------------------------
00144B  3               
00144B  3               cangr:
00144B  3  A0 08        	ldy #8
00144D  3  B1 68        	lda (z80_ix),y		; y coordinate.
00144F  3  8D 3F 03     	sta dispy
001452  3  A0 09        	ldy #9
001454  3  B1 68        	lda (z80_ix),y		; x coordinate.
001456  3  18           	clc
001457  3  69 10        	adc #16			; look right 16 pixels.
001459  3  8D 3E 03     	sta dispx		; coords in dispx,dispy.
00145C  3               cangh:
00145C  3               cangh2:
00145C  3  A9 03        	lda #3			; default rows to write.
00145E  3  85 63        	sta z80_b
001460  3  AD 3F 03     	lda dispy		; y position.
001463  3  29 07        	and #7			; does x straddle cells?
001465  3  D0 02        	bne cangh0		; yes, loop counter is good.
001467  3  C6 63        	dec z80_b		; one less row to write.
001469  3               cangh0:
001469  3  20 85 15     	jsr tstbl		; get map address.
00146C  3               cangh1:
00146C  3  20 84 14     	jsr lrchk		; standard left/right check.
00146F  3  F0 01        	beq :+
001471  3  60           	rts			; no way through.
001472  3               :
001472  3  48           	pha
001473  3  18           	clc
001474  3  A5 86        	lda bufaddr
001476  3  69 20        	adc #32			; look down.
001478  3  85 86        	sta bufaddr
00147A  3  90 02        	bcc :+
00147C  3  E6 87        	inc bufaddr+1
00147E  3               :
00147E  3  68           	pla
00147F  3               
00147F  3  C6 63        	dec z80_b
001481  3  D0 E9        	bne cangh1
001483  3  60           	rts
001484  3               
001484  3               ;-------------------------------------
001484  3               ; Check left/right movement is okay.
001484  3               ;
001484  3               ; Input:
001484  3               ;  bufaddr = MAP + x/8 + y/8*32
001484  3               ;
001484  3               ; Output:
001484  3               ;  A  = 0 is ok, A <>0 is not ok
001484  3               ;-------------------------------------
001484  3               
001484  3               lrchk:
001484  3  A0 00        	ldy #0
001486  3  B1 86        	lda (bufaddr),y		; fetch map cell.
001488  3  C9 02        	cmp #WALL 		; is it passable?
00148A  3  F0 0A        	beq lrchkx		; no.
00148C  3               
00148C  3  C9 04        	cmp #FODDER		; fodder has to be dug.
00148E  3  F0 06        	beq lrchkx		; not passable.
001490  3  A9 00        	lda #0
001492  3  60           	rts
001493  3               
001493  3               ;--------------------------------------------------------------
001493  3               ; Called by mmenu
001493  3               ;--------------------------------------------------------------
001493  3               
001493  3               always:
001493  3  A9 FF        	lda #255		; report it as okay.
001495  3  60           	rts
001496  3               
001496  3               lrchkx:
001496  3  A9 01        	lda #1 			; reset all bits.
001498  3  60           	rts
001499  3               
001499  3               
001499  3               ;--------------------------------------------------------------
001499  3               ; Check platform or solid item is not in way.
001499  3               ;
001499  3               ; Input:
001499  3               ;  bufaddr = MAP + x/8 + y/8*32
001499  3               ;
001499  3               ; Output:
001499  3               ;  A  = 0 is ok, A <>0 is not ok
001499  3               ;--------------------------------------------------------------
001499  3               
001499  3               plchk:
001499  3  A0 00        	ldy #0
00149B  3  B1 86        	lda (bufaddr),y 	; fetch map cell.
00149D  3  C9 02        	cmp #WALL 		; is it passable?
00149F  3  F0 F5        	beq lrchkx		; no.
0014A1  3               
0014A1  3  C9 04        	cmp #FODDER		; fodder has to be dug.
0014A3  3  F0 F1        	beq lrchkx		; not passable.
0014A5  3               
0014A5  3  C9 01        	cmp #PLATFM		; platform is solid.
0014A7  3  F0 07        	beq plchkx		; not passable.
0014A9  3               
0014A9  3  C9 03        	cmp #LADDER		; is it a ladder?
0014AB  3  F0 E9        	beq lrchkx		; on ladder, deny movement.
0014AD  3               plchk0:
0014AD  3  A9 00        	lda #0			; report as ok
0014AF  3  60           	rts
0014B0  3               plchkx:
0014B0  3  AD 3F 03     	lda dispy		; x coordinate.
0014B3  3  29 07        	and #7			; position straddling blocks.
0014B5  3  F0 DF        	beq lrchkx		; on platform, deny movement.
0014B7  3  4C AD 14     	jmp plchk0
0014BA  3               
0014BA  3               ;--------------------------------------------------------------
0014BA  3               ; Check ladder is available.
0014BA  3               ;
0014BA  3               ; Input:
0014BA  3               ;  bufaddr = MAP + x/8 + y/8*32
0014BA  3               ;
0014BA  3               ; Output:
0014BA  3               ;  A  = 0 is ok, A <>0 is not ok
0014BA  3               ;--------------------------------------------------------------
0014BA  3               
0014BA  3               ldchk:
0014BA  3  A0 00        	ldy #0
0014BC  3  B1 86        	lda (bufaddr),y 	; fetch cell.
0014BE  3  C9 03        	cmp #LADDER 		; is it a ladder?
0014C0  3  F0 03        	beq ldchk1
0014C2  3  A9 01        	lda #1
0014C4  3  60           	rts  			; return with zero flag set accordingly.
0014C5  3               ldchk1:
0014C5  3  A9 00        	lda #0
0014C7  3  60           	rts
0014C8  3               
0014C8  3               ;--------------------------------------------------------------
0014C8  3               ; Touched deadly block check.
0014C8  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
0014C8  3               ;
0014C8  3               ; Input:
0014C8  3               ;  IX = sprite address
0014C8  3               ;
0014C8  3               ; Output:
0014C8  3               ;  A  = 0 is ok, A=5 is not ok
0014C8  3               ;--------------------------------------------------------------
0014C8  3               
0014C8  3               tded:
0014C8  3  A0 08        	ldy #8
0014CA  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0014CC  3  8D 3F 03     	sta dispy
0014CF  3  C8           	iny
0014D0  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0014D2  3  8D 3E 03     	sta dispx		; coords in dispx,dispy.
0014D5  3  20 85 15     	jsr tstbl		; get map address.
0014D8  3               
0014D8  3  A2 1F        	ldx #31			; default distance to next line down.
0014DA  3  86 64        	stx z80_e
0014DC  3  C5 63        	cmp z80_b		; is this the required block?
0014DE  3  D0 01        	bne :+
0014E0  3  60           	rts			; yes.
0014E1  3               :
0014E1  3  E6 86        	inc bufaddr 		; next cell.
0014E3  3  D0 02        	bne :+
0014E5  3  E6 87        	inc bufaddr+1
0014E7  3               :
0014E7  3  A0 00        	ldy #0
0014E9  3  B1 86        	lda (bufaddr),y		; fetch type.
0014EB  3  C5 63        	cmp z80_b 		; is this deadly/custom?
0014ED  3  D0 01        	bne :+
0014EF  3  60           	rts			; yes.
0014F0  3               :
0014F0  3  AD 3E 03     	lda dispx		; horizontal position.
0014F3  3  85 62        	sta z80_c 		; store column in c register.
0014F5  3  29 07        	and #7			; is it straddling cells?
0014F7  3  D0 03        	bne :+
0014F9  3  4C 0D 15     	jmp tded0		; no.
0014FC  3               :
0014FC  3  E6 86        	inc bufaddr 		; last cell.
0014FE  3  D0 02        	bne :+
001500  3  E6 87        	inc bufaddr+1
001502  3               :
001502  3  A0 00        	ldy #0
001504  3  B1 86        	lda (bufaddr),y 	; fetch type.
001506  3  C5 63        	cmp z80_b		; is this the block?
001508  3  D0 01        	bne :+
00150A  3  60           	rts			; yes.
00150B  3               :
00150B  3  C6 64        	dec z80_e		; one less cell to next row down.
00150D  3               tded0:
00150D  3  18           	clc 			; point to next row.
00150E  3  A5 86        	lda bufaddr
001510  3  65 64        	adc z80_e
001512  3  85 86        	sta bufaddr
001514  3  90 02        	bcc :+
001516  3  E6 87        	inc bufaddr+1
001518  3               :
001518  3  A0 00        	ldy #0
00151A  3  B1 86        	lda (bufaddr),y		; fetch left cell block.
00151C  3  C5 63        	cmp z80_b		; is this fatal?
00151E  3  D0 01        	bne :+
001520  3  60           	rts			; yes.
001521  3               :
001521  3  E6 86        	inc bufaddr 		; next cell.
001523  3  D0 02        	bne :+
001525  3  E6 87        	inc bufaddr+1
001527  3               :
001527  3  A0 00        	ldy #0
001529  3  B1 86        	lda (bufaddr),y 	; fetch type.
00152B  3  C5 63        	cmp z80_b		; is this fatal?
00152D  3  D0 01        	bne :+
00152F  3  60           	rts			; yes.
001530  3               :
001530  3  A5 62        	lda z80_c		; horizontal position.
001532  3  29 07        	and #7			; is it straddling cells?
001534  3  D0 03        	bne :+
001536  3  4C 48 15     	jmp tded1 		; no.
001539  3               :
001539  3  E6 86        	inc bufaddr		; last cell.
00153B  3  D0 02        	bne :+
00153D  3  E6 87        	inc bufaddr+1
00153F  3               :
00153F  3  A0 00        	ldy #0
001541  3  B1 86        	lda (bufaddr),y		; fetch type.
001543  3  C5 63        	cmp z80_b		; is this fatal?
001545  3  D0 01        	bne :+
001547  3  60           	rts			; yes.
001548  3               :
001548  3               tded1:
001548  3  AD 3F 03     	lda dispy		; vertical position.
00154B  3  29 07        	and #7 			; is it straddling cells?
00154D  3  D0 01        	bne :+
00154F  3  60           	rts			; no, job done.
001550  3               :
001550  3  18           	clc			; point to next row.
001551  3  A5 86        	lda bufaddr
001553  3  65 64        	adc z80_e
001555  3  85 86        	sta bufaddr
001557  3  90 02        	bcc :+
001559  3  E6 67        	inc z80_h
00155B  3               :
00155B  3  A0 00        	ldy #0
00155D  3  B1 86        	lda (bufaddr),y 	; fetch left cell block.
00155F  3  C5 63        	cmp z80_b		; is this fatal?
001561  3  D0 01        	bne :+
001563  3  60           	rts			; yes.
001564  3               :
001564  3  E6 86        	inc bufaddr		; next cell.
001566  3  D0 02        	bne :+
001568  3  E6 87        	inc bufaddr+1
00156A  3               :
00156A  3  A0 00        	ldy #0
00156C  3  B1 86        	lda (bufaddr),y 	; fetch type.
00156E  3  C5 63        	cmp z80_b		; is this fatal?
001570  3  D0 01        	bne :+
001572  3  60           	rts			; yes.
001573  3               :
001573  3  A5 62        	lda z80_c		; horizontal position.
001575  3  29 07        	and #7			; is it straddling cells?
001577  3  D0 01        	bne :+
001579  3  60           	rts			; no.
00157A  3               :
00157A  3  E6 86        	inc bufaddr		; last cell.
00157C  3  D0 02        	bne :+
00157E  3  E6 87        	inc bufaddr+1
001580  3               :
001580  3  A0 00        	ldy #0
001582  3  B1 86        	lda (bufaddr),y		; fetch final type.
001584  3  60           	rts 			; return with final type in accumulator.
001585  3               
001585  3               ;---------------------------------------------------
001585  3               ; Fetch block type at (dispx, dispy).
001585  3               ;
001585  3               ; Output:
001585  3               ;  A = block type
001585  3               ;---------------------------------------------------
001585  3               
001585  3               tstbl:
001585  3  AD 3F 03     	lda dispy 		; fetch y coord.
001588  3  4A           	lsr a			; bufaddr = y/8
001589  3  4A           	lsr a
00158A  3  4A           	lsr a
00158B  3  85 86        	sta bufaddr
00158D  3  A9 00        	lda #0
00158F  3  85 87        	sta bufaddr+1
001591  3               
001591  3  06 86        	asl bufaddr  		; bufaddr = y/8 * 32
001593  3  26 87        	rol bufaddr+1
001595  3  06 86        	asl bufaddr
001597  3  26 87        	rol bufaddr+1
001599  3  06 86        	asl bufaddr
00159B  3  26 87        	rol bufaddr+1
00159D  3  06 86        	asl bufaddr
00159F  3  26 87        	rol bufaddr+1
0015A1  3  06 86        	asl bufaddr
0015A3  3  26 87        	rol bufaddr+1
0015A5  3               
0015A5  3  AD 3E 03     	lda dispx		; x/8
0015A8  3  4A           	lsr a
0015A9  3  4A           	lsr a
0015AA  3  4A           	lsr a
0015AB  3               
0015AB  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
0015AC  3  65 86        	adc bufaddr
0015AE  3  69 5E        	adc #<MAP
0015B0  3  85 86        	sta bufaddr
0015B2  3  A5 87        	lda bufaddr+1
0015B4  3  69 21        	adc #>MAP
0015B6  3  85 87        	sta bufaddr+1
0015B8  3               
0015B8  3  A0 00        	ldy #0
0015BA  3  B1 86        	lda (bufaddr),y 	; fetch byte there.
0015BC  3  60           	rts
0015BD  3               
0015BD  3               
0015BD  3               ;-------------------------------------------------------------------
0015BD  3               ; Jump - if we can.
0015BD  3               ; Requires initial speed to be set up in accumulator prior to call.
0015BD  3               ;
0015BD  3               ; Input:
0015BD  3               ;  IX = sprite address
0015BD  3               ;-------------------------------------------------------------------
0015BD  3               
0015BD  3               jump:
0015BD  3  A0 0D        	ldy #13
0015BF  3  B1 68        	lda (z80_ix),y		; jump table low.
0015C1  3  A0 0E        	ldy #14
0015C3  3  11 68        	ora (z80_ix),y		; jump table high.
0015C5  3  F0 01        	beq :+
0015C7  3  60           	rts			; already in the air.
0015C8  3               :
0015C8  3  A9 15        	lda #>jtab
0015CA  3  A0 0E        	ldy #14
0015CC  3  91 68        	sta (z80_ix),y		; set jump high.
0015CE  3  A9 D5        	lda #<jtab		; jump table start.
0015D0  3  A0 0D        	ldy #13
0015D2  3  91 68        	sta (z80_ix),y		; set jump low.
0015D4  3  60           	rts
0015D5  3               
0015D5  3               ; Jump table.
0015D5  3               
0015D5  3               jtab:
0015D5  3  F8 FA FC     	.byte 248,250,252
0015D8  3  FE FE FF     	.byte 254,254,255
0015DB  3  FF FF 00 00  	.byte 255,255,0,0
0015DF  3  00 01 01 01  	.byte 0,1,1,1,2,2
0015E3  3  02 02        
0015E5  3  04 06 08 08  	.byte 4,6,8,8,8,99
0015E9  3  08 63        
0015EB  3               
0015EB  3               ;------------------------------------------------
0015EB  3               ; Random numbers code.
0015EB  3               ; Pseudo-random number generator, 8-bit.
0015EB  3               ;
0015EB  3               ; Output:
0015EB  3               ;  RND = random number
0015EB  3               ;------------------------------------------------
0015EB  3               
0015EB  3               random:
0015EB  3  AD 0A 10     	lda seed		; get last random number.
0015EE  3  0A           	asl a
0015EF  3  0A           	asl a
0015F0  3  18           	clc
0015F1  3  6D 0A 10     	adc seed
0015F4  3  18           	clc
0015F5  3  69 45        	adc #$45
0015F7  3  8D 0A 10     	sta seed		; store new seed.
0015FA  3  8D 36 03     	sta varrnd		; return number in variable.
0015FD  3  60           	rts
0015FE  3               
0015FE  3               ;--------------------------------------------------------
0015FE  3               ; Keys
0015FE  3               ;
0015FE  3               ; Out: joyval=x65FUDLR (bit set if key pressed)
0015FE  3               ;             ||||||||
0015FE  3               ;             |||||||+> Right    KEY 0  - X
0015FE  3               ;             ||||||+-> Left     KEY 1  - Z
0015FE  3               ;             |||||+--> Down     KEY 2  - .
0015FE  3               ;             ||||+---> Up       KEY 3  - ;
0015FE  3               ;             |||+----> Fire1    KEY 4  - SPC
0015FE  3               ;             ||+-----> Fire2    KEY 5  - Q
0015FE  3               ;             |+------> Fire3    KEY 6  - P
0015FE  3               ;             +-------> Not used
0015FE  3               ;
0015FE  3               ;                       Option1  KEY 7  - 1
0015FE  3               ;                       Option2  KEY 8  - 2
0015FE  3               ;                       Option3  KEY 9  - 3
0015FE  3               ;                       Option4  KEY 10 - 4
0015FE  3               ;--------------------------------------------------------
0015FE  3               
0015FE  3               ;              X   Z   .   ;  SPC  Q   P
0015FE  3  35 15 93 22  keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
001602  3  90 04 14     
001605  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
001609  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
00160D  3  00 04 14     
001610  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
001614  3               
001614  3               ;--------------------------------------------------------
001614  3               ; Keyboard test routine.
001614  3               ;
001614  3               ; Input:
001614  3               ;  A = key to read, high nibble=row and low nibble=col
001614  3               ;
001614  3               ; Output:
001614  3               ;  carry set = key pressed
001614  3               ;  carry clr = key not pressed
001614  3               ;--------------------------------------------------------
001614  3               
001614  3               ktest:
001614  3  85 61        	sta z80_a		; save key
001616  3               
001616  3  4A           	lsr a			; set row
001617  3  4A           	lsr a
001618  3  4A           	lsr a
001619  3  4A           	lsr a
00161A  3  09 F0        	ora #ScrMode		; don't flip screenmode
00161C  3  8D 00 B0     	sta ScrSelAddr
00161F  3               
00161F  3  A5 61        	lda z80_a
001621  3  29 0F        	and #$0f
001623  3  AA           	tax
001624  3  AD 01 B0     	lda $b001		; read column
001627  3               
001627  3  3D 30 16     	and keymask,x		; check key pressed
00162A  3  F0 02        	beq no_press
00162C  3  38           	sec			; key pressed
00162D  3  60           	rts
00162E  3               no_press:
00162E  3  18           	clc			; key not pressed
00162F  3  60           	rts
001630  3               
001630  3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
001634  3  10 20        
001636  3               
001636  3               ;-------------------------------------------------------
001636  3               ; Joystick and keyboard reading routines.
001636  3               ;
001636  3               ; contrl = 0, Keyboard
001636  3               ;          1, JoyKeyb
001636  3               ;          2, JoyMMC
001636  3               ;-------------------------------------------------------
001636  3               
001636  3               joykey:
001636  3  AD 0D 03     	lda contrl 		; control flag.
001639  3  C9 01        	cmp #1
00163B  3  D0 03        	bne :+
00163D  3  4C 5B 16     	jmp joyjoy 		; read keyboard joystick
001640  3               :
001640  3  C9 02        	cmp #2
001642  3  D0 03        	bne :+
001644  3  4C 72 16     	jmp joysin 		; read MMC joystick.
001647  3               :
001647  3               ; Keyboard controls.
001647  3               
001647  3  A9 00        	lda #0		 	; zero reading.
001649  3  85 64        	sta z80_e
00164B  3               
00164B  3  A0 06        	ldy #6	 		; address of last key.
00164D  3               joyke0:
00164D  3  B9 FE 15     	lda keys,y 		; get key from table.
001650  3  20 14 16     	jsr ktest		; being pressed?
001653  3  26 64        	rol z80_e 		; rotate into reading.
001655  3               
001655  3  88           	dey		 	; next key.
001656  3  10 F5        	bpl joyke0 		; repeat for all keys.
001658  3  4C 6C 16     	jmp joyjo1 		; store the value.
00165B  3               
00165B  3               ; Keyboard joystick controls.
00165B  3               
00165B  3               joyjoy:
00165B  3  A9 00        	lda #0		 	; zero reading.
00165D  3  85 64        	sta z80_e
00165F  3               
00165F  3  A0 06        	ldy #6	 		; address of last key.
001661  3               joyjo3:
001661  3  B9 09 16     	lda jkeys,y 		; get key from table.
001664  3  20 14 16     	jsr ktest		; being pressed?
001667  3  26 64        	rol z80_e 		; rotate into reading.
001669  3               
001669  3  88           	dey		 	; next key.
00166A  3  10 F5        	bpl joyjo3 		; repeat for all keys.
00166C  3               joyjo1:
00166C  3  A5 64        	lda z80_e 		; copy e register to accumulator.
00166E  3               joyjo2:
00166E  3  8D 0E 03     	sta joyval		; remember value.
001671  3  60           	rts
001672  3               
001672  3               
001672  3               ; AtoMMC joystick controls.
001672  3               
001672  3               joysin:
001672  3  60           	rts
001673  3               
001673  3               ;---------------------------------------------------------------
001673  3               ; Getkey in column,row format
001673  3               ;
001673  3               ; Output:
001673  3               ;  A = high nibble=row and low nibble=column key in matrix
001673  3               ;---------------------------------------------------------------
001673  3               
001673  3               kget:
001673  3  A9 F0        	lda #ScrMode		; high-mono mode.
001675  3  8D 00 B0     	sta ScrSelAddr		; screen select port
001678  3  8E D3 12     	stx xtmp
00167B  3               kget4:
00167B  3  20 71 FE     	jsr READKEY		; read key until pressed
00167E  3  C0 FF        	cpy #255
001680  3  F0 F9        	beq kget4
001682  3  8D 3E 13     	sta rcol		; save column
001685  3  8E 3F 13     	stx rrow		; determine row
001688  3               kget3:
001688  3  20 71 FE     	jsr READKEY		; wait until key released
00168B  3  C0 FF        	cpy #255
00168D  3  D0 F9        	bne kget3
00168F  3               
00168F  3  38           	sec			; calculate matrix row
001690  3  A9 0A        	lda #10
001692  3  ED 3F 13     	sbc rrow
001695  3  0A           	asl a
001696  3  0A           	asl a
001697  3  0A           	asl a
001698  3  0A           	asl a
001699  3  8D 3F 13     	sta rrow
00169C  3               
00169C  3  A0 FF        	ldy #255		; find column mask
00169E  3               kget1:
00169E  3  C8           	iny
00169F  3  B9 30 16     	lda keymask,y
0016A2  3  CD 3E 13     	cmp rcol
0016A5  3  F0 03        	beq kget2
0016A7  3  4C 9E 16     	jmp kget1
0016AA  3               kget2:
0016AA  3  98           	tya			; determine column
0016AB  3  18           	clc
0016AC  3  6D 3F 13     	adc rrow
0016AF  3  AE D3 12     	ldx xtmp
0016B2  3  60           	rts
0016B3  3               
0016B3  3               ;---------------------------------------------------------------
0016B3  3               ; Display message.
0016B3  3               ;
0016B3  3               ; Input:
0016B3  3               ;  A = message number
0016B3  3               ;---------------------------------------------------------------
0016B3  3               
0016B3  3               dmsg:
0016B3  3  AA           	tax
0016B4  3  A9 9E        	lda #<msgdat		; pointer to messages.
0016B6  3  85 66        	sta z80_l
0016B8  3  A9 2A        	lda #>msgdat
0016BA  3  85 67        	sta z80_h
0016BC  3  20 C6 17     	jsr getwrd		; get message number.
0016BF  3               dmsg3:
0016BF  3  20 AD 17     	jsr preprt		; pre-printing stuff.
0016C2  3  20 1F 10     	jsr checkx		; make sure we"re in a printable range.
0016C5  3  AD 09 17     	lda prtmod		; print mode.
0016C8  3  F0 03        	beq :+			; standard size?
0016CA  3  4C 0A 17     	jmp bmsg1		; no, double-height text.
0016CD  3               :
0016CD  3               dmsg0:
0016CD  3  A5 67        	lda z80_h		; store string pointer.
0016CF  3  48           	pha
0016D0  3  A5 66        	lda z80_l
0016D2  3  48           	pha
0016D3  3               
0016D3  3  A0 00        	ldy #0
0016D5  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
0016D7  3  29 7F        	and #127		; remove any end marker.
0016D9  3  C9 0D        	cmp #13
0016DB  3  D0 08        	bne :+
0016DD  3  A9 00        	lda #0
0016DF  3  8D 3E 03     	sta dispx
0016E2  3  4C EB 16     	jmp dmsg4 
0016E5  3  20 9F 11     :	jsr pchar		; display character.
0016E8  3  20 8C 17     	jsr nexpos 		; display position.
0016EB  3               dmsg4:
0016EB  3  D0 03        	bne dmsg2		; not on a new line.
0016ED  3  20 9C 17     	jsr nexlin		; next line down.
0016F0  3               dmsg2:
0016F0  3  68           	pla			; retrieve string pointer
0016F1  3  85 66        	sta z80_l
0016F3  3  68           	pla
0016F4  3  85 67        	sta z80_h
0016F6  3               
0016F6  3  A0 00        	ldy #0
0016F8  3  B1 66        	lda (z80_hl),y		; fetch last character.
0016FA  3  0A           	asl a  			; was it the end?
0016FB  3  90 03        	bcc :+
0016FD  3  4C 67 10     	jmp dscor2		; yes, job done.
001700  3               :
001700  3  E6 66        	inc z80_l		; next character to display.
001702  3  D0 02        	bne :+
001704  3  E6 67        	inc z80_h
001706  3               :
001706  3  4C CD 16     	jmp dmsg0
001709  3               
001709  3  00           prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
00170A  3               
00170A  3               ;----------------------------------------------------------
00170A  3               ; Display message in big text.
00170A  3               ;
00170A  3               ; Input:
00170A  3               ;  HL = string pointer
00170A  3               ;----------------------------------------------------------
00170A  3               
00170A  3               bmsg1:
00170A  3  A0 00        	ldy #0
00170C  3  B1 66        	lda (z80_hl),y 		; get character to display.
00170E  3  29 7F        	and #127		; only want 7 bits.
001710  3  20 23 17     	jsr bchar 		; display big char.
001713  3  A0 00        	ldy #0
001715  3  B1 66        	lda (z80_hl),y 		; look at last character.
001717  3  48           	pha
001718  3  E6 66        	inc z80_l 		; next character in list.
00171A  3  D0 02        	bne :+
00171C  3  E6 67        	inc z80_h
00171E  3               :
00171E  3  68           	pla
00171F  3  0A           	asl a  			; was terminator flag set?
001720  3  90 E8        	bcc bmsg1		; no, keep going.
001722  3               :
001722  3  60           	rts
001723  3               
001723  3               
001723  3               ;----------------------------------------------------------
001723  3               ; Big character display.
001723  3               ;
001723  3               ; Input:
001723  3               ;  A = character
001723  3               ;----------------------------------------------------------
001723  3               
001723  3               bchar:
001723  3  85 64        	sta z80_e		; save char in lb
001725  3  A9 00        	lda #0
001727  3  85 65        	sta z80_d		; reset hb
001729  3               
001729  3  06 64        	asl z80_e 		; multiply char by 8.
00172B  3  26 65        	rol z80_d
00172D  3  06 64        	asl z80_e
00172F  3  26 65        	rol z80_d
001731  3  06 64        	asl z80_e
001733  3  26 65        	rol z80_d		; de = a*8
001735  3               
001735  3  18           	clc			; de = FontPtr + a*8
001736  3  A5 64        	lda z80_e
001738  3  6D 28 27     	adc FontPtr 		; address of font.
00173B  3  85 64        	sta z80_e
00173D  3  A5 65        	lda z80_d
00173F  3  6D 29 27     	adc FontPtr+1
001742  3  85 65        	sta z80_d
001744  3               
001744  3  20 64 11     	jsr gprad 		; get screen address.
001747  3               
001747  3  A2 00        	ldx #0			; height of character in font.
001749  3               bchar0:
001749  3  A0 00        	ldy #0
00174B  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
00174D  3               
00174D  3  49 FF        	eor #TxtInvert		; Invert
00174F  3               
00174F  3  91 80        	sta (scraddr),y
001751  3  48           	pha
001752  3  20 71 1A     	jsr nline 		; next line down.
001755  3  68           	pla
001756  3  91 80        	sta (scraddr),y
001758  3  20 71 1A     	jsr nline 		; next line down.
00175B  3               
00175B  3  18           	clc
00175C  3  E6 64        	inc z80_e 		; next line of font.
00175E  3  D0 02        	bne :+
001760  3  E6 65        	inc z80_d
001762  3               :
001762  3  E8           	inx
001763  3  E0 08        	cpx #8
001765  3  D0 E2        	bne bchar0
001767  3               	
001767  3  20 8C 17     	jsr nexpos		; display position.
00176A  3  D0 03        	bne bchar2 		; not on a new line.
00176C  3               bchar3:
00176C  3  20 9C 17     	jsr nexlin 		; next line check.
00176F  3               bchar2:
00176F  3  4C 67 10     	jmp dscor2		; tidy up line and column variables.
001772  3               
001772  3               
001772  3               ;-------------------------------------------------
001772  3               ; Display a character.
001772  3               ;
001772  3               ; Input:
001772  3               ;  A = character
001772  3               ;-------------------------------------------------
001772  3               
001772  3               achar:
001772  3  85 63        	sta z80_b 		; copy to b.
001774  3  20 AD 17     	jsr preprt 		; get ready to print.
001777  3  A5 63        	lda z80_b		; character in accumulator.
001779  3  AE 09 17     	ldx prtmod 		; print mode.
00177C  3  F0 03        	beq :+
00177E  3  4C 23 17     	jmp bchar 		; no, double-height text.
001781  3               :
001781  3  20 9F 11     	jsr pchar 		; display character.
001784  3  20 8C 17     	jsr nexpos 		; display position.
001787  3  F0 E3        	beq bchar3		; next line down.
001789  3  4C 6F 17     	jmp bchar2 		; tidy up.
00178C  3               
00178C  3               
00178C  3               ;-------------------------------------------------
00178C  3               ; Get next print column position.
00178C  3               ;-------------------------------------------------
00178C  3               
00178C  3               nexpos:
00178C  3  EE 3E 03     	inc dispx		; move along one position.
00178F  3  AD 3E 03     	lda dispx 		; get coordinate.
001792  3  C9 20        	cmp #32
001794  3  90 05        	bcc :+
001796  3               ;	inc dispy
001796  3  A9 00        	lda #0			; reached edge of screen?
001798  3  8D 3E 03     	sta dispx		; set new position.
00179B  3               :
00179B  3  60           	rts 			; return with status in zero flag.
00179C  3               
00179C  3               ;-------------------------------------------------
00179C  3               ; Get next print line position.
00179C  3               ;-------------------------------------------------
00179C  3               
00179C  3               nexlin:
00179C  3  EE 3F 03     	inc dispy 		; newline.
00179F  3  AD 3F 03     	lda dispy		; vertical position.
0017A2  3  C9 18        	cmp #24			; past screen edge?
0017A4  3  B0 01        	bcs :+
0017A6  3  60           	rts			; no, still okay.
0017A7  3               :
0017A7  3  A9 00        	lda #0			; restart at top.
0017A9  3  8D 3F 03     	sta dispy
0017AC  3  60           	rts
0017AD  3               
0017AD  3               ;--------------------------------------------------------
0017AD  3               ; Pre-print preliminaries.
0017AD  3               ;--------------------------------------------------------
0017AD  3               
0017AD  3               preprt:
0017AD  3  AD 28 27     	lda FontPtr		; font pointer.
0017B0  3  8D 1D 10     	sta grbase		; set up graphics base.
0017B3  3  AD 29 27     	lda FontPtr+1
0017B6  3  8D 1E 10     	sta grbase+1
0017B9  3               prescr:
0017B9  3  AD 33 03     	lda charx 		; display coordinates.
0017BC  3  8D 3E 03     	sta dispx		; set up general coordinates.
0017BF  3  AD 34 03     	lda chary
0017C2  3  8D 3F 03     	sta dispy
0017C5  3  60           	rts
0017C6  3               
0017C6  3               ;--------------------------------------------------------------
0017C6  3               ; Get messagenr x in hl
0017C6  3               ;
0017C6  3               ; Input:
0017C6  3               ;  HL = pointer to message list
0017C6  3               ;  X  = message number.
0017C6  3               ;--------------------------------------------------------------
0017C6  3               
0017C6  3               getwrd:
0017C6  3  E0 00        	cpx #0
0017C8  3  D0 01        	bne:+ 			; first word in list?
0017CA  3  60           	rts 			; yep, don't search.
0017CB  3               :
0017CB  3  A0 00        	ldy #0
0017CD  3               getwd0:
0017CD  3  B1 66        	lda (z80_hl),y
0017CF  3  48           	pha
0017D0  3  E6 66        	inc z80_l
0017D2  3  D0 02        	bne :+
0017D4  3  E6 67        	inc z80_h
0017D6  3               :
0017D6  3  68           	pla
0017D7  3  C9 80        	cmp #128		; found end?
0017D9  3  30 F2        	bmi getwd0		; no, carry on.
0017DB  3  CA           	dex			; until we have right number.
0017DC  3  D0 EF        	bne getwd0
0017DE  3  60           	rts
0017DF  3               
0017DF  3               ;-----------------------------------------------------------
0017DF  3               ; Bubble sort.
0017DF  3               ;-----------------------------------------------------------
0017DF  3               
0017DF  3               bsort:
0017DF  3  A2 0B        	ldx #NUMSPR - 1		; sprites to swap.
0017E1  3               
0017E1  3  A9 7F        	lda #<sprtab 		; sprite table.
0017E3  3  85 68        	sta z80_x
0017E5  3  A9 20        	lda #>sprtab
0017E7  3  85 69        	sta z80_i
0017E9  3               bsort0:
0017E9  3  A0 00        	ldy #0
0017EB  3  B1 68        	lda (z80_ix),y 		; first sprite type.
0017ED  3  C9 FF        	cmp #255 		; is it switched off?
0017EF  3  F0 2F        	beq swemp		; yes, may need to switch another in here.
0017F1  3               
0017F1  3  A0 11        	ldy #TABSIZ
0017F3  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
0017F5  3  C9 FF        	cmp #255 		; is it enabled?
0017F7  3  F0 0A        	beq bsort2 		; no, nothing to swap.
0017F9  3               
0017F9  3  A0 14        	ldy #TABSIZ+3
0017FB  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
0017FD  3  A0 03        	ldy #3
0017FF  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
001801  3  B0 0F        	bcs bsort1		; next sprite is higher - may need to switch.
001803  3               bsort2:
001803  3  18           	clc
001804  3  A5 68        	lda z80_x
001806  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
001808  3  85 68        	sta z80_x
00180A  3  90 02        	bcc :+
00180C  3  E6 69        	inc z80_i
00180E  3               :
00180E  3  CA           	dex 
00180F  3  D0 D8        	bne bsort0		; repeat for remaining sprites.
001811  3  60           	rts
001812  3               bsort1:
001812  3  A0 11        	ldy #TABSIZ
001814  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
001816  3  C9 FF        	cmp #255		; is it enabled?
001818  3  F0 E9        	beq bsort2		; no, nothing to swap.
00181A  3  20 2E 18     	jsr swspr		; swap positions.
00181D  3  4C 03 18     	jmp bsort2
001820  3               swemp:
001820  3  A0 11        	ldy #TABSIZ
001822  3  B1 68        	lda (z80_ix),y		; next table entry.
001824  3  C9 FF        	cmp #255		; is that one on?
001826  3  F0 DB        	beq bsort2		; no, nothing to swap.
001828  3  20 2E 18     	jsr swspr		; swap positions.
00182B  3  4C 03 18     	jmp bsort2
00182E  3               
00182E  3               ; Swap sprites.
00182E  3               
00182E  3               swspr:
00182E  3  A5 68        	lda z80_x		; table address 
001830  3  85 64        	sta z80_e		; copy to de pair.
001832  3  85 66        	sta z80_l		; copy to hl pair.
001834  3  A5 69        	lda z80_i
001836  3  85 67        	sta z80_h
001838  3  85 65        	sta z80_d
00183A  3               
00183A  3  18           	clc
00183B  3  A5 66        	lda z80_l
00183D  3  69 11        	adc #TABSIZ		; distance to second entry.
00183F  3  85 66        	sta z80_l
001841  3  90 02        	bcc :+
001843  3  E6 67        	inc z80_h
001845  3               :
001845  3  A9 11        	lda #TABSIZ		; bytes to swap.
001847  3  85 63        	sta z80_b
001849  3  A0 00        	ldy #0
00184B  3               swspr0:
00184B  3  B1 66        	lda (z80_hl),y		; fetch second byte.
00184D  3  48           	pha
00184E  3  B1 64        	lda (z80_de),y 		; fetch first byte.
001850  3  91 66        	sta (z80_hl),y 		; copy to second.
001852  3  68           	pla
001853  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
001855  3               
001855  3  E6 64        	inc z80_e 		; next byte.
001857  3  D0 02        	bne :+	
001859  3  E6 65        	inc z80_d
00185B  3               :
00185B  3  E6 66        	inc z80_l 		; next byte.
00185D  3  D0 02        	bne :+
00185F  3  E6 67        	inc z80_h
001861  3               :
001861  3  C6 63        	dec z80_b
001863  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
001865  3  60           	rts
001866  3               
001866  3               ;----------------------------------------------------
001866  3               ; Process sprites.
001866  3               ;----------------------------------------------------
001866  3               
001866  3               pspr:
001866  3  A9 0C        	lda #NUMSPR		; sprites to process.
001868  3  8D 8F 18     	sta sprptr
00186B  3               
00186B  3  A9 7F        	lda #<sprtab 		; sprite table.
00186D  3  85 68        	sta z80_x
00186F  3  A9 20        	lda #>sprtab
001871  3  85 69        	sta z80_i
001873  3               pspr1:
001873  3  A0 00        	ldy #0
001875  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
001877  3  C9 09        	cmp #9 			; within range of sprite types?
001879  3  B0 03        	bcs :+
00187B  3  20 90 18     	jsr pspr2 		; yes, process this one.
00187E  3               :
00187E  3  18           	clc
00187F  3  A5 68        	lda z80_x
001881  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
001883  3  85 68        	sta z80_x
001885  3  90 02        	bcc :+
001887  3  E6 69        	inc z80_i		; next sprite.
001889  3               :
001889  3  CE 8F 18     	dec sprptr 		; repeat for remaining sprites.
00188C  3  D0 E5        	bne pspr1
00188E  3  60           	rts
00188F  3               
00188F  3  00           sprptr:	.byte 0
001890  3               
001890  3               pspr2:
001890  3  A5 68        	lda z80_x 		; store original sprite pointer.
001892  3  8D DD 18     	sta ogptr
001895  3  A5 69        	lda z80_i
001897  3  8D DE 18     	sta ogptr+1
00189A  3  20 A8 18     	jsr pspr3		; do the routine.
00189D  3               rtorg:
00189D  3  AD DD 18     	lda ogptr 		; restore original pointer to sprite.
0018A0  3  85 68        	sta z80_x
0018A2  3  AD DE 18     	lda ogptr+1
0018A5  3  85 69        	sta z80_i
0018A7  3               rtorg0:
0018A7  3  60           	rts
0018A8  3               
0018A8  3               pspr3:
0018A8  3  A9 DF        	lda #<evtyp0		; sprite type events list.
0018AA  3  85 66        	sta z80_l
0018AC  3  A9 18        	lda #>evtyp0
0018AE  3  85 67        	sta z80_h
0018B0  3               pspr4:
0018B0  3  B1 68        	lda (z80_ix),y
0018B2  3  0A           	asl a			; double accumulator.
0018B3  3  18           	clc
0018B4  3  65 66        	adc z80_l
0018B6  3  85 66        	sta z80_l
0018B8  3  90 02        	bcc :+
0018BA  3  E6 67        	inc z80_h
0018BC  3               :
0018BC  3  B1 66        	lda (z80_hl),y
0018BE  3  85 64        	sta z80_e 		; copy to de.
0018C0  3  48           	pha
0018C1  3               
0018C1  3  E6 66        	inc z80_l 		; next byte of address.
0018C3  3  D0 02        	bne :+
0018C5  3  E6 67        	inc z80_h
0018C7  3               :
0018C7  3  B1 66        	lda (z80_hl),y 		; address high.
0018C9  3  85 65        	sta z80_d
0018CB  3               
0018CB  3  48           	pha	 		; swap address into hl.
0018CC  3  A5 67        	lda z80_h
0018CE  3  85 65        	sta z80_d
0018D0  3  68           	pla
0018D1  3  85 67        	sta z80_h
0018D3  3  68           	pla
0018D4  3  85 66        	sta z80_l
0018D6  3  A5 66        	lda z80_l
0018D8  3  85 64        	sta z80_e
0018DA  3               	
0018DA  3  6C 66 00     	jmp (z80_hl) 		; go there.
0018DD  3               
0018DD  3  00 00        ogptr:	.word 0			; original sprite pointer.
0018DF  3               
0018DF  3               ; Address of each sprite type's routine.
0018DF  3               
0018DF  3  51 27        evtyp0:	.word evnt00
0018E1  3  E8 27        evtyp1:	.word evnt01
0018E3  3  56 29        evtyp2:	.word evnt02
0018E5  3  EA 29        evtyp3:	.word evnt03
0018E7  3  EB 29        evtyp4:	.word evnt04
0018E9  3  EC 29        evtyp5:	.word evnt05
0018EB  3  ED 29        evtyp6:	.word evnt06
0018ED  3  EE 29        evtyp7:	.word evnt07
0018EF  3  EF 29        evtyp8:	.word evnt08
0018F1  3               
0018F1  3               ;--------------------------------------------------------------
0018F1  3               ; Display sprites.
0018F1  3               ;
0018F1  3               ; Input:
0018F1  3               ;  IX = sprite table
0018F1  3               ;--------------------------------------------------------------
0018F1  3               
0018F1  3               dspr:
0018F1  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
0018F3  3  8D 84 19     	sta sprcnt
0018F6  3               dspr0:
0018F6  3  A0 00        	ldy #0
0018F8  3  B1 68        	lda (z80_ix),y 		; get sprite type.
0018FA  3  C9 FF        	cmp #255 		; is it enabled?
0018FC  3  D0 43        	bne dspr1 		; yes, it needs deleting.
0018FE  3               dspr5:
0018FE  3  A0 05        	ldy #5
001900  3  B1 68        	lda (z80_ix),y 		; new type.
001902  3  C9 FF        	cmp #255		; is it enabled?
001904  3  D0 78        	bne dspr3 		; yes, it needs drawing.
001906  3               dspr2:
001906  3  A0 05        	ldy #5
001908  3  B1 68        	lda (z80_ix),y 		; copy new type.
00190A  3  A0 00        	ldy #0
00190C  3  91 68        	sta (z80_ix),y
00190E  3  A0 06        	ldy #6
001910  3  B1 68        	lda (z80_ix),y 		; copy new image number.
001912  3  A0 01        	ldy #1
001914  3  91 68        	sta (z80_ix),y
001916  3  A0 07        	ldy #7
001918  3  B1 68        	lda (z80_ix),y 		; copy new frame.
00191A  3  A0 02        	ldy #2
00191C  3  91 68        	sta (z80_ix),y
00191E  3  A0 08        	ldy #8
001920  3  B1 68        	lda (z80_ix),y 		; copy new y.
001922  3  A0 03        	ldy #3
001924  3  91 68        	sta (z80_ix),y
001926  3  A0 09        	ldy #9
001928  3  B1 68        	lda (z80_ix),y 		; copy new x.
00192A  3  A0 04        	ldy #4
00192C  3  91 68        	sta (z80_ix),y
00192E  3               
00192E  3  18           	clc
00192F  3  A5 68        	lda z80_x
001931  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
001933  3  85 68        	sta z80_x
001935  3  A5 69        	lda z80_i
001937  3  69 00        	adc #0
001939  3  85 69        	sta z80_i 		; next sprite.
00193B  3  CE 84 19     	dec sprcnt
00193E  3  D0 B6        	bne dspr0		; repeat for remaining sprites.
001940  3  60           	rts
001941  3               dspr1:
001941  3  A0 05        	ldy #5
001943  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
001945  3  C9 FF        	cmp #255		; is this enabled?
001947  3  D0 06        	bne dspr4 		; yes, display both.
001949  3               dspr6:
001949  3  20 13 1A     	jsr sspria 		; show single sprite.
00194C  3  4C 06 19     	jmp dspr2
00194F  3               
00194F  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
00194F  3               
00194F  3               dspr4:
00194F  3  A0 04        	ldy #4
001951  3  B1 68        	lda (z80_ix),y		; old x.
001953  3  A0 09        	ldy #9
001955  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
001957  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
001959  3               
001959  3  A0 03        	ldy #3
00195B  3  B1 68        	lda (z80_ix),y		; old y.
00195D  3  A0 08        	ldy #8
00195F  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001961  3  D0 15        	bne dspr7		; they differ, need to redraw.
001963  3               
001963  3  A0 02        	ldy #2
001965  3  B1 68        	lda (z80_ix),y 		; old frame.
001967  3  A0 07        	ldy #7
001969  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
00196B  3  4C 78 19     	jmp dspr7 		; they differ, need to redraw.
00196E  3               
00196E  3  A0 01        	ldy #1
001970  3  B1 68        	lda (z80_ix),y 		; old image.
001972  3  A0 06        	ldy #6
001974  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001976  3  F0 8E        	beq dspr2		; everything is the same, don't redraw.
001978  3               dspr7:
001978  3  20 25 1A     	jsr sspric 		; delete old sprite, draw new one simultaneously.
00197B  3  4C 06 19     	jmp dspr2
00197E  3               dspr3:
00197E  3  20 1F 1A     	jsr ssprib 		; show single sprite.
001981  3  4C 06 19     	jmp dspr2
001984  3               
001984  3  00           sprcnt:	.byte 0
001985  3               
001985  3               ;-----------------------------------------
001985  3               ; Get sprite address calculations.
001985  3               ; gspran = new sprite, gsprad = old sprite.
001985  3               ;
001985  3               ; Input:
001985  3               ;  IX = sprite address
001985  3               ;-----------------------------------------
001985  3               
001985  3               gspran:
001985  3  A0 08        	ldy #8
001987  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
001989  3  8D 3F 03     	sta dispy
00198C  3  A0 09        	ldy #9
00198E  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
001990  3  8D 3E 03     	sta dispx
001993  3  A0 06        	ldy #6
001995  3  B1 68        	lda (z80_ix),y 		; new sprite image.
001997  3  20 22 1D     	jsr gfrm		; fetch start frame for this sprite.
00199A  3               
00199A  3  A0 00        	ldy #0
00199C  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
00199E  3  A0 07        	ldy #7
0019A0  3  18           	clc
0019A1  3  71 68        	adc (z80_ix),y 		; new add frame number.
0019A3  3  4C C4 19     	jmp gspra0
0019A6  3               
0019A6  3               ;-----------------------------------------
0019A6  3               ; Calculate old sprite address
0019A6  3               ;
0019A6  3               ; Input:
0019A6  3               ;  IX = sprite address
0019A6  3               ;
0019A6  3               ; Output:
0019A6  3               ;  B  = right byte mask
0019A6  3               ;  C  = left byte mask
0019A6  3               ;  DE = spriteframe address
0019A6  3               ;  scraddr = screenaddress(dispx,dispy)
0019A6  3               ;-----------------------------------------
0019A6  3               
0019A6  3               gsprad:
0019A6  3  A0 03        	ldy #3
0019A8  3  B1 68        	lda (z80_ix),y		; y coordinate.
0019AA  3  8D 3F 03     	sta dispy
0019AD  3  A0 04        	ldy #4
0019AF  3  B1 68        	lda (z80_ix),y		; x coordinate.
0019B1  3  8D 3E 03     	sta dispx
0019B4  3  A0 01        	ldy #1
0019B6  3  B1 68        	lda (z80_ix),y 		; sprite image.
0019B8  3  20 22 1D     	jsr gfrm 		; fetch start frame for this sprite.
0019BB  3               
0019BB  3  A0 00        	ldy #0
0019BD  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0019BF  3  A0 02        	ldy #2
0019C1  3  18           	clc
0019C2  3  71 68        	adc (z80_ix),y 		; add frame number.
0019C4  3               gspra0:
0019C4  3  4A           	lsr a	  		; multiply by 128.
0019C5  3  85 65        	sta z80_d 		; store in d.
0019C7  3  A9 00        	lda #0
0019C9  3  6A           	ror a
0019CA  3  85 64        	sta z80_e 		; got low byte.
0019CC  3               
0019CC  3  18           	clc 			; address of play sprites.
0019CD  3  A5 64        	lda z80_e
0019CF  3  69 7E        	adc #<sprgfx
0019D1  3  85 64        	sta z80_e
0019D3  3  A5 65        	lda z80_d
0019D5  3  69 2B        	adc #>sprgfx
0019D7  3  85 65        	sta z80_d
0019D9  3               
0019D9  3  AD 3E 03     	lda dispx 		; y coordinate.
0019DC  3  29 06        	and #6 			; position within byte boundary.
0019DE  3  AA           	tax	 		; low byte of table displacement.
0019DF  3               
0019DF  3  0A           	asl a	  		; multiply by 32.
0019E0  3  0A           	asl a  			; already a multiple
0019E1  3  0A           	asl a  			; of 2, so just 4
0019E2  3  0A           	asl a  			; shifts needed.
0019E3  3               
0019E3  3  18           	clc 			; add to sprite address.
0019E4  3  65 64        	adc z80_e
0019E6  3  85 64        	sta z80_e
0019E8  3  90 02        	bcc :+
0019EA  3  E6 65        	inc z80_d
0019EC  3               :
0019EC  3  BD 0B 1A     	lda spmask,x		 ; pointer to mask table.
0019EF  3  85 62        	sta z80_c 		; left mask.
0019F1  3  BD 0C 1A     	lda spmask+1,x
0019F4  3  85 63        	sta z80_b 		; right mask.
0019F6  3               
0019F6  3               ;------------------------------------------------------------------
0019F6  3               ; Drop into screen address routine.
0019F6  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
0019F6  3               ;------------------------------------------------------------------
0019F6  3               
0019F6  3               scadd:
0019F6  3  AE 3F 03     	ldx dispy
0019F9  3  AD 3E 03     	lda dispx
0019FC  3  4A           	lsr a
0019FD  3  4A           	lsr a
0019FE  3  4A           	lsr a
0019FF  3  18           	clc
001A00  3  7D 5E 24     	adc SCADTB_lb,x
001A03  3  85 80        	sta scraddr
001A05  3  BD 1E 25     	lda SCADTB_hb,x
001A08  3  85 81        	sta scraddr+1
001A0A  3  60           	rts
001A0B  3               
001A0B  3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
001A0F  3  0F F0 03 FC  
001A13  3               
001A13  3               
001A13  3               ;-----------------------------------------------------------------
001A13  3               ; These are the sprite routines.
001A13  3               ; sspria = single sprite, old (ix).
001A13  3               ; ssprib = single sprite, new (ix+5).
001A13  3               ; sspric = both sprites, old (ix) and new (ix+5).
001A13  3               ;-----------------------------------------------------------------
001A13  3               
001A13  3               sspria:
001A13  3  20 A6 19     	jsr gsprad		; get old sprite address.
001A16  3               sspri2:
001A16  3  A2 10        	ldx #16			; vertical lines.
001A18  3               sspri0:
001A18  3  20 45 1A     	jsr dline		; draw a line.
001A1B  3  CA           	dex
001A1C  3  D0 FA        	bne sspri0		; repeat 16 times
001A1E  3  60           	rts
001A1F  3               
001A1F  3               ;-----------------------------------------------------------------
001A1F  3               
001A1F  3               ssprib:
001A1F  3  20 85 19     	jsr gspran 		; get new sprite address.
001A22  3  4C 16 1A     	jmp sspri2
001A25  3               
001A25  3               ;-----------------------------------------------------------------
001A25  3               
001A25  3               sspric:
001A25  3  20 A6 19     	jsr gsprad 		; get old sprite address.
001A28  3  20 4D 39     	jsr exx  		; store addresses.
001A2B  3  20 85 19     	jsr gspran 		; get new sprite addresses.
001A2E  3               
001A2E  3  A2 0F        	ldx #15
001A30  3               lloop:
001A30  3  20 45 1A     	jsr dline 		; draw a line.
001A33  3  20 4D 39     	jsr exx  		; restore old addresses.
001A36  3  20 45 1A     	jsr dline 		; delete a line.
001A39  3  20 4D 39     	jsr exx  		; flip to new sprite addresses.
001A3C  3  CA           	dex
001A3D  3  D0 F1        	bne lloop
001A3F  3               
001A3F  3  20 45 1A     	jsr dline		; draw a line.
001A42  3  20 4D 39     	jsr exx 		; restore old addresses.
001A45  3               
001A45  3               ;-------------------------------------------------------------
001A45  3               ; Drop through.
001A45  3               ; Line drawn, now work out next target address.
001A45  3               ;
001A45  3               ; Input:
001A45  3               ;  B  = right mask
001A45  3               ;  C  = left mask
001A45  3               ;  DE = spriteaddress
001A45  3               ;  scraddr = screen address
001A45  3               ;-------------------------------------------------------------
001A45  3               
001A45  3               dline:
001A45  3  A0 00        	ldy #0
001A47  3  B1 64        	lda (z80_de),y 		; graphic data.
001A49  3  25 62        	and z80_c 		; mask away what's not needed.
001A4B  3  51 80        	eor (scraddr),y 	; XOR with what's there.
001A4D  3  91 80        	sta (scraddr),y 	; bung it in.
001A4F  3               
001A4F  3  E6 80        	inc scraddr 		; next screen address.
001A51  3  E6 80        	inc scraddr 		; next screen address.
001A53  3               
001A53  3  B1 64        	lda (z80_de),y 		; fetch data.
001A55  3  25 63        	and z80_b 		; mask away unwanted bits.
001A57  3  51 80        	eor (scraddr),y 	; XOR with what's there.
001A59  3  91 80        	sta (scraddr),y 	; bung it in.
001A5B  3               
001A5B  3  E6 64        	inc z80_e 		; next graphic.
001A5D  3  D0 02        	bne :+
001A5F  3  E6 65        	inc z80_d
001A61  3               :
001A61  3  C6 80        	dec scraddr 		; one character cell to the left.
001A63  3               
001A63  3  B1 64        	lda (z80_de),y 		; second bit of data.
001A65  3  51 80        	eor (scraddr),y 	; XOR with what's there.
001A67  3  91 80        	sta (scraddr),y 	; bung it in.
001A69  3               
001A69  3  E6 64        	inc z80_e 		; point to next line of data.
001A6B  3  D0 02        	bne :+
001A6D  3  E6 65        	inc z80_d
001A6F  3               :
001A6F  3  C6 80        	dec scraddr 		; another char left.
001A71  3               
001A71  3               ;----------------------------------------------------------------------
001A71  3               ; Line drawn, now work out next target address.
001A71  3               ;----------------------------------------------------------------------
001A71  3               
001A71  3               nline:
001A71  3  18           	clc
001A72  3  A5 80        	lda scraddr 		; get low byte of address.
001A74  3  69 20        	adc #$20
001A76  3  85 80        	sta scraddr 		; new low byte of address.
001A78  3  90 02        	bcc :+
001A7A  3  E6 81        	inc scraddr+1 		; new high byte of address.
001A7C  3               :
001A7C  3  60           	rts
001A7D  3               
001A7D  3               ; Attributes filled, now work out next attribute address.
001A7D  3               
001A7D  3               nattr:
001A7D  3               	; 22.03.xx inc h 	; increment pixel.
001A7D  3  E6 67        	inc z80_h
001A7F  3               
001A7F  3               	; 29.03.03 ld a, h 	; get pixel address.
001A7F  3  A5 67        	lda z80_h
001A81  3  85 61        	sta z80_a
001A83  3               
001A83  3               	; 02.05.xx and 7 	; straddling character position?
001A83  3  A5 61        	lda z80_a
001A85  3  29 07        	and #7
001A87  3               
001A87  3               	; 43.06.xx rts nz 	; no, we"re on next line already.
001A87  3  F0 01        	beq :+
001A89  3  60           	rts
001A8A  3               :
001A8A  3               	; 29.03.03 ld a, h 	; get pixel address.
001A8A  3  A5 67        	lda z80_h
001A8C  3  85 61        	sta z80_a
001A8E  3               
001A8E  3               	; 63.05.xx sub 8 	; subtract 8 for start of segment.
001A8E  3  38           	sec
001A8F  3  A5 61        	lda z80_a
001A91  3  E9 08        	sbc #(8)
001A93  3  85 61        	sta z80_a
001A95  3               
001A95  3               	; 29.03.03 ld h, a 	; new high byte of address.
001A95  3  A5 61        	lda z80_a
001A97  3  85 67        	sta z80_h
001A99  3               
001A99  3               	; 29.03.03 ld a, l 	; get low byte of address.
001A99  3  A5 66        	lda z80_l
001A9B  3  85 61        	sta z80_a
001A9D  3               
001A9D  3               	; 01.03.05 add a, 32 	; one line down.
001A9D  3  A9 20        	lda #(32)
001A9F  3  18           	clc
001AA0  3  65 61        	adc z80_a
001AA2  3  85 61        	sta z80_a
001AA4  3               
001AA4  3               	; 29.03.03 ld l, a 	; new low byte.
001AA4  3  A5 61        	lda z80_a
001AA6  3  85 66        	sta z80_l
001AA8  3               
001AA8  3               	; 43.06.xx rts nc 	; not reached next segment yet.
001AA8  3  B0 01        	bcs :+
001AAA  3  60           	rts
001AAB  3               :
001AAB  3               	; 29.03.03 ld a, h 	; address high.
001AAB  3  A5 67        	lda z80_h
001AAD  3  85 61        	sta z80_a
001AAF  3               
001AAF  3               	; 01.03.05 add a, 8 	; add 8 to next segment.
001AAF  3  A9 08        	lda #(8)
001AB1  3  18           	clc
001AB2  3  65 61        	adc z80_a
001AB4  3  85 61        	sta z80_a
001AB6  3               
001AB6  3               	; 29.03.03 ld h, a 	; new high byte.
001AB6  3  A5 61        	lda z80_a
001AB8  3  85 67        	sta z80_h
001ABA  3               
001ABA  3               	; 06.05.xx cp 120 	; reached end of screen?
001ABA  3  A5 61        	lda z80_a
001ABC  3  C9 78        	cmp #120
001ABE  3               
001ABE  3               	; 43.06.xx rts c 	; not yet.
001ABE  3  90 01        	bcc :+
001AC0  3  60           	rts
001AC1  3               :
001AC1  3               	; 29.03.05 ld h, 0 	; back to ROM.
001AC1  3  A9 00        	lda #0; back to ROM.
001AC3  3  85 67        	sta z80_h
001AC5  3               
001AC5  3               	; 43.xx.xx rts  	
001AC5  3  60           	rts
001AC6  3               
001AC6  3               
001AC6  3               ;-----------------------------------------------------------
001AC6  3               ; Animates a sprite.
001AC6  3               ;
001AC6  3               ; Input:
001AC6  3               ;  IX = sprite address
001AC6  3               ;  HL = last sprite address
001AC6  3               ;-----------------------------------------------------------
001AC6  3               
001AC6  3               animsp:
001AC6  3  A0 06        	ldy #6
001AC8  3  B1 68        	lda (z80_ix),y		; sprite image
001ACA  3  20 22 1D     	jsr gfrm		; get frame data.
001ACD  3               
001ACD  3  E6 66        	inc z80_l		; point to frames.
001ACF  3  D0 02        	bne :+
001AD1  3  E6 67        	inc z80_h
001AD3  3               :
001AD3  3  A0 07        	ldy #7
001AD5  3  B1 68        	lda (z80_ix),y		; sprite frame.
001AD7  3  18           	clc
001AD8  3  69 01        	adc #1			; next one along.
001ADA  3  A0 00        	ldy #0
001ADC  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
001ADE  3  90 02        	bcc anims0		; no, not yet.
001AE0  3  A9 00        	lda #0			; start at first frame.
001AE2  3               anims0:
001AE2  3  A0 07        	ldy #7
001AE4  3  91 68        	sta (z80_ix),y		; new frame.
001AE6  3  60           	rts
001AE7  3               
001AE7  3               ;--------------------------------------------------------------
001AE7  3               ; Animate back
001AE7  3               ;
001AE7  3               ; Input:
001AE7  3               ;  IX = sprite address
001AE7  3               ;  HL = last sprite address
001AE7  3               ;--------------------------------------------------------------
001AE7  3               
001AE7  3               animbk:
001AE7  3  A0 06        	ldy #6
001AE9  3  B1 68        	lda (z80_ix),y		; sprite image.
001AEB  3  20 22 1D     	jsr gfrm		; get frame data.
001AEE  3               
001AEE  3  E6 66        	inc z80_l 		; point to frames.
001AF0  3  D0 02        	bne :+
001AF2  3  E6 67        	inc z80_h
001AF4  3               :
001AF4  3  A0 07        	ldy #7
001AF6  3  B1 68        	lda (z80_ix),y 		; sprite frame.
001AF8  3  F0 03        	beq :+
001AFA  3  4C 01 1B     	jmp rtanb0 		; yes, start at end.
001AFD  3               :
001AFD  3  A0 00        	ldy #0
001AFF  3  B1 66        	lda (z80_hl),y 		; last sprite.
001B01  3               rtanb0:
001B01  3  38           	sec
001B02  3  E9 01        	sbc #1			; next one along.
001B04  3  4C E2 1A     	jmp anims0		; set new frame.
001B07  3               
001B07  3               ;--------------------------------------------------------------
001B07  3               ; Check for collision with other sprite, strict enforcement.
001B07  3               ;
001B07  3               ; Input:
001B07  3               ;  b		= sprite to test for
001B07  3               ;  ix		= current sprite pointer
001B07  3               ;
001B07  3               ; global:	b
001B07  3               ; local:	x,y,hl,de,skptr
001B07  3               ; calls:	-
001B07  3               ;--------------------------------------------------------------
001B07  3               
001B07  3               sktyp:
001B07  3  A9 7F        	lda #<sprtab				; sprite table.
001B09  3  85 66        	sta z80_l
001B0B  3  A9 20        	lda #>sprtab
001B0D  3  85 67        	sta z80_h
001B0F  3               numsp2:
001B0F  3  A9 0C        	lda #NUMSPR				; number of sprites.
001B11  3  8D 4A 1B     	sta sktptr
001B14  3               sktyp0:
001B14  3  A5 66        	lda z80_l 				; store pointer to sprite.
001B16  3  8D 48 1B     	sta skptr
001B19  3  A5 67        	lda z80_h
001B1B  3  8D 49 1B     	sta skptr+1
001B1E  3               
001B1E  3  A0 00        	ldy #0
001B20  3  B1 66        	lda (z80_hl),y 				; get sprite type.
001B22  3  C5 63        	cmp z80_b				; is it the type we seek?
001B24  3  F0 25        	beq coltyp				; yes, we can use this one.
001B26  3               :
001B26  3               sktyp1:
001B26  3  18           	clc
001B27  3  AD 48 1B     	lda skptr				; retrieve sprite pointer.
001B2A  3  69 11        	adc #TABSIZ				; size of each entry.
001B2C  3  85 66        	sta z80_l
001B2E  3  AD 49 1B     	lda skptr+1
001B31  3  69 00        	adc #0
001B33  3  85 67        	sta z80_h
001B35  3  CE 4A 1B     	dec sktptr					; one less iteration.
001B38  3  D0 DA        	bne sktyp0				; keep going until we find a slot.
001B3A  3               :
001B3A  3  A9 00        	lda #0					; default to ROM address - no sprite.
001B3C  3  85 66        	sta z80_l
001B3E  3  85 67        	sta z80_h
001B40  3  8D 48 1B     	sta skptr				; store pointer to sprite.
001B43  3  8D 49 1B     	sta skptr+1
001B46  3               
001B46  3  18           	clc					; don't return with zero flag set.
001B47  3  60           	rts 					; didn't find one.
001B48  3               
001B48  3  00 00        skptr:	.word 0					; search pointer.
001B4A  3  00           sktptr:	.byte 0
001B4B  3               
001B4B  3               coltyp:
001B4B  3  A0 00        	ldy #0
001B4D  3  B1 68        	lda (z80_ix),y				; current sprite type.
001B4F  3  C5 63        	cmp z80_b				; seeking sprite of same type?
001B51  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
001B53  3               colty0:
001B53  3  A0 09        	ldy #9					; distance to x position in table.
001B55  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
001B57  3  85 64        	sta z80_e
001B59  3  88           	dey
001B5A  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
001B5C  3  85 65        	sta z80_d
001B5E  3               
001B5E  3               ;	clc
001B5E  3               ;	lda z80_l
001B5E  3               ;	adc #9
001B5E  3               ;	sta z80_l
001B5E  3               ;	bcc :+
001B5E  3               ;	inc z80_h
001B5E  3               :
001B5E  3               ; Drop into collision detection.
001B5E  3               
001B5E  3               colc16:
001B5E  3  A0 09        	ldy #9
001B60  3  B1 68        	lda (z80_ix),y			 	; x coord.
001B62  3  38           	sec					; subtract x.
001B63  3  E5 64        	sbc z80_e
001B65  3  B0 05        	bcs  colc1a 				; result is positive.
001B67  3  49 FF        	eor #$ff				; make negative positive.
001B69  3  18           	clc
001B6A  3  69 01        	adc #1
001B6C  3               colc1a:
001B6C  3  C9 10        	cmp #16 				; within x range?
001B6E  3  B0 B6        	bcs sktyp1				; no - they"ve missed.
001B70  3  85 62        	sta z80_c				; store difference.
001B72  3               
001B72  3  A0 08        	ldy #8
001B74  3  B1 68        	lda (z80_ix),y				; y coord.
001B76  3  38           	sec
001B77  3  E5 65        	sbc z80_d				; subtract y.
001B79  3  B0 05        	bcs colc1b				; result is positive.
001B7B  3  49 FF        	eor #$ff				; make negative positive.
001B7D  3  18           	clc
001B7E  3  69 01        	adc #1
001B80  3               colc1b:
001B80  3  C9 10        	cmp #16					; within y range?
001B82  3  B0 A2        	bcs sktyp1 				; no - they've missed.
001B84  3  18           	clc					; add x difference.
001B85  3  65 62        	adc z80_c
001B87  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
001B89  3  B0 02        	bcs :+
001B8B  3  38           	sec
001B8C  3  60           	rts 					; carry set if there's a collision.
001B8D  3               :
001B8D  3  4C 26 1B     	jmp sktyp1				; try next sprite in table.
001B90  3               colty1:
001B90  3  A5 68        	lda z80_x  				; compare the two.
001B92  3  C5 66        	cmp z80_l
001B94  3  D0 09        	bne end_col
001B96  3  A5 69        	lda z80_i
001B98  3  C5 67        	cmp z80_h
001B9A  3  D0 03        	bne end_col
001B9C  3  4C 26 1B     	jmp sktyp1 				; addresses are identical.
001B9F  3               end_col:
001B9F  3  4C 53 1B     	jmp colty0
001BA2  3               
001BA2  3               ;-----------------------------------------------------------
001BA2  3               ; Display number, left aligned
001BA2  3               ; 
001BA2  3               ; Input:
001BA2  3               ;  a		= number
001BA2  3               ;
001BA2  3               ; global:	-
001BA2  3               ; local:	a,y,bc,hl,displ0
001BA2  3               ; calls:	num2ch,dmsg3
001BA2  3               ;-----------------------------------------------------------
001BA2  3               
001BA2  3               disply:
001BA2  3  85 61        	sta z80_a
001BA4  3  A9 CA        	lda #<displ0				; display workspace.
001BA6  3  85 62        	sta z80_c
001BA8  3  A9 1B        	lda #>displ0
001BAA  3  85 63        	sta z80_b
001BAC  3  A5 61        	lda z80_a
001BAE  3  20 3E 0D     	jsr num2ch				; convert accumulator to string.
001BB1  3               
001BB1  3  C6 62        	dec z80_c				; back one character.
001BB3  3  D0 02        	bne :+
001BB5  3  C6 63        	dec z80_b
001BB7  3               :
001BB7  3  A0 00        	ldy #0
001BB9  3  B1 62        	lda (z80_bc),y				; fetch digit.
001BBB  3  09 80        	ora #128				; insert end marker.
001BBD  3  91 62        	sta (z80_bc),y				; new value.
001BBF  3               
001BBF  3  A9 CA        	lda #<displ0				; display space.
001BC1  3  85 66        	sta z80_l
001BC3  3  A9 1B        	lda #>displ0
001BC5  3  85 67        	sta z80_h
001BC7  3  4C BF 16     	jmp dmsg3				; display the string.
001BCA  3               
001BCA  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
001BCE  3               
001BCE  3               ;----------------------------------------------------------------
001BCE  3               ; Initialise screen.
001BCE  3               ;
001BCE  3               ; global:	roomtb,scno
001BCE  3               ; local:	-
001BCE  3               ; calls:	tstcs
001BCE  3               ;----------------------------------------------------------------
001BCE  3               
001BCE  3               initsc:
001BCE  3  AD 5C 21     	lda roomtb 			; whereabouts in the map are we?
001BD1  3  20 DC 1B     	jsr tstsc 			; find displacement.
001BD4  3  C9 FF        	cmp #255 			; is it valid?
001BD6  3  F0 03        	beq init_end 			; no, it's rubbish.
001BD8  3  8D 19 03     	sta scno			; store new room number.
001BDB  3               init_end:
001BDB  3  60           	rts
001BDC  3               
001BDC  3               ;----------------------------------------------------------------
001BDC  3               ; Test screen.
001BDC  3               ;
001BDC  3               ; global:	-
001BDC  3               ; local:	x
001BDC  3               ; calls:	-
001BDC  3               ;----------------------------------------------------------------
001BDC  3               
001BDC  3               tstsc:
001BDC  3  85 63        	sta z80_b
001BDE  3  18           	clc
001BDF  3  69 0B        	adc #MAPWID 			; add width in case we"re negative.
001BE1  3  AA           	tax 				; add displacement to map data.
001BE2  3  BD 2F 27     	lda mapdat-MAPWID,x 		; find room number there.
001BE5  3  60           	rts
001BE6  3               
001BE6  3               ;--------------------------
001BE6  3               ; Screen left.
001BE6  3               ;--------------------------
001BE6  3               
001BE6  3               scrl:
001BE6  3  AD 5C 21     	lda roomtb 			; present room table pointer.
001BE9  3  38           	sec
001BEA  3  E9 01        	sbc #1				; room left.
001BEC  3               scrl0:
001BEC  3  20 DC 1B     	jsr tstsc			; test screen.
001BEF  3  C9 FF        	cmp #255			; is there a screen this way?
001BF1  3  D0 01        	bne :+
001BF3  3  60           	rts				; no, return to loop.
001BF4  3               :
001BF4  3  A5 63        	lda z80_b			; restore room displacement.
001BF6  3  8D 5C 21     	sta roomtb			; new room table position.
001BF9  3               scrl1:
001BF9  3  20 CE 1B     	jsr initsc 			; set new screen.
001BFC  3  A9 02        	lda #2
001BFE  3  8D 3B 03     	sta restfl 			; set it.
001C01  3  60           	rts
001C02  3               scrr:
001C02  3  AD 5C 21     	lda roomtb 			; room table pointer.
001C05  3  18           	clc
001C06  3  69 01        	adc #1				; room right.
001C08  3  4C EC 1B     	jmp scrl0
001C0B  3               scru:
001C0B  3  AD 5C 21     	lda roomtb 			; room table pointer.
001C0E  3  38           	sec
001C0F  3  E9 0B        	sbc #MAPWID 			; room up.
001C11  3  4C EC 1B     	jmp scrl0
001C14  3               scrd:
001C14  3  AD 5C 21     	lda roomtb 			; room table pointer.
001C17  3  18           	clc
001C18  3  69 0B        	adc #MAPWID 			; room down.
001C1A  3  4C EC 1B     	jmp scrl0
001C1D  3               
001C1D  3               ;-----------------------------------------
001C1D  3               ; Jump to new screen.
001C1D  3               ;-----------------------------------------
001C1D  3               
001C1D  3               nwscr:
001C1D  3  A2 00        	ldx #0				; start of map data.
001C1F  3               nwscr0:
001C1F  3  DD 3A 27     	cmp mapdat,x
001C22  3  F0 06        	beq nwscr1			; have we found a match for screen?
001C24  3  E8           	inx 				; next room.
001C25  3  E0 50        	cpx #80				; zero room count, 80 to search.
001C27  3  D0 F6        	bne nwscr0			; keep looking.
001C29  3  60           	rts
001C2A  3               nwscr1:
001C2A  3  8E 5C 21     	stx roomtb			; set the map position.
001C2D  3  4C F9 1B     	jmp scrl1			; draw new room.
001C30  3               
001C30  3               
001C30  3               ;----------------------------------------------------------
001C30  3               ; Gravity processing.
001C30  3               ;----------------------------------------------------------
001C30  3               
001C30  3               grav:
001C30  3  A0 0D        	ldy #13
001C32  3  B1 68        	lda (z80_ix),y			; jump pointer low.
001C34  3  85 66        	sta z80_l
001C36  3  A0 0E        	ldy #14
001C38  3  B1 68        	lda (z80_ix),y			; jump pointer high.
001C3A  3  85 67        	sta z80_h
001C3C  3  05 66        	ora z80_l			; merge in low byte.
001C3E  3  D0 01        	bne :+
001C40  3  60           	rts				; if neither is set, we're not in the air.
001C41  3               :
001C41  3  A0 00        	ldy #0
001C43  3  B1 66        	lda (z80_hl),y			; pixels to move.
001C45  3  85 61        	sta z80_a
001C47  3               ;	cmp #98				; reached the end?
001C47  3               ;	beq grav2			; yes, continue.
001C47  3  C9 63        	cmp #99				; reached the end?
001C49  3  D0 06        	bne grav0			; no, continue.
001C4B  3               grav2:
001C4B  3  C6 66        	dec z80_l			; go back to previous value.
001C4D  3  B1 66        	lda (z80_hl),y			; fetch that from table.
001C4F  3  85 61        	sta z80_a
001C51  3               grav0:
001C51  3  E6 66        	inc z80_l			; point to next table entry.
001C53  3  A5 66        	lda z80_l
001C55  3  A0 0D        	ldy #13
001C57  3  91 68        	sta (z80_ix),y			; store new pointer low.
001C59  3  A5 67        	lda z80_h
001C5B  3  A0 0E        	ldy #14
001C5D  3  91 68        	sta (z80_ix),y			; store new pointer high.
001C5F  3               grav1:
001C5F  3  A5 61        	lda z80_a
001C61  3  D0 01        	bne :+				; any movement required?
001C63  3  60           	rts				; no, not this time.
001C64  3               :
001C64  3  A5 61        	lda z80_a
001C66  3  C9 80        	cmp #128			; is it up or down?
001C68  3  B0 15        	bcs gravu			; it's up.
001C6A  3               gravd:
001C6A  3  85 63        	sta z80_b			; set pixels to move.
001C6C  3               gravd0:
001C6C  3  20 FF 13     	jsr cangd			; can we go down?
001C6F  3  D0 28        	bne gravst			; can't move down, so stop.
001C71  3  A0 08        	ldy #8
001C73  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
001C75  3  18           	clc
001C76  3  69 01        	adc #1
001C78  3  91 68        	sta (z80_ix),y
001C7A  3  C6 63        	dec z80_b
001C7C  3  D0 EE        	bne gravd0
001C7E  3  60           	rts
001C7F  3               gravu:
001C7F  3  49 FF        	eor #$ff			; flip the sign so it's positive.
001C81  3  18           	clc
001C82  3  69 01        	adc #1
001C84  3  85 63        	sta z80_b			; set pixels to move.
001C86  3               gravu0:
001C86  3  20 C7 13     	jsr cangu			; can we go up?
001C89  3  D0 71        	bne ifalls			; can't move up, go down next.
001C8B  3  A0 08        	ldy #8
001C8D  3  B1 68        	lda (z80_ix),y
001C8F  3  38           	sec
001C90  3  E9 01        	sbc #1
001C92  3  91 68        	sta (z80_ix),y			; adjust new x coord.
001C94  3  C6 63        	dec z80_b
001C96  3  D0 EE        	bne gravu0
001C98  3  60           	rts
001C99  3               gravst:
001C99  3  A0 0D        	ldy #13
001C9B  3  B1 68        	lda (z80_ix),y			; jump pointer low.
001C9D  3  85 66        	sta z80_l
001C9F  3  A0 0E        	ldy #14
001CA1  3  B1 68        	lda (z80_ix),y			; jump pointer high.
001CA3  3  85 67        	sta z80_h
001CA5  3               
001CA5  3  A9 00        	lda #0				; null value in pointer.
001CA7  3  A0 0D        	ldy #13
001CA9  3  91 68        	sta (z80_ix),y			; store new pointer low.
001CAB  3  C8           	iny
001CAC  3  91 68        	sta (z80_ix),y			; store new pointer high.
001CAE  3               
001CAE  3  A0 00        	ldy #0
001CB0  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
001CB2  3  C9 63        	cmp #99				; is it the end marker?
001CB4  3               evftf:
001CB4  3  F0 01        	beq :+				; yes, fallen too far.
001CB6  3  60           	rts
001CB7  3               :
001CB7  3  4C 75 2A     	jmp evnt15			; EVENT FELLTOOFAR
001CBA  3               
001CBA  3               ;------------------------------------------------
001CBA  3               ; Initiate fall check.
001CBA  3               ;------------------------------------------------
001CBA  3               
001CBA  3               ifall:
001CBA  3  A0 0D        	ldy #13
001CBC  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
001CBE  3  85 66        	sta z80_l
001CC0  3  A0 0E        	ldy #14
001CC2  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
001CC4  3  85 67        	sta z80_h			; high byte in accumulator.
001CC6  3  05 66        	ora z80_l			; merge in low byte.
001CC8  3  F0 01        	beq :+
001CCA  3  60           	rts				; if either is set, we're already in the air.
001CCB  3               :
001CCB  3  A0 09        	ldy #9
001CCD  3  B1 68        	lda (z80_ix),y			; y coordinate.
001CCF  3  8D 3E 03     	sta dispx
001CD2  3               numsp7:
001CD2  3  A0 08        	ldy #8
001CD4  3  B1 68        	lda (z80_ix),y			; look x coordinate.
001CD6  3  18           	clc
001CD7  3  69 10        	adc #16				; add 16 pixels.
001CD9  3  8D 3F 03     	sta dispy			; set up test coordinates.
001CDC  3  20 85 15     	jsr tstbl			; get map address.
001CDF  3  20 99 14     	jsr plchk			; block, platform check.
001CE2  3  F0 01        	beq :+
001CE4  3  60           	rts				; it's solid, don't fall.
001CE5  3               :
001CE5  3  E6 86        	inc bufaddr			; look right one cell.
001CE7  3  20 99 14     	jsr plchk			; block, platform check.
001CEA  3  F0 01        	beq :+
001CEC  3  60           	rts				; it's solid, don't fall.
001CED  3               :
001CED  3  AD 3E 03     	lda dispx			; y coordinate.
001CF0  3  29 07        	and #7				; position straddling block cells.
001CF2  3  F0 08        	beq ifalls			; no more checks needed.
001CF4  3  E6 86        	inc bufaddr			; look to third cell.
001CF6  3  20 99 14     	jsr plchk			; block, platform check.
001CF9  3  F0 01        	beq :+
001CFB  3  60           	rts				; it's solid, don't fall.
001CFC  3               :
001CFC  3               ifalls:
001CFC  3  A9 D5        	lda #<jtab			; jump table start.
001CFE  3  85 66        	sta z80_l
001D00  3  A9 15        	lda #>jtab
001D02  3  85 67        	sta z80_h
001D04  3               ifal0:
001D04  3  E6 66        	inc z80_l			; point to next value.
001D06  3  A0 00        	ldy #0
001D08  3  B1 66        	lda (z80_hl),y			; fetch value.
001D0A  3  F0 F8        	beq ifal0			; no, get next value.
001D0C  3  C9 63        	cmp #99				; reached end of table?
001D0E  3  D0 01        	bne :+
001D10  3  60           	rts				; yes, don't fall.
001D11  3               :
001D11  3  C9 80        	cmp #128			; is it going up?
001D13  3  B0 EF        	bcs ifal0			; yes, looking for first movement down.
001D15  3               
001D15  3  A0 0D        	ldy #13
001D17  3  A5 66        	lda z80_l
001D19  3  91 68        	sta (z80_ix),y 			; set jump low.
001D1B  3  A0 0E        	ldy #14
001D1D  3  A5 67        	lda z80_h
001D1F  3  91 68        	sta (z80_ix),y 			; set jump high.
001D21  3  60           	rts
001D22  3               
001D22  3               
001D22  3               ;----------------------------------------------------
001D22  3               ; Get frame data for a particular sprite.
001D22  3               ; Input:
001D22  3               ;  a		= framenumer
001D22  3               ; Output:
001D22  3               ;  hl		= frame address
001D22  3               ;
001D22  3               ; global:	hl,frmptr
001D22  3               ; local:	-
001D22  3               ; calls:	-
001D22  3               ;----------------------------------------------------
001D22  3               
001D22  3               gfrm:
001D22  3  0A           	asl a	 		 	; multiple of 2.
001D23  3  18           	clc
001D24  3  6D 40 03     	adc frmptr 			; frames used by game.
001D27  3  85 66        	sta z80_l
001D29  3  AD 41 03     	lda frmptr+1
001D2C  3  69 00        	adc #0
001D2E  3  85 67        	sta z80_h 			; point to frame start.
001D30  3  60           	rts
001D31  3               
001D31  3               ;----------------------------------------------------
001D31  3               ; Find sprite list for current room.
001D31  3               ;
001D31  3               ; global:	hl
001D31  3               ; local:	x,y
001D31  3               ; calls:	-
001D31  3               ;----------------------------------------------------
001D31  3               
001D31  3               sprlst:
001D31  3  A9 AD        	lda #<nmedat 			; list of enemy sprites.
001D33  3  85 66        	sta z80_l
001D35  3  A9 34        	lda #>nmedat
001D37  3  85 67        	sta z80_h
001D39  3  AE 19 03     	ldx scno 			; screen number.
001D3C  3  D0 01        	bne sprls2 			; is it the first screen?
001D3E  3  60           	rts 				; yes, don't need to search data.
001D3F  3               sprls2:
001D3F  3  A0 00        	ldy #0
001D41  3               sprls1:
001D41  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
001D43  3  C9 FF        	cmp #255			; is it an end marker?
001D45  3  F0 0E        	beq sprls0 			; yes, end of this room.
001D47  3               
001D47  3  18           	clc 				; point to next sprite in list.
001D48  3  A5 66        	lda z80_l
001D4A  3  69 04        	adc #NMESIZ
001D4C  3  85 66        	sta z80_l
001D4E  3  90 02        	bcc :+
001D50  3  E6 67        	inc z80_h
001D52  3               :
001D52  3  4C 41 1D     	jmp sprls1 			; continue until end of room.
001D55  3               sprls0:
001D55  3  E6 66        	inc z80_l 			; point to start of next screen.s
001D57  3  D0 02        	bne :+
001D59  3  E6 67        	inc z80_h
001D5B  3               :
001D5B  3  CA           	dex
001D5C  3  D0 E3        	bne sprls1 			; continue until room found.
001D5E  3  60           	rts
001D5F  3               
001D5F  3               
001D5F  3               ;----------------------------------------------------
001D5F  3               ; Clear all but a single player sprite.
001D5F  3               ;
001D5F  3               ; global:	-
001D5F  3               ; local:	x,y,ix
001D5F  3               ; calls:	-
001D5F  3               ;----------------------------------------------------
001D5F  3               
001D5F  3               nspr:
001D5F  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001D61  3  85 63        	sta z80_b
001D63  3  A9 7F        	lda #<sprtab 			; sprite table.
001D65  3  85 68        	sta z80_x
001D67  3  A9 20        	lda #>sprtab
001D69  3  85 69        	sta z80_i
001D6B  3               nspr0:
001D6B  3  A0 00        	ldy #0 				; fetch sprite type.
001D6D  3  B1 68        	lda (z80_ix),y 			; is it a player?
001D6F  3  F0 1A        	beq nspr1 			; yes, keep this one.
001D71  3               
001D71  3  A9 FF        	lda #255
001D73  3  A0 00        	ldy #0 				; fetch sprite type.
001D75  3  91 68        	sta (z80_ix),y 			; delete sprite.
001D77  3  A0 05        	ldy #5
001D79  3  91 68        	sta (z80_ix),y 			; remove next type.
001D7B  3               
001D7B  3  18           	clc	 			; next sprite.
001D7C  3  A5 68        	lda z80_x
001D7E  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001D80  3  85 68        	sta z80_x
001D82  3  90 02        	bcc :+
001D84  3  E6 69        	inc z80_i
001D86  3               :
001D86  3  C6 63        	dec z80_b	 			; one less space in the table.
001D88  3  D0 E1        	bne nspr0
001D8A  3  60           	rts
001D8B  3               nspr1:
001D8B  3  A9 FF        	lda #255
001D8D  3  A0 00        	ldy #0
001D8F  3  91 68        	sta (z80_ix),y 			; delete sprite.
001D91  3               
001D91  3  18           	clc	 			; point to next sprite.
001D92  3  A5 68        	lda z80_x
001D94  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001D96  3  85 68        	sta z80_x
001D98  3  90 02        	bcc :+
001D9A  3  E6 69        	inc z80_i
001D9C  3               :
001D9C  3  C6 63        	dec z80_b	 			; one less to do.
001D9E  3  D0 01        	bne nspr2
001DA0  3  60           	rts
001DA1  3               nspr2:
001DA1  3  A9 FF        	lda #255
001DA3  3  A0 00        	ldy #0
001DA5  3  91 68        	sta (z80_ix),y 			; delete sprite.
001DA7  3  A0 05        	ldy #5
001DA9  3  91 68        	sta (z80_ix),y 			; remove next type.
001DAB  3               
001DAB  3  18           	clc	 			; next sprite.
001DAC  3  A5 68        	lda z80_x
001DAE  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001DB0  3  85 68        	sta z80_x
001DB2  3  90 02        	bcc :+
001DB4  3  E6 69        	inc z80_i
001DB6  3               :
001DB6  3  C6 63        	dec z80_b	 			; one less space in table.
001DB8  3  D0 E7        	bne nspr2
001DBA  3  60           	rts
001DBB  3               
001DBB  3               ;----------------------------------------------------------
001DBB  3               ; Two initialisation routines.
001DBB  3               ; Initialise sprites - copy everything from list to table.
001DBB  3               ;
001DBB  3               ; global:	-
001DBB  3               ; local:	x,y,ix
001DBB  3               ; calls:	cpsp
001DBB  3               ;----------------------------------------------------------
001DBB  3               
001DBB  3               ispr:
001DBB  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
001DBD  3  A9 7F        	lda #<sprtab			; sprite table.
001DBF  3  85 68        	sta z80_x
001DC1  3  A9 20        	lda #>sprtab
001DC3  3  85 69        	sta z80_i
001DC5  3               ispr2:
001DC5  3  A0 00        	ldy #0
001DC7  3  B1 66        	lda (z80_hl),y 			; fetch byte.
001DC9  3  C9 FF        	cmp #255 			; is it an end marker?
001DCB  3  D0 01        	bne :+
001DCD  3  60           	rts 				; yes, no more to do.
001DCE  3               :
001DCE  3               ispr1:
001DCE  3  A0 00        	ldy #0
001DD0  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
001DD2  3  C9 FF        	cmp #255 			; is it enabled yet?
001DD4  3  D0 08        	bne ispr4			; yes, try another slot.
001DD6  3               
001DD6  3  A0 05        	ldy #5
001DD8  3  B1 68        	lda (z80_ix),y		 	; next type.
001DDA  3  C9 FF        	cmp #255 			; is it enabled yet?
001DDC  3  F0 0F        	beq ispr3 			; no, process this one.
001DDE  3               ispr4:
001DDE  3  18           	clc 				; next sprite.
001DDF  3  A5 68        	lda z80_x
001DE1  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
001DE3  3  85 68        	sta z80_x
001DE5  3  90 02        	bcc :+
001DE7  3  E6 69        	inc z80_i
001DE9  3               :
001DE9  3  CA           	dex
001DEA  3  D0 E2        	bne ispr1 			; repeat for remaining sprites.
001DEC  3  60           	rts  				; no more room in table.
001DED  3               ispr3:
001DED  3  20 3F 1E     	jsr cpsp			; initialise a sprite.
001DF0  3  CA           	dex				; one less space in the table.
001DF1  3  D0 D2        	bne ispr2
001DF3  3  60           	rts
001DF4  3               
001DF4  3               
001DF4  3               ;-----------------------------------------------------------------------
001DF4  3               ; Initialise sprites - but not player, we're keeping the old one.
001DF4  3               ;
001DF4  3               ; global:	-
001DF4  3               ; local:	x,y,ix
001DF4  3               ; calls:	cpsp
001DF4  3               ;-----------------------------------------------------------------------
001DF4  3               
001DF4  3               kspr:
001DF4  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
001DF6  3  A9 7F        	lda #<sprtab 			; sprite table.
001DF8  3  85 68        	sta z80_x
001DFA  3  A9 20        	lda #>sprtab
001DFC  3  85 69        	sta z80_i
001DFE  3               kspr2:
001DFE  3  A0 00        	ldy #0
001E00  3  B1 66        	lda (z80_hl),y 			; fetch byte.
001E02  3  C9 FF        	cmp #255 			; is it an end marker?
001E04  3  D0 01        	bne :+
001E06  3  60           	rts 				; yes, no more to do.
001E07  3               :
001E07  3  C9 00        	cmp #0
001E09  3  D0 0E        	bne kspr1 			; no, add to table as normal.
001E0B  3               
001E0B  3  18           	clc 				; next sprite.
001E0C  3  A5 66        	lda z80_l
001E0E  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
001E10  3  85 66        	sta z80_l
001E12  3  90 02        	bcc :+
001E14  3  E6 67        	inc z80_h
001E16  3               :
001E16  3  4C FE 1D     	jmp kspr2
001E19  3               kspr1:
001E19  3  A0 00        	ldy #0 				; fetch sprite type.
001E1B  3  B1 68        	lda (z80_ix),y
001E1D  3  C9 FF        	cmp #255 			; is it enabled yet?
001E1F  3  D0 08        	bne kspr4 			; yes, try another slot.
001E21  3               
001E21  3  A0 05        	ldy #5 				; next type.
001E23  3  B1 68        	lda (z80_ix),y
001E25  3  C9 FF        	cmp #255 			; is it enabled yet?
001E27  3  F0 0F        	beq kspr3 			; no, process this one.
001E29  3               kspr4:
001E29  3  18           	clc 				; next sprite.
001E2A  3  A5 68        	lda z80_x
001E2C  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
001E2E  3  85 68        	sta z80_x
001E30  3  90 02        	bcc :+
001E32  3  E6 69        	inc z80_i
001E34  3               :
001E34  3  CA           	dex	 			; repeat for remaining sprites.
001E35  3  D0 E2        	bne kspr1
001E37  3  60           	rts  				; no more room in table.
001E38  3               kspr3:
001E38  3  20 3F 1E     	jsr cpsp 			; copy sprite to table.
001E3B  3  CA           	dex	 			; one less space in the table.
001E3C  3  D0 C0        	bne kspr2
001E3E  3  60           	rts
001E3F  3               
001E3F  3               ;----------------------------------------------
001E3F  3               ; Copy sprite from list to table.
001E3F  3               ;
001E3F  3               ; global:	hl,ix
001E3F  3               ; local:	y
001E3F  3               ; calls:	evnt09
001E3F  3               ;----------------------------------------------
001E3F  3               
001E3F  3               cpsp:
001E3F  3  A0 00        	ldy #0				; fetch byte from table.
001E41  3  B1 66        	lda (z80_hl),y
001E43  3  91 68        	sta (z80_ix),y			; set up type.
001E45  3  A0 05        	ldy #PAM1ST
001E47  3  91 68        	sta (z80_ix),y 			; set up type.
001E49  3               
001E49  3  E6 66        	inc z80_l 			; move to next byte.
001E4B  3  D0 02        	bne :+
001E4D  3  E6 67        	inc z80_h
001E4F  3               :
001E4F  3  A0 00        	ldy #0 				; fetch byte from table.
001E51  3  B1 66        	lda (z80_hl),y
001E53  3  A0 06        	ldy #6
001E55  3  91 68        	sta (z80_ix),y			; set up image.
001E57  3               
001E57  3  E6 66        	inc z80_l 			; move to next byte.
001E59  3  D0 02        	bne :+
001E5B  3  E6 67        	inc z80_h
001E5D  3               :
001E5D  3  A0 00        	ldy #0
001E5F  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
001E61  3  A0 08        	ldy #8
001E63  3  91 68        	sta (z80_ix),y 			; set up coordinate.
001E65  3               
001E65  3  A9 C8        	lda #200 			; set initial coordinate off screen.
001E67  3  A0 03        	ldy #3
001E69  3  91 68        	sta (z80_ix),y
001E6B  3               
001E6B  3  E6 66        	inc z80_l 			; move to next byte.
001E6D  3  D0 02        	bne :+
001E6F  3  E6 67        	inc z80_h
001E71  3               :
001E71  3  A0 00        	ldy #0 				; fetch byte from table.
001E73  3  B1 66        	lda (z80_hl),y
001E75  3  A0 09        	ldy #9
001E77  3  91 68        	sta (z80_ix),y 			; set up coordinate.
001E79  3               
001E79  3  E6 66        	inc z80_l 			; move to next byte.
001E7B  3  D0 02        	bne :+
001E7D  3  E6 67        	inc z80_h
001E7F  3               :
001E7F  3  A9 00        	lda #0				; zeroes in accumulator.
001E81  3  A0 07        	ldy #7 				; reset frame number.
001E83  3  91 68        	sta (z80_ix),y
001E85  3  A0 0A        	ldy #10 			; reset direction.
001E87  3  91 68        	sta (z80_ix),y
001E89  3  A0 0D        	ldy #13				; reset jump pointer low.
001E8B  3  91 68        	sta (z80_ix),y
001E8D  3  A0 0E        	ldy #14	 			; reset jump pointer high.
001E8F  3  91 68        	sta (z80_ix),y
001E91  3               
001E91  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
001E93  3  A0 10        	ldy #16
001E95  3  91 68        	sta (z80_ix),y
001E97  3               evis0:
001E97  3  20 F0 29     	jsr evnt09 			; perform event.
001E9A  3               
001E9A  3  18           	clc
001E9B  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
001E9D  3  69 11        	adc #TABSIZ		 	; next sprite.
001E9F  3  85 68        	sta z80_x
001EA1  3  90 02        	bcc :+
001EA3  3  E6 69        	inc z80_i
001EA5  3               :
001EA5  3  60           	rts
001EA6  3               
001EA6  3               
001EA6  3               ;-------------------------------------
001EA6  3               ; Clear the play area window.
001EA6  3               ;-------------------------------------
001EA6  3               
001EA6  3               clw:
001EA6  3  AD 10 03     	lda wintop			; get coordinates of window.
001EA9  3  8D 3F 03     	sta dispy			; put into dispx for calculation.
001EAC  3  AD 11 03     	lda winlft
001EAF  3  8D 3E 03     	sta dispx
001EB2  3               
001EB2  3  AD 12 03     	lda winhgt			; height of window.
001EB5  3  8D 3F 13     	sta rrow			; copy to b register.
001EB8  3               clw3:
001EB8  3  AD 13 03     	lda winwid 			; width of window.
001EBB  3  8D 3E 13     	sta rcol
001EBE  3               clw2:
001EBE  3  20 64 11     	jsr gprad 			; get print address.
001EC1  3  A9 00        	lda #0				; zero byte to write.
001EC3  3  A2 07        	ldx #7				; pixel height of each cell.
001EC5  3               clw1:
001EC5  3  BC DA 11     	ldy scrtab,x
001EC8  3  91 80        	sta (scraddr),y 			; copy to screen.
001ECA  3  CA           	dex				; next screen row down.
001ECB  3  10 F8        	bpl clw1
001ECD  3               
001ECD  3  EE 3E 03     	inc dispx			; next column.
001ED0  3  CE 3E 13     	dec rcol			; one less to do.
001ED3  3  D0 E9        	bne clw2			; repeat for remaining columns.
001ED5  3               
001ED5  3  AD 11 03     	lda winlft			; get left edge.
001ED8  3  8D 3E 03     	sta dispx 			; reset x.
001EDB  3  EE 3F 03     	inc dispy 			; next line down.
001EDE  3               
001EDE  3  CE 3F 13     	dec rrow
001EE1  3  D0 D5        	bne clw3			; repeat down the screen.
001EE3  3               
001EE3  3  AD 10 03     	lda wintop			; get coordinates of window.
001EE6  3  8D 34 03     	sta chary			; put into display position.
001EE9  3  AD 11 03     	lda winlft
001EEC  3  8D 33 03     	sta charx
001EEF  3  60           	rts
001EF0  3               
001EF0  3               
001EF0  3               ; Effects code.
001EF0  3               ; Ticker routine is called 25 times per second.
001EF0  3               
001EF0  3               scrly:
001EF0  3               	; 43.xx.xx rts  	
001EF0  3  60           	rts
001EF1  3               
001EF1  3               	; 98.00.01 .word txtscr         ; get screen address.
001EF1  3  4A 07        	.word txtscr         ; get screen address.
001EF3  3               
001EF3  3               	; 29.03.05 ld b, 8 	; 8 pixel rows.
001EF3  3  A9 08        	lda #8; 8 pixel rows.
001EF5  3  85 63        	sta z80_b
001EF7  3               
001EF7  3               	; 41.04.xx push hl 	; store screen address.
001EF7  3  A5 67        	lda z80_h
001EF9  3  48           	pha
001EFA  3  A5 66        	lda z80_l
001EFC  3  48           	pha
001EFD  3               
001EFD  3               scrly1:
001EFD  3               	; 41.04.xx push bc 	; store rows on stack.
001EFD  3  A5 63        	lda z80_b
001EFF  3  48           	pha
001F00  3  A5 62        	lda z80_c
001F02  3  48           	pha
001F03  3               
001F03  3               	; 41.04.xx push hl 	
001F03  3  A5 67        	lda z80_h
001F05  3  48           	pha
001F06  3  A5 66        	lda z80_l
001F08  3  48           	pha
001F09  3               
001F09  3               	; 29.03.02 ld a, (txtwid) 	; characters wide.
001F09  3  AD 45 07     	lda txtwid
001F0C  3  85 61        	sta z80_a
001F0E  3               
001F0E  3               	; 29.03.03 ld b, a 	; put into the loop counter.
001F0E  3  A5 61        	lda z80_a
001F10  3  85 63        	sta z80_b
001F12  3               
001F12  3               	; 02.03.xx and a 	; reset carry flag.
001F12  3  A5 61        	lda z80_a
001F14  3  25 61        	and z80_a
001F16  3               
001F16  3               scrly0:
001F16  3               	; 46.01.xx rl (hl) 	; rotate left.
001F16  3  A0 00        	ldy #0
001F18  3  B1 66        	lda (z80_hl),y
001F1A  3  2A           	rol a
001F1B  3  91 66        	sta (z80_hl),y
001F1D  3               
001F1D  3               	; 13.03.xx dec l 	; char left.
001F1D  3  C6 66        	dec z80_l
001F1F  3               
001F1F  3               	; 15.00.xx djnz scrly0 	; repeat for width of ticker message.
001F1F  3  C6 63        	dec z80_b
001F21  3  F0 03        	beq :+
001F23  3  4C 16 1F     	jmp scrly0
001F26  3               :
001F26  3               	; 40.04.xx pop hl 	
001F26  3  68           	pla
001F27  3  85 66        	sta z80_l
001F29  3  68           	pla
001F2A  3  85 67        	sta z80_h
001F2C  3               
001F2C  3               	; 22.03.xx inc h 	; next row down.
001F2C  3  E6 67        	inc z80_h
001F2E  3               
001F2E  3               	; 40.04.xx pop bc 	; retrieve row counter from stack.
001F2E  3  68           	pla
001F2F  3  85 62        	sta z80_c
001F31  3  68           	pla
001F32  3  85 63        	sta z80_b
001F34  3               
001F34  3               	; 15.00.xx djnz scrly1 	; repeat for all rows.
001F34  3  C6 63        	dec z80_b
001F36  3  F0 03        	beq :+
001F38  3  4C FD 1E     	jmp scrly1
001F3B  3               :
001F3B  3               	; 29.04.02 ld hl, (txtpos) 	; get text pointer.
001F3B  3  AD 46 07     	lda txtpos
001F3E  3  85 66        	sta z80_l
001F40  3  AD 47 07     	lda txtpos+1
001F43  3  85 67        	sta z80_h
001F45  3               
001F45  3               	; 29.03.01 ld a, (hl) 	; find character we"re displaying.
001F45  3  A0 00        	ldy #0
001F47  3  B1 66        	lda (z80_hl),y
001F49  3  85 61        	sta z80_a
001F4B  3               
001F4B  3               	; 02.05.xx and 127 	; remove end marker bit if applicable.
001F4B  3  A5 61        	lda z80_a
001F4D  3  29 7F        	and #127
001F4F  3               
001F4F  3               	; 06.05.xx cp 13 	; is it newline?
001F4F  3  A5 61        	lda z80_a
001F51  3  C9 0D        	cmp #13
001F53  3               
001F53  3               	; 28.06.00 jr nz, scrly5 	; no, it's okay.
001F53  3  F0 03        	beq :+
001F55  3  4C 5C 1F     	jmp scrly5
001F58  3               :
001F58  3               	; 29.03.05 ld a, 32 	; convert to a space instead.
001F58  3  A9 20        	lda #32; convert to a space instead.
001F5A  3  85 61        	sta z80_a
001F5C  3               
001F5C  3               scrly5:
001F5C  3               	; 49.xx.xx rlca  	
001F5C  3  26 61        	rol z80_a
001F5E  3               
001F5E  3               	; 49.xx.xx rlca  	
001F5E  3  26 61        	rol z80_a
001F60  3               
001F60  3               	; 49.xx.xx rlca  	; multiply by 8 to find char.
001F60  3  26 61        	rol z80_a
001F62  3               
001F62  3               	; 29.03.03 ld b, a 	; store shift in b.
001F62  3  A5 61        	lda z80_a
001F64  3  85 63        	sta z80_b
001F66  3               
001F66  3               	; 02.05.xx and 3 	; keep within 768-byte range of font.
001F66  3  A5 61        	lda z80_a
001F68  3  29 03        	and #3
001F6A  3               
001F6A  3               	; 29.03.03 ld d, a 	; that's our high byte.
001F6A  3  A5 61        	lda z80_a
001F6C  3  85 65        	sta z80_d
001F6E  3               
001F6E  3               	; 29.03.03 ld a, b 	; restore the shift.
001F6E  3  A5 63        	lda z80_b
001F70  3  85 61        	sta z80_a
001F72  3               
001F72  3               	; 02.05.xx and 248 	
001F72  3  A5 61        	lda z80_a
001F74  3  29 F8        	and #248
001F76  3               
001F76  3               	; 29.03.03 ld e, a 	
001F76  3  A5 61        	lda z80_a
001F78  3  85 64        	sta z80_e
001F7A  3               
001F7A  3               	; 29.04.02 ld hl, (23606) 	; font address.
001F7A  3  AD 28 27     	lda FontPtr
001F7D  3  85 66        	sta z80_l
001F7F  3  AD 29 27     	lda FontPtr+1
001F82  3  85 67        	sta z80_h
001F84  3               
001F84  3               	; 01.04.04 add hl, de 	; point to image of character.
001F84  3  20 BD 38     	jsr add_hl_de
001F87  3               
001F87  3               	; 17.04.04 ex de, hl 	; need the address in de.
001F87  3  20 3C 39     	jsr ex_de_hl
001F8A  3               
001F8A  3               	; 40.04.xx pop hl 	
001F8A  3  68           	pla
001F8B  3  85 66        	sta z80_l
001F8D  3  68           	pla
001F8E  3  85 67        	sta z80_h
001F90  3               
001F90  3               	; 29.03.02 ld a, (txtbit) 	
001F90  3  AD 44 07     	lda txtbit
001F93  3  85 61        	sta z80_a
001F95  3               
001F95  3               	; 29.03.03 ld c, a 	
001F95  3  A5 61        	lda z80_a
001F97  3  85 62        	sta z80_c
001F99  3               
001F99  3               	; 29.03.05 ld b, 8 	
001F99  3  A9 08        	lda #8
001F9B  3  85 63        	sta z80_b
001F9D  3               
001F9D  3               scrly3:
001F9D  3               	; 29.03.01 ld a, (de) 	; get image of char line.
001F9D  3  A0 00        	ldy #0
001F9F  3  B1 64        	lda (z80_de),y
001FA1  3  85 61        	sta z80_a
001FA3  3               
001FA3  3               	; 02.03.xx and c 	; test relevant bit of char.
001FA3  3  A5 61        	lda z80_a
001FA5  3  25 62        	and z80_c
001FA7  3               
001FA7  3               	; 28.06.00 jr z, scrly2 	; not set - skip.
001FA7  3  D0 03        	bne :+
001FA9  3  4C B5 1F     	jmp scrly2
001FAC  3               :
001FAC  3               	; 22.01.xx inc (hl) 	; set bit.
001FAC  3  A0 00        	ldy #0
001FAE  3  B1 66        	lda (z80_hl),y
001FB0  3  18           	clc
001FB1  3  69 01        	adc #1
001FB3  3  91 66        	sta (z80_hl),y
001FB5  3               
001FB5  3               scrly2:
001FB5  3               	; 22.03.xx inc h 	; next line of window.
001FB5  3  E6 67        	inc z80_h
001FB7  3               
001FB7  3               	; 22.04.xx inc de 	; next line of char.
001FB7  3  E6 64        	inc z80_e
001FB9  3  D0 02        	bne :+
001FBB  3  E6 65        	inc z80_d
001FBD  3               :
001FBD  3               	; 15.00.xx djnz scrly3 	
001FBD  3  C6 63        	dec z80_b
001FBF  3  F0 03        	beq :+
001FC1  3  4C 9D 1F     	jmp scrly3
001FC4  3               :
001FC4  3               	; 29.04.00 ld hl, txtbit 	; bit of text to display.
001FC4  3  A9 44        	lda #<(txtbit)
001FC6  3  85 66        	sta z80_l
001FC8  3  A9 07        	lda #>(txtbit)
001FCA  3  85 67        	sta z80_h
001FCC  3               
001FCC  3               	; 53.01.xx rrc (hl) 	; next bit of char to use.
001FCC  3  A0 00        	ldy #0
001FCE  3  B1 66        	lda (z80_hl),y
001FD0  3  6A           	ror a
001FD1  3  91 66        	sta (z80_hl),y
001FD3  3               
001FD3  3               	; 43.06.xx rts nc 	; not reached end of character yet.
001FD3  3  B0 01        	bcs :+
001FD5  3  60           	rts
001FD6  3               :
001FD6  3               	; 29.04.02 ld hl, (txtpos) 	; text pointer.
001FD6  3  AD 46 07     	lda txtpos
001FD9  3  85 66        	sta z80_l
001FDB  3  AD 47 07     	lda txtpos+1
001FDE  3  85 67        	sta z80_h
001FE0  3               
001FE0  3               	; 29.03.01 ld a, (hl) 	; what was the character?
001FE0  3  A0 00        	ldy #0
001FE2  3  B1 66        	lda (z80_hl),y
001FE4  3  85 61        	sta z80_a
001FE6  3               
001FE6  3               	; 22.04.xx inc hl 	; next character in message.
001FE6  3  E6 66        	inc z80_l
001FE8  3  D0 02        	bne :+
001FEA  3  E6 67        	inc z80_h
001FEC  3               :
001FEC  3               	; 47.xx.xx rla  	; end of message?
001FEC  3  06 61        	asl z80_a
001FEE  3               
001FEE  3               
001FEE  3               ; rts nc              ; not yet, exit here.
001FEE  3               ; ld a,201            ; code for rts.
001FEE  3               ; ld (scrly),a        ; disable scrolling routine.
001FEE  3               
001FEE  3               	; 28.06.00 jr nc, scrly6 	; not yet - continue.
001FEE  3  B0 03        	bcs :+
001FF0  3  4C FD 1F     	jmp scrly6
001FF3  3               :
001FF3  3               scrly4:
001FF3  3               	; 29.04.02 ld hl, (txtini) 	; start of scrolling message.
001FF3  3  AD 48 07     	lda txtini
001FF6  3  85 66        	sta z80_l
001FF8  3  AD 49 07     	lda txtini+1
001FFB  3  85 67        	sta z80_h
001FFD  3               
001FFD  3               scrly6:
001FFD  3               	; 29.02.04 ld (txtpos), hl 	; new text pointer position.
001FFD  3  A5 66        	lda z80_l
001FFF  3  8D 46 07     	sta txtpos
002002  3  A5 67        	lda z80_h
002004  3  8D 47 07     	sta txtpos+1
002007  3               
002007  3               	; 43.xx.xx rts  	
002007  3  60           	rts
002008  3               
002008  3               iscrly:
002008  3               	; 04.00.xx call prescr 	; set up display position.
002008  3  20 B9 17     	jsr prescr
00200B  3               
00200B  3               	; 29.04.00 ld hl, msgdat 	; text messages.
00200B  3  A9 9E        	lda #<(msgdat)
00200D  3  85 66        	sta z80_l
00200F  3  A9 2A        	lda #>(msgdat)
002011  3  85 67        	sta z80_h
002013  3               
002013  3               	; 29.03.03 ld a, b 	; width.
002013  3  A5 63        	lda z80_b
002015  3  85 61        	sta z80_a
002017  3               
002017  3               	; 13.03.xx dec a 	; subtract one.
002017  3  C6 61        	dec z80_a
002019  3               
002019  3               	; 06.05.xx cp 32 	; is it between 1 and 32?
002019  3  A5 61        	lda z80_a
00201B  3  C9 20        	cmp #32
00201D  3               
00201D  3               	; 28.06.00 jr nc, iscrl0 	; no, disable messages.
00201D  3  B0 03        	bcs :+
00201F  3  4C 3F 20     	jmp iscrl0
002022  3               :
002022  3               	; 29.03.03 ld a, c 	; message number.
002022  3  A5 62        	lda z80_c
002024  3  85 61        	sta z80_a
002026  3               
002026  3               	; 29.03.03 ld d, b 	; copy width to d.
002026  3  A5 63        	lda z80_b
002028  3  85 65        	sta z80_d
00202A  3               
00202A  3               	; 04.00.xx call getwrd 	; find message start.
00202A  3  20 C6 17     	jsr getwrd
00202D  3               
00202D  3               	; 29.03.03 ld b, d 	; restore width to b register.
00202D  3  A5 65        	lda z80_d
00202F  3  85 63        	sta z80_b
002031  3               
002031  3               	; 29.02.04 ld (txtini), hl 	; set initial text position.
002031  3  A5 66        	lda z80_l
002033  3  8D 48 07     	sta txtini
002036  3  A5 67        	lda z80_h
002038  3  8D 49 07     	sta txtini+1
00203B  3               
00203B  3               	; 29.03.05 ld a, 42 	; code for ld hl,(nn).
00203B  3  A9 2A        	lda #42; code for ld hl,(nn).
00203D  3  85 61        	sta z80_a
00203F  3               
00203F  3               iscrl0:
00203F  3               	; 29.02.03 ld (scrly), a 	; enable/disable scrolling routine.
00203F  3  A5 61        	lda z80_a
002041  3  8D F0 1E     	sta scrly
002044  3               
002044  3               	; 04.00.xx call prescr 	; set up display position.
002044  3  20 B9 17     	jsr prescr
002047  3               
002047  3               	; 04.00.xx call gprad 	; get print address.
002047  3  20 64 11     	jsr gprad
00204A  3               
00204A  3               	; 29.03.03 ld l, b 	; width in b so copy to hl.
00204A  3  A5 63        	lda z80_b
00204C  3  85 66        	sta z80_l
00204E  3               
00204E  3               	; 29.03.05 ld h, 0 	; no high byte.
00204E  3  A9 00        	lda #0; no high byte.
002050  3  85 67        	sta z80_h
002052  3               
002052  3               	; 13.04.xx dec hl 	; width minus one.
002052  3  C6 66        	dec z80_l
002054  3  D0 02        	bne :+
002056  3  C6 67        	dec z80_h
002058  3               :
002058  3               	; 01.04.04 add hl, de 	; add width.
002058  3  20 BD 38     	jsr add_hl_de
00205B  3               
00205B  3               	; 29.02.04 ld (txtscr), hl 	; set text screen address.
00205B  3  A5 66        	lda z80_l
00205D  3  8D 4A 07     	sta txtscr
002060  3  A5 67        	lda z80_h
002062  3  8D 4B 07     	sta txtscr+1
002065  3               
002065  3               	; 29.03.03 ld a, b 	; width.
002065  3  A5 63        	lda z80_b
002067  3  85 61        	sta z80_a
002069  3               
002069  3               	; 29.02.03 ld (txtwid), a 	; set width in working storage.
002069  3  A5 61        	lda z80_a
00206B  3  8D 45 07     	sta txtwid
00206E  3               
00206E  3               	; 29.04.00 ld hl, txtbit 	; bit of text to display.
00206E  3  A9 44        	lda #<(txtbit)
002070  3  85 66        	sta z80_l
002072  3  A9 07        	lda #>(txtbit)
002074  3  85 67        	sta z80_h
002076  3               
002076  3               	; 29.01.05 ld (hl), 128 	; start with leftmost bit.
002076  3  A9 80        	lda #128
002078  3  A0 00        	ldy #0
00207A  3  91 66        	sta (z80_hl),y
00207C  3               
00207C  3               	; 28.00.xx jr scrly4 	
00207C  3  4C F3 1F     	jmp scrly4
00207F  3               
00207F  3               
00207F  3               ; Sprite table ------------------------------------------------------------------
00207F  3               
00207F  3               
00207F  3               ; ix+0  = type.
00207F  3               ; ix+1  = sprite image number.
00207F  3               ; ix+2  = frame.
00207F  3               ; ix+3  = y coord.
00207F  3               ; ix+4  = x coord.
00207F  3               
00207F  3               
00207F  3               ; ix+5  = new type.
00207F  3               ; ix+6  = new image number.
00207F  3               ; ix+7  = new frame.
00207F  3               ; ix+8  = new y coord.
00207F  3               ; ix+9  = new x coord.
00207F  3               
00207F  3               
00207F  3               ; ix+10 = direction.
00207F  3               ; ix+11 = parameter 1.
00207F  3               ; ix+12 = parameter 2.
00207F  3               ; ix+13 = jump pointer low.
00207F  3               ; ix+14 = jump pointer high.
00207F  3               ; ix+15 = data pointer low.
00207F  3               ; ix+16 = data pointer high.
00207F  3               
00207F  3               ; block NUMSPR * TABSIZ,255
00207F  3               sprtab:
00207F  3  FF FF FF FF  	.res NUMSPR*TABSIZ,255
002083  3  FF FF FF FF  
002087  3  FF FF FF FF  
00214B  3               
00214B  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
00214F  3  FF FF FF 00  
002153  3  C0 78 00 00  
00215C  3               
00215C  3               	; 98.00.00 roomtb .byte 0                      ; start room map offset.
00215C  3  07           roomtb:	.byte 7                      ; start room map offset.
00215D  3               
00215D  3               
00215D  3               ; Everything below here will be generated by the editors.
00215D  3               
00215D  3               
00215D  3               ; Sounds.
00215D  3               ;
00215D  3               ;	; 98.00.00 fx1    .byte 128+15         ; volume and mixer.
00215D  3               ;fx1:	.byte 128+15         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 31             ; white noise.
00215D  3               ;	.byte 31             ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 1000           ; tone register.
00215D  3               ;	.word 1000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 128+15         ; volume and mixer.
00215D  3               ;	.byte 128+15         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 25             ; white noise.
00215D  3               ;	.byte 25             ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 1000           ; tone register.
00215D  3               ;	.word 1000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 128+14         ; volume and mixer.
00215D  3               ;	.byte 128+14         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 19             ; white noise.
00215D  3               ;	.byte 19             ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 1000           ; tone register.
00215D  3               ;	.word 1000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 128+13         ; volume and mixer.
00215D  3               ;	.byte 128+13         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 13             ; white noise.
00215D  3               ;	.byte 13             ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 1000           ; tone register.
00215D  3               ;	.word 1000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 128+12         ; volume and mixer.
00215D  3               ;	.byte 128+12         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 7              ; white noise.
00215D  3               ;	.byte 7              ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 1000           ; tone register.
00215D  3               ;	.word 1000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 128+11         ; volume and mixer.
00215D  3               ;	.byte 128+11         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 0              ; white noise.
00215D  3               ;	.byte 0              ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 1000           ; tone register.
00215D  3               ;	.word 1000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 128+10         ; volume and mixer.
00215D  3               ;	.byte 128+10         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 6              ; white noise.
00215D  3               ;	.byte 6              ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 1000           ; tone register.
00215D  3               ;	.word 1000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 128+8          ; volume and mixer.
00215D  3               ;	.byte 128+8          ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 12             ; white noise.
00215D  3               ;	.byte 12             ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 1000           ; tone register.
00215D  3               ;	.word 1000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 128+6          ; volume and mixer.
00215D  3               ;	.byte 128+6          ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 18             ; white noise.
00215D  3               ;	.byte 18             ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 1000           ; tone register.
00215D  3               ;	.word 1000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 128+3          ; volume and mixer.
00215D  3               ;	.byte 128+3          ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 24             ; white noise.
00215D  3               ;	.byte 24             ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 1000           ; tone register.
00215D  3               ;	.word 1000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 255
00215D  3               ;	.byte 255
00215D  3               ;
00215D  3               ;	; 98.00.00 fx2    .byte 064+15         ; volume and mixer.
00215D  3               ;fx2:	.byte 064+15         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 27             ; white noise.
00215D  3               ;	.byte 27             ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 1000           ; tone register.
00215D  3               ;	.word 1000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+14         ; volume and mixer.
00215D  3               ;	.byte 064+14         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 31             ; white noise.
00215D  3               ;	.byte 31             ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 2000           ; tone register.
00215D  3               ;	.word 2000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+13         ; volume and mixer.
00215D  3               ;	.byte 064+13         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 28             ; white noise.
00215D  3               ;	.byte 28             ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 3000           ; tone register.
00215D  3               ;	.word 3000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+12         ; volume and mixer.
00215D  3               ;	.byte 064+12         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 31             ; white noise.
00215D  3               ;	.byte 31             ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 2000           ; tone register.
00215D  3               ;	.word 2000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+11         ; volume and mixer.
00215D  3               ;	.byte 064+11         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 29             ; white noise.
00215D  3               ;	.byte 29             ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 1000           ; tone register.
00215D  3               ;	.word 1000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+10         ; volume and mixer.
00215D  3               ;	.byte 064+10         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 31             ; white noise.
00215D  3               ;	.byte 31             ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 2000           ; tone register.
00215D  3               ;	.word 2000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+9          ; volume and mixer.
00215D  3               ;	.byte 064+9          ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 30             ; white noise.
00215D  3               ;	.byte 30             ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 3000           ; tone register.
00215D  3               ;	.word 3000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+8          ; volume and mixer.
00215D  3               ;	.byte 064+8          ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 31             ; white noise.
00215D  3               ;	.byte 31             ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 2000           ; tone register.
00215D  3               ;	.word 2000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+7          ; volume and mixer.
00215D  3               ;	.byte 064+7          ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 31             ; white noise.
00215D  3               ;	.byte 31             ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 1000           ; tone register.
00215D  3               ;	.word 1000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+6          ; volume and mixer.
00215D  3               ;	.byte 064+6          ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 31             ; white noise.
00215D  3               ;	.byte 31             ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 2000           ; tone register.
00215D  3               ;	.word 2000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 255
00215D  3               ;	.byte 255
00215D  3               ;
00215D  3               ;	; 98.00.00 fx3    .byte 064+15         ; volume and mixer.
00215D  3               ;fx3:	.byte 064+15         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 0              ; white noise.
00215D  3               ;	.byte 0              ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 4000           ; tone register.
00215D  3               ;	.word 4000           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+15         ; volume and mixer.
00215D  3               ;	.byte 064+15         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 0              ; white noise.
00215D  3               ;	.byte 0              ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 4100           ; tone register.
00215D  3               ;	.word 4100           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+14         ; volume and mixer.
00215D  3               ;	.byte 064+14         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 0              ; white noise.
00215D  3               ;	.byte 0              ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 4200           ; tone register.
00215D  3               ;	.word 4200           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+14         ; volume and mixer.
00215D  3               ;	.byte 064+14         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 0              ; white noise.
00215D  3               ;	.byte 0              ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 4300           ; tone register.
00215D  3               ;	.word 4300           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+13         ; volume and mixer.
00215D  3               ;	.byte 064+13         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 0              ; white noise.
00215D  3               ;	.byte 0              ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 4400           ; tone register.
00215D  3               ;	.word 4400           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+13         ; volume and mixer.
00215D  3               ;	.byte 064+13         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 0              ; white noise.
00215D  3               ;	.byte 0              ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 4500           ; tone register.
00215D  3               ;	.word 4500           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+12         ; volume and mixer.
00215D  3               ;	.byte 064+12         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 0              ; white noise.
00215D  3               ;	.byte 0              ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 4600           ; tone register.
00215D  3               ;	.word 4600           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+12         ; volume and mixer.
00215D  3               ;	.byte 064+12         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 0              ; white noise.
00215D  3               ;	.byte 0              ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 4700           ; tone register.
00215D  3               ;	.word 4700           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+11         ; volume and mixer.
00215D  3               ;	.byte 064+11         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 0              ; white noise.
00215D  3               ;	.byte 0              ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 4800           ; tone register.
00215D  3               ;	.word 4800           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 064+10         ; volume and mixer.
00215D  3               ;	.byte 064+10         ; volume and mixer.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 0              ; white noise.
00215D  3               ;	.byte 0              ; white noise.
00215D  3               ;
00215D  3               ;	; 98.00.01 .word 4900           ; tone register.
00215D  3               ;	.word 4900           ; tone register.
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 255
00215D  3               ;	.byte 255
00215D  3               ;
00215D  3               ;	; 98.00.00 .byte 99             ; temporary marker.
00215D  3               ;	.byte 99             ; temporary marker.
00215D  3               ;
00215D  3               
00215D  3               ; User routine.  Put your own code in here to be called with USER instruction.
00215D  3               ; if USER has an argument it will be passed in the accumulator.
00215D  3               
00215D  3               user:
00215D  3               	; 43.xx.xx rts  	
00215D  3  60           	rts
00215E  3               
00215E  3               ;----------------------------------------------------
00215E  3               ; Missing vars 
00215E  3               ;----------------------------------------------------
00215E  3               
00215E  3  xx xx xx xx  MAP:		.res 3*256	; properties map buffer.
002162  3  xx xx xx xx  
002166  3  xx xx xx xx  
00245E  3               
00245E  3  xx xx xx xx  SCADTB_lb:	.res 192	; screen address table, just below map.
002462  3  xx xx xx xx  
002466  3  xx xx xx xx  
00251E  3  xx xx xx xx  SCADTB_hb:	.res 192
002522  3  xx xx xx xx  
002526  3  xx xx xx xx  
0025DE  3               
0025DE  3  xx xx xx xx  SHRAPN:		.res 55*6	; shrapnel table, just below screen address table.
0025E2  3  xx xx xx xx  
0025E6  3  xx xx xx xx  
002728  3               
002728  3  00 00        FontPtr:	.byte 0,0
00272A  3  00 00        TmpAddr:	.byte 0,0
00272C  3               
00272C  3  00           loopa:		.byte 0
00272D  3  00           loopb:		.byte 0
00272E  3  00           loopc:		.byte 0
00272F  3               
00272F  3               
00272F  3               WINDOWTOP = 1
00272F  3               WINDOWLFT = 1
00272F  3               WINDOWHGT = 22
00272F  3               WINDOWWID = 22 ;"
00272F  3               MAPWID = 11
00272F  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255
002733  3  FF FF FF FF  
002737  3  FF FF FF     
00273A  3               mapdat:
00273A  3  FF FF FF 00          .byte 255,255,255,0,1,2,255,255,255,255,255
00273E  3  01 02 FF FF  
002742  3  FF FF FF     
002745  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255
002749  3  FF FF FF FF  
00274D  3  FF FF FF     
002750  3  0A           stmap:  .byte 10
002751  3               
002751  3               evnt00:
002751  3                       ; SPRITEINK command
002751  3  AD 0E 03             lda joyval
002754  3  29 08                and #8
002756  3  F0 03                beq :+
002758  3  4C 75 27             jmp a00080
00275B  3               :
00275B  3  20 8B 13             jsr laddu
00275E  3  F0 03                beq :+
002760  3  4C 75 27             jmp a00080
002763  3               :
002763  3  A9 01                lda #1
002765  3  A0 06                ldy #6
002767  3  91 68                sta (z80_ix),y
002769  3  20 C6 1A             jsr animsp
00276C  3  A0 08                ldy #8
00276E  3  B1 68                lda (z80_ix),y
002770  3  38                   sec
002771  3  E9 02                sbc #2
002773  3  91 68                sta (z80_ix),y
002775  3  AD 0E 03     a00080: lda joyval
002778  3  29 04                and #4
00277A  3  F0 03                beq :+
00277C  3  4C 99 27             jmp a00151
00277F  3               :
00277F  3  20 73 13             jsr laddd
002782  3  F0 03                beq :+
002784  3  4C 99 27             jmp a00151
002787  3               :
002787  3  A9 01                lda #1
002789  3  A0 06                ldy #6
00278B  3  91 68                sta (z80_ix),y
00278D  3  20 C6 1A             jsr animsp
002790  3  A0 08                ldy #8
002792  3  B1 68                lda (z80_ix),y
002794  3  18                   clc
002795  3  69 02                adc #2
002797  3  91 68                sta (z80_ix),y
002799  3  AD 0E 03     a00151: lda joyval
00279C  3  29 01                and #1
00279E  3  F0 03                beq :+
0027A0  3  4C C0 27             jmp a00226
0027A3  3               :
0027A3  3  20 4B 14             jsr cangr
0027A6  3  F0 03                beq :+
0027A8  3  4C C0 27             jmp a00226
0027AB  3               :
0027AB  3  20 D4 09             jsr vapour
0027AE  3  A9 00                lda #0
0027B0  3  A0 06                ldy #6
0027B2  3  91 68                sta (z80_ix),y
0027B4  3  20 C6 1A             jsr animsp
0027B7  3  A0 09                ldy #9
0027B9  3  B1 68                lda (z80_ix),y
0027BB  3  18                   clc
0027BC  3  69 02                adc #2
0027BE  3  91 68                sta (z80_ix),y
0027C0  3  AD 0E 03     a00226: lda joyval
0027C3  3  29 02                and #2
0027C5  3  F0 03                beq :+
0027C7  3  4C E7 27             jmp a00302
0027CA  3               :
0027CA  3  20 37 14             jsr cangl
0027CD  3  F0 03                beq :+
0027CF  3  4C E7 27             jmp a00302
0027D2  3               :
0027D2  3  20 D4 09             jsr vapour
0027D5  3  A9 00                lda #0
0027D7  3  A0 06                ldy #6
0027D9  3  91 68                sta (z80_ix),y
0027DB  3  20 C6 1A             jsr animsp
0027DE  3  A0 09                ldy #9
0027E0  3  B1 68                lda (z80_ix),y
0027E2  3  38                   sec
0027E3  3  E9 02                sbc #2
0027E5  3  91 68                sta (z80_ix),y
0027E7  3               a00302: ; SPRITEINK command
0027E7  3  60                   rts
0027E8  3               evnt01:
0027E8  3  A9 00                lda #0
0027EA  3  A0 0A                ldy #10
0027EC  3  D1 68                cmp (z80_ix),y
0027EE  3  F0 03                beq *+5
0027F0  3  4C 31 28             jmp b00144
0027F3  3  20 8B 13             jsr laddu
0027F6  3  F0 03                beq :+
0027F8  3  4C 07 28             jmp b00064
0027FB  3               :
0027FB  3  A0 08                ldy #8
0027FD  3  B1 68                lda (z80_ix),y
0027FF  3  38                   sec
002800  3  E9 02                sbc #2
002802  3  91 68                sta (z80_ix),y
002804  3  4C 31 28             jmp b00144
002807  3  A9 02        b00064: lda #2
002809  3  85 65                sta z80_d
00280B  3  20 EB 15             jsr random
00280E  3  85 67                sta z80_h
002810  3  20 91 0D             jsr imul
002813  3  A5 67                lda z80_h
002815  3  8D 36 03             sta varrnd
002818  3  A9 00                lda #0
00281A  3  CD 36 03             cmp varrnd
00281D  3  F0 03                beq *+5
00281F  3  4C 2B 28             jmp b00131
002822  3  A9 02                lda #2
002824  3  A0 0A                ldy #10
002826  3  91 68                sta (z80_ix),y
002828  3  4C 31 28             jmp b00144
00282B  3  A9 03        b00131: lda #3
00282D  3  A0 0A                ldy #10
00282F  3  91 68                sta (z80_ix),y
002831  3  A9 01        b00144: lda #1
002833  3  A0 0A                ldy #10
002835  3  D1 68                cmp (z80_ix),y
002837  3  F0 03                beq *+5
002839  3  4C 7A 28             jmp b00287
00283C  3  20 73 13             jsr laddd
00283F  3  F0 03                beq :+
002841  3  4C 50 28             jmp b00207
002844  3               :
002844  3  A0 08                ldy #8
002846  3  B1 68                lda (z80_ix),y
002848  3  18                   clc
002849  3  69 02                adc #2
00284B  3  91 68                sta (z80_ix),y
00284D  3  4C 7A 28             jmp b00287
002850  3  A9 02        b00207: lda #2
002852  3  85 65                sta z80_d
002854  3  20 EB 15             jsr random
002857  3  85 67                sta z80_h
002859  3  20 91 0D             jsr imul
00285C  3  A5 67                lda z80_h
00285E  3  8D 36 03             sta varrnd
002861  3  A9 00                lda #0
002863  3  CD 36 03             cmp varrnd
002866  3  F0 03                beq *+5
002868  3  4C 74 28             jmp b00273
00286B  3  A9 02                lda #2
00286D  3  A0 0A                ldy #10
00286F  3  91 68                sta (z80_ix),y
002871  3  4C 7A 28             jmp b00287
002874  3  A9 03        b00273: lda #3
002876  3  A0 0A                ldy #10
002878  3  91 68                sta (z80_ix),y
00287A  3  A9 02        b00287: lda #2
00287C  3  A0 0A                ldy #10
00287E  3  D1 68                cmp (z80_ix),y
002880  3  F0 03                beq *+5
002882  3  4C DF 28             jmp b00483
002885  3  20 37 14             jsr cangl
002888  3  F0 03                beq :+
00288A  3  4C 9F 28             jmp b00362
00288D  3               :
00288D  3  A0 09                ldy #9
00288F  3  B1 68                lda (z80_ix),y
002891  3  38                   sec
002892  3  E9 02                sbc #2
002894  3  91 68                sta (z80_ix),y
002896  3  A9 00                lda #0
002898  3  A0 07                ldy #7
00289A  3  91 68                sta (z80_ix),y
00289C  3  4C A5 28             jmp b00376
00289F  3  A9 03        b00362: lda #3
0028A1  3  A0 0A                ldy #10
0028A3  3  91 68                sta (z80_ix),y
0028A5  3  A9 04        b00376: lda #4
0028A7  3  85 65                sta z80_d
0028A9  3  20 EB 15             jsr random
0028AC  3  85 67                sta z80_h
0028AE  3  20 91 0D             jsr imul
0028B1  3  A5 67                lda z80_h
0028B3  3  8D 36 03             sta varrnd
0028B6  3  A9 00                lda #0
0028B8  3  CD 36 03             cmp varrnd
0028BB  3  F0 03                beq *+5
0028BD  3  4C DF 28             jmp b00483
0028C0  3  20 8B 13             jsr laddu
0028C3  3  F0 03                beq :+
0028C5  3  4C D1 28             jmp b00456
0028C8  3               :
0028C8  3  A9 00                lda #0
0028CA  3  A0 0A                ldy #10
0028CC  3  91 68                sta (z80_ix),y
0028CE  3  4C DF 28             jmp b00483
0028D1  3  20 73 13     b00456: jsr laddd
0028D4  3  F0 03                beq :+
0028D6  3  4C DF 28             jmp b00483
0028D9  3               :
0028D9  3  A9 01                lda #1
0028DB  3  A0 0A                ldy #10
0028DD  3  91 68                sta (z80_ix),y
0028DF  3  A9 03        b00483: lda #3
0028E1  3  A0 0A                ldy #10
0028E3  3  D1 68                cmp (z80_ix),y
0028E5  3  F0 03                beq *+5
0028E7  3  4C 44 29             jmp b00679
0028EA  3  20 4B 14             jsr cangr
0028ED  3  F0 03                beq :+
0028EF  3  4C 04 29             jmp b00559
0028F2  3               :
0028F2  3  A0 09                ldy #9
0028F4  3  B1 68                lda (z80_ix),y
0028F6  3  18                   clc
0028F7  3  69 02                adc #2
0028F9  3  91 68                sta (z80_ix),y
0028FB  3  A9 01                lda #1
0028FD  3  A0 07                ldy #7
0028FF  3  91 68                sta (z80_ix),y
002901  3  4C 0A 29             jmp b00572
002904  3  A9 02        b00559: lda #2
002906  3  A0 0A                ldy #10
002908  3  91 68                sta (z80_ix),y
00290A  3  A9 04        b00572: lda #4
00290C  3  85 65                sta z80_d
00290E  3  20 EB 15             jsr random
002911  3  85 67                sta z80_h
002913  3  20 91 0D             jsr imul
002916  3  A5 67                lda z80_h
002918  3  8D 36 03             sta varrnd
00291B  3  A9 00                lda #0
00291D  3  CD 36 03             cmp varrnd
002920  3  F0 03                beq *+5
002922  3  4C 44 29             jmp b00679
002925  3  20 8B 13             jsr laddu
002928  3  F0 03                beq :+
00292A  3  4C 36 29             jmp b00652
00292D  3               :
00292D  3  A9 00                lda #0
00292F  3  A0 0A                ldy #10
002931  3  91 68                sta (z80_ix),y
002933  3  4C 44 29             jmp b00679
002936  3  20 73 13     b00652: jsr laddd
002939  3  F0 03                beq :+
00293B  3  4C 44 29             jmp b00679
00293E  3               :
00293E  3  A9 01                lda #1
002940  3  A0 0A                ldy #10
002942  3  91 68                sta (z80_ix),y
002944  3  A9 00        b00679: lda #0
002946  3  85 63                sta z80_b
002948  3  20 07 1B             jsr sktyp
00294B  3  B0 03                bcs :+
00294D  3  4C 55 29             jmp b00709
002950  3               :
002950  3  A9 01                lda #1
002952  3  8D 3C 03             sta deadf
002955  3  60           b00709: rts
002956  3               evnt02:
002956  3  A9 00                lda #0
002958  3  A0 0B                ldy #11
00295A  3  D1 68                cmp (z80_ix),y
00295C  3  F0 03                beq *+5
00295E  3  4C 83 29             jmp c00096
002961  3  A9 42                lda #66
002963  3  A0 0C                ldy #12
002965  3  D1 68                cmp (z80_ix),y
002967  3  F0 03                beq *+5
002969  3  4C 75 29             jmp c00065
00296C  3  A9 01                lda #1
00296E  3  A0 0B                ldy #11
002970  3  91 68                sta (z80_ix),y
002972  3  4C 80 29             jmp c00091
002975  3  A0 0C        c00065: ldy #12
002977  3  B1 68                lda (z80_ix),y
002979  3  38                   sec
00297A  3  E9 01                sbc #1
00297C  3  A0 0C                ldy #12
00297E  3  91 68                sta (z80_ix),y
002980  3  4C A2 29     c00091: jmp c00163
002983  3  A9 46        c00096: lda #70
002985  3  A0 0C                ldy #12
002987  3  D1 68                cmp (z80_ix),y
002989  3  F0 03                beq *+5
00298B  3  4C 97 29             jmp c00136
00298E  3  A9 00                lda #0
002990  3  A0 0B                ldy #11
002992  3  91 68                sta (z80_ix),y
002994  3  4C A2 29             jmp c00163
002997  3  A0 0C        c00136: ldy #12
002999  3  B1 68                lda (z80_ix),y
00299B  3  18                   clc
00299C  3  69 01                adc #1
00299E  3  A0 0C                ldy #12
0029A0  3  91 68                sta (z80_ix),y
0029A2  3               c00163: ; SPRITEINK command
0029A2  3  A9 00                lda #0
0029A4  3  85 63                sta z80_b
0029A6  3  20 07 1B             jsr sktyp
0029A9  3  B0 03                bcs :+
0029AB  3  4C E9 29             jmp c00311
0029AE  3               :
0029AE  3  A9 FF                lda #255
0029B0  3  A0 05                ldy #5
0029B2  3  91 68                sta (z80_ix),y
0029B4  3  A9 19                lda #25
0029B6  3  20 E8 0A             jsr explod
0029B9  3  AD 1B 03             lda vara
0029BC  3  38                   sec
0029BD  3  E9 01                sbc #1
0029BF  3  8D 1B 03             sta vara
0029C2  3  A9 00                lda #0
0029C4  3  CD 1B 03             cmp vara
0029C7  3  F0 03                beq *+5
0029C9  3  4C D1 29             jmp c00254
0029CC  3  A9 01                lda #1
0029CE  3  8D 3A 03             sta nexlev
0029D1  3               c00254: ; SPRITEINK command
0029D1  3  A9 64                lda #<100
0029D3  3  85 66                sta z80_l
0029D5  3  A9 00                lda #>100
0029D7  3  85 67                sta z80_h
0029D9  3  20 8B 10             jsr addsc
0029DC  3                       ; SOUND command
0029DC  3  A9 03                lda #3
0029DE  3  8D 34 03             sta chary
0029E1  3  A9 19                lda #25
0029E3  3  8D 33 03             sta charx
0029E6  3  20 39 10             jsr dscor
0029E9  3  60           c00311: rts
0029EA  3               evnt03:
0029EA  3  60                   rts
0029EB  3               evnt04:
0029EB  3  60                   rts
0029EC  3               evnt05:
0029EC  3  60                   rts
0029ED  3               evnt06:
0029ED  3  60                   rts
0029EE  3               evnt07:
0029EE  3  60                   rts
0029EF  3               evnt08:
0029EF  3  60                   rts
0029F0  3               evnt09:
0029F0  3  A9 02                lda #2
0029F2  3  A0 05                ldy #5
0029F4  3  D1 68                cmp (z80_ix),y
0029F6  3  F0 03                beq *+5
0029F8  3  4C 10 2A             jmp j00066
0029FB  3  AD 1B 03             lda vara
0029FE  3  18                   clc
0029FF  3  69 01                adc #1
002A01  3  8D 1B 03             sta vara
002A04  3  A9 00                lda #0
002A06  3  A0 0B                ldy #11
002A08  3  91 68                sta (z80_ix),y
002A0A  3  A9 45                lda #69
002A0C  3  A0 0C                ldy #12
002A0E  3  91 68                sta (z80_ix),y
002A10  3  60           j00066: rts
002A11  3               evnt10:
002A11  3  60                   rts
002A12  3               evnt11:
002A12  3  60                   rts
002A13  3               evnt12:
002A13  3  60                   rts
002A14  3               evnt13:
002A14  3  A9 03                lda #3
002A16  3  8D 1A 03             sta numlif
002A19  3  A9 00                lda #0
002A1B  3  8D 19 03             sta scno
002A1E  3  20 1D 1C             jsr nwscr
002A21  3                       ; COLOUR command
002A21  3                       ; BORDER command
002A21  3  20 62 06             jsr cls
002A24  3  A9 02                lda #2
002A26  3  8D 34 03             sta chary
002A29  3  A9 19                lda #25
002A2B  3  8D 33 03             sta charx
002A2E  3  A9 02                lda #2
002A30  3  20 B3 16             jsr dmsg
002A33  3  A9 05                lda #5
002A35  3  8D 34 03             sta chary
002A38  3  A9 19                lda #25
002A3A  3  8D 33 03             sta charx
002A3D  3  A9 03                lda #3
002A3F  3  20 B3 16             jsr dmsg
002A42  3  A9 00                lda #0
002A44  3  8D 34 03             sta chary
002A47  3  A9 09                lda #9
002A49  3  8D 33 03             sta charx
002A4C  3                       ; COLOUR command
002A4C  3  A9 01                lda #1
002A4E  3  20 B3 16             jsr dmsg
002A51  3  A9 03                lda #3
002A53  3  8D 34 03             sta chary
002A56  3  A9 19                lda #25
002A58  3  8D 33 03             sta charx
002A5B  3  20 39 10             jsr dscor
002A5E  3  60                   rts
002A5F  3               evnt14:
002A5F  3  A9 00                lda #0
002A61  3  8D 1B 03             sta vara
002A64  3  A9 06                lda #6
002A66  3  8D 34 03             sta chary
002A69  3  A9 1B                lda #27
002A6B  3  8D 33 03             sta charx
002A6E  3  AD 1A 03             lda numlif
002A71  3  20 A2 1B             jsr disply
002A74  3  60                   rts
002A75  3               evnt15:
002A75  3  A9 00                lda #0
002A77  3  A0 05                ldy #5
002A79  3  D1 68                cmp (z80_ix),y
002A7B  3  F0 03                beq *+5
002A7D  3  4C 85 2A             jmp p00032
002A80  3  A9 01                lda #1
002A82  3  8D 3C 03             sta deadf
002A85  3  60           p00032: rts
002A86  3               evnt16:
002A86  3                       ; SOUND command
002A86  3  AD 1A 03             lda numlif
002A89  3  38                   sec
002A8A  3  E9 01                sbc #1
002A8C  3  8D 1A 03             sta numlif
002A8F  3  60                   rts
002A90  3               evnt17:
002A90  3  A9 32                lda #50
002A92  3  20 BA 05             jsr delay
002A95  3  60                   rts
002A96  3               evnt18:
002A96  3  A9 32                lda #50
002A98  3  20 BA 05             jsr delay
002A9B  3  60                   rts
002A9C  3               evnt19:
002A9C  3  60                   rts
002A9D  3  60           ptcusr: rts
002A9E  3               msgdat:
002A9E  3  47 41 4D 45          .byte "GAME OVER",141
002AA2  3  20 4F 56 45  
002AA6  3  52 8D        
002AA8  3  44 49 41 4D          .byte "DIAMOND GEEZER",141
002AAC  3  4F 4E 44 20  
002AB0  3  47 45 45 5A  
002AB7  3  53 43 4F 52          .byte "SCORE",141
002ABB  3  45 8D        
002ABD  3  4C 49 56 45          .byte "LIVES",141
002AC1  3  53 8D        
002AC3  3  31 2E 20 4B          .byte "1. KEYBOARD",141
002AC7  3  45 59 42 4F  
002ACB  3  41 52 44 8D  
002ACF  3  32 2E 20 4B          .byte "2. KEMPSTON",141
002AD3  3  45 4D 50 53  
002AD7  3  54 4F 4E 8D  
002ADB  3  33 2E 20 53          .byte "3. SINCLAIR",141
002ADF  3  49 4E 43 4C  
002AE3  3  41 49 52 8D  
002AE7  3  20 20 57 65          .byte "  Welcome to Diamond Geezer...",13
002AEB  3  6C 63 6F 6D  
002AEF  3  65 20 74 6F  
002B06  3  4D 6F 76 65          .byte "Move around the levels",13
002B0A  3  20 61 72 6F  
002B0E  3  75 6E 64 20  
002B1D  3  63 6F 6C 6C          .byte "collecting diamonds and",13
002B21  3  65 63 74 69  
002B25  3  6E 67 20 64  
002B35  3  61 76 6F 69          .byte "avoiding the deadly",13
002B39  3  64 69 6E 67  
002B3D  3  20 74 68 65  
002B49  3  73 6B 75 6C          .byte "skulls   +",13
002B4D  3  6C 73 20 20  
002B51  3  20 2B 0D     
002B54  3  8D                   .byte 141
002B55  3               nummsg:
002B55  3  08                   .byte 8
002B56  3               chgfx:
002B56  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002B5A  3  00 00 00 00  
002B5E  3  FE FE FE 00          .byte 254,254,254,0,239,239,239,0
002B62  3  EF EF EF 00  
002B66  3  00 00 FF 00          .byte 0,0,255,0,0,0,255,0
002B6A  3  00 00 FF 00  
002B6E  3  AA 55 AA 55          .byte 170,85,170,85,170,85,170,85
002B72  3  AA 55 AA 55  
002B76  3               bcol:
002B76  3  47                   .byte 71
002B77  3  42                   .byte 66
002B78  3  47                   .byte 71
002B79  3  44                   .byte 68
002B7A  3               bprop:
002B7A  3  00                   .byte 0
002B7B  3  02                   .byte 2
002B7C  3  03                   .byte 3
002B7D  3  04                   .byte 4
002B7E  3               sprgfx:
002B7E  3  43 80 37 C5          .byte 67,128,55,197,103,226,39,229,19,228,15,248,1,240,1,240,3,240,3,224,7,224,15,224,23,208,19,144,56,24,120,60
002B82  3  67 E2 27 E5  
002B86  3  13 E4 0F F8  
002B9E  3  10 E0 4D F1          .byte 16,224,77,241,153,248,73,249,4,249,3,254,0,124,0,124,0,252,0,248,1,248,3,248,5,244,4,228,14,6,30,15
002BA2  3  99 F8 49 F9  
002BA6  3  04 F9 03 FE  
002BBE  3  04 38 53 7C          .byte 4,56,83,124,38,126,82,126,65,62,128,255,0,31,0,31,0,63,0,62,0,126,0,254,1,125,1,57,131,129,199,131
002BC2  3  26 7E 52 7E  
002BC6  3  41 3E 80 FF  
002BDE  3  01 0E 14 DF          .byte 1,14,20,223,137,159,148,159,144,79,224,63,192,7,192,7,192,15,128,15,128,31,128,63,64,95,64,78,96,224,241,224
002BE2  3  89 9F 94 9F  
002BE6  3  90 4F E0 3F  
002BFE  3  00 00 03 80          .byte 0,0,3,128,7,192,87,229,39,226,83,237,15,241,1,240,1,240,3,240,3,224,7,224,15,240,23,200,227,134,224,15
002C02  3  07 C0 57 E5  
002C06  3  27 E2 53 ED  
002C1E  3  00 00 00 E0          .byte 0,0,0,224,1,240,85,249,137,248,84,251,67,252,0,124,0,124,0,252,0,248,1,248,3,252,5,242,184,225,248,3
002C22  3  01 F0 55 F9  
002C26  3  89 F8 54 FB  
002C3E  3  00 00 00 38          .byte 0,0,0,56,0,124,85,126,34,126,213,62,16,255,0,31,0,31,0,63,0,62,0,126,0,255,129,124,110,56,254,0
002C42  3  00 7C 55 7E  
002C46  3  22 7E D5 3E  
002C5E  3  00 00 00 0E          .byte 0,0,0,14,0,31,149,95,136,159,181,79,196,63,192,7,192,7,192,15,128,15,128,31,192,63,32,95,27,142,63,128
002C62  3  00 1F 95 5F  
002C66  3  88 9F B5 4F  
002C7E  3  03 80 07 C0          .byte 3,128,7,192,7,224,7,224,67,224,35,241,253,250,33,247,3,242,3,225,7,224,15,224,23,208,19,144,56,24,120,60
002C82  3  07 E0 07 E0  
002C86  3  43 E0 23 F1  
002C9E  3  00 E0 01 F0          .byte 0,224,1,240,1,248,1,248,16,248,72,252,191,126,200,125,128,252,64,248,1,248,3,248,5,244,4,228,14,6,30,15
002CA2  3  01 F8 01 F8  
002CA6  3  10 F8 48 FC  
002CBE  3  00 38 00 7C          .byte 0,56,0,124,0,126,0,126,4,62,18,63,175,223,114,31,32,63,16,62,0,126,0,254,1,125,1,57,131,129,199,131
002CC2  3  00 7E 00 7E  
002CC6  3  04 3E 12 3F  
002CDE  3  00 0E 00 1F          .byte 0,14,0,31,128,31,128,31,129,15,196,143,235,247,220,135,200,15,132,15,128,31,128,63,64,95,64,78,96,224,241,224
002CE2  3  80 1F 80 1F  
002CE6  3  81 0F C4 8F  
002CFE  3  03 80 07 C0          .byte 3,128,7,192,7,224,87,229,35,226,83,253,13,241,1,240,3,240,3,224,7,224,7,224,7,224,3,160,15,112,15,112
002D02  3  07 E0 57 E5  
002D06  3  23 E2 53 FD  
002D1E  3  00 E0 01 F0          .byte 0,224,1,240,1,248,85,249,136,248,84,255,67,124,0,124,0,252,0,248,1,248,1,248,1,248,0,232,3,220,3,220
002D22  3  01 F8 55 F9  
002D26  3  88 F8 54 FF  
002D3E  3  00 38 00 7C          .byte 0,56,0,124,0,126,85,126,34,62,213,63,16,223,0,31,0,63,0,62,0,126,0,126,0,126,0,58,0,247,0,247
002D42  3  00 7E 55 7E  
002D46  3  22 3E D5 3F  
002D5E  3  00 0E 00 1F          .byte 0,14,0,31,128,31,149,95,136,143,245,79,196,55,192,7,192,15,128,15,128,31,128,31,128,31,128,14,192,61,192,61
002D62  3  80 1F 95 5F  
002D66  3  88 8F F5 4F  
002D7E  3  01 C0 C3 E0          .byte 1,192,195,224,199,224,39,224,47,192,31,243,15,143,15,128,15,192,7,216,7,246,7,247,59,224,33,192,224,0,224,0
002D82  3  C7 E0 27 E0  
002D86  3  2F C0 1F F3  
002D9E  3  00 70 30 F8          .byte 0,112,48,248,49,248,9,248,11,240,199,252,195,227,3,224,3,240,1,246,129,253,193,253,14,248,8,112,56,0,56,0
002DA2  3  31 F8 09 F8  
002DA6  3  0B F0 C7 FC  
002DBE  3  00 1C 0C 3E          .byte 0,28,12,62,12,126,2,126,2,252,49,255,240,248,0,248,0,252,128,125,96,127,112,127,3,190,2,28,14,0,14,0
002DC2  3  0C 7E 02 7E  
002DC6  3  02 FC 31 FF  
002DDE  3  00 07 83 0F          .byte 0,7,131,15,131,31,128,159,0,191,204,127,60,62,0,62,0,63,96,31,216,31,220,31,128,239,0,135,3,128,3,128
002DE2  3  83 1F 80 9F  
002DE6  3  00 BF CC 7F  
002DFE  3  01 C0 03 E0          .byte 1,192,3,224,7,224,199,227,207,207,63,240,15,128,15,128,15,192,7,192,55,232,47,244,227,231,225,199,0,0,0,0
002E02  3  07 E0 C7 E3  
002E06  3  CF CF 3F F0  
002E1E  3  00 70 00 F8          .byte 0,112,0,248,1,248,241,248,243,243,15,252,3,224,3,224,3,240,1,240,13,250,11,253,248,249,248,113,0,0,0,0
002E22  3  01 F8 F1 F8  
002E26  3  F3 F3 0F FC  
002E3E  3  00 1C 00 3E          .byte 0,28,0,62,0,126,60,126,252,252,3,255,0,248,0,248,0,252,0,124,131,126,66,255,126,62,126,28,0,0,0,0
002E42  3  00 7E 3C 7E  
002E46  3  FC FC 03 FF  
002E5E  3  00 07 80 0F          .byte 0,7,128,15,128,31,143,31,63,63,192,255,0,62,0,62,0,63,0,31,160,223,208,191,159,143,31,135,0,0,0,0
002E62  3  80 1F 8F 1F  
002E66  3  3F 3F C0 FF  
002E7E  3  01 C0 03 E3          .byte 1,192,3,227,7,227,7,228,15,200,207,240,223,128,47,128,15,192,63,192,231,224,231,240,3,232,1,196,0,7,0,7
002E82  3  07 E3 07 E4  
002E86  3  0F C8 CF F0  
002E9E  3  00 70 C0 F8          .byte 0,112,192,248,193,248,1,249,3,242,51,252,55,224,11,224,3,240,15,240,57,248,57,252,0,250,0,113,192,1,192,1
002EA2  3  C1 F8 01 F9  
002EA6  3  03 F2 33 FC  
002EBE  3  00 1C 30 3E          .byte 0,28,48,62,48,126,64,126,128,252,12,255,13,248,2,248,0,252,3,252,14,126,14,127,128,62,64,28,112,0,112,0
002EC2  3  30 7E 40 7E  
002EC6  3  80 FC 0C FF  
002EDE  3  00 07 8C 0F          .byte 0,7,140,15,140,31,144,31,32,63,195,63,3,126,0,190,0,63,0,255,131,159,195,159,160,15,16,7,28,0,28,0
002EE2  3  8C 1F 90 1F  
002EE6  3  20 3F C3 3F  
002EFE  3  01 C0 03 E0          .byte 1,192,3,224,7,224,199,227,207,207,63,240,15,128,15,128,15,192,7,192,55,232,47,244,227,231,225,199,0,0,0,0
002F02  3  07 E0 C7 E3  
002F06  3  CF CF 3F F0  
002F1E  3  00 70 00 F8          .byte 0,112,0,248,1,248,241,248,243,243,15,252,3,224,3,224,3,240,1,240,13,250,11,253,248,249,248,113,0,0,0,0
002F22  3  01 F8 F1 F8  
002F26  3  F3 F3 0F FC  
002F3E  3  00 1C 00 3E          .byte 0,28,0,62,0,126,60,126,252,252,3,255,0,248,0,248,0,252,0,124,131,126,66,255,126,62,126,28,0,0,0,0
002F42  3  00 7E 3C 7E  
002F46  3  FC FC 03 FF  
002F5E  3  00 07 80 0F          .byte 0,7,128,15,128,31,143,31,63,63,192,255,0,62,0,62,0,63,0,31,160,223,208,191,159,143,31,135,0,0,0,0
002F62  3  80 1F 8F 1F  
002F66  3  3F 3F C0 FF  
002F7E  3  1F F0 3F FC          .byte 31,240,63,252,95,254,79,62,110,31,76,159,253,127,215,255,83,255,127,223,47,30,138,184,160,96,234,224,255,224,127,192
002F82  3  5F FE 4F 3E  
002F86  3  6E 1F 4C 9F  
002F9E  3  07 FC 0F FF          .byte 7,252,15,255,151,255,147,207,219,135,211,39,255,95,245,255,212,255,223,247,139,199,34,174,40,24,58,184,63,248,31,240
002FA2  3  97 FF 93 CF  
002FA6  3  DB 87 D3 27  
002FBE  3  01 FF C3 FF          .byte 1,255,195,255,229,255,228,243,246,225,244,201,255,215,253,127,245,63,247,253,226,241,136,171,10,6,14,174,15,254,7,252
002FC2  3  E5 FF E4 F3  
002FC6  3  F6 E1 F4 C9  
002FDE  3  C0 7F F0 FF          .byte 192,127,240,255,249,127,249,60,125,184,125,50,255,245,255,95,253,79,125,255,120,188,226,42,130,129,131,171,131,255,1,255
002FE2  3  F9 7F F9 3C  
002FE6  3  7D B8 7D 32  
002FFE  3  0F F8 3F FC          .byte 15,248,63,252,127,250,124,242,248,118,249,50,254,191,255,235,255,202,251,254,120,244,29,81,6,5,7,87,7,255,3,254
003002  3  7F FA 7C F2  
003006  3  F8 76 F9 32  
00301E  3  03 FE 0F FF          .byte 3,254,15,255,159,254,159,60,190,29,190,76,255,175,255,250,191,242,190,255,30,61,71,84,65,129,193,213,193,255,128,255
003022  3  9F FE 9F 3C  
003026  3  BE 1D BE 4C  
00303E  3  80 FF C3 FF          .byte 128,255,195,255,167,255,39,207,111,135,47,147,255,235,191,254,175,252,239,191,71,143,17,213,80,96,112,117,240,127,224,63
003042  3  A7 FF 27 CF  
003046  3  6F 87 2F 93  
00305E  3  E0 3F F0 FF          .byte 224,63,240,255,233,255,201,243,219,225,203,228,255,250,175,255,43,255,251,239,209,227,68,117,20,24,92,29,252,31,248,15
003062  3  E9 FF C9 F3  
003066  3  DB E1 CB E4  
00307E  3  01 80 07 E0          .byte 1,128,7,224,27,56,103,142,159,195,224,63,159,193,159,193,207,195,103,134,51,140,27,24,13,48,6,96,3,192,1,128
003082  3  1B 38 67 8E  
003086  3  9F C3 E0 3F  
00309E  3  00 60 01 F8          .byte 0,96,1,248,6,206,153,227,231,240,248,15,103,240,103,240,243,240,153,225,12,227,6,198,3,76,1,152,0,240,0,96
0030A2  3  06 CE 99 E3  
0030A6  3  E7 F0 F8 0F  
0030BE  3  00 18 00 7E          .byte 0,24,0,126,129,179,230,120,57,252,254,3,25,252,25,252,60,252,102,120,195,56,129,177,0,211,0,102,0,60,0,24
0030C2  3  81 B3 E6 78  
0030C6  3  39 FC FE 03  
0030DE  3  00 06 80 1F          .byte 0,6,128,31,224,108,57,158,14,127,255,128,6,127,6,127,15,63,25,158,48,206,96,108,192,52,128,25,0,15,0,6
0030E2  3  E0 6C 39 9E  
0030E6  3  0E 7F FF 80  
0030FE  3               frmlst:
0030FE  3  00 04                .byte 0,4
003100  3  04 04                .byte 4,4
003102  3  08 02                .byte 8,2
003104  3  0A 01 0B 00          .byte 10,1,11,0
003108  3               scdat:
003108  3  D3 00 CE 00          .word 211,206,259,248
00310C  3  03 01 F8 00  
003110  3  01 FF 00 14          .byte 1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,255,1,8,2,2,255,1,10,2,2
003114  3  01 01 FF 00  
003118  3  14 01 01 FF  
003132  3  01 01 FF 00          .byte 1,1,255,0,6,2,2,255,0,10,2,2,1,1,255,0,6,2,2,255,0,10,2,2,1,1,2,2,255,1,11,2,2
003136  3  06 02 02 FF  
00313A  3  00 0A 02 02  
003153  3  FF 01 07 02          .byte 255,1,7,2,2,255,0,11,2,2,255,0,5,1,1,2,2,255,0,11,2,2,255,0,5,255,1,4,2,2,255,1,13
003157  3  02 FF 00 0B  
00315B  3  02 02 FF 00  
003174  3  02 02 01 01          .byte 2,2,1,1,1,0,0,2,2,255,0,13,2,2,0,1,1,0,0,2,2,255,0,13,2,2,0,255,1,6,2,2,255,1,6
003178  3  01 00 00 02  
00317C  3  02 FF 00 0D  
003197  3  02 02 FF 01          .byte 2,2,255,1,8,255,0,4,2,2,255,0,6,2,2,255,0,6,1,1,255,0,4,2,2,255,0,6,2,2,255,0,6
00319B  3  08 FF 00 04  
00319F  3  02 02 FF 00  
0031B8  3  FF 01 0A 02          .byte 255,1,10,2,2,255,1,7,2,2,1,1,1,255,0,8,2,2,255,0,7,2,2,0,1,1,255,0,8,2,2,255,0,7
0031BC  3  02 FF 01 07  
0031C0  3  02 02 01 01  
0031DA  3  02 02 00 FF          .byte 2,2,0,255,1,23,255,0,22
0031DE  3  01 17 FF 00  
0031E2  3  16           
0031E3  3  01 FF 00 14          .byte 1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,2,2,255,1,16,2,2
0031E7  3  01 01 FF 00  
0031EB  3  14 01 01 FF  
003204  3  01 01 02 02          .byte 1,1,2,2,255,0,16,2,2,1,1,2,2,255,0,16,2,2,255,1,11,2,2,255,1,11,255,0,9,2,2,1,1,1
003208  3  FF 00 10 02  
00320C  3  02 01 01 02  
003226  3  FF 00 06 01          .byte 255,0,6,1,1,255,0,9,2,2,1,1,1,255,0,6,255,1,9,2,2,255,1,7,2,2,255,1,4,255,0,7,2,2
00322A  3  01 FF 00 09  
00322E  3  02 02 01 01  
003248  3  FF 00 07 02          .byte 255,0,7,2,2,0,0,1,1,255,0,7,2,2,255,0,7,2,2,0,0,255,1,5,2,2,255,1,7,2,2,255,1,8
00324C  3  02 00 00 01  
003250  3  01 FF 00 07  
00326A  3  00 00 00 02          .byte 0,0,0,2,2,255,0,7,2,2,255,0,6,1,1,0,0,0,2,2,255,0,7,2,2,255,0,6,255,1,8,2,2
00326E  3  02 FF 00 07  
003272  3  02 02 FF 00  
00328B  3  FF 01 09 02          .byte 255,1,9,2,2,1,1,1,255,0,6,2,2,255,0,9,2,2,0,1,1,255,0,6,2,2,255,0,9,2,2,0,255,1,23
00328F  3  02 01 01 01  
003293  3  FF 00 06 02  
0032AE  3  FF 00 16             .byte 255,0,22
0032B1  3  FF 01 04 FF          .byte 255,1,4,255,0,10,1,255,0,6,255,1,5,255,0,10,1,255,0,6,255,1,5,255,0,10,1,255,0,6,255,1,9
0032B5  3  00 0A 01 FF  
0032B9  3  00 06 FF 01  
0032D2  3  02 02 FF 01          .byte 2,2,255,1,9,2,2,1,1,255,0,7,2,2,255,0,8,1,2,2,1,1,255,0,7,2,2,255,0,8,1,2,2
0032D6  3  09 02 02 01  
0032DA  3  01 FF 00 07  
0032F3  3  FF 01 04 02          .byte 255,1,4,2,2,255,1,8,2,2,255,1,4,2,2,1,1,0,0,2,2,255,0,8,2,2,255,0,4,2,2,1,1
0032F7  3  02 FF 01 08  
0032FB  3  02 02 FF 01  
003314  3  00 00 02 02          .byte 0,0,2,2,255,0,8,2,2,255,0,4,2,2,255,1,8,2,2,255,1,14,255,0,6,2,2,255,0,12,1,1,255,0,6
003318  3  FF 00 08 02  
00331C  3  02 FF 00 04  
003337  3  02 02 FF 00          .byte 2,2,255,0,12,255,1,5,2,2,255,1,9,2,2,255,1,6,0,0,0,2,2,255,0,9,2,2,255,0,4,1,1
00333B  3  0C FF 01 05  
00333F  3  02 02 FF 01  
003358  3  00 00 00 02          .byte 0,0,0,2,2,255,0,9,2,2,255,0,4,1,1,2,2,255,1,16,2,2,1,1,2,2,255,0,16,2,2,1,1
00335C  3  02 FF 00 09  
003360  3  02 02 FF 00  
003379  3  02 02 FF 00          .byte 2,2,255,0,16,2,2,255,1,6,2,2,255,1,8,2,2,255,1,6,255,0,4,2,2,255,0,4,1,0,0,0,2,2
00337D  3  10 02 02 FF  
003381  3  01 06 02 02  
00339B  3  FF 00 04 01          .byte 255,0,4,1,1,255,0,4,2,2,255,0,4,1,0,0,0,2,2,255,0,4,255,1,23
00339F  3  01 FF 00 04  
0033A3  3  02 02 FF 00  
0033B4  3  FF 01 0B FF          .byte 255,1,11,255,0,20,1,1,255,0,20,1,1,255,0,20,255,1,12,2,2,1,2,2,255,1,7,255,0,10,2,2,1
0033B8  3  00 14 01 01  
0033BC  3  FF 00 14 01  
0033D5  3  02 02 FF 00          .byte 2,2,255,0,5,1,1,255,0,10,2,2,1,2,2,255,0,5,255,1,6,2,2,255,1,10,2,2,255,1,4,255,0,4
0033D9  3  05 01 01 FF  
0033DD  3  00 0A 02 02  
0033F7  3  02 02 FF 00          .byte 2,2,255,0,10,2,2,0,0,1,1,255,0,4,2,2,255,0,10,2,2,0,0,255,1,15,2,2,255,1,7,255,0,6
0033FB  3  0A 02 02 00  
0033FF  3  00 01 01 FF  
003419  3  01 FF 00 06          .byte 1,255,0,6,2,2,255,0,5,1,1,255,0,6,1,255,0,6,2,2,255,0,5,255,1,6,2,2,1,1,2,2,255,1,8
00341D  3  02 02 FF 00  
003421  3  05 01 01 FF  
00343C  3  02 02 01 01          .byte 2,2,1,1,255,0,4,2,2,0,0,2,2,255,0,8,2,2,1,1,255,0,4,2,2,0,0,2,2,255,0,8,2,2
003440  3  FF 00 04 02  
003444  3  02 00 00 02  
00345E  3  01 01 02 02          .byte 1,1,2,2,255,1,11,2,2,255,1,7,2,2,255,0,11,2,2,1,255,0,4,1,1,2,2,255,0,11,2,2,1
003462  3  FF 01 0B 02  
003466  3  02 FF 01 07  
00347F  3  FF 00 04 FF          .byte 255,0,4,255,1,5,2,2,255,1,11,2,2,255,1,4,0,0,0,2,2,255,0,11,2,2,0,0,1,1,0,0,0
003483  3  01 05 02 02  
003487  3  FF 01 0B 02  
0034A0  3  02 02 FF 00          .byte 2,2,255,0,11,2,2,0,0,255,1,13
0034A4  3  0B 02 02 00  
0034A8  3  00 FF 01 0D  
0034AC  3               numsc:
0034AC  3  04                   .byte 4
0034AD  3               nmedat:
0034AD  3  00 00 68 78          .byte 0,0,104,120,1,2,128,16,2,3,152,16,2,3,56,80,2,3,80,160,2,3,32,16,255
0034B1  3  01 02 80 10  
0034B5  3  02 03 98 10  
0034C6  3  00 00 50 40          .byte 0,0,80,64,1,2,128,16,1,2,32,16,2,3,32,80,2,3,56,112,2,3,80,128,2,3,128,88,255
0034CA  3  01 02 80 10  
0034CE  3  01 02 20 10  
0034E3  3  00 00 40 88          .byte 0,0,64,136,1,2,40,56,1,2,112,64,2,3,16,40,2,3,16,128,2,3,88,152,2,3,136,88,2,3,160,16,2,3,160,160,255
0034E7  3  01 02 28 38  
0034EB  3  01 02 70 40  
003508  3  00 00 A0 10          .byte 0,0,160,16,1,2,16,104,1,2,64,80,1,2,112,112,2,3,16,16,2,3,88,16,2,3,136,160,2,3,16,152,2,3,64,24,255
00350C  3  01 02 10 68  
003510  3  01 02 40 50  
00352D  3               NUMOBJ = 1
00352D  3               objdta:
00352D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,56,120,254,56,120
003531  3  00 00 00 00  
003535  3  00 00 00 00  
003553  3               palett:
003553  3  00 02 14 13          .byte 0,2,20,19,128,227,200,146,0,2,20,19,128,227,200,146
003557  3  80 E3 C8 92  
00355B  3  00 02 14 13  
003563  3  00 23 3C 3F          .byte 0,35,60,63,224,227,252,255,0,35,60,63,224,227,252,255
003567  3  E0 E3 FC FF  
00356B  3  00 23 3C 3F  
003573  3  00 21 27 A2          .byte 0,33,39,162,243,64,128,244,0,33,39,162,243,64,128,244
003577  3  F3 40 80 F4  
00357B  3  00 21 27 A2  
003583  3  00 2C 50 78          .byte 0,44,80,120,108,109,146,219,0,44,80,120,108,109,146,219
003587  3  6C 6D 92 DB  
00358B  3  00 2C 50 78  
003593  3               font:
003593  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003597  3  00 00 00 00  
00359B  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
00359F  3  30 00 30 00  
0035A3  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
0035A7  3  00 00 00 00  
0035AB  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
0035AF  3  6C FE 6C 00  
0035B3  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
0035B7  3  7E 1E 7E 18  
0035BB  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
0035BF  3  30 6E CE 00  
0035C3  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
0035C7  3  7E CC 7E 00  
0035CB  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
0035CF  3  00 00 00 00  
0035D3  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
0035D7  3  18 18 0C 00  
0035DB  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
0035DF  3  30 30 60 00  
0035E3  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
0035E7  3  7E 18 3C 00  
0035EB  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
0035EF  3  7E 18 18 00  
0035F3  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0035F7  3  00 18 18 30  
0035FB  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
0035FF  3  7E 00 00 00  
003603  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
003607  3  00 38 38 00  
00360B  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
00360F  3  18 30 60 00  
003613  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
003617  3  F6 E6 7C 00  
00361B  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
00361F  3  18 18 7E 00  
003623  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
003627  3  7C C0 FE 00  
00362B  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
00362F  3  06 C6 7C 00  
003633  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
003637  3  D8 FE 18 00  
00363B  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
00363F  3  06 C6 7C 00  
003643  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
003647  3  C6 C6 7C 00  
00364B  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
00364F  3  18 30 30 00  
003653  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
003657  3  C6 C6 7C 00  
00365B  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
00365F  3  7E 06 7C 00  
003663  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
003667  3  00 00 30 00  
00366B  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
00366F  3  00 30 30 60  
003673  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
003677  3  30 18 0C 00  
00367B  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
00367F  3  00 7E 00 00  
003683  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
003687  3  0C 18 30 00  
00368B  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
00368F  3  18 00 18 00  
003693  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
003697  3  FE C0 7C 00  
00369B  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
00369F  3  FE C6 C6 00  
0036A3  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
0036A7  3  C6 C6 FC 00  
0036AB  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
0036AF  3  C0 C6 7C 00  
0036B3  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
0036B7  3  C6 CC F8 00  
0036BB  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
0036BF  3  C0 C0 FE 00  
0036C3  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
0036C7  3  C0 C0 C0 00  
0036CB  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
0036CF  3  DE C6 7C 00  
0036D3  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
0036D7  3  C6 C6 C6 00  
0036DB  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
0036DF  3  18 18 7E 00  
0036E3  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
0036E7  3  C6 C6 7C 00  
0036EB  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
0036EF  3  D8 CC C6 00  
0036F3  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
0036F7  3  C0 C0 FE 00  
0036FB  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
0036FF  3  C6 C6 C6 00  
003703  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
003707  3  DE CE C6 00  
00370B  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
00370F  3  C6 C6 7C 00  
003713  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
003717  3  FC C0 C0 00  
00371B  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
00371F  3  F6 DE 7C 00  
003723  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
003727  3  FC CC C6 00  
00372B  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
00372F  3  06 C6 7C 00  
003733  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
003737  3  30 30 30 00  
00373B  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
00373F  3  C6 C6 7C 00  
003743  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
003747  3  C6 6C 38 00  
00374B  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
00374F  3  C6 FE 6C 00  
003753  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
003757  3  38 6C C6 00  
00375B  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
00375F  3  30 30 30 00  
003763  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
003767  3  30 60 FE 00  
00376B  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
00376F  3  18 18 1E 00  
003773  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
003777  3  30 18 0C 00  
00377B  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
00377F  3  30 30 F0 00  
003783  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
003787  3  30 30 30 00  
00378B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
00378F  3  00 00 00 FF  
003793  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
003797  3  60 60 FE 00  
00379B  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
00379F  3  7C CC 7C 00  
0037A3  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
0037A7  3  66 66 7C 00  
0037AB  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
0037AF  3  60 60 3C 00  
0037B3  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
0037B7  3  CC CC 7C 00  
0037BB  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
0037BF  3  F8 C0 7C 00  
0037C3  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
0037C7  3  30 30 30 00  
0037CB  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
0037CF  3  CC 7C 0C 78  
0037D3  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
0037D7  3  CC CC CC 00  
0037DB  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
0037DF  3  30 30 78 00  
0037E3  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
0037E7  3  0C 0C 6C 38  
0037EB  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
0037EF  3  70 78 6C 00  
0037F3  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
0037F7  3  30 30 1C 00  
0037FB  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
0037FF  3  FC FC FC 00  
003803  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
003807  3  CC CC CC 00  
00380B  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
00380F  3  CC CC 78 00  
003813  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
003817  3  CC F8 C0 C0  
00381B  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
00381F  3  CC 7C 0C 0E  
003823  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
003827  3  60 60 60 00  
00382B  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
00382F  3  78 0C F8 00  
003833  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
003837  3  30 30 1C 00  
00383B  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
00383F  3  CC CC 78 00  
003843  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
003847  3  78 78 30 00  
00384B  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
00384F  3  FC FC 78 00  
003853  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
003857  3  30 78 CC 00  
00385B  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
00385F  3  CC 7C 0C 78  
003863  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
003867  3  30 60 FC 00  
00386B  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
00386F  3  18 18 1E 00  
003873  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
003877  3  18 18 18 00  
00387B  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
00387F  3  30 30 F0 00  
003883  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
003887  3  00 00 00 00  
00388B  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
00388F  3  E3 BB C6 7C  
003893  3               
003893  1               eind_asm:
003893  2               ;------------------------------------------------------
003893  2               ; z80.asm
003893  2               ; spectrum stuff
003893  2               ; adresses
003893  2               
003893  2               ;ws	 = $60
003893  2               
003893  2               ;z80_f	 = ws+$00
003893  2               ;z80_a	 = ws+$01
003893  2               ;z80_af	 = z80_f
003893  2               
003893  2               ;z80_c	 = ws+$02
003893  2               ;z80_b	 = ws+$03
003893  2               ;z80_bc	 = z80_c
003893  2               
003893  2               ;z80_e	 = ws+$04
003893  2               ;z80_d	 = ws+$05
003893  2               ;z80_de	 = z80_e
003893  2               
003893  2               ;z80_l	 = ws+$06
003893  2               ;z80_h	 = ws+$07
003893  2               ;z80_hl	 = z80_l
003893  2               
003893  2               ;z80_x    = ws+$08
003893  2               ;z80_i    = ws+$09
003893  2               ;z80_ix	 = z80_x
003893  2               
003893  2               ;z80_iy	 = ws+$0a
003893  2               
003893  2               ;z80_fp	 = ws+$0c
003893  2               ;z80_ap	 = ws+$0d
003893  2               
003893  2               ;z80_cp	 = ws+$0e
003893  2               ;z80_bp	 = ws+$0f
003893  2               ;z80_bcp = z80_cp
003893  2               
003893  2               ;z80_ep	 = ws+$10
003893  2               ;z80_dp	 = ws+$11
003893  2               ;z80_dep = z80_ep
003893  2               
003893  2               ;z80_lp	 = ws+$12
003893  2               ;z80_hp	 = ws+$13
003893  2               ;z80_hlp = z80_lp
003893  2               
003893  2               ;z80_sp   = ws+$14
003893  2               
003893  2               ;z80_reg0 = ws+$16
003893  2               ;z80_reg1 = ws+$17
003893  2               ;z80_reg2 = ws+$18
003893  2               ;z80_reg3 = ws+$19
003893  2               
003893  2               ;z80_r	 = ws+$1a
003893  2               
003893  2               ; Contains seperatly 1 bit set
003893  2               
003893  2               _bitmem0	= $f8
003893  2               _bitmem1	= $f9
003893  2               _bitmem2	= $fa
003893  2               _bitmem3	= $fb
003893  2               _bitmem4	= $fc
003893  2               _bitmem5	= $fd
003893  2               _bitmem6	= $fe
003893  2               _bitmem7	= $ff
003893  2               	
003893  2               ; constants	
003893  2               _bitvalue0	= $01	
003893  2               _bitvalue1	= $02	
003893  2               _bitvalue2	= $04	
003893  2               _bitvalue3	= $08	
003893  2               _bitvalue4	= $10	
003893  2               _bitvalue5	= $20	
003893  2               _bitvalue6	= $40	
003893  2               _bitvalue7	= $80	
003893  2               
003893  2               _notbitvalue0	= $fe	
003893  2               _notbitvalue1	= $fd	
003893  2               _notbitvalue2	= $fb	
003893  2               _notbitvalue3	= $f7	
003893  2               _notbitvalue4	= $ef	
003893  2               _notbitvalue5	= $df	
003893  2               _notbitvalue6	= $bf	
003893  2               _notbitvalue7	= $7f	
003893  2               
003893  2               
003893  2               add_hl_bc:
003893  2  A5 66        		lda z80_l
003895  2  18           		clc
003896  2  65 62        		adc z80_c
003898  2  85 66        		sta z80_l
00389A  2  A5 67        		lda z80_h
00389C  2  65 63        		adc z80_b
00389E  2  85 67        		sta z80_h
0038A0  2  60           		rts
0038A1  2               		
0038A1  2               add_ix_de:
0038A1  2  A5 68        		lda z80_ix
0038A3  2  18           		clc
0038A4  2  65 64        		adc z80_e
0038A6  2  85 68        		sta z80_ix
0038A8  2  A5 69        		lda z80_ix+1
0038AA  2  65 65        		adc z80_d
0038AC  2  85 69        		sta z80_ix+1
0038AE  2  60           		rts
0038AF  2               		
0038AF  2               add_iy_de:
0038AF  2  A5 6A        		lda z80_iy
0038B1  2  18           		clc
0038B2  2  65 64        		adc z80_e
0038B4  2  85 6A        		sta z80_iy
0038B6  2  A5 6B        		lda z80_iy+1
0038B8  2  65 65        		adc z80_d
0038BA  2  85 6B        		sta z80_iy+1
0038BC  2  60           		rts
0038BD  2               		
0038BD  2               add_hl_de:
0038BD  2  A5 66        		lda z80_l
0038BF  2  18           		clc
0038C0  2  65 64        		adc z80_e
0038C2  2  85 66        		sta z80_l
0038C4  2  A5 67        		lda z80_h
0038C6  2  65 65        		adc z80_d
0038C8  2  85 67        		sta z80_h
0038CA  2  60           		rts
0038CB  2               
0038CB  2               add_ix_bc:
0038CB  2  A5 68        		lda z80_ix
0038CD  2  18           		clc
0038CE  2  65 62        		adc z80_c
0038D0  2  85 68        		sta z80_ix
0038D2  2  A5 69        		lda z80_ix+1
0038D4  2  65 63        		adc z80_b
0038D6  2  85 69        		sta z80_ix+1
0038D8  2  60           		rts
0038D9  2               		
0038D9  2               add_iy_bc:
0038D9  2  A5 6A        		lda z80_iy
0038DB  2  18           		clc
0038DC  2  65 62        		adc z80_c
0038DE  2  85 6A        		sta z80_iy
0038E0  2  A5 6B        		lda z80_iy+1
0038E2  2  65 63        		adc z80_b
0038E4  2  85 6B        		sta z80_iy+1
0038E6  2  60           		rts
0038E7  2               		
0038E7  2               sbc_hl_de:
0038E7  2  A5 66        		lda z80_l
0038E9  2  E5 64        		sbc z80_e
0038EB  2  85 66        		sta z80_l
0038ED  2  A5 67        		lda z80_h
0038EF  2  E5 65        		sbc z80_d
0038F1  2  85 67        		sta z80_h
0038F3  2  60           		rts
0038F4  2               
0038F4  2               sbc_hl_bc:
0038F4  2  A5 66        		lda z80_l
0038F6  2  E5 62        		sbc z80_c
0038F8  2  85 66        		sta z80_l
0038FA  2  A5 67        		lda z80_h
0038FC  2  E5 63        		sbc z80_b
0038FE  2  85 67        		sta z80_h
003900  2  60           		rts
003901  2               
003901  2               cmp_hl_bc:
003901  2  A5 66        		lda z80_l
003903  2  C5 62        		cmp z80_c
003905  2  D0 04        		bne cmp_hl_bc_end
003907  2  A5 67        		lda z80_h
003909  2  C5 63        		cmp z80_b
00390B  2               cmp_hl_bc_end:
00390B  2  60           		rts
00390C  2               		
00390C  2               cmp_iy_ix:
00390C  2  A5 6A        		lda z80_iy
00390E  2  C5 68        		cmp z80_ix
003910  2  D0 04        		bne cmp_iy_ix_end
003912  2  A5 6B        		lda z80_iy+1
003914  2  C5 69        		cmp z80_ix+1
003916  2               cmp_iy_ix_end:
003916  2  60           		rts
003917  2               		
003917  2               dec_hl:
003917  2  A5 66        		lda z80_l
003919  2  D0 02        		bne dec_hl_no_dec_h
00391B  2  C6 67        		dec z80_h
00391D  2               dec_hl_no_dec_h:
00391D  2  C6 66        		dec z80_l
00391F  2  60           		rts
003920  2               	
003920  2               dec_ix:
003920  2  A5 68        		lda z80_ix
003922  2  D0 02        		bne dec_ix_no_dec_h
003924  2  C6 69        		dec z80_ix+1
003926  2               dec_ix_no_dec_h:
003926  2  C6 68        		dec z80_ix
003928  2  60           		rts
003929  2               		
003929  2               dec_bc:	
003929  2  A5 62        		lda z80_c
00392B  2  D0 02        		bne dec_bc_no_dec_b
00392D  2  C6 63        		dec z80_b
00392F  2               dec_bc_no_dec_b:
00392F  2  C6 62        		dec z80_c
003931  2  60           		rts
003932  2               	
003932  2               dec_de:
003932  2  A5 64        		lda z80_e
003934  2  D0 02        		bne dec_de_no_dec_d
003936  2  C6 65        		dec z80_d
003938  2               dec_de_no_dec_d:
003938  2  C6 64        		dec z80_e
00393A  2  60           		rts
00393B  2               		
00393B  2               ex_af_afs:
00393B  2  60           	rts
00393C  2               ex_de_hl:
00393C  2  A5 64        		lda z80_e
00393E  2  A6 66        		ldx z80_l
003940  2  86 64        		stx z80_e
003942  2  85 66        		sta z80_l
003944  2  A5 65        		lda z80_d
003946  2  A6 67        		ldx z80_h
003948  2  86 65        		stx z80_d
00394A  2  85 67        		sta z80_h
00394C  2  60           		rts
00394D  2               
00394D  2               exx:
00394D  2  A5 62        		lda z80_c
00394F  2  A4 6E        		ldy z80_cp
003951  2  84 62        		sty z80_c
003953  2  85 6E        		sta z80_cp
003955  2  A5 63        		lda z80_b
003957  2  A4 6F        		ldy z80_bp
003959  2  84 63        		sty z80_b
00395B  2  85 6F        		sta z80_bp
00395D  2  A5 64        		lda z80_e
00395F  2  A4 70        		ldy z80_ep
003961  2  84 64        		sty z80_e
003963  2  85 70        		sta z80_ep
003965  2  A5 65        		lda z80_d
003967  2  A4 71        		ldy z80_dp
003969  2  84 65        		sty z80_d
00396B  2  85 71        		sta z80_dp		
00396D  2  A5 80        		lda scraddr
00396F  2  A4 72        		ldy z80_lp
003971  2  84 80        		sty scraddr
003973  2  85 72        		sta z80_lp
003975  2  A5 81        		lda scraddr+1
003977  2  A4 73        		ldy z80_hp
003979  2  84 81        		sty scraddr+1
00397B  2  85 73        		sta z80_hp
00397D  2  60           		rts
00397E  2               		
00397E  2               ex_sp_hl:
00397E  2  BA           		tsx
00397F  2  BD 03 01     		lda $0103,x
003982  2  A4 67        		ldy z80_h
003984  2  85 67        		sta z80_h
003986  2  98           		tya
003987  2  9D 03 01     		sta $0103,x
00398A  2  BD 04 01     		lda $0104,x
00398D  2  A4 66        		ldy z80_l
00398F  2  85 66        		sta z80_l
003991  2  98           		tya
003992  2  9D 04 01     		sta $104,x
003995  2  60           		rts
003996  2               		
003996  2               ldi:
003996  2  60           	rts
003997  2               ldir:
003997  2  A0 00        		ldy #$00
003999  2  A6 63        		ldx z80_b
00399B  2  F0 0E        		beq ldir_last_page
00399D  2               ldir_loop:		
00399D  2  B1 66        		lda (z80_hl),y
00399F  2  91 64        		sta (z80_de),y
0039A1  2  C8           		iny
0039A2  2  D0 F9        		bne ldir_loop
0039A4  2  E6 67        		inc z80_h
0039A6  2  E6 65        		inc z80_d
0039A8  2  CA           		dex
0039A9  2  D0 F2        		bne ldir_loop
0039AB  2               ldir_last_page:
0039AB  2  A5 62        		lda z80_c
0039AD  2  F0 09        		beq ldir_end
0039AF  2               ldir_last_page_loop:		
0039AF  2  B1 66        		lda (z80_hl),y
0039B1  2  91 64        		sta (z80_de),y
0039B3  2  C8           		iny
0039B4  2  C4 62        		cpy z80_c
0039B6  2  D0 F7        		bne ldir_last_page_loop
0039B8  2               ldir_end:		
0039B8  2  86 62        		stx z80_c
0039BA  2  86 63        		stx z80_b
0039BC  2  98           		tya
0039BD  2  18           		clc
0039BE  2  65 66        		adc z80_l
0039C0  2  85 66        		sta z80_l
0039C2  2  90 02        		bcc *+4
0039C4  2  E6 67        		inc z80_h
0039C6  2  98           		tya
0039C7  2  18           		clc
0039C8  2  65 64        		adc z80_e
0039CA  2  85 64        		sta z80_e
0039CC  2  90 02        		bcc *+4
0039CE  2  E6 65        		inc z80_d
0039D0  2  60           		rts
0039D1  2               		
0039D1  2  A0 00        lddr:		ldy #$00
0039D3  2               lddr_loop:
0039D3  2  B1 66        		lda (z80_hl),y
0039D5  2  91 64        		sta (z80_de),y
0039D7  2  20 17 39     		jsr dec_hl
0039DA  2  20 32 39     		jsr dec_de
0039DD  2  20 29 39     		jsr dec_bc
0039E0  2  A5 63        		lda z80_b
0039E2  2  05 62        		ora z80_c
0039E4  2  D0 ED        		bne lddr_loop
0039E6  2  60           		rts
0039E7  2               ei:
0039E7  2  60           		rts
0039E8  2               di:
0039E8  2  60           		rts
0039E9  2               		
0039E9  2               ;-------------------------------------------------------------
0039E9  2               ; Set bits in bitmem
0039E9  2               ;-------------------------------------------------------------
0039E9  2               	
0039E9  2               z80_init:
0039E9  2  A2 00        	ldx #$00
0039EB  2  A9 01        	lda #$01
0039ED  2               z80_init_loop:		
0039ED  2  95 F8        	sta _bitmem0,x
0039EF  2  E8           	inx
0039F0  2  0A           	asl a
0039F1  2  D0 FA        	bne z80_init_loop
0039F3  2  60           	rts
0039F4  2               
0039F4  2               push_af:
0039F4  2               push_bc:
0039F4  2               push_de:
0039F4  2               push_hl:
0039F4  2               
0039F4  2               pop_af:
0039F4  2               pop_bc:
0039F4  2               pop_de:
0039F4  2               pop_ix:
0039F4  2               pop_hl:
0039F4  2               
0039F4  2               add_hl_hl:
0039F4  2               
0039F4  2               inc_bc:
0039F4  2               inc_de:
0039F4  2               inc_hl:
0039F4  2               inc_ix:
0039F4  2               inc_sp:
0039F4  2               
0039F4  2               cpir:
0039F4  2               
0039F4  2               ex_af_af:
0039F4  2               	rts
0039F5  2  60           
0039F5  1               
