ca65 V2.9.2 - (C) Copyright 1998-2000 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; BBC AGD Engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ; BBC Micro version by Kieran Connell 2018
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               .DEFINE asm_code $0e00		; assembly address _BEEB
000000r 1               .DEFINE load_address $1200	; load address _BEEB
000000r 1               
000000r 1               ;----------------------------------------------------------------------
000000r 1               ; BBC MICRO PLATFORM DEFINES
000000r 1               ;----------------------------------------------------------------------
000000r 1               
000000r 1               ; _BEEB MOS calls
000000r 1               
000000r 1               	OSBYTE	 = $fff4
000000r 1               	OSFILE	 = $ffdd
000000r 1               	OSWRCH	 = $ffee
000000r 1               	OSASCI	 = $ffe3
000000r 1               	OSWORD	 = $fff1
000000r 1               	OSFIND	 = $ffce
000000r 1               	OSGBPB	 = $ffd1
000000r 1               	OSARGS	 = $ffda
000000r 1               
000000r 1               	PAL_black = 0 ^ 7
000000r 1               	PAL_white = 7 ^ 7
000000r 1               
000000r 1               ; System constants
000000r 1               
000000r 1               	ScreenSize  = $1800	; Startaddress video RAM _BEEB
000000r 1               	ScreenAddr 	= $8000 - ScreenSize	; Screen size bytes _BEEB
000000r 1               	ScreenRowBytes = 256				; 40 columns
000000r 1               
000000r 1               	SpriteMaxY	= 177	; used for clipping bottom of screen
000000r 1               
000000r 1               ; AGD Engine Workspace
000000r 1               
000000r 1               	MAP 		= $300				; properties map buffer (3x256 bytes)
000000r 1               	SCADTB_lb	= MAP + $300
000000r 1               	SCADTB_hb	= SCADTB_lb + $100
000000r 1               
000000r 1               .if pflag
000000r 1                   SHRAPN 		= $B00 - (NUMSHR * SHRSIZ)	; shrapnel table (55x6 bytes)
000000r 1               .endif
000000r 1               
000000r 1               	sprtab		= $B00				; NUMSPR*TABSIZ
000000r 1               
000000r 1               ;----------------------------------------------------------------------
000000r 1               ; ZERO PAGE SEGMENT
000000r 1               ;----------------------------------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               
000000r 1               .include "z80-zp.inc"
000000r 1               .include "engine-zp.inc"
000000r 2               ;ws	 = $60
000000r 2               
000000r 2  xx           z80_f: .res 1;	 = ws+$00
000001r 2  xx           z80_a: .res 1;	 = ws+$01
000002r 2               z80_af	 = z80_f
000002r 2               
000002r 2  xx           z80_c: .res 1;	 = ws+$02
000003r 2  xx           z80_b: .res 1;	 = ws+$03
000004r 2               z80_bc	 = z80_c
000004r 2               
000004r 2  xx           z80_e: .res 1;	 = ws+$04
000005r 2  xx           z80_d: .res 1;	 = ws+$05
000006r 2               z80_de	 = z80_e
000006r 2               
000006r 2  xx           z80_l: .res 1;	 = ws+$06
000007r 2  xx           z80_h: .res 1;	 = ws+$07
000008r 2               z80_hl	 = z80_l
000008r 2               
000008r 2  xx           z80_x: .res 1;    = ws+$08
000009r 2  xx           z80_i: .res 1;    = ws+$09
00000Ar 2               z80_ix	 = z80_x
00000Ar 2               
00000Ar 2  xx xx        z80_iy: .res 2;	 = ws+$0a
00000Cr 2               
00000Cr 2  xx           z80_fp: .res 1;	 = ws+$0c
00000Dr 2  xx           z80_ap: .res 1;	 = ws+$0d
00000Er 2               
00000Er 2  xx           z80_cp: .res 1;	 = ws+$0e
00000Fr 2  xx           z80_bp: .res 1;	 = ws+$0f
000010r 2               z80_bcp	 = z80_cp
000010r 2               
000010r 2  xx           z80_ep: .res 1;	 = ws+$10
000011r 2  xx           z80_dp: .res 1;	 = ws+$11
000012r 2               z80_dep	 = z80_ep
000012r 2               
000012r 2  xx           z80_lp: .res 1;	 = ws+$12
000013r 2  xx           z80_hp: .res 1;	 = ws+$13
000014r 2               z80_hlp	 = z80_lp
000014r 2               
000014r 2  xx xx        z80_sp: .res 2;   = ws+$14
000016r 2               
000016r 2  xx           z80_reg0: .res 1; = ws+$16
000017r 2  xx           z80_reg1: .res 1; = ws+$17
000018r 2  xx           z80_reg2: .res 1; = ws+$18
000019r 2  xx           z80_reg3: .res 1; = ws+$19
00001Ar 2               
00001Ar 2               ;z80_r: .res 1;	 = ws+$1a
00001Ar 2               
00001Ar 1               
00001Ar 2               ;----------------------------------------------------------------------
00001Ar 2               ; AGD 6502 Engine Zero Page Variables
00001Ar 2               ;----------------------------------------------------------------------
00001Ar 2               
00001Ar 2               ; Variables start here.
00001Ar 2               
00001Ar 2  xx           scno:	.res 1			; present screen number.
00001Br 2  xx           numlif:	.res 1			; number of lives.
00001Cr 2               
00001Cr 2  xx           vara:	.res 1			; general-purpose variable.
00001Dr 2  xx           varb:	.res 1			; general-purpose variable.
00001Er 2  xx           varc:	.res 1			; general-purpose variable.
00001Fr 2  xx           vard:	.res 1			; general-purpose variable.
000020r 2  xx           vare:	.res 1			; general-purpose variable.
000021r 2  xx           varf:	.res 1			; general-purpose variable.
000022r 2  xx           varg:	.res 1			; general-purpose variable.
000023r 2  xx           varh:	.res 1			; general-purpose variable.
000024r 2  xx           vari:	.res 1			; general-purpose variable.
000025r 2  xx           varj:	.res 1			; general-purpose variable.
000026r 2  xx           vark:	.res 1			; general-purpose variable.
000027r 2  xx           varl:	.res 1			; general-purpose variable.
000028r 2  xx           varm:	.res 1			; general-purpose variable.
000029r 2  xx           varn:	.res 1			; general-purpose variable.
00002Ar 2  xx           varo:	.res 1			; general-purpose variable.
00002Br 2  xx           varp:	.res 1			; general-purpose variable.
00002Cr 2  xx           varq:	.res 1			; general-purpose variable.
00002Dr 2  xx           varr:	.res 1			; general-purpose variable.
00002Er 2  xx           vars:	.res 1			; general-purpose variable.
00002Fr 2  xx           vart:	.res 1			; general-purpose variable.
000030r 2  xx           varu:	.res 1			; general-purpose variable.
000031r 2  xx           varv:	.res 1			; general-purpose variable.
000032r 2  xx           varw:	.res 1			; general-purpose variable.
000033r 2  xx           varz:	.res 1			; general-purpose variable.
000034r 2               
000034r 2  xx           charx:	.res 1			; cursor x position.
000035r 2  xx           chary:	.res 1			; cursor y position.
000036r 2               
000036r 2  xx           clock:	.res 1			; last clock reading.
000037r 2  xx           varrnd:	.res 1	        ; last random number.
000038r 2  xx           varobj:	.res 1  	    ; last object number.
000039r 2  xx           varopt:	.res 1     		; last option chosen from menu.
00003Ar 2  xx           varblk:	.res 1  		; block type.
00003Br 2  xx           nexlev:	.res 1			; next level flag.
00003Cr 2  xx           restfl:	.res 1			; restart screen flag.
00003Dr 2  xx           deadf:	.res 1			; dead flag.
00003Er 2  xx           gamwon:	.res 1			; game won flag.
00003Fr 2  xx           dispx:	.res 1			; cursor x position.
000040r 2  xx           dispy:	.res 1			; cursor y position.
000041r 2               
000041r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000042r 2  xx           joyval:	.res 1			; joystick reading.
000043r 2  xx           frmno:	.res 1			; selected frame.
000044r 2               
000044r 2               ;----------------------------------------------------
000044r 2               ; Missing vars 
000044r 2               ;----------------------------------------------------
000044r 2               
000044r 2  xx           loopa:		.res 1
000045r 2  xx           loopb:		.res 1
000046r 2  xx           loopc:		.res 1
000047r 2  xx xx        FontPtr:    .res 2
000049r 2               
000049r 2               ; Local vars
000049r 2               
000049r 2  xx xx        scraddr:    .res 2
00004Br 2  xx xx        fntaddr:    .res 2
00004Dr 2  xx xx        tileaddr:   .res 2
00004Fr 2  xx xx        bufaddr:    .res 2
000051r 2               
000051r 2  xx xx        tmp:        .res 2
000053r 2  xx xx        scr_l:      .res 2
000055r 2  xx xx        scr_r:      .res 2
000057r 2  xx xx        scr_txt:    .res 2
000059r 2               
000059r 2  xx           xtmp:	    .res 1
00005Ar 2  xx           spcnt:	    .res 1
00005Br 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
00005Dr 2  xx           seed:	    .res 1		; seed for random numbers.
00005Er 2               
00005Er 2  xx           ccnt:       .res 1
00005Fr 2  xx           flag:	    .res 1
000060r 2  xx           rcol:	    .res 1
000061r 2  xx           rrow:	    .res 1
000062r 2               
000062r 2  xx           combyt:	    .res 1		; byte type compressed.
000063r 2  xx           comcnt:	    .res 1		; compression counter.
000064r 2  xx           prtmod:	    .res 1      ; print mode, 0 = standard, 1 = double-height.
000065r 2  xx           qscnt:	    .res 1
000066r 2               
000066r 2  xx           sprptr:	    .res 1      ; not a ptr
000067r 2  xx           sprcnt:	    .res 1
000068r 2               
000068r 2  xx xx        skptr:	    .res 2		; search pointer.
00006Ar 2  xx           sktptr:	    .res 1      ; not a ptr
00006Br 2  xx           tmproom:	.res 1
00006Cr 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
00006Er 2               
00006Er 2               .if mflag
00006Er 2               TmpAddr:	.res 2
00006Er 2               bwid:	    .res 1     ; box/menu width.
00006Er 2               blen:	    .res 1     ; box/menu height.
00006Er 2               btop:	    .res 1     ; box coordinates.
00006Er 2               blft:	    .res 1
00006Er 2               .endif
00006Er 2               
00006Er 2               .if pflag
00006Er 2               shrctr:	    .res 1
00006Er 2               explcnt:	.res 1
00006Er 2               seed3:	    .res 1
00006Er 2               .endif
00006Er 2               
00006Er 1               ;----------------------------------------------------------------------
00006Er 1               ; ZCODE SEGMENT
00006Er 1               ;----------------------------------------------------------------------
00006Er 1               
00006Er 1               .segment "CODE"
000000r 1               .org asm_code
000E00  1               
000E00  1               start_asm:
000E00  1               
000E00  1  4C 21 78     	jmp relocate + load_address - asm_code
000E03  1               
000E03  1               boot_game:
000E03  1               
000E03  1               ; Zero ZP vars
000E03  1               
000E03  1               clear_zp:
000E03  1  A2 00        	ldx #0
000E05  1  8A           	txa
000E06  1               	:
000E06  1  95 00        	sta $00, x
000E08  1  E8           	inx
000E09  1  E0 A0        	cpx #$a0
000E0B  1  D0 F9        	bne :-
000E0D  1               
000E0D  1               	; Init non-zero vars
000E0D  1  A9 03        	lda #3
000E0F  1  85 rr        	sta numlif
000E11  1               
000E11  1  A2 FF        	ldx #255
000E13  1  86 rr        	stx varrnd
000E15  1  86 rr        	stx varopt
000E17  1  86 rr        	stx varblk
000E19  1  CA           	dex
000E1A  1  86 rr        	stx varobj
000E1C  1               
000E1C  1               	; Call AGD Engine start game
000E1C  1  20 62 10     	jsr start_game
000E1F  1               
000E1F  1                   ; Wait for keypress
000E1F  1  A2 FF        	ldx #$ff
000E21  1  A0 7F        	ldy #$7f
000E23  1  A9 81        	lda #$81
000E25  1  20 F4 FF     	jsr OSBYTE
000E28  1               
000E28  1               	; Restart or exit
000E28  1  4C 03 0E     	jmp boot_game
000E2B  1               
000E2B  1               ;----------------------------------------------------------------------
000E2B  1               ; PLATFORM SPECIFIC ENGINE CODE
000E2B  1               ;----------------------------------------------------------------------
000E2B  1               
000E2B  1               	.include "z80.asm"
000E2B  1               	.include "bbc.inc"
000E2B  2               ;------------------------------------------------------
000E2B  2               ; z80.asm
000E2B  2               ; spectrum stuff
000E2B  2               ; adresses
000E2B  2               
000E2B  2               ;ws	 = $60
000E2B  2               
000E2B  2               ;z80_f	 = ws+$00
000E2B  2               ;z80_a	 = ws+$01
000E2B  2               ;z80_af	 = z80_f
000E2B  2               
000E2B  2               ;z80_c	 = ws+$02
000E2B  2               ;z80_b	 = ws+$03
000E2B  2               ;z80_bc	 = z80_c
000E2B  2               
000E2B  2               ;z80_e	 = ws+$04
000E2B  2               ;z80_d	 = ws+$05
000E2B  2               ;z80_de	 = z80_e
000E2B  2               
000E2B  2               ;z80_l	 = ws+$06
000E2B  2               ;z80_h	 = ws+$07
000E2B  2               ;z80_hl	 = z80_l
000E2B  2               
000E2B  2               ;z80_x    = ws+$08
000E2B  2               ;z80_i    = ws+$09
000E2B  2               ;z80_ix	 = z80_x
000E2B  2               
000E2B  2               ;z80_iy	 = ws+$0a
000E2B  2               
000E2B  2               ;z80_fp	 = ws+$0c
000E2B  2               ;z80_ap	 = ws+$0d
000E2B  2               
000E2B  2               ;z80_cp	 = ws+$0e
000E2B  2               ;z80_bp	 = ws+$0f
000E2B  2               ;z80_bcp = z80_cp
000E2B  2               
000E2B  2               ;z80_ep	 = ws+$10
000E2B  2               ;z80_dp	 = ws+$11
000E2B  2               ;z80_dep = z80_ep
000E2B  2               
000E2B  2               ;z80_lp	 = ws+$12
000E2B  2               ;z80_hp	 = ws+$13
000E2B  2               ;z80_hlp = z80_lp
000E2B  2               
000E2B  2               ;z80_sp   = ws+$14
000E2B  2               
000E2B  2               ;z80_reg0 = ws+$16
000E2B  2               ;z80_reg1 = ws+$17
000E2B  2               ;z80_reg2 = ws+$18
000E2B  2               ;z80_reg3 = ws+$19
000E2B  2               
000E2B  2               ;z80_r	 = ws+$1a
000E2B  2               
000E2B  2               ; Contains seperatly 1 bit set
000E2B  2               ; _BEEB this is not safe memory to use as required by MOS
000E2B  2               
000E2B  2               _bitmem0	= $f8
000E2B  2               _bitmem1	= $f9
000E2B  2               _bitmem2	= $fa
000E2B  2               _bitmem3	= $fb
000E2B  2               _bitmem4	= $fc
000E2B  2               _bitmem5	= $fd
000E2B  2               _bitmem6	= $fe
000E2B  2               _bitmem7	= $ff
000E2B  2               	
000E2B  2               ; constants	
000E2B  2               _bitvalue0	= $01	
000E2B  2               _bitvalue1	= $02	
000E2B  2               _bitvalue2	= $04	
000E2B  2               _bitvalue3	= $08	
000E2B  2               _bitvalue4	= $10	
000E2B  2               _bitvalue5	= $20	
000E2B  2               _bitvalue6	= $40	
000E2B  2               _bitvalue7	= $80	
000E2B  2               
000E2B  2               _notbitvalue0	= $fe	
000E2B  2               _notbitvalue1	= $fd	
000E2B  2               _notbitvalue2	= $fb	
000E2B  2               _notbitvalue3	= $f7	
000E2B  2               _notbitvalue4	= $ef	
000E2B  2               _notbitvalue5	= $df	
000E2B  2               _notbitvalue6	= $bf	
000E2B  2               _notbitvalue7	= $7f	
000E2B  2               
000E2B  2               
000E2B  2               ;add_hl_bc:
000E2B  2               ;		lda z80_l
000E2B  2               ;		clc
000E2B  2               ;		adc z80_c
000E2B  2               ;		sta z80_l
000E2B  2               ;		lda z80_h
000E2B  2               ;		adc z80_b
000E2B  2               ;		sta z80_h
000E2B  2               ;		rts
000E2B  2               ;		
000E2B  2               ;add_ix_de:
000E2B  2               ;		lda z80_ix
000E2B  2               ;		clc
000E2B  2               ;		adc z80_e
000E2B  2               ;		sta z80_ix
000E2B  2               ;		lda z80_ix+1
000E2B  2               ;		adc z80_d
000E2B  2               ;		sta z80_ix+1
000E2B  2               ;		rts
000E2B  2               ;		
000E2B  2               ;add_iy_de:
000E2B  2               ;		lda z80_iy
000E2B  2               ;		clc
000E2B  2               ;		adc z80_e
000E2B  2               ;		sta z80_iy
000E2B  2               ;		lda z80_iy+1
000E2B  2               ;		adc z80_d
000E2B  2               ;		sta z80_iy+1
000E2B  2               ;		rts
000E2B  2               ;		
000E2B  2               ;add_hl_de:
000E2B  2               ;		lda z80_l
000E2B  2               ;		clc
000E2B  2               ;		adc z80_e
000E2B  2               ;		sta z80_l
000E2B  2               ;		lda z80_h
000E2B  2               ;		adc z80_d
000E2B  2               ;		sta z80_h
000E2B  2               ;		rts
000E2B  2               ;
000E2B  2               ;add_ix_bc:
000E2B  2               ;		lda z80_ix
000E2B  2               ;		clc
000E2B  2               ;		adc z80_c
000E2B  2               ;		sta z80_ix
000E2B  2               ;		lda z80_ix+1
000E2B  2               ;		adc z80_b
000E2B  2               ;		sta z80_ix+1
000E2B  2               ;		rts
000E2B  2               ;		
000E2B  2               ;add_iy_bc:
000E2B  2               ;		lda z80_iy
000E2B  2               ;		clc
000E2B  2               ;		adc z80_c
000E2B  2               ;		sta z80_iy
000E2B  2               ;		lda z80_iy+1
000E2B  2               ;		adc z80_b
000E2B  2               ;		sta z80_iy+1
000E2B  2               ;		rts
000E2B  2               ;		
000E2B  2               ;sbc_hl_de:
000E2B  2               ;		lda z80_l
000E2B  2               ;		sbc z80_e
000E2B  2               ;		sta z80_l
000E2B  2               ;		lda z80_h
000E2B  2               ;		sbc z80_d
000E2B  2               ;		sta z80_h
000E2B  2               ;		rts
000E2B  2               ;
000E2B  2               ;sbc_hl_bc:
000E2B  2               ;		lda z80_l
000E2B  2               ;		sbc z80_c
000E2B  2               ;		sta z80_l
000E2B  2               ;		lda z80_h
000E2B  2               ;		sbc z80_b
000E2B  2               ;		sta z80_h
000E2B  2               ;		rts
000E2B  2               ;
000E2B  2               ;cmp_hl_bc:
000E2B  2               ;		lda z80_l
000E2B  2               ;		cmp z80_c
000E2B  2               ;		bne cmp_hl_bc_end
000E2B  2               ;		lda z80_h
000E2B  2               ;		cmp z80_b
000E2B  2               ;cmp_hl_bc_end:
000E2B  2               ;		rts
000E2B  2               ;		
000E2B  2               ;cmp_iy_ix:
000E2B  2               ;		lda z80_iy
000E2B  2               ;		cmp z80_ix
000E2B  2               ;		bne cmp_iy_ix_end
000E2B  2               ;		lda z80_iy+1
000E2B  2               ;		cmp z80_ix+1
000E2B  2               ;cmp_iy_ix_end:
000E2B  2               ;		rts
000E2B  2               ;		
000E2B  2               ;dec_hl:
000E2B  2               ;		lda z80_l
000E2B  2               ;		bne dec_hl_no_dec_h
000E2B  2               ;		dec z80_h
000E2B  2               ;dec_hl_no_dec_h:
000E2B  2               ;		dec z80_l
000E2B  2               ;		rts
000E2B  2               ;	
000E2B  2               ;dec_ix:
000E2B  2               ;		lda z80_ix
000E2B  2               ;		bne dec_ix_no_dec_h
000E2B  2               ;		dec z80_ix+1
000E2B  2               ;dec_ix_no_dec_h:
000E2B  2               ;		dec z80_ix
000E2B  2               ;		rts
000E2B  2               ;		
000E2B  2               ;dec_bc:	
000E2B  2               ;		lda z80_c
000E2B  2               ;		bne dec_bc_no_dec_b
000E2B  2               ;		dec z80_b
000E2B  2               ;dec_bc_no_dec_b:
000E2B  2               ;		dec z80_c
000E2B  2               ;		rts
000E2B  2               ;	
000E2B  2               ;dec_de:
000E2B  2               ;		lda z80_e
000E2B  2               ;		bne dec_de_no_dec_d
000E2B  2               ;		dec z80_d
000E2B  2               ;dec_de_no_dec_d:
000E2B  2               ;		dec z80_e
000E2B  2               ;		rts
000E2B  2               ;		
000E2B  2               ;ex_af_afs:
000E2B  2               ;	rts
000E2B  2               ;ex_de_hl:
000E2B  2               ;		lda z80_e
000E2B  2               ;		ldx z80_l
000E2B  2               ;		stx z80_e
000E2B  2               ;		sta z80_l
000E2B  2               ;		lda z80_d
000E2B  2               ;		ldx z80_h
000E2B  2               ;		stx z80_d
000E2B  2               ;		sta z80_h
000E2B  2               ;		rts
000E2B  2               ;
000E2B  2               exx:
000E2B  2  A5 rr        		lda z80_c
000E2D  2  A4 rr        		ldy z80_cp
000E2F  2  84 rr        		sty z80_c
000E31  2  85 rr        		sta z80_cp
000E33  2  A5 rr        		lda z80_b
000E35  2  A4 rr        		ldy z80_bp
000E37  2  84 rr        		sty z80_b
000E39  2  85 rr        		sta z80_bp
000E3B  2  A5 rr        		lda z80_e
000E3D  2  A4 rr        		ldy z80_ep
000E3F  2  84 rr        		sty z80_e
000E41  2  85 rr        		sta z80_ep
000E43  2  A5 rr        		lda z80_d
000E45  2  A4 rr        		ldy z80_dp
000E47  2  84 rr        		sty z80_d
000E49  2  85 rr        		sta z80_dp		
000E4B  2  A5 rr        		lda scraddr
000E4D  2  A4 rr        		ldy z80_lp
000E4F  2  84 rr        		sty scraddr
000E51  2  85 rr        		sta z80_lp
000E53  2  A5 rr        		lda scraddr+1
000E55  2  A4 rr        		ldy z80_hp
000E57  2  84 rr        		sty scraddr+1
000E59  2  85 rr        		sta z80_hp
000E5B  2  60           		rts
000E5C  2               		
000E5C  2               ;ex_sp_hl:
000E5C  2               ;		tsx
000E5C  2               ;		lda $0103,x
000E5C  2               ;		ldy z80_h
000E5C  2               ;		sta z80_h
000E5C  2               ;		tya
000E5C  2               ;		sta $0103,x
000E5C  2               ;		lda $0104,x
000E5C  2               ;		ldy z80_l
000E5C  2               ;		sta z80_l
000E5C  2               ;		tya
000E5C  2               ;		sta $104,x
000E5C  2               ;		rts
000E5C  2               ;		
000E5C  2               ;ldi:
000E5C  2               ;	rts
000E5C  2               ;ldir:
000E5C  2               ;		ldy #$00
000E5C  2               ;		ldx z80_b
000E5C  2               ;		beq ldir_last_page
000E5C  2               ;ldir_loop:		
000E5C  2               ;		lda (z80_hl),y
000E5C  2               ;		sta (z80_de),y
000E5C  2               ;		iny
000E5C  2               ;		bne ldir_loop
000E5C  2               ;		inc z80_h
000E5C  2               ;		inc z80_d
000E5C  2               ;		dex
000E5C  2               ;		bne ldir_loop
000E5C  2               ;ldir_last_page:
000E5C  2               ;		lda z80_c
000E5C  2               ;		beq ldir_end
000E5C  2               ;ldir_last_page_loop:		
000E5C  2               ;		lda (z80_hl),y
000E5C  2               ;		sta (z80_de),y
000E5C  2               ;		iny
000E5C  2               ;		cpy z80_c
000E5C  2               ;		bne ldir_last_page_loop
000E5C  2               ;ldir_end:		
000E5C  2               ;		stx z80_c
000E5C  2               ;		stx z80_b
000E5C  2               ;		tya
000E5C  2               ;		clc
000E5C  2               ;		adc z80_l
000E5C  2               ;		sta z80_l
000E5C  2               ;		bcc *+4
000E5C  2               ;		inc z80_h
000E5C  2               ;		tya
000E5C  2               ;		clc
000E5C  2               ;		adc z80_e
000E5C  2               ;		sta z80_e
000E5C  2               ;		bcc *+4
000E5C  2               ;		inc z80_d
000E5C  2               ;		rts
000E5C  2               ;		
000E5C  2               ;lddr:		ldy #$00
000E5C  2               ;lddr_loop:
000E5C  2               ;		lda (z80_hl),y
000E5C  2               ;		sta (z80_de),y
000E5C  2               ;		jsr dec_hl
000E5C  2               ;		jsr dec_de
000E5C  2               ;		jsr dec_bc
000E5C  2               ;		lda z80_b
000E5C  2               ;		ora z80_c
000E5C  2               ;		bne lddr_loop
000E5C  2               ;		rts
000E5C  2               ;ei:
000E5C  2               ;		rts
000E5C  2               ;di:
000E5C  2               ;		rts
000E5C  2               		
000E5C  2               ;-------------------------------------------------------------
000E5C  2               ; Set bits in bitmem
000E5C  2               ;-------------------------------------------------------------
000E5C  2               
000E5C  2               .if 0
000E5C  2               z80_init:
000E5C  2               	ldx #$00
000E5C  2               	lda #$01
000E5C  2               z80_init_loop:		
000E5C  2               	sta _bitmem0,x
000E5C  2               	inx
000E5C  2               	asl a
000E5C  2               	bne z80_init_loop
000E5C  2               	rts
000E5C  2               .endif
000E5C  2               
000E5C  2               push_af:
000E5C  2               push_bc:
000E5C  2               push_de:
000E5C  2               push_hl:
000E5C  2               
000E5C  2               pop_af:
000E5C  2               pop_bc:
000E5C  2               pop_de:
000E5C  2               pop_ix:
000E5C  2               pop_hl:
000E5C  2               
000E5C  2               add_hl_hl:
000E5C  2               
000E5C  2               inc_bc:
000E5C  2               inc_de:
000E5C  2               inc_hl:
000E5C  2               inc_ix:
000E5C  2               inc_sp:
000E5C  2               
000E5C  2               cpir:
000E5C  2               
000E5C  2               ex_af_af:
000E5C  2               ;	rts
000E5C  2               
000E5C  1               
000E5C  2               ;----------------------------------------------------------------------
000E5C  2               ; BBC Platform Specific functions
000E5C  2               ;----------------------------------------------------------------------
000E5C  2               
000E5C  2               ;----------------------------------------------------
000E5C  2               ; Wait for keypress.
000E5C  2               ;----------------------------------------------------
000E5C  2               
000E5C  2               prskey:
000E5C  2  8A           	txa
000E5D  2  48           	pha
000E5E  2               prsloop:
000E5E  2  20 B1 0E     	jsr vsync
000E61  2               
000E61  2  A9 79        	lda #$79
000E63  2  A2 01        	ldx #$01
000E65  2  20 F4 FF     	jsr OSBYTE
000E68  2               
000E68  2  E0 FF        	cpx #$ff
000E6A  2  F0 F2        	beq prsloop		; wait until key pressed
000E6C  2  68           	pla
000E6D  2  AA           	tax
000E6E  2  60           	rts
000E6F  2               
000E6F  2               ;--------------------------------------------------------
000E6F  2               ; Keyboard test routine.
000E6F  2               ;
000E6F  2               ; Input:
000E6F  2               ;  A = key to read, high nibble=row and low nibble=col
000E6F  2               ;
000E6F  2               ; Output:
000E6F  2               ;  carry clr = key pressed
000E6F  2               ;  carry set = key not pressed
000E6F  2               ;--------------------------------------------------------
000E6F  2               
000E6F  2               ktest:
000E6F  2  85 rr        	sta z80_a		; save key
000E71  2  98           	tya
000E72  2  48           	pha
000E73  2               
000E73  2               ; _BEEB keyboard read
000E73  2  A5 rr        	lda z80_a
000E75  2  49 80        	eor #$80		; _BEEB just look for this key
000E77  2  AA           	tax
000E78  2               
000E78  2  A9 79        	lda #$79
000E7A  2  20 F4 FF     	jsr OSBYTE
000E7D  2               
000E7D  2  8A           	txa
000E7E  2  30 04        	bmi pressed 	; _BEEB X is negative if key is pressed
000E80  2               
000E80  2  38           	sec			; key not pressed
000E81  2  68           	pla
000E82  2  A8           	tay
000E83  2  60           	rts
000E84  2               
000E84  2               pressed:
000E84  2  18           	clc			; key pressed
000E85  2  68           	pla
000E86  2  A8           	tay
000E87  2  60           	rts
000E88  2               
000E88  2               ;---------------------------------------------------------------
000E88  2               ; Getkey in column,row format
000E88  2               ;
000E88  2               ; Output:
000E88  2               ;  A = high nibble=row and low nibble=column key in matrix
000E88  2               ;---------------------------------------------------------------
000E88  2               
000E88  2               kget:
000E88  2  86 rr        	stx xtmp
000E8A  2               
000E8A  2               kget1:
000E8A  2  A9 79        	lda #$79			; _BEEB read keyboard with OSBYTE &79
000E8C  2  A2 01        	ldx #$01
000E8E  2  20 F4 FF     	jsr OSBYTE
000E91  2               
000E91  2  E0 FF        	cpx #$ff
000E93  2  F0 F5        	beq kget1
000E95  2               
000E95  2  8A           	txa
000E96  2               
000E96  2  A6 rr        	ldx xtmp
000E98  2  60           	rts
000E99  2               
000E99  2               ;----------------------------------------------------
000E99  2               ; AtoMMC joystick controls.
000E99  2               ; _BEEB TODO
000E99  2               ;----------------------------------------------------
000E99  2               
000E99  2               joyinit:
000E99  2               joysin:
000E99  2  60           	rts
000E9A  2               
000E9A  2               
000E9A  2               ;----------------------------------------------------
000E9A  2               ; Delay routine 1/50 sec
000E9A  2               ;
000E9A  2               ; Wait 1/60 sec = 16666 usec
000E9A  2               ; Wait 208 x 16 =  3328 usec
000E9A  2               ;                 19994 usec
000E9A  2               ; rts           =     6 usec
000E9A  2               ; Total         = 20000 usec
000E9A  2               ;----------------------------------------------------
000E9A  2               
000E9A  2               delay:
000E9A  2  85 rr        	sta xtmp
000E9C  2               del_loop:
000E9C  2  A9 13        	lda #19
000E9E  2  20 F4 FF     	jsr OSBYTE		; wait for vsync _BEEB
000EA1  2               
000EA1  2  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
000EA3  2               delay1:
000EA3  2  61 80        	adc ($80,x)		;	 6 usec
000EA5  2  61 80        	adc ($80,x)		;	 6 usec
000EA7  2  88           	dey			;	 2 usec
000EA8  2  D0 F9        	bne delay1		;	 2 usec
000EAA  2  EA           	nop			; 2 usec
000EAB  2  EA           	nop			; 2 usec
000EAC  2               				; tot: 20000 usec
000EAC  2  C6 rr        	dec xtmp
000EAE  2  D0 EC        	bne del_loop
000EB0  2  60           	rts
000EB1  2               
000EB1  2               ;-------------------------------------------------------------
000EB1  2               ; Screen synchronisation.
000EB1  2               ;
000EB1  2               ;  - read joystick/keyboard
000EB1  2               ;  - handle sound
000EB1  2               ;  - sync framerate with clock
000EB1  2               ;  - handle shrapnel every even frame
000EB1  2               ;-------------------------------------------------------------
000EB1  2               
000EB1  2               vsync:
000EB1  2  48           	pha
000EB2  2  98           	tya
000EB3  2  48           	pha
000EB4  2  8A           	txa
000EB5  2  48           	pha
000EB6  2  20 3B 1A     	jsr joykey		; read joystick/keyboard.
000EB9  2               vsync1:
000EB9  2               ;	lda Timer2_High		; sync framerate with clock
000EB9  2               ;	bne vsync1
000EB9  2               ;	lda #>50000
000EB9  2               ;	sta Timer2_High
000EB9  2               ;	lda #<50000
000EB9  2               ;	sta Timer2_Low
000EB9  2               
000EB9  2  A9 13        	lda #19
000EBB  2  20 F4 FF     	jsr OSBYTE		; _BEEB vsync
000EBE  2               
000EBE  2  A5 rr        	lda clock
000EC0  2  29 01        	and #1
000EC2  2  D0 03        	bne:+
000EC4  2  20 57 11     	jsr proshr		; handle shrapnel every even frame
000EC7  2               :
000EC7  2  AD D2 0E     	lda sndtyp
000ECA  2  F0 00        	beq sndskip
000ECC  2               ; _BEEB TODO SOUND
000ECC  2               ;sndloop:
000ECC  2               ;	lda SpeakerBit		; handle sound
000ECC  2               ;	ldy sndtyp
000ECC  2               ;sndwait:
000ECC  2               ;	dey
000ECC  2               ;	bne sndwait
000ECC  2               ;	eor #4
000ECC  2               ;	sta SpeakerBit
000ECC  2               ;	dec sndtyp
000ECC  2               ;	bne sndloop
000ECC  2               sndskip: 
000ECC  2  68           	pla
000ECD  2  AA           	tax
000ECE  2  68           	pla
000ECF  2  A8           	tay
000ED0  2  68           	pla
000ED1  2  60           	rts
000ED2  2               
000ED2  2  00           sndtyp:	.byte 0
000ED3  2               
000ED3  2               ;----------------------------------------------------------------------
000ED3  2               ; BBC video hardware fns
000ED3  2               ;----------------------------------------------------------------------
000ED3  2               
000ED3  2               screeninit:
000ED3  2  A2 0D        	ldx #13
000ED5  2               crtcloop:
000ED5  2  8E 00 FE     	stx $FE00
000ED8  2  BD F5 0E     	lda crtc_regs_high,x
000EDB  2  8D 01 FE     	sta $FE01
000EDE  2  CA           	dex
000EDF  2  10 F4        	bpl crtcloop
000EE1  2               
000EE1  2                   ; Set ULA
000EE1  2  A9 88            lda #$88            ; MODE 4
000EE3  2  8D 48 02         sta $248            ; Tell the OS or it will mess with ULA settings at vsync
000EE6  2  8D 20 FE         sta $FE20
000EE9  2               
000EE9  2               ; fall through to palette
000EE9  2               
000EE9  2               setpal:
000EE9  2  A2 0F        	ldx #15
000EEB  2               palloop:
000EEB  2  BD 03 0F     	lda ula_pal,x
000EEE  2  8D 21 FE     	sta $fe21
000EF1  2  CA           	dex
000EF2  2  10 F7        	bpl palloop
000EF4  2  60           	rts
000EF5  2               
000EF5  2               crtc_regs_high:
000EF5  2  3F           	.byte 63				; R0  horizontal total
000EF6  2  20           	.byte 32				; R1  horizontal displayed
000EF7  2  31           	.byte 49				; R2  horizontal position
000EF8  2  24           	.byte $24				; R3  sync width 40 = &28
000EF9  2  26           	.byte 38				; R4  vertical total
000EFA  2  00           	.byte 0					; R5  vertical total adjust
000EFB  2  18           	.byte 24				; R6  vertical displayed
000EFC  2  23           	.byte 35				; R7  vertical position; 35=top of screen
000EFD  2  00           	.byte $00				; R8  interlace
000EFE  2  07           	.byte 7					; R9  scanlines per row
000EFF  2  20           	.byte 32				; R10 cursor start
000F00  2  08           	.byte 8					; R11 cursor end
000F01  2  0D           	.byte >(ScreenAddr/8)	; R12 screen start address, high
000F02  2  00           	.byte <(ScreenAddr/8)	; R13 screen start address, low
000F03  2               
000F03  2               ula_pal:
000F03  2  07           	.byte $00 + PAL_black
000F04  2  17           	.byte $10 + PAL_black
000F05  2  27           	.byte $20 + PAL_black
000F06  2  37           	.byte $30 + PAL_black
000F07  2  47           	.byte $40 + PAL_black
000F08  2  57           	.byte $50 + PAL_black
000F09  2  67           	.byte $60 + PAL_black
000F0A  2  77           	.byte $70 + PAL_black
000F0B  2  80           	.byte $80 + PAL_white
000F0C  2  90           	.byte $90 + PAL_white
000F0D  2  A0           	.byte $a0 + PAL_white
000F0E  2  B0           	.byte $b0 + PAL_white
000F0F  2  C0           	.byte $c0 + PAL_white
000F10  2  D0           	.byte $d0 + PAL_white
000F11  2  E0           	.byte $e0 + PAL_white
000F12  2  F0           	.byte $f0 + PAL_white
000F13  2               
000F13  2               ;----------------------------------------------------
000F13  2               ; Draw sprite
000F13  2               ;----------------------------------------------------
000F13  2               
000F13  2               sprite:
000F13  2  86 rr        	stx xtmp		; Save X-reg
000F15  2  20 70 0F     	jsr scadd 		; get screen address in scraddr.
000F18  2               
000F18  2  A5 rr        	lda dispx 		; x position.
000F1A  2  29 07        	and #7 			; position straddling cells.
000F1C  2  85 rr        	sta z80_b		; store in b register.
000F1E  2               
000F1E  2  A5 rr        	lda z80_l		; store sprite graphic address.
000F20  2  8D 33 0F     	sta sprit1+1
000F23  2  8D 3A 0F     	sta sprit2+1
000F26  2  A5 rr        	lda z80_h
000F28  2  8D 34 0F     	sta sprit1+2
000F2B  2  8D 3B 0F     	sta sprit2+2
000F2E  2               
000F2E  2  A2 00        	ldx #0			; pixel height.
000F30  2  A0 00        	ldy #0
000F32  2               sprit1:
000F32  2  BD FB 70     	lda objdta,x		; fetch first byte.
000F35  2  8D 6D 0F     	sta spr
000F38  2  E8           	inx
000F39  2               sprit2:
000F39  2  BD FB 70     	lda objdta,x
000F3C  2  8D 6E 0F     	sta spr+1
000F3F  2               
000F3F  2  A9 00        	lda #0
000F41  2  8D 6F 0F     	sta spr+2
000F44  2  20 FF 16     	jsr sprit7		; shift sprite
000F47  2               
000F47  2  AD 6D 0F     	lda spr			; fetch graphic.
000F4A  2  A0 00        	ldy #0			; _BEEB
000F4C  2  51 rr        	eor (scraddr),y		; merge with screen image.
000F4E  2  91 rr        	sta (scraddr),y		; write to screen.
000F50  2               
000F50  2  AD 6E 0F     	lda spr+1		; fetch graphic.
000F53  2  A0 08        	ldy #8			; _BEEB
000F55  2  51 rr        	eor (scraddr),y		; merge with screen image.
000F57  2  91 rr        	sta (scraddr),y		; write to screen.
000F59  2               
000F59  2  AD 6F 0F     	lda spr+2		; fetch graphic.
000F5C  2  A0 10        	ldy #16			; _BEEB
000F5E  2  51 rr        	eor (scraddr),y		; merge with screen image.
000F60  2  91 rr        	sta (scraddr),y		; write to screen.
000F62  2               
000F62  2  20 08 10     	jsr nline
000F65  2               
000F65  2  E8           	inx			; next source byte.
000F66  2  E0 20        	cpx #32
000F68  2  D0 C8        	bne sprit1		; repeat
000F6A  2               
000F6A  2  A6 rr        	ldx xtmp		; retreive X-reg
000F6C  2  60           	rts
000F6D  2               
000F6D  2  00 00 00     spr:	.byte 0,0,0
000F70  2               
000F70  2               ;------------------------------------------------------------------
000F70  2               ; This routine returns a screen address for (dispx, dispy) in scraddr.
000F70  2               ;------------------------------------------------------------------
000F70  2               
000F70  2               scadd:
000F70  2  A6 rr        	ldx dispy
000F72  2  A5 rr        	lda dispx
000F74  2  29 F8        	and #$f8
000F76  2  18           	clc
000F77  2  7D 00 06     	adc SCADTB_lb,x
000F7A  2  85 rr        	sta scraddr
000F7C  2  BD 00 07     	lda SCADTB_hb,x
000F7F  2  69 00        	adc #0
000F81  2  85 rr        	sta scraddr+1
000F83  2  60           	rts
000F84  2               
000F84  2               ;-----------------------------------------------------------------
000F84  2               ; These are the sprite routines.
000F84  2               ; sspria = single sprite, old (ix).
000F84  2               ; ssprib = single sprite, new (ix+5).
000F84  2               ; sspric = both sprites, old (ix) and new (ix+5).
000F84  2               ;-----------------------------------------------------------------
000F84  2               
000F84  2               sspria:
000F84  2  20 89 1D     	jsr gsprad		; get old sprite address.
000F87  2               sspri2:
000F87  2  A9 10        	lda #16			; vertical lines.
000F89  2  8D 95 0F     	sta acnt
000F8C  2               sspri0:
000F8C  2  20 BF 0F     	jsr dline		; draw a line.
000F8F  2  CE 95 0F     	dec acnt
000F92  2  D0 F8        	bne sspri0		; repeat 16 times
000F94  2  60           	rts
000F95  2               
000F95  2  00           acnt:	.byte 0
000F96  2               
000F96  2               ;-----------------------------------------------------------------
000F96  2               
000F96  2               ssprib:
000F96  2  20 6A 1D     	jsr gspran 		; get new sprite address.
000F99  2  4C 87 0F     	jmp sspri2
000F9C  2               
000F9C  2               ;-----------------------------------------------------------------
000F9C  2               
000F9C  2               sspric:
000F9C  2  20 89 1D     	jsr gsprad 		; get old sprite address.
000F9F  2  20 2B 0E     	jsr exx  		; store addresses.
000FA2  2  20 6A 1D     	jsr gspran 		; get new sprite addresses.
000FA5  2               
000FA5  2  A9 0F        	lda #15
000FA7  2  85 rr        	sta ccnt
000FA9  2               lloop:
000FA9  2  20 BF 0F     	jsr dline 		; draw a line.
000FAC  2  20 2B 0E     	jsr exx  		; restore old addresses.
000FAF  2  20 BF 0F     	jsr dline 		; delete a line.
000FB2  2  20 2B 0E     	jsr exx  		; flip to new sprite addresses.
000FB5  2  C6 rr        	dec ccnt
000FB7  2  D0 F0        	bne lloop
000FB9  2               
000FB9  2  20 BF 0F     	jsr dline		; draw a line.
000FBC  2  20 2B 0E     	jsr exx 		; restore old addresses.
000FBF  2               
000FBF  2               ;-------------------------------------------------------------
000FBF  2               ; Drop through.
000FBF  2               ; Line drawn, now work out next target address.
000FBF  2               ;
000FBF  2               ; Input:
000FBF  2               ;  B  = right mask
000FBF  2               ;  C  = left mask
000FBF  2               ;  DE = spriteaddress
000FBF  2               ;  scraddr = screen address
000FBF  2               ;-------------------------------------------------------------
000FBF  2               
000FBF  2               dline:
000FBF  2  A0 00        	ldy #0
000FC1  2  B1 rr        	lda (z80_de),y 		; graphic data.
000FC3  2  25 rr        	and z80_c 		; mask away what's not needed.
000FC5  2  51 rr        	eor (scraddr),y 	; XOR with what's there.
000FC7  2  91 rr        	sta (scraddr),y 	; bung it in.
000FC9  2               
000FC9  2               ; _BEEB screen arrangement
000FC9  2  18           	clc
000FCA  2  A5 rr        	lda scraddr
000FCC  2  69 10        	adc #16
000FCE  2  85 rr        	sta scraddr
000FD0  2  90 02        	bcc :+
000FD2  2  E6 rr        	inc scraddr+1
000FD4  2               :
000FD4  2               
000FD4  2  B1 rr        	lda (z80_de),y 		; fetch data.
000FD6  2  25 rr        	and z80_b 		; mask away unwanted bits.
000FD8  2  51 rr        	eor (scraddr),y 	; XOR with what's there.
000FDA  2  91 rr        	sta (scraddr),y 	; bung it in.
000FDC  2               
000FDC  2  E6 rr        	inc z80_e 		; next graphic.
000FDE  2  D0 02        	bne :+
000FE0  2  E6 rr        	inc z80_d
000FE2  2               :
000FE2  2               ; _BEEB screen arrangement
000FE2  2  38           	sec
000FE3  2  A5 rr        	lda scraddr 		; one character cell to the left.
000FE5  2  E9 08        	sbc #8
000FE7  2  85 rr        	sta scraddr
000FE9  2  A5 rr        	lda scraddr+1
000FEB  2  E9 00        	sbc #0
000FED  2  85 rr        	sta scraddr+1
000FEF  2               
000FEF  2  B1 rr        	lda (z80_de),y 		; second bit of data.
000FF1  2  51 rr        	eor (scraddr),y 	; XOR with what's there.
000FF3  2  91 rr        	sta (scraddr),y 	; bung it in.
000FF5  2               
000FF5  2  E6 rr        	inc z80_e 		; point to next line of data.
000FF7  2  D0 02        	bne :+
000FF9  2  E6 rr        	inc z80_d
000FFB  2               :
000FFB  2               ; _BEEB screen arrangement
000FFB  2  38           	sec
000FFC  2  A5 rr        	lda scraddr 		; another char left.
000FFE  2  E9 08        	sbc #8
001000  2  85 rr        	sta scraddr
001002  2  A5 rr        	lda scraddr+1
001004  2  E9 00        	sbc #0
001006  2  85 rr        	sta scraddr+1
001008  2               
001008  2               ;----------------------------------------------------------------------
001008  2               ; Line drawn, now work out next target address.
001008  2               ;----------------------------------------------------------------------
001008  2               
001008  2               ; _BEEB screen arrangement
001008  2               
001008  2               nline:
001008  2  A5 rr        	lda scraddr 		; get low byte of address.
00100A  2  29 07        	and #7				
00100C  2  C9 07        	cmp #7				; is this last line of row?
00100E  2  F0 03        	beq beeb_next_row
001010  2               
001010  2               	; within same row
001010  2  E6 rr        	inc scraddr			; new low byte of address.
001012  2               ;	bne :+
001012  2               ;	inc scraddr+1		; new high byte of address.
001012  2               :
001012  2  60           	rts
001013  2               
001013  2               beeb_next_row:
001013  2  18           	clc
001014  2  A5 rr        	lda scraddr
001016  2  69 F9        	adc #<(ScreenRowBytes-7)
001018  2  85 rr        	sta scraddr			; new low byte of address.
00101A  2  A5 rr        	lda scraddr+1
00101C  2  69 00        	adc #>(ScreenRowBytes-7)
00101E  2  85 rr        	sta scraddr+1		; new high byte of address.
001020  2  60           	rts
001021  2               
001021  2               ;----------------------------------------------------
001021  2               ; Display character in A at dispx,dispy.
001021  2               ;
001021  2               ; Input:
001021  2               ;  A 	   = character to print
001021  2               ;----------------------------------------------------
001021  2               
001021  2               pchar:
001021  2  85 rr        	sta fntaddr
001023  2  A9 00        	lda #0
001025  2  85 rr        	sta fntaddr+1
001027  2  06 rr        	asl fntaddr  		; multiply char by 8.
001029  2  26 rr        	rol fntaddr+1
00102B  2  06 rr        	asl fntaddr
00102D  2  26 rr        	rol fntaddr+1
00102F  2  06 rr        	asl fntaddr
001031  2  26 rr        	rol fntaddr+1
001033  2               
001033  2  A5 rr        	lda fntaddr
001035  2  18           	clc
001036  2  65 rr        	adc FontPtr
001038  2  85 rr        	sta fntaddr		; that's the low byte.
00103A  2  A5 rr        	lda fntaddr+1
00103C  2  65 rr        	adc FontPtr+1
00103E  2  85 rr        	sta fntaddr+1		; add displacement.
001040  2               pchark:
001040  2  20 4F 16     	jsr gprad		; get screen address.
001043  2  A2 07        	ldx #7			; lines to write.
001045  2               pchar0:
001045  2  A0 00        	ldy #0
001047  2  B1 rr        	lda (fntaddr),y 	; get image byte.
001049  2  BC 5A 10     	ldy scrtab,x		; Get rowoffset
00104C  2               
00104C  2  49 00        	eor #TxtInvert		; Invert
00104E  2               
00104E  2  91 rr        	sta (scraddr),y 	; copy to screen.
001050  2  E6 rr        	inc fntaddr		; next image byte.
001052  2  D0 02        	bne :+
001054  2  E6 rr        	inc fntaddr+1
001056  2               :
001056  2  CA           	dex			; next screen row down.
001057  2  10 EC        	bpl pchar0		; repeat.
001059  2  60           	rts
00105A  2               
00105A  2  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
00105E  2  03 02 01 00  
001062  2               ;scrtab:	.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
001062  2               
001062  1               ;----------------------------------------------------------------------
001062  1               ; AGD 6502 ENGINE CODE + COMPILED GAME SCRIPT
001062  1               ;----------------------------------------------------------------------
001062  1               
001062  1               start_game:
001062  1               
001062  1               	.include "game.inc"
001062  1               
001062  2               .include "vintik.inc" 
001062  2               
001062  3               ; Game engine code --------------------------------------------------------------
001062  3               
001062  3               ; Arcade Game Designer.
001062  3               ; (C) 2008 Jonathan Cauldwell.
001062  3               ; ZX Spectrum Next Engine v0.1.
001062  3               
001062  3               ; Global definitions ------------------------------------------------------------
001062  3               
001062  3               	FONT = font			; Font address
001062  3               
001062  3               ; Block characteristics.
001062  3               
001062  3               	PLATFM = 1			; platform.
001062  3               	WALL = PLATFM + 1	; solid wall.
001062  3               	LADDER = WALL + 1	; ladder.
001062  3               	FODDER = LADDER + 1	; fodder block.
001062  3               	DEADLY = FODDER + 1	; deadly block.
001062  3               	CUSTOM = DEADLY + 1	; custom block.
001062  3               	NUMTYP = CUSTOM + 1	; number of types.
001062  3               
001062  3               ; Sprites.
001062  3               
001062  3               	NUMSPR = 12			; number of sprites.
001062  3               	TABSIZ = 17			; size of each entry.
001062  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
001062  3               	NMESIZ = 4			; bytes stored in nmetab for each sprite.
001062  3               
001062  3               ; Sprite table variable offsets.
001062  3               
001062  3               	var_Type = 0		; sprite type
001062  3               	var_Image = 1		; sprite time number
001062  3               	var_Frame = 2		; sprite frame
001062  3               	var_Y = 3			; sprite y coordinate
001062  3               	var_X = 4			; sprite X coordinate
001062  3               
001062  3               	var_newType = 5		; sprite new type
001062  3               	var_newImage = 6	; sprite new image number
001062  3               	var_newFrame = 7	; sprite new frame
001062  3               	var_newY = 8		; sprite new y coordinate
001062  3               	var_newX = 9		; sprite new x coordinate
001062  3               	
001062  3               	var_Direction = 10	; sprite direction
001062  3               	var_Param1 = 11		; sprite parameter 1
001062  3               	var_Param2 = 12		; sprite parameter 2
001062  3               
001062  3               	var_jumpLo = 13		; sprite jump ptr low
001062  3               	var_jumpHi = 14		; sprite jump ptr high
001062  3               	var_dataLo = 15		; sprite data ptr low
001062  3               	var_dataHi = 16		; sprite data ptr high
001062  3               
001062  3               ; Particle engine.
001062  3               
001062  3               	NUMSHR = 55			; pieces of shrapnel.
001062  3               	SHRSIZ = 6			; bytes per particle.
001062  3               
001062  3               ; Conditional compilation flags
001062  3               ; Flags are set in commandline assembly
001062  3               
001062  3               ;	mflag = 0 		; MENU + INV
001062  3               ;	pflag = 0		; Particle engine
001062  3               ;	sflag = 0		; scrollytext
001062  3               ;	fflag = 1		; Fontflag
001062  3               
001062  3               .if iflag
001062  3               	TxtInvert   = $ff	; Invert byte for character printing
001062  3               	ScrFillByte = $ff	; Screen fill byte for CLS
001062  3               .else
001062  3               	TxtInvert   = $00	; Invert byte for character printing
001062  3               	ScrFillByte = $00	; Screen fill byte for CLS
001062  3               .endif
001062  3               
001062  3               	ASCII_NEWLINE = 13
001062  3               
001062  3               ;===============================================================
001062  3               ; Game starts here
001062  3               ;===============================================================
001062  3               
001062  3               ;--------------------------------------------------------------
001062  3               ; If a font is required...
001062  3               ;--------------------------------------------------------------
001062  3               
001062  3  A9 21        	lda #<(FONT-256)	; address of font.
001064  3  85 rr        	sta FontPtr
001066  3  A9 70        	lda #>(FONT-256)
001068  3  85 rr        	sta FontPtr+1
00106A  3               
00106A  3  20 58 11     	jsr game	 		; start the game.
00106D  3  60           	rts
00106E  3               
00106E  3               ; Don't change the order of these four.  
00106E  3               ; Menu routine relies on winlft following wintop.
00106E  3               
00106E  3  01           wintop:	.byte WINDOWTOP		; top of window.
00106F  3  00           winlft:	.byte WINDOWLFT		; left edge.
001070  3  16           winhgt:	.byte WINDOWHGT		; window height.
001071  3  20           winwid:	.byte WINDOWWID		; window width.
001072  3  01           numob:	.byte NUMOBJ		; number of objects in game.
001073  3               
001073  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
001073  3               
001073  3  08           wntopx:	.byte (8 * WINDOWTOP)
001074  3  00           wnlftx:	.byte (8 * WINDOWLFT)
001075  3  A8           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
001076  3  EE           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
001077  3               
001077  3               ; Make sure pointers are arranged in the same order as the data itself.
001077  3               
001077  3  E9 52        frmptr:	.word frmlst         ; sprite frames.
001079  3               
001079  3               ; Assorted game routines which can go in contended memory.
001079  3               
001079  3               ;--------------------------------------------------------------
001079  3               ; Modify for inventory.
001079  3               ; called by the INV command
001079  3               ;
001079  3               ; Input:
001079  3               ;  X   = message nr with objects seperated with ,
001079  3               ;
001079  3               ; Output:
001079  3               ;  OPT = selected line nr of INV menu
001079  3               ;--------------------------------------------------------------
001079  3               
001079  3               .if mflag
001079  3               minve:
001079  3               	lda #<(invdis)		; routine address.
001079  3               	sta mod0+1		; set up menu routine.
001079  3               	sta mod2+1		; set up count routine.
001079  3               	lda #>(invdis)
001079  3               	sta mod0+2
001079  3               	sta mod2+2
001079  3               	lda #<(fopt)		; find option from available objects.
001079  3               	sta mod1+1		; set up routine.
001079  3               	lda #>(fopt)
001079  3               	sta mod1+1+1
001079  3               	jmp dbox		; do menu routine.
001079  3               
001079  3               ;--------------------------------------------------------------
001079  3               ; Modify for menu.
001079  3               ; called by the MENU command
001079  3               ;
001079  3               ; Input:
001079  3               ;  X   = message nr with menu items seperated with ,
001079  3               ;
001079  3               ; Output:
001079  3               ;  OPT = selected line nr of MENU menu
001079  3               ;--------------------------------------------------------------
001079  3               
001079  3               mmenu:
001079  3               	lda #<(always)		; routine address.
001079  3               	sta mod0+1		; set up routine.
001079  3               	sta mod2+1		; set up count routine.
001079  3               	lda #>(always)
001079  3               	sta mod0+2
001079  3               	sta mod2+2
001079  3               
001079  3               	lda #<(fstd)		; standard option selection.
001079  3               	sta mod1+1		; set up routine.
001079  3               	lda #>(fstd)
001079  3               	sta mod1+2
001079  3               
001079  3               ; Drop through into box routine.
001079  3               
001079  3               ;--------------------------------------------------------------
001079  3               ; Work out size of box for message or menu.
001079  3               ;--------------------------------------------------------------
001079  3               
001079  3               dbox:
001079  3               	lda #<(msgdat)		; pointer to messages.
001079  3               	sta z80_l
001079  3               	lda #>(msgdat)
001079  3               	sta z80_h
001079  3               	
001079  3               	jsr getwrd		; get message number.
001079  3               
001079  3               	lda z80_h		; store pointer to message.
001079  3               	sta TmpAddr
001079  3               	lda z80_l
001079  3               	sta TmpAddr+1
001079  3               
001079  3               	lda #1			; height.
001079  3               	sta z80_d
001079  3               	lda #0			; start at object zero.
001079  3               	sta combyt		; store number of object in combyt.
001079  3               	sta z80_e		; maximum width.
001079  3               dbox5:
001079  3               	lda #0			; this line"s width.
001079  3               	sta z80_b
001079  3               mod2:
001079  3               	jsr always		; item in player"s possession?
001079  3               	cmp #255
001079  3               	bne dbox6		; not in inventory, skip this line.
001079  3               	inc z80_d		; add to tally.
001079  3               dbox6:
001079  3               	ldy #0			; get character.
001079  3               	lda (z80_hl),y
001079  3               	sta z80_a
001079  3               	inc z80_l		; next character.
001079  3               	bne :+
001079  3               	inc z80_h
001079  3               :
001079  3               	lda z80_a		; reached end of line?
001079  3               	cmp #','
001079  3               	beq dbox3		; yes.
001079  3               	cmp #ASCII_NEWLINE
001079  3               	beq dbox3		; yes.
001079  3               	inc z80_b		; add to this line"s width.
001079  3               	lda z80_a
001079  3               	bmi dbox4		; end of message? yes, end count.
001079  3               	jmp dbox6		; repeat until we find the end.
001079  3               dbox3:
001079  3               	lda z80_e		; maximum line width.
001079  3               	cmp z80_b		; have we exceeded longest so far?
001079  3               	bpl dbox5		; no, carry on looking.
001079  3               	lda z80_b		; make this the widest so far.
001079  3               	sta z80_e
001079  3               	jmp dbox5		; keep looking.
001079  3               dbox4:
001079  3               	lda z80_e		; maximum line width.
001079  3               	cmp z80_b		; have we exceeded longest so far?
001079  3               	bpl dbox8		; no, carry on looking.
001079  3               	lda z80_b		; final line is the longest so far.
001079  3               	sta z80_e
001079  3               dbox8:
001079  3               	dec z80_d		; decrement items found.
001079  3               	bne :+			; total was zero.
001079  3               	jmp dbox15		
001079  3               :
001079  3               	lda z80_e		; longest line.
001079  3               	bne :+			; was it zero?
001079  3               	jmp dbox15		; total was zero.
001079  3               :
001079  3               	sta bwid		; set up size.
001079  3               	lda z80_d
001079  3               	sta blen
001079  3               
001079  3               ;--------------------------------------------------------------
001079  3               ; That's set up our box size.
001079  3               ;--------------------------------------------------------------
001079  3               
001079  3               	lda winhgt		; window height in characters.
001079  3               	sec
001079  3               	sbc z80_d		; subtract height of box.
001079  3               	lsr a			; divide by 2.
001079  3               	clc
001079  3               	adc wintop		; add top edge of window.
001079  3               	sta btop		; set up box top.
001079  3               
001079  3               	lda winwid		; window width in characters.
001079  3               	sec	
001079  3               	sbc z80_e		; subtract box width.
001079  3               	lsr a			; divide by 2.
001079  3               	clc
001079  3               	adc winlft		; add left edge of window.
001079  3               	sta blft		; box left.
001079  3               
001079  3               	lda FontPtr		; font.
001079  3               	sta grbase		; set up for text display.
001079  3               	lda FontPtr+1
001079  3               	sta grbase+1
001079  3               
001079  3               	lda TmpAddr+1		; restore message pointer.
001079  3               	sta z80_l
001079  3               	lda TmpAddr
001079  3               	sta z80_h
001079  3               
001079  3               	lda btop		; box top.
001079  3               	sta dispy		; set display coordinate.
001079  3               	lda #0			; start at object zero.
001079  3               	sta combyt		; store number of object in combyt.
001079  3               dbox2:
001079  3               	lda combyt		; get object number.
001079  3               	sta z80_a
001079  3               mod0:
001079  3               	jsr always		; check inventory for display.
001079  3               	cmp #255
001079  3               	beq :+			
001079  3               	jmp dbox13		; not in inventory, skip this line.
001079  3               :
001079  3               	lda blft		; box left.
001079  3               	sta dispx		; set left display position.
001079  3               	lda bwid		; box width.
001079  3               	sta z80_b		; store width.
001079  3               dbox0:
001079  3               	ldy #0			; get character.
001079  3               	lda (z80_hl),y
001079  3               	cmp #','		; end of line?
001079  3               	beq dbox1		; yes, next one.
001079  3               	cmp #ASCII_NEWLINE			; end of line?
001079  3               	beq dbox1		; yes, next one.
001079  3               
001079  3               	dec z80_b		; one less to display.
001079  3               	and #127		; remove terminator.
001079  3               
001079  3               	jsr pchr		; display on screen.
001079  3               
001079  3               	ldy #0
001079  3               	lda (z80_hl),y		; get character.
001079  3               	sta z80_a
001079  3               	inc z80_l		; next character.
001079  3               	bne :+
001079  3               	inc z80_h
001079  3               :
001079  3               	lda z80_a
001079  3               	cmp #128		; end of message?
001079  3               	bmi :+
001079  3               	jmp dbox7		; yes, job done.
001079  3               :
001079  3               	lda z80_b		; chars remaining.
001079  3               	beq :+			; are any left?
001079  3               	jmp dbox0		; yes, continue.
001079  3               :
001079  3               ;---------------------------------------------------
001079  3               ; Reached limit of characters per line.
001079  3               ;---------------------------------------------------
001079  3               
001079  3               dbox9:
001079  3               	ldy #0
001079  3               	lda (z80_hl),y		; get character.
001079  3               	inc z80_l		; next one.
001079  3               	bne :+
001079  3               	inc z80_h
001079  3               :
001079  3               	cmp #','		; another line?
001079  3               	beq dbox10		; yes, do next line.
001079  3               	cmp #ASCII_NEWLINE			; another line?
001079  3               	beq dbox10		; yes, do next line.
001079  3               	cmp #128		; end of message?
001079  3               	bcs :+
001079  3               	jmp dbox11		; yes, finish message.
001079  3               :
001079  3               	jmp dbox9
001079  3               
001079  3               ;---------------------------------------------------
001079  3               ; Fill box to end of line.
001079  3               ;---------------------------------------------------
001079  3               
001079  3               dboxf:
001079  3               	lda #32			; space character.
001079  3               	jsr pchr		; display character.
001079  3               	dec z80_b
001079  3               	beq :+
001079  3               	jmp dboxf		; repeat for remaining chars on line.
001079  3               :
001079  3               	rts
001079  3               dbox1:
001079  3               	inc z80_l		; skip character.
001079  3               	bne :+
001079  3               	inc z80_h
001079  3               :
001079  3               	jsr dboxf		; fill box out to right side.
001079  3               dbox10:
001079  3               	inc dispy		; y coordinate down a line next position.
001079  3               	jmp dbox2		; next line.
001079  3               dbox7:
001079  3               	lda z80_b		; chars remaining.
001079  3               	bne :+			; are any left?
001079  3               	jmp dbox11		; no, nothing to draw.
001079  3               :
001079  3               	jsr dboxf		; fill message to line.
001079  3               
001079  3               ;------------------------------------------------------
001079  3               ; Drawn the box menu, now select option.
001079  3               ;------------------------------------------------------
001079  3               
001079  3               dbox11:
001079  3               	lda btop		; box top.
001079  3               	sta dispy		; set bar position.
001079  3               dbox14:
001079  3               	jsr joykey		; get controls.
001079  3               	cmp #$7f		; anything pressed?
001079  3               	bne dbox14		; yes, debounce it.
001079  3               	jsr dbar		; draw bar.
001079  3               dbox12:
001079  3               	jsr joykey		; get controls.
001079  3               	cmp #$7f		; anything pressed?
001079  3               	beq dbox12		; no, nothing.
001079  3               	and #16			; fire button pressed?
001079  3               	bne :+
001079  3               mod1:
001079  3               	jmp fstd		; yes, job done.
001079  3               :
001079  3               	jsr dbar		; delete bar.
001079  3               
001079  3               	lda joyval		; joystick reading.
001079  3               	and #8			; going up?
001079  3               	beq dboxu		; yes, go up.
001079  3               
001079  3               	ldx dispy		; vertical position of bar.
001079  3               	inx			; look down.
001079  3               	txa
001079  3               	sec
001079  3               	sbc btop		; find distance from top.
001079  3               	cmp blen		; top of box.
001079  3               	bne :+
001079  3               	jmp dbox14		; yes, go no further.
001079  3               :
001079  3               	inc dispy		; move bar.
001079  3               	jmp dbox14		; continue.
001079  3               dboxu:
001079  3               	lda dispy		; vertical position of bar.
001079  3               	cmp btop		; are we at the top?
001079  3               	bne :+
001079  3               	jmp dbox14		; yes, go no further.
001079  3               :
001079  3               	dec dispy		; move bar.
001079  3               	jmp dbox14		; continue.
001079  3               fstd:
001079  3               	lda dispy		; bar position.
001079  3               	sec
001079  3               	sbc btop		; find selected option.
001079  3               	sta varopt		; store the option.
001079  3               	jmp redraw		; redraw the screen.
001079  3               
001079  3               ;------------------------------------------------------
001079  3               ; Option not available.  Skip this line.
001079  3               ;------------------------------------------------------
001079  3               
001079  3               dbox13:
001079  3               	ldy #0
001079  3               	lda (z80_hl),y		; get character.
001079  3               	inc z80_l		; next one.
001079  3               	bne :+
001079  3               	inc z80_h
001079  3               :
001079  3               	cmp #','		; another line?
001079  3               	bne :+
001079  3               	jmp dbox2		; yes, do next line.
001079  3               :
001079  3               	cmp #ASCII_NEWLINE			; another line?
001079  3               	bne :+
001079  3               	jmp dbox2		; yes, do next line.
001079  3               :
001079  3               
001079  3               	bpl :+			; end of message?
001079  3               	jmp dbox11		; yes, finish message.
001079  3               :
001079  3               	jmp dbox13
001079  3               dbox15:
001079  3               	lda TmpAddr		; pop message pointer from the stack.
001079  3               	sta z80_h
001079  3               	lda TmpAddr+1
001079  3               	sta z80_l
001079  3               	rts
001079  3               
001079  3               ;------------------------------------------------------
001079  3               ; Invert bar
001079  3               ;------------------------------------------------------
001079  3               
001079  3               dbar:
001079  3               	lda blft		; box left.
001079  3               	sta dispx		; set display coordinate.
001079  3               	jsr gprad		; get printing address.
001079  3               
001079  3               	lda bwid		; box width.
001079  3               	sta z80_c		; loop counter in c.
001079  3               	lda z80_h		
001079  3               	sta z80_d		; store screen address high byte.
001079  3               dbar1:
001079  3               	ldx #7			; pixel height in b.
001079  3               dbar0:
001079  3               	ldy scrtab,x
001079  3               	lda (scraddr),y		; get screen byte.
001079  3               	eor #255		; reverse all bits.
001079  3               	sta (scraddr),y		; write back to screen.
001079  3               	dex			; next line down.
001079  3               	bpl dbar0		; draw rest of character.
001079  3               
001079  3               	clc
001079  3               	lda scraddr		; one char right.
001079  3               	adc #8
001079  3               	sta scraddr
001079  3               	bcc :+
001079  3               	inc scraddr+1
001079  3               :
001079  3               
001079  3               	dec z80_c		; decrement character counter.
001079  3               	beq :+
001079  3               	jmp dbar1		; repeat for whole line.
001079  3               :
001079  3               	rts
001079  3               
001079  3               ;------------------------------------------------------
001079  3               ; Point to object
001079  3               ;
001079  3               ; Input:
001079  3               ;  -
001079  3               ;
001079  3               ; Output:
001079  3               ;  A = object number, A=255 if already in possession
001079  3               ;------------------------------------------------------
001079  3               
001079  3               invdis:
001079  3               	lda z80_l		; store message text pointer.
001079  3               	pha
001079  3               	lda z80_h
001079  3               	pha
001079  3               	lda combyt		; object number.
001079  3               	inc combyt		; ready for next one.
001079  3               	jsr gotob		; check if we have object.
001079  3               	tay
001079  3               	pla
001079  3               	sta z80_h
001079  3               	pla
001079  3               	sta z80_l
001079  3               	tya
001079  3               	rts
001079  3               
001079  3               ;------------------------------------------------------
001079  3               ; Find option selected.
001079  3               ;
001079  3               ; Input:
001079  3               ;  -
001079  3               ;
001079  3               ; Output:
001079  3               ;  OPT = selected object
001079  3               ;------------------------------------------------------
001079  3               
001079  3               fopt:
001079  3               	lda dispy
001079  3               	sec
001079  3               	sbc btop		; find selected option.
001079  3               	sta tmp+2		; option selected in b register.
001079  3               	inc tmp+2
001079  3               
001079  3               	lda #0			; set to first item.
001079  3               	sta combyt		; object number.
001079  3               fopt0:
001079  3               	jsr fobj		; find next object in inventory.
001079  3               	dec tmp+2
001079  3               	bne fopt0		; repeat for relevant steps down the list.
001079  3               
001079  3               	lda combyt		; get option.
001079  3               	sta varopt		; store the option.
001079  3               	dec varopt		; one less, due to where we increment combyt.
001079  3               	jmp redraw		; redraw the screen.
001079  3               fobj:
001079  3               	ldy combyt		; object number.
001079  3               	inc combyt		; ready for next item.
001079  3               	tya
001079  3               	jsr gotob		; do we have this item?
001079  3               	cmp #255
001079  3               	bne :+
001079  3               	rts
001079  3               :
001079  3               	jmp fobj		; yes, it's on the list.
001079  3               .endif
001079  3               
001079  3               ;----------------------------------------------------
001079  3               ; Clear sprite table.
001079  3               ;
001079  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
001079  3               ;----------------------------------------------------
001079  3               
001079  3               xspr:
001079  3  A9 FF        	lda #255		; clear byte.
00107B  3  A2 00        	ldx #0			; length of table.
00107D  3               xspr0:
00107D  3  9D 00 0B     	sta sprtab,x		; sprite table.
001080  3  E8           	inx			; move to next byte.
001081  3  E0 CC        	cpx #SPRBUF
001083  3  D0 F8        	bne xspr0		; repeat for rest of table.
001085  3  60           	rts
001086  3               
001086  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
001086  3               ; Sound, NOT IMPLEMENTED!!!
001086  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
001086  3               ;
001086  3               ;silenc:
001086  3               ;	jsr silen1 		; silence channel 1.
001086  3               ;	jsr silen2 		; silence channel 2.
001086  3               ;	jsr silen3 		; silence channel 3.
001086  3               ;	jmp plsnd 		; play all channels to switch them off.
001086  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
001086  3               
001086  3               ;-------------------------------------------------------------
001086  3               ; Initialise all objects.
001086  3               ;
001086  3               ; Reset current room,y,x to start room,y,x for all objects
001086  3               ;-------------------------------------------------------------
001086  3               
001086  3               iniob:
001086  3  A9 FB        	lda #<objdta 		; objects table.
001088  3  85 rr        	sta z80_x
00108A  3  A9 70        	lda #>objdta
00108C  3  85 rr        	sta z80_i
00108E  3               
00108E  3  AE 72 10     	ldx numob 		; number of objects in the game.
001091  3               iniob0:
001091  3  A0 23        	ldy #35
001093  3  B1 rr        	lda (z80_ix),y 		; start screen.
001095  3  A0 20        	ldy #32
001097  3  91 rr        	sta (z80_ix),y 		; set start screen.
001099  3               
001099  3  A0 24        	ldy #36
00109B  3  B1 rr        	lda (z80_ix),y 		; find start y.
00109D  3  A0 21        	ldy #33
00109F  3  91 rr        	sta (z80_ix),y 		; set start y.
0010A1  3               
0010A1  3  A0 25        	ldy #37
0010A3  3  B1 rr        	lda (z80_ix),y 		; get initial x.
0010A5  3  A0 22        	ldy #34
0010A7  3  91 rr        	sta (z80_ix),y 		; set x coord.
0010A9  3               
0010A9  3  18           	clc 			; point to next object.
0010AA  3  A5 rr        	lda z80_x
0010AC  3  69 26        	adc #38			; distance between objects.
0010AE  3  85 rr        	sta z80_x
0010B0  3  90 02        	bcc :+
0010B2  3  E6 rr        	inc z80_i
0010B4  3               :
0010B4  3  CA           	dex 			; repeat.
0010B5  3  D0 DA        	bne iniob0
0010B7  3               
0010B7  3  60           	rts
0010B8  3               
0010B8  3               ;-----------------------------------------------
0010B8  3               ; Redraw the screen.
0010B8  3               ;
0010B8  3               ; Remove old copy of all sprites for redraw.
0010B8  3               ;-----------------------------------------------
0010B8  3               
0010B8  3               redraw:
0010B8  3  A5 rr        	lda z80_i 		; place sprite pointer on stack.
0010BA  3  48           	pha
0010BB  3  A5 rr        	lda z80_x
0010BD  3  48           	pha
0010BE  3               
0010BE  3  20 48 17     	jsr droom		; show screen layout.
0010C1  3  20 33 13     	jsr shwob		; draw objects.
0010C4  3               numsp0:
0010C4  3  A9 0C        	lda #NUMSPR		; sprites to draw.
0010C6  3  85 rr        	sta tmp
0010C8  3               
0010C8  3  A9 00        	lda #<sprtab		; sprite table.
0010CA  3  85 rr        	sta z80_x
0010CC  3  A9 0B        	lda #>sprtab
0010CE  3  85 rr        	sta z80_i
0010D0  3               redrw0:
0010D0  3  A0 00        	ldy #0
0010D2  3  B1 rr        	lda (z80_ix),y		; old sprite type.
0010D4  3  C9 FF        	cmp #255		; is it enabled?
0010D6  3  F0 0B        	beq redrw1 		; no, find next one.
0010D8  3               
0010D8  3  A0 03        	ldy #var_Y
0010DA  3  B1 rr        	lda (z80_ix),y 		; sprite y.
0010DC  3  C9 B1        	cmp #177		; beyond maximum?
0010DE  3  B0 03        	bcs redrw1		; yes, nothing to draw.
0010E0  3               
0010E0  3  20 84 0F     	jsr sspria		; show single sprite.
0010E3  3               
0010E3  3               redrw1:
0010E3  3  18           	clc			; next sprite.
0010E4  3  A5 rr        	lda z80_x
0010E6  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
0010E8  3  85 rr        	sta z80_x
0010EA  3  90 02        	bcc :+
0010EC  3  E6 rr        	inc z80_i
0010EE  3               :
0010EE  3  C6 rr        	dec tmp			; repeat for remaining sprites.
0010F0  3  D0 DE        	bne redrw0
0010F2  3               
0010F2  3               rpblc1:
0010F2  3               ;	jsr dshrp		; redraw shrapnel.
0010F2  3               
0010F2  3  68           	pla			; retrieve sprite pointer.
0010F3  3  85 rr        	sta z80_x
0010F5  3  68           	pla
0010F6  3  85 rr        	sta z80_i
0010F8  3               
0010F8  3  60           	rts
0010F9  3               
0010F9  3               ;----------------------------------------------------------------------
0010F9  3               ; Clear screen routine.
0010F9  3               ;
0010F9  3               ; Fill screenmem $8000-$97ff with ScrFillByte
0010F9  3               ;----------------------------------------------------------------------
0010F9  3               
0010F9  3               cls:
0010F9  3  A9 68        	lda #>ScreenAddr		; screen address.
0010FB  3  8D 04 11     	sta clsloop+2
0010FE  3  A9 00        	lda #ScrFillByte
001100  3  A0 00        	ldy #0
001102  3               clsloop:
001102  3  99 00 68     	sta ScreenAddr,y
001105  3  C8           	iny
001106  3  D0 FA        	bne clsloop
001108  3  EE 04 11     	inc clsloop+2
00110B  3  AE 04 11     	ldx clsloop+2
00110E  3  E0 80        	cpx #>(ScreenAddr+ScreenSize)		; _BEEB
001110  3  D0 F0        	bne clsloop
001112  3  60           	rts
001113  3               
001113  3               ;----------------------------------------------------------------------
001113  3               ; FODDER check
001113  3               ;----------------------------------------------------------------------
001113  3               
001113  3               fdchk:
001113  3  A0 00        	ldy #0
001115  3  B1 rr        	lda (z80_hl),y	 	; fetch cell.
001117  3  C9 04        	cmp #FODDER 		; is it fodder?
001119  3  F0 01        	beq :+
00111B  3  60           	rts 			; no.
00111C  3               :
00111C  3  A9 00        	lda #0
00111E  3  A0 00        	ldy #0
001120  3  91 rr        	sta (z80_hl),y 		; rewrite block type.
001122  3               
001122  3  A5 rr        	lda z80_h		; store pointer to block.
001124  3  48           	pha
001125  3  A5 rr        	lda z80_l
001127  3  48           	pha
001128  3               
001128  3  38           	sec			; set carry flag for subtraction.
001129  3  A5 rr        	lda z80_l 		; find simple displacement for block.
00112B  3  E9 00        	sbc #<MAP
00112D  3  85 rr        	sta z80_l
00112F  3  A5 rr        	lda z80_h
001131  3  E9 03        	sbc #>MAP
001133  3  85 rr        	sta z80_h
001135  3               
001135  3  A5 rr        	lda z80_l		; low byte is y coordinate.
001137  3  29 1F        	and #31 		; column position 0 - 31.
001139  3  85 rr        	sta dispx		; set up x position.
00113B  3               
00113B  3  06 rr        	asl z80_l		; multiply displacement by 8.
00113D  3  26 rr        	rol z80_h
00113F  3  06 rr        	asl z80_l
001141  3  26 rr        	rol z80_h
001143  3  06 rr        	asl z80_l
001145  3  26 rr        	rol z80_h
001147  3               
001147  3  A5 rr        	lda z80_h		; x coordinate now in h.
001149  3  85 rr        	sta dispy		; set the display coordinate.
00114B  3               
00114B  3  A9 00        	lda #0 			; block to write.
00114D  3  20 A9 16     	jsr pattr 		; write block.
001150  3               
001150  3  68           	pla 			; restore block pointer.
001151  3  85 rr        	sta z80_l
001153  3  68           	pla
001154  3  85 rr        	sta z80_h
001156  3               
001156  3  60           	rts
001157  3               
001157  3               ;----------------------------------------------------
001157  3               ; Scrolly text and puzzle variables.
001157  3               ;----------------------------------------------------
001157  3               
001157  3               .if sflag
001157  3               txtbit:	.byte 128		; bit to write.
001157  3               txtwid:	.byte 16		; width of ticker message.
001157  3               txtpos:	.word msgdat
001157  3               txtini:	.word msgdat
001157  3               txtscr:	.word ScreenAddr
001157  3               .endif
001157  3               
001157  3               ;----------------------------------------------------
001157  3               ; Specialist routines.
001157  3               ; Process shrapnel.
001157  3               ;----------------------------------------------------
001157  3               proshr:
001157  3               .if pflag
001157  3               	lda #<SHRAPN		; table.
001157  3               	sta z80_x
001157  3               	lda #>SHRAPN
001157  3               	sta z80_i
001157  3               
001157  3               	lda #NUMSHR		; shrapnel pieces to process.
001157  3               	sta shrctr
001157  3               prosh0:
001157  3               	ldy #0
001157  3               	lda (z80_ix),y		; on/off marker.
001157  3               	asl a
001157  3               proshx:
001157  3               	bcs :+
001157  3               	jsr prosh1 		; on, so process it.
001157  3               :
001157  3               	clc
001157  3               	lda z80_x
001157  3               	adc #SHRSIZ
001157  3               	sta z80_x
001157  3               	bcc :+
001157  3               	inc z80_i
001157  3               :
001157  3               	dec shrctr		; round again.
001157  3               	bne prosh0
001157  3               .endif
001157  3               .if sflag
001157  3               	jsr scrly
001157  3               .endif
001157  3  60           	rts
001158  3               
001158  3               .if pflag
001158  3               ;----------------------------------------------------
001158  3               ; Proces shrapnel piece
001158  3               ;----------------------------------------------------
001158  3               
001158  3               prosh1:
001158  3               	jsr plot 		; delete the pixel.
001158  3               
001158  3               	lda #<shrptr		; shrapnel routine pointers.
001158  3               	sta z80_l
001158  3               	lda #>shrptr
001158  3               	sta z80_h
001158  3               
001158  3               	ldy #0
001158  3               	lda (z80_ix),y		; restore shrapnel type.
001158  3               	jsr prosh2 		; run the routine.
001158  3               	jsr chkxy		; check x and y are good before we redisplay.
001158  3               
001158  3               	lda #<SHRSIZ 		; distance to next.
001158  3               	sta z80_e
001158  3               	lda #>SHRSIZ
001158  3               	sta z80_d
001158  3               	rts
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Run the routine
001158  3               ;----------------------------------------------------
001158  3               
001158  3               prosh2:
001158  3               	asl a 			; 2 bytes per address.
001158  3               	tay
001158  3               	lda shrptr,y
001158  3               	sta z80_l
001158  3               	lda shrptr+1,y 		; fetch high byte from table.
001158  3               	sta z80_h
001158  3               	jmp (z80_hl) 		; jump to routine.
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Paricle routine table
001158  3               ;----------------------------------------------------
001158  3               
001158  3               shrptr:	.word laser		; laser.
001158  3               	.word trail		; vapour trail.
001158  3               	.word shrap		; shrapnel from explosion.
001158  3               	.word dotl		; horizontal starfield left.
001158  3               	.word dotr		; horizontal starfield right.
001158  3               	.word dotu		; vertical starfield up.
001158  3               	.word dotd		; vertical starfield down.
001158  3               	.word ptcusr		; user particle.
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Explosion shrapnel.
001158  3               ;----------------------------------------------------
001158  3               
001158  3               shrap:
001158  3               	ldy #1
001158  3               	lda (z80_ix),y 		; get the angle.
001158  3               	clc
001158  3               	adc #<shrsin		; shrapnel sine table.
001158  3               	sta z80_l
001158  3               	lda #>shrsin
001158  3               	adc #0
001158  3               	sta z80_h
001158  3               
001158  3               	ldy #0
001158  3               	lda (z80_hl),y 		; fetch value from table.
001158  3               	sta z80_e
001158  3               	inc z80_l 		; next byte of table.
001158  3               	bne :+
001158  3               	inc z80_h
001158  3               :
001158  3               	ldy #0
001158  3               	lda (z80_hl),y		; fetch value from table.
001158  3               	sta z80_d
001158  3               	inc z80_l		; next byte of table.
001158  3               	bne :+
001158  3               	inc z80_h
001158  3               :
001158  3               	ldy #0
001158  3               	lda (z80_hl),y 		; fetch value from table.
001158  3               	sta z80_c
001158  3               	inc z80_l 		; next byte of table.
001158  3               	bne :+
001158  3               	inc z80_h
001158  3               :
001158  3               	ldy #0
001158  3               	lda (z80_hl),y 		; fetch value from table.
001158  3               	sta z80_b
001158  3               
001158  3               	ldy #2
001158  3               	lda (z80_ix),y 		; x coordinate in hl.
001158  3               	clc
001158  3               	adc z80_e		; add sine lb
001158  3               	sta (z80_ix),y		; store new coordinate lb.
001158  3               	ldy #3
001158  3               	lda (z80_ix),y
001158  3               	adc z80_d		; add sine hb
001158  3               	sta (z80_ix),y		; store new coordinate hb.
001158  3               
001158  3               	ldy #4
001158  3               	lda (z80_ix),y	 	; y coordinate in hl.
001158  3               	clc
001158  3               	adc z80_c		; add cosine lb
001158  3               	sta (z80_ix),y		; store new coordinate lb.
001158  3               	ldy #5
001158  3               	lda (z80_ix),y
001158  3               	adc z80_b		; add cosine lb
001158  3               	sta (z80_ix),y		; store new coordinate hb.
001158  3               
001158  3               	rts
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Move dots
001158  3               ;----------------------------------------------------
001158  3               
001158  3               dotl:
001158  3               	ldy #5
001158  3               	lda (z80_ix),y
001158  3               	sec
001158  3               	sbc #1		 	; move left.
001158  3               	sta (z80_ix),y
001158  3               	rts
001158  3               dotr:
001158  3               	ldy #5
001158  3               	lda (z80_ix),y
001158  3               	clc
001158  3               	adc #1		 	; move left.
001158  3               	sta (z80_ix),y
001158  3               	rts
001158  3               dotu:
001158  3               	ldy #3
001158  3               	lda (z80_ix),y
001158  3               	sec
001158  3               	sbc #1		 	; move up.
001158  3               	sta (z80_ix),y
001158  3               	rts
001158  3               dotd:
001158  3               	ldy #3
001158  3               	lda (z80_ix),y
001158  3               	clc
001158  3               	adc #1			; move down.
001158  3               	sta (z80_ix),y
001158  3               	rts
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Check if coordinates are ok before redrawing at new position.
001158  3               ;
001158  3               ; left:   X>L		X=L	Ok
001158  3               ; right:  R+15>X	X=R	Ok
001158  3               ; top:    Y>T		Y=T	Ok
001158  3               ; bottom: B+15>Y	Y=B	Ok
001158  3               ;----------------------------------------------------
001158  3               
001158  3               chkxy:
001158  3               
001158  3               ; top:    Y>T		Y=T	Ok
001158  3               
001158  3               	ldy #3
001158  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
001158  3               	cmp wntopx		; window top.
001158  3               	bcs :+			; compare with top window limit.
001158  3               	jmp kilshr		; out of window, kill shrapnel.
001158  3               :
001158  3               ; left:   X>L		X=L	Ok
001158  3               
001158  3               	ldy #5
001158  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
001158  3               	cmp wnlftx		; left edge.
001158  3               	bcs :+			; compare with left window limit.
001158  3               	jmp kilshr		; out of window, kill shrapnel.
001158  3               :
001158  3               ; bottom: B+15>Y	Y=B	Ok
001158  3               
001158  3               	lda wnbotx		; point to bottom.
001158  3               	clc
001158  3               	adc #15
001158  3               	ldy #3
001158  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
001158  3               	bcs :+			; compare with shrapnel x coordinate.
001158  3               	jmp kilshr		; off screen, kill shrapnel..
001158  3               :
001158  3               ; right:  R+15>X	X=R	Ok
001158  3               
001158  3               	lda wnrgtx		; point to right edge.
001158  3               	clc
001158  3               	adc #15
001158  3               	ldy #5
001158  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
001158  3               	bcs :+			; compare with window limit.
001158  3               	jmp kilshr		; off screen, kill shrapnel.
001158  3               :
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Drop through.
001158  3               ; Display shrapnel.
001158  3               ;----------------------------------------------------
001158  3               
001158  3               plot:
001158  3               	ldy #3
001158  3               	lda (z80_ix),y		; y integer.
001158  3               	sta dispy	 	; workspace coordinates.
001158  3               	ldy #5
001158  3               	lda (z80_ix),y	 	; x integer.
001158  3               	sta dispx 		; workspace coordinates.
001158  3               
001158  3               	ldy #0
001158  3               	lda (z80_ix),y 		; type.
001158  3               	bne :+			; is it a laser?
001158  3               	jmp plot1 		; yes, draw laser instead.
001158  3               :
001158  3               plot0:
001158  3               	lda dispx		; which pixel within byte do we
001158  3               	and #7			; want to set first?
001158  3               	tay
001158  3               	lda dots,y 		; table of small pixel positions.
001158  3               	sta z80_e 		; get value.
001158  3               
001158  3               	jsr scadd 		; screen address.
001158  3               	ldy #0
001158  3               	lda (scraddr),y		; see what's already there.
001158  3               	eor z80_e
001158  3               	sta (scraddr),y 	; put back on screen.
001158  3               	rts
001158  3               
001158  3               plot1:
001158  3               	jsr scadd 		; screen address.
001158  3               	ldy #0
001158  3               	lda (scraddr),y 	; fetch byte there.
001158  3               	eor #255 		; toggle all bits.
001158  3               	sta (scraddr),y 	; new byte.
001158  3               	rts
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Switch off shrapnel
001158  3               ;----------------------------------------------------
001158  3               
001158  3               kilshr:
001158  3               	lda #128
001158  3               	ldy #0
001158  3               	sta (z80_ix),y	; switch off shrapnel.
001158  3               	rts
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Sine/cosine table
001158  3               ;----------------------------------------------------
001158  3               
001158  3               shrsin:	.word 0,1024,391,946,724,724,946,391
001158  3               	.word 1024,0,946,65144,724,64811,391,64589
001158  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
001158  3               	.word 64512,0,64589,391,64811,724,65144,946
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Create trail
001158  3               ;----------------------------------------------------
001158  3               
001158  3               trail:
001158  3               	ldy #1
001158  3               	lda (z80_ix),y 	; time remaining.
001158  3               	sec
001158  3               	sbc #1
001158  3               	sta (z80_ix),y
001158  3               	bne :+
001158  3               	jmp trailk		; time to switch it off.
001158  3               :
001158  3               	jsr qrand		; get a random number.
001158  3               	lsr a 			; x or y axis?
001158  3               	bcc :+
001158  3               	jmp trailv		; use y.
001158  3               :
001158  3               ; Trail horizontal
001158  3               
001158  3               	lsr a 			; which direction?
001158  3               	bcc :+
001158  3               	jmp traill		; go left.
001158  3               :
001158  3               ; Trail right
001158  3               
001158  3               	ldy #5
001158  3               	lda (z80_ix),y
001158  3               	clc
001158  3               	adc #1	 		; go right.
001158  3               	sta (z80_ix),y
001158  3               	rts
001158  3               
001158  3               ; Trail left
001158  3               
001158  3               traill:
001158  3               	ldy #5
001158  3               	lda (z80_ix),y
001158  3               	sec
001158  3               	sbc #1 			; go left.
001158  3               	sta (z80_ix),y
001158  3               	rts
001158  3               
001158  3               ; Trail vertical
001158  3               
001158  3               trailv:
001158  3               	lsr a		 	; which direction?
001158  3               	bcc :+
001158  3               	jmp trailu		; go up.
001158  3               :
001158  3               ; Trail down
001158  3               
001158  3               	ldy #3
001158  3               	lda (z80_ix),y
001158  3               	clc
001158  3               	adc #1 			; go down.
001158  3               	sta (z80_ix),y
001158  3               	rts
001158  3               
001158  3               ; Trail up
001158  3               
001158  3               trailu:
001158  3               	ldy #3
001158  3               	lda (z80_ix),y
001158  3               	sec
001158  3               	sbc #1 			; go up.
001158  3               	sta (z80_ix),y
001158  3               	rts
001158  3               
001158  3               ; Kill trail
001158  3               
001158  3               trailk:
001158  3               	lda #200		; set off-screen to kill vapour trail.
001158  3               	ldy #3
001158  3               	sta (z80_ix),y
001158  3               	rts
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Create laser beam
001158  3               ;----------------------------------------------------
001158  3               
001158  3               laser:
001158  3               	ldy #1
001158  3               	lda (z80_ix),y 		; direction.
001158  3               	ror a 			; left or right?
001158  3               	bcs :+
001158  3               	jmp laserl		; move left.
001158  3               :
001158  3               ; Laser right
001158  3               
001158  3               	lda #8			; distance to travel.
001158  3               	sta z80_b
001158  3               	jmp laserm		; move laser.
001158  3               
001158  3               ; Laser left
001158  3               
001158  3               laserl:
001158  3               	lda #248		; distance to travel.
001158  3               	sta z80_b
001158  3               laserm:
001158  3               	ldy #5
001158  3               	lda (z80_ix),y		; x position.
001158  3               	clc
001158  3               	adc z80_b		; add distance.
001158  3               	sta (z80_ix),y		; set new x coordinate.
001158  3               
001158  3               ; Test new block.
001158  3               
001158  3               	sta dispx 		; set x for block collision detection purposes.
001158  3               	ldy #3
001158  3               	lda (z80_ix),y 		; get y.
001158  3               	sta dispy		; set coordinate for collision test.
001158  3               	jsr tstbl 		; get block type there.
001158  3               	cmp #WALL		; is it solid?
001158  3               	bne :+
001158  3               	jmp trailk		; yes, it cannot pass.
001158  3               :
001158  3               	rts
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Dots mask
001158  3               ;----------------------------------------------------
001158  3               
001158  3               dots:	.byte 128,64,32,16,8,4,2,1
001158  3               
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Plot, preserving de.
001158  3               ;----------------------------------------------------
001158  3               
001158  3               plotde:
001158  3               	lda z80_d 		; put de on stack.
001158  3               	pha
001158  3               	lda z80_e
001158  3               	pha
001158  3               
001158  3               	jsr plot 		; plot pixel.
001158  3               
001158  3               	pla			; restore de from stack.
001158  3               	sta z80_e
001158  3               	pla
001158  3               	sta z80_d
001158  3               
001158  3               	rts
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Shoot a laser.
001158  3               ;----------------------------------------------------
001158  3               
001158  3               shoot:
001158  3               	sta z80_c		; store direction in c register.
001158  3               	ldy #8
001158  3               	lda (z80_ix),y 		; y coordinate.
001158  3               shoot1:
001158  3               	clc
001158  3               	adc #7 			; down 7 pixels.
001158  3               	sta z80_l 		; puty y coordinate in l.
001158  3               
001158  3               	ldy #9
001158  3               	lda (z80_ix),y 		; x coordinate in h.
001158  3               	sta z80_h
001158  3               
001158  3               	lda z80_i		; store pointer to sprite.
001158  3               	pha
001158  3               	lda z80_x
001158  3               	pha
001158  3               
001158  3               	jsr fpslot 		; find particle slot.
001158  3               	bcs :+
001158  3               	jmp vapou2		; failed, restore ix.
001158  3               :
001158  3               	lda #0
001158  3               	ldy #0
001158  3               	sta (z80_ix),y 		; set up a laser.
001158  3               
001158  3               	lda z80_c
001158  3               	ldy #1
001158  3               	sta (z80_ix),y 		; set the direction.
001158  3               
001158  3               	lda z80_l
001158  3               	ldy #3
001158  3               	sta (z80_ix),y		; set y coordinate.
001158  3               
001158  3               	ror z80_c		; check direction we want.
001158  3               	bcc :+
001158  3               	jmp shootr		; shoot right.
001158  3               :
001158  3               	lda z80_h		; X position.
001158  3               shoot0:
001158  3               	and #248		; align on character boundary.
001158  3               	ldy #5
001158  3               	sta (z80_ix),y		; set x coordinate.
001158  3               	jmp vapou0 		; draw first image.
001158  3               shootr:
001158  3               	lda z80_h		; x position.
001158  3               	clc
001158  3               	adc #15			; look right.
001158  3               	jmp shoot0		; align and continue.
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Create a bit of vapour trail.
001158  3               ;----------------------------------------------------
001158  3               
001158  3               vapour:
001158  3               	lda z80_i		; store pointer to sprite.
001158  3               	pha
001158  3               	lda z80_x
001158  3               	pha
001158  3               
001158  3               	ldy #8
001158  3               	lda (z80_ix),y 		; y coordinate.
001158  3               	clc
001158  3               	adc #7			; mid-point of sprite.
001158  3               	sta z80_l
001158  3               
001158  3               	ldy #9
001158  3               	lda (z80_ix),y 		; x coordinate.
001158  3               	adc #7
001158  3               	sta z80_h
001158  3               
001158  3               	jsr fpslot 		; find particle slot.
001158  3               	bcc :+
001158  3               	jmp vapou1		; no, we can use it.
001158  3               :
001158  3               vapou2:
001158  3               	pla
001158  3               	sta z80_x
001158  3               	pla
001158  3               	sta z80_i
001158  3               	rts
001158  3               vapou1:
001158  3               	lda z80_l
001158  3               	ldy #3
001158  3               	sta (z80_ix),y		; set up y.
001158  3               
001158  3               	lda z80_h
001158  3               	ldy #5
001158  3               	sta (z80_ix),y 		; set up x coordinate.
001158  3               
001158  3               	jsr qrand		; get quick random number.
001158  3               	and #15			; random time.
001158  3               	clc
001158  3               	adc #15			; minimum time on screen.
001158  3               	ldy #1
001158  3               	sta (z80_ix),y		; set time on screen.
001158  3               
001158  3               	lda #1
001158  3               	ldy #0
001158  3               	sta (z80_ix),y		; define particle as vapour trail.
001158  3               vapou0:
001158  3               	jsr chkxy		; plot first position.
001158  3               	jmp vapou2
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Create a user particle.
001158  3               ;----------------------------------------------------
001158  3               
001158  3               ptusr:
001158  3               	sta z80_f		; store timer.
001158  3               
001158  3               	ldy #8
001158  3               	lda (z80_ix),y 		; y coordinate.
001158  3               	clc
001158  3               	adc #7			; mid-point of sprite.
001158  3               	sta z80_l
001158  3               
001158  3               	ldy #9
001158  3               	lda (z80_ix),y 		; x coordinate.
001158  3               	clc
001158  3               	adc #7			; mid-point of sprite.
001158  3               	sta z80_h
001158  3               
001158  3               	jsr fpslot 		; find particle slot.
001158  3               	bcs ptusr1
001158  3               	rts 			; out of slots, can't generate anything.
001158  3               ptusr1:
001158  3               	lda z80_l
001158  3               	ldy #3
001158  3               	sta (z80_ix),y 		; set up y.
001158  3               
001158  3               	lda z80_h
001158  3               	ldy #5
001158  3               	sta (z80_ix),y		; set up x coordinate.
001158  3               
001158  3               	lda z80_f 		; restore timer.
001158  3               	ldy #1
001158  3               	sta (z80_ix),y		; set time on screen.
001158  3               
001158  3               	lda #7
001158  3               	ldy #0
001158  3               	sta (z80_ix),y		; define particle as user particle.
001158  3               
001158  3               	jmp chkxy		; plot first position.
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Create a vertical or horizontal star.
001158  3               ;----------------------------------------------------
001158  3               
001158  3               star:
001158  3               	lda z80_i		; store pointer to sprite.
001158  3               	pha
001158  3               	lda z80_x
001158  3               	pha
001158  3               
001158  3               	jsr fpslot 		; find particle slot.
001158  3               	bcs star7		; found one we can use.
001158  3               star0:
001158  3               	pla 			; restore sprite pointer.
001158  3               	sta z80_x
001158  3               	pla
001158  3               	sta z80_i
001158  3               	rts 			; out of slots, can't generate anything.
001158  3               star7:
001158  3               	lda z80_c		; direction.
001158  3               	and #3 			; is it left?
001158  3               	bne :+
001158  3               	jmp star1 		; yes, it's left.
001158  3               :
001158  3               	cmp #1 			; is it right?
001158  3               	bne :+
001158  3               	jmp star2 		; yes, it's right.
001158  3               :
001158  3               	cmp #2 			; is it up?
001158  3               	bne :+
001158  3               	jmp star3 		; yes, it's up.
001158  3               :
001158  3               	ldy wntopx 		; get edge of screen.
001158  3               	iny			; down one pixel.
001158  3               	tya
001158  3               star8:
001158  3               	ldy #3
001158  3               	sta (z80_ix),y 		; set y coord.
001158  3               	jsr qrand 		; get quick random number.
001158  3               star9:
001158  3               	ldy #5
001158  3               	sta (z80_ix),y		; set x position.
001158  3               
001158  3               	lda z80_c		; direction.
001158  3               	and #3			; zero to three.
001158  3               	clc
001158  3               	adc #3			; 3 to 6 for starfield.
001158  3               	ldy #0
001158  3               	sta (z80_ix),y		; define particle as star.
001158  3               	jsr chkxy		; plot first position.
001158  3               	jmp star0
001158  3               star1:
001158  3               	jsr qrand		; get quick random number.
001158  3               	ldy #3
001158  3               	sta (z80_ix),y 		; set y coord.
001158  3               
001158  3               	lda wnrgtx 		; get edge of screen.
001158  3               	clc
001158  3               	adc #15			; add width of sprite minus 1.
001158  3               	jmp star9
001158  3               star2:
001158  3               	jsr qrand 		; get quick random number.
001158  3               	ldy #3
001158  3               	sta (z80_ix),y		; set y coord.
001158  3               
001158  3               	lda wnlftx		; get edge of screen.
001158  3               	jmp star9
001158  3               star3:
001158  3               	lda wnbotx 		; get edge of screen.
001158  3               	clc
001158  3               	adc #15 		; height of sprite minus one pixel.
001158  3               	jmp star8
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Find particle slot for lasers or vapour trail.
001158  3               ; can't use alternate accumulator.
001158  3               ;----------------------------------------------------
001158  3               
001158  3               fpslot:
001158  3               	lda #<SHRAPN 		; shrapnel table.
001158  3               	sta z80_x
001158  3               	lda #>SHRAPN
001158  3               	sta z80_i
001158  3               
001158  3               	lda #NUMSHR		; number of pieces in table.
001158  3               	sta z80_b
001158  3               fpslt0:
001158  3               	ldy #0
001158  3               	lda (z80_ix),y		; get type.
001158  3               	asl a  			; is this slot in use?
001158  3               	bcc :+
001158  3               	rts			; no, we can use it.
001158  3               :
001158  3               	clc			; point to more shrapnel.
001158  3               	lda z80_x
001158  3               	adc #SHRSIZ
001158  3               	sta z80_x
001158  3               	bcc :+
001158  3               	inc z80_i
001158  3               :
001158  3               	dec z80_b		; repeat for all shrapnel.
001158  3               	bne fpslt0
001158  3               
001158  3               	clc
001158  3               	rts 			; out of slots, can't generate anything.
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Create an explosion at sprite position.
001158  3               ;----------------------------------------------------
001158  3               
001158  3               explod:
001158  3               	sta z80_c 		; particles to create.
001158  3               
001158  3               	lda z80_i 		; store pointer to sprite.
001158  3               	pha
001158  3               	lda z80_x
001158  3               	pha
001158  3               
001158  3               	ldy #8
001158  3               	lda (z80_ix),y 		; y coordinate.
001158  3               	sta z80_l
001158  3               	ldy #9
001158  3               	lda (z80_ix),y		; x coordinate.
001158  3               	sta z80_h
001158  3               
001158  3               	lda #<SHRAPN		; shrapnel table.
001158  3               	sta z80_x
001158  3               	lda #>SHRAPN
001158  3               	sta z80_i
001158  3               
001158  3               	lda #NUMSHR		; number of pieces in table.
001158  3               	sta explcnt
001158  3               expld0:
001158  3               	ldy #0
001158  3               	lda (z80_ix),y		; get type.
001158  3               	asl a 			; is this slot in use?
001158  3               	bcs expld1		; no, we can use it.
001158  3               expld2:
001158  3               	clc
001158  3               	lda z80_x
001158  3               	adc #SHRSIZ
001158  3               	sta z80_x
001158  3               	bcc :+
001158  3               	inc z80_i
001158  3               :
001158  3               	dec explcnt		; repeat for all shrapnel.
001158  3               	bne expld0
001158  3               expld3:
001158  3               	pla			; restore sprite pointer.
001158  3               	sta z80_x
001158  3               	pla
001158  3               	sta z80_i
001158  3               	rts 			; out of slots, can't generate any more.
001158  3               
001158  3               expld1:
001158  3               	lda z80_c		; shrapnel counter.
001158  3               	and #15			; 0 to 15.
001158  3               	clc			; add to x.
001158  3               	adc z80_l
001158  3               	ldy #3
001158  3               	sta (z80_ix),y		; y coord.
001158  3               
001158  3               	lda seed3 		; crap random number.
001158  3               	and #15			; 0 to 15.
001158  3               	clc 			; add to y.
001158  3               	adc z80_h
001158  3               	ldy #5
001158  3               	sta (z80_ix),y		; x coord.
001158  3               
001158  3               	lda #2
001158  3               	ldy #0
001158  3               	sta (z80_ix),y		; switch it on.
001158  3               
001158  3               	jsr chkxy		; plot first position.
001158  3               	jsr qrand		; quick random angle.
001158  3               	and #60 		; keep within range.
001158  3               	ldy #1
001158  3               	sta (z80_ix),y		; angle.
001158  3               
001158  3               	dec z80_c		; one less piece of shrapnel to generate.
001158  3               	bne expld2 		; back to main explosion loop.
001158  3               	jmp expld3 		; restore sprite pointer and exit.
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Quick random
001158  3               ;----------------------------------------------------
001158  3               
001158  3               qrand:
001158  3               	jsr random		; r register.
001158  3               	eor seed3		; combine with seed.
001158  3               	sta seed3 		; new seed.
001158  3               	rts
001158  3               
001158  3               ;----------------------------------------------------
001158  3               ; Display all shrapnel.
001158  3               ;----------------------------------------------------
001158  3               
001158  3               dshrp:
001158  3               	lda #<plotde		; display routine.
001158  3               	sta proshx+1
001158  3               	lda #>plotde
001158  3               	sta proshx+2
001158  3               	jsr proshr		; process shrapnel.
001158  3               
001158  3               	lda #<prosh1		; processing routine.
001158  3               	sta proshx+1
001158  3               	lda #>prosh1
001158  3               	sta proshx+2
001158  3               	rts
001158  3               
001158  3               ;------------------------------------------------------
001158  3               ; Particle engine.
001158  3               ;
001158  3               ; Init particle data for 55 particles in SHRAPN table.
001158  3               ; Every particle has 6 bytes.
001158  3               ;
001158  3               ; global:	-
001158  3               ; local:	x,y,hl
001158  3               ; calls:	-
001158  3               ;------------------------------------------------------
001158  3               
001158  3               inishr:
001158  3               	lda #<SHRAPN 		; table.
001158  3               	sta z80_l
001158  3               	lda #>SHRAPN
001158  3               	sta z80_h
001158  3               
001158  3               	ldy #0
001158  3               	ldx #NUMSHR		; shrapnel pieces to process.
001158  3               inish0:
001158  3               	lda #255 		; kill the shrapnel.
001158  3               	sta (z80_hl),y
001158  3               
001158  3               	clc 			; point there.
001158  3               	lda z80_l
001158  3               	adc #SHRSIZ		; distance to next.
001158  3               	sta z80_l
001158  3               	bcc :+
001158  3               	inc z80_h
001158  3               :
001158  3               	dex
001158  3               	bne inish0 		; round again.
001158  3               	rts
001158  3               
001158  3               ;------------------------------------------------------
001158  3               ; Check for collision between laser and sprite.
001158  3               ;------------------------------------------------------
001158  3               
001158  3               lcol:
001158  3               	lda #<SHRAPN		; shrapnel table.
001158  3               	sta z80_l
001158  3               	lda #>SHRAPN
001158  3               	sta z80_h
001158  3               
001158  3               	lda #NUMSHR		; number of pieces in table.
001158  3               	sta z80_b
001158  3               lcol0:
001158  3               	ldy #0
001158  3               	lda (z80_hl),y 		; get type.
001158  3               	beq lcol1		; yes, check collision.
001158  3               lcol3:
001158  3               	clc			; point to more shrapnel.
001158  3               	lda z80_l
001158  3               	adc #SHRSIZ
001158  3               	sta z80_l
001158  3               	bcc :+
001158  3               	inc z80_h
001158  3               :
001158  3               	dec z80_b		; repeat for all shrapnel.
001158  3               	bne lcol0
001158  3               	rts 			; no collision, carry not set.
001158  3               lcol1:
001158  3               	ldy #3
001158  3               	lda (z80_hl),y		; get y.
001158  3               	sec
001158  3               	ldy #8
001158  3               	sbc (z80_ix),y		; subtract sprite y.
001158  3               lcolh:
001158  3               	cmp #16 		; within range?
001158  3               	bcc :+
001158  3               	jmp lcol2		; no, missed.
001158  3               :
001158  3               	ldy #5
001158  3               	lda (z80_hl),y 		; get x.
001158  3               	sec
001158  3               	ldy #9
001158  3               	sbc (z80_ix),y 		; subtract sprite y.
001158  3               	cmp #16			; within range?
001158  3               	bcs :+
001158  3               	jmp lcol4 		; yes, collision occurred.
001158  3               :
001158  3               lcol2:
001158  3               	jmp lcol3
001158  3               lcol4:
001158  3               	sec
001158  3               	rts 			; return with carry set for collision.
001158  3               .endif
001158  3               
001158  3               ;------------------------------------------------------
001158  3               ; Main game engine code starts here.
001158  3               ; After initialisation, mloop is the main loop
001158  3               ;------------------------------------------------------
001158  3               
001158  3               game:
001158  3               
001158  3               ; Set up screen address table.
001158  3               
001158  3               setsat:
001158  3  A9 00        	lda #<ScreenAddr		; start of screen.
00115A  3  85 rr        	sta scraddr
00115C  3  A9 68        	lda #>ScreenAddr
00115E  3  85 rr        	sta scraddr+1
001160  3               
001160  3  A0 00        	ldy #0			; vertical lines on screen.
001162  3               setsa0:
001162  3  A5 rr        	lda scraddr
001164  3  99 00 06     	sta SCADTB_lb,y		; write low byte.
001167  3  A5 rr        	lda scraddr+1
001169  3  99 00 07     	sta SCADTB_hb,y		; write high byte.
00116C  3  20 08 10     	jsr nline		; next line down.
00116F  3  C8           	iny			; next position in table.
001170  3  D0 F0        	bne setsa0
001172  3               
001172  3               ; Init graphics mode
001172  3               
001172  3  20 D3 0E     	jsr screeninit
001175  3               
001175  3               ; Init AtoMMC joystick
001175  3  20 99 0E     	jsr joyinit		; AtoMMC joystick on PORT B
001178  3               
001178  3               rpblc2:
001178  3               .if pflag
001178  3               	jsr inishr 		; initialise particle engine.
001178  3               .endif
001178  3               evintr:
001178  3  20 08 31     	jsr evnt12 		; call intro/menu event.
00117B  3               
00117B  3  A9 02        	lda #WALL 		; write default property.
00117D  3  A2 00        	ldx #0
00117F  3               clrmap:
00117F  3  9D 00 03     	sta MAP,x 		; block properties.
001182  3  9D 00 04     	sta MAP+256,x
001185  3  9D 00 05     	sta MAP+512,x
001188  3  E8           	inx			; next byte.
001189  3  D0 F4        	bne clrmap
00118B  3               
00118B  3  20 86 10     	jsr iniob 		; initialise objects.
00118E  3               
00118E  3  A9 00        	lda #0			; put zero in accumulator.
001190  3  85 rr        	sta gamwon		; reset game won flag.
001192  3               
001192  3  20 E3 12     	jsr inisc 		; init the score.
001195  3               mapst:
001195  3  AD 5F 22     	lda stmap 		; start position on map.
001198  3  8D 1C 22     	sta roomtb		; set up position in table, if there is one.
00119B  3               
00119B  3               inipbl:
00119B  3  20 DE 1E     	jsr initsc 		; set up first screen.
00119E  3               
00119E  3  A9 0B        	lda #<ssprit 		; default to spare sprite in table.
0011A0  3  85 rr        	sta z80_x
0011A2  3  A9 22        	lda #>ssprit
0011A4  3  85 rr        	sta z80_i
0011A6  3               evini:
0011A6  3  20 29 31     	jsr evnt13 		; initialisation.
0011A9  3               
0011A9  3               ; Two restarts.
0011A9  3               ; First restart - clear all sprites and initialise everything.
0011A9  3               
0011A9  3               rstrt:
0011A9  3  20 95 12     	jsr rsevt 		; restart events.
0011AC  3  20 79 10     	jsr xspr 		; clear sprite table.
0011AF  3  20 3C 20     	jsr sprlst 		; fetch pointer to screen sprites.
0011B2  3  20 C5 20     	jsr ispr 		; initialise sprite table.
0011B5  3               
0011B5  3  4C C4 11     	jmp rstrt0
0011B8  3               
0011B8  3               ; Second restart - clear all but player, and don't initialise him.
0011B8  3               
0011B8  3               rstrtn:
0011B8  3  20 95 12     	jsr rsevt		; restart events.
0011BB  3  20 69 20     	jsr nspr 		; clear all non-player sprites.
0011BE  3  20 3C 20     	jsr sprlst 		; fetch pointer to screen sprites.
0011C1  3  20 02 21     	jsr kspr 		; initialise sprite table, no more players.
0011C4  3               
0011C4  3               ; Set up the player and/or enemy sprites.
0011C4  3               
0011C4  3               rstrt0:
0011C4  3  A9 00        	lda #0 			; zero in accumulator.
0011C6  3  85 rr        	sta nexlev 		; reset next level flag.
0011C8  3  85 rr        	sta restfl 		; reset restart flag.
0011CA  3  85 rr        	sta deadf 		; reset dead flag.
0011CC  3  20 48 17     	jsr droom 		; show screen layout.
0011CF  3               rpblc0:
0011CF  3               .if pflag
0011CF  3               	jsr inishr 		; initialise particle engine.
0011CF  3               .endif
0011CF  3  20 33 13     	jsr shwob		; draw objects.
0011D2  3               
0011D2  3  A9 00        	lda #<sprtab 		; address of sprite table, even sprites.
0011D4  3  85 rr        	sta z80_x
0011D6  3  A9 0B        	lda #>sprtab
0011D8  3  85 rr        	sta z80_i
0011DA  3  20 B9 1C     	jsr dspr 		; display sprites.
0011DD  3               
0011DD  3  A9 11        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0011DF  3  85 rr        	sta z80_x
0011E1  3  A9 0B        	lda #>(sprtab+TABSIZ)
0011E3  3  85 rr        	sta z80_i
0011E5  3  20 B9 1C     	jsr dspr 		; display sprites.
0011E8  3               mloop:
0011E8  3  20 B1 0E     	jsr vsync 		; synchronise with display.
0011EB  3               
0011EB  3  A9 00        	lda #<sprtab 		; address of sprite table, even sprites.
0011ED  3  85 rr        	sta z80_x
0011EF  3  A9 0B        	lda #>sprtab
0011F1  3  85 rr        	sta z80_i
0011F3  3  20 B9 1C     	jsr dspr 		; display even sprites.
0011F6  3               
0011F6  3  20 32 13     	jsr plsnd 		; play sounds.
0011F9  3  20 B1 0E     	jsr vsync 		; synchronise with display.
0011FC  3               
0011FC  3  A9 11        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0011FE  3  85 rr        	sta z80_x
001200  3  A9 0B        	lda #>(sprtab+TABSIZ)
001202  3  85 rr        	sta z80_i
001204  3  20 B9 1C     	jsr dspr 		; display odd sprites.
001207  3               
001207  3  A9 0B        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
001209  3  85 rr        	sta z80_x
00120B  3  A9 22        	lda #>(ssprit)
00120D  3  85 rr        	sta z80_i
00120F  3               evlp1:
00120F  3  20 06 31     	jsr evnt10 		; called once per main loop.
001212  3  20 37 1C     	jsr pspr 		; process sprites.
001215  3               
001215  3               ; Main loop events.
001215  3               
001215  3  A9 0B        	lda #<ssprit 		; point to spare sprite for spawning purposes.
001217  3  85 rr        	sta z80_x
001219  3  A9 22        	lda #>ssprit
00121B  3  85 rr        	sta z80_i
00121D  3               evlp2:
00121D  3  20 07 31     	jsr evnt11 		; called once per main loop.
001220  3               bsortx:
001220  3  20 AD 1B     	jsr bsort 		; sort sprites.
001223  3               
001223  3  A5 rr        	lda nexlev		; finished level flag.
001225  3  D0 1D        	bne newlev		; is set, go to next level.
001227  3  A5 rr        	lda gamwon		; finished game flag.
001229  3  D0 28        	bne evwon		; is set, finish the game.
00122B  3  A5 rr        	lda restfl 		; finished level flag.
00122D  3  C9 01        	cmp #1			; has it been set?
00122F  3  D0 03        	bne :+
001231  3  4C A9 11     	jmp rstrt		; yes, go to next level.
001234  3               :
001234  3  C9 02        	cmp #2			; has it been set?
001236  3  D0 03        	bne :+
001238  3  4C B8 11     	jmp rstrtn		; yes, go to next level.
00123B  3               :
00123B  3  A5 rr        	lda deadf 		; dead flag.
00123D  3  D0 1A        	bne pdead		; yes, player dead.
00123F  3               
00123F  3               ; back to start of main loop.
00123F  3               
00123F  3  E6 rr        	inc clock
001241  3  4C E8 11     	jmp mloop		; switched to a jmp mloop during test mode.
001244  3               
001244  3               ;----------------------------------------------------------
001244  3               ; New level
001244  3               ;----------------------------------------------------------
001244  3               
001244  3               newlev:
001244  3  A5 rr        	lda scno 			; current screen.
001246  3  18           	clc
001247  3  69 01        	adc #1				; next screen.
001249  3  CD D3 6D     	cmp numsc			; total number of screens.
00124C  3  B0 05        	bcs evwon			; yes, game finished.
00124E  3  85 rr        	sta scno			; set new level number.
001250  3  4C A9 11     	jmp rstrt			; restart, clearing all aliens.
001253  3               
001253  3               evwon:
001253  3  20 E1 31     	jsr evnt18		 	; game completed.
001256  3  4C 6A 12     	jmp tidyup			; tidy up and return to BASIC/calling routine.
001259  3               
001259  3               ;----------------------------------------------------------
001259  3               ; Player dead.
001259  3               ;----------------------------------------------------------
001259  3               
001259  3               pdead:
001259  3  A9 00        	lda #0				; zeroise accumulator.
00125B  3  85 rr        	sta deadf			; reset dead flag.
00125D  3               evdie:
00125D  3  20 AB 31     	jsr evnt16 			; death subroutine.
001260  3  A5 rr        	lda numlif			; number of lives.
001262  3  F0 03        	beq :+
001264  3  4C A9 11     	jmp rstrt 			; restart game.
001267  3               :
001267  3               evfail:
001267  3  20 DB 31     	jsr evnt17 			; failure event.
00126A  3               
00126A  3               ;----------------------------------------------------------
00126A  3               ; Tidy things up
00126A  3               ;----------------------------------------------------------
00126A  3               
00126A  3               tidyup:
00126A  3  A0 00        	ldy #0				; digits to check.
00126C  3               tidyu2:
00126C  3  B9 FD 14     	lda score,y 			; get score digit.
00126F  3  CD 03 15     	cmp hiscor 			; are we larger than high score digit?
001272  3  90 07        	bcc tidyu0			; high score is bigger.
001274  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
001276  3  C8           	iny				; next digit of high score.
001277  3  C0 06        	cpy #6
001279  3  D0 F1        	bne tidyu2			; repeat for all digits
00127B  3               tidyu0:
00127B  3  A9 FD        	lda #<score			; return pointing to score.
00127D  3  85 rr        	sta z80_c
00127F  3  A9 14        	lda #>score
001281  3  85 rr        	sta z80_b
001283  3  60           	rts
001284  3               tidyu1:
001284  3  A0 05        	ldy #5
001286  3               tidyu3:
001286  3  B9 FD 14     	lda score,y			; score.
001289  3  99 03 15     	sta hiscor,y			; high score.
00128C  3  88           	dey
00128D  3  10 F7        	bpl tidyu3 			; copy score to high score.
00128F  3               evnewh:
00128F  3  20 06 32     	jsr evnt19			; new high score event.
001292  3  4C 7B 12     	jmp tidyu0			; tidy up.
001295  3               
001295  3               ;--------------------------------------------------
001295  3               ; Restart event.
001295  3               ;--------------------------------------------------
001295  3               
001295  3               rsevt:
001295  3  A9 0B        	lda #<ssprit 			; default to spare element in table.
001297  3  85 rr        	sta z80_x
001299  3  A9 22        	lda #>ssprit
00129B  3  85 rr        	sta z80_i
00129D  3               evrs:
00129D  3  4C 71 31     	jmp evnt14	 		; call restart event.
0012A0  3               
0012A0  3               ;------------------------------------------------------------------
0012A0  3               ; Copy number passed in a to string position bc, right-justified.
0012A0  3               ;
0012A0  3               ; Input:
0012A0  3               ;  A  = number
0012A0  3               ;  BC = string address
0012A0  3               ;
0012A0  3               ; Output:
0012A0  3               ;  BC = string with number
0012A0  3               ;-----------------------------------------------------------------
0012A0  3               
0012A0  3               num2ch:
0012A0  3  85 rr        	sta z80_d		; Save number
0012A2  3               
0012A2  3  A9 00        	lda #0
0012A4  3  85 rr        	sta flag
0012A6  3               
0012A6  3  A2 64        	ldx #100		; hundreds column.
0012A8  3  86 rr        	stx z80_e
0012AA  3  20 BA 12     	jsr numdg		; show digit.
0012AD  3               
0012AD  3  A2 0A        	ldx #10			; tens column.
0012AF  3  86 rr        	stx z80_e
0012B1  3  20 BA 12     	jsr numdg		; show digit.
0012B4  3               
0012B4  3  E6 rr        	inc flag
0012B6  3  A2 01        	ldx #1			; units column.
0012B8  3  86 rr        	stx z80_e
0012BA  3               numdg:
0012BA  3  A9 30        	lda #48			; clear digit.
0012BC  3  85 rr        	sta z80_a
0012BE  3               numdg1:
0012BE  3  A5 rr        	lda z80_d
0012C0  3  C5 rr        	cmp z80_e
0012C2  3  90 0E        	bcc numdg0		; nothing to show.
0012C4  3  38           	sec
0012C5  3  A5 rr        	lda z80_d
0012C7  3  E5 rr        	sbc z80_e		; subtract from column.
0012C9  3  85 rr        	sta z80_d
0012CB  3  E6 rr        	inc z80_a		; increment digit.
0012CD  3  E6 rr        	inc flag
0012CF  3  4C BE 12     	jmp numdg1		; repeat until column is zero.
0012D2  3               numdg0:
0012D2  3  A0 00        	ldy #0
0012D4  3  A5 rr        	lda z80_a
0012D6  3  91 rr        	sta (z80_bc),y		; write digit to buffer.
0012D8  3  A5 rr        	lda flag
0012DA  3  F0 06        	beq :+
0012DC  3  E6 rr        	inc z80_c		; next buffer position.
0012DE  3  D0 02        	bne :+
0012E0  3  E6 rr        	inc z80_b
0012E2  3               :
0012E2  3  60           	rts
0012E3  3               
0012E3  3               ;---------------------------------------------------------
0012E3  3               ; Reset score to "000000"
0012E3  3               ;---------------------------------------------------------
0012E3  3               
0012E3  3               inisc:
0012E3  3  A9 30        	lda #'0'
0012E5  3  A2 05        	ldx #5			; digits to initialise.
0012E7  3               inisc0:
0012E7  3  9D FD 14     	sta score,x 		; write zero digit.
0012EA  3  CA           	dex			; next column.
0012EB  3  10 FA        	bpl inisc0		; repeat for all digits.
0012ED  3               
0012ED  3  60           	rts
0012EE  3               
0012EE  3               ;-----------------------------------------------------
0012EE  3               ; Multiply h by d and return in hl.
0012EE  3               ;
0012EE  3               ; Input:
0012EE  3               ;  H = first number
0012EE  3               ;  D = second number
0012EE  3               ;
0012EE  3               ; Output:
0012EE  3               ;  HL = result H x D
0012EE  3               ;-----------------------------------------------------
0012EE  3               
0012EE  3               imul:
0012EE  3  A5 rr        	lda z80_d		; HL = H * D
0012F0  3  85 rr        	sta z80_e
0012F2  3  A5 rr        	lda z80_h
0012F4  3  85 rr        	sta z80_c		; make c first multiplier.
0012F6  3               imul0:
0012F6  3  A9 00        	lda #0			; zeroise total.
0012F8  3  85 rr        	sta z80_l
0012FA  3  85 rr        	sta z80_h
0012FC  3               
0012FC  3  A5 rr        	lda z80_h
0012FE  3  85 rr        	sta z80_d		; zeroise high byte.
001300  3               
001300  3  A9 08        	lda #8			; repeat 8 times.
001302  3  85 rr        	sta z80_b
001304  3               imul1:
001304  3  46 rr        	lsr z80_c		; rotate rightmost bit into carry.
001306  3  90 0E        	bcc imul2		; wasn't set.
001308  3  18           	clc			; bit was set, so add de.
001309  3  A5 rr        	lda z80_l
00130B  3  65 rr        	adc z80_e
00130D  3  85 rr        	sta z80_l
00130F  3  A5 rr        	lda z80_h
001311  3  65 rr        	adc z80_d
001313  3  85 rr        	sta z80_h
001315  3  18           	clc 			; reset carry.
001316  3               imul2:
001316  3  06 rr        	asl z80_e 		; shift de 1 bit left.
001318  3  26 rr        	rol z80_d
00131A  3  C6 rr        	dec z80_b
00131C  3  D0 E6        	bne imul1		; repeat 8 times.
00131E  3               
00131E  3  60           	rts
00131F  3               
00131F  3               ;-----------------------------------------------
00131F  3               ; Divide d by e and return in d, remainder in a.
00131F  3               ;
00131F  3               ; Input:
00131F  3               ;  D = first number
00131F  3               ;  E = second number
00131F  3               ;
00131F  3               ; Output:
00131F  3               ;  D = result D/E
00131F  3               ;  A = remainder
00131F  3               ;-----------------------------------------------
00131F  3               
00131F  3               idiv:
00131F  3  A9 00        	lda #0
001321  3  A0 08        	ldy #8		 	; bits to shift.
001323  3  06 rr        	asl z80_d
001325  3               idiv0:
001325  3  2A           	rol a 			; multiply d by 2.
001326  3  C5 rr        	cmp z80_e 		; test if e is smaller.
001328  3  90 02        	bcc idiv1		; e is greater, no division this time.
00132A  3  E5 rr        	sbc z80_e		; subtract it.
00132C  3               idiv1:
00132C  3  26 rr        	rol z80_d		; rotate into d.
00132E  3  88           	dey
00132F  3  D0 F4        	bne idiv0		; repeat
001331  3  60           	rts
001332  3               
001332  3               ;---------------------------------------------------
001332  3               ; Play AY sound effect
001332  3               ;---------------------------------------------------
001332  3               
001332  3               plsnd:
001332  3  60           	rts
001333  3               
001333  3               ;---------------------------------------------------
001333  3               ; Objects handling.
001333  3               ; 32 bytes for image
001333  3               ; 3 for room, y and x
001333  3               ; 3 for starting room, y and x.
001333  3               ; 254 = disabled.
001333  3               ; 255 = object in player"s pockets.
001333  3               ;---------------------------------------------------
001333  3               
001333  3               ;---------------------------------------------------
001333  3               ; Show items present.
001333  3               ;---------------------------------------------------
001333  3               
001333  3               shwob:
001333  3  A9 FB        	lda #<objdta 			; objects table.
001335  3  85 rr        	sta z80_l
001337  3  A9 70        	lda #>objdta
001339  3  85 rr        	sta z80_h
00133B  3               
00133B  3  AD 72 10     	lda numob 			; number of objects in the game.
00133E  3  85 rr        	sta sprcnt
001340  3               shwob0:
001340  3  A0 20        	ldy #32 			; distance to room number.
001342  3  B1 rr        	lda (z80_hl),y 			; same as an item?
001344  3  C5 rr        	cmp scno 			; current location.
001346  3  D0 03        	bne :+
001348  3  20 5D 13     	jsr dobj 			; yes, display object.
00134B  3               :
00134B  3  18           	clc
00134C  3  A5 rr        	lda z80_l
00134E  3  69 26        	adc #38 			; distance to next item.
001350  3  85 rr        	sta z80_l
001352  3  A5 rr        	lda z80_h
001354  3  69 00        	adc #0
001356  3  85 rr        	sta z80_h	 		; point to it.
001358  3  C6 rr        	dec sprcnt
00135A  3  D0 E4        	bne shwob0 			; repeat for others.
00135C  3  60           	rts
00135D  3               
00135D  3               ;---------------------------------------------------
00135D  3               ; Display object.
00135D  3               ; hl must point to object's start address.
00135D  3               ;
00135D  3               ; Input:
00135D  3               ;  HL = object address
00135D  3               ;---------------------------------------------------
00135D  3               
00135D  3               dobj:
00135D  3  A0 21        	ldy #33
00135F  3  B1 rr        	lda (z80_hl),y 			; point to y.
001361  3  85 rr        	sta dispy
001363  3  C8           	iny
001364  3  B1 rr        	lda (z80_hl),y 			; point to x.
001366  3  85 rr        	sta dispx
001368  3               dobj1:
001368  3  4C 13 0F     	jmp sprite 			; draw this sprite.
00136B  3               
00136B  3               ;--------------------------------------
00136B  3               ; Remove an object.
00136B  3               ;
00136B  3               ; Input:
00136B  3               ;  A = object number
00136B  3               ;--------------------------------------
00136B  3               
00136B  3               remob:
00136B  3  CD 72 10     	cmp numob			; number of objects in game.
00136E  3  90 01        	bcc :+				; are we checking past the end?
001370  3  60           	rts				; yes, can't get non-existent item.
001371  3               :
001371  3  48           	pha				; remember object.
001372  3  20 80 13     	jsr getob			; pick it up if we haven't already got it.
001375  3  68           	pla				; retrieve object number.
001376  3  20 AF 13     	jsr gotob			; get its address.
001379  3  A9 FE        	lda #254
00137B  3  A0 20        	ldy #32
00137D  3  91 rr        	sta (z80_hl),y			; remove it.
00137F  3  60           	rts
001380  3               
001380  3               ;---------------------------------------------------
001380  3               ; Pick up object number held in the accumulator.
001380  3               ;
001380  3               ; Input:
001380  3               ;  A = object number
001380  3               ;---------------------------------------------------
001380  3               
001380  3               getob:
001380  3  CD 72 10     	cmp numob 		; number of objects in game.
001383  3  90 01        	bcc :+			; are we checking past the end?
001385  3  60           	rts			; yes, can't get non-existent item.
001386  3               :
001386  3  20 AF 13     	jsr gotob 		; check if we already have it.
001389  3  C9 FF        	cmp #255
00138B  3  D0 01        	bne :+
00138D  3  60           	rts			; we already do.
00138E  3               :
00138E  3  A0 20        	ldy #32
001390  3  B1 rr        	lda (z80_hl),y		; is it on this screen?
001392  3  C5 rr        	cmp scno 		; current screen.
001394  3  D0 14        	bne getob0		; not on screen, so nothing to delete.
001396  3               
001396  3  A9 FF        	lda #255
001398  3  91 rr        	sta (z80_hl),y		; pick it up.
00139A  3  C8           	iny 			; point to y coord.
00139B  3               getob1:
00139B  3  A0 21        	ldy #33
00139D  3  B1 rr        	lda (z80_hl),y		; y coord.
00139F  3  85 rr        	sta dispy
0013A1  3  A0 22        	ldy #34
0013A3  3  B1 rr        	lda (z80_hl),y 		; x coord.
0013A5  3  85 rr        	sta dispx
0013A7  3  4C 68 13     	jmp dobj1 		; delete object sprite.
0013AA  3               getob0:
0013AA  3  A9 FF        	lda #255
0013AC  3  91 rr        	sta (z80_hl),y 		; pick it up.
0013AE  3  60           	rts
0013AF  3               
0013AF  3               ;-----------------------------------------------------------------
0013AF  3               ; Got object check.
0013AF  3               ; Call with object in accumulator, returns zero set if in pockets.
0013AF  3               ;
0013AF  3               ; Input:
0013AF  3               ;  A = object number
0013AF  3               ;-----------------------------------------------------------------
0013AF  3               
0013AF  3               gotob:
0013AF  3  CD 72 10     	cmp numob 		; number of objects in game.
0013B2  3  90 03        	bcc :+ 			; are we checking past the end?
0013B4  3  4C BB 13     	jmp gotob0 		; yes, we can't have a non-existent object.
0013B7  3               :
0013B7  3  20 C0 13     	jsr findob		; find the object.
0013BA  3               gotob1:
0013BA  3  60           	rts
0013BB  3               
0013BB  3               gotob0:
0013BB  3  A9 FE        	lda #254 		; missing.
0013BD  3  4C BA 13     	jmp gotob1
0013C0  3               
0013C0  3               findob:
0013C0  3  48           	pha			; save object number
0013C1  3  A9 FB        	lda #<objdta 		; objects.
0013C3  3  85 rr        	sta z80_l
0013C5  3  A9 70        	lda #>objdta
0013C7  3  85 rr        	sta z80_h
0013C9  3  68           	pla			; retreive object number
0013CA  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
0013CC  3  AA           	tax 			; loop counter
0013CD  3               fndob2:
0013CD  3  18           	clc
0013CE  3  A5 rr        	lda z80_l
0013D0  3  69 26        	adc #38 		; size of each object.
0013D2  3  85 rr        	sta z80_l
0013D4  3  90 02        	bcc :+
0013D6  3  E6 rr        	inc z80_h
0013D8  3               :
0013D8  3  CA           	dex 			; repeat until we find address.
0013D9  3  D0 F2        	bne fndob2
0013DB  3               fndob1:
0013DB  3  A0 20        	ldy #32			; distance to room it's in.
0013DD  3  B1 rr        	lda (z80_hl),y		; fetch status.
0013DF  3  60           	rts
0013E0  3               
0013E0  3               ;---------------------------------------------
0013E0  3               ; Drop object number at (dispx, dispy).
0013E0  3               ;
0013E0  3               ; Input:
0013E0  3               ;  A = object number
0013E0  3               ;---------------------------------------------
0013E0  3               
0013E0  3               drpob:
0013E0  3  CD 72 10     	cmp numob 		; are we checking past the end?
0013E3  3  90 01        	bcc :+
0013E5  3  60           	rts			; yes, can't drop non-existent item.
0013E6  3               :
0013E6  3  20 AF 13     	jsr gotob		; make sure object is in inventory.
0013E9  3  C5 rr        	cmp scno		; already on this screen?
0013EB  3  D0 01        	bne :+
0013ED  3  60           	rts			; yes, nothing to do.
0013EE  3               :
0013EE  3  A0 20        	ldy #32
0013F0  3  A5 rr        	lda scno
0013F2  3  91 rr        	sta (z80_hl),y		; bring onto screen.
0013F4  3  A5 rr        	lda dispy		; sprite y coordinate.
0013F6  3  C8           	iny 
0013F7  3  91 rr        	sta (z80_hl),y		; point to object y.
0013F9  3  A5 rr        	lda dispx 		; sprite x coordinate.
0013FB  3  C8           	iny
0013FC  3  91 rr        	sta (z80_hl),y 		; point to object x
0013FE  3  4C 5D 13     	jmp dobj		; draw the object sprite.
001401  3               
001401  3               ;-----------------------------------------------
001401  3               ; Seek objects at sprite position.
001401  3               ;
001401  3               ; Output:
001401  3               ;  A = object number, if not found A=255
001401  3               ;-----------------------------------------------
001401  3               
001401  3               skobj:
001401  3  A9 FB        	lda #<objdta 		; pointer to objects.
001403  3  85 rr        	sta z80_l
001405  3  A9 70        	lda #>objdta
001407  3  85 rr        	sta z80_h
001409  3               
001409  3  AD 72 10     	lda numob 		; number of objects in game.
00140C  3  85 rr        	sta z80_b 		; set up the loop counter.
00140E  3               skobj0:
00140E  3  A5 rr        	lda scno		; current room number.
001410  3  A0 20        	ldy #32
001412  3  D1 rr        	cmp (z80_hl),y		; is object in here?
001414  3  D0 03        	bne :+
001416  3  20 2B 14     	jsr skobj1		; yes, check coordinates.
001419  3               :
001419  3  18           	clc			; point to next object in table.
00141A  3  A5 rr        	lda z80_l
00141C  3  69 26        	adc #38			; size of each object.
00141E  3  85 rr        	sta z80_l
001420  3  90 02        	bcc :+
001422  3  E6 rr        	inc z80_h
001424  3               :
001424  3  C6 rr        	dec z80_b
001426  3  D0 E6        	bne skobj0		; repeat for all objects.
001428  3               
001428  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
00142A  3  60           	rts
00142B  3               
00142B  3               skobj1:
00142B  3  A0 21        	ldy #33			; point to y coordinate.
00142D  3  B1 rr        	lda (z80_hl),y		; point to y coordinate.
00142F  3  38           	sec
001430  3  A0 08        	ldy #var_newY
001432  3  F1 rr        	sbc (z80_ix),y 		; subtract sprite y.
001434  3  18           	clc
001435  3  69 0F        	adc #15			; add sprite height minus one.
001437  3  C9 1F        	cmp #31			; within range?
001439  3  90 03        	bcc :+
00143B  3  4C 59 14     	jmp skobj2		; no, ignore object.
00143E  3               :
00143E  3  A0 22        	ldy #34			; point to x coordinate now.
001440  3  B1 rr        	lda (z80_hl),y 		; get coordinate.
001442  3  38           	sec
001443  3  A0 09        	ldy #var_newX
001445  3  F1 rr        	sbc (z80_ix),y 		; subtract the sprite x.
001447  3  18           	clc			; add sprite width minus one.
001448  3  69 0F        	adc #15
00144A  3  C9 1F        	cmp #31			; within range?
00144C  3  90 03        	bcc :+
00144E  3  4C 59 14     	jmp skobj2		; no, ignore object.
001451  3               :
001451  3  68           	pla			; remove return address from stack.
001452  3  68           	pla
001453  3               
001453  3  AD 72 10     	lda numob 		; objects in game.
001456  3  38           	sec
001457  3  E5 rr        	sbc z80_b		; subtract loop counter.
001459  3               skobj2:
001459  3  60           	rts			; accumulator now points to object.
00145A  3               
00145A  3               
00145A  3               ;---------------------------------------------------------------------
00145A  3               ; Spawn a new sprite.
00145A  3               ;---------------------------------------------------------------------
00145A  3               
00145A  3               spawn:
00145A  3  A9 00        	lda #<sprtab		; sprite table.
00145C  3  85 rr        	sta z80_l
00145E  3  A9 0B        	lda #>sprtab
001460  3  85 rr        	sta z80_h
001462  3               numsp1:
001462  3  A9 0C        	lda #NUMSPR		; number of sprites.
001464  3  85 rr        	sta spcnt
001466  3               spaw0:
001466  3  A0 00        	ldy #var_Type
001468  3  B1 rr        	lda (z80_hl),y		; get sprite type.
00146A  3  C9 FF        	cmp #255		; is it an unused slot?
00146C  3  F0 0F        	beq spaw1 		; yes, we can use this one.
00146E  3               
00146E  3  18           	clc 			; point to next sprite in table.
00146F  3  A5 rr        	lda z80_l
001471  3  69 11        	adc #TABSIZ		; size of each entry.
001473  3  85 rr        	sta z80_l
001475  3  90 02        	bcc :+
001477  3  E6 rr        	inc z80_h
001479  3               :
001479  3  C6 rr        	dec spcnt		; one less iteration.
00147B  3  D0 E9        	bne spaw0		; keep going until we find a slot.
00147D  3               
00147D  3               ; Didn't find one but drop through and set up a dummy sprite instead.
00147D  3               
00147D  3               spaw1:
00147D  3  A5 rr        	lda z80_i		; address of original sprite.
00147F  3  48           	pha
001480  3  A5 rr        	lda z80_x
001482  3  48           	pha
001483  3               
001483  3  A5 rr        	lda z80_l		; store spawned sprite address.
001485  3  85 rr        	sta spptr
001487  3  A5 rr        	lda z80_h
001489  3  85 rr        	sta spptr+1
00148B  3               
00148B  3  A5 rr        	lda z80_c
00148D  3  A0 00        	ldy #var_Type
00148F  3  91 rr        	sta (z80_hl),y 		; set the type.
001491  3  A0 05        	ldy #var_newType
001493  3  91 rr        	sta (z80_hl),y		; copy
001495  3               
001495  3  A5 rr        	lda z80_b
001497  3  A0 01        	ldy #var_Image
001499  3  91 rr        	sta (z80_hl),y		; set the image.
00149B  3  A0 06        	ldy #var_newImage
00149D  3  91 rr        	sta (z80_hl),y		; copy
00149F  3               
00149F  3  A9 00        	lda #0 				; frame zero.
0014A1  3  A0 02        	ldy #var_Frame
0014A3  3  91 rr        	sta (z80_hl),y		; set frame.
0014A5  3  A0 07        	ldy #var_newFrame
0014A7  3  91 rr        	sta (z80_hl),y		; copy
0014A9  3               
0014A9  3  A0 09        	ldy #9
0014AB  3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0014AD  3  A0 04        	ldy #var_X
0014AF  3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
0014B1  3  A0 09        	ldy #var_newX
0014B3  3  91 rr        	sta (z80_hl),y		; copy
0014B5  3               
0014B5  3  A0 08        	ldy #8
0014B7  3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0014B9  3  A0 03        	ldy #var_Y
0014BB  3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
0014BD  3  A0 08        	ldy #var_newY
0014BF  3  91 rr        	sta (z80_hl),y		; copy
0014C1  3               
0014C1  3  A0 0A        	ldy #10				; direction of original.
0014C3  3  B1 rr        	lda (z80_ix),y
0014C5  3  A0 0A        	ldy #var_Direction
0014C7  3  91 rr        	sta (z80_hl),y		; direction
0014C9  3               
0014C9  3  A9 00        	lda #0
0014CB  3  A0 0D        	ldy #var_jumpLo
0014CD  3  91 rr        	sta (z80_hl),y		; reset parameter.
0014CF  3  C8           	iny
0014D0  3  91 rr        	sta (z80_hl),y		; reset parameter.
0014D2  3  C8           	iny
0014D3  3  91 rr        	sta (z80_hl),y		; reset parameter.
0014D5  3  C8           	iny
0014D6  3  91 rr        	sta (z80_hl),y		; reset parameter.
0014D8  3               rtssp:
0014D8  3  A5 rr        	lda spptr			; address of new sprite.
0014DA  3  85 rr        	sta z80_x
0014DC  3  A5 rr        	lda spptr+1
0014DE  3  85 rr        	sta z80_i
0014E0  3               evis1:
0014E0  3  20 05 31     	jsr evnt09 			; call sprite initialisation event.
0014E3  3               
0014E3  3  A5 rr        	lda spptr 			; address of new sprite.
0014E5  3  85 rr        	sta z80_x
0014E7  3  A5 rr        	lda spptr+1
0014E9  3  85 rr        	sta z80_i
0014EB  3               
0014EB  3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
0014EB  3  A0 03        	ldy #var_Y
0014ED  3  B1 rr        	lda (z80_hl), y		; old x coord
0014EF  3  C9 B1        	cmp #SpriteMaxY     ; beyond maximum?
0014F1  3  B0 03        	bcs :+				; yes, don't draw it.
0014F3  3               
0014F3  3  20 84 0F     	jsr sspria 			; display the new sprite.
0014F6  3               :
0014F6  3  68           	pla					; address of original sprite.
0014F7  3  85 rr        	sta z80_x
0014F9  3  68           	pla
0014FA  3  85 rr        	sta z80_i
0014FC  3               
0014FC  3  60           	rts
0014FD  3               
0014FD  3  30 30 30 30  score:	.byte "000000"		; player"s score.
001501  3  30 30        
001503  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
001507  3  30 30        
001509  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
00150D  3  30 30        
00150F  3  00 68        grbase:	.word ScreenAddr	; graphics base address.
001511  3               
001511  3               ;----------------------------------------------------
001511  3               ; Check y-pos
001511  3               ;----------------------------------------------------
001511  3               
001511  3               checkx:
001511  3  A5 rr        	lda dispy		; y position.
001513  3  C9 18        	cmp #24			; off screen?
001515  3  B0 01        	bcs :+
001517  3  60           	rts			; no, it's okay.
001518  3               :
001518  3  68           	pla			; remove return address from stack.
001519  3  85 rr        	sta z80_l
00151B  3  68           	pla
00151C  3  85 rr        	sta z80_h
00151E  3  60           	rts
00151F  3               
00151F  3               ;-----------------------------------------------
00151F  3               ; Displays the current high score.
00151F  3               ;-----------------------------------------------
00151F  3               
00151F  3               dhisc:
00151F  3  A9 03        	lda #<hiscor 		; high score text.
001521  3  85 rr        	sta z80_l
001523  3  A9 15        	lda #>hiscor
001525  3  85 rr        	sta z80_h
001527  3  4C 32 15     	jmp dscor1		; check in printable range then show 6 digits.
00152A  3               
00152A  3               ;------------------------------------------------------
00152A  3               ; Displays the current score.
00152A  3               ;------------------------------------------------------
00152A  3               
00152A  3               dscor:
00152A  3  A9 FD        	lda #<score		; score text.
00152C  3  85 rr        	sta z80_l
00152E  3  A9 14        	lda #>score
001530  3  85 rr        	sta z80_h
001532  3               dscor1:
001532  3  20 81 1B     	jsr preprt		; set up font and print position.
001535  3  20 11 15     	jsr checkx		; make sure we're in a printable range.
001538  3               
001538  3  A9 06        	lda #6			; digits to display.
00153A  3  85 rr        	sta z80_b
00153C  3  A5 rr        	lda prtmod		; get print mode.
00153E  3  F0 03        	beq :+			; standard size text?
001540  3  4C 5F 15     	jmp bscor0		; no, show double-height.
001543  3               :
001543  3               dscor0:
001543  3  A0 00        	ldy #0
001545  3  B1 rr        	lda (z80_hl),y 		; fetch character.
001547  3  20 21 10     	jsr pchar 		; display character.
00154A  3  E6 rr        	inc dispx		; move along x coordinate
00154C  3               
00154C  3  E6 rr        	inc z80_l		; next score column.
00154E  3  D0 02        	bne :+
001550  3  E6 rr        	inc z80_h
001552  3               :
001552  3  C6 rr        	dec z80_b
001554  3  D0 ED        	bne dscor0 		; repeat for all digits.
001556  3               dscor2:
001556  3  A5 rr        	lda dispx 		; set up display coordinates.
001558  3  85 rr        	sta charx
00155A  3  A5 rr        	lda dispy
00155C  3  85 rr        	sta chary
00155E  3  60           	rts
00155F  3               
00155F  3               ;------------------------------------------------------
00155F  3               ; Displays the current score in double-height characters.
00155F  3               ;
00155F  3               ; Input:
00155F  3               ;  B  = digit number
00155F  3               ;  HL = score string
00155F  3               ;------------------------------------------------------
00155F  3               
00155F  3               bscor0:
00155F  3  A0 00        	ldy #0
001561  3               
001561  3  B1 rr        	lda (z80_hl),y 		; fetch character.
001563  3  20 04 1B     	jsr bchar 		; display big char.
001566  3               
001566  3  E6 rr        	inc z80_l 		; next score column.
001568  3  D0 02        	bne :+
00156A  3  E6 rr        	inc z80_h
00156C  3               :
00156C  3  C6 rr        	dec z80_b
00156E  3  F0 03        	beq :+
001570  3  4C 5F 15     	jmp bscor0 		; repeat for all digits.
001573  3               :
001573  3  4C 56 15     	jmp dscor2 		; tidy up line and column variables.
001576  3               
001576  3               ;-----------------------------------------------------
001576  3               ; Adds number in the hl pair to the score.
001576  3               ;-----------------------------------------------------
001576  3               
001576  3               addsc:
001576  3  A9 FE        	lda #<(score+1) 	; ten thousands column.
001578  3  85 rr        	sta z80_e
00157A  3  A9 14        	lda #>(score+1)
00157C  3  85 rr        	sta z80_d
00157E  3  A9 10        	lda #<10000		; amount to add each time.
001580  3  85 rr        	sta z80_c
001582  3  A9 27        	lda #>10000
001584  3  85 rr        	sta z80_b
001586  3  20 CA 15     	jsr incsc		; add to score.
001589  3               
001589  3  E6 rr        	inc z80_e		; thousands column.
00158B  3  D0 02        	bne :+
00158D  3  E6 rr        	inc z80_d
00158F  3               :
00158F  3  A9 E8        	lda #<1000		; amount to add each time.
001591  3  85 rr        	sta z80_c
001593  3  A9 03        	lda #>1000
001595  3  85 rr        	sta z80_b
001597  3  20 CA 15     	jsr incsc 		; add to score.
00159A  3               
00159A  3  E6 rr        	inc z80_e		; hundreds column.
00159C  3  D0 02        	bne :+
00159E  3  E6 rr        	inc z80_d
0015A0  3               :
0015A0  3  A9 64        	lda #<100		; amount to add each time.
0015A2  3  85 rr        	sta z80_c
0015A4  3  A9 00        	lda #>100
0015A6  3  85 rr        	sta z80_b
0015A8  3  20 CA 15     	jsr incsc		; add to score.
0015AB  3               
0015AB  3  E6 rr        	inc z80_e 		; tens column.
0015AD  3  D0 02        	bne :+
0015AF  3  E6 rr        	inc z80_d
0015B1  3               :
0015B1  3  A9 0A        	lda #<10		; amount to add each time.
0015B3  3  85 rr        	sta z80_c
0015B5  3  A9 00        	lda #>10
0015B7  3  85 rr        	sta z80_b
0015B9  3  20 CA 15     	jsr incsc 		; add to score.
0015BC  3               
0015BC  3  E6 rr        	inc z80_e		; units column.
0015BE  3  D0 02        	bne :+
0015C0  3  E6 rr        	inc z80_d
0015C2  3               :
0015C2  3  A9 01        	lda #<1			; units.
0015C4  3  85 rr        	sta z80_c
0015C6  3  A9 00        	lda #>1
0015C8  3  85 rr        	sta z80_b
0015CA  3               incsc:
0015CA  3  A5 rr        	lda z80_h		; store amount to add.
0015CC  3  48           	pha
0015CD  3  A5 rr        	lda z80_l
0015CF  3  48           	pha
0015D0  3               
0015D0  3  38           	sec			; subtract from amount to add.
0015D1  3  A5 rr        	lda z80_l
0015D3  3  E5 rr        	sbc z80_c
0015D5  3  85 rr        	sta z80_l
0015D7  3  A5 rr        	lda z80_h
0015D9  3  E5 rr        	sbc z80_b
0015DB  3  85 rr        	sta z80_h
0015DD  3  90 14        	bcc incsc0		; too much, restore value.
0015DF  3               
0015DF  3  68           	pla			; delete the previous amount from the stack.
0015E0  3  68           	pla
0015E1  3               
0015E1  3  A5 rr        	lda z80_d 		; store column position.
0015E3  3  48           	pha
0015E4  3  A5 rr        	lda z80_e
0015E6  3  48           	pha
0015E7  3  20 FA 15     	jsr incsc2		; do the increment.
0015EA  3               
0015EA  3  68           	pla			; restore column.
0015EB  3  85 rr        	sta z80_e
0015ED  3  68           	pla
0015EE  3  85 rr        	sta z80_d
0015F0  3  4C CA 15     	jmp incsc		; repeat until all added.
0015F3  3               
0015F3  3               incsc0:
0015F3  3  68           	pla			; restore previous value.
0015F4  3  85 rr        	sta z80_l
0015F6  3  68           	pla
0015F7  3  85 rr        	sta z80_h
0015F9  3  60           	rts
0015FA  3               incsc2:
0015FA  3  A0 00        	ldy #0
0015FC  3  B1 rr        	lda (z80_de),y 		; get amount.
0015FE  3  18           	clc
0015FF  3  69 01        	adc #1			; add one to column.
001601  3  91 rr        	sta (z80_de),y		; write new column total.
001603  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
001605  3  B0 01        	bcs :+
001607  3  60           	rts			; no, carry on.
001608  3               :
001608  3  A9 30        	lda #'0'		; make it zero.
00160A  3  91 rr        	sta (z80_de),y		; write new column total.
00160C  3  C6 rr        	dec z80_e		; back one column.
00160E  3  D0 02        	bne :+
001610  3  C6 rr        	dec z80_d
001612  3               :
001612  3  4C FA 15     	jmp incsc2
001615  3               
001615  3               ;------------------------------------
001615  3               ; Add bonus to score and reset bonus
001615  3               ;------------------------------------
001615  3               
001615  3               addbo:
001615  3  A2 05        	ldx #5			; last digit.
001617  3  18           	clc			; clear carry.
001618  3               addbo0:
001618  3  BD FD 14     	lda score,x		; get score.
00161B  3  7D 09 15     	adc bonus,x		; add bonus.
00161E  3  38           	sec			; 0 to 18.
00161F  3  E9 30        	sbc #48
001621  3  48           	pha
001622  3  A9 30        	lda #'0'
001624  3  9D 09 15     	sta bonus,x		; zeroise bonus.
001627  3  68           	pla
001628  3  C9 3A        	cmp #58			; carried?
00162A  3  B0 07        	bcs addbo2		; no, do next one.
00162C  3  38           	sec
00162D  3  E9 0A        	sbc #10			; subtract 10.
00162F  3  38           	sec
001630  3  4C 34 16     	jmp addbo1
001633  3               addbo2:
001633  3  18           	clc
001634  3               addbo1:
001634  3  9D FD 14     	sta score,x		; write new score.
001637  3  CA           	dex			; next digit.
001638  3  10 DE        	bpl addbo0		; repeat for all 6 digits.
00163A  3  60           	rts
00163B  3               
00163B  3               ;------------------------------------
00163B  3               ; Swap score and bonus.
00163B  3               ;------------------------------------
00163B  3               
00163B  3               swpsb:
00163B  3  A2 05        	ldx #5			; digits to add.
00163D  3               swpsb0:
00163D  3  BD FD 14     	lda score,x 		; get score digits.
001640  3  48           	pha			; save digit
001641  3  BD 09 15     	lda bonus,x 		; get bonus digits.
001644  3  9D FD 14     	sta score,x		; switch score-bonus
001647  3  68           	pla
001648  3  9D 09 15     	sta bonus,x
00164B  3  CA           	dex 			; repeat for all 6 digits.
00164C  3  10 EF        	bpl swpsb0
00164E  3  60           	rts
00164F  3               
00164F  3               ;----------------------------------------------------
00164F  3               ; Get print address.
00164F  3               ;----------------------------------------------------
00164F  3               
00164F  3               gprad:
00164F  3  98           	tya
001650  3  48           	pha
001651  3               
001651  3  A5 rr        	lda dispx 		; x coordinate.
001653  3  85 rr        	sta scraddr
001655  3  A9 00        	lda #0
001657  3  85 rr        	sta scraddr+1
001659  3  06 rr        	asl scraddr  	; multiply char by 8
00165B  3  26 rr        	rol scraddr+1
00165D  3  06 rr        	asl scraddr
00165F  3  26 rr        	rol scraddr+1
001661  3  06 rr        	asl scraddr
001663  3  26 rr        	rol scraddr+1
001665  3               
001665  3  A5 rr        	lda dispy		; y coordinate.
001667  3  0A           	asl a
001668  3  0A           	asl a
001669  3  0A           	asl a			; multiply char by 8
00166A  3  A8           	tay
00166B  3               
00166B  3  18           	clc
00166C  3  A5 rr        	lda scraddr
00166E  3  79 00 06     	adc SCADTB_lb,y
001671  3  85 rr        	sta scraddr
001673  3  A5 rr        	lda scraddr+1
001675  3  79 00 07     	adc SCADTB_hb,y
001678  3  85 rr        	sta scraddr+1
00167A  3               
00167A  3  68           	pla
00167B  3  A8           	tay
00167C  3  60           	rts
00167D  3               
00167D  3               ;--------------------------------------------------------------
00167D  3               ; Get property buffer address of char at (dispx, dispy) in hl.
00167D  3               ; 
00167D  3               ; Output:
00167D  3               ;  buffaddr = bufaddr = MAP + dispy*32 + dispx
00167D  3               ;--------------------------------------------------------------
00167D  3               
00167D  3               pradd:
00167D  3  A5 rr        	lda dispy 		; y coordinate.
00167F  3  85 rr        	sta bufaddr
001681  3  A9 00        	lda #0
001683  3  85 rr        	sta bufaddr+1
001685  3  06 rr        	asl bufaddr  		; multiply char by 32
001687  3  26 rr        	rol bufaddr+1
001689  3  06 rr        	asl bufaddr
00168B  3  26 rr        	rol bufaddr+1
00168D  3  06 rr        	asl bufaddr
00168F  3  26 rr        	rol bufaddr+1
001691  3  06 rr        	asl bufaddr
001693  3  26 rr        	rol bufaddr+1
001695  3  06 rr        	asl bufaddr
001697  3  26 rr        	rol bufaddr+1
001699  3  18           	clc			; add address of MAP graphics.
00169A  3  A5 rr        	lda bufaddr
00169C  3  65 rr        	adc dispx
00169E  3  69 00        	adc #<MAP
0016A0  3  85 rr        	sta bufaddr
0016A2  3  A5 rr        	lda bufaddr+1
0016A4  3  69 03        	adc #>MAP
0016A6  3  85 rr        	sta bufaddr+1
0016A8  3  60           	rts
0016A9  3               
0016A9  3               ;----------------------------------------------
0016A9  3               ; Print attributes, properties and pixels.
0016A9  3               ;
0016A9  3               ; Input:
0016A9  3               ;  A	= tile number
0016A9  3               ;----------------------------------------------
0016A9  3               
0016A9  3               pattr:
0016A9  3  85 rr        	sta z80_b		; store cell in b register for now.
0016AB  3  AA           	tax
0016AC  3  BD CF 33     	lda bprop,x 		; block properties.
0016AF  3  85 rr        	sta z80_c
0016B1  3  20 7D 16     	jsr pradd 		; get property buffer address.
0016B4  3  A5 rr        	lda z80_c
0016B6  3  A0 00        	ldy #0
0016B8  3  91 rr        	sta (bufaddr),y 	; write property.
0016BA  3  A5 rr        	lda z80_b 		; restore cell.
0016BC  3               
0016BC  3               ; Print attributes, no properties.
0016BC  3               
0016BC  3               panp:
0016BC  3  85 rr        	sta z80_e		; displacement in e.
0016BE  3  A9 00        	lda #0
0016C0  3  85 rr        	sta z80_d		; no high byte.
0016C2  3  06 rr        	asl z80_e  		; multiply char by 8.
0016C4  3  26 rr        	rol z80_d
0016C6  3  06 rr        	asl z80_e
0016C8  3  26 rr        	rol z80_d
0016CA  3  06 rr        	asl z80_e
0016CC  3  26 rr        	rol z80_d
0016CE  3  18           	clc
0016CF  3  A5 rr        	lda z80_e
0016D1  3  69 FF        	adc #<chgfx 		; address of graphics.
0016D3  3  85 rr        	sta tileaddr
0016D5  3  A5 rr        	lda z80_d
0016D7  3  69 32        	adc #>chgfx
0016D9  3  85 rr        	sta tileaddr+1
0016DB  3  20 4F 16     	jsr gprad 		; get screen address.
0016DE  3  A2 07        	ldx #7			; number of pixel rows to write.
0016E0  3               panp0:
0016E0  3  A0 00        	ldy #0
0016E2  3  B1 rr        	lda (tileaddr),y 	; get image byte.
0016E4  3  49 00        	eor #TxtInvert		; Invert
0016E6  3  BC 5A 10     	ldy scrtab,x
0016E9  3  91 rr        	sta (scraddr),y 	; copy to screen.
0016EB  3  E6 rr        	inc tileaddr 		; next image byte.
0016ED  3  D0 02        	bne :+
0016EF  3  E6 rr        	inc tileaddr+1
0016F1  3               :
0016F1  3  CA           	dex	 		; repeat for 8 pixel rows.
0016F2  3  10 EC        	bpl panp0
0016F4  3  E6 rr        	inc dispx 		; move along one.
0016F6  3  E6 rr        	inc charx
0016F8  3  60           	rts
0016F9  3               
0016F9  3               ;----------------------------------------------
0016F9  3               ; Print character pixels, no more.
0016F9  3               ;
0016F9  3               ; Input:
0016F9  3               ;  A	= character to print
0016F9  3               ;----------------------------------------------
0016F9  3               
0016F9  3               pchr:
0016F9  3  20 21 10     	jsr pchar 		; show character in accumulator.
0016FC  3  E6 rr        	inc dispx		; move along one.
0016FE  3  60           	rts
0016FF  3               
0016FF  3               ;----------------------------------------------------
0016FF  3               ; Shifter sprite routine for objects.
0016FF  3               ;----------------------------------------------------
0016FF  3               
0016FF  3               sprit7:
0016FF  3  A5 rr        	lda z80_b
001701  3  F0 0F        	beq sprit0
001703  3  85 rr        	sta z80_a
001705  3               sprit3:
001705  3  4E 6D 0F     	lsr spr			; shift into position.
001708  3  6E 6E 0F     	ror spr+1
00170B  3  6E 6F 0F     	ror spr+2
00170E  3  C6 rr        	dec z80_a		; one less iteration.
001710  3  D0 F3        	bne sprit3
001712  3               sprit0:
001712  3  60           	rts 			; now apply to screen.
001713  3               
001713  3               ;-----------------------------------------------------------
001713  3               ; Get room address.
001713  3               ;-----------------------------------------------------------
001713  3               
001713  3               groom:
001713  3  A6 rr        	ldx scno 		; screen number.
001715  3  A0 00        	ldy #0
001717  3               groomx:
001717  3  A9 1D        	lda #<scdat 		; pointer to screens.
001719  3  85 rr        	sta z80_l
00171B  3  A9 53        	lda #>scdat
00171D  3  85 rr        	sta z80_h
00171F  3               groom1:
00171F  3  E0 00        	cpx #0			; is it the first one?
001721  3  F0 15        	beq groom0 		; no more screens to skip.
001723  3               
001723  3  18           	clc
001724  3  A5 rr        	lda z80_l
001726  3  79 1D 53     	adc scdat,y 		; low byte of screen size.
001729  3  85 rr        	sta z80_l
00172B  3  C8           	iny			; point to high byte.
00172C  3  A5 rr        	lda z80_h
00172E  3  79 1D 53     	adc scdat,y 		; high byte of screen size.
001731  3  85 rr        	sta z80_h
001733  3  C8           	iny			; next address.
001734  3               
001734  3  CA           	dex 			; one less iteration.
001735  3  4C 1F 17     	jmp groom1 		; loop until we reach the end.
001738  3               groom0:
001738  3  AD D3 6D     	lda numsc 		; add displacement.
00173B  3  0A           	asl a
00173C  3  18           	clc			; add double displacement to address.
00173D  3  65 rr        	adc z80_l
00173F  3  85 rr        	sta z80_l
001741  3  A5 rr        	lda z80_h
001743  3  69 00        	adc #0
001745  3  85 rr        	sta z80_h
001747  3  60           	rts
001748  3               
001748  3               ;-----------------------------------------------------------
001748  3               ; Draw present room.
001748  3               ;-----------------------------------------------------------
001748  3               
001748  3               droom:
001748  3  AD 6E 10     	lda wintop 		; window top.
00174B  3  85 rr        	sta dispy		; set cursor y position.
00174D  3               droom2:
00174D  3  20 13 17     	jsr groom 		; get address of current room.
001750  3  A9 00        	lda #0	 		; zero in accumulator.
001752  3  85 rr        	sta comcnt 		; reset compression counter.
001754  3  AD 70 10     	lda winhgt 		; height of window.
001757  3  85 rr        	sta rrow		; set row counter
001759  3               droom0:
001759  3  AD 6F 10     	lda winlft 		; window left edge.
00175C  3  85 rr        	sta dispx 		; set cursor x position.
00175E  3  AD 71 10     	lda winwid 		; width of window.
001761  3  85 rr        	sta rcol		; set column counter
001763  3               droom1:
001763  3  20 74 17     	jsr flbyt 		; decompress next byte on the fly.
001766  3  20 A9 16     	jsr pattr 		; show attributes and block.
001769  3  C6 rr        	dec rcol		; one less column.
00176B  3  D0 F6        	bne droom1 		; repeat for entire line.
00176D  3  E6 rr        	inc dispy		; move down one line.
00176F  3  C6 rr        	dec rrow 		; one less row.
001771  3  D0 E6        	bne droom0 		; repeat for all rows.
001773  3  60           	rts
001774  3               
001774  3               ;----------------------------------------------
001774  3               ; Decompress bytes on-the-fly.
001774  3               ;----------------------------------------------
001774  3               
001774  3               flbyt:
001774  3  A5 rr        	lda comcnt 		; compression counter.
001776  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
001778  3               
001778  3  A0 00        	ldy #0
00177A  3  B1 rr        	lda (z80_hl),y 		; fetch next byte.
00177C  3  E6 rr        	inc z80_l 		; point to next cell.
00177E  3  D0 02        	bne :+
001780  3  E6 rr        	inc z80_h
001782  3               :
001782  3  C9 FF        	cmp #255 		; is this byte a control code?
001784  3  F0 01        	beq :+
001786  3  60           	rts 			; no, this byte is uncompressed.
001787  3               :
001787  3  B1 rr        	lda (z80_hl),y 		; fetch byte type.
001789  3  85 rr        	sta combyt 		; set up the type.
00178B  3  E6 rr        	inc z80_l 		; point to quantity.
00178D  3  D0 02        	bne :+
00178F  3  E6 rr        	inc z80_h
001791  3               :
001791  3  B1 rr        	lda (z80_hl),y 		; get quantity.
001793  3  E6 rr        	inc z80_l 		; point to next byte.
001795  3  D0 02        	bne :+
001797  3  E6 rr        	inc z80_h
001799  3               :
001799  3               flbyt1:
001799  3  85 rr        	sta comcnt 		; store new quantity.
00179B  3  C6 rr        	dec comcnt		; one less.
00179D  3  A5 rr        	lda combyt 		; byte to expand.
00179F  3  60           	rts
0017A0  3               
0017A0  3               ;------------------------------------------
0017A0  3               ; Ladder down check.
0017A0  3               ;
0017A0  3               ; Input:
0017A0  3               ;  IX = sprite pointer
0017A0  3               ;------------------------------------------
0017A0  3               
0017A0  3               laddd:
0017A0  3  A0 09        	ldy #9
0017A2  3  B1 rr        	lda (z80_ix),y		; x coordinate.
0017A4  3  85 rr        	sta dispx
0017A6  3               
0017A6  3  A0 08        	ldy #8
0017A8  3  B1 rr        	lda (z80_ix),y		; y coordinate.
0017AA  3  29 FE        	and #254		; make it even.
0017AC  3  91 rr        	sta (z80_ix),y 		; reset it.
0017AE  3               numsp5:
0017AE  3  18           	clc 			; look down 16 pixels.
0017AF  3  69 10        	adc #16
0017B1  3  85 rr        	sta dispy		; coords in dispx,dispy.
0017B3  3  4C C9 17     	jmp laddv
0017B6  3               
0017B6  3               ;------------------------------------------
0017B6  3               ; Ladder up check.
0017B6  3               ;
0017B6  3               ; Input:
0017B6  3               ;  IX = sprite pointer
0017B6  3               ;
0017B6  3               ; Output:
0017B6  3               ;  A  = 0 is ok, A <>0 is not ok
0017B6  3               ;------------------------------------------
0017B6  3               
0017B6  3               laddu:
0017B6  3  A0 09        	ldy #9
0017B8  3  B1 rr        	lda (z80_ix),y		; x coordinate.
0017BA  3  85 rr        	sta dispx
0017BC  3               
0017BC  3  A0 08        	ldy #8
0017BE  3  B1 rr        	lda (z80_ix),y		; y coordinate.
0017C0  3  29 FE        	and #254 		; make it even.
0017C2  3  91 rr        	sta (z80_ix),y		; reset it.
0017C4  3               numsp6:
0017C4  3  18           	clc 			; look 2 pixels above feet.
0017C5  3  69 0E        	adc #14
0017C7  3  85 rr        	sta dispy		; coords in dispx,dispy.
0017C9  3               laddv:
0017C9  3  20 9F 19     	jsr tstbl 		; get map address.
0017CC  3  20 D6 18     	jsr ldchk 		; standard ladder check.
0017CF  3  F0 01        	beq :+
0017D1  3  60           	rts 			; no way through.
0017D2  3               :
0017D2  3  E6 rr        	inc bufaddr 		; look right one cell.
0017D4  3  D0 02        	bne :+
0017D6  3  E6 rr        	inc bufaddr+1
0017D8  3               :
0017D8  3  20 D6 18     	jsr ldchk 		; do the check.
0017DB  3  F0 01        	beq :+
0017DD  3  60           	rts 			; impassable.
0017DE  3               :
0017DE  3  A5 rr        	lda dispx 		; y coordinate.
0017E0  3  29 07        	and #7 			; position straddling block cells.
0017E2  3  D0 01        	bne :+
0017E4  3  60           	rts 			; no more checks needed.
0017E5  3               :
0017E5  3  E6 rr        	inc bufaddr 		; look to third cell.
0017E7  3  D0 02        	bne :+
0017E9  3  E6 rr        	inc bufaddr+1
0017EB  3               :
0017EB  3  20 D6 18     	jsr ldchk 		; do the check.
0017EE  3  60           	rts  			; return with zero flag set accordingly.
0017EF  3               
0017EF  3               ;---------------------------------------------------------
0017EF  3               ; Can go up check.
0017EF  3               ;
0017EF  3               ; Input:
0017EF  3               ;  IX = sprite pointer
0017EF  3               ;
0017EF  3               ; Output:
0017EF  3               ;  A  = 0 is ok, A <>0 is not ok
0017EF  3               ;---------------------------------------------------------
0017EF  3               
0017EF  3               cangu:
0017EF  3  A0 09        	ldy #9
0017F1  3  B1 rr        	lda (z80_ix),y		; x coordinate.
0017F3  3  85 rr        	sta dispx
0017F5  3  A0 08        	ldy #8
0017F7  3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0017F9  3  38           	sec
0017FA  3  E9 02        	sbc #2
0017FC  3  85 rr        	sta dispy		; coords in dispx,dispy.
0017FE  3  20 9F 19     	jsr tstbl 		; get map address.
001801  3  20 A1 18     	jsr lrchk 		; standard left/right check.
001804  3  F0 01        	beq :+
001806  3  60           	rts			; no way through.
001807  3               :
001807  3  E6 rr        	inc bufaddr		; look right one cell.
001809  3  D0 02        	bne :+
00180B  3  E6 rr        	inc bufaddr+1
00180D  3               :
00180D  3  20 A1 18     	jsr lrchk 		; do the check.
001810  3  F0 01        	beq :+
001812  3  60           	rts			; impassable.
001813  3               :
001813  3  A5 rr        	lda dispx		; x coordinate.
001815  3  29 07        	and #7			; position straddling block cells.
001817  3  D0 01        	bne :+
001819  3  60           	rts			; no more checks needed.
00181A  3               :
00181A  3  E6 rr        	inc bufaddr		; look to third cell.
00181C  3  D0 02        	bne :+
00181E  3  E6 rr        	inc bufaddr+1
001820  3               :
001820  3  20 A1 18     	jsr lrchk		; do the check.
001823  3  60           	rts 			; return with zero flag set accordingly.
001824  3               
001824  3               ;---------------------------------------------------------
001824  3               ; Can go down check.
001824  3               ;
001824  3               ; Input:
001824  3               ;  IX = sprite pointer
001824  3               ;
001824  3               ; Output:
001824  3               ;  A  = 0 is ok, A <>0 is not ok
001824  3               ;---------------------------------------------------------
001824  3               
001824  3               cangd:
001824  3  A0 09        	ldy #9
001826  3  B1 rr        	lda (z80_ix),y 		; x coordinate.
001828  3  85 rr        	sta dispx
00182A  3  A0 08        	ldy #8
00182C  3  B1 rr        	lda (z80_ix),y		; y coordinate.
00182E  3               numsp3:
00182E  3  18           	clc
00182F  3  69 10        	adc #16 		; look down 16 pixels.
001831  3  85 rr        	sta dispy		; coords in dispx,dispy.
001833  3  20 9F 19     	jsr tstbl 		; get map address.
001836  3  20 B6 18     	jsr plchk 		; block, platform check.
001839  3  F0 01        	beq :+
00183B  3  60           	rts			; no way through.
00183C  3               :
00183C  3  E6 rr        	inc bufaddr		; look right one cell.
00183E  3  D0 02        	bne :+
001840  3  E6 rr        	inc bufaddr+1
001842  3               :
001842  3  20 B6 18     	jsr plchk		; block, platform check.
001845  3  F0 01        	beq :+
001847  3  60           	rts			; impassable.
001848  3               :
001848  3  A5 rr        	lda dispx		; x coordinate.
00184A  3  29 07        	and #7			; position straddling block cells.
00184C  3  D0 01        	bne :+
00184E  3  60           	rts			; no more checks needed.
00184F  3               :
00184F  3  E6 rr        	inc bufaddr		; look to third cell.
001851  3  D0 02        	bne :+
001853  3  E6 rr        	inc bufaddr+1
001855  3               :
001855  3  20 B6 18     	jsr plchk		; block, platform check.
001858  3  60           	rts			; return with zero flag set accordingly.
001859  3               
001859  3               ;---------------------------------------------------------
001859  3               ; Can go left check.
001859  3               ;
001859  3               ; Input:
001859  3               ;  IX = sprite pointer
001859  3               ;
001859  3               ; Output:
001859  3               ;  A  = 0 is ok, A <>0 is not ok
001859  3               ;---------------------------------------------------------
001859  3               
001859  3               cangl:
001859  3  A0 08        	ldy #8
00185B  3  B1 rr        	lda (z80_ix),y 		; y coordinate.
00185D  3  85 rr        	sta dispy
00185F  3  A0 09        	ldy #9
001861  3  B1 rr        	lda (z80_ix),y 		; x coordinate.
001863  3  38           	sec
001864  3  E9 02        	sbc #2			; look left 2 pixels.
001866  3  85 rr        	sta dispx		; coords in dispx,dispy.
001868  3  4C 7A 18     	jmp cangh		; test if we can go there.
00186B  3               
00186B  3               ;---------------------------------------------------------
00186B  3               ; Can go right check.
00186B  3               ;
00186B  3               ; Input:
00186B  3               ;  IX = sprite pointer
00186B  3               ;
00186B  3               ; Output:
00186B  3               ;  A  = 0 is ok, A <>0 is not ok
00186B  3               ;---------------------------------------------------------
00186B  3               
00186B  3               cangr:
00186B  3  A0 08        	ldy #8
00186D  3  B1 rr        	lda (z80_ix),y		; y coordinate.
00186F  3  85 rr        	sta dispy
001871  3  A0 09        	ldy #9
001873  3  B1 rr        	lda (z80_ix),y		; x coordinate.
001875  3  18           	clc
001876  3  69 10        	adc #16			; look right 16 pixels.
001878  3  85 rr        	sta dispx		; coords in dispx,dispy.
00187A  3               cangh:
00187A  3               cangh2:
00187A  3  A9 03        	lda #3			; default rows to write.
00187C  3  85 rr        	sta z80_b
00187E  3  A5 rr        	lda dispy		; y position.
001880  3  29 07        	and #7			; does x straddle cells?
001882  3  D0 02        	bne cangh0		; yes, loop counter is good.
001884  3  C6 rr        	dec z80_b		; one less row to write.
001886  3               cangh0:
001886  3  20 9F 19     	jsr tstbl		; get map address.
001889  3               cangh1:
001889  3  20 A1 18     	jsr lrchk		; standard left/right check.
00188C  3  F0 01        	beq :+
00188E  3  60           	rts			; no way through.
00188F  3               :
00188F  3  48           	pha
001890  3  18           	clc
001891  3  A5 rr        	lda bufaddr
001893  3  69 20        	adc #32			; look down.
001895  3  85 rr        	sta bufaddr
001897  3  90 02        	bcc :+
001899  3  E6 rr        	inc bufaddr+1
00189B  3               :
00189B  3  68           	pla
00189C  3               
00189C  3  C6 rr        	dec z80_b
00189E  3  D0 E9        	bne cangh1
0018A0  3  60           	rts
0018A1  3               
0018A1  3               ;-------------------------------------
0018A1  3               ; Check left/right movement is okay.
0018A1  3               ;
0018A1  3               ; Input:
0018A1  3               ;  bufaddr = MAP + x/8 + y/8*32
0018A1  3               ;
0018A1  3               ; Output:
0018A1  3               ;  A  = 0 is ok, A <>0 is not ok
0018A1  3               ;-------------------------------------
0018A1  3               
0018A1  3               lrchk:
0018A1  3  A0 00        	ldy #0
0018A3  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
0018A5  3  C9 02        	cmp #WALL 		; is it passable?
0018A7  3  F0 0A        	beq lrchkx		; no.
0018A9  3               
0018A9  3  C9 04        	cmp #FODDER		; fodder has to be dug.
0018AB  3  F0 06        	beq lrchkx		; not passable.
0018AD  3  A9 00        	lda #0
0018AF  3  60           	rts
0018B0  3               
0018B0  3               ;--------------------------------------------------------------
0018B0  3               ; Called by mmenu
0018B0  3               ;--------------------------------------------------------------
0018B0  3               
0018B0  3               always:
0018B0  3  A9 FF        	lda #255		; report it as okay.
0018B2  3  60           	rts
0018B3  3               
0018B3  3               lrchkx:
0018B3  3  A9 01        	lda #1 			; reset all bits.
0018B5  3  60           	rts
0018B6  3               
0018B6  3               
0018B6  3               ;--------------------------------------------------------------
0018B6  3               ; Check platform or solid item is not in way.
0018B6  3               ;
0018B6  3               ; Input:
0018B6  3               ;  bufaddr = MAP + x/8 + y/8*32
0018B6  3               ;
0018B6  3               ; Output:
0018B6  3               ;  A  = 0 is ok, A <>0 is not ok
0018B6  3               ;--------------------------------------------------------------
0018B6  3               
0018B6  3               plchk:
0018B6  3  A0 00        	ldy #0
0018B8  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
0018BA  3  C9 02        	cmp #WALL 		; is it passable?
0018BC  3  F0 F5        	beq lrchkx		; no.
0018BE  3               
0018BE  3  C9 04        	cmp #FODDER		; fodder has to be dug.
0018C0  3  F0 F1        	beq lrchkx		; not passable.
0018C2  3               
0018C2  3  C9 01        	cmp #PLATFM		; platform is solid.
0018C4  3  F0 07        	beq plchkx		; not passable.
0018C6  3               
0018C6  3  C9 03        	cmp #LADDER		; is it a ladder?
0018C8  3  F0 E9        	beq lrchkx		; on ladder, deny movement.
0018CA  3               plchk0:
0018CA  3  A9 00        	lda #0			; report as ok
0018CC  3  60           	rts
0018CD  3               plchkx:
0018CD  3  A5 rr        	lda dispy		; x coordinate.
0018CF  3  29 07        	and #7			; position straddling blocks.
0018D1  3  F0 E0        	beq lrchkx		; on platform, deny movement.
0018D3  3  4C CA 18     	jmp plchk0
0018D6  3               
0018D6  3               ;--------------------------------------------------------------
0018D6  3               ; Check ladder is available.
0018D6  3               ;
0018D6  3               ; Input:
0018D6  3               ;  bufaddr = MAP + x/8 + y/8*32
0018D6  3               ;
0018D6  3               ; Output:
0018D6  3               ;  A  = 0 is ok, A <>0 is not ok
0018D6  3               ;--------------------------------------------------------------
0018D6  3               
0018D6  3               ldchk:
0018D6  3  A0 00        	ldy #0
0018D8  3  B1 rr        	lda (bufaddr),y 	; fetch cell.
0018DA  3  C9 03        	cmp #LADDER 		; is it a ladder?
0018DC  3  F0 03        	beq ldchk1
0018DE  3  A9 01        	lda #1
0018E0  3  60           	rts  			; return with zero flag set accordingly.
0018E1  3               ldchk1:
0018E1  3  A9 00        	lda #0
0018E3  3  60           	rts
0018E4  3               
0018E4  3               ;--------------------------------------------------------------
0018E4  3               ; Touched deadly block check.
0018E4  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
0018E4  3               ;
0018E4  3               ; Input:
0018E4  3               ;  IX = sprite address
0018E4  3               ;
0018E4  3               ; Output:
0018E4  3               ;  A  = 0 is ok, A=5 is not ok
0018E4  3               ;--------------------------------------------------------------
0018E4  3               
0018E4  3               tded:
0018E4  3  A0 08        	ldy #8
0018E6  3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0018E8  3  85 rr        	sta dispy
0018EA  3  C8           	iny
0018EB  3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0018ED  3  85 rr        	sta dispx		; coords in dispx,dispy.
0018EF  3  20 9F 19     	jsr tstbl		; get map address.
0018F2  3  48           	pha
0018F3  3  A9 1F        	lda #31			; default distance to next line down.
0018F5  3  85 rr        	sta z80_e
0018F7  3  68           	pla
0018F8  3  C5 rr        	cmp z80_b		; is this the required block?
0018FA  3  D0 01        	bne :+
0018FC  3  60           	rts			; yes.
0018FD  3               :
0018FD  3  E6 rr        	inc bufaddr 		; next cell.
0018FF  3  D0 02        	bne :+
001901  3  E6 rr        	inc bufaddr+1
001903  3               :
001903  3  A0 00        	ldy #0
001905  3  B1 rr        	lda (bufaddr),y		; fetch type.
001907  3  C5 rr        	cmp z80_b 		; is this deadly/custom?
001909  3  D0 01        	bne :+
00190B  3  60           	rts			; yes.
00190C  3               :
00190C  3  A5 rr        	lda dispx		; horizontal position.
00190E  3  85 rr        	sta z80_c 		; store column in c register.
001910  3  29 07        	and #7			; is it straddling cells?
001912  3  D0 03        	bne :+
001914  3  4C 28 19     	jmp tded0		; no.
001917  3               :
001917  3  E6 rr        	inc bufaddr 		; last cell.
001919  3  D0 02        	bne :+
00191B  3  E6 rr        	inc bufaddr+1
00191D  3               :
00191D  3  A0 00        	ldy #0
00191F  3  B1 rr        	lda (bufaddr),y 	; fetch type.
001921  3  C5 rr        	cmp z80_b		; is this the block?
001923  3  D0 01        	bne :+
001925  3  60           	rts			; yes.
001926  3               :
001926  3  C6 rr        	dec z80_e		; one less cell to next row down.
001928  3               tded0:
001928  3  18           	clc 			; point to next row.
001929  3  A5 rr        	lda bufaddr
00192B  3  65 rr        	adc z80_e
00192D  3  85 rr        	sta bufaddr
00192F  3  90 02        	bcc :+
001931  3  E6 rr        	inc bufaddr+1
001933  3               :
001933  3  A0 00        	ldy #0
001935  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
001937  3  C5 rr        	cmp z80_b		; is this fatal?
001939  3  D0 01        	bne :+
00193B  3  60           	rts			; yes.
00193C  3               :
00193C  3  E6 rr        	inc bufaddr 		; next cell.
00193E  3  D0 02        	bne :+
001940  3  E6 rr        	inc bufaddr+1
001942  3               :
001942  3  A0 00        	ldy #0
001944  3  B1 rr        	lda (bufaddr),y 	; fetch type.
001946  3  C5 rr        	cmp z80_b		; is this fatal?
001948  3  D0 01        	bne :+
00194A  3  60           	rts			; yes.
00194B  3               :
00194B  3  A5 rr        	lda z80_c		; horizontal position.
00194D  3  29 07        	and #7			; is it straddling cells?
00194F  3  D0 03        	bne :+
001951  3  4C 63 19     	jmp tded1 		; no.
001954  3               :
001954  3  E6 rr        	inc bufaddr		; last cell.
001956  3  D0 02        	bne :+
001958  3  E6 rr        	inc bufaddr+1
00195A  3               :
00195A  3  A0 00        	ldy #0
00195C  3  B1 rr        	lda (bufaddr),y		; fetch type.
00195E  3  C5 rr        	cmp z80_b		; is this fatal?
001960  3  D0 01        	bne :+
001962  3  60           	rts			; yes.
001963  3               :
001963  3               tded1:
001963  3  A5 rr        	lda dispy		; vertical position.
001965  3  29 07        	and #7 			; is it straddling cells?
001967  3  D0 01        	bne :+
001969  3  60           	rts			; no, job done.
00196A  3               :
00196A  3  18           	clc			; point to next row.
00196B  3  A5 rr        	lda bufaddr
00196D  3  65 rr        	adc z80_e
00196F  3  85 rr        	sta bufaddr
001971  3  90 02        	bcc :+
001973  3  E6 rr        	inc bufaddr+1
001975  3               :
001975  3  A0 00        	ldy #0
001977  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
001979  3  C5 rr        	cmp z80_b		; is this fatal?
00197B  3  D0 01        	bne :+
00197D  3  60           	rts			; yes.
00197E  3               :
00197E  3  E6 rr        	inc bufaddr		; next cell.
001980  3  D0 02        	bne :+
001982  3  E6 rr        	inc bufaddr+1
001984  3               :
001984  3  A0 00        	ldy #0
001986  3  B1 rr        	lda (bufaddr),y 	; fetch type.
001988  3  C5 rr        	cmp z80_b		; is this fatal?
00198A  3  D0 01        	bne :+
00198C  3  60           	rts			; yes.
00198D  3               :
00198D  3  A5 rr        	lda z80_c		; horizontal position.
00198F  3  29 07        	and #7			; is it straddling cells?
001991  3  D0 01        	bne :+
001993  3  60           	rts			; no.
001994  3               :
001994  3  E6 rr        	inc bufaddr		; last cell.
001996  3  D0 02        	bne :+
001998  3  E6 rr        	inc bufaddr+1
00199A  3               :
00199A  3  A0 00        	ldy #0
00199C  3  B1 rr        	lda (bufaddr),y		; fetch final type.
00199E  3  60           	rts 			; return with final type in accumulator.
00199F  3               
00199F  3               ;---------------------------------------------------
00199F  3               ; Fetch block type at (dispx, dispy).
00199F  3               ;
00199F  3               ; Output:
00199F  3               ;  A = block type
00199F  3               ;---------------------------------------------------
00199F  3               
00199F  3               tstbl:
00199F  3  A5 rr        	lda dispy 		; fetch y coord.
0019A1  3  4A           	lsr a			; bufaddr = y/8
0019A2  3  4A           	lsr a
0019A3  3  4A           	lsr a
0019A4  3  85 rr        	sta bufaddr
0019A6  3  A9 00        	lda #0
0019A8  3  85 rr        	sta bufaddr+1
0019AA  3               
0019AA  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
0019AC  3  26 rr        	rol bufaddr+1
0019AE  3  06 rr        	asl bufaddr
0019B0  3  26 rr        	rol bufaddr+1
0019B2  3  06 rr        	asl bufaddr
0019B4  3  26 rr        	rol bufaddr+1
0019B6  3  06 rr        	asl bufaddr
0019B8  3  26 rr        	rol bufaddr+1
0019BA  3  06 rr        	asl bufaddr
0019BC  3  26 rr        	rol bufaddr+1
0019BE  3               
0019BE  3  A5 rr        	lda dispx		; x/8
0019C0  3  4A           	lsr a
0019C1  3  4A           	lsr a
0019C2  3  4A           	lsr a
0019C3  3               
0019C3  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
0019C4  3  65 rr        	adc bufaddr
0019C6  3  69 00        	adc #<MAP
0019C8  3  85 rr        	sta bufaddr
0019CA  3  A5 rr        	lda bufaddr+1
0019CC  3  69 03        	adc #>MAP
0019CE  3  85 rr        	sta bufaddr+1
0019D0  3               
0019D0  3  A0 00        	ldy #0
0019D2  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
0019D4  3  60           	rts
0019D5  3               
0019D5  3               ;-------------------------------------------------------------------
0019D5  3               ; Jump - if we can.
0019D5  3               ; Requires initial speed to be set up in accumulator prior to call.
0019D5  3               ;
0019D5  3               ; Input:
0019D5  3               ;  IX = sprite address
0019D5  3               ;-------------------------------------------------------------------
0019D5  3               
0019D5  3               jump:
0019D5  3  A0 0D        	ldy #var_jumpLo
0019D7  3  B1 rr        	lda (z80_ix),y		; jump table low.
0019D9  3  A0 0E        	ldy #var_jumpHi
0019DB  3  11 rr        	ora (z80_ix),y		; jump table high.
0019DD  3  F0 01        	beq :+
0019DF  3  60           	rts			; already in the air.
0019E0  3               :
0019E0  3  A9 1A        	lda #>jtab
0019E2  3  A0 0E        	ldy #var_jumpHi
0019E4  3  91 rr        	sta (z80_ix),y		; set jump high.
0019E6  3  A9 00        	lda #<jtab		; jump table start.
0019E8  3  A0 0D        	ldy #var_jumpLo
0019EA  3  91 rr        	sta (z80_ix),y		; set jump low.
0019EC  3  60           	rts
0019ED  3               
0019ED  3               ; Jump table.
0019ED  3               ; _BEEB - jump table must reside entirely in a page otherwise grav fn breaks
0019ED  3  xx xx xx xx  .align 32
0019F1  3  xx xx xx xx  
0019F5  3  xx xx xx xx  
001A00  3               
001A00  3               jtab:
001A00  3  F8 FA FC     	.byte 248,250,252
001A03  3  FE FE FF     	.byte 254,254,255
001A06  3  FF FF 00 00  	.byte 255,255,0,0
001A0A  3  00 01 01 01  	.byte 0,1,1,1,2,2
001A0E  3  02 02        
001A10  3  04 06 08 08  	.byte 4,6,8,8,8,99
001A14  3  08 63        
001A16  3               
001A16  3               ;------------------------------------------------
001A16  3               ; Random numbers code.
001A16  3               ; Pseudo-random number generator, 8-bit.
001A16  3               ;
001A16  3               ; Output:
001A16  3               ;  RND = random number
001A16  3               ;------------------------------------------------
001A16  3               
001A16  3               random:
001A16  3  A5 rr        	lda seed		; get last random number.
001A18  3  0A           	asl a
001A19  3  0A           	asl a
001A1A  3  18           	clc
001A1B  3  65 rr        	adc seed
001A1D  3  18           	clc
001A1E  3  69 45        	adc #$45
001A20  3  85 rr        	sta seed		; store new seed.
001A22  3  85 rr        	sta varrnd		; return number in variable.
001A24  3  60           	rts
001A25  3               
001A25  3               ;--------------------------------------------------------
001A25  3               ; Keys
001A25  3               ;
001A25  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
001A25  3               ;             ||||||||
001A25  3               ;             |||||||+> Right    KEY 0  - X
001A25  3               ;             ||||||+-> Left     KEY 1  - Z
001A25  3               ;             |||||+--> Down     KEY 2  - .
001A25  3               ;             ||||+---> Up       KEY 3  - ;
001A25  3               ;             |||+----> Fire1    KEY 4  - SPC
001A25  3               ;             ||+-----> Fire2    KEY 5  - Q
001A25  3               ;             |+------> Fire3    KEY 6  - P
001A25  3               ;             +-------> Not used
001A25  3               ;
001A25  3               ;                       Option1  KEY 7  - 1
001A25  3               ;                       Option2  KEY 8  - 2
001A25  3               ;                       Option3  KEY 9  - 3
001A25  3               ;                       Option4  KEY 10 - 4
001A25  3               ;--------------------------------------------------------
001A25  3               
001A25  3               ;              X   Z   .   ;  SPC  Q   P
001A25  3  42 61 68 48  keys:   .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
001A29  3  62 10 37     
001A2C  3  30 31 11 12          .byte $30,$31,$11,$12                   ; menu options.
001A30  3               
001A30  3  42 61 68 48  jkeys:  .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
001A34  3  62 10 37     
001A37  3  30 31 11 12          .byte $30,$31,$11,$12                   ; menu options.
001A3B  3               
001A3B  3               ;-------------------------------------------------------
001A3B  3               ; Joystick and keyboard reading routines.
001A3B  3               ;
001A3B  3               ; contrl = 0, Keyboard
001A3B  3               ;          1, JoyKeyb
001A3B  3               ;          2, JoyMMC
001A3B  3               ;-------------------------------------------------------
001A3B  3               
001A3B  3               joykey:
001A3B  3  A5 rr        	lda contrl 		; control flag.
001A3D  3  C9 01        	cmp #1
001A3F  3  D0 03        	bne :+
001A41  3  4C 5F 1A     	jmp joyjoy 		; read keyboard joystick
001A44  3               :
001A44  3  C9 02        	cmp #2
001A46  3  D0 03        	bne :+
001A48  3  4C 99 0E     	jmp joysin 		; read MMC joystick.
001A4B  3               :
001A4B  3               ; Keyboard controls.
001A4B  3               
001A4B  3  A9 00        	lda #0		 	; zero reading.
001A4D  3  85 rr        	sta z80_e
001A4F  3               
001A4F  3  A0 06        	ldy #6	 		; address of last key.
001A51  3               joyke0:
001A51  3  B9 25 1A     	lda keys,y 		; get key from table.
001A54  3  20 6F 0E     	jsr ktest		; being pressed?
001A57  3  26 rr        	rol z80_e 		; rotate into reading.
001A59  3               
001A59  3  88           	dey		 	; next key.
001A5A  3  10 F5        	bpl joyke0 		; repeat for all keys.
001A5C  3  4C 70 1A     	jmp joyjo1 		; store the value.
001A5F  3               
001A5F  3               ; Keyboard joystick controls.
001A5F  3               
001A5F  3               joyjoy:
001A5F  3  A9 00        	lda #0		 	; zero reading.
001A61  3  85 rr        	sta z80_e
001A63  3               
001A63  3  A0 06        	ldy #6	 		; address of last key.
001A65  3               joyjo3:
001A65  3  B9 30 1A     	lda jkeys,y 		; get key from table.
001A68  3  20 6F 0E     	jsr ktest		; being pressed?
001A6B  3  26 rr        	rol z80_e 		; rotate into reading.
001A6D  3               
001A6D  3  88           	dey		 	; next key.
001A6E  3  10 F5        	bpl joyjo3 		; repeat for all keys.
001A70  3               joyjo1:
001A70  3  A5 rr        	lda z80_e 		; copy e register to accumulator.
001A72  3               joyjo2:
001A72  3  85 rr        	sta joyval		; remember value.
001A74  3  60           	rts
001A75  3               
001A75  3               ;---------------------------------------------------------------
001A75  3               ; Display message.
001A75  3               ;
001A75  3               ; Input:
001A75  3               ;  A = message number
001A75  3               ;---------------------------------------------------------------
001A75  3               
001A75  3               dmsg:
001A75  3  AA           	tax
001A76  3  A9 08        	lda #<msgdat		; pointer to messages.
001A78  3  85 rr        	sta z80_l
001A7A  3  A9 32        	lda #>msgdat
001A7C  3  85 rr        	sta z80_h
001A7E  3  20 94 1B     	jsr getwrd		; get message number.
001A81  3               dmsg3:
001A81  3  20 81 1B     	jsr preprt		; pre-printing stuff.
001A84  3  20 11 15     	jsr checkx		; make sure we"re in a printable range.
001A87  3  A5 rr        	lda prtmod		; print mode.
001A89  3  D0 47        	bne bmsg1		; no, double-height text.
001A8B  3               dmsg0:
001A8B  3  A5 rr        	lda z80_h		; store string pointer.
001A8D  3  48           	pha
001A8E  3  A5 rr        	lda z80_l
001A90  3  48           	pha
001A91  3               
001A91  3  A0 00        	ldy #0
001A93  3  B1 rr        	lda (z80_hl),y		; fetch byte to display.
001A95  3  29 7F        	and #127		; remove any end marker.
001A97  3  C9 0D        	cmp #ASCII_NEWLINE
001A99  3  F0 24        	beq dmsg1
001A9B  3  20 21 10     	jsr pchar		; display character.
001A9E  3  20 6C 1B     	jsr nexpos 		; display position.
001AA1  3  D0 03        	bne dmsg2		; not on a new line.
001AA3  3  20 73 1B     	jsr nexlin		; next line down.
001AA6  3               dmsg2:
001AA6  3  68           	pla			; retrieve string pointer
001AA7  3  85 rr        	sta z80_l
001AA9  3  68           	pla
001AAA  3  85 rr        	sta z80_h
001AAC  3               
001AAC  3  A0 00        	ldy #0
001AAE  3  B1 rr        	lda (z80_hl),y		; fetch last character.
001AB0  3  0A           	asl a  			; was it the end?
001AB1  3  90 03        	bcc :+
001AB3  3  4C 56 15     	jmp dscor2		; yes, job done.
001AB6  3               :
001AB6  3  E6 rr        	inc z80_l		; next character to display.
001AB8  3  D0 02        	bne :+
001ABA  3  E6 rr        	inc z80_h
001ABC  3               :
001ABC  3  4C 8B 1A     	jmp dmsg0
001ABF  3               dmsg1:
001ABF  3  E6 rr        	inc dispy
001AC1  3  A5 rr        	lda dispy
001AC3  3  C9 18        	cmp #24
001AC5  3  90 04        	bcc dmsg4
001AC7  3  A9 00        	lda #0
001AC9  3  85 rr        	sta dispy
001ACB  3               dmsg4:
001ACB  3  A9 00        	lda #0
001ACD  3  85 rr        	sta dispx
001ACF  3  4C A6 1A     	jmp dmsg2
001AD2  3               
001AD2  3               ;----------------------------------------------------------
001AD2  3               ; Display message in big text.
001AD2  3               ;
001AD2  3               ; Input:
001AD2  3               ;  HL = string pointer
001AD2  3               ;----------------------------------------------------------
001AD2  3               
001AD2  3               bmsg1:
001AD2  3  A0 00        	ldy #0
001AD4  3  B1 rr        	lda (z80_hl),y 		; get character to display.
001AD6  3  29 7F        	and #127		; only want 7 bits.
001AD8  3  C9 0D        	cmp #ASCII_NEWLINE
001ADA  3  F0 13        	beq bmsg2
001ADC  3  20 04 1B     	jsr bchar 		; display big char.
001ADF  3               bmsg3:
001ADF  3  A0 00        	ldy #0
001AE1  3  B1 rr        	lda (z80_hl),y 		; look at last character.
001AE3  3  48           	pha
001AE4  3  E6 rr        	inc z80_l 		; next character in list.
001AE6  3  D0 02        	bne :+
001AE8  3  E6 rr        	inc z80_h
001AEA  3               :
001AEA  3  68           	pla
001AEB  3  0A           	asl a  			; was terminator flag set?
001AEC  3  90 E4        	bcc bmsg1		; no, keep going.
001AEE  3               :
001AEE  3  60           	rts
001AEF  3               bmsg2:
001AEF  3  A9 00        	lda #0
001AF1  3  85 rr        	sta dispx
001AF3  3  E6 rr        	inc dispy
001AF5  3  E6 rr        	inc dispy
001AF7  3  A5 rr        	lda dispy
001AF9  3  C9 17        	cmp #23
001AFB  3  90 E2        	bcc bmsg3
001AFD  3  A9 00        	lda #0
001AFF  3  85 rr        	sta dispy
001B01  3  4C DF 1A     	jmp bmsg3
001B04  3               
001B04  3               ;----------------------------------------------------------
001B04  3               ; Big character display.
001B04  3               ;
001B04  3               ; Input:
001B04  3               ;  A = character
001B04  3               ;----------------------------------------------------------
001B04  3               
001B04  3               bchar:
001B04  3  85 rr        	sta z80_e		; save char in lb
001B06  3  A9 00        	lda #0
001B08  3  85 rr        	sta z80_d		; reset hb
001B0A  3               
001B0A  3  06 rr        	asl z80_e 		; multiply char by 8.
001B0C  3  26 rr        	rol z80_d
001B0E  3  06 rr        	asl z80_e
001B10  3  26 rr        	rol z80_d
001B12  3  06 rr        	asl z80_e
001B14  3  26 rr        	rol z80_d		; de = a*8
001B16  3               
001B16  3  18           	clc			; de = FontPtr + a*8
001B17  3  A5 rr        	lda z80_e
001B19  3  65 rr        	adc FontPtr 		; address of font.
001B1B  3  85 rr        	sta z80_e
001B1D  3  A5 rr        	lda z80_d
001B1F  3  65 rr        	adc FontPtr+1
001B21  3  85 rr        	sta z80_d
001B23  3               
001B23  3  20 4F 16     	jsr gprad 		; get screen address.
001B26  3               
001B26  3  A2 00        	ldx #0			; height of character in font.
001B28  3               bchar0:
001B28  3  A0 00        	ldy #0
001B2A  3  B1 rr        	lda (z80_de),y 		; get a bit of the font.
001B2C  3               
001B2C  3  49 00        	eor #TxtInvert		; Invert
001B2E  3               
001B2E  3  91 rr        	sta (scraddr),y
001B30  3  48           	pha
001B31  3  20 08 10     	jsr nline 		; next line down.
001B34  3  68           	pla
001B35  3  91 rr        	sta (scraddr),y
001B37  3  20 08 10     	jsr nline 		; next line down.
001B3A  3               
001B3A  3  18           	clc
001B3B  3  E6 rr        	inc z80_e 		; next line of font.
001B3D  3  D0 02        	bne :+
001B3F  3  E6 rr        	inc z80_d
001B41  3               :
001B41  3  E8           	inx
001B42  3  E0 08        	cpx #8
001B44  3  D0 E2        	bne bchar0
001B46  3               	
001B46  3  20 6C 1B     	jsr nexpos		; display position.
001B49  3  D0 05        	bne bchar2 		; not on a new line.
001B4B  3               bchar3:
001B4B  3  E6 rr        	inc dispy
001B4D  3  20 73 1B     	jsr nexlin 		; next line check.
001B50  3               bchar2:
001B50  3  4C 56 15     	jmp dscor2		; tidy up line and column variables.
001B53  3               
001B53  3               
001B53  3               ;-------------------------------------------------
001B53  3               ; Display a character.
001B53  3               ;
001B53  3               ; Input:
001B53  3               ;  A = character
001B53  3               ;-------------------------------------------------
001B53  3               
001B53  3               achar:
001B53  3  85 rr        	sta z80_b 		; copy to b.
001B55  3  20 81 1B     	jsr preprt 		; get ready to print.
001B58  3  A5 rr        	lda z80_b		; character in accumulator.
001B5A  3  A6 rr        	ldx prtmod 		; print mode.
001B5C  3  F0 03        	beq :+
001B5E  3  4C 04 1B     	jmp bchar 		; no, double-height text.
001B61  3               :
001B61  3  20 21 10     	jsr pchar 		; display character.
001B64  3  20 6C 1B     	jsr nexpos 		; display position.
001B67  3  F0 E2        	beq bchar3		; next line down.
001B69  3  4C 50 1B     	jmp bchar2 		; tidy up.
001B6C  3               
001B6C  3               
001B6C  3               ;-------------------------------------------------
001B6C  3               ; Get next print column position.
001B6C  3               ;-------------------------------------------------
001B6C  3               
001B6C  3               nexpos:
001B6C  3  E6 rr        	inc dispx		; move along one position.
001B6E  3  A5 rr        	lda dispx 		; get coordinate.
001B70  3  29 1F        	and #31
001B72  3  60           	rts 			; return with status in zero flag.
001B73  3               
001B73  3               ;-------------------------------------------------
001B73  3               ; Get next print line position.
001B73  3               ;-------------------------------------------------
001B73  3               
001B73  3               nexlin:
001B73  3  E6 rr        	inc dispy 		; newline.
001B75  3  A5 rr        	lda dispy		; vertical position.
001B77  3  C9 18        	cmp #24			; past screen edge?
001B79  3  B0 01        	bcs :+
001B7B  3  60           	rts			; no, still okay.
001B7C  3               :
001B7C  3  A9 00        	lda #0			; restart at top.
001B7E  3  85 rr        	sta dispy
001B80  3  60           	rts
001B81  3               
001B81  3               ;--------------------------------------------------------
001B81  3               ; Pre-print preliminaries.
001B81  3               ;--------------------------------------------------------
001B81  3               
001B81  3               preprt:
001B81  3  A5 rr        	lda FontPtr		; font pointer.
001B83  3  8D 0F 15     	sta grbase		; set up graphics base.
001B86  3  A5 rr        	lda FontPtr+1
001B88  3  8D 10 15     	sta grbase+1
001B8B  3               prescr:
001B8B  3  A5 rr        	lda charx 		; display coordinates.
001B8D  3  85 rr        	sta dispx		; set up general coordinates.
001B8F  3  A5 rr        	lda chary
001B91  3  85 rr        	sta dispy
001B93  3  60           	rts
001B94  3               
001B94  3               ;--------------------------------------------------------------
001B94  3               ; Get messagenr x in hl
001B94  3               ;
001B94  3               ; Input:
001B94  3               ;  HL = pointer to message list
001B94  3               ;  X  = message number.
001B94  3               ;--------------------------------------------------------------
001B94  3               
001B94  3               getwrd:
001B94  3  E0 00        	cpx #0
001B96  3  D0 01        	bne:+ 			; first word in list?
001B98  3  60           	rts 			; yep, don't search.
001B99  3               :
001B99  3  A0 00        	ldy #0
001B9B  3               getwd0:
001B9B  3  B1 rr        	lda (z80_hl),y
001B9D  3  48           	pha
001B9E  3  E6 rr        	inc z80_l
001BA0  3  D0 02        	bne :+
001BA2  3  E6 rr        	inc z80_h
001BA4  3               :
001BA4  3  68           	pla
001BA5  3  C9 80        	cmp #128		; found end?
001BA7  3  30 F2        	bmi getwd0		; no, carry on.
001BA9  3  CA           	dex			; until we have right number.
001BAA  3  D0 EF        	bne getwd0
001BAC  3  60           	rts
001BAD  3               
001BAD  3               ;-----------------------------------------------------------
001BAD  3               ; Bubble sort.
001BAD  3               ;-----------------------------------------------------------
001BAD  3               
001BAD  3               bsort:
001BAD  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
001BAF  3  85 rr        	sta qscnt
001BB1  3               
001BB1  3  A9 00        	lda #<sprtab 		; sprite table.
001BB3  3  85 rr        	sta z80_x
001BB5  3  A9 0B        	lda #>sprtab
001BB7  3  85 rr        	sta z80_i
001BB9  3               bsort0:
001BB9  3  A0 00        	ldy #0
001BBB  3  B1 rr        	lda (z80_ix),y 		; first sprite type.
001BBD  3  C9 FF        	cmp #255 		; is it switched off?
001BBF  3  F0 30        	beq swemp		; yes, may need to switch another in here.
001BC1  3               
001BC1  3  A0 11        	ldy #TABSIZ
001BC3  3  B1 rr        	lda (z80_ix),y 		; check next slot exists.
001BC5  3  C9 FF        	cmp #255 		; is it enabled?
001BC7  3  F0 0A        	beq bsort2 		; no, nothing to swap.
001BC9  3               
001BC9  3  A0 14        	ldy #TABSIZ+3
001BCB  3  B1 rr        	lda (z80_ix),y 		; fetch next sprite's coordinate.
001BCD  3  A0 03        	ldy #3
001BCF  3  D1 rr        	cmp (z80_ix),y 		; compare with this x coordinate.
001BD1  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
001BD3  3               bsort2:
001BD3  3  18           	clc
001BD4  3  A5 rr        	lda z80_x
001BD6  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
001BD8  3  85 rr        	sta z80_x
001BDA  3  90 02        	bcc :+
001BDC  3  E6 rr        	inc z80_i
001BDE  3               :
001BDE  3  C6 rr        	dec qscnt 
001BE0  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
001BE2  3  60           	rts
001BE3  3               
001BE3  3               bsort1:
001BE3  3  A0 11        	ldy #TABSIZ
001BE5  3  B1 rr        	lda (z80_ix),y		; sprite on/off flag.
001BE7  3  C9 FF        	cmp #255		; is it enabled?
001BE9  3  F0 E8        	beq bsort2		; no, nothing to swap.
001BEB  3  20 FF 1B     	jsr swspr		; swap positions.
001BEE  3  4C D3 1B     	jmp bsort2
001BF1  3               swemp:
001BF1  3  A0 11        	ldy #TABSIZ
001BF3  3  B1 rr        	lda (z80_ix),y		; next table entry.
001BF5  3  C9 FF        	cmp #255		; is that one on?
001BF7  3  F0 DA        	beq bsort2		; no, nothing to swap.
001BF9  3  20 FF 1B     	jsr swspr		; swap positions.
001BFC  3  4C D3 1B     	jmp bsort2
001BFF  3               
001BFF  3               ; Swap sprites.
001BFF  3               
001BFF  3               swspr:
001BFF  3  A5 rr        	lda z80_x		; table address 
001C01  3  85 rr        	sta z80_e		; copy to de pair.
001C03  3  85 rr        	sta z80_l		; copy to hl pair.
001C05  3  A5 rr        	lda z80_i
001C07  3  85 rr        	sta z80_h
001C09  3  85 rr        	sta z80_d
001C0B  3               
001C0B  3  18           	clc
001C0C  3  A5 rr        	lda z80_l
001C0E  3  69 11        	adc #TABSIZ		; distance to second entry.
001C10  3  85 rr        	sta z80_l
001C12  3  90 02        	bcc :+
001C14  3  E6 rr        	inc z80_h
001C16  3               :
001C16  3  A9 11        	lda #TABSIZ		; bytes to swap.
001C18  3  85 rr        	sta z80_b
001C1A  3  A0 00        	ldy #0
001C1C  3               swspr0:
001C1C  3  B1 rr        	lda (z80_hl),y		; fetch second byte.
001C1E  3  48           	pha
001C1F  3  B1 rr        	lda (z80_de),y 		; fetch first byte.
001C21  3  91 rr        	sta (z80_hl),y 		; copy to second.
001C23  3  68           	pla
001C24  3  91 rr        	sta (z80_de),y 		; copy to first sprite entry.
001C26  3               
001C26  3  E6 rr        	inc z80_e 		; next byte.
001C28  3  D0 02        	bne :+	
001C2A  3  E6 rr        	inc z80_d
001C2C  3               :
001C2C  3  E6 rr        	inc z80_l 		; next byte.
001C2E  3  D0 02        	bne :+
001C30  3  E6 rr        	inc z80_h
001C32  3               :
001C32  3  C6 rr        	dec z80_b
001C34  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
001C36  3  60           	rts
001C37  3               
001C37  3               ;----------------------------------------------------
001C37  3               ; Process sprites.
001C37  3               ;----------------------------------------------------
001C37  3               
001C37  3               pspr:
001C37  3  A9 0C        	lda #NUMSPR		; sprites to process.
001C39  3  85 rr        	sta sprptr
001C3B  3               
001C3B  3  A9 00        	lda #<sprtab 		; sprite table.
001C3D  3  85 rr        	sta z80_x
001C3F  3  A9 0B        	lda #>sprtab
001C41  3  85 rr        	sta z80_i
001C43  3               pspr1:
001C43  3  A0 00        	ldy #0
001C45  3  B1 rr        	lda (z80_ix),y		; fetch sprite type.
001C47  3  C9 09        	cmp #9 			; within range of sprite types?
001C49  3  B0 03        	bcs :+
001C4B  3  20 5E 1C     	jsr pspr2 		; yes, process this one.
001C4E  3               :
001C4E  3  18           	clc
001C4F  3  A5 rr        	lda z80_x
001C51  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
001C53  3  85 rr        	sta z80_x
001C55  3  90 02        	bcc :+
001C57  3  E6 rr        	inc z80_i		; next sprite.
001C59  3               :
001C59  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
001C5B  3  D0 E6        	bne pspr1
001C5D  3  60           	rts
001C5E  3               
001C5E  3               pspr2:
001C5E  3  A5 rr        	lda z80_x 		; store original sprite pointer.
001C60  3  85 rr        	sta ogptr
001C62  3  A5 rr        	lda z80_i
001C64  3  85 rr        	sta ogptr+1
001C66  3  20 72 1C     	jsr pspr3		; do the routine.
001C69  3               rtorg:
001C69  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
001C6B  3  85 rr        	sta z80_x
001C6D  3  A5 rr        	lda ogptr+1
001C6F  3  85 rr        	sta z80_i
001C71  3               rtorg0:
001C71  3  60           	rts
001C72  3               
001C72  3               pspr3:
001C72  3  A9 A7        	lda #<evtyp0		; sprite type events list.
001C74  3  85 rr        	sta z80_l
001C76  3  A9 1C        	lda #>evtyp0
001C78  3  85 rr        	sta z80_h
001C7A  3               pspr4:
001C7A  3  B1 rr        	lda (z80_ix),y
001C7C  3  0A           	asl a			; double accumulator.
001C7D  3  18           	clc
001C7E  3  65 rr        	adc z80_l
001C80  3  85 rr        	sta z80_l
001C82  3  90 02        	bcc :+
001C84  3  E6 rr        	inc z80_h
001C86  3               :
001C86  3  B1 rr        	lda (z80_hl),y
001C88  3  85 rr        	sta z80_e 		; copy to de.
001C8A  3  48           	pha
001C8B  3               
001C8B  3  E6 rr        	inc z80_l 		; next byte of address.
001C8D  3  D0 02        	bne :+
001C8F  3  E6 rr        	inc z80_h
001C91  3               :
001C91  3  B1 rr        	lda (z80_hl),y 		; address high.
001C93  3  85 rr        	sta z80_d
001C95  3               
001C95  3  48           	pha	 		; swap address into hl.
001C96  3  A5 rr        	lda z80_h
001C98  3  85 rr        	sta z80_d
001C9A  3  68           	pla
001C9B  3  85 rr        	sta z80_h
001C9D  3  68           	pla
001C9E  3  85 rr        	sta z80_l
001CA0  3  A5 rr        	lda z80_l
001CA2  3  85 rr        	sta z80_e
001CA4  3               	
001CA4  3  6C rr rr     	jmp (z80_hl) 		; go there.
001CA7  3               
001CA7  3               ; Address of each sprite type's routine.
001CA7  3               
001CA7  3  60 22        evtyp0:	.word evnt00
001CA9  3  86 29        evtyp1:	.word evnt01
001CAB  3  5A 2A        evtyp2:	.word evnt02
001CAD  3  B6 2C        evtyp3:	.word evnt03
001CAF  3  B0 2D        evtyp4:	.word evnt04
001CB1  3  AA 2E        evtyp5:	.word evnt05
001CB3  3  72 2F        evtyp6:	.word evnt06
001CB5  3  8D 30        evtyp7:	.word evnt07
001CB7  3  C8 30        evtyp8:	.word evnt08
001CB9  3               
001CB9  3               ;--------------------------------------------------------------
001CB9  3               ; Display sprites.
001CB9  3               ;
001CB9  3               ; Input:
001CB9  3               ;  IX = sprite table
001CB9  3               ;--------------------------------------------------------------
001CB9  3               
001CB9  3               dspr:
001CB9  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
001CBB  3  85 rr        	sta sprcnt
001CBD  3               
001CBD  3               dspr0:
001CBD  3  A0 00        	ldy #var_Type
001CBF  3  B1 rr        	lda (z80_ix),y 		; get sprite type.
001CC1  3  C9 FF        	cmp #255 			; is it enabled?
001CC3  3  D0 45        	bne dspr1 			; yes, it needs deleting.
001CC5  3               
001CC5  3               dspr5:
001CC5  3  A0 05        	ldy #var_newType
001CC7  3  B1 rr        	lda (z80_ix),y 		; new type.
001CC9  3  C9 FF        	cmp #255			; is it enabled?
001CCB  3  F0 03        	beq dspr2			; no, skip
001CCD  3  4C 59 1D     	jmp dspr3 			; yes, it needs drawing.
001CD0  3               
001CD0  3               dspr2:
001CD0  3  A0 05        	ldy #var_newType
001CD2  3  B1 rr        	lda (z80_ix),y 		; copy new type.
001CD4  3  A0 00        	ldy #var_Type
001CD6  3  91 rr        	sta (z80_ix),y
001CD8  3  A0 06        	ldy #var_newImage
001CDA  3  B1 rr        	lda (z80_ix),y 		; copy new image number.
001CDC  3  A0 01        	ldy #var_Image
001CDE  3  91 rr        	sta (z80_ix),y
001CE0  3  A0 07        	ldy #var_newFrame
001CE2  3  B1 rr        	lda (z80_ix),y 		; copy new frame.
001CE4  3  A0 02        	ldy #var_Frame
001CE6  3  91 rr        	sta (z80_ix),y
001CE8  3  A0 08        	ldy #var_newY
001CEA  3  B1 rr        	lda (z80_ix),y 		; copy new y.
001CEC  3  A0 03        	ldy #var_Y
001CEE  3  91 rr        	sta (z80_ix),y
001CF0  3  A0 09        	ldy #var_newX
001CF2  3  B1 rr        	lda (z80_ix),y 		; copy new x.
001CF4  3  A0 04        	ldy #var_X
001CF6  3  91 rr        	sta (z80_ix),y
001CF8  3               
001CF8  3  18           	clc
001CF9  3  A5 rr        	lda z80_x
001CFB  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
001CFD  3  85 rr        	sta z80_x
001CFF  3  A5 rr        	lda z80_i
001D01  3  69 00        	adc #0
001D03  3  85 rr        	sta z80_i 			; next sprite.
001D05  3  C6 rr        	dec sprcnt
001D07  3  D0 B4        	bne dspr0			; repeat for remaining sprites.
001D09  3  60           	rts
001D0A  3               
001D0A  3               dspr1:
001D0A  3               	; _BEEB clipping code copied from CPC Engine
001D0A  3  A0 03        	ldy #var_Y
001D0C  3  B1 rr        	lda (z80_ix), y		; old x coord
001D0E  3  C9 B1        	cmp #SpriteMaxY     ; beyond maximum?
001D10  3  B0 B3        	bcs dspr5			; yes, don't delete it.
001D12  3               
001D12  3  A0 05        	ldy #var_newType
001D14  3  B1 rr        	lda (z80_ix),y 		; type of new sprite.
001D16  3  C9 FF        	cmp #255			; is this enabled?
001D18  3  D0 06        	bne dspr4 			; yes, display both.
001D1A  3               
001D1A  3               dspr6:
001D1A  3  20 84 0F     	jsr sspria 			; show single sprite.
001D1D  3  4C D0 1C     	jmp dspr2
001D20  3               
001D20  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
001D20  3               
001D20  3               dspr4:
001D20  3               	; _BEEB clipping code copied from CPC Engine
001D20  3  A0 08        	ldy #var_newY
001D22  3  B1 rr        	lda (z80_ix), y		; old x coord
001D24  3  C9 B1        	cmp #SpriteMaxY     ; beyond maximum?
001D26  3  B0 F2        	bcs dspr6			; yes, don't display it.
001D28  3               
001D28  3  A0 04        	ldy #var_X
001D2A  3  B1 rr        	lda (z80_ix),y		; old x.
001D2C  3  A0 09        	ldy #var_newX
001D2E  3  D1 rr        	cmp (z80_ix),y 		; compare with new value.
001D30  3  D0 21        	bne dspr7 			; they differ, need to redraw.
001D32  3               
001D32  3  A0 03        	ldy #var_Y
001D34  3  B1 rr        	lda (z80_ix),y		; old y.
001D36  3  A0 08        	ldy #var_newY
001D38  3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
001D3A  3  D0 17        	bne dspr7			; they differ, need to redraw.
001D3C  3               
001D3C  3  A0 02        	ldy #var_Frame
001D3E  3  B1 rr        	lda (z80_ix),y 		; old frame.
001D40  3  A0 07        	ldy #var_newFrame
001D42  3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
001D44  3  D0 0D        	bne dspr7 			; they differ, need to redraw.
001D46  3               
001D46  3  A0 01        	ldy #var_Image
001D48  3  B1 rr        	lda (z80_ix),y 		; old image.
001D4A  3  A0 06        	ldy #var_newImage
001D4C  3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
001D4E  3  D0 03        	bne dspr7 			; they differ, need to redraw.
001D50  3  4C D0 1C     	jmp dspr2			; everything is the same, don't redraw.
001D53  3               
001D53  3               dspr7:
001D53  3  20 9C 0F     	jsr sspric 			; delete old sprite, draw new one simultaneously.
001D56  3  4C D0 1C     	jmp dspr2
001D59  3               
001D59  3               dspr3:
001D59  3               	; _BEEB clipping code copied from CPC Engine
001D59  3  A0 08        	ldy #var_newY
001D5B  3  B1 rr        	lda (z80_ix), y		; old x coord
001D5D  3  C9 B1        	cmp #SpriteMaxY     ; beyond maximum?
001D5F  3  90 03        	bcc :+				; no, continue
001D61  3  4C D0 1C     	jmp dspr2			; yes, don't display it.
001D64  3               :
001D64  3  20 96 0F     	jsr ssprib 			; show single sprite.
001D67  3  4C D0 1C     	jmp dspr2
001D6A  3               
001D6A  3               ;-----------------------------------------
001D6A  3               ; Get sprite address calculations.
001D6A  3               ; gspran = new sprite, gsprad = old sprite.
001D6A  3               ;
001D6A  3               ; Input:
001D6A  3               ;  IX = sprite address
001D6A  3               ;-----------------------------------------
001D6A  3               
001D6A  3               gspran:
001D6A  3  A0 08        	ldy #var_newY
001D6C  3  B1 rr        	lda (z80_ix),y 		; new y coordinate.
001D6E  3  85 rr        	sta dispy
001D70  3  A0 09        	ldy #var_newX
001D72  3  B1 rr        	lda (z80_ix),y 		; new x coordinate.
001D74  3  85 rr        	sta dispx
001D76  3  A0 06        	ldy #var_newImage
001D78  3  B1 rr        	lda (z80_ix),y 		; new sprite image.
001D7A  3  20 2D 20     	jsr gfrm		; fetch start frame for this sprite.
001D7D  3               
001D7D  3  A0 00        	ldy #0
001D7F  3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
001D81  3  A0 07        	ldy #var_newFrame
001D83  3  18           	clc
001D84  3  71 rr        	adc (z80_ix),y 		; new add frame number.
001D86  3  4C A5 1D     	jmp gspra0
001D89  3               
001D89  3               ;-----------------------------------------
001D89  3               ; Calculate old sprite address
001D89  3               ;
001D89  3               ; Input:
001D89  3               ;  IX = sprite address
001D89  3               ;
001D89  3               ; Output:
001D89  3               ;  B  = right byte mask
001D89  3               ;  C  = left byte mask
001D89  3               ;  DE = spriteframe address
001D89  3               ;  scraddr = screenaddress(dispx,dispy)
001D89  3               ;-----------------------------------------
001D89  3               
001D89  3               gsprad:
001D89  3  A0 03        	ldy #var_Y
001D8B  3  B1 rr        	lda (z80_ix),y		; y coordinate.
001D8D  3  85 rr        	sta dispy
001D8F  3  A0 04        	ldy #var_X
001D91  3  B1 rr        	lda (z80_ix),y		; x coordinate.
001D93  3  85 rr        	sta dispx
001D95  3  A0 01        	ldy #var_Image
001D97  3  B1 rr        	lda (z80_ix),y 		; sprite image.
001D99  3  20 2D 20     	jsr gfrm 		; fetch start frame for this sprite.
001D9C  3               
001D9C  3  A0 00        	ldy #0
001D9E  3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
001DA0  3  A0 02        	ldy #var_Frame
001DA2  3  18           	clc
001DA3  3  71 rr        	adc (z80_ix),y 		; add frame number.
001DA5  3               
001DA5  3               gspra0:
001DA5  3  4A           	lsr a	  		; multiply by 128.
001DA6  3  85 rr        	sta z80_d 		; store in d.
001DA8  3  A9 00        	lda #0
001DAA  3  6A           	ror a
001DAB  3  85 rr        	sta z80_e 		; got low byte.
001DAD  3               
001DAD  3  18           	clc 			; address of play sprites.
001DAE  3  A5 rr        	lda z80_e
001DB0  3  69 E9        	adc #<sprgfx
001DB2  3  85 rr        	sta z80_e
001DB4  3  A5 rr        	lda z80_d
001DB6  3  69 33        	adc #>sprgfx
001DB8  3  85 rr        	sta z80_d
001DBA  3               
001DBA  3  A5 rr        	lda dispx 		; y coordinate.
001DBC  3  29 06        	and #6 			; position within byte boundary.
001DBE  3  AA           	tax	 		; low byte of table displacement.
001DBF  3               
001DBF  3  0A           	asl a	  		; multiply by 32.
001DC0  3  0A           	asl a  			; already a multiple
001DC1  3  0A           	asl a  			; of 2, so just 4
001DC2  3  0A           	asl a  			; shifts needed.
001DC3  3               
001DC3  3  18           	clc 			; add to sprite address.
001DC4  3  65 rr        	adc z80_e
001DC6  3  85 rr        	sta z80_e
001DC8  3  90 02        	bcc :+
001DCA  3  E6 rr        	inc z80_d
001DCC  3               :
001DCC  3  BD D9 1D     	lda spmask,x		 ; pointer to mask table.
001DCF  3  85 rr        	sta z80_c 		; left mask.
001DD1  3  BD DA 1D     	lda spmask+1,x
001DD4  3  85 rr        	sta z80_b 		; right mask.
001DD6  3               ; Drop into screen address routine.
001DD6  3  4C 70 0F     	jmp scadd
001DD9  3               
001DD9  3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
001DDD  3  0F F0 03 FC  
001DE1  3               
001DE1  3               
001DE1  3               ;-----------------------------------------------------------
001DE1  3               ; Animates a sprite.
001DE1  3               ;
001DE1  3               ; Input:
001DE1  3               ;  IX = sprite address
001DE1  3               ;  HL = last sprite address
001DE1  3               ;-----------------------------------------------------------
001DE1  3               
001DE1  3               animsp:
001DE1  3  A0 06        	ldy #var_newImage
001DE3  3  B1 rr        	lda (z80_ix),y		; sprite image
001DE5  3  20 2D 20     	jsr gfrm		; get frame data.
001DE8  3               
001DE8  3  E6 rr        	inc z80_l		; point to frames.
001DEA  3  D0 02        	bne :+
001DEC  3  E6 rr        	inc z80_h
001DEE  3               :
001DEE  3  A0 07        	ldy #var_newFrame
001DF0  3  B1 rr        	lda (z80_ix),y		; sprite frame.
001DF2  3  18           	clc
001DF3  3  69 01        	adc #1			; next one along.
001DF5  3  A0 00        	ldy #0
001DF7  3  D1 rr        	cmp (z80_hl),y		; reached the last frame?
001DF9  3  90 02        	bcc anims0		; no, not yet.
001DFB  3  A9 00        	lda #0			; start at first frame.
001DFD  3               anims0:
001DFD  3  A0 07        	ldy #var_newFrame
001DFF  3  91 rr        	sta (z80_ix),y		; new frame.
001E01  3  60           	rts
001E02  3               
001E02  3               ;--------------------------------------------------------------
001E02  3               ; Animate back
001E02  3               ;
001E02  3               ; Input:
001E02  3               ;  IX = sprite address
001E02  3               ;  HL = last sprite address
001E02  3               ;--------------------------------------------------------------
001E02  3               
001E02  3               animbk:
001E02  3  A0 06        	ldy #var_newImage
001E04  3  B1 rr        	lda (z80_ix),y		; sprite image.
001E06  3  20 2D 20     	jsr gfrm		; get frame data.
001E09  3               
001E09  3  E6 rr        	inc z80_l 		; point to frames.
001E0B  3  D0 02        	bne :+
001E0D  3  E6 rr        	inc z80_h
001E0F  3               :
001E0F  3  A0 07        	ldy #var_newFrame
001E11  3  B1 rr        	lda (z80_ix),y 		; sprite frame.
001E13  3  F0 03        	beq :+
001E15  3  4C 1C 1E     	jmp rtanb0 		; yes, start at end.
001E18  3               :
001E18  3  A0 00        	ldy #0
001E1A  3  B1 rr        	lda (z80_hl),y 		; last sprite.
001E1C  3               rtanb0:
001E1C  3  38           	sec
001E1D  3  E9 01        	sbc #1			; next one along.
001E1F  3  4C FD 1D     	jmp anims0		; set new frame.
001E22  3               
001E22  3               ;--------------------------------------------------------------
001E22  3               ; Check for collision with other sprite, strict enforcement.
001E22  3               ;
001E22  3               ; Input:
001E22  3               ;  b		= sprite to test for
001E22  3               ;  ix		= current sprite pointer
001E22  3               ;
001E22  3               ; global:	b
001E22  3               ; local:	x,y,hl,de,skptr
001E22  3               ; calls:	-
001E22  3               ;--------------------------------------------------------------
001E22  3               
001E22  3               sktyp:
001E22  3  A9 00        	lda #<sprtab				; sprite table.
001E24  3  85 rr        	sta z80_l
001E26  3  A9 0B        	lda #>sprtab
001E28  3  85 rr        	sta z80_h
001E2A  3               numsp2:
001E2A  3  A9 0C        	lda #NUMSPR				; number of sprites.
001E2C  3  85 rr        	sta sktptr
001E2E  3               sktyp0:
001E2E  3  A5 rr        	lda z80_l 				; store pointer to sprite.
001E30  3  85 rr        	sta skptr
001E32  3  A5 rr        	lda z80_h
001E34  3  85 rr        	sta skptr+1
001E36  3               
001E36  3  A0 00        	ldy #0
001E38  3  B1 rr        	lda (z80_hl),y 				; get sprite type.
001E3A  3  C5 rr        	cmp z80_b				; is it the type we seek?
001E3C  3  F0 1D        	beq coltyp				; yes, we can use this one.
001E3E  3               :
001E3E  3               sktyp1:
001E3E  3  18           	clc
001E3F  3  A5 rr        	lda skptr				; retrieve sprite pointer.
001E41  3  69 11        	adc #TABSIZ				; size of each entry.
001E43  3  85 rr        	sta z80_l
001E45  3  A5 rr        	lda skptr+1
001E47  3  69 00        	adc #0
001E49  3  85 rr        	sta z80_h
001E4B  3  C6 rr        	dec sktptr					; one less iteration.
001E4D  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
001E4F  3               :
001E4F  3  A9 00        	lda #0					; default to ROM address - no sprite.
001E51  3  85 rr        	sta z80_l
001E53  3  85 rr        	sta z80_h
001E55  3  85 rr        	sta skptr				; store pointer to sprite.
001E57  3  85 rr        	sta skptr+1
001E59  3               
001E59  3  18           	clc					; don't return with zero flag set.
001E5A  3  60           	rts 					; didn't find one.
001E5B  3               
001E5B  3               coltyp:
001E5B  3  A0 00        	ldy #0
001E5D  3  B1 rr        	lda (z80_ix),y				; current sprite type.
001E5F  3  C5 rr        	cmp z80_b				; seeking sprite of same type?
001E61  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
001E63  3               colty0:
001E63  3  A0 09        	ldy #9					; distance to x position in table.
001E65  3  B1 rr        	lda (z80_hl),y				; fetch x coordinate.
001E67  3  85 rr        	sta z80_e
001E69  3  88           	dey
001E6A  3  B1 rr        	lda (z80_hl),y				; fetch y coordinate.
001E6C  3  85 rr        	sta z80_d
001E6E  3               
001E6E  3               ; Drop into collision detection.
001E6E  3               
001E6E  3               colc16:
001E6E  3  A0 09        	ldy #9
001E70  3  B1 rr        	lda (z80_ix),y			 	; x coord.
001E72  3  38           	sec					; subtract x.
001E73  3  E5 rr        	sbc z80_e
001E75  3  B0 05        	bcs  colc1a 				; result is positive.
001E77  3  49 FF        	eor #$ff				; make negative positive.
001E79  3  18           	clc
001E7A  3  69 01        	adc #1
001E7C  3               colc1a:
001E7C  3  C9 10        	cmp #16 				; within x range?
001E7E  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
001E80  3  85 rr        	sta z80_c				; store difference.
001E82  3               
001E82  3  A0 08        	ldy #8
001E84  3  B1 rr        	lda (z80_ix),y				; y coord.
001E86  3  38           	sec
001E87  3  E5 rr        	sbc z80_d				; subtract y.
001E89  3  B0 05        	bcs colc1b				; result is positive.
001E8B  3  49 FF        	eor #$ff				; make negative positive.
001E8D  3  18           	clc
001E8E  3  69 01        	adc #1
001E90  3               colc1b:
001E90  3  C9 10        	cmp #16					; within y range?
001E92  3  B0 AA        	bcs sktyp1 				; no - they've missed.
001E94  3  18           	clc					; add x difference.
001E95  3  65 rr        	adc z80_c
001E97  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
001E99  3  B0 02        	bcs :+
001E9B  3  38           	sec
001E9C  3  60           	rts 					; carry set if there's a collision.
001E9D  3               :
001E9D  3  4C 3E 1E     	jmp sktyp1				; try next sprite in table.
001EA0  3               colty1:
001EA0  3  A5 rr        	lda z80_x  				; compare the two.
001EA2  3  C5 rr        	cmp z80_l
001EA4  3  D0 09        	bne end_col
001EA6  3  A5 rr        	lda z80_i
001EA8  3  C5 rr        	cmp z80_h
001EAA  3  D0 03        	bne end_col
001EAC  3  4C 3E 1E     	jmp sktyp1 				; addresses are identical.
001EAF  3               end_col:
001EAF  3  4C 63 1E     	jmp colty0
001EB2  3               
001EB2  3               ;-----------------------------------------------------------
001EB2  3               ; Display number, left aligned
001EB2  3               ; 
001EB2  3               ; Input:
001EB2  3               ;  a		= number
001EB2  3               ;
001EB2  3               ; global:	-
001EB2  3               ; local:	a,y,bc,hl,displ0
001EB2  3               ; calls:	num2ch,dmsg3
001EB2  3               ;-----------------------------------------------------------
001EB2  3               
001EB2  3               disply:
001EB2  3  85 rr        	sta z80_a
001EB4  3  A9 DA        	lda #<displ0				; display workspace.
001EB6  3  85 rr        	sta z80_c
001EB8  3  A9 1E        	lda #>displ0
001EBA  3  85 rr        	sta z80_b
001EBC  3  A5 rr        	lda z80_a
001EBE  3  20 A0 12     	jsr num2ch				; convert accumulator to string.
001EC1  3               
001EC1  3  C6 rr        	dec z80_c				; back one character.
001EC3  3  D0 02        	bne :+
001EC5  3  C6 rr        	dec z80_b
001EC7  3               :
001EC7  3  A0 00        	ldy #0
001EC9  3  B1 rr        	lda (z80_bc),y				; fetch digit.
001ECB  3  09 80        	ora #128				; insert end marker.
001ECD  3  91 rr        	sta (z80_bc),y				; new value.
001ECF  3               
001ECF  3  A9 DA        	lda #<displ0				; display space.
001ED1  3  85 rr        	sta z80_l
001ED3  3  A9 1E        	lda #>displ0
001ED5  3  85 rr        	sta z80_h
001ED7  3  4C 81 1A     	jmp dmsg3				; display the string.
001EDA  3               
001EDA  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
001EDE  3               
001EDE  3               ;----------------------------------------------------------------
001EDE  3               ; Initialise screen.
001EDE  3               ;
001EDE  3               ; global:	roomtb,scno
001EDE  3               ; local:	-
001EDE  3               ; calls:	tstcs
001EDE  3               ;----------------------------------------------------------------
001EDE  3               
001EDE  3               initsc:
001EDE  3  AD 1C 22     	lda roomtb 			; whereabouts in the map are we?
001EE1  3  20 EB 1E     	jsr tstsc 			; find displacement.
001EE4  3  C9 FF        	cmp #255 			; is it valid?
001EE6  3  F0 02        	beq init_end 			; no, it's rubbish.
001EE8  3  85 rr        	sta scno			; store new room number.
001EEA  3               init_end:
001EEA  3  60           	rts
001EEB  3               
001EEB  3               ;----------------------------------------------------------------
001EEB  3               ; Test screen.
001EEB  3               ;
001EEB  3               ; global:	-
001EEB  3               ; local:	x
001EEB  3               ; calls:	-
001EEB  3               ;----------------------------------------------------------------
001EEB  3               
001EEB  3               tstsc:
001EEB  3  85 rr        	sta tmproom
001EED  3  18           	clc
001EEE  3  69 0D        	adc #MAPWID 			; add width in case we"re negative.
001EF0  3  AA           	tax 				; add displacement to map data.
001EF1  3  BD 1E 22     	lda mapdat-MAPWID,x 		; find room number there.
001EF4  3  60           	rts
001EF5  3               
001EF5  3               ;--------------------------
001EF5  3               ; Screen left.
001EF5  3               ;--------------------------
001EF5  3               
001EF5  3               scrl:
001EF5  3  AD 1C 22     	lda roomtb 			; present room table pointer.
001EF8  3  38           	sec
001EF9  3  E9 01        	sbc #1				; room left.
001EFB  3               scrl0:
001EFB  3  20 EB 1E     	jsr tstsc			; test screen.
001EFE  3  C9 FF        	cmp #255			; is there a screen this way?
001F00  3  D0 01        	bne :+
001F02  3  60           	rts				; no, return to loop.
001F03  3               :
001F03  3  A5 rr        	lda tmproom			; restore room displacement.
001F05  3  8D 1C 22     	sta roomtb			; new room table position.
001F08  3               scrl1:
001F08  3  20 DE 1E     	jsr initsc 			; set new screen.
001F0B  3  A9 02        	lda #2
001F0D  3  85 rr        	sta restfl 			; set it.
001F0F  3  60           	rts
001F10  3               scrr:
001F10  3  AD 1C 22     	lda roomtb 			; room table pointer.
001F13  3  18           	clc
001F14  3  69 01        	adc #1				; room right.
001F16  3  4C FB 1E     	jmp scrl0
001F19  3               scru:
001F19  3  AD 1C 22     	lda roomtb 			; room table pointer.
001F1C  3  38           	sec
001F1D  3  E9 0D        	sbc #MAPWID 			; room up.
001F1F  3  4C FB 1E     	jmp scrl0
001F22  3               scrd:
001F22  3  AD 1C 22     	lda roomtb 			; room table pointer.
001F25  3  18           	clc
001F26  3  69 0D        	adc #MAPWID 			; room down.
001F28  3  4C FB 1E     	jmp scrl0
001F2B  3               
001F2B  3               ;-----------------------------------------
001F2B  3               ; Jump to new screen.
001F2B  3               ;-----------------------------------------
001F2B  3               
001F2B  3               nwscr:
001F2B  3  A2 00        	ldx #0				; start of map data.
001F2D  3               nwscr0:
001F2D  3  DD 2B 22     	cmp mapdat,x
001F30  3  F0 06        	beq nwscr1			; have we found a match for screen?
001F32  3  E8           	inx 				; next room.
001F33  3  E0 50        	cpx #80				; zero room count, 80 to search.
001F35  3  D0 F6        	bne nwscr0			; keep looking.
001F37  3  60           	rts
001F38  3               nwscr1:
001F38  3  8E 1C 22     	stx roomtb			; set the map position.
001F3B  3  4C 08 1F     	jmp scrl1			; draw new room.
001F3E  3               
001F3E  3               
001F3E  3               ;----------------------------------------------------------
001F3E  3               ; Gravity processing.
001F3E  3               ;----------------------------------------------------------
001F3E  3               
001F3E  3               grav:
001F3E  3  A0 0D        	ldy #var_jumpLo
001F40  3  B1 rr        	lda (z80_ix),y			; jump pointer low.
001F42  3  85 rr        	sta z80_l
001F44  3  A0 0E        	ldy #var_jumpHi
001F46  3  B1 rr        	lda (z80_ix),y			; jump pointer high.
001F48  3  85 rr        	sta z80_h
001F4A  3  05 rr        	ora z80_l			; merge in low byte.
001F4C  3  D0 01        	bne :+
001F4E  3  60           	rts				; if neither is set, we're not in the air.
001F4F  3               :
001F4F  3  A0 00        	ldy #0
001F51  3  B1 rr        	lda (z80_hl),y			; pixels to move.
001F53  3  85 rr        	sta z80_a
001F55  3  C9 63        	cmp #99				; reached the end?
001F57  3  D0 06        	bne grav0			; no, continue.
001F59  3               grav2:
001F59  3  C6 rr        	dec z80_l			; go back to previous value.
001F5B  3               	; 6502 WARNING - not updating 16-bit pointer properly!
001F5B  3  B1 rr        	lda (z80_hl),y			; fetch that from table.
001F5D  3  85 rr        	sta z80_a
001F5F  3               grav0:
001F5F  3  E6 rr        	inc z80_l			; point to next table entry.
001F61  3               	; 6502 WARNING - not updating 16-bit pointer properly!
001F61  3  A5 rr        	lda z80_l
001F63  3  A0 0D        	ldy #var_jumpLo
001F65  3  91 rr        	sta (z80_ix),y			; store new pointer low.
001F67  3  A5 rr        	lda z80_h
001F69  3  A0 0E        	ldy #var_jumpHi
001F6B  3  91 rr        	sta (z80_ix),y			; store new pointer high.
001F6D  3               grav1:
001F6D  3  A5 rr        	lda z80_a
001F6F  3  D0 01        	bne :+				; any movement required?
001F71  3  60           	rts				; no, not this time.
001F72  3               :
001F72  3  A5 rr        	lda z80_a
001F74  3  C9 80        	cmp #128			; is it up or down?
001F76  3  B0 15        	bcs gravu			; it's up.
001F78  3               gravd:
001F78  3  85 rr        	sta z80_b			; set pixels to move.
001F7A  3               gravd0:
001F7A  3  20 24 18     	jsr cangd			; can we go down?
001F7D  3  D0 28        	bne gravst			; can't move down, so stop.
001F7F  3  A0 08        	ldy #8
001F81  3  B1 rr        	lda (z80_ix),y			; adjust new x coord.
001F83  3  18           	clc
001F84  3  69 01        	adc #1
001F86  3  91 rr        	sta (z80_ix),y
001F88  3  C6 rr        	dec z80_b
001F8A  3  D0 EE        	bne gravd0
001F8C  3  60           	rts
001F8D  3               gravu:
001F8D  3  49 FF        	eor #$ff			; flip the sign so it's positive.
001F8F  3  18           	clc
001F90  3  69 01        	adc #1
001F92  3  85 rr        	sta z80_b			; set pixels to move.
001F94  3               gravu0:
001F94  3  20 EF 17     	jsr cangu			; can we go up?
001F97  3  D0 6E        	bne ifalls			; can't move up, go down next.
001F99  3  A0 08        	ldy #8
001F9B  3  B1 rr        	lda (z80_ix),y
001F9D  3  38           	sec
001F9E  3  E9 01        	sbc #1
001FA0  3  91 rr        	sta (z80_ix),y			; adjust new x coord.
001FA2  3  C6 rr        	dec z80_b
001FA4  3  D0 EE        	bne gravu0
001FA6  3  60           	rts
001FA7  3               gravst:
001FA7  3  A0 0D        	ldy #var_jumpLo
001FA9  3  B1 rr        	lda (z80_ix),y			; jump pointer low.
001FAB  3  85 rr        	sta z80_l
001FAD  3  A0 0E        	ldy #var_jumpHi
001FAF  3  B1 rr        	lda (z80_ix),y			; jump pointer high.
001FB1  3  85 rr        	sta z80_h
001FB3  3               
001FB3  3  A9 00        	lda #0				; null value in pointer.
001FB5  3  A0 0D        	ldy #var_jumpLo
001FB7  3  91 rr        	sta (z80_ix),y			; store new pointer low.
001FB9  3  C8           	iny
001FBA  3  91 rr        	sta (z80_ix),y			; store new pointer high.
001FBC  3               
001FBC  3  A0 00        	ldy #0
001FBE  3  B1 rr        	lda (z80_hl),y			; fetch byte from table.
001FC0  3  C9 63        	cmp #99				; is it the end marker?
001FC2  3               evftf:
001FC2  3  F0 01        	beq :+				; yes, fallen too far.
001FC4  3  60           	rts
001FC5  3               :
001FC5  3  4C 93 31     	jmp evnt15			; EVENT FELLTOOFAR
001FC8  3               
001FC8  3               ;------------------------------------------------
001FC8  3               ; Initiate fall check.
001FC8  3               ;------------------------------------------------
001FC8  3               
001FC8  3               ifall:
001FC8  3  A0 0D        	ldy #var_jumpLo
001FCA  3  B1 rr        	lda (z80_ix),y 			; jump pointer low.
001FCC  3  85 rr        	sta z80_l
001FCE  3  A0 0E        	ldy #var_jumpHi
001FD0  3  B1 rr        	lda (z80_ix),y 			; jump pointer high.
001FD2  3  85 rr        	sta z80_h			; high byte in accumulator.
001FD4  3  05 rr        	ora z80_l			; merge in low byte.
001FD6  3  F0 01        	beq :+
001FD8  3  60           	rts				; if either is set, we're already in the air.
001FD9  3               :
001FD9  3  A0 09        	ldy #9
001FDB  3  B1 rr        	lda (z80_ix),y			; y coordinate.
001FDD  3  85 rr        	sta dispx
001FDF  3               numsp7:
001FDF  3  A0 08        	ldy #8
001FE1  3  B1 rr        	lda (z80_ix),y			; look x coordinate.
001FE3  3  18           	clc
001FE4  3  69 10        	adc #16				; add 16 pixels.
001FE6  3  85 rr        	sta dispy			; set up test coordinates.
001FE8  3  20 9F 19     	jsr tstbl			; get map address.
001FEB  3  20 B6 18     	jsr plchk			; block, platform check.
001FEE  3  F0 01        	beq :+
001FF0  3  60           	rts				; it's solid, don't fall.
001FF1  3               :
001FF1  3  E6 rr        	inc bufaddr			; look right one cell.
001FF3  3  20 B6 18     	jsr plchk			; block, platform check.
001FF6  3  F0 01        	beq :+
001FF8  3  60           	rts				; it's solid, don't fall.
001FF9  3               :
001FF9  3  A5 rr        	lda dispx			; y coordinate.
001FFB  3  29 07        	and #7				; position straddling block cells.
001FFD  3  F0 08        	beq ifalls			; no more checks needed.
001FFF  3  E6 rr        	inc bufaddr			; look to third cell.
002001  3  20 B6 18     	jsr plchk			; block, platform check.
002004  3  F0 01        	beq :+
002006  3  60           	rts				; it's solid, don't fall.
002007  3               :
002007  3               ifalls:
002007  3  A9 00        	lda #<jtab			; jump table start.
002009  3  85 rr        	sta z80_l
00200B  3  A9 1A        	lda #>jtab
00200D  3  85 rr        	sta z80_h
00200F  3               ifal0:
00200F  3  E6 rr        	inc z80_l			; point to next value.
002011  3               	; 6502 WARNING - not updating 16-bit pointer properly!
002011  3  A0 00        	ldy #0
002013  3  B1 rr        	lda (z80_hl),y			; fetch value.
002015  3  F0 F8        	beq ifal0			; no, get next value.
002017  3  C9 63        	cmp #99				; reached end of table?
002019  3  D0 01        	bne :+
00201B  3  60           	rts				; yes, don't fall.
00201C  3               :
00201C  3  C9 80        	cmp #128			; is it going up?
00201E  3  B0 EF        	bcs ifal0			; yes, looking for first movement down.
002020  3               
002020  3  A0 0D        	ldy #var_jumpLo
002022  3  A5 rr        	lda z80_l
002024  3  91 rr        	sta (z80_ix),y 			; set jump low.
002026  3  A0 0E        	ldy #var_jumpHi
002028  3  A5 rr        	lda z80_h
00202A  3  91 rr        	sta (z80_ix),y 			; set jump high.
00202C  3  60           	rts
00202D  3               
00202D  3               
00202D  3               ;----------------------------------------------------
00202D  3               ; Get frame data for a particular sprite.
00202D  3               ; Input:
00202D  3               ;  a		= framenumer
00202D  3               ; Output:
00202D  3               ;  hl		= frame address
00202D  3               ;
00202D  3               ; global:	hl,frmptr
00202D  3               ; local:	-
00202D  3               ; calls:	-
00202D  3               ;----------------------------------------------------
00202D  3               
00202D  3               gfrm:
00202D  3  0A           	asl a	 		 	; multiple of 2.
00202E  3  18           	clc
00202F  3  6D 77 10     	adc frmptr 			; frames used by game.
002032  3  85 rr        	sta z80_l
002034  3  AD 78 10     	lda frmptr+1
002037  3  69 00        	adc #0
002039  3  85 rr        	sta z80_h 			; point to frame start.
00203B  3  60           	rts
00203C  3               
00203C  3               ;----------------------------------------------------
00203C  3               ; Find sprite list for current room.
00203C  3               ;
00203C  3               ; global:	hl
00203C  3               ; local:	x,y
00203C  3               ; calls:	-
00203C  3               ;----------------------------------------------------
00203C  3               
00203C  3               sprlst:
00203C  3  A9 D4        	lda #<nmedat 			; list of enemy sprites.
00203E  3  85 rr        	sta z80_l
002040  3  A9 6D        	lda #>nmedat
002042  3  85 rr        	sta z80_h
002044  3  A6 rr        	ldx scno 			; screen number.
002046  3  D0 01        	bne sprls2 			; is it the first screen?
002048  3  60           	rts 				; yes, don't need to search data.
002049  3               sprls2:
002049  3  A0 00        	ldy #0
00204B  3               sprls1:
00204B  3  B1 rr        	lda (z80_hl),y 			; fetch type of sprite.
00204D  3  C9 FF        	cmp #255			; is it an end marker?
00204F  3  F0 0E        	beq sprls0 			; yes, end of this room.
002051  3               
002051  3  18           	clc 				; point to next sprite in list.
002052  3  A5 rr        	lda z80_l
002054  3  69 04        	adc #NMESIZ
002056  3  85 rr        	sta z80_l
002058  3  90 02        	bcc :+
00205A  3  E6 rr        	inc z80_h
00205C  3               :
00205C  3  4C 4B 20     	jmp sprls1 			; continue until end of room.
00205F  3               sprls0:
00205F  3  E6 rr        	inc z80_l 			; point to start of next screen.s
002061  3  D0 02        	bne :+
002063  3  E6 rr        	inc z80_h
002065  3               :
002065  3  CA           	dex
002066  3  D0 E3        	bne sprls1 			; continue until room found.
002068  3  60           	rts
002069  3               
002069  3               
002069  3               ;----------------------------------------------------
002069  3               ; Clear all but a single player sprite.
002069  3               ;
002069  3               ; global:	-
002069  3               ; local:	x,y,ix
002069  3               ; calls:	-
002069  3               ;----------------------------------------------------
002069  3               
002069  3               nspr:
002069  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00206B  3  85 rr        	sta sprcnt
00206D  3  A9 00        	lda #<sprtab 			; sprite table.
00206F  3  85 rr        	sta z80_x
002071  3  A9 0B        	lda #>sprtab
002073  3  85 rr        	sta z80_i
002075  3               nspr0:
002075  3  A0 00        	ldy #0 				; fetch sprite type.
002077  3  B1 rr        	lda (z80_ix),y 			; is it a player?
002079  3  F0 1A        	beq nspr1 			; yes, keep this one.
00207B  3               
00207B  3  A9 FF        	lda #255
00207D  3  A0 00        	ldy #0 				; fetch sprite type.
00207F  3  91 rr        	sta (z80_ix),y 			; delete sprite.
002081  3  A0 05        	ldy #5
002083  3  91 rr        	sta (z80_ix),y 			; remove next type.
002085  3               
002085  3  18           	clc	 			; next sprite.
002086  3  A5 rr        	lda z80_x
002088  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00208A  3  85 rr        	sta z80_x
00208C  3  90 02        	bcc :+
00208E  3  E6 rr        	inc z80_i
002090  3               :
002090  3  C6 rr        	dec sprcnt	 			; one less space in the table.
002092  3  D0 E1        	bne nspr0
002094  3  60           	rts
002095  3               nspr1:
002095  3  A9 FF        	lda #255
002097  3  A0 00        	ldy #0
002099  3  91 rr        	sta (z80_ix),y 			; delete sprite.
00209B  3               
00209B  3  18           	clc	 			; point to next sprite.
00209C  3  A5 rr        	lda z80_x
00209E  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0020A0  3  85 rr        	sta z80_x
0020A2  3  90 02        	bcc :+
0020A4  3  E6 rr        	inc z80_i
0020A6  3               :
0020A6  3  C6 rr        	dec sprcnt	 			; one less to do.
0020A8  3  D0 01        	bne nspr2
0020AA  3  60           	rts
0020AB  3               nspr2:
0020AB  3  A9 FF        	lda #255
0020AD  3  A0 00        	ldy #0
0020AF  3  91 rr        	sta (z80_ix),y 			; delete sprite.
0020B1  3  A0 05        	ldy #5
0020B3  3  91 rr        	sta (z80_ix),y 			; remove next type.
0020B5  3               
0020B5  3  18           	clc	 			; next sprite.
0020B6  3  A5 rr        	lda z80_x
0020B8  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0020BA  3  85 rr        	sta z80_x
0020BC  3  90 02        	bcc :+
0020BE  3  E6 rr        	inc z80_i
0020C0  3               :
0020C0  3  C6 rr        	dec sprcnt	 			; one less space in table.
0020C2  3  D0 E7        	bne nspr2
0020C4  3  60           	rts
0020C5  3               
0020C5  3               ;----------------------------------------------------------
0020C5  3               ; Two initialisation routines.
0020C5  3               ; Initialise sprites - copy everything from list to table.
0020C5  3               ;
0020C5  3               ; global:	-
0020C5  3               ; local:	x,y,ix
0020C5  3               ; calls:	cpsp
0020C5  3               ;----------------------------------------------------------
0020C5  3               
0020C5  3               ispr:
0020C5  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0020C7  3  85 rr        	sta sprcnt
0020C9  3  A9 00        	lda #<sprtab			; sprite table.
0020CB  3  85 rr        	sta z80_x
0020CD  3  A9 0B        	lda #>sprtab
0020CF  3  85 rr        	sta z80_i
0020D1  3               ispr2:
0020D1  3  A0 00        	ldy #0
0020D3  3  B1 rr        	lda (z80_hl),y 			; fetch byte.
0020D5  3  C9 FF        	cmp #255 			; is it an end marker?
0020D7  3  D0 01        	bne :+
0020D9  3  60           	rts 				; yes, no more to do.
0020DA  3               :
0020DA  3               ispr1:
0020DA  3  A0 00        	ldy #0
0020DC  3  B1 rr        	lda (z80_ix),y 			; fetch sprite type.
0020DE  3  C9 FF        	cmp #255 			; is it enabled yet?
0020E0  3  D0 08        	bne ispr4			; yes, try another slot.
0020E2  3               
0020E2  3  A0 05        	ldy #5
0020E4  3  B1 rr        	lda (z80_ix),y		 	; next type.
0020E6  3  C9 FF        	cmp #255 			; is it enabled yet?
0020E8  3  F0 10        	beq ispr3 			; no, process this one.
0020EA  3               ispr4:
0020EA  3  18           	clc 				; next sprite.
0020EB  3  A5 rr        	lda z80_x
0020ED  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0020EF  3  85 rr        	sta z80_x
0020F1  3  90 02        	bcc :+
0020F3  3  E6 rr        	inc z80_i
0020F5  3               :
0020F5  3  C6 rr        	dec sprcnt
0020F7  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
0020F9  3  60           	rts  				; no more room in table.
0020FA  3               ispr3:
0020FA  3  20 4D 21     	jsr cpsp			; initialise a sprite.
0020FD  3  C6 rr        	dec sprcnt			; one less space in the table.
0020FF  3  D0 D0        	bne ispr2
002101  3  60           	rts
002102  3               
002102  3               
002102  3               ;-----------------------------------------------------------------------
002102  3               ; Initialise sprites - but not player, we're keeping the old one.
002102  3               ;
002102  3               ; global:	-
002102  3               ; local:	x,y,ix
002102  3               ; calls:	cpsp
002102  3               ;-----------------------------------------------------------------------
002102  3               
002102  3               kspr:
002102  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
002104  3  A9 00        	lda #<sprtab 			; sprite table.
002106  3  85 rr        	sta z80_x
002108  3  A9 0B        	lda #>sprtab
00210A  3  85 rr        	sta z80_i
00210C  3               kspr2:
00210C  3  A0 00        	ldy #0
00210E  3  B1 rr        	lda (z80_hl),y 			; fetch byte.
002110  3  C9 FF        	cmp #255 			; is it an end marker?
002112  3  D0 01        	bne :+
002114  3  60           	rts 				; yes, no more to do.
002115  3               :
002115  3  C9 00        	cmp #0
002117  3  D0 0E        	bne kspr1 			; no, add to table as normal.
002119  3               
002119  3  18           	clc 				; next sprite.
00211A  3  A5 rr        	lda z80_l
00211C  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
00211E  3  85 rr        	sta z80_l
002120  3  90 02        	bcc :+
002122  3  E6 rr        	inc z80_h
002124  3               :
002124  3  4C 0C 21     	jmp kspr2
002127  3               kspr1:
002127  3  A0 00        	ldy #0 				; fetch sprite type.
002129  3  B1 rr        	lda (z80_ix),y
00212B  3  C9 FF        	cmp #255 			; is it enabled yet?
00212D  3  D0 08        	bne kspr4 			; yes, try another slot.
00212F  3               
00212F  3  A0 05        	ldy #5 				; next type.
002131  3  B1 rr        	lda (z80_ix),y
002133  3  C9 FF        	cmp #255 			; is it enabled yet?
002135  3  F0 0F        	beq kspr3 			; no, process this one.
002137  3               kspr4:
002137  3  18           	clc 				; next sprite.
002138  3  A5 rr        	lda z80_x
00213A  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00213C  3  85 rr        	sta z80_x
00213E  3  90 02        	bcc :+
002140  3  E6 rr        	inc z80_i
002142  3               :
002142  3  CA           	dex	 			; repeat for remaining sprites.
002143  3  D0 E2        	bne kspr1
002145  3  60           	rts  				; no more room in table.
002146  3               kspr3:
002146  3  20 4D 21     	jsr cpsp 			; copy sprite to table.
002149  3  CA           	dex	 			; one less space in the table.
00214A  3  D0 C0        	bne kspr2
00214C  3  60           	rts
00214D  3               
00214D  3               ;----------------------------------------------
00214D  3               ; Copy sprite from list to table.
00214D  3               ;
00214D  3               ; global:	hl,ix
00214D  3               ; local:	y
00214D  3               ; calls:	evnt09
00214D  3               ;----------------------------------------------
00214D  3               
00214D  3               cpsp:
00214D  3  A0 00        	ldy #0					; fetch byte from table.
00214F  3  B1 rr        	lda (z80_hl),y
002151  3               	; y=var_Type
002151  3  91 rr        	sta (z80_ix),y			; set up type.
002153  3  A0 05        	ldy #var_newType
002155  3  91 rr        	sta (z80_ix),y 			; set up type.
002157  3               
002157  3  E6 rr        	inc z80_l 				; move to next byte.
002159  3  D0 02        	bne :+
00215B  3  E6 rr        	inc z80_h
00215D  3               :
00215D  3  A0 00        	ldy #0 					; fetch byte from table.
00215F  3  B1 rr        	lda (z80_hl),y
002161  3  A0 06        	ldy #var_newImage
002163  3  91 rr        	sta (z80_ix),y			; set up image.
002165  3               
002165  3  E6 rr        	inc z80_l 				; move to next byte.
002167  3  D0 02        	bne :+
002169  3  E6 rr        	inc z80_h
00216B  3               :
00216B  3  A0 00        	ldy #0
00216D  3  B1 rr        	lda (z80_hl),y 			; fetch byte from table.
00216F  3  A0 08        	ldy #var_newY
002171  3  91 rr        	sta (z80_ix),y 			; set up coordinate.
002173  3               
002173  3  A9 C8        	lda #200 				; set initial coordinate off screen.
002175  3  A0 03        	ldy #var_Y
002177  3  91 rr        	sta (z80_ix),y
002179  3               
002179  3  E6 rr        	inc z80_l 				; move to next byte.
00217B  3  D0 02        	bne :+
00217D  3  E6 rr        	inc z80_h
00217F  3               :
00217F  3  A0 00        	ldy #0 					; fetch byte from table.
002181  3  B1 rr        	lda (z80_hl),y
002183  3  A0 09        	ldy #var_newX
002185  3  91 rr        	sta (z80_ix),y 			; set up coordinate.
002187  3               
002187  3  E6 rr        	inc z80_l 				; move to next byte.
002189  3  D0 02        	bne :+
00218B  3  E6 rr        	inc z80_h
00218D  3               :
00218D  3  A9 00        	lda #0					; zeroes in accumulator.
00218F  3  A0 07        	ldy #var_newFrame 		; reset frame number.
002191  3  91 rr        	sta (z80_ix),y
002193  3  A0 0A        	ldy #var_Direction 		; reset direction.
002195  3  91 rr        	sta (z80_ix),y
002197  3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
002199  3  91 rr        	sta (z80_ix),y
00219B  3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
00219D  3  91 rr        	sta (z80_ix),y
00219F  3               
00219F  3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
0021A1  3  A0 10        	ldy #var_dataHi
0021A3  3  91 rr        	sta (z80_ix),y
0021A5  3               evis0:
0021A5  3  A5 rr        	lda z80_i
0021A7  3  48           	pha
0021A8  3  A5 rr        	lda z80_x
0021AA  3  48           	pha
0021AB  3  A5 rr        	lda z80_h
0021AD  3  48           	pha
0021AE  3  A5 rr        	lda z80_l
0021B0  3  48           	pha
0021B1  3               
0021B1  3  20 05 31     	jsr evnt09 				; perform event.
0021B4  3               
0021B4  3  68           	pla
0021B5  3  85 rr        	sta z80_l
0021B7  3  68           	pla
0021B8  3  85 rr        	sta z80_h
0021BA  3  68           	pla
0021BB  3  85 rr        	sta z80_x
0021BD  3  68           	pla
0021BE  3  85 rr        	sta z80_i
0021C0  3               
0021C0  3  18           	clc
0021C1  3  A5 rr        	lda z80_x 			; distance to next odd/even entry.
0021C3  3  69 11        	adc #TABSIZ		 	; next sprite.
0021C5  3  85 rr        	sta z80_x
0021C7  3  90 02        	bcc :+
0021C9  3  E6 rr        	inc z80_i
0021CB  3               :
0021CB  3  60           	rts
0021CC  3               
0021CC  3               
0021CC  3               ;-------------------------------------
0021CC  3               ; Clear the play area window.
0021CC  3               ;-------------------------------------
0021CC  3               
0021CC  3               clw:
0021CC  3  AD 6E 10     	lda wintop			; get coordinates of window.
0021CF  3  85 rr        	sta dispy			; put into dispx for calculation.
0021D1  3  AD 6F 10     	lda winlft
0021D4  3  85 rr        	sta dispx
0021D6  3               
0021D6  3  AD 70 10     	lda winhgt			; height of window.
0021D9  3  85 rr        	sta rrow			; copy to b register.
0021DB  3               clw3:
0021DB  3  AD 71 10     	lda winwid 			; width of window.
0021DE  3  85 rr        	sta rcol
0021E0  3               clw2:
0021E0  3  20 4F 16     	jsr gprad 			; get print address.
0021E3  3  A9 00        	lda #0				; zero byte to write.
0021E5  3  A2 07        	ldx #7				; pixel height of each cell.
0021E7  3               clw1:
0021E7  3  BC 5A 10     	ldy scrtab,x
0021EA  3  91 rr        	sta (scraddr),y 			; copy to screen.
0021EC  3  CA           	dex				; next screen row down.
0021ED  3  10 F8        	bpl clw1
0021EF  3               
0021EF  3  E6 rr        	inc dispx			; next column.
0021F1  3  C6 rr        	dec rcol			; one less to do.
0021F3  3  D0 EB        	bne clw2			; repeat for remaining columns.
0021F5  3               
0021F5  3  AD 6F 10     	lda winlft			; get left edge.
0021F8  3  85 rr        	sta dispx 			; reset x.
0021FA  3  E6 rr        	inc dispy 			; next line down.
0021FC  3               
0021FC  3  C6 rr        	dec rrow
0021FE  3  D0 DB        	bne clw3			; repeat down the screen.
002200  3               
002200  3  AD 6E 10     	lda wintop			; get coordinates of window.
002203  3  85 rr        	sta chary			; put into display position.
002205  3  AD 6F 10     	lda winlft
002208  3  85 rr        	sta charx
00220A  3  60           	rts
00220B  3               
00220B  3               
00220B  3               ;----------------------------------------------------------
00220B  3               ; Effects code.
00220B  3               ; Ticker routine is called 25 times per second.
00220B  3               ;
00220B  3               ; HL = txtscr = left text screen address
00220B  3               ; DE = txtscr+txtwid-1 = right text screen address
00220B  3               ; BC = txtpos = text scroller position
00220B  3               ;
00220B  3               ;----------------------------------------------------------
00220B  3               
00220B  3               .if sflag
00220B  3               scrly:
00220B  3               	rts
00220B  3               	.word txtscr         	; get left screen address.
00220B  3               	sta scr_l
00220B  3               	lda txtscr+1
00220B  3               	sta scr_l+1
00220B  3               	sta scr_r+1
00220B  3               	
00220B  3               	stx xtmp
00220B  3               
00220B  3               	clc         		; get right screen address.
00220B  3               	lda scr_l
00220B  3               	adc txtwid
00220B  3               	sta scr_r
00220B  3               	dec scr_r
00220B  3               scrly1:
00220B  3               	ldy txtwid		; set txtwide
00220B  3               	dey
00220B  3               	clc
00220B  3               scrly0:
00220B  3               	lda (scr_l),y		; scroll 1 line
00220B  3               	rol a
00220B  3               	sta (scr_l),y
00220B  3               	dey
00220B  3               	bpl scrly0
00220B  3               
00220B  3               	clc			; point to next line
00220B  3               	lda scr_l
00220B  3               	adc #32
00220B  3               	sta scr_l
00220B  3               	bcc scrly1		; repeat 8 times
00220B  3               
00220B  3               	lda txtpos 		; get text pointer.
00220B  3               	sta scr_txt
00220B  3               	lda txtpos+1
00220B  3               	sta scr_txt+1
00220B  3               
00220B  3               	ldy #0
00220B  3               	lda (scr_txt),y 		; find character we're displaying.
00220B  3               	and #127 		; remove end marker bit if applicable.
00220B  3               	cmp #ASCII_NEWLINE			; is it newline?
00220B  3               	bne scrly5 		; no, it's okay.
00220B  3               	lda #32			; convert to a space instead.
00220B  3               scrly5:
00220B  3               	sta fntaddr		; calculate char address
00220B  3               	lda #0
00220B  3               	sta fntaddr+1
00220B  3               	asl fntaddr  		; multiply char by 8.
00220B  3               	rol fntaddr+1
00220B  3               	asl fntaddr
00220B  3               	rol fntaddr+1
00220B  3               	asl fntaddr
00220B  3               	rol fntaddr+1
00220B  3               	lda fntaddr
00220B  3               	clc
00220B  3               	adc FontPtr
00220B  3               	sta scrly3+1		; that's the low byte.
00220B  3               	lda fntaddr+1
00220B  3               	adc FontPtr+1
00220B  3               	sta scrly3+2		; add displacement.
00220B  3               
00220B  3               	ldx #0
00220B  3               scrly3:
00220B  3               	lda $3333,x		; get image of char line.
00220B  3               	and txtbit
00220B  3               	beq scrly2		; don't plot pixel
00220B  3               	ldy scrline,x
00220B  3               	lda (scr_r),y
00220B  3               	clc
00220B  3               	ora #1
00220B  3               	sta (scr_r),y		; plot pixel
00220B  3               scrly2:
00220B  3               	inx			; next line of char.
00220B  3               	cpx #8
00220B  3               	bne scrly3
00220B  3               
00220B  3               	lsr txtbit		; bit of text to display.
00220B  3               	bcs :+
00220B  3               	rts
00220B  3               :
00220B  3               	ldy #0
00220B  3               	lda (scr_txt),y 	; what was the character?
00220B  3               	asl a	  		; end of message?
00220B  3               	bcs scrly4
00220B  3               	inc txtpos
00220B  3               	bne :+
00220B  3               	inc txtpos+1
00220B  3               :
00220B  3               	jmp scrly6 		; not yet - continue.
00220B  3               scrly4:
00220B  3               	lda txtini 		; start of scrolling message.
00220B  3               	sta txtpos
00220B  3               	lda txtini+1
00220B  3               	sta txtpos+1
00220B  3               scrly6:
00220B  3               	lda #128
00220B  3               	sta txtbit
00220B  3               	ldx xtmp
00220B  3               	rts
00220B  3               
00220B  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
00220B  3               
00220B  3               ;-------------------------------------------------------
00220B  3               ; Entry TICKER command
00220B  3               ;
00220B  3               ; Entry:
00220B  3               ;  z80_b = message nr
00220B  3               ;  z80_c = width
00220B  3               ;-------------------------------------------------------
00220B  3               
00220B  3               iscrly:
00220B  3               	jsr prescr 		; set up display position.
00220B  3               
00220B  3               	lda #<msgdat 		; text messages.
00220B  3               	sta z80_l
00220B  3               	lda #>msgdat
00220B  3               	sta z80_h
00220B  3               
00220B  3               	lda z80_c 		; width.
00220B  3               	sec
00220B  3               	sbc #1			; subtract one.
00220B  3               	cmp #32 		; is it between 1 and 32?
00220B  3               	bcc :+
00220B  3               	lda #$60
00220B  3               	jmp iscrl0		; no, disable messages.
00220B  3               :
00220B  3               	ldx z80_b		; message number.
00220B  3               	jsr getwrd 		; find message start.
00220B  3               
00220B  3               	lda z80_l		; set initial text position.
00220B  3               	sta txtini
00220B  3               	lda z80_h
00220B  3               	sta txtini+1
00220B  3               
00220B  3               	lda #$ad		; code for lda adrr
00220B  3               iscrl0:
00220B  3               	sta scrly		; enable/disable scrolling routine.
00220B  3               
00220B  3               	jsr prescr 		; set up display position.
00220B  3               	jsr gprad 		; get print address.
00220B  3               
00220B  3               	lda scraddr 		; set text screen address.
00220B  3               	sta txtscr
00220B  3               	lda scraddr+1
00220B  3               	sta txtscr+1
00220B  3               
00220B  3               	lda z80_c		; width.
00220B  3               	sta txtwid		; set width in working storage.
00220B  3               
00220B  3               	lda #128 		; start with leftmost bit.
00220B  3               	sta txtbit
00220B  3               
00220B  3               	jmp scrly4
00220B  3               .endif
00220B  3               
00220B  3               ;------------------------------------------------------------------
00220B  3               ; Sprite table 
00220B  3               ;------------------------------------------------------------------
00220B  3               
00220B  3               
00220B  3               ; ix+0  = type.
00220B  3               ; ix+1  = sprite image number.
00220B  3               ; ix+2  = frame.
00220B  3               ; ix+3  = y coord.
00220B  3               ; ix+4  = x coord.
00220B  3               
00220B  3               ; ix+5  = new type.
00220B  3               ; ix+6  = new image number.
00220B  3               ; ix+7  = new frame.
00220B  3               ; ix+8  = new y coord.
00220B  3               ; ix+9  = new x coord.
00220B  3               
00220B  3               ; ix+10 = direction.
00220B  3               ; ix+11 = parameter 1.
00220B  3               ; ix+12 = parameter 2.
00220B  3               ; ix+13 = jump pointer low.
00220B  3               ; ix+14 = jump pointer high.
00220B  3               ; ix+15 = data pointer low.
00220B  3               ; ix+16 = data pointer high.
00220B  3               
00220B  3               ; block NUMSPR * TABSIZ,255
00220B  3               
00220B  3               ;sprtab:	.res NUMSPR*TABSIZ,255
00220B  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
00220F  3  FF FF FF 00  
002213  3  C0 78 00 00  
00221C  3  07           roomtb:	.byte 7                      ; start room map offset.
00221D  3               
00221D  3               ; User routine.  Put your own code in here to be called with USER instruction.
00221D  3               ; if USER has an argument it will be passed in the accumulator.
00221D  3               
00221D  3               user:
00221D  3  60           	rts
00221E  3               
00221E  3               ; Everything below here will be generated by the editors.
00221E  3               
00221E  3               WINDOWTOP = 1
00221E  3               WINDOWLFT = 0
00221E  3               WINDOWHGT = 22
00221E  3               WINDOWWID = 32 ;a
00221E  3               MAPWID = 13
00221E  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255
002222  3  FF FF FF FF  
002226  3  FF FF FF FF  
00222B  3               mapdat:
00222B  3  FF 00 01 02          .byte 255,0,1,2,3,4,5,6,7,8,9,10,255,255,11,12,13,14,15,16,17,18,19,20,21,255,255,22,23,255,255,255,255,255,255,255,255,255,255
00222F  3  03 04 05 06  
002233  3  07 08 09 0A  
002252  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255
002256  3  FF FF FF FF  
00225A  3  FF FF FF FF  
00225F  3  01           stmap:  .byte 1
002260  3               
002260  3               evnt00:
002260  3  A9 15                lda #21
002262  3  C5 rr                cmp scno
002264  3  F0 03                beq *+5
002266  3  4C 14 23             jmp a00356
002269  3  A9 01                lda #1
00226B  3  C5 rr                cmp varj
00226D  3  F0 03                beq *+5
00226F  3  4C A1 22             jmp a00131
002272  3  A9 00                lda #0
002274  3  C5 rr                cmp varg
002276  3  F0 03                beq *+5
002278  3  4C 81 22             jmp a00066
00227B  3  A9 0A                lda #10
00227D  3  A0 06                ldy #6
00227F  3  91 rr                sta (z80_ix),y
002281  3  A9 01        a00066: lda #1
002283  3  C5 rr                cmp varg
002285  3  F0 03                beq *+5
002287  3  4C 90 22             jmp a00096
00228A  3  A9 0B                lda #11
00228C  3  A0 06                ldy #6
00228E  3  91 rr                sta (z80_ix),y
002290  3  20 6B 18     a00096: jsr cangr
002293  3  F0 03                beq :+
002295  3  4C A1 22             jmp a00131
002298  3               :
002298  3  A0 09                ldy #9
00229A  3  B1 rr                lda (z80_ix),y
00229C  3  18                   clc
00229D  3  69 02                adc #2
00229F  3  91 rr                sta (z80_ix),y
0022A1  3  A9 17        a00131: lda #23
0022A3  3  C5 rr                cmp vara
0022A5  3  90 03                bcc *+5
0022A7  3  4C B6 22             jmp a00172
0022AA  3  A9 00                lda #0
0022AC  3  85 rr                sta varh
0022AE  3  A9 01                lda #1
0022B0  3  85 rr                sta vari
0022B2  3  A9 00                lda #0
0022B4  3  85 rr                sta vara
0022B6  3  A9 05        a00172: lda #DEADLY
0022B8  3  85 rr                sta z80_b
0022BA  3  20 E4 18             jsr tded
0022BD  3  C5 rr                cmp z80_b
0022BF  3  F0 03                beq :+
0022C1  3  4C CA 22             jmp a00213
0022C4  3               :
0022C4  3  A9 07                lda #7
0022C6  3  A0 05                ldy #5
0022C8  3  91 rr                sta (z80_ix),y
0022CA  3  A9 03        a00213: lda #3
0022CC  3  85 rr                sta z80_b
0022CE  3  20 22 1E             jsr sktyp
0022D1  3  B0 03                bcs :+
0022D3  3  4C E0 22             jmp a00256
0022D6  3               :
0022D6  3  A9 00                lda #0
0022D8  3  85 rr                sta varh
0022DA  3  A9 07                lda #7
0022DC  3  A0 05                ldy #5
0022DE  3  91 rr                sta (z80_ix),y
0022E0  3  A9 04        a00256: lda #4
0022E2  3  85 rr                sta z80_b
0022E4  3  20 22 1E             jsr sktyp
0022E7  3  B0 03                bcs :+
0022E9  3  4C F2 22             jmp a00291
0022EC  3               :
0022EC  3  A9 07                lda #7
0022EE  3  A0 05                ldy #5
0022F0  3  91 rr                sta (z80_ix),y
0022F2  3  A9 05        a00291: lda #5
0022F4  3  85 rr                sta z80_b
0022F6  3  20 22 1E             jsr sktyp
0022F9  3  B0 03                bcs :+
0022FB  3  4C 04 23             jmp a00326
0022FE  3               :
0022FE  3  A9 07                lda #7
002300  3  A0 05                ldy #5
002302  3  91 rr                sta (z80_ix),y
002304  3  A9 01        a00326: lda #1
002306  3  85 rr                sta z80_b
002308  3  20 22 1E             jsr sktyp
00230B  3  B0 03                bcs :+
00230D  3  4C 14 23             jmp a00356
002310  3               :
002310  3  A9 01                lda #1
002312  3  85 rr                sta nexlev
002314  3  A9 14        a00356: lda #20
002316  3  C5 rr                cmp scno
002318  3  F0 03                beq *+5
00231A  3  4C 33 23             jmp a00415
00231D  3  A9 17                lda #23
00231F  3  C5 rr                cmp vara
002321  3  90 03                bcc *+5
002323  3  4C 33 23             jmp a00415
002326  3  A9 64                lda #100
002328  3  20 9A 0E             jsr delay
00232B  3  A9 00                lda #0
00232D  3  85 rr                sta vara
00232F  3  A9 01                lda #1
002331  3  85 rr                sta nexlev
002333  3  A9 03        a00415: lda #3
002335  3  85 rr                sta z80_b
002337  3  20 22 1E             jsr sktyp
00233A  3  B0 03                bcs :+
00233C  3  4C 46 23             jmp a00450
00233F  3               :
00233F  3  A9 01                lda #1
002341  3  85 rr                sta varh
002343  3  4C 4A 23             jmp a00458
002346  3  A9 00        a00450: lda #0
002348  3  85 rr                sta varh
00234A  3  A9 02        a00458: lda #2
00234C  3  C5 rr                cmp scno
00234E  3  F0 03                beq *+5
002350  3  4C 69 23             jmp a00517
002353  3  A9 5A                lda #90
002355  3  C5 rr                cmp vara
002357  3  90 03                bcc *+5
002359  3  4C 69 23             jmp a00517
00235C  3  A9 64                lda #100
00235E  3  20 9A 0E             jsr delay
002361  3  A9 00                lda #0
002363  3  85 rr                sta vara
002365  3  A9 01                lda #1
002367  3  85 rr                sta nexlev
002369  3  A9 03        a00517: lda #3
00236B  3  C5 rr                cmp scno
00236D  3  F0 03                beq *+5
00236F  3  4C 88 23             jmp a00576
002372  3  A9 24                lda #36
002374  3  C5 rr                cmp vara
002376  3  90 03                bcc *+5
002378  3  4C 88 23             jmp a00576
00237B  3  A9 64                lda #100
00237D  3  20 9A 0E             jsr delay
002380  3  A9 00                lda #0
002382  3  85 rr                sta vara
002384  3  A9 01                lda #1
002386  3  85 rr                sta nexlev
002388  3  A9 04        a00576: lda #4
00238A  3  C5 rr                cmp scno
00238C  3  F0 03                beq *+5
00238E  3  4C A7 23             jmp a00635
002391  3  A9 15                lda #21
002393  3  C5 rr                cmp vara
002395  3  90 03                bcc *+5
002397  3  4C A7 23             jmp a00635
00239A  3  A9 64                lda #100
00239C  3  20 9A 0E             jsr delay
00239F  3  A9 00                lda #0
0023A1  3  85 rr                sta vara
0023A3  3  A9 01                lda #1
0023A5  3  85 rr                sta nexlev
0023A7  3  A9 05        a00635: lda #5
0023A9  3  C5 rr                cmp scno
0023AB  3  F0 03                beq *+5
0023AD  3  4C C6 23             jmp a00694
0023B0  3  A9 76                lda #118
0023B2  3  C5 rr                cmp vara
0023B4  3  90 03                bcc *+5
0023B6  3  4C C6 23             jmp a00694
0023B9  3  A9 64                lda #100
0023BB  3  20 9A 0E             jsr delay
0023BE  3  A9 00                lda #0
0023C0  3  85 rr                sta vara
0023C2  3  A9 01                lda #1
0023C4  3  85 rr                sta nexlev
0023C6  3  A9 06        a00694: lda #6
0023C8  3  C5 rr                cmp scno
0023CA  3  F0 03                beq *+5
0023CC  3  4C E5 23             jmp a00753
0023CF  3  A9 15                lda #21
0023D1  3  C5 rr                cmp vara
0023D3  3  90 03                bcc *+5
0023D5  3  4C E5 23             jmp a00753
0023D8  3  A9 64                lda #100
0023DA  3  20 9A 0E             jsr delay
0023DD  3  A9 00                lda #0
0023DF  3  85 rr                sta vara
0023E1  3  A9 01                lda #1
0023E3  3  85 rr                sta nexlev
0023E5  3  A9 07        a00753: lda #7
0023E7  3  C5 rr                cmp scno
0023E9  3  F0 03                beq *+5
0023EB  3  4C 04 24             jmp a00812
0023EE  3  A9 22                lda #34
0023F0  3  C5 rr                cmp vara
0023F2  3  90 03                bcc *+5
0023F4  3  4C 04 24             jmp a00812
0023F7  3  A9 64                lda #100
0023F9  3  20 9A 0E             jsr delay
0023FC  3  A9 00                lda #0
0023FE  3  85 rr                sta vara
002400  3  A9 01                lda #1
002402  3  85 rr                sta nexlev
002404  3  A9 08        a00812: lda #8
002406  3  C5 rr                cmp scno
002408  3  F0 03                beq *+5
00240A  3  4C 23 24             jmp a00871
00240D  3  A9 28                lda #40
00240F  3  C5 rr                cmp vara
002411  3  90 03                bcc *+5
002413  3  4C 23 24             jmp a00871
002416  3  A9 64                lda #100
002418  3  20 9A 0E             jsr delay
00241B  3  A9 00                lda #0
00241D  3  85 rr                sta vara
00241F  3  A9 01                lda #1
002421  3  85 rr                sta nexlev
002423  3  A9 09        a00871: lda #9
002425  3  C5 rr                cmp scno
002427  3  F0 03                beq *+5
002429  3  4C 42 24             jmp a00930
00242C  3  A9 0D                lda #13
00242E  3  C5 rr                cmp vara
002430  3  90 03                bcc *+5
002432  3  4C 42 24             jmp a00930
002435  3  A9 64                lda #100
002437  3  20 9A 0E             jsr delay
00243A  3  A9 00                lda #0
00243C  3  85 rr                sta vara
00243E  3  A9 01                lda #1
002440  3  85 rr                sta nexlev
002442  3  A9 0A        a00930: lda #10
002444  3  C5 rr                cmp scno
002446  3  F0 03                beq *+5
002448  3  4C 61 24             jmp a00989
00244B  3  A9 16                lda #22
00244D  3  C5 rr                cmp vara
00244F  3  90 03                bcc *+5
002451  3  4C 61 24             jmp a00989
002454  3  A9 64                lda #100
002456  3  20 9A 0E             jsr delay
002459  3  A9 00                lda #0
00245B  3  85 rr                sta vara
00245D  3  A9 01                lda #1
00245F  3  85 rr                sta nexlev
002461  3  A9 0B        a00989: lda #11
002463  3  C5 rr                cmp scno
002465  3  F0 03                beq *+5
002467  3  4C 80 24             jmp a01049
00246A  3  A9 1B                lda #27
00246C  3  C5 rr                cmp vara
00246E  3  90 03                bcc *+5
002470  3  4C 80 24             jmp a01049
002473  3  A9 64                lda #100
002475  3  20 9A 0E             jsr delay
002478  3  A9 00                lda #0
00247A  3  85 rr                sta vara
00247C  3  A9 01                lda #1
00247E  3  85 rr                sta nexlev
002480  3  A9 0C        a01049: lda #12
002482  3  C5 rr                cmp scno
002484  3  F0 03                beq *+5
002486  3  4C 9F 24             jmp a01108
002489  3  A9 25                lda #37
00248B  3  C5 rr                cmp vara
00248D  3  90 03                bcc *+5
00248F  3  4C 9F 24             jmp a01108
002492  3  A9 64                lda #100
002494  3  20 9A 0E             jsr delay
002497  3  A9 00                lda #0
002499  3  85 rr                sta vara
00249B  3  A9 01                lda #1
00249D  3  85 rr                sta nexlev
00249F  3  A9 0D        a01108: lda #13
0024A1  3  C5 rr                cmp scno
0024A3  3  F0 03                beq *+5
0024A5  3  4C BE 24             jmp a01167
0024A8  3  A9 1F                lda #31
0024AA  3  C5 rr                cmp vara
0024AC  3  90 03                bcc *+5
0024AE  3  4C BE 24             jmp a01167
0024B1  3  A9 64                lda #100
0024B3  3  20 9A 0E             jsr delay
0024B6  3  A9 00                lda #0
0024B8  3  85 rr                sta vara
0024BA  3  A9 01                lda #1
0024BC  3  85 rr                sta nexlev
0024BE  3  A9 0E        a01167: lda #14
0024C0  3  C5 rr                cmp scno
0024C2  3  F0 03                beq *+5
0024C4  3  4C F4 24             jmp a01276
0024C7  3  A9 35                lda #53
0024C9  3  C5 rr                cmp vara
0024CB  3  90 03                bcc *+5
0024CD  3  4C DD 24             jmp a01226
0024D0  3  A9 64                lda #100
0024D2  3  20 9A 0E             jsr delay
0024D5  3  A9 00                lda #0
0024D7  3  85 rr                sta vara
0024D9  3  A9 01                lda #1
0024DB  3  85 rr                sta nexlev
0024DD  3  A9 05        a01226: lda #DEADLY
0024DF  3  85 rr                sta z80_b
0024E1  3  20 E4 18             jsr tded
0024E4  3  C5 rr                cmp z80_b
0024E6  3  F0 03                beq :+
0024E8  3  4C F4 24             jmp a01276
0024EB  3               :
0024EB  3  A0 09                ldy #9
0024ED  3  B1 rr                lda (z80_ix),y
0024EF  3  18                   clc
0024F0  3  69 02                adc #2
0024F2  3  91 rr                sta (z80_ix),y
0024F4  3  A9 0F        a01276: lda #15
0024F6  3  C5 rr                cmp scno
0024F8  3  F0 03                beq *+5
0024FA  3  4C 27 25             jmp a01375
0024FD  3  A9 11                lda #17
0024FF  3  C5 rr                cmp vara
002501  3  90 03                bcc *+5
002503  3  4C 13 25             jmp a01335
002506  3  A9 64                lda #100
002508  3  20 9A 0E             jsr delay
00250B  3  A9 00                lda #0
00250D  3  85 rr                sta vara
00250F  3  A9 01                lda #1
002511  3  85 rr                sta nexlev
002513  3  A9 05        a01335: lda #DEADLY
002515  3  85 rr                sta z80_b
002517  3  20 E4 18             jsr tded
00251A  3  C5 rr                cmp z80_b
00251C  3  F0 03                beq :+
00251E  3  4C 27 25             jmp a01375
002521  3               :
002521  3  A9 07                lda #7
002523  3  A0 05                ldy #5
002525  3  91 rr                sta (z80_ix),y
002527  3  A9 10        a01375: lda #16
002529  3  C5 rr                cmp scno
00252B  3  F0 03                beq *+5
00252D  3  4C 5A 25             jmp a01475
002530  3  A9 18                lda #24
002532  3  C5 rr                cmp vara
002534  3  90 03                bcc *+5
002536  3  4C 46 25             jmp a01435
002539  3  A9 64                lda #100
00253B  3  20 9A 0E             jsr delay
00253E  3  A9 00                lda #0
002540  3  85 rr                sta vara
002542  3  A9 01                lda #1
002544  3  85 rr                sta nexlev
002546  3  A9 05        a01435: lda #DEADLY
002548  3  85 rr                sta z80_b
00254A  3  20 E4 18             jsr tded
00254D  3  C5 rr                cmp z80_b
00254F  3  F0 03                beq :+
002551  3  4C 5A 25             jmp a01475
002554  3               :
002554  3  A9 07                lda #7
002556  3  A0 05                ldy #5
002558  3  91 rr                sta (z80_ix),y
00255A  3  A9 11        a01475: lda #17
00255C  3  C5 rr                cmp scno
00255E  3  F0 03                beq *+5
002560  3  4C 79 25             jmp a01534
002563  3  A9 13                lda #19
002565  3  C5 rr                cmp vara
002567  3  90 03                bcc *+5
002569  3  4C 79 25             jmp a01534
00256C  3  A9 64                lda #100
00256E  3  20 9A 0E             jsr delay
002571  3  A9 00                lda #0
002573  3  85 rr                sta vara
002575  3  A9 01                lda #1
002577  3  85 rr                sta nexlev
002579  3  A9 12        a01534: lda #18
00257B  3  C5 rr                cmp scno
00257D  3  F0 03                beq *+5
00257F  3  4C 98 25             jmp a01594
002582  3  A9 26                lda #38
002584  3  C5 rr                cmp vara
002586  3  90 03                bcc *+5
002588  3  4C 98 25             jmp a01594
00258B  3  A9 64                lda #100
00258D  3  20 9A 0E             jsr delay
002590  3  A9 00                lda #0
002592  3  85 rr                sta vara
002594  3  A9 01                lda #1
002596  3  85 rr                sta nexlev
002598  3  A9 13        a01594: lda #19
00259A  3  C5 rr                cmp scno
00259C  3  F0 03                beq *+5
00259E  3  4C B7 25             jmp a01653
0025A1  3  A9 09                lda #9
0025A3  3  C5 rr                cmp vara
0025A5  3  90 03                bcc *+5
0025A7  3  4C B7 25             jmp a01653
0025AA  3  A9 64                lda #100
0025AC  3  20 9A 0E             jsr delay
0025AF  3  A9 00                lda #0
0025B1  3  85 rr                sta vara
0025B3  3  A9 01                lda #1
0025B5  3  85 rr                sta nexlev
0025B7  3  A9 06        a01653: lda #6
0025B9  3  85 rr                sta z80_b
0025BB  3  20 22 1E             jsr sktyp
0025BE  3  B0 03                bcs :+
0025C0  3  4C D5 25             jmp a01709
0025C3  3               :
0025C3  3  A9 00                lda #0
0025C5  3  C5 rr                cmp varb
0025C7  3  F0 03                beq *+5
0025C9  3  4C D5 25             jmp a01709
0025CC  3  A9 07                lda #7
0025CE  3  A0 05                ldy #5
0025D0  3  91 rr                sta (z80_ix),y
0025D2  3  20 E1 1D             jsr animsp
0025D5  3  A9 02        a01709: lda #2
0025D7  3  85 rr                sta z80_b
0025D9  3  20 22 1E             jsr sktyp
0025DC  3  B0 03                bcs :+
0025DE  3  4C F3 25             jmp a01766
0025E1  3               :
0025E1  3  A9 00                lda #0
0025E3  3  C5 rr                cmp varb
0025E5  3  F0 03                beq *+5
0025E7  3  4C F3 25             jmp a01766
0025EA  3  A9 07                lda #7
0025EC  3  A0 05                ldy #5
0025EE  3  91 rr                sta (z80_ix),y
0025F0  3  20 E1 1D             jsr animsp
0025F3  3  A9 01        a01766: lda #1
0025F5  3  C5 rr                cmp varb
0025F7  3  F0 03                beq *+5
0025F9  3  4C 10 26             jmp a01821
0025FC  3  20 E1 1D             jsr animsp
0025FF  3  A9 02                lda #2
002601  3  A0 07                ldy #7
002603  3  D1 rr                cmp (z80_ix),y
002605  3  F0 03                beq *+5
002607  3  4C 10 26             jmp a01821
00260A  3  A9 0F                lda #15
00260C  3  0A                   asl a
00260D  3  8D D2 0E             sta sndtyp
002610  3  A9 00        a01821: lda #0
002612  3  C5 rr                cmp varb
002614  3  F0 03                beq *+5
002616  3  4C 37 26             jmp a01898
002619  3  A9 00                lda #0
00261B  3  C5 rr                cmp varg
00261D  3  F0 03                beq *+5
00261F  3  4C 28 26             jmp a01868
002622  3  A9 00                lda #0
002624  3  A0 06                ldy #6
002626  3  91 rr                sta (z80_ix),y
002628  3  A9 01        a01868: lda #1
00262A  3  C5 rr                cmp varg
00262C  3  F0 03                beq *+5
00262E  3  4C 37 26             jmp a01898
002631  3  A9 01                lda #1
002633  3  A0 06                ldy #6
002635  3  91 rr                sta (z80_ix),y
002637  3  A9 01        a01898: lda #1
002639  3  C5 rr                cmp varb
00263B  3  F0 03                beq *+5
00263D  3  4C 58 26             jmp a01963
002640  3  A5 rr                lda vare
002642  3  38                   sec
002643  3  E9 01                sbc #1
002645  3  85 rr                sta vare
002647  3  A9 01                lda #1
002649  3  C5 rr                cmp vare
00264B  3  B0 03                bcs *+5
00264D  3  4C 58 26             jmp a01963
002650  3  A9 01                lda #1
002652  3  85 rr                sta varf
002654  3  A9 00                lda #0
002656  3  85 rr                sta varb
002658  3  A9 05        a01963: lda #5
00265A  3  85 rr                sta z80_b
00265C  3  20 22 1E             jsr sktyp
00265F  3  B0 03                bcs :+
002661  3  4C 75 26             jmp a02020
002664  3               :
002664  3  20 6B 18             jsr cangr
002667  3  F0 03                beq :+
002669  3  4C 75 26             jmp a02020
00266C  3               :
00266C  3  A0 09                ldy #9
00266E  3  B1 rr                lda (z80_ix),y
002670  3  18                   clc
002671  3  69 02                adc #2
002673  3  91 rr                sta (z80_ix),y
002675  3  A9 04        a02020: lda #4
002677  3  85 rr                sta z80_b
002679  3  20 22 1E             jsr sktyp
00267C  3  B0 03                bcs :+
00267E  3  4C 92 26             jmp a02077
002681  3               :
002681  3  20 59 18             jsr cangl
002684  3  F0 03                beq :+
002686  3  4C 92 26             jmp a02077
002689  3               :
002689  3  A0 09                ldy #9
00268B  3  B1 rr                lda (z80_ix),y
00268D  3  38                   sec
00268E  3  E9 02                sbc #2
002690  3  91 rr                sta (z80_ix),y
002692  3  A5 rr        a02077: lda joyval
002694  3  29 10                and #16
002696  3  F0 03                beq :+
002698  3  4C C5 26             jmp a02177
00269B  3               :
00269B  3  20 D5 19             jsr jump
00269E  3  A9 01                lda #1
0026A0  3  C5 rr                cmp varb
0026A2  3  F0 03                beq *+5
0026A4  3  4C C5 26             jmp a02177
0026A7  3  A9 00                lda #0
0026A9  3  C5 rr                cmp varg
0026AB  3  F0 03                beq *+5
0026AD  3  4C B6 26             jmp a02146
0026B0  3  A9 0A                lda #10
0026B2  3  A0 06                ldy #6
0026B4  3  91 rr                sta (z80_ix),y
0026B6  3  A9 01        a02146: lda #1
0026B8  3  C5 rr                cmp varg
0026BA  3  F0 03                beq *+5
0026BC  3  4C C5 26             jmp a02177
0026BF  3  A9 0B                lda #11
0026C1  3  A0 06                ldy #6
0026C3  3  91 rr                sta (z80_ix),y
0026C5  3  20 24 18     a02177: jsr cangd
0026C8  3  F0 03                beq :+
0026CA  3  4C 13 27             jmp a02322
0026CD  3               :
0026CD  3  20 A0 17             jsr laddd
0026D0  3  F0 03                beq :+
0026D2  3  4C D8 26             jmp a02208
0026D5  3               :
0026D5  3  4C 13 27             jmp a02322
0026D8  3  A9 05        a02208: lda #DEADLY
0026DA  3  85 rr                sta z80_b
0026DC  3  20 E4 18             jsr tded
0026DF  3  C5 rr                cmp z80_b
0026E1  3  F0 03                beq :+
0026E3  3  4C E9 26             jmp a02240
0026E6  3               :
0026E6  3  4C 13 27             jmp a02322
0026E9  3  20 C8 1F     a02240: jsr ifall
0026EC  3  A9 01                lda #1
0026EE  3  C5 rr                cmp varb
0026F0  3  F0 03                beq *+5
0026F2  3  4C 13 27             jmp a02322
0026F5  3  A9 00                lda #0
0026F7  3  C5 rr                cmp varg
0026F9  3  F0 03                beq *+5
0026FB  3  4C 04 27             jmp a02292
0026FE  3  A9 0A                lda #10
002700  3  A0 06                ldy #6
002702  3  91 rr                sta (z80_ix),y
002704  3  A9 01        a02292: lda #1
002706  3  C5 rr                cmp varg
002708  3  F0 03                beq *+5
00270A  3  4C 13 27             jmp a02322
00270D  3  A9 0B                lda #11
00270F  3  A0 06                ldy #6
002711  3  91 rr                sta (z80_ix),y
002713  3  A5 rr        a02322: lda joyval
002715  3  29 08                and #8
002717  3  F0 03                beq :+
002719  3  4C 51 27             jmp a02445
00271C  3               :
00271C  3  20 B6 17             jsr laddu
00271F  3  F0 03                beq :+
002721  3  4C 51 27             jmp a02445
002724  3               :
002724  3  A9 00                lda #0
002726  3  C5 rr                cmp varb
002728  3  F0 03                beq *+5
00272A  3  4C 36 27             jmp a02388
00272D  3  A9 02                lda #2
00272F  3  A0 06                ldy #6
002731  3  91 rr                sta (z80_ix),y
002733  3  20 E1 1D             jsr animsp
002736  3  A9 01        a02388: lda #1
002738  3  C5 rr                cmp varb
00273A  3  F0 03                beq *+5
00273C  3  4C 48 27             jmp a02423
00273F  3  A9 0C                lda #12
002741  3  A0 06                ldy #6
002743  3  91 rr                sta (z80_ix),y
002745  3  20 E1 1D             jsr animsp
002748  3  A0 08        a02423: ldy #8
00274A  3  B1 rr                lda (z80_ix),y
00274C  3  38                   sec
00274D  3  E9 02                sbc #2
00274F  3  91 rr                sta (z80_ix),y
002751  3  A5 rr        a02445: lda joyval
002753  3  29 04                and #4
002755  3  F0 03                beq :+
002757  3  4C 8F 27             jmp a02568
00275A  3               :
00275A  3  20 A0 17             jsr laddd
00275D  3  F0 03                beq :+
00275F  3  4C 8F 27             jmp a02568
002762  3               :
002762  3  A9 00                lda #0
002764  3  C5 rr                cmp varb
002766  3  F0 03                beq *+5
002768  3  4C 74 27             jmp a02511
00276B  3  A9 02                lda #2
00276D  3  A0 06                ldy #6
00276F  3  91 rr                sta (z80_ix),y
002771  3  20 E1 1D             jsr animsp
002774  3  A9 01        a02511: lda #1
002776  3  C5 rr                cmp varb
002778  3  F0 03                beq *+5
00277A  3  4C 86 27             jmp a02546
00277D  3  A9 0C                lda #12
00277F  3  A0 06                ldy #6
002781  3  91 rr                sta (z80_ix),y
002783  3  20 E1 1D             jsr animsp
002786  3  A0 08        a02546: ldy #8
002788  3  B1 rr                lda (z80_ix),y
00278A  3  18                   clc
00278B  3  69 02                adc #2
00278D  3  91 rr                sta (z80_ix),y
00278F  3  A5 rr        a02568: lda joyval
002791  3  29 01                and #1
002793  3  F0 03                beq :+
002795  3  4C 89 28             jmp a03092
002798  3               :
002798  3  A9 EF                lda #239
00279A  3  A0 09                ldy #9
00279C  3  D1 rr                cmp (z80_ix),y
00279E  3  90 03                bcc *+5
0027A0  3  4C AF 27             jmp a02630
0027A3  3  20 10 1F             jsr scrr
0027A6  3  A9 EF                lda #239
0027A8  3  A0 09                ldy #9
0027AA  3  91 rr                sta (z80_ix),y
0027AC  3  4C 89 28             jmp a03092
0027AF  3  20 6B 18     a02630: jsr cangr
0027B2  3  F0 03                beq :+
0027B4  3  4C 89 28             jmp a03092
0027B7  3               :
0027B7  3  A9 00                lda #0
0027B9  3  C5 rr                cmp varb
0027BB  3  F0 03                beq *+5
0027BD  3  4C C9 27             jmp a02679
0027C0  3  A9 00                lda #0
0027C2  3  A0 06                ldy #6
0027C4  3  91 rr                sta (z80_ix),y
0027C6  3  20 E1 1D             jsr animsp
0027C9  3  A9 01        a02679: lda #1
0027CB  3  C5 rr                cmp varb
0027CD  3  F0 03                beq *+5
0027CF  3  4C DB 27             jmp a02714
0027D2  3  A9 0A                lda #10
0027D4  3  A0 06                ldy #6
0027D6  3  91 rr                sta (z80_ix),y
0027D8  3  20 E1 1D             jsr animsp
0027DB  3  A0 09        a02714: ldy #9
0027DD  3  B1 rr                lda (z80_ix),y
0027DF  3  18                   clc
0027E0  3  69 02                adc #2
0027E2  3  91 rr                sta (z80_ix),y
0027E4  3  A9 00                lda #0
0027E6  3  85 rr                sta varg
0027E8  3  A9 06                lda #CUSTOM
0027EA  3  85 rr                sta z80_b
0027EC  3  20 E4 18             jsr tded
0027EF  3  C5 rr                cmp z80_b
0027F1  3  F0 03                beq :+
0027F3  3  4C 89 28             jmp a03092
0027F6  3               :
0027F6  3  A0 08                ldy #8
0027F8  3  B1 rr                lda (z80_ix),y
0027FA  3  85 rr                sta varc
0027FC  3  A0 09                ldy #9
0027FE  3  B1 rr                lda (z80_ix),y
002800  3  85 rr                sta vard
002802  3  A5 rr                lda varc
002804  3  4A                   lsr a
002805  3  4A                   lsr a
002806  3  4A                   lsr a
002807  3  85 rr                sta varc
002809  3  A5 rr                lda vard
00280B  3  4A                   lsr a
00280C  3  4A                   lsr a
00280D  3  4A                   lsr a
00280E  3  85 rr                sta vard
002810  3  A9 02                lda #2
002812  3  85 rr                sta z80_c
002814  3  A5 rr                lda varc
002816  3  18                   clc
002817  3  65 rr                adc z80_c
002819  3  85 rr                sta varc
00281B  3  A9 02                lda #2
00281D  3  85 rr                sta z80_c
00281F  3  A5 rr                lda vard
002821  3  18                   clc
002822  3  65 rr                adc z80_c
002824  3  85 rr                sta vard
002826  3  A5 rr                lda varc
002828  3  85 rr                sta chary
00282A  3  A5 rr                lda vard
00282C  3  85 rr                sta charx
00282E  3  A5 rr                lda charx
002830  3  85 rr                sta dispx
002832  3  A5 rr                lda chary
002834  3  85 rr                sta dispy
002836  3  A9 04                lda #4
002838  3  20 A9 16             jsr pattr
00283B  3  A9 02                lda #2
00283D  3  85 rr                sta z80_c
00283F  3  A5 rr                lda varc
002841  3  38                   sec
002842  3  E5 rr                sbc z80_c
002844  3  85 rr                sta varc
002846  3  A9 00                lda #0
002848  3  85 rr                sta z80_c
00284A  3  A5 rr                lda vard
00284C  3  18                   clc
00284D  3  65 rr                adc z80_c
00284F  3  85 rr                sta vard
002851  3  A5 rr                lda varc
002853  3  85 rr                sta chary
002855  3  A5 rr                lda vard
002857  3  85 rr                sta charx
002859  3  A5 rr                lda charx
00285B  3  85 rr                sta dispx
00285D  3  A5 rr                lda chary
00285F  3  85 rr                sta dispy
002861  3  A9 06                lda #6
002863  3  20 A9 16             jsr pattr
002866  3  A9 19                lda #25
002868  3  0A                   asl a
002869  3  8D D2 0E             sta sndtyp
00286C  3  A9 19                lda #<25
00286E  3  85 rr                sta z80_l
002870  3  A9 00                lda #>25
002872  3  85 rr                sta z80_h
002874  3  20 76 15             jsr addsc
002877  3  A9 00                lda #0
002879  3  85 rr                sta chary
00287B  3  A9 19                lda #25
00287D  3  85 rr                sta charx
00287F  3  20 2A 15             jsr dscor
002882  3  A5 rr                lda vara
002884  3  18                   clc
002885  3  69 01                adc #1
002887  3  85 rr                sta vara
002889  3  A5 rr        a03092: lda joyval
00288B  3  29 02                and #2
00288D  3  F0 03                beq :+
00288F  3  4C 83 29             jmp a03615
002892  3               :
002892  3  A9 01                lda #1
002894  3  A0 09                ldy #9
002896  3  D1 rr                cmp (z80_ix),y
002898  3  B0 03                bcs *+5
00289A  3  4C A9 28             jmp a03153
00289D  3  20 F5 1E             jsr scrl
0028A0  3  A9 01                lda #1
0028A2  3  A0 09                ldy #9
0028A4  3  91 rr                sta (z80_ix),y
0028A6  3  4C 83 29             jmp a03615
0028A9  3  20 59 18     a03153: jsr cangl
0028AC  3  F0 03                beq :+
0028AE  3  4C 83 29             jmp a03615
0028B1  3               :
0028B1  3  A9 00                lda #0
0028B3  3  C5 rr                cmp varb
0028B5  3  F0 03                beq *+5
0028B7  3  4C C3 28             jmp a03202
0028BA  3  A9 01                lda #1
0028BC  3  A0 06                ldy #6
0028BE  3  91 rr                sta (z80_ix),y
0028C0  3  20 E1 1D             jsr animsp
0028C3  3  A9 01        a03202: lda #1
0028C5  3  C5 rr                cmp varb
0028C7  3  F0 03                beq *+5
0028C9  3  4C D5 28             jmp a03237
0028CC  3  A9 0B                lda #11
0028CE  3  A0 06                ldy #6
0028D0  3  91 rr                sta (z80_ix),y
0028D2  3  20 E1 1D             jsr animsp
0028D5  3  A0 09        a03237: ldy #9
0028D7  3  B1 rr                lda (z80_ix),y
0028D9  3  38                   sec
0028DA  3  E9 02                sbc #2
0028DC  3  91 rr                sta (z80_ix),y
0028DE  3  A9 01                lda #1
0028E0  3  85 rr                sta varg
0028E2  3  A9 06                lda #CUSTOM
0028E4  3  85 rr                sta z80_b
0028E6  3  20 E4 18             jsr tded
0028E9  3  C5 rr                cmp z80_b
0028EB  3  F0 03                beq :+
0028ED  3  4C 83 29             jmp a03615
0028F0  3               :
0028F0  3  A0 08                ldy #8
0028F2  3  B1 rr                lda (z80_ix),y
0028F4  3  85 rr                sta varc
0028F6  3  A0 09                ldy #9
0028F8  3  B1 rr                lda (z80_ix),y
0028FA  3  85 rr                sta vard
0028FC  3  A5 rr                lda varc
0028FE  3  4A                   lsr a
0028FF  3  4A                   lsr a
002900  3  4A                   lsr a
002901  3  85 rr                sta varc
002903  3  A5 rr                lda vard
002905  3  4A                   lsr a
002906  3  4A                   lsr a
002907  3  4A                   lsr a
002908  3  85 rr                sta vard
00290A  3  A9 02                lda #2
00290C  3  85 rr                sta z80_c
00290E  3  A5 rr                lda varc
002910  3  18                   clc
002911  3  65 rr                adc z80_c
002913  3  85 rr                sta varc
002915  3  A9 00                lda #0
002917  3  85 rr                sta z80_c
002919  3  A5 rr                lda vard
00291B  3  18                   clc
00291C  3  65 rr                adc z80_c
00291E  3  85 rr                sta vard
002920  3  A5 rr                lda varc
002922  3  85 rr                sta chary
002924  3  A5 rr                lda vard
002926  3  85 rr                sta charx
002928  3  A5 rr                lda charx
00292A  3  85 rr                sta dispx
00292C  3  A5 rr                lda chary
00292E  3  85 rr                sta dispy
002930  3  A9 04                lda #4
002932  3  20 A9 16             jsr pattr
002935  3  A9 02                lda #2
002937  3  85 rr                sta z80_c
002939  3  A5 rr                lda varc
00293B  3  38                   sec
00293C  3  E5 rr                sbc z80_c
00293E  3  85 rr                sta varc
002940  3  A9 00                lda #0
002942  3  85 rr                sta z80_c
002944  3  A5 rr                lda vard
002946  3  18                   clc
002947  3  65 rr                adc z80_c
002949  3  85 rr                sta vard
00294B  3  A5 rr                lda varc
00294D  3  85 rr                sta chary
00294F  3  A5 rr                lda vard
002951  3  85 rr                sta charx
002953  3  A5 rr                lda charx
002955  3  85 rr                sta dispx
002957  3  A5 rr                lda chary
002959  3  85 rr                sta dispy
00295B  3  A9 06                lda #6
00295D  3  20 A9 16             jsr pattr
002960  3  A9 19                lda #25
002962  3  0A                   asl a
002963  3  8D D2 0E             sta sndtyp
002966  3  A9 19                lda #<25
002968  3  85 rr                sta z80_l
00296A  3  A9 00                lda #>25
00296C  3  85 rr                sta z80_h
00296E  3  20 76 15             jsr addsc
002971  3  A9 00                lda #0
002973  3  85 rr                sta chary
002975  3  A9 19                lda #25
002977  3  85 rr                sta charx
002979  3  20 2A 15             jsr dscor
00297C  3  A5 rr                lda vara
00297E  3  18                   clc
00297F  3  69 01                adc #1
002981  3  85 rr                sta vara
002983  3  4C 3E 1F     a03615: jmp grav
002986  3               evnt01:
002986  3  A9 00                lda #0
002988  3  C5 rr                cmp scno
00298A  3  F0 03                beq *+5
00298C  3  4C A5 29             jmp b00061
00298F  3  A9 04                lda #4
002991  3  85 rr                sta z80_b
002993  3  20 22 1E             jsr sktyp
002996  3  B0 03                bcs :+
002998  3  4C A5 29             jmp b00061
00299B  3               :
00299B  3  A9 2D                lda #45
00299D  3  0A                   asl a
00299E  3  8D D2 0E             sta sndtyp
0029A1  3  A9 01                lda #1
0029A3  3  85 rr                sta nexlev
0029A5  3  A9 01        b00061: lda #1
0029A7  3  C5 rr                cmp scno
0029A9  3  F0 03                beq *+5
0029AB  3  4C EE 29             jmp b00217
0029AE  3  A0 0B                ldy #11
0029B0  3  B1 rr                lda (z80_ix),y
0029B2  3  18                   clc
0029B3  3  69 01                adc #1
0029B5  3  A0 0B                ldy #11
0029B7  3  91 rr                sta (z80_ix),y
0029B9  3  A9 64                lda #100
0029BB  3  A0 0B                ldy #11
0029BD  3  D1 rr                cmp (z80_ix),y
0029BF  3  90 03                bcc *+5
0029C1  3  4C DF 29             jmp b00185
0029C4  3  A0 08                ldy #8
0029C6  3  B1 rr                lda (z80_ix),y
0029C8  3  38                   sec
0029C9  3  E9 02                sbc #2
0029CB  3  91 rr                sta (z80_ix),y
0029CD  3  A9 0A                lda #10
0029CF  3  0A                   asl a
0029D0  3  8D D2 0E             sta sndtyp
0029D3  3  A9 14                lda #20
0029D5  3  0A                   asl a
0029D6  3  8D D2 0E             sta sndtyp
0029D9  3  A9 1E                lda #30
0029DB  3  0A                   asl a
0029DC  3  8D D2 0E             sta sndtyp
0029DF  3  A9 AA        b00185: lda #170
0029E1  3  A0 0B                ldy #11
0029E3  3  D1 rr                cmp (z80_ix),y
0029E5  3  90 03                bcc *+5
0029E7  3  4C EE 29             jmp b00217
0029EA  3  A9 01                lda #1
0029EC  3  85 rr                sta nexlev
0029EE  3  A9 15        b00217: lda #21
0029F0  3  C5 rr                cmp scno
0029F2  3  F0 03                beq *+5
0029F4  3  4C 14 2A             jmp b00295
0029F7  3  20 D5 19             jsr jump
0029FA  3  A0 0B                ldy #11
0029FC  3  B1 rr                lda (z80_ix),y
0029FE  3  18                   clc
0029FF  3  69 01                adc #1
002A01  3  A0 0B                ldy #11
002A03  3  91 rr                sta (z80_ix),y
002A05  3  A9 AF                lda #175
002A07  3  A0 0B                ldy #11
002A09  3  D1 rr                cmp (z80_ix),y
002A0B  3  90 03                bcc *+5
002A0D  3  4C 14 2A             jmp b00295
002A10  3  A9 01                lda #1
002A12  3  85 rr                sta nexlev
002A14  3  20 E1 1D     b00295: jsr animsp
002A17  3  A9 00                lda #0
002A19  3  85 rr                sta z80_b
002A1B  3  20 22 1E             jsr sktyp
002A1E  3  B0 03                bcs :+
002A20  3  4C 57 2A             jmp b00429
002A23  3               :
002A23  3  A9 64                lda #100
002A25  3  0A                   asl a
002A26  3  8D D2 0E             sta sndtyp
002A29  3  A9 46                lda #70
002A2B  3  0A                   asl a
002A2C  3  8D D2 0E             sta sndtyp
002A2F  3  A9 01                lda #1
002A31  3  85 rr                sta varb
002A33  3  A9 AA                lda #170
002A35  3  85 rr                sta vare
002A37  3  A9 00                lda #0
002A39  3  85 rr                sta varf
002A3B  3  A9 FF                lda #255
002A3D  3  A0 05                ldy #5
002A3F  3  91 rr                sta (z80_ix),y
002A41  3  A9 64                lda #<100
002A43  3  85 rr                sta z80_l
002A45  3  A9 00                lda #>100
002A47  3  85 rr                sta z80_h
002A49  3  20 76 15             jsr addsc
002A4C  3  A9 00                lda #0
002A4E  3  85 rr                sta chary
002A50  3  A9 19                lda #25
002A52  3  85 rr                sta charx
002A54  3  20 2A 15             jsr dscor
002A57  3  4C 3E 1F     b00429: jmp grav
002A5A  3               evnt02:
002A5A  3  A9 0E                lda #14
002A5C  3  C5 rr                cmp scno
002A5E  3  F0 03                beq *+5
002A60  3  4C 77 2A             jmp c00059
002A63  3  A9 05                lda #DEADLY
002A65  3  85 rr                sta z80_b
002A67  3  20 E4 18             jsr tded
002A6A  3  C5 rr                cmp z80_b
002A6C  3  F0 03                beq :+
002A6E  3  4C 77 2A             jmp c00059
002A71  3               :
002A71  3  A9 08                lda #8
002A73  3  A0 05                ldy #5
002A75  3  91 rr                sta (z80_ix),y
002A77  3  A9 0F        c00059: lda #15
002A79  3  C5 rr                cmp scno
002A7B  3  F0 03                beq *+5
002A7D  3  4C 94 2A             jmp c00117
002A80  3  A9 05                lda #DEADLY
002A82  3  85 rr                sta z80_b
002A84  3  20 E4 18             jsr tded
002A87  3  C5 rr                cmp z80_b
002A89  3  F0 03                beq :+
002A8B  3  4C 94 2A             jmp c00117
002A8E  3               :
002A8E  3  A9 08                lda #8
002A90  3  A0 05                ldy #5
002A92  3  91 rr                sta (z80_ix),y
002A94  3  A9 10        c00117: lda #16
002A96  3  C5 rr                cmp scno
002A98  3  F0 03                beq *+5
002A9A  3  4C B1 2A             jmp c00174
002A9D  3  A9 05                lda #DEADLY
002A9F  3  85 rr                sta z80_b
002AA1  3  20 E4 18             jsr tded
002AA4  3  C5 rr                cmp z80_b
002AA6  3  F0 03                beq :+
002AA8  3  4C B1 2A             jmp c00174
002AAB  3               :
002AAB  3  A9 08                lda #8
002AAD  3  A0 05                ldy #5
002AAF  3  91 rr                sta (z80_ix),y
002AB1  3  A9 14        c00174: lda #20
002AB3  3  C5 rr                cmp scno
002AB5  3  F0 03                beq *+5
002AB7  3  4C C5 2A             jmp c00209
002ABA  3  20 6B 18             jsr cangr
002ABD  3  F0 03                beq :+
002ABF  3  4C C5 2A             jmp c00209
002AC2  3               :
002AC2  3  20 D5 19             jsr jump
002AC5  3  A9 15        c00209: lda #21
002AC7  3  C5 rr                cmp scno
002AC9  3  F0 03                beq *+5
002ACB  3  4C E0 2A             jmp c00261
002ACE  3  A9 06                lda #6
002AD0  3  85 rr                sta z80_b
002AD2  3  20 22 1E             jsr sktyp
002AD5  3  B0 03                bcs :+
002AD7  3  4C E0 2A             jmp c00261
002ADA  3               :
002ADA  3  A9 08                lda #8
002ADC  3  A0 05                ldy #5
002ADE  3  91 rr                sta (z80_ix),y
002AE0  3  20 E1 1D     c00261: jsr animsp
002AE3  3  20 24 18             jsr cangd
002AE6  3  F0 03                beq :+
002AE8  3  4C EE 2A             jmp c00284
002AEB  3               :
002AEB  3  20 C8 1F             jsr ifall
002AEE  3  A9 03        c00284: lda #3
002AF0  3  85 rr                sta z80_b
002AF2  3  20 22 1E             jsr sktyp
002AF5  3  B0 03                bcs :+
002AF7  3  4C 00 2B             jmp c00319
002AFA  3               :
002AFA  3  A9 08                lda #8
002AFC  3  A0 05                ldy #5
002AFE  3  91 rr                sta (z80_ix),y
002B00  3  A9 00        c00319: lda #0
002B02  3  A0 0A                ldy #10
002B04  3  D1 rr                cmp (z80_ix),y
002B06  3  F0 03                beq *+5
002B08  3  4C 47 2B             jmp c00461
002B0B  3  20 B6 17             jsr laddu
002B0E  3  F0 03                beq :+
002B10  3  4C 1F 2B             jmp c00381
002B13  3               :
002B13  3  A0 08                ldy #8
002B15  3  B1 rr                lda (z80_ix),y
002B17  3  38                   sec
002B18  3  E9 02                sbc #2
002B1A  3  91 rr                sta (z80_ix),y
002B1C  3  4C 47 2B             jmp c00461
002B1F  3  A9 02        c00381: lda #2
002B21  3  85 rr                sta z80_d
002B23  3  20 16 1A             jsr random
002B26  3  85 rr                sta z80_h
002B28  3  20 EE 12             jsr imul
002B2B  3  A5 rr                lda z80_h
002B2D  3  85 rr                sta varrnd
002B2F  3  A9 00                lda #0
002B31  3  C5 rr                cmp varrnd
002B33  3  F0 03                beq *+5
002B35  3  4C 41 2B             jmp c00448
002B38  3  A9 02                lda #2
002B3A  3  A0 0A                ldy #10
002B3C  3  91 rr                sta (z80_ix),y
002B3E  3  4C 47 2B             jmp c00461
002B41  3  A9 03        c00448: lda #3
002B43  3  A0 0A                ldy #10
002B45  3  91 rr                sta (z80_ix),y
002B47  3  A9 01        c00461: lda #1
002B49  3  A0 0A                ldy #10
002B4B  3  D1 rr                cmp (z80_ix),y
002B4D  3  F0 03                beq *+5
002B4F  3  4C 8E 2B             jmp c00604
002B52  3  20 A0 17             jsr laddd
002B55  3  F0 03                beq :+
002B57  3  4C 66 2B             jmp c00524
002B5A  3               :
002B5A  3  A0 08                ldy #8
002B5C  3  B1 rr                lda (z80_ix),y
002B5E  3  18                   clc
002B5F  3  69 02                adc #2
002B61  3  91 rr                sta (z80_ix),y
002B63  3  4C 8E 2B             jmp c00604
002B66  3  A9 02        c00524: lda #2
002B68  3  85 rr                sta z80_d
002B6A  3  20 16 1A             jsr random
002B6D  3  85 rr                sta z80_h
002B6F  3  20 EE 12             jsr imul
002B72  3  A5 rr                lda z80_h
002B74  3  85 rr                sta varrnd
002B76  3  A9 00                lda #0
002B78  3  C5 rr                cmp varrnd
002B7A  3  F0 03                beq *+5
002B7C  3  4C 88 2B             jmp c00590
002B7F  3  A9 02                lda #2
002B81  3  A0 0A                ldy #10
002B83  3  91 rr                sta (z80_ix),y
002B85  3  4C 8E 2B             jmp c00604
002B88  3  A9 03        c00590: lda #3
002B8A  3  A0 0A                ldy #10
002B8C  3  91 rr                sta (z80_ix),y
002B8E  3  A9 02        c00604: lda #2
002B90  3  A0 0A                ldy #10
002B92  3  D1 rr                cmp (z80_ix),y
002B94  3  F0 03                beq *+5
002B96  3  4C EB 2B             jmp c00787
002B99  3  20 59 18             jsr cangl
002B9C  3  F0 03                beq :+
002B9E  3  4C AD 2B             jmp c00666
002BA1  3               :
002BA1  3  A0 09                ldy #9
002BA3  3  B1 rr                lda (z80_ix),y
002BA5  3  38                   sec
002BA6  3  E9 02                sbc #2
002BA8  3  91 rr                sta (z80_ix),y
002BAA  3  4C B3 2B             jmp c00680
002BAD  3  A9 03        c00666: lda #3
002BAF  3  A0 0A                ldy #10
002BB1  3  91 rr                sta (z80_ix),y
002BB3  3  A9 04        c00680: lda #4
002BB5  3  85 rr                sta z80_d
002BB7  3  20 16 1A             jsr random
002BBA  3  85 rr                sta z80_h
002BBC  3  20 EE 12             jsr imul
002BBF  3  A5 rr                lda z80_h
002BC1  3  85 rr                sta varrnd
002BC3  3  A9 00                lda #0
002BC5  3  C5 rr                cmp varrnd
002BC7  3  F0 03                beq *+5
002BC9  3  4C EB 2B             jmp c00787
002BCC  3  20 B6 17             jsr laddu
002BCF  3  F0 03                beq :+
002BD1  3  4C DD 2B             jmp c00760
002BD4  3               :
002BD4  3  A9 00                lda #0
002BD6  3  A0 0A                ldy #10
002BD8  3  91 rr                sta (z80_ix),y
002BDA  3  4C EB 2B             jmp c00787
002BDD  3  20 A0 17     c00760: jsr laddd
002BE0  3  F0 03                beq :+
002BE2  3  4C EB 2B             jmp c00787
002BE5  3               :
002BE5  3  A9 01                lda #1
002BE7  3  A0 0A                ldy #10
002BE9  3  91 rr                sta (z80_ix),y
002BEB  3  A9 03        c00787: lda #3
002BED  3  A0 0A                ldy #10
002BEF  3  D1 rr                cmp (z80_ix),y
002BF1  3  F0 03                beq *+5
002BF3  3  4C 48 2C             jmp c00970
002BF6  3  20 6B 18             jsr cangr
002BF9  3  F0 03                beq :+
002BFB  3  4C 0A 2C             jmp c00849
002BFE  3               :
002BFE  3  A0 09                ldy #9
002C00  3  B1 rr                lda (z80_ix),y
002C02  3  18                   clc
002C03  3  69 02                adc #2
002C05  3  91 rr                sta (z80_ix),y
002C07  3  4C 10 2C             jmp c00863
002C0A  3  A9 02        c00849: lda #2
002C0C  3  A0 0A                ldy #10
002C0E  3  91 rr                sta (z80_ix),y
002C10  3  A9 04        c00863: lda #4
002C12  3  85 rr                sta z80_d
002C14  3  20 16 1A             jsr random
002C17  3  85 rr                sta z80_h
002C19  3  20 EE 12             jsr imul
002C1C  3  A5 rr                lda z80_h
002C1E  3  85 rr                sta varrnd
002C20  3  A9 00                lda #0
002C22  3  C5 rr                cmp varrnd
002C24  3  F0 03                beq *+5
002C26  3  4C 48 2C             jmp c00970
002C29  3  20 B6 17             jsr laddu
002C2C  3  F0 03                beq :+
002C2E  3  4C 3A 2C             jmp c00943
002C31  3               :
002C31  3  A9 00                lda #0
002C33  3  A0 0A                ldy #10
002C35  3  91 rr                sta (z80_ix),y
002C37  3  4C 48 2C             jmp c00970
002C3A  3  20 A0 17     c00943: jsr laddd
002C3D  3  F0 03                beq :+
002C3F  3  4C 48 2C             jmp c00970
002C42  3               :
002C42  3  A9 01                lda #1
002C44  3  A0 0A                ldy #10
002C46  3  91 rr                sta (z80_ix),y
002C48  3  A9 00        c00970: lda #0
002C4A  3  85 rr                sta z80_b
002C4C  3  20 22 1E             jsr sktyp
002C4F  3  B0 03                bcs :+
002C51  3  4C 88 2C             jmp c01095
002C54  3               :
002C54  3  A9 01                lda #1
002C56  3  C5 rr                cmp varb
002C58  3  F0 03                beq *+5
002C5A  3  4C 88 2C             jmp c01095
002C5D  3  A9 6E                lda #110
002C5F  3  0A                   asl a
002C60  3  8D D2 0E             sta sndtyp
002C63  3  A9 96                lda #150
002C65  3  0A                   asl a
002C66  3  8D D2 0E             sta sndtyp
002C69  3  A9 FF                lda #255
002C6B  3  A0 05                ldy #5
002C6D  3  91 rr                sta (z80_ix),y
002C6F  3  A9 96                lda #<150
002C71  3  85 rr                sta z80_l
002C73  3  A9 00                lda #>150
002C75  3  85 rr                sta z80_h
002C77  3  20 76 15             jsr addsc
002C7A  3  A9 00                lda #0
002C7C  3  85 rr                sta chary
002C7E  3  A9 19                lda #25
002C80  3  85 rr                sta charx
002C82  3  20 2A 15             jsr dscor
002C85  3  4C 88 2C             jmp c01095
002C88  3  A9 01        c01095: lda #1
002C8A  3  C5 rr                cmp varb
002C8C  3  F0 03                beq *+5
002C8E  3  4C 97 2C             jmp c01125
002C91  3  A9 06                lda #6
002C93  3  A0 06                ldy #6
002C95  3  91 rr                sta (z80_ix),y
002C97  3  A9 00        c01125: lda #0
002C99  3  C5 rr                cmp varb
002C9B  3  F0 03                beq *+5
002C9D  3  4C A6 2C             jmp c01155
002CA0  3  A9 05                lda #5
002CA2  3  A0 06                ldy #6
002CA4  3  91 rr                sta (z80_ix),y
002CA6  3  A9 01        c01155: lda #1
002CA8  3  C5 rr                cmp varf
002CAA  3  F0 03                beq *+5
002CAC  3  4C B3 2C             jmp c01180
002CAF  3  A9 00                lda #0
002CB1  3  85 rr                sta varb
002CB3  3  4C 3E 1F     c01180: jmp grav
002CB6  3               evnt03:
002CB6  3  A9 15                lda #21
002CB8  3  C5 rr                cmp scno
002CBA  3  F0 03                beq *+5
002CBC  3  4C D5 2C             jmp d00061
002CBF  3  A9 01                lda #1
002CC1  3  85 rr                sta varh
002CC3  3  A9 01                lda #1
002CC5  3  C5 rr                cmp vari
002CC7  3  F0 03                beq *+5
002CC9  3  4C D5 2C             jmp d00061
002CCC  3  20 C8 1F             jsr ifall
002CCF  3  A9 08                lda #8
002CD1  3  A0 05                ldy #5
002CD3  3  91 rr                sta (z80_ix),y
002CD5  3  A9 06        d00061: lda #CUSTOM
002CD7  3  85 rr                sta z80_b
002CD9  3  20 E4 18             jsr tded
002CDC  3  C5 rr                cmp z80_b
002CDE  3  F0 03                beq :+
002CE0  3  4C E9 2C             jmp d00102
002CE3  3               :
002CE3  3  A9 08                lda #8
002CE5  3  A0 05                ldy #5
002CE7  3  91 rr                sta (z80_ix),y
002CE9  3  A9 04        d00102: lda #4
002CEB  3  85 rr                sta z80_b
002CED  3  20 22 1E             jsr sktyp
002CF0  3  B0 03                bcs :+
002CF2  3  4C 06 2D             jmp d00159
002CF5  3               :
002CF5  3  20 59 18             jsr cangl
002CF8  3  F0 03                beq :+
002CFA  3  4C 06 2D             jmp d00159
002CFD  3               :
002CFD  3  A0 09                ldy #9
002CFF  3  B1 rr                lda (z80_ix),y
002D01  3  38                   sec
002D02  3  E9 02                sbc #2
002D04  3  91 rr                sta (z80_ix),y
002D06  3  A9 05        d00159: lda #5
002D08  3  85 rr                sta z80_b
002D0A  3  20 22 1E             jsr sktyp
002D0D  3  B0 03                bcs :+
002D0F  3  4C 23 2D             jmp d00216
002D12  3               :
002D12  3  20 6B 18             jsr cangr
002D15  3  F0 03                beq :+
002D17  3  4C 23 2D             jmp d00216
002D1A  3               :
002D1A  3  A0 09                ldy #9
002D1C  3  B1 rr                lda (z80_ix),y
002D1E  3  18                   clc
002D1F  3  69 02                adc #2
002D21  3  91 rr                sta (z80_ix),y
002D23  3  A9 02        d00216: lda #2
002D25  3  85 rr                sta z80_b
002D27  3  20 22 1E             jsr sktyp
002D2A  3  B0 03                bcs :+
002D2C  3  4C 35 2D             jmp d00251
002D2F  3               :
002D2F  3  A9 08                lda #8
002D31  3  A0 05                ldy #5
002D33  3  91 rr                sta (z80_ix),y
002D35  3  A9 06        d00251: lda #6
002D37  3  85 rr                sta z80_b
002D39  3  20 22 1E             jsr sktyp
002D3C  3  B0 03                bcs :+
002D3E  3  4C 47 2D             jmp d00286
002D41  3               :
002D41  3  A9 08                lda #8
002D43  3  A0 05                ldy #5
002D45  3  91 rr                sta (z80_ix),y
002D47  3  A9 01        d00286: lda #1
002D49  3  C5 rr                cmp varg
002D4B  3  F0 03                beq *+5
002D4D  3  4C 6D 2D             jmp d00360
002D50  3  20 59 18             jsr cangl
002D53  3  F0 03                beq :+
002D55  3  4C 6D 2D             jmp d00360
002D58  3               :
002D58  3  A9 00                lda #0
002D5A  3  85 rr                sta z80_b
002D5C  3  20 22 1E             jsr sktyp
002D5F  3  B0 03                bcs :+
002D61  3  4C 6D 2D             jmp d00360
002D64  3               :
002D64  3  A0 09                ldy #9
002D66  3  B1 rr                lda (z80_ix),y
002D68  3  38                   sec
002D69  3  E9 02                sbc #2
002D6B  3  91 rr                sta (z80_ix),y
002D6D  3  A9 00        d00360: lda #0
002D6F  3  C5 rr                cmp varg
002D71  3  F0 03                beq *+5
002D73  3  4C 93 2D             jmp d00434
002D76  3  A9 00                lda #0
002D78  3  85 rr                sta z80_b
002D7A  3  20 22 1E             jsr sktyp
002D7D  3  B0 03                bcs :+
002D7F  3  4C 93 2D             jmp d00434
002D82  3               :
002D82  3  20 6B 18             jsr cangr
002D85  3  F0 03                beq :+
002D87  3  4C 93 2D             jmp d00434
002D8A  3               :
002D8A  3  A0 09                ldy #9
002D8C  3  B1 rr                lda (z80_ix),y
002D8E  3  18                   clc
002D8F  3  69 02                adc #2
002D91  3  91 rr                sta (z80_ix),y
002D93  3  A9 00        d00434: lda #0
002D95  3  C5 rr                cmp varh
002D97  3  F0 03                beq *+5
002D99  3  4C AD 2D             jmp d00486
002D9C  3  20 24 18             jsr cangd
002D9F  3  F0 03                beq :+
002DA1  3  4C AD 2D             jmp d00486
002DA4  3               :
002DA4  3  A0 08                ldy #8
002DA6  3  B1 rr                lda (z80_ix),y
002DA8  3  18                   clc
002DA9  3  69 02                adc #2
002DAB  3  91 rr                sta (z80_ix),y
002DAD  3  4C 3E 1F     d00486: jmp grav
002DB0  3               evnt04:
002DB0  3  A9 00                lda #0
002DB2  3  C5 rr                cmp scno
002DB4  3  F0 03                beq *+5
002DB6  3  4C E1 2D             jmp e00097
002DB9  3  20 E1 1D             jsr animsp
002DBC  3  A0 09                ldy #9
002DBE  3  B1 rr                lda (z80_ix),y
002DC0  3  18                   clc
002DC1  3  69 02                adc #2
002DC3  3  91 rr                sta (z80_ix),y
002DC5  3  A9 02                lda #2
002DC7  3  A0 07                ldy #7
002DC9  3  D1 rr                cmp (z80_ix),y
002DCB  3  F0 03                beq *+5
002DCD  3  4C E1 2D             jmp e00097
002DD0  3  A9 02                lda #2
002DD2  3  0A                   asl a
002DD3  3  8D D2 0E             sta sndtyp
002DD6  3  20 24 18             jsr cangd
002DD9  3  F0 03                beq :+
002DDB  3  4C E1 2D             jmp e00097
002DDE  3               :
002DDE  3  20 C8 1F             jsr ifall
002DE1  3  A9 01        e00097: lda #1
002DE3  3  C5 rr                cmp scno
002DE5  3  F0 03                beq *+5
002DE7  3  4C 04 2E             jmp e00165
002DEA  3  20 E1 1D             jsr animsp
002DED  3  A9 02                lda #2
002DEF  3  A0 07                ldy #7
002DF1  3  D1 rr                cmp (z80_ix),y
002DF3  3  F0 03                beq *+5
002DF5  3  4C 04 2E             jmp e00165
002DF8  3  A9 0A                lda #10
002DFA  3  0A                   asl a
002DFB  3  8D D2 0E             sta sndtyp
002DFE  3  A9 05                lda #5
002E00  3  0A                   asl a
002E01  3  8D D2 0E             sta sndtyp
002E04  3  A9 04        e00165: lda #4
002E06  3  C5 rr                cmp scno
002E08  3  F0 03                beq *+5
002E0A  3  4C 10 2E             jmp e00186
002E0D  3  20 E1 1D             jsr animsp
002E10  3  A9 07        e00186: lda #7
002E12  3  C5 rr                cmp scno
002E14  3  F0 03                beq *+5
002E16  3  4C 1C 2E             jmp e00208
002E19  3  20 E1 1D             jsr animsp
002E1C  3  A9 08        e00208: lda #8
002E1E  3  C5 rr                cmp scno
002E20  3  F0 03                beq *+5
002E22  3  4C 28 2E             jmp e00229
002E25  3  20 E1 1D             jsr animsp
002E28  3  A9 11        e00229: lda #17
002E2A  3  C5 rr                cmp scno
002E2C  3  F0 03                beq *+5
002E2E  3  4C 34 2E             jmp e00251
002E31  3  20 E1 1D             jsr animsp
002E34  3  A9 12        e00251: lda #18
002E36  3  C5 rr                cmp scno
002E38  3  F0 03                beq *+5
002E3A  3  4C 40 2E             jmp e00273
002E3D  3  20 E1 1D             jsr animsp
002E40  3  A9 15        e00273: lda #21
002E42  3  C5 rr                cmp scno
002E44  3  F0 03                beq *+5
002E46  3  4C 74 2E             jmp e00378
002E49  3  20 E1 1D             jsr animsp
002E4C  3  A9 01                lda #1
002E4E  3  C5 rr                cmp vari
002E50  3  F0 03                beq *+5
002E52  3  4C 74 2E             jmp e00378
002E55  3  20 C8 1F             jsr ifall
002E58  3  A0 0B                ldy #11
002E5A  3  B1 rr                lda (z80_ix),y
002E5C  3  18                   clc
002E5D  3  69 01                adc #1
002E5F  3  A0 0B                ldy #11
002E61  3  91 rr                sta (z80_ix),y
002E63  3  A9 28                lda #40
002E65  3  A0 0B                ldy #11
002E67  3  D1 rr                cmp (z80_ix),y
002E69  3  F0 03                beq *+5
002E6B  3  4C 74 2E             jmp e00378
002E6E  3  A9 08                lda #8
002E70  3  A0 05                ldy #5
002E72  3  91 rr                sta (z80_ix),y
002E74  3  A9 16        e00378: lda #22
002E76  3  C5 rr                cmp scno
002E78  3  F0 03                beq *+5
002E7A  3  4C A7 2E             jmp e00484
002E7D  3  A0 0B                ldy #11
002E7F  3  B1 rr                lda (z80_ix),y
002E81  3  18                   clc
002E82  3  69 01                adc #1
002E84  3  A0 0B                ldy #11
002E86  3  91 rr                sta (z80_ix),y
002E88  3  A9 0A                lda #10
002E8A  3  A0 0B                ldy #11
002E8C  3  D1 rr                cmp (z80_ix),y
002E8E  3  F0 03                beq *+5
002E90  3  4C 96 2E             jmp e00448
002E93  3  20 D5 19             jsr jump
002E96  3  A9 14        e00448: lda #20
002E98  3  A0 0B                ldy #11
002E9A  3  D1 rr                cmp (z80_ix),y
002E9C  3  90 03                bcc *+5
002E9E  3  4C A7 2E             jmp e00484
002EA1  3  A9 00                lda #0
002EA3  3  A0 0B                ldy #11
002EA5  3  91 rr                sta (z80_ix),y
002EA7  3  4C 3E 1F     e00484: jmp grav
002EAA  3               evnt05:
002EAA  3  A9 04                lda #4
002EAC  3  C5 rr                cmp scno
002EAE  3  F0 03                beq *+5
002EB0  3  4C B6 2E             jmp f00023
002EB3  3  20 E1 1D             jsr animsp
002EB6  3  A9 11        f00023: lda #17
002EB8  3  C5 rr                cmp scno
002EBA  3  F0 03                beq *+5
002EBC  3  4C C2 2E             jmp f00045
002EBF  3  20 E1 1D             jsr animsp
002EC2  3  A9 15        f00045: lda #21
002EC4  3  C5 rr                cmp scno
002EC6  3  F0 03                beq *+5
002EC8  3  4C 6F 2F             jmp f00411
002ECB  3  A9 01                lda #1
002ECD  3  C5 rr                cmp vari
002ECF  3  F0 03                beq *+5
002ED1  3  4C 01 2F             jmp f00175
002ED4  3  A9 16                lda #22
002ED6  3  A0 06                ldy #6
002ED8  3  91 rr                sta (z80_ix),y
002EDA  3  20 C8 1F             jsr ifall
002EDD  3  A0 0C                ldy #12
002EDF  3  B1 rr                lda (z80_ix),y
002EE1  3  18                   clc
002EE2  3  69 01                adc #1
002EE4  3  A0 0C                ldy #12
002EE6  3  91 rr                sta (z80_ix),y
002EE8  3  A9 14                lda #20
002EEA  3  A0 0C                ldy #12
002EEC  3  D1 rr                cmp (z80_ix),y
002EEE  3  90 03                bcc *+5
002EF0  3  4C 01 2F             jmp f00175
002EF3  3  A9 08                lda #8
002EF5  3  A0 05                ldy #5
002EF7  3  91 rr                sta (z80_ix),y
002EF9  3  A9 00                lda #0
002EFB  3  85 rr                sta varj
002EFD  3  A9 00                lda #0
002EFF  3  85 rr                sta varb
002F01  3  A0 0B        f00175: ldy #11
002F03  3  B1 rr                lda (z80_ix),y
002F05  3  18                   clc
002F06  3  69 01                adc #1
002F08  3  A0 0B                ldy #11
002F0A  3  91 rr                sta (z80_ix),y
002F0C  3  A9 14                lda #20
002F0E  3  A0 0B                ldy #11
002F10  3  D1 rr                cmp (z80_ix),y
002F12  3  F0 03                beq *+5
002F14  3  4C 25 2F             jmp f00253
002F17  3  A9 17                lda #23
002F19  3  A0 06                ldy #6
002F1B  3  91 rr                sta (z80_ix),y
002F1D  3  A9 00                lda #0
002F1F  3  85 rr                sta varj
002F21  3  A9 00                lda #0
002F23  3  85 rr                sta varb
002F25  3  A9 2D        f00253: lda #45
002F27  3  A0 0B                ldy #11
002F29  3  D1 rr                cmp (z80_ix),y
002F2B  3  F0 03                beq *+5
002F2D  3  4C 5E 2F             jmp f00375
002F30  3  A9 16                lda #22
002F32  3  A0 06                ldy #6
002F34  3  91 rr                sta (z80_ix),y
002F36  3  A9 01                lda #1
002F38  3  85 rr                sta varj
002F3A  3  A0 0C                ldy #12
002F3C  3  B1 rr                lda (z80_ix),y
002F3E  3  18                   clc
002F3F  3  69 01                adc #1
002F41  3  A0 0C                ldy #12
002F43  3  91 rr                sta (z80_ix),y
002F45  3  A9 01                lda #1
002F47  3  85 rr                sta varb
002F49  3  A9 05                lda #5
002F4B  3  A0 0C                ldy #12
002F4D  3  D1 rr                cmp (z80_ix),y
002F4F  3  F0 03                beq *+5
002F51  3  4C 5E 2F             jmp f00375
002F54  3  A9 00                lda #0
002F56  3  85 rr                sta varj
002F58  3  A9 00                lda #0
002F5A  3  A0 0C                ldy #12
002F5C  3  91 rr                sta (z80_ix),y
002F5E  3  A9 46        f00375: lda #70
002F60  3  A0 0B                ldy #11
002F62  3  D1 rr                cmp (z80_ix),y
002F64  3  90 03                bcc *+5
002F66  3  4C 6F 2F             jmp f00411
002F69  3  A9 00                lda #0
002F6B  3  A0 0B                ldy #11
002F6D  3  91 rr                sta (z80_ix),y
002F6F  3  4C 3E 1F     f00411: jmp grav
002F72  3               evnt06:
002F72  3  A9 03                lda #3
002F74  3  85 rr                sta z80_b
002F76  3  20 22 1E             jsr sktyp
002F79  3  B0 03                bcs :+
002F7B  3  4C 84 2F             jmp g00037
002F7E  3               :
002F7E  3  A9 08                lda #8
002F80  3  A0 05                ldy #5
002F82  3  91 rr                sta (z80_ix),y
002F84  3  A9 00        g00037: lda #0
002F86  3  85 rr                sta z80_b
002F88  3  20 22 1E             jsr sktyp
002F8B  3  B0 03                bcs :+
002F8D  3  4C C4 2F             jmp g00162
002F90  3               :
002F90  3  A9 01                lda #1
002F92  3  C5 rr                cmp varb
002F94  3  F0 03                beq *+5
002F96  3  4C C4 2F             jmp g00162
002F99  3  A9 6E                lda #110
002F9B  3  0A                   asl a
002F9C  3  8D D2 0E             sta sndtyp
002F9F  3  A9 96                lda #150
002FA1  3  0A                   asl a
002FA2  3  8D D2 0E             sta sndtyp
002FA5  3  A9 FF                lda #255
002FA7  3  A0 05                ldy #5
002FA9  3  91 rr                sta (z80_ix),y
002FAB  3  A9 96                lda #<150
002FAD  3  85 rr                sta z80_l
002FAF  3  A9 00                lda #>150
002FB1  3  85 rr                sta z80_h
002FB3  3  20 76 15             jsr addsc
002FB6  3  A9 00                lda #0
002FB8  3  85 rr                sta chary
002FBA  3  A9 19                lda #25
002FBC  3  85 rr                sta charx
002FBE  3  20 2A 15             jsr dscor
002FC1  3  4C C4 2F             jmp g00162
002FC4  3  A9 01        g00162: lda #1
002FC6  3  C5 rr                cmp varb
002FC8  3  F0 03                beq *+5
002FCA  3  4C D3 2F             jmp g00192
002FCD  3  A9 06                lda #6
002FCF  3  A0 06                ldy #6
002FD1  3  91 rr                sta (z80_ix),y
002FD3  3  A9 00        g00192: lda #0
002FD5  3  C5 rr                cmp varb
002FD7  3  F0 03                beq *+5
002FD9  3  4C E2 2F             jmp g00222
002FDC  3  A9 05                lda #5
002FDE  3  A0 06                ldy #6
002FE0  3  91 rr                sta (z80_ix),y
002FE2  3  A9 01        g00222: lda #1
002FE4  3  C5 rr                cmp varf
002FE6  3  F0 03                beq *+5
002FE8  3  4C EF 2F             jmp g00247
002FEB  3  A9 00                lda #0
002FED  3  85 rr                sta varb
002FEF  3  A9 00        g00247: lda #0
002FF1  3  A0 0B                ldy #11
002FF3  3  D1 rr                cmp (z80_ix),y
002FF5  3  F0 03                beq *+5
002FF7  3  4C 43 30             jmp g00425
002FFA  3  20 59 18             jsr cangl
002FFD  3  F0 03                beq :+
002FFF  3  4C 3A 30             jmp g00407
003002  3               :
003002  3  A0 09                ldy #9
003004  3  B1 rr                lda (z80_ix),y
003006  3  38                   sec
003007  3  E9 02                sbc #2
003009  3  91 rr                sta (z80_ix),y
00300B  3  A9 10                lda #16
00300D  3  85 rr                sta z80_c
00300F  3  A0 09                ldy #9
003011  3  B1 rr                lda (z80_ix),y
003013  3  38                   sec
003014  3  E5 rr                sbc z80_c
003016  3  A0 09                ldy #9
003018  3  91 rr                sta (z80_ix),y
00301A  3  20 24 18             jsr cangd
00301D  3  F0 03                beq :+
00301F  3  4C 28 30             jmp g00367
003022  3               :
003022  3  A9 01                lda #1
003024  3  A0 0B                ldy #11
003026  3  91 rr                sta (z80_ix),y
003028  3  A9 10        g00367: lda #16
00302A  3  85 rr                sta z80_c
00302C  3  A0 09                ldy #9
00302E  3  B1 rr                lda (z80_ix),y
003030  3  18                   clc
003031  3  65 rr                adc z80_c
003033  3  A0 09                ldy #9
003035  3  91 rr                sta (z80_ix),y
003037  3  4C 40 30             jmp g00420
00303A  3  A9 01        g00407: lda #1
00303C  3  A0 0B                ldy #11
00303E  3  91 rr                sta (z80_ix),y
003040  3  4C 89 30     g00420: jmp g00576
003043  3  20 6B 18     g00425: jsr cangr
003046  3  F0 03                beq :+
003048  3  4C 83 30             jmp g00562
00304B  3               :
00304B  3  A0 09                ldy #9
00304D  3  B1 rr                lda (z80_ix),y
00304F  3  18                   clc
003050  3  69 02                adc #2
003052  3  91 rr                sta (z80_ix),y
003054  3  A9 10                lda #16
003056  3  85 rr                sta z80_c
003058  3  A0 09                ldy #9
00305A  3  B1 rr                lda (z80_ix),y
00305C  3  18                   clc
00305D  3  65 rr                adc z80_c
00305F  3  A0 09                ldy #9
003061  3  91 rr                sta (z80_ix),y
003063  3  20 24 18             jsr cangd
003066  3  F0 03                beq :+
003068  3  4C 71 30             jmp g00522
00306B  3               :
00306B  3  A9 00                lda #0
00306D  3  A0 0B                ldy #11
00306F  3  91 rr                sta (z80_ix),y
003071  3  A9 10        g00522: lda #16
003073  3  85 rr                sta z80_c
003075  3  A0 09                ldy #9
003077  3  B1 rr                lda (z80_ix),y
003079  3  38                   sec
00307A  3  E5 rr                sbc z80_c
00307C  3  A0 09                ldy #9
00307E  3  91 rr                sta (z80_ix),y
003080  3  4C 89 30             jmp g00576
003083  3  A9 00        g00562: lda #0
003085  3  A0 0B                ldy #11
003087  3  91 rr                sta (z80_ix),y
003089  3  20 E1 1D     g00576: jsr animsp
00308C  3  60                   rts
00308D  3               evnt07:
00308D  3  A9 03                lda #3
00308F  3  A0 06                ldy #6
003091  3  91 rr                sta (z80_ix),y
003093  3  20 E1 1D             jsr animsp
003096  3  A9 02                lda #2
003098  3  A0 07                ldy #7
00309A  3  D1 rr                cmp (z80_ix),y
00309C  3  F0 03                beq *+5
00309E  3  4C AD 30             jmp h00066
0030A1  3  A9 0A                lda #10
0030A3  3  0A                   asl a
0030A4  3  8D D2 0E             sta sndtyp
0030A7  3  A9 05                lda #5
0030A9  3  0A                   asl a
0030AA  3  8D D2 0E             sta sndtyp
0030AD  3  A0 0B        h00066: ldy #11
0030AF  3  B1 rr                lda (z80_ix),y
0030B1  3  18                   clc
0030B2  3  69 01                adc #1
0030B4  3  A0 0B                ldy #11
0030B6  3  91 rr                sta (z80_ix),y
0030B8  3  A9 64                lda #100
0030BA  3  A0 0B                ldy #11
0030BC  3  D1 rr                cmp (z80_ix),y
0030BE  3  F0 03                beq *+5
0030C0  3  4C C7 30             jmp h00123
0030C3  3  A9 01                lda #1
0030C5  3  85 rr                sta deadf
0030C7  3  60           h00123: rts
0030C8  3               evnt08:
0030C8  3  A9 0E                lda #14
0030CA  3  A0 06                ldy #6
0030CC  3  91 rr                sta (z80_ix),y
0030CE  3  20 E1 1D             jsr animsp
0030D1  3  A9 03                lda #3
0030D3  3  A0 07                ldy #7
0030D5  3  D1 rr                cmp (z80_ix),y
0030D7  3  F0 03                beq *+5
0030D9  3  4C EE 30             jmp i00080
0030DC  3  A9 FF                lda #255
0030DE  3  A0 05                ldy #5
0030E0  3  91 rr                sta (z80_ix),y
0030E2  3  A9 28                lda #40
0030E4  3  0A                   asl a
0030E5  3  8D D2 0E             sta sndtyp
0030E8  3  A9 32                lda #50
0030EA  3  0A                   asl a
0030EB  3  8D D2 0E             sta sndtyp
0030EE  3  A9 0A        i00080: lda #<10
0030F0  3  85 rr                sta z80_l
0030F2  3  A9 00                lda #>10
0030F4  3  85 rr                sta z80_h
0030F6  3  20 76 15             jsr addsc
0030F9  3  A9 00                lda #0
0030FB  3  85 rr                sta chary
0030FD  3  A9 19                lda #25
0030FF  3  85 rr                sta charx
003101  3  20 2A 15             jsr dscor
003104  3  60                   rts
003105  3               evnt09:
003105  3  60                   rts
003106  3               evnt10:
003106  3  60                   rts
003107  3               evnt11:
003107  3  60                   rts
003108  3               evnt12:
003108  3  20 F9 10             jsr cls
00310B  3  A9 04                lda #4
00310D  3  85 rr                sta chary
00310F  3  A9 09                lda #9
003111  3  85 rr                sta charx
003113  3  A9 04                lda #4
003115  3  20 75 1A             jsr dmsg
003118  3  A9 01                lda #1
00311A  3  85 rr                sta chary
00311C  3  A9 0B                lda #11
00311E  3  85 rr                sta charx
003120  3  A9 03                lda #3
003122  3  20 75 1A             jsr dmsg
003125  3  20 5C 0E             jsr prskey
003128  3  60                   rts
003129  3               evnt13:
003129  3  A9 03                lda #3
00312B  3  85 rr                sta numlif
00312D  3  20 F9 10             jsr cls
003130  3  A9 00                lda #0
003132  3  85 rr                sta chary
003134  3  A9 19                lda #25
003136  3  85 rr                sta charx
003138  3  20 2A 15             jsr dscor
00313B  3  A9 00                lda #0
00313D  3  85 rr                sta chary
00313F  3  A9 01                lda #1
003141  3  85 rr                sta charx
003143  3  A5 rr                lda numlif
003145  3  20 B2 1E             jsr disply
003148  3  A9 00                lda #0
00314A  3  85 rr                sta vara
00314C  3  A9 00                lda #0
00314E  3  85 rr                sta varb
003150  3  A9 00                lda #0
003152  3  85 rr                sta varc
003154  3  A9 00                lda #0
003156  3  85 rr                sta vard
003158  3  A9 AA                lda #170
00315A  3  85 rr                sta vare
00315C  3  A9 00                lda #0
00315E  3  85 rr                sta varf
003160  3  A9 00                lda #0
003162  3  85 rr                sta varg
003164  3  A9 00                lda #0
003166  3  85 rr                sta varh
003168  3  A9 00                lda #0
00316A  3  85 rr                sta vari
00316C  3  A9 00                lda #0
00316E  3  85 rr                sta varj
003170  3  60                   rts
003171  3               evnt14:
003171  3  A9 00                lda #0
003173  3  85 rr                sta chary
003175  3  A9 01                lda #1
003177  3  85 rr                sta charx
003179  3  A5 rr                lda numlif
00317B  3  20 B2 1E             jsr disply
00317E  3  A9 00                lda #0
003180  3  85 rr                sta varb
003182  3  A9 00                lda #0
003184  3  85 rr                sta varf
003186  3  A9 00                lda #0
003188  3  85 rr                sta vari
00318A  3  A9 00                lda #0
00318C  3  85 rr                sta varh
00318E  3  A9 00                lda #0
003190  3  85 rr                sta varj
003192  3  60                   rts
003193  3               evnt15:
003193  3  A9 03                lda #3
003195  3  A0 05                ldy #5
003197  3  D1 rr                cmp (z80_ix),y
003199  3  F0 03                beq *+5
00319B  3  4C AA 31             jmp p00047
00319E  3  20 E1 1D             jsr animsp
0031A1  3  A9 FF                lda #255
0031A3  3  A0 05                ldy #5
0031A5  3  91 rr                sta (z80_ix),y
0031A7  3  20 E1 1D             jsr animsp
0031AA  3  60           p00047: rts
0031AB  3               evnt16:
0031AB  3  A5 rr                lda numlif
0031AD  3  38                   sec
0031AE  3  E9 01                sbc #1
0031B0  3  85 rr                sta numlif
0031B2  3  A9 00                lda #0
0031B4  3  85 rr                sta chary
0031B6  3  A9 01                lda #1
0031B8  3  85 rr                sta charx
0031BA  3  A5 rr                lda numlif
0031BC  3  20 B2 1E             jsr disply
0031BF  3  A9 00                lda #0
0031C1  3  C5 rr                cmp numlif
0031C3  3  B0 03                bcs *+5
0031C5  3  4C DA 31             jmp q00095
0031C8  3  A9 0A                lda #10
0031CA  3  85 rr                sta chary
0031CC  3  A9 0C                lda #12
0031CE  3  85 rr                sta charx
0031D0  3  A9 00                lda #0
0031D2  3  20 75 1A             jsr dmsg
0031D5  3  A9 FA                lda #250
0031D7  3  20 9A 0E             jsr delay
0031DA  3  60           q00095: rts
0031DB  3               evnt17:
0031DB  3  A9 32                lda #50
0031DD  3  20 9A 0E             jsr delay
0031E0  3  60                   rts
0031E1  3               evnt18:
0031E1  3  A9 07                lda #7
0031E3  3  85 rr                sta chary
0031E5  3  A9 0C                lda #12
0031E7  3  85 rr                sta charx
0031E9  3  A9 02                lda #2
0031EB  3  20 75 1A             jsr dmsg
0031EE  3  A9 64                lda #100
0031F0  3  20 9A 0E             jsr delay
0031F3  3  A9 09                lda #9
0031F5  3  85 rr                sta chary
0031F7  3  A9 0A                lda #10
0031F9  3  85 rr                sta charx
0031FB  3  A9 01                lda #1
0031FD  3  20 75 1A             jsr dmsg
003200  3  A9 FA                lda #250
003202  3  20 9A 0E             jsr delay
003205  3  60                   rts
003206  3               evnt19:
003206  3  60                   rts
003207  3  60           ptcusr: rts
003208  3               msgdat:
003208  3  47 41 4D 45          .byte "GAME OVER",141
00320C  3  20 4F 56 45  
003210  3  52 8D        
003212  3  47 41 4D 45          .byte "GAME COMPLETE",141
003216  3  20 43 4F 4D  
00321A  3  50 4C 45 54  
003220  3  48 41 50 50          .byte "HAPPY END",141
003224  3  59 20 45 4E  
003228  3  44 8D        
00322A  3  4D 52 2E 20          .byte "MR. VINTIK",141
00322E  3  56 49 4E 54  
003232  3  49 4B 8D     
003235  3  50 52 45 53          .byte "PRESS TO START",13
003239  3  53 20 54 4F  
00323D  3  20 53 54 41  
003244  3  0D                   .byte 13
003245  3  0D                   .byte 13
003246  3  31 2E 20 4F          .byte "1. OPQA SPACE",13
00324A  3  50 51 41 20  
00324E  3  53 50 41 43  
003254  3  32 2E 20 4B          .byte "2. KEMPSTON JOYSTICK",13
003258  3  45 4D 50 53  
00325C  3  54 4F 4E 20  
003269  3  33 2E 20 53          .byte "3. SINCLAIR JOYSTICK",13
00326D  3  49 4E 43 4C  
003271  3  41 49 52 20  
00327E  3  0D                   .byte 13
00327F  3  0D                   .byte 13
003280  3  0D                   .byte 13
003281  3  4D 52 2E 56          .byte "MR.VINTIK ZX-SPECTRUM VERSION BY",13
003285  3  49 4E 54 49  
003289  3  4B 20 5A 58  
0032A2  3  41 4C 45 4B          .byte "ALEKSANDR TITOV & ZLATA TITOVA",13
0032A6  3  53 41 4E 44  
0032AA  3  52 20 54 49  
0032C1  3  45 4B 41 54          .byte "EKATERINBURG, RUSSIA, 2016",13
0032C5  3  45 52 49 4E  
0032C9  3  42 55 52 47  
0032DC  3  0D                   .byte 13
0032DD  3  0D                   .byte 13
0032DE  3  0D                   .byte 13
0032DF  3  43 52 45 41          .byte "CREATED IN Arcade Game Designe",141
0032E3  3  54 45 44 20  
0032E7  3  49 4E 20 41  
0032FE  3               nummsg:
0032FE  3  05                   .byte 5
0032FF  3               chgfx:
0032FF  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003303  3  00 00 00 00  
003307  3  FF C3 81 81          .byte 255,195,129,129,129,129,195,255
00330B  3  81 81 C3 FF  
00330F  3  03 07 06 06          .byte 3,7,6,6,6,6,7,3
003313  3  06 06 07 03  
003317  3  C0 E0 60 60          .byte 192,224,96,96,96,96,224,192
00331B  3  60 60 E0 C0  
00331F  3  FF C3 BD BD          .byte 255,195,189,189,189,189,195,255
003323  3  BD BD C3 FF  
003327  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00332B  3  00 00 00 00  
00332F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003333  3  00 00 00 00  
003337  3  00 FF 00 00          .byte 0,255,0,0,0,255,0,0
00333B  3  00 FF 00 00  
00333F  3  7F C3 99 A1          .byte 127,195,153,161,161,129,195,255
003343  3  A1 81 C3 FF  
003347  3  FE C3 99 A1          .byte 254,195,153,161,161,129,195,255
00334B  3  A1 81 C3 FF  
00334F  3  FF C3 99 A1          .byte 255,195,153,161,161,129,195,254
003353  3  A1 81 C3 FE  
003357  3  FF C3 99 A1          .byte 255,195,153,161,161,129,195,127
00335B  3  A1 81 C3 7F  
00335F  3  FF C3 99 A1          .byte 255,195,153,161,161,129,195,255
003363  3  A1 81 C3 FF  
003367  3  FF AA 55 00          .byte 255,170,85,0,0,0,0,0
00336B  3  00 00 00 00  
00336F  3  81 42 24 18          .byte 129,66,36,24,24,36,66,129
003373  3  18 24 42 81  
003377  3  76 C5 AA 91          .byte 118,197,170,145,43,197,137,90
00337B  3  2B C5 89 5A  
00337F  3  80 C0 E0 F0          .byte 128,192,224,240,248,252,254,255
003383  3  F8 FC FE FF  
003387  3  01 03 07 0F          .byte 1,3,7,15,31,63,127,255
00338B  3  1F 3F 7F FF  
00338F  3  FF 7F 7F 3F          .byte 255,127,127,63,31,15,7,1
003393  3  1F 0F 07 01  
003397  3  FF FE FE FC          .byte 255,254,254,252,248,240,224,128
00339B  3  F8 F0 E0 80  
00339F  3  00 00 00 38          .byte 0,0,0,56,124,124,254,254
0033A3  3  7C 7C FE FE  
0033A7  3  00 00 00 1C          .byte 0,0,0,28,62,62,127,127
0033AB  3  3E 3E 7F 7F  
0033AF  3  1C 76 AA D6          .byte 28,118,170,214,76,152,80,160
0033B3  3  4C 98 50 A0  
0033B7  3  00 06 2B 56          .byte 0,6,43,86,109,90,84,165
0033BB  3  6D 5A 54 A5  
0033BF  3  01 01 02 02          .byte 1,1,2,2,1,1,2,2
0033C3  3  01 01 02 02  
0033C7  3  01 01 02 02          .byte 1,1,2,2,4,4,56,192
0033CB  3  04 04 38 C0  
0033CF  3               bprop:
0033CF  3  00                   .byte 0
0033D0  3  02                   .byte 2
0033D1  3  00                   .byte 0
0033D2  3  00                   .byte 0
0033D3  3  02                   .byte 2
0033D4  3  06                   .byte 6
0033D5  3  00                   .byte 0
0033D6  3  03                   .byte 3
0033D7  3  02                   .byte 2
0033D8  3  02                   .byte 2
0033D9  3  02                   .byte 2
0033DA  3  02                   .byte 2
0033DB  3  02                   .byte 2
0033DC  3  01                   .byte 1
0033DD  3  05                   .byte 5
0033DE  3  04                   .byte 4
0033DF  3  00                   .byte 0
0033E0  3  00                   .byte 0
0033E1  3  00                   .byte 0
0033E2  3  00                   .byte 0
0033E3  3  00                   .byte 0
0033E4  3  00                   .byte 0
0033E5  3  00                   .byte 0
0033E6  3  00                   .byte 0
0033E7  3  00                   .byte 0
0033E8  3  00                   .byte 0
0033E9  3               sprgfx:
0033E9  3  03 C0 03 C0          .byte 3,192,3,192,3,240,3,192,3,192,1,128,15,192,15,192,15,192,15,192,3,192,3,128,3,0,3,0,3,0,3,192
0033ED  3  03 F0 03 C0  
0033F1  3  03 C0 01 80  
003409  3  00 F0 00 F0          .byte 0,240,0,240,0,252,0,240,0,240,0,96,3,240,3,240,3,240,3,240,0,240,0,224,0,192,0,192,0,192,0,240
00340D  3  00 FC 00 F0  
003411  3  00 F0 00 60  
003429  3  00 3C 00 3C          .byte 0,60,0,60,0,63,0,60,0,60,0,24,0,252,0,252,0,252,0,252,0,60,0,56,0,48,0,48,0,48,0,60
00342D  3  00 3F 00 3C  
003431  3  00 3C 00 18  
003449  3  00 0F 00 0F          .byte 0,15,0,15,192,15,0,15,0,15,0,6,0,63,0,63,0,63,0,63,0,15,0,14,0,12,0,12,0,12,0,15
00344D  3  C0 0F 00 0F  
003451  3  00 0F 00 06  
003469  3  03 C0 03 C0          .byte 3,192,3,192,3,240,3,192,3,192,1,128,15,192,15,192,15,252,15,252,3,192,3,240,7,56,62,28,60,12,32,14
00346D  3  03 F0 03 C0  
003471  3  03 C0 01 80  
003489  3  00 F0 00 F0          .byte 0,240,0,240,0,252,0,240,0,240,0,96,3,240,3,240,3,255,3,255,0,240,0,252,1,206,15,135,15,3,136,3
00348D  3  00 FC 00 F0  
003491  3  00 F0 00 60  
0034A9  3  00 3C 00 3C          .byte 0,60,0,60,0,63,0,60,0,60,0,24,0,252,0,252,192,255,192,255,0,60,0,63,128,115,195,225,195,192,226,0
0034AD  3  00 3F 00 3C  
0034B1  3  00 3C 00 18  
0034C9  3  00 0F 00 0F          .byte 0,15,0,15,192,15,0,15,0,15,0,6,0,63,0,63,240,63,240,63,0,15,192,15,224,28,112,248,48,240,56,128
0034CD  3  C0 0F 00 0F  
0034D1  3  00 0F 00 06  
0034E9  3  03 C0 03 C0          .byte 3,192,3,192,3,240,3,192,3,192,1,128,15,192,15,192,15,192,15,192,3,192,3,128,3,0,3,0,3,0,3,192
0034ED  3  03 F0 03 C0  
0034F1  3  03 C0 01 80  
003509  3  00 F0 00 F0          .byte 0,240,0,240,0,252,0,240,0,240,0,96,3,240,3,240,3,240,3,240,0,240,0,224,0,192,0,192,0,192,0,240
00350D  3  00 FC 00 F0  
003511  3  00 F0 00 60  
003529  3  00 3C 00 3C          .byte 0,60,0,60,0,63,0,60,0,60,0,24,0,252,0,252,0,252,0,252,0,60,0,56,0,48,0,48,0,48,0,60
00352D  3  00 3F 00 3C  
003531  3  00 3C 00 18  
003549  3  00 0F 00 0F          .byte 0,15,0,15,192,15,0,15,0,15,0,6,0,63,0,63,0,63,0,63,0,15,0,14,0,12,0,12,0,12,0,15
00354D  3  C0 0F 00 0F  
003551  3  00 0F 00 06  
003569  3  03 C0 03 C0          .byte 3,192,3,192,15,192,3,192,3,192,1,128,3,240,3,240,3,240,3,240,3,192,1,192,0,192,0,192,0,192,3,192
00356D  3  0F C0 03 C0  
003571  3  03 C0 01 80  
003589  3  00 F0 00 F0          .byte 0,240,0,240,3,240,0,240,0,240,0,96,0,252,0,252,0,252,0,252,0,240,0,112,0,48,0,48,0,48,0,240
00358D  3  03 F0 00 F0  
003591  3  00 F0 00 60  
0035A9  3  00 3C 00 3C          .byte 0,60,0,60,0,252,0,60,0,60,0,24,0,63,0,63,0,63,0,63,0,60,0,28,0,12,0,12,0,12,0,60
0035AD  3  00 FC 00 3C  
0035B1  3  00 3C 00 18  
0035C9  3  00 0F 00 0F          .byte 0,15,0,15,0,63,0,15,0,15,0,6,192,15,192,15,192,15,192,15,0,15,0,7,0,3,0,3,0,3,0,15
0035CD  3  00 3F 00 0F  
0035D1  3  00 0F 00 06  
0035E9  3  03 C0 03 C0          .byte 3,192,3,192,15,192,3,192,3,192,1,128,3,240,3,240,63,240,63,240,3,192,15,192,28,224,56,124,48,60,112,4
0035ED  3  0F C0 03 C0  
0035F1  3  03 C0 01 80  
003609  3  00 F0 00 F0          .byte 0,240,0,240,3,240,0,240,0,240,0,96,0,252,0,252,15,252,15,252,0,240,3,240,7,56,14,31,12,15,28,1
00360D  3  03 F0 00 F0  
003611  3  00 F0 00 60  
003629  3  00 3C 00 3C          .byte 0,60,0,60,0,252,0,60,0,60,0,24,0,63,0,63,3,255,3,255,0,60,0,252,1,206,195,135,195,3,71,0
00362D  3  00 FC 00 3C  
003631  3  00 3C 00 18  
003649  3  00 0F 00 0F          .byte 0,15,0,15,0,63,0,15,0,15,0,6,192,15,192,15,192,255,192,255,0,15,0,63,128,115,240,225,240,192,17,192
00364D  3  00 3F 00 0F  
003651  3  00 0F 00 06  
003669  3  03 C0 03 C0          .byte 3,192,3,192,15,192,3,192,3,192,1,128,3,240,3,240,3,240,3,240,3,192,1,192,0,192,0,192,0,192,3,192
00366D  3  0F C0 03 C0  
003671  3  03 C0 01 80  
003689  3  00 F0 00 F0          .byte 0,240,0,240,3,240,0,240,0,240,0,96,0,252,0,252,0,252,0,252,0,240,0,112,0,48,0,48,0,48,0,240
00368D  3  03 F0 00 F0  
003691  3  00 F0 00 60  
0036A9  3  00 3C 00 3C          .byte 0,60,0,60,0,252,0,60,0,60,0,24,0,63,0,63,0,63,0,63,0,60,0,28,0,12,0,12,0,12,0,60
0036AD  3  00 FC 00 3C  
0036B1  3  00 3C 00 18  
0036C9  3  00 0F 00 0F          .byte 0,15,0,15,0,63,0,15,0,15,0,6,192,15,192,15,192,15,192,15,0,15,0,7,0,3,0,3,0,3,0,15
0036CD  3  00 3F 00 0F  
0036D1  3  00 0F 00 06  
0036E9  3  03 C0 03 C0          .byte 3,192,3,192,51,192,51,192,49,140,63,252,15,240,3,192,3,192,3,240,3,252,3,140,3,60,3,48,3,48,3,0
0036ED  3  33 C0 33 C0  
0036F1  3  31 8C 3F FC  
003709  3  00 F0 00 F0          .byte 0,240,0,240,12,240,12,240,12,99,15,255,3,252,0,240,0,240,0,252,0,255,0,227,0,207,0,204,0,204,0,192
00370D  3  0C F0 0C F0  
003711  3  0C 63 0F FF  
003729  3  00 3C 00 3C          .byte 0,60,0,60,3,60,3,60,195,24,195,255,0,255,0,60,0,60,0,63,192,63,192,56,192,51,0,51,0,51,0,48
00372D  3  03 3C 03 3C  
003731  3  C3 18 C3 FF  
003749  3  00 0F 00 0F          .byte 0,15,0,15,0,207,0,207,48,198,240,255,192,63,0,15,0,15,192,15,240,15,48,14,240,12,192,12,192,12,0,12
00374D  3  00 CF 00 CF  
003751  3  30 C6 F0 FF  
003769  3  03 C0 03 C0          .byte 3,192,3,192,51,192,51,192,49,140,63,252,15,240,3,192,3,192,3,240,3,252,3,140,3,60,3,48,3,48,3,0
00376D  3  33 C0 33 C0  
003771  3  31 8C 3F FC  
003789  3  00 F0 00 F0          .byte 0,240,0,240,12,240,12,240,12,99,15,255,3,252,0,240,0,240,0,252,0,255,0,227,0,207,0,204,0,204,0,192
00378D  3  0C F0 0C F0  
003791  3  0C 63 0F FF  
0037A9  3  00 3C 00 3C          .byte 0,60,0,60,3,60,3,60,195,24,195,255,0,255,0,60,0,60,0,63,192,63,192,56,192,51,0,51,0,51,0,48
0037AD  3  03 3C 03 3C  
0037B1  3  C3 18 C3 FF  
0037C9  3  00 0F 00 0F          .byte 0,15,0,15,0,207,0,207,48,198,240,255,192,63,0,15,0,15,192,15,240,15,48,14,240,12,192,12,192,12,0,12
0037CD  3  00 CF 00 CF  
0037D1  3  30 C6 F0 FF  
0037E9  3  03 C0 03 C0          .byte 3,192,3,192,3,204,3,204,49,140,63,252,15,240,3,192,3,192,15,192,63,192,49,192,60,192,12,192,12,192,0,192
0037ED  3  03 CC 03 CC  
0037F1  3  31 8C 3F FC  
003809  3  00 F0 00 F0          .byte 0,240,0,240,0,243,0,243,12,99,15,255,3,252,0,240,0,240,3,240,15,240,12,112,15,48,3,48,3,48,0,48
00380D  3  00 F3 00 F3  
003811  3  0C 63 0F FF  
003829  3  00 3C 00 3C          .byte 0,60,0,60,192,60,192,60,195,24,195,255,0,255,0,60,0,60,0,252,3,252,3,28,3,204,0,204,0,204,0,12
00382D  3  C0 3C C0 3C  
003831  3  C3 18 C3 FF  
003849  3  00 0F 00 0F          .byte 0,15,0,15,48,15,48,15,48,198,240,255,192,63,0,15,0,15,0,63,0,255,0,199,0,243,0,51,0,51,0,3
00384D  3  30 0F 30 0F  
003851  3  30 C6 F0 FF  
003869  3  03 C0 03 C0          .byte 3,192,3,192,3,204,3,204,49,140,63,252,15,240,3,192,3,192,15,192,63,192,49,192,60,192,12,192,12,192,0,192
00386D  3  03 CC 03 CC  
003871  3  31 8C 3F FC  
003889  3  00 F0 00 F0          .byte 0,240,0,240,0,243,0,243,12,99,15,255,3,252,0,240,0,240,3,240,15,240,12,112,15,48,3,48,3,48,0,48
00388D  3  00 F3 00 F3  
003891  3  0C 63 0F FF  
0038A9  3  00 3C 00 3C          .byte 0,60,0,60,192,60,192,60,195,24,195,255,0,255,0,60,0,60,0,252,3,252,3,28,3,204,0,204,0,204,0,12
0038AD  3  C0 3C C0 3C  
0038B1  3  C3 18 C3 FF  
0038C9  3  00 0F 00 0F          .byte 0,15,0,15,48,15,48,15,48,198,240,255,192,63,0,15,0,15,0,63,0,255,0,199,0,243,0,51,0,51,0,3
0038CD  3  30 0F 30 0F  
0038D1  3  30 C6 F0 FF  
0038E9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,3,192,5,160,7,224,2,64,1,128,15,240,31,248,155,217,147,201,255,255,255,255
0038ED  3  00 00 00 00  
0038F1  3  00 00 03 C0  
003909  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,240,1,104,1,248,0,144,0,96,3,252,7,254,102,246,100,242,255,255,255,255
00390D  3  00 00 00 00  
003911  3  00 00 00 F0  
003929  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,60,0,90,0,126,0,36,0,24,0,255,129,255,153,189,153,60,255,255,255,255
00392D  3  00 00 00 00  
003931  3  00 00 00 3C  
003949  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,15,128,22,128,31,0,9,0,6,192,63,224,127,102,111,38,79,255,255,255,255
00394D  3  00 00 00 00  
003951  3  00 00 00 0F  
003969  3  06 60 00 00          .byte 6,96,0,0,128,0,0,0,0,0,35,192,5,160,7,224,3,192,1,128,15,240,31,248,155,217,147,201,255,255,255,255
00396D  3  80 00 00 00  
003971  3  00 00 23 C0  
003989  3  01 98 00 00          .byte 1,152,0,0,32,0,0,0,0,0,8,240,1,104,1,248,0,240,0,96,3,252,7,254,102,246,100,242,255,255,255,255
00398D  3  20 00 00 00  
003991  3  00 00 08 F0  
0039A9  3  00 66 00 00          .byte 0,102,0,0,8,0,0,0,0,0,2,60,0,90,0,126,0,60,0,24,0,255,129,255,153,189,153,60,255,255,255,255
0039AD  3  08 00 00 00  
0039B1  3  00 00 02 3C  
0039C9  3  80 19 00 00          .byte 128,25,0,0,2,0,0,0,0,0,0,143,128,22,128,31,0,15,0,6,192,63,224,127,102,111,38,79,255,255,255,255
0039CD  3  02 00 00 00  
0039D1  3  00 00 00 8F  
0039E9  3  01 80 10 18          .byte 1,128,16,24,0,0,0,1,0,0,3,192,5,160,7,224,3,192,1,128,15,240,31,248,155,217,147,201,255,255,255,255
0039ED  3  00 00 00 01  
0039F1  3  00 00 03 C0  
003A09  3  00 60 04 06          .byte 0,96,4,6,0,0,64,0,0,0,0,240,1,104,1,248,0,240,0,96,3,252,7,254,102,246,100,242,255,255,255,255
003A0D  3  00 00 40 00  
003A11  3  00 00 00 F0  
003A29  3  00 18 81 01          .byte 0,24,129,1,0,0,16,0,0,0,0,60,0,90,0,126,0,60,0,24,0,255,129,255,153,189,153,60,255,255,255,255
003A2D  3  00 00 10 00  
003A31  3  00 00 00 3C  
003A49  3  00 06 60 40          .byte 0,6,96,64,0,0,4,0,0,0,0,15,128,22,128,31,0,15,0,6,192,63,224,127,102,111,38,79,255,255,255,255
003A4D  3  00 00 04 00  
003A51  3  00 00 00 0F  
003A69  3  00 00 00 00          .byte 0,0,0,0,64,0,0,0,0,4,3,192,5,160,7,224,3,192,1,128,15,240,31,248,155,217,147,201,255,255,255,255
003A6D  3  40 00 00 00  
003A71  3  00 04 03 C0  
003A89  3  00 00 00 00          .byte 0,0,0,0,16,0,0,0,0,1,0,240,1,104,1,248,0,240,0,96,3,252,7,254,102,246,100,242,255,255,255,255
003A8D  3  10 00 00 00  
003A91  3  00 01 00 F0  
003AA9  3  00 00 00 00          .byte 0,0,0,0,4,0,0,0,64,0,0,60,0,90,0,126,0,60,0,24,0,255,129,255,153,189,153,60,255,255,255,255
003AAD  3  04 00 00 00  
003AB1  3  40 00 00 3C  
003AC9  3  00 00 00 00          .byte 0,0,0,0,1,0,0,0,16,0,0,15,128,22,128,31,0,15,0,6,192,63,224,127,102,111,38,79,255,255,255,255
003ACD  3  01 00 00 00  
003AD1  3  10 00 00 0F  
003AE9  3  FF 00 FF 00          .byte 255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003AED  3  FF 00 FF 00  
003AF1  3  FF 00 FF 00  
003B09  3  3F C0 3F C0          .byte 63,192,63,192,63,192,63,192,63,192,63,192,63,192,63,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003B0D  3  3F C0 3F C0  
003B11  3  3F C0 3F C0  
003B29  3  0F F0 0F F0          .byte 15,240,15,240,15,240,15,240,15,240,15,240,15,240,15,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003B2D  3  0F F0 0F F0  
003B31  3  0F F0 0F F0  
003B49  3  03 FC 03 FC          .byte 3,252,3,252,3,252,3,252,3,252,3,252,3,252,3,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003B4D  3  03 FC 03 FC  
003B51  3  03 FC 03 FC  
003B69  3  3C 00 3C 00          .byte 60,0,60,0,255,0,255,0,255,0,255,0,60,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003B6D  3  FF 00 FF 00  
003B71  3  FF 00 FF 00  
003B89  3  0F 00 0F 00          .byte 15,0,15,0,63,192,63,192,63,192,63,192,15,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003B8D  3  3F C0 3F C0  
003B91  3  3F C0 3F C0  
003BA9  3  03 C0 03 C0          .byte 3,192,3,192,15,240,15,240,15,240,15,240,3,192,3,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003BAD  3  0F F0 0F F0  
003BB1  3  0F F0 0F F0  
003BC9  3  00 F0 00 F0          .byte 0,240,0,240,3,252,3,252,3,252,3,252,0,240,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003BCD  3  03 FC 03 FC  
003BD1  3  03 FC 03 FC  
003BE9  3  00 00 00 00          .byte 0,0,0,0,24,0,60,0,60,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003BED  3  18 00 3C 00  
003BF1  3  3C 00 18 00  
003C09  3  00 00 00 00          .byte 0,0,0,0,6,0,15,0,15,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003C0D  3  06 00 0F 00  
003C11  3  0F 00 06 00  
003C29  3  00 00 00 00          .byte 0,0,0,0,1,128,3,192,3,192,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003C2D  3  01 80 03 C0  
003C31  3  03 C0 01 80  
003C49  3  00 00 00 00          .byte 0,0,0,0,0,96,0,240,0,240,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003C4D  3  00 60 00 F0  
003C51  3  00 F0 00 60  
003C69  3  00 00 42 00          .byte 0,0,66,0,24,0,60,0,60,0,24,0,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003C6D  3  18 00 3C 00  
003C71  3  3C 00 18 00  
003C89  3  00 00 10 80          .byte 0,0,16,128,6,0,15,0,15,0,6,0,16,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003C8D  3  06 00 0F 00  
003C91  3  0F 00 06 00  
003CA9  3  00 00 04 20          .byte 0,0,4,32,1,128,3,192,3,192,1,128,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003CAD  3  01 80 03 C0  
003CB1  3  03 C0 01 80  
003CC9  3  00 00 01 08          .byte 0,0,1,8,0,96,0,240,0,240,0,96,1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003CCD  3  00 60 00 F0  
003CD1  3  00 F0 00 60  
003CE9  3  FF 00 FF 00          .byte 255,0,255,0,195,0,195,0,195,0,195,0,255,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003CED  3  C3 00 C3 00  
003CF1  3  C3 00 C3 00  
003D09  3  3F C0 3F C0          .byte 63,192,63,192,48,192,48,192,48,192,48,192,63,192,63,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003D0D  3  30 C0 30 C0  
003D11  3  30 C0 30 C0  
003D29  3  0F F0 0F F0          .byte 15,240,15,240,12,48,12,48,12,48,12,48,15,240,15,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003D2D  3  0C 30 0C 30  
003D31  3  0C 30 0C 30  
003D49  3  03 FC 03 FC          .byte 3,252,3,252,3,12,3,12,3,12,3,12,3,252,3,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003D4D  3  03 0C 03 0C  
003D51  3  03 0C 03 0C  
003D69  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,231,231,231,231,255,255,255,255,255,255,123,222,49,140
003D6D  3  00 00 00 00  
003D71  3  00 00 00 00  
003D89  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,255,249,249,249,249,255,255,255,255,255,255,158,247,12,99
003D8D  3  00 00 00 00  
003D91  3  00 00 00 00  
003DA9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,255,126,126,126,126,255,255,255,255,255,255,231,189,195,24
003DAD  3  00 00 00 00  
003DB1  3  00 00 00 00  
003DC9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,159,159,159,159,255,255,255,255,255,255,121,239,48,198
003DCD  3  00 00 00 00  
003DD1  3  00 00 00 00  
003DE9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,231,231,231,231,255,255,255,255,255,255,238,119,68,34
003DED  3  00 00 00 00  
003DF1  3  00 00 00 00  
003E09  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,255,249,249,249,249,255,255,255,255,255,255,251,157,145,8
003E0D  3  00 00 00 00  
003E11  3  00 00 00 00  
003E29  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,255,126,126,126,126,255,255,255,255,255,255,126,231,36,66
003E2D  3  00 00 00 00  
003E31  3  00 00 00 00  
003E49  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,159,159,159,159,255,255,255,255,255,255,223,185,137,16
003E4D  3  00 00 00 00  
003E51  3  00 00 00 00  
003E69  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,128,1,152,25,128,1,128,1,132,33,74,82,49,140
003E6D  3  00 00 00 00  
003E71  3  00 00 00 00  
003E89  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,255,96,0,102,6,96,0,96,0,97,8,146,148,12,99
003E8D  3  00 00 00 00  
003E91  3  00 00 00 00  
003EA9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,255,24,0,153,129,24,0,24,0,24,66,36,165,195,24
003EAD  3  00 00 00 00  
003EB1  3  00 00 00 00  
003EC9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,6,0,102,96,6,0,6,0,134,16,73,41,48,198
003ECD  3  00 00 00 00  
003ED1  3  00 00 00 00  
003EE9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,128,1,152,25,128,1,128,1,145,137,170,85,68,34
003EED  3  00 00 00 00  
003EF1  3  00 00 00 00  
003F09  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,255,96,0,102,6,96,0,96,0,100,98,106,149,145,8
003F0D  3  00 00 00 00  
003F11  3  00 00 00 00  
003F29  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,255,24,0,153,129,24,0,24,0,153,24,90,165,36,66
003F2D  3  00 00 00 00  
003F31  3  00 00 00 00  
003F49  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,6,0,102,96,6,0,6,0,38,70,86,169,137,16
003F4D  3  00 00 00 00  
003F51  3  00 00 00 00  
003F69  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,128,1,152,25,128,1,128,1,132,33,74,82,49,140
003F6D  3  00 00 00 00  
003F71  3  00 00 00 00  
003F89  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,255,96,0,102,6,96,0,96,0,97,8,146,148,12,99
003F8D  3  00 00 00 00  
003F91  3  00 00 00 00  
003FA9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,255,24,0,153,129,24,0,24,0,24,66,36,165,195,24
003FAD  3  00 00 00 00  
003FB1  3  00 00 00 00  
003FC9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,6,0,102,96,6,0,6,0,134,16,73,41,48,198
003FCD  3  00 00 00 00  
003FD1  3  00 00 00 00  
003FE9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,128,1,152,25,128,1,128,1,145,137,170,85,68,34
003FED  3  00 00 00 00  
003FF1  3  00 00 00 00  
004009  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,255,96,0,102,6,96,0,96,0,100,98,106,149,145,8
00400D  3  00 00 00 00  
004011  3  00 00 00 00  
004029  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,255,24,0,153,129,24,0,24,0,153,24,90,165,36,66
00402D  3  00 00 00 00  
004031  3  00 00 00 00  
004049  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,6,0,102,96,6,0,6,0,38,70,86,169,137,16
00404D  3  00 00 00 00  
004051  3  00 00 00 00  
004069  3  7F FE C3 C3          .byte 127,254,195,195,153,153,161,161,161,161,129,129,195,195,255,255,255,255,195,195,153,153,161,161,161,161,129,129,195,195,127,254
00406D  3  99 99 A1 A1  
004071  3  A1 A1 81 81  
004089  3  9F FF F0 F0          .byte 159,255,240,240,102,102,104,104,104,104,96,96,240,240,255,255,255,255,240,240,102,102,104,104,104,104,96,96,240,240,159,255
00408D  3  66 66 68 68  
004091  3  68 68 60 60  
0040A9  3  E7 FF 3C 3C          .byte 231,255,60,60,153,153,26,26,26,26,24,24,60,60,255,255,255,255,60,60,153,153,26,26,26,26,24,24,60,60,231,255
0040AD  3  99 99 1A 1A  
0040B1  3  1A 1A 18 18  
0040C9  3  F9 FF 0F 0F          .byte 249,255,15,15,102,102,134,134,134,134,6,6,15,15,255,255,255,255,15,15,102,102,134,134,134,134,6,6,15,15,249,255
0040CD  3  66 66 86 86  
0040D1  3  86 86 06 06  
0040E9  3  F0 78 F0 78          .byte 240,120,240,120,255,255,0,0,255,255,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0040ED  3  FF FF 00 00  
0040F1  3  FF FF C3 C3  
004109  3  3C 1E 3C 1E          .byte 60,30,60,30,255,255,0,0,255,255,240,240,240,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00410D  3  FF FF 00 00  
004111  3  FF FF F0 F0  
004129  3  8F 07 8F 07          .byte 143,7,143,7,255,255,0,0,255,255,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00412D  3  FF FF 00 00  
004131  3  FF FF 3C 3C  
004149  3  E3 C1 E3 C1          .byte 227,193,227,193,255,255,0,0,255,255,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00414D  3  FF FF 00 00  
004151  3  FF FF 0F 0F  
004169  3  C3 C3 C3 C3          .byte 195,195,195,195,255,255,0,0,255,255,240,240,240,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00416D  3  FF FF 00 00  
004171  3  FF FF F0 F0  
004189  3  F0 F0 F0 F0          .byte 240,240,240,240,255,255,0,0,255,255,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00418D  3  FF FF 00 00  
004191  3  FF FF 3C 3C  
0041A9  3  3C 3C 3C 3C          .byte 60,60,60,60,255,255,0,0,255,255,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0041AD  3  FF FF 00 00  
0041B1  3  FF FF 0F 0F  
0041C9  3  0F 0F 0F 0F          .byte 15,15,15,15,255,255,0,0,255,255,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0041CD  3  FF FF 00 00  
0041D1  3  FF FF C3 C3  
0041E9  3  1E 1E 1E 1E          .byte 30,30,30,30,255,255,0,0,255,255,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0041ED  3  FF FF 00 00  
0041F1  3  FF FF 0F 0F  
004209  3  87 87 87 87          .byte 135,135,135,135,255,255,0,0,255,255,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00420D  3  FF FF 00 00  
004211  3  FF FF C3 C3  
004229  3  E1 E1 E1 E1          .byte 225,225,225,225,255,255,0,0,255,255,240,240,240,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00422D  3  FF FF 00 00  
004231  3  FF FF F0 F0  
004249  3  78 78 78 78          .byte 120,120,120,120,255,255,0,0,255,255,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00424D  3  FF FF 00 00  
004251  3  FF FF 3C 3C  
004269  3  3C 3C 3C 3C          .byte 60,60,60,60,255,255,0,0,255,255,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00426D  3  FF FF 00 00  
004271  3  FF FF 0F 0F  
004289  3  0F 0F 0F 0F          .byte 15,15,15,15,255,255,0,0,255,255,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00428D  3  FF FF 00 00  
004291  3  FF FF C3 C3  
0042A9  3  C3 C3 C3 C3          .byte 195,195,195,195,255,255,0,0,255,255,240,240,240,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0042AD  3  FF FF 00 00  
0042B1  3  FF FF F0 F0  
0042C9  3  F0 F0 F0 F0          .byte 240,240,240,240,255,255,0,0,255,255,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0042CD  3  FF FF 00 00  
0042D1  3  FF FF 3C 3C  
0042E9  3  1E 0F 1E 0F          .byte 30,15,30,15,255,255,0,0,255,255,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0042ED  3  FF FF 00 00  
0042F1  3  FF FF C3 C3  
004309  3  C7 83 C7 83          .byte 199,131,199,131,255,255,0,0,255,255,240,240,240,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00430D  3  FF FF 00 00  
004311  3  FF FF F0 F0  
004329  3  F1 E0 F1 E0          .byte 241,224,241,224,255,255,0,0,255,255,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00432D  3  FF FF 00 00  
004331  3  FF FF 3C 3C  
004349  3  3C 78 3C 78          .byte 60,120,60,120,255,255,0,0,255,255,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00434D  3  FF FF 00 00  
004351  3  FF FF 0F 0F  
004369  3  C3 C3 C3 C3          .byte 195,195,195,195,255,255,0,0,255,255,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00436D  3  FF FF 00 00  
004371  3  FF FF 0F 0F  
004389  3  F0 F0 F0 F0          .byte 240,240,240,240,255,255,0,0,255,255,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00438D  3  FF FF 00 00  
004391  3  FF FF C3 C3  
0043A9  3  3C 3C 3C 3C          .byte 60,60,60,60,255,255,0,0,255,255,240,240,240,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0043AD  3  FF FF 00 00  
0043B1  3  FF FF F0 F0  
0043C9  3  0F 0F 0F 0F          .byte 15,15,15,15,255,255,0,0,255,255,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0043CD  3  FF FF 00 00  
0043D1  3  FF FF 3C 3C  
0043E9  3  78 78 78 78          .byte 120,120,120,120,255,255,0,0,255,255,240,240,240,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0043ED  3  FF FF 00 00  
0043F1  3  FF FF F0 F0  
004409  3  1E 1E 1E 1E          .byte 30,30,30,30,255,255,0,0,255,255,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00440D  3  FF FF 00 00  
004411  3  FF FF 3C 3C  
004429  3  87 87 87 87          .byte 135,135,135,135,255,255,0,0,255,255,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00442D  3  FF FF 00 00  
004431  3  FF FF 0F 0F  
004449  3  E1 E1 E1 E1          .byte 225,225,225,225,255,255,0,0,255,255,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00444D  3  FF FF 00 00  
004451  3  FF FF C3 C3  
004469  3  3C 3C 3C 3C          .byte 60,60,60,60,255,255,0,0,255,255,240,240,240,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00446D  3  FF FF 00 00  
004471  3  FF FF F0 F0  
004489  3  0F 0F 0F 0F          .byte 15,15,15,15,255,255,0,0,255,255,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00448D  3  FF FF 00 00  
004491  3  FF FF 3C 3C  
0044A9  3  C3 C3 C3 C3          .byte 195,195,195,195,255,255,0,0,255,255,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0044AD  3  FF FF 00 00  
0044B1  3  FF FF 0F 0F  
0044C9  3  F0 F0 F0 F0          .byte 240,240,240,240,255,255,0,0,255,255,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0044CD  3  FF FF 00 00  
0044D1  3  FF FF C3 C3  
0044E9  3  1B C8 33 C4          .byte 27,200,51,196,3,240,67,194,3,192,193,131,79,192,79,193,143,192,79,194,3,195,35,128,67,6,3,4,51,0,19,204
0044ED  3  03 F0 43 C2  
0044F1  3  03 C0 C1 83  
004509  3  06 F2 0C F1          .byte 6,242,12,241,0,252,144,240,0,240,240,96,19,240,83,240,35,240,147,240,192,240,8,224,144,193,0,193,12,192,4,243
00450D  3  00 FC 90 F0  
004511  3  00 F0 F0 60  
004529  3  81 BC 43 3C          .byte 129,188,67,60,0,63,36,60,0,60,60,24,4,252,20,252,8,252,36,252,48,60,2,56,100,48,64,48,3,48,193,60
00452D  3  00 3F 24 3C  
004531  3  00 3C 3C 18  
004549  3  20 6F 10 CF          .byte 32,111,16,207,192,15,9,15,0,15,15,6,1,63,5,63,2,63,9,63,12,15,0,142,25,12,16,12,0,204,48,79
00454D  3  C0 0F 09 0F  
004551  3  00 0F 0F 06  
004569  3  1B C4 23 C0          .byte 27,196,35,192,35,242,3,192,35,194,129,130,207,193,143,192,207,249,79,249,131,192,195,242,135,49,14,24,60,12,32,14
00456D  3  23 F2 03 C0  
004571  3  23 C2 81 82  
004589  3  06 F1 08 F0          .byte 6,241,8,240,136,252,0,240,136,240,160,96,115,240,35,240,115,254,83,254,32,240,176,252,97,204,3,134,15,3,136,3
00458D  3  88 FC 00 F0  
004591  3  88 F0 A0 60  
0045A9  3  41 BC 02 3C          .byte 65,188,2,60,34,63,0,60,34,60,40,24,28,252,8,252,156,255,148,255,8,60,44,63,24,115,128,225,195,192,226,0
0045AD  3  22 3F 00 3C  
0045B1  3  22 3C 28 18  
0045C9  3  10 6F 00 8F          .byte 16,111,0,143,200,143,0,15,8,143,10,6,7,63,2,63,231,63,229,63,2,15,203,15,198,28,96,56,48,240,56,128
0045CD  3  C8 8F 00 0F  
0045D1  3  08 8F 0A 06  
0045E9  3  03 C0 03 C0          .byte 3,192,3,192,3,240,3,192,3,192,1,128,15,192,15,192,15,192,15,192,3,192,3,128,3,0,3,0,3,0,3,192
0045ED  3  03 F0 03 C0  
0045F1  3  03 C0 01 80  
004609  3  00 F0 00 F0          .byte 0,240,0,240,0,252,0,240,0,240,0,96,3,240,3,240,3,240,3,240,0,240,0,224,0,192,0,192,0,192,0,240
00460D  3  00 FC 00 F0  
004611  3  00 F0 00 60  
004629  3  00 3C 00 3C          .byte 0,60,0,60,0,63,0,60,0,60,0,24,0,252,0,252,0,252,0,252,0,60,0,56,0,48,0,48,0,48,0,60
00462D  3  00 3F 00 3C  
004631  3  00 3C 00 18  
004649  3  00 0F 00 0F          .byte 0,15,0,15,192,15,0,15,0,15,0,6,0,63,0,63,0,63,0,63,0,15,0,14,0,12,0,12,0,12,0,15
00464D  3  C0 0F 00 0F  
004651  3  00 0F 00 06  
004669  3  13 D8 23 CC          .byte 19,216,35,204,15,192,67,194,3,192,193,131,3,242,131,242,3,241,67,242,195,192,1,196,96,194,32,192,0,204,51,200
00466D  3  0F C0 43 C2  
004671  3  03 C0 C1 83  
004689  3  04 F6 08 F3          .byte 4,246,8,243,3,240,144,240,0,240,240,96,128,252,160,252,64,252,144,252,48,240,0,113,152,48,8,48,0,51,12,242
00468D  3  03 F0 90 F0  
004691  3  00 F0 F0 60  
0046A9  3  81 3D C2 3C          .byte 129,61,194,60,0,252,36,60,0,60,60,24,32,63,40,63,16,63,36,63,12,60,64,28,38,12,2,12,192,12,131,60
0046AD  3  00 FC 24 3C  
0046B1  3  00 3C 3C 18  
0046C9  3  60 4F 30 8F          .byte 96,79,48,143,0,63,9,15,0,15,15,6,200,15,202,15,196,15,201,15,3,15,16,7,9,131,0,131,48,3,32,207
0046CD  3  00 3F 09 0F  
0046D1  3  00 0F 0F 06  
0046E9  3  23 D8 03 C4          .byte 35,216,3,196,79,196,3,192,67,196,65,129,131,243,3,241,159,243,159,242,3,193,79,195,140,225,24,112,48,60,112,4
0046ED  3  4F C4 03 C0  
0046F1  3  43 C4 41 81  
004709  3  08 F6 00 F1          .byte 8,246,0,241,19,241,0,240,16,241,80,96,224,252,64,252,231,252,167,252,64,240,211,240,99,56,6,28,12,15,28,1
00470D  3  13 F1 00 F0  
004711  3  10 F1 50 60  
004729  3  82 3D 40 3C          .byte 130,61,64,60,68,252,0,60,68,60,20,24,56,63,16,63,57,255,41,255,16,60,52,252,24,206,1,135,195,3,71,0
00472D  3  44 FC 00 3C  
004731  3  44 3C 14 18  
004749  3  60 8F 10 0F          .byte 96,143,16,15,17,63,0,15,17,15,5,6,206,15,196,15,206,127,202,127,4,15,13,63,134,51,192,97,240,192,17,192
00474D  3  11 3F 00 0F  
004751  3  11 0F 05 06  
004769  3  03 C0 03 C0          .byte 3,192,3,192,15,192,3,192,3,192,1,128,3,240,3,240,3,240,3,240,3,192,1,192,0,192,0,192,0,192,3,192
00476D  3  0F C0 03 C0  
004771  3  03 C0 01 80  
004789  3  00 F0 00 F0          .byte 0,240,0,240,3,240,0,240,0,240,0,96,0,252,0,252,0,252,0,252,0,240,0,112,0,48,0,48,0,48,0,240
00478D  3  03 F0 00 F0  
004791  3  00 F0 00 60  
0047A9  3  00 3C 00 3C          .byte 0,60,0,60,0,252,0,60,0,60,0,24,0,63,0,63,0,63,0,63,0,60,0,28,0,12,0,12,0,12,0,60
0047AD  3  00 FC 00 3C  
0047B1  3  00 3C 00 18  
0047C9  3  00 0F 00 0F          .byte 0,15,0,15,0,63,0,15,0,15,0,6,192,15,192,15,192,15,192,15,0,15,0,7,0,3,0,3,0,3,0,15
0047CD  3  00 3F 00 0F  
0047D1  3  00 0F 00 06  
0047E9  3  13 D8 23 CC          .byte 19,216,35,204,3,192,91,194,25,152,223,249,15,242,131,194,3,193,67,242,195,248,3,137,99,57,35,48,3,50,55,4
0047ED  3  03 C0 5B C2  
0047F1  3  19 98 DF F9  
004809  3  04 F6 08 F3          .byte 4,246,8,243,0,240,150,240,6,102,119,254,131,252,160,240,64,240,144,252,48,254,64,226,88,206,8,204,128,204,13,193
00480D  3  00 F0 96 F0  
004811  3  06 66 77 FE  
004829  3  81 3D C2 3C          .byte 129,61,194,60,0,60,37,188,129,153,157,255,32,255,40,60,16,60,36,63,140,63,144,56,150,51,2,51,32,51,67,112
00482D  3  00 3C 25 BC  
004831  3  81 99 9D FF  
004849  3  60 4F 30 8F          .byte 96,79,48,143,0,15,9,111,96,102,231,127,200,63,10,15,4,15,201,15,227,15,36,14,229,140,192,140,200,12,16,220
00484D  3  00 0F 09 6F  
004851  3  60 66 E7 7F  
004869  3  1B C8 33 C4          .byte 27,200,51,196,3,192,67,218,25,152,159,251,79,240,67,193,131,192,79,194,31,195,145,192,156,198,12,196,76,192,32,236
00486D  3  03 C0 43 DA  
004871  3  19 98 9F FB  
004889  3  06 F2 0C F1          .byte 6,242,12,241,0,240,144,246,6,102,231,254,19,252,80,240,32,240,147,240,199,240,36,112,167,49,3,49,19,48,8,59
00488D  3  00 F0 90 F6  
004891  3  06 66 E7 FE  
0048A9  3  81 BC 43 3C          .byte 129,188,67,60,0,60,164,61,129,153,185,255,4,255,20,60,8,60,36,252,49,252,9,28,105,204,64,204,4,204,194,14
0048AD  3  00 3C A4 3D  
0048B1  3  81 99 B9 FF  
0048C9  3  20 6F 10 CF          .byte 32,111,16,207,0,15,105,15,96,102,238,127,193,63,5,15,2,15,9,63,12,127,2,71,26,115,16,51,1,51,176,131
0048CD  3  00 0F 69 0F  
0048D1  3  60 66 EE 7F  
0048E9  3  08 88 05 D0          .byte 8,136,5,208,7,240,0,0,3,224,6,176,4,144,11,104,73,201,88,13,50,166,4,16,8,8,31,252,2,32,6,48
0048ED  3  07 F0 00 00  
0048F1  3  03 E0 06 B0  
004909  3  02 22 01 74          .byte 2,34,1,116,1,252,0,0,0,248,1,172,1,36,2,218,82,114,86,3,140,169,1,4,2,2,7,255,0,136,1,140
00490D  3  01 FC 00 00  
004911  3  00 F8 01 AC  
004929  3  80 88 00 5D          .byte 128,136,0,93,0,127,0,0,0,62,0,107,0,73,128,182,148,156,213,128,99,42,0,65,128,128,193,255,0,34,0,99
00492D  3  00 7F 00 00  
004931  3  00 3E 00 6B  
004949  3  20 22 40 17          .byte 32,34,64,23,192,31,0,0,128,15,192,26,64,18,160,45,37,39,53,96,152,202,64,16,32,32,240,127,128,8,192,24
00494D  3  C0 1F 00 00  
004951  3  80 0F C0 1A  
004969  3  08 88 05 D0          .byte 8,136,5,208,7,240,0,0,3,224,6,176,4,144,11,104,73,201,88,13,50,166,4,16,8,8,31,252,6,32,0,48
00496D  3  07 F0 00 00  
004971  3  03 E0 06 B0  
004989  3  02 22 01 74          .byte 2,34,1,116,1,252,0,0,0,248,1,172,1,36,2,218,82,114,86,3,140,169,1,4,2,2,7,255,1,136,0,12
00498D  3  01 FC 00 00  
004991  3  00 F8 01 AC  
0049A9  3  80 88 00 5D          .byte 128,136,0,93,0,127,0,0,0,62,0,107,0,73,128,182,148,156,213,128,99,42,0,65,128,128,193,255,0,98,0,3
0049AD  3  00 7F 00 00  
0049B1  3  00 3E 00 6B  
0049C9  3  20 22 40 17          .byte 32,34,64,23,192,31,0,0,128,15,192,26,64,18,160,45,37,39,53,96,152,202,64,16,32,32,240,127,128,24,192,0
0049CD  3  C0 1F 00 00  
0049D1  3  80 0F C0 1A  
0049E9  3  08 88 05 D0          .byte 8,136,5,208,7,240,0,0,3,224,6,176,4,144,11,104,73,201,88,13,50,166,4,16,8,8,31,252,0,32,0,48
0049ED  3  07 F0 00 00  
0049F1  3  03 E0 06 B0  
004A09  3  02 22 01 74          .byte 2,34,1,116,1,252,0,0,0,248,1,172,1,36,2,218,82,114,86,3,140,169,1,4,2,2,7,255,0,8,0,12
004A0D  3  01 FC 00 00  
004A11  3  00 F8 01 AC  
004A29  3  80 88 00 5D          .byte 128,136,0,93,0,127,0,0,0,62,0,107,0,73,128,182,148,156,213,128,99,42,0,65,128,128,193,255,0,2,0,3
004A2D  3  00 7F 00 00  
004A31  3  00 3E 00 6B  
004A49  3  20 22 40 17          .byte 32,34,64,23,192,31,0,0,128,15,192,26,64,18,160,45,37,39,53,96,152,202,64,16,32,32,240,127,128,0,192,0
004A4D  3  C0 1F 00 00  
004A51  3  80 0F C0 1A  
004A69  3  08 88 05 D0          .byte 8,136,5,208,7,240,0,0,3,224,6,176,4,144,11,104,73,201,88,13,50,166,4,16,8,8,31,252,6,32,0,48
004A6D  3  07 F0 00 00  
004A71  3  03 E0 06 B0  
004A89  3  02 22 01 74          .byte 2,34,1,116,1,252,0,0,0,248,1,172,1,36,2,218,82,114,86,3,140,169,1,4,2,2,7,255,1,136,0,12
004A8D  3  01 FC 00 00  
004A91  3  00 F8 01 AC  
004AA9  3  80 88 00 5D          .byte 128,136,0,93,0,127,0,0,0,62,0,107,0,73,128,182,148,156,213,128,99,42,0,65,128,128,193,255,0,98,0,3
004AAD  3  00 7F 00 00  
004AB1  3  00 3E 00 6B  
004AC9  3  20 22 40 17          .byte 32,34,64,23,192,31,0,0,128,15,192,26,64,18,160,45,37,39,53,96,152,202,64,16,32,32,240,127,128,24,192,0
004ACD  3  C0 1F 00 00  
004AD1  3  80 0F C0 1A  
004AE9  3  00 00 00 00          .byte 0,0,0,0,0,0,24,24,24,24,0,0,0,0,0,0,0,0,0,0,0,0,24,24,24,24,0,0,0,0,0,0
004AED  3  00 00 18 18  
004AF1  3  18 18 00 00  
004B09  3  00 00 00 00          .byte 0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0
004B0D  3  00 00 06 06  
004B11  3  06 06 00 00  
004B29  3  00 00 00 00          .byte 0,0,0,0,0,0,129,129,129,129,0,0,0,0,0,0,0,0,0,0,0,0,129,129,129,129,0,0,0,0,0,0
004B2D  3  00 00 81 81  
004B31  3  81 81 00 00  
004B49  3  00 00 00 00          .byte 0,0,0,0,0,0,96,96,96,96,0,0,0,0,0,0,0,0,0,0,0,0,96,96,96,96,0,0,0,0,0,0
004B4D  3  00 00 60 60  
004B51  3  60 60 00 00  
004B69  3  00 00 00 00          .byte 0,0,0,0,36,36,24,24,24,24,36,36,0,0,0,0,0,0,0,0,36,36,24,24,24,24,36,36,0,0,0,0
004B6D  3  24 24 18 18  
004B71  3  18 18 24 24  
004B89  3  00 00 00 00          .byte 0,0,0,0,9,9,6,6,6,6,9,9,0,0,0,0,0,0,0,0,9,9,6,6,6,6,9,9,0,0,0,0
004B8D  3  09 09 06 06  
004B91  3  06 06 09 09  
004BA9  3  00 00 00 00          .byte 0,0,0,0,66,66,129,129,129,129,66,66,0,0,0,0,0,0,0,0,66,66,129,129,129,129,66,66,0,0,0,0
004BAD  3  42 42 81 81  
004BB1  3  81 81 42 42  
004BC9  3  00 00 00 00          .byte 0,0,0,0,144,144,96,96,96,96,144,144,0,0,0,0,0,0,0,0,144,144,96,96,96,96,144,144,0,0,0,0
004BCD  3  90 90 60 60  
004BD1  3  60 60 90 90  
004BE9  3  00 00 42 42          .byte 0,0,66,66,36,36,24,24,24,24,36,36,66,66,0,0,0,0,66,66,36,36,24,24,24,24,36,36,66,66,0,0
004BED  3  24 24 18 18  
004BF1  3  18 18 24 24  
004C09  3  00 00 90 90          .byte 0,0,144,144,9,9,6,6,6,6,9,9,144,144,0,0,0,0,144,144,9,9,6,6,6,6,9,9,144,144,0,0
004C0D  3  09 09 06 06  
004C11  3  06 06 09 09  
004C29  3  00 00 24 24          .byte 0,0,36,36,66,66,129,129,129,129,66,66,36,36,0,0,0,0,36,36,66,66,129,129,129,129,66,66,36,36,0,0
004C2D  3  42 42 81 81  
004C31  3  81 81 42 42  
004C49  3  00 00 09 09          .byte 0,0,9,9,144,144,96,96,96,96,144,144,9,9,0,0,0,0,9,9,144,144,96,96,96,96,144,144,9,9,0,0
004C4D  3  90 90 60 60  
004C51  3  60 60 90 90  
004C69  3  00 00 3C 3C          .byte 0,0,60,60,126,126,102,102,102,102,126,126,60,60,0,0,0,0,60,60,126,126,102,102,102,102,126,126,60,60,0,0
004C6D  3  7E 7E 66 66  
004C71  3  66 66 7E 7E  
004C89  3  00 00 0F 0F          .byte 0,0,15,15,159,159,153,153,153,153,159,159,15,15,0,0,0,0,15,15,159,159,153,153,153,153,159,159,15,15,0,0
004C8D  3  9F 9F 99 99  
004C91  3  99 99 9F 9F  
004CA9  3  00 00 C3 C3          .byte 0,0,195,195,231,231,102,102,102,102,231,231,195,195,0,0,0,0,195,195,231,231,102,102,102,102,231,231,195,195,0,0
004CAD  3  E7 E7 66 66  
004CB1  3  66 66 E7 E7  
004CC9  3  00 00 F0 F0          .byte 0,0,240,240,249,249,153,153,153,153,249,249,240,240,0,0,0,0,240,240,249,249,153,153,153,153,249,249,240,240,0,0
004CCD  3  F9 F9 99 99  
004CD1  3  99 99 F9 F9  
004CE9  3  7F FE C3 C3          .byte 127,254,195,195,129,129,129,129,129,129,129,129,195,195,255,255,255,255,210,75,146,73,146,73,146,73,146,73,255,255,63,252
004CED  3  81 81 81 81  
004CF1  3  81 81 81 81  
004D09  3  9F FF F0 F0          .byte 159,255,240,240,96,96,96,96,96,96,96,96,240,240,255,255,255,255,244,146,100,146,100,146,100,146,100,146,255,255,15,255
004D0D  3  60 60 60 60  
004D11  3  60 60 60 60  
004D29  3  E7 FF 3C 3C          .byte 231,255,60,60,24,24,24,24,24,24,24,24,60,60,255,255,255,255,189,36,153,36,153,36,153,36,153,36,255,255,195,255
004D2D  3  18 18 18 18  
004D31  3  18 18 18 18  
004D49  3  F9 FF 0F 0F          .byte 249,255,15,15,6,6,6,6,6,6,6,6,15,15,255,255,255,255,47,73,38,73,38,73,38,73,38,73,255,255,240,255
004D4D  3  06 06 06 06  
004D51  3  06 06 06 06  
004D69  3  7F FE C3 C3          .byte 127,254,195,195,129,129,153,153,153,153,129,129,195,195,255,255,255,255,210,75,146,73,146,73,146,73,146,73,255,255,63,252
004D6D  3  81 81 99 99  
004D71  3  99 99 81 81  
004D89  3  9F FF F0 F0          .byte 159,255,240,240,96,96,102,102,102,102,96,96,240,240,255,255,255,255,244,146,100,146,100,146,100,146,100,146,255,255,15,255
004D8D  3  60 60 66 66  
004D91  3  66 66 60 60  
004DA9  3  E7 FF 3C 3C          .byte 231,255,60,60,24,24,153,153,153,153,24,24,60,60,255,255,255,255,189,36,153,36,153,36,153,36,153,36,255,255,195,255
004DAD  3  18 18 99 99  
004DB1  3  99 99 18 18  
004DC9  3  F9 FF 0F 0F          .byte 249,255,15,15,6,6,102,102,102,102,6,6,15,15,255,255,255,255,47,73,38,73,38,73,38,73,38,73,255,255,240,255
004DCD  3  06 06 66 66  
004DD1  3  66 66 06 06  
004DE9  3  7F FE C3 C3          .byte 127,254,195,195,129,129,129,129,129,129,129,129,195,195,255,255,255,255,210,75,146,73,146,73,146,73,146,73,255,255,63,252
004DED  3  81 81 81 81  
004DF1  3  81 81 81 81  
004E09  3  9F FF F0 F0          .byte 159,255,240,240,96,96,96,96,96,96,96,96,240,240,255,255,255,255,244,146,100,146,100,146,100,146,100,146,255,255,15,255
004E0D  3  60 60 60 60  
004E11  3  60 60 60 60  
004E29  3  E7 FF 3C 3C          .byte 231,255,60,60,24,24,24,24,24,24,24,24,60,60,255,255,255,255,189,36,153,36,153,36,153,36,153,36,255,255,195,255
004E2D  3  18 18 18 18  
004E31  3  18 18 18 18  
004E49  3  F9 FF 0F 0F          .byte 249,255,15,15,6,6,6,6,6,6,6,6,15,15,255,255,255,255,47,73,38,73,38,73,38,73,38,73,255,255,240,255
004E4D  3  06 06 06 06  
004E51  3  06 06 06 06  
004E69  3  FF FF C3 C3          .byte 255,255,195,195,153,153,161,161,161,161,129,129,195,195,255,255,255,255,195,195,153,153,161,161,161,161,129,129,195,195,255,255
004E6D  3  99 99 A1 A1  
004E71  3  A1 A1 81 81  
004E89  3  FF FF F0 F0          .byte 255,255,240,240,102,102,104,104,104,104,96,96,240,240,255,255,255,255,240,240,102,102,104,104,104,104,96,96,240,240,255,255
004E8D  3  66 66 68 68  
004E91  3  68 68 60 60  
004EA9  3  FF FF 3C 3C          .byte 255,255,60,60,153,153,26,26,26,26,24,24,60,60,255,255,255,255,60,60,153,153,26,26,26,26,24,24,60,60,255,255
004EAD  3  99 99 1A 1A  
004EB1  3  1A 1A 18 18  
004EC9  3  FF FF 0F 0F          .byte 255,255,15,15,102,102,134,134,134,134,6,6,15,15,255,255,255,255,15,15,102,102,134,134,134,134,6,6,15,15,255,255
004ECD  3  66 66 86 86  
004ED1  3  86 86 06 06  
004EE9  3  FF FF C3 C3          .byte 255,255,195,195,153,153,161,161,161,161,129,129,195,195,255,255,255,0,195,0,153,0,161,0,161,0,129,0,195,0,255,0
004EED  3  99 99 A1 A1  
004EF1  3  A1 A1 81 81  
004F09  3  FF FF F0 F0          .byte 255,255,240,240,102,102,104,104,104,104,96,96,240,240,255,255,63,192,48,192,38,64,40,64,40,64,32,64,48,192,63,192
004F0D  3  66 66 68 68  
004F11  3  68 68 60 60  
004F29  3  FF FF 3C 3C          .byte 255,255,60,60,153,153,26,26,26,26,24,24,60,60,255,255,15,240,12,48,9,144,10,16,10,16,8,16,12,48,15,240
004F2D  3  99 99 1A 1A  
004F31  3  1A 1A 18 18  
004F49  3  FF FF 0F 0F          .byte 255,255,15,15,102,102,134,134,134,134,6,6,15,15,255,255,3,252,3,12,2,100,2,132,2,132,2,4,3,12,3,252
004F4D  3  66 66 86 86  
004F51  3  86 86 06 06  
004F69  3  FF FF C3 C3          .byte 255,255,195,195,153,153,161,161,161,161,129,129,195,195,255,255,0,255,0,195,0,153,0,161,0,161,0,129,0,195,0,255
004F6D  3  99 99 A1 A1  
004F71  3  A1 A1 81 81  
004F89  3  FF FF F0 F0          .byte 255,255,240,240,102,102,104,104,104,104,96,96,240,240,255,255,192,63,192,48,64,38,64,40,64,40,64,32,192,48,192,63
004F8D  3  66 66 68 68  
004F91  3  68 68 60 60  
004FA9  3  FF FF 3C 3C          .byte 255,255,60,60,153,153,26,26,26,26,24,24,60,60,255,255,240,15,48,12,144,9,16,10,16,10,16,8,48,12,240,15
004FAD  3  99 99 1A 1A  
004FB1  3  1A 1A 18 18  
004FC9  3  FF FF 0F 0F          .byte 255,255,15,15,102,102,134,134,134,134,6,6,15,15,255,255,252,3,12,3,100,2,132,2,132,2,4,2,12,3,252,3
004FCD  3  66 66 86 86  
004FD1  3  86 86 06 06  
004FE9  3  00 FF 00 C3          .byte 0,255,0,195,0,153,0,161,0,161,0,129,0,195,0,255,0,255,0,195,0,153,0,161,0,161,0,129,0,195,0,255
004FED  3  00 99 00 A1  
004FF1  3  00 A1 00 81  
005009  3  C0 3F C0 30          .byte 192,63,192,48,64,38,64,40,64,40,64,32,192,48,192,63,192,63,192,48,64,38,64,40,64,40,64,32,192,48,192,63
00500D  3  40 26 40 28  
005011  3  40 28 40 20  
005029  3  F0 0F 30 0C          .byte 240,15,48,12,144,9,16,10,16,10,16,8,48,12,240,15,240,15,48,12,144,9,16,10,16,10,16,8,48,12,240,15
00502D  3  90 09 10 0A  
005031  3  10 0A 10 08  
005049  3  FC 03 0C 03          .byte 252,3,12,3,100,2,132,2,132,2,4,2,12,3,252,3,252,3,12,3,100,2,132,2,132,2,4,2,12,3,252,3
00504D  3  64 02 84 02  
005051  3  84 02 04 02  
005069  3  FF 00 C3 00          .byte 255,0,195,0,153,0,161,0,161,0,129,0,195,0,255,0,255,0,195,0,153,0,161,0,161,0,129,0,195,0,255,0
00506D  3  99 00 A1 00  
005071  3  A1 00 81 00  
005089  3  3F C0 30 C0          .byte 63,192,48,192,38,64,40,64,40,64,32,64,48,192,63,192,63,192,48,192,38,64,40,64,40,64,32,64,48,192,63,192
00508D  3  26 40 28 40  
005091  3  28 40 20 40  
0050A9  3  0F F0 0C 30          .byte 15,240,12,48,9,144,10,16,10,16,8,16,12,48,15,240,15,240,12,48,9,144,10,16,10,16,8,16,12,48,15,240
0050AD  3  09 90 0A 10  
0050B1  3  0A 10 08 10  
0050C9  3  03 FC 03 0C          .byte 3,252,3,12,2,100,2,132,2,132,2,4,3,12,3,252,3,252,3,12,2,100,2,132,2,132,2,4,3,12,3,252
0050CD  3  02 64 02 84  
0050D1  3  02 84 02 04  
0050E9  3  00 FF 00 C3          .byte 0,255,0,195,0,153,0,161,0,161,0,129,0,195,0,255,255,255,195,195,153,153,161,161,161,161,129,129,195,195,255,255
0050ED  3  00 99 00 A1  
0050F1  3  00 A1 00 81  
005109  3  C0 3F C0 30          .byte 192,63,192,48,64,38,64,40,64,40,64,32,192,48,192,63,255,255,240,240,102,102,104,104,104,104,96,96,240,240,255,255
00510D  3  40 26 40 28  
005111  3  40 28 40 20  
005129  3  F0 0F 30 0C          .byte 240,15,48,12,144,9,16,10,16,10,16,8,48,12,240,15,255,255,60,60,153,153,26,26,26,26,24,24,60,60,255,255
00512D  3  90 09 10 0A  
005131  3  10 0A 10 08  
005149  3  FC 03 0C 03          .byte 252,3,12,3,100,2,132,2,132,2,4,2,12,3,252,3,255,255,15,15,102,102,134,134,134,134,6,6,15,15,255,255
00514D  3  64 02 84 02  
005151  3  84 02 04 02  
005169  3  FF 00 C3 00          .byte 255,0,195,0,153,0,161,0,161,0,129,0,195,0,255,0,255,255,195,195,153,153,161,161,161,161,129,129,195,195,255,255
00516D  3  99 00 A1 00  
005171  3  A1 00 81 00  
005189  3  3F C0 30 C0          .byte 63,192,48,192,38,64,40,64,40,64,32,64,48,192,63,192,255,255,240,240,102,102,104,104,104,104,96,96,240,240,255,255
00518D  3  26 40 28 40  
005191  3  28 40 20 40  
0051A9  3  0F F0 0C 30          .byte 15,240,12,48,9,144,10,16,10,16,8,16,12,48,15,240,255,255,60,60,153,153,26,26,26,26,24,24,60,60,255,255
0051AD  3  09 90 0A 10  
0051B1  3  0A 10 08 10  
0051C9  3  03 FC 03 0C          .byte 3,252,3,12,2,100,2,132,2,132,2,4,3,12,3,252,255,255,15,15,102,102,134,134,134,134,6,6,15,15,255,255
0051CD  3  02 64 02 84  
0051D1  3  02 84 02 04  
0051E9  3  FF FF C3 C3          .byte 255,255,195,195,153,153,161,161,161,161,129,129,195,195,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0051ED  3  99 99 A1 A1  
0051F1  3  A1 A1 81 81  
005209  3  FF FF F0 F0          .byte 255,255,240,240,102,102,104,104,104,104,96,96,240,240,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00520D  3  66 66 68 68  
005211  3  68 68 60 60  
005229  3  FF FF 3C 3C          .byte 255,255,60,60,153,153,26,26,26,26,24,24,60,60,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00522D  3  99 99 1A 1A  
005231  3  1A 1A 18 18  
005249  3  FF FF 0F 0F          .byte 255,255,15,15,102,102,134,134,134,134,6,6,15,15,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00524D  3  66 66 86 86  
005251  3  86 86 06 06  
005269  3  08 88 05 D0          .byte 8,136,5,208,7,240,0,0,3,224,6,176,4,144,11,104,73,201,88,13,50,166,4,16,8,8,31,252,2,32,6,48
00526D  3  07 F0 00 00  
005271  3  03 E0 06 B0  
005289  3  02 22 01 74          .byte 2,34,1,116,1,252,0,0,0,248,1,172,1,36,2,218,82,114,86,3,140,169,1,4,2,2,7,255,0,136,1,140
00528D  3  01 FC 00 00  
005291  3  00 F8 01 AC  
0052A9  3  80 88 00 5D          .byte 128,136,0,93,0,127,0,0,0,62,0,107,0,73,128,182,148,156,213,128,99,42,0,65,128,128,193,255,0,34,0,99
0052AD  3  00 7F 00 00  
0052B1  3  00 3E 00 6B  
0052C9  3  20 22 40 17          .byte 32,34,64,23,192,31,0,0,128,15,192,26,64,18,160,45,37,39,53,96,152,202,64,16,32,32,240,127,128,8,192,24
0052CD  3  C0 1F 00 00  
0052D1  3  80 0F C0 1A  
0052E9  3               frmlst:
0052E9  3  00 03                .byte 0,3
0052EB  3  03 03                .byte 3,3
0052ED  3  06 04                .byte 6,4
0052EF  3  0A 04                .byte 10,4
0052F1  3  0E 05                .byte 14,5
0052F3  3  13 02                .byte 19,2
0052F5  3  15 04                .byte 21,4
0052F7  3  19 01                .byte 25,1
0052F9  3  1A 04                .byte 26,4
0052FB  3  1E 04                .byte 30,4
0052FD  3  22 03                .byte 34,3
0052FF  3  25 03                .byte 37,3
005301  3  28 02                .byte 40,2
005303  3  2A 04                .byte 42,4
005305  3  2E 04                .byte 46,4
005307  3  32 03                .byte 50,3
005309  3  35 01                .byte 53,1
00530B  3  36 01                .byte 54,1
00530D  3  37 01                .byte 55,1
00530F  3  38 01                .byte 56,1
005311  3  39 01                .byte 57,1
005313  3  3A 01                .byte 58,1
005315  3  3B 01                .byte 59,1
005317  3  3C 01                .byte 60,1
005319  3  3D 01 3E 00          .byte 61,1,62,0
00531D  3               scdat:
00531D  3  A3 00 9A 00          .word 163,154,348,382,350,237,216,379,335,324,206,469,296,356,295,221,211,345,346,403,324,238,194
005321  3  5C 01 7E 01  
005325  3  5E 01 ED 00  
00534B  3  FF 00 98 04          .byte 255,0,152,4,0,0,4,0,4,255,0,26,4,0,0,4,0,4,255,0,26,255,4,6,255,0,27,255,4,4,255,0,28
00534F  3  00 00 04 00  
005353  3  04 FF 00 1A  
00536C  3  04 04 00 04          .byte 4,4,0,4,255,0,28,255,4,4,255,0,28,255,4,4,255,0,28,4,0,4,4,255,0,28,255,4,4,255,0,25,20
005370  3  FF 00 1C FF  
005374  3  04 04 FF 00  
00538D  3  15 00 FF 04          .byte 21,0,255,4,4,255,0,25,18,19,0,4,4,0,4,255,0,5,4,4,0,4,0,4,4,255,0,13,24,0,0,255,4,4
005391  3  04 FF 00 19  
005395  3  12 13 00 04  
0053AF  3  FF 00 06 FF          .byte 255,0,6,255,4,5,255,0,14,25,0,0,255,4,4,255,0,6,4,4,0,4,4,255,0,17,255,4,4,255,0,6,255,4,26
0053B3  3  04 05 FF 00  
0053B7  3  0E 19 00 00  
0053D2  3  FF 00 06 04          .byte 255,0,6,4,4,0,255,4,21,0,4,255,0,6,255,4,24,0,4,255,0,6,255,4,26,0,0,0
0053D6  3  04 00 FF 04  
0053DA  3  15 00 04 FF  
0053EE  3  FF 00 98 04          .byte 255,0,152,4,0,0,4,0,4,255,0,26,4,0,0,4,0,4,255,0,26,255,4,6,255,0,27,255,4,4,255,0,28
0053F2  3  00 00 04 00  
0053F6  3  04 FF 00 1A  
00540F  3  04 04 00 04          .byte 4,4,0,4,255,0,28,255,4,4,255,0,28,255,4,4,255,0,28,4,0,4,4,255,0,28,255,4,4,255,0,28,255,4,4
005413  3  FF 00 1C FF  
005417  3  04 04 FF 00  
005432  3  FF 00 1C 04          .byte 255,0,28,4,4,0,4,255,0,5,4,4,0,4,0,4,4,255,0,16,255,4,4,255,0,6,255,4,5,255,0,17,255,4,4
005436  3  04 00 04 FF  
00543A  3  00 05 04 04  
005455  3  FF 00 06 04          .byte 255,0,6,4,4,0,4,4,255,0,14,23,22,0,255,4,4,255,0,6,255,4,26,255,0,6,4,4,0,255,4,21,0
005459  3  04 00 04 04  
00545D  3  FF 00 0E 17  
005476  3  04 FF 00 06          .byte 4,255,0,6,255,4,24,0,4,255,0,6,255,4,26,0,0,0
00547A  3  FF 04 18 00  
00547E  3  04 FF 00 06  
005488  3  FF 0C 21 00          .byte 255,12,33,0,0,12,255,0,8,255,5,17,0,0,12,12,0,0,12,255,0,27,12,12,0,0,12,255,0,6,13,13,255,1,17
00548C  3  00 0C FF 00  
005490  3  08 FF 05 11  
0054AB  3  07 07 0C 0C          .byte 7,7,12,12,0,0,12,255,0,8,15,255,5,14,12,12,7,7,12,12,0,0,12,13,13,255,0,6,15,255,0,14,12,12
0054AF  3  00 00 0C FF  
0054B3  3  00 08 0F FF  
0054CD  3  07 07 0C 0C          .byte 7,7,12,12,0,0,12,255,0,6,13,13,12,255,1,14,12,12,7,7,12,12,0,0,12,255,0,8,15,255,5,14,12,12
0054D1  3  00 00 0C FF  
0054D5  3  00 06 0D 0D  
0054EF  3  07 07 0C 0C          .byte 7,7,12,12,0,0,12,255,0,8,15,255,0,14,12,12,7,7,12,12,0,0,12,255,0,6,13,13,12,255,1,14,12,12
0054F3  3  00 00 0C FF  
0054F7  3  00 08 0F FF  
005511  3  07 07 0C 0C          .byte 7,7,12,12,0,0,12,13,13,255,0,6,15,255,5,8,255,12,8,7,7,12,12,0,0,12,255,0,8,15,255,0,8
005515  3  00 00 0C 0D  
005519  3  0D FF 00 06  
005532  3  0C 0C FF 00          .byte 12,12,255,0,6,7,7,12,12,0,0,12,255,0,6,13,13,12,255,1,8,12,12,255,0,6,7,7,12,12,0,0,12
005536  3  06 07 07 0C  
00553A  3  0C 00 00 0C  
005553  3  FF 00 08 FF          .byte 255,0,8,255,12,11,7,7,255,12,4,7,7,12,12,0,0,12,255,0,8,255,12,11,7,7,255,12,4,7,7,12,12
005557  3  0C 0B 07 07  
00555B  3  FF 0C 04 07  
005574  3  00 00 0C 0D          .byte 0,0,12,13,13,255,0,6,255,12,11,7,7,255,12,4,7,7,12,12,0,0,12,255,0,8,15,255,5,9,12,7,7
005578  3  0D FF 00 06  
00557C  3  FF 0C 0B 07  
005595  3  0C 05 05 05          .byte 12,5,5,5,7,7,12,12,0,0,12,255,0,8,15,255,0,9,12,7,7,12,0,0,0,7,7,12,12,0,0,255,12,10
005599  3  07 07 0C 0C  
00559D  3  00 00 0C FF  
0055B7  3  FF 01 09 0C          .byte 255,1,9,12,7,7,12,1,1,1,255,12,4,0,0,255,5,20,7,7,255,5,6,12,12,255,0,22,7,7,255,0,6
0055BB  3  07 07 0C 01  
0055BF  3  01 01 FF 0C  
0055D8  3  FF 0C 04 FF          .byte 255,12,4,255,1,20,12,12,255,1,6,12
0055DC  3  01 14 0C 0C  
0055E0  3  FF 01 06 0C  
0055E4  3  FF 0C 21 FF          .byte 255,12,33,255,0,4,15,255,5,14,15,0,0,255,5,5,15,0,0,12,12,255,0,4,15,255,0,14,15,255,0,7,15
0055E8  3  00 04 0F FF  
0055EC  3  05 0E 0F 00  
005605  3  00 00 0C 0C          .byte 0,0,12,12,255,0,4,12,255,1,14,12,7,7,255,1,5,12,0,0,12,12,255,0,7,12,12,255,0,10,12,7,7
005609  3  FF 00 04 0C  
00560D  3  FF 01 0E 0C  
005626  3  0C FF 00 07          .byte 12,255,0,7,12,12,255,0,7,12,12,255,0,10,12,7,7,12,255,0,7,12,12,255,0,7,12,12,255,0,10,12,7,7
00562A  3  0C 0C FF 00  
00562E  3  07 0C 0C FF  
005648  3  0C FF 00 07          .byte 12,255,0,7,12,12,255,0,7,12,12,255,0,10,12,7,7,12,255,0,7,12,12,255,0,6,255,12,4,255,0,9,12
00564C  3  0C 0C FF 00  
005650  3  07 0C 0C FF  
005669  3  07 07 0C FF          .byte 7,7,12,255,0,7,12,12,255,0,5,255,12,6,255,0,8,12,7,7,12,255,0,7,12,12,255,0,4,255,12,8,255,0,7
00566D  3  00 07 0C 0C  
005671  3  FF 00 05 FF  
00568C  3  0C 07 07 0C          .byte 12,7,7,12,255,0,7,12,12,255,0,4,255,12,8,255,0,7,12,7,7,12,255,0,7,12,12,255,0,4,5,5,5
005690  3  FF 00 07 0C  
005694  3  0C FF 00 04  
0056AD  3  00 00 05 05          .byte 0,0,5,5,5,255,0,7,12,7,7,12,255,0,7,12,12,255,0,19,12,7,7,12,255,0,7,12,12,255,0,4,1,1,1
0056B1  3  05 FF 00 07  
0056B5  3  0C 07 07 0C  
0056D0  3  07 07 01 01          .byte 7,7,1,1,1,255,0,7,12,7,7,12,255,0,7,12,12,255,0,6,12,7,7,12,255,0,9,12,7,7,12,13,13
0056D4  3  01 FF 00 07  
0056D8  3  0C 07 07 0C  
0056F1  3  FF 00 05 0C          .byte 255,0,5,12,12,255,0,6,12,7,7,12,255,0,9,15,7,7,15,255,0,7,12,12,255,0,6,12,7,7,12,255,0,9
0056F5  3  0C FF 00 06  
0056F9  3  0C 07 07 0C  
005713  3  0F 07 07 0F          .byte 15,7,7,15,255,0,7,12,12,255,0,6,12,7,7,12,255,0,5,255,12,12,0,0,0,12,12,255,0,6,5,7,7
005717  3  FF 00 07 0C  
00571B  3  0C FF 00 06  
005734  3  05 FF 00 05          .byte 5,255,0,5,15,255,5,10,15,0,0,0,12,12,255,0,7,7,7,255,0,6,15,255,0,10,15,0,0,0,255,12,8
005738  3  0F FF 05 0A  
00573C  3  0F 00 00 00  
005755  3  01 0C 0C 01          .byte 1,12,12,1,255,12,6,255,1,10,255,12,5
005759  3  FF 0C 06 FF  
00575D  3  01 0A FF 0C  
005762  3  FF 0C 21 05          .byte 255,12,33,5,5,5,255,0,8,5,5,5,0,0,5,5,5,255,0,8,5,5,5,12,12,255,0,30,12,12,1,1,1
005766  3  05 05 FF 00  
00576A  3  08 05 05 05  
005783  3  00 00 00 FF          .byte 0,0,0,255,13,4,12,1,1,1,7,7,1,1,1,12,255,13,4,0,0,0,1,1,1,12,12,5,5,5,255,0,10
005787  3  0D 04 0C 01  
00578B  3  01 01 07 07  
0057A4  3  0C 07 07 0C          .byte 12,7,7,12,255,0,10,5,5,5,12,12,255,0,13,12,7,7,12,255,0,13,12,12,1,1,1,255,12,5,255,0,5
0057A8  3  FF 00 0A 05  
0057AC  3  05 05 0C 0C  
0057C5  3  0C 07 07 0C          .byte 12,7,7,12,255,0,5,255,12,5,1,1,1,12,12,255,0,13,12,7,7,12,255,0,13,12,12,255,0,11,12,12,12
0057C9  3  FF 00 05 FF  
0057CD  3  0C 05 01 01  
0057E6  3  07 07 0C 0C          .byte 7,7,12,12,12,255,0,11,12,12,255,0,14,7,7,255,0,14,12,12,255,0,14,7,7,255,0,14,12,12,255,0,10
0057EA  3  0C FF 00 0B  
0057EE  3  0C 0C FF 00  
005807  3  FF 0D 04 07          .byte 255,13,4,7,7,255,13,4,255,0,10,12,12,255,0,30,12,12,255,0,30,12,12,0,0,0,12,7,7,12,255,0,16
00580B  3  07 FF 0D 04  
00580F  3  FF 00 0A 0C  
005828  3  0C 07 07 0C          .byte 12,7,7,12,0,0,0,12,12,0,0,0,12,7,7,12,255,0,16,12,7,7,12,0,0,0,12,12,0,0,0,12,7,7
00582C  3  00 00 00 0C  
005830  3  0C 00 00 00  
00584A  3  0C FF 00 10          .byte 12,255,0,16,12,7,7,12,0,0,0,12,12,0,0,0,12,7,7,12,255,0,16,12,7,7,12,0,0,0,12,12,0,0,0
00584E  3  0C 07 07 0C  
005852  3  00 00 00 0C  
00586D  3  0C 07 07 0C          .byte 12,7,7,12,255,0,6,255,13,4,255,0,6,12,7,7,12,0,0,0,12,12,0,0,0,5,7,7,5,255,0,6,255,15,4
005871  3  FF 00 06 FF  
005875  3  0D 04 FF 00  
005890  3  FF 00 06 05          .byte 255,0,6,5,7,7,5,0,0,0,12,12,255,0,4,7,7,255,0,7,255,15,4,255,0,7,7,7,255,0,4,255,12,5
005894  3  07 07 05 00  
005898  3  00 00 0C 0C  
0058B2  3  01 0C 0C 01          .byte 1,12,12,1,255,12,16,1,12,12,1,255,12,4
0058B6  3  FF 0C 10 01  
0058BA  3  0C 0C 01 FF  
0058C0  3  FF 0C 21 FF          .byte 255,12,33,255,0,6,255,5,17,255,0,7,12,12,255,0,30,12,12,7,7,255,12,4,255,1,17,255,0,7,12,12,7,7
0058C4  3  00 06 FF 05  
0058C8  3  11 FF 00 07  
0058E2  3  0C 00 00 00          .byte 12,0,0,0,255,5,17,255,0,7,12,12,7,7,12,255,0,27,12,12,7,7,12,0,0,0,255,1,17,13,13,255,0,5
0058E6  3  FF 05 11 FF  
0058EA  3  00 07 0C 0C  
005904  3  0C 0C 07 07          .byte 12,12,7,7,12,0,0,0,255,5,17,255,0,7,12,12,7,7,12,255,0,27,12,12,7,7,255,12,4,255,1,17,13,13
005908  3  0C 00 00 00  
00590C  3  FF 05 11 FF  
005926  3  FF 00 05 0C          .byte 255,0,5,12,12,7,7,255,0,4,255,5,17,255,0,7,12,12,7,7,255,0,28,255,12,8,255,1,17,255,12,5,7,7
00592A  3  0C 07 07 FF  
00592E  3  00 04 FF 05  
005948  3  0C 0C FF 00          .byte 12,12,255,0,6,255,5,17,255,0,4,12,7,7,12,12,255,0,27,12,7,7,12,12,255,0,6,255,1,17,255,0,4
00594C  3  06 FF 05 11  
005950  3  FF 00 04 0C  
005969  3  0C 07 07 0C          .byte 12,7,7,12,12,255,0,6,255,5,17,255,0,4,12,7,7,12,12,255,0,27,12,7,7,12,12,255,0,6,255,1,17
00596D  3  0C FF 00 06  
005971  3  FF 05 11 FF  
00598A  3  FF 0D 04 0C          .byte 255,13,4,12,7,7,12,12,255,0,6,255,5,17,255,0,5,7,7,12,12,255,0,28,7,7,255,12,8,255,1,17,255,12,8
00598E  3  07 07 0C 0C  
005992  3  FF 00 06 FF  
0059AD  3  FF 0C 21 FF          .byte 255,12,33,255,15,30,12,12,15,0,0,255,15,23,0,0,15,15,12,12,15,0,0,255,15,23,0,0,15,15,12,12,255,15,26
0059B1  3  0F 1E 0C 0C  
0059B5  3  0F 00 00 FF  
0059D0  3  00 00 0F 0F          .byte 0,0,15,15,12,12,255,15,26,0,0,15,15,12,12,255,15,13,0,0,255,15,11,0,0,15,15,12,12,255,15,13,0,0
0059D4  3  0C 0C FF 0F  
0059D8  3  1A 00 00 0F  
0059F2  3  FF 0F 0F 0C          .byte 255,15,15,12,12,255,15,30,12,12,15,15,255,0,10,15,255,0,15,15,15,12,12,15,15,255,0,10,15,255,0,15,15,15
0059F6  3  0C FF 0F 1E  
0059FA  3  0C 0C 0F 0F  
005A14  3  0C 0C FF 0F          .byte 12,12,255,15,30,12,12,15,15,255,0,16,15,255,0,9,15,15,12,12,15,15,255,0,16,15,255,0,9,15,15,12,12
005A18  3  1E 0C 0C 0F  
005A1C  3  0F FF 00 10  
005A35  3  FF 0F 1E 0C          .byte 255,15,30,12,12,15,15,255,0,9,15,255,0,16,15,15,12,12,15,15,255,0,9,15,255,0,16,15,15,12,12,255,15,30
005A39  3  0C 0F 0F FF  
005A3D  3  00 09 0F FF  
005A57  3  0C 0C FF 0F          .byte 12,12,255,15,4,255,12,22,255,15,4,12,12,15,15,0,0,255,5,22,0,0,15,15,12,12,15,15,255,0,16,15,255,0,9
005A5B  3  04 FF 0C 16  
005A5F  3  FF 0F 04 0C  
005A7A  3  0F 0F FF 0C          .byte 15,15,255,12,6,255,1,22,255,12,5
005A7E  3  06 FF 01 16  
005A82  3  FF 0C 05     
005A85  3  FF 0F 05 FF          .byte 255,15,5,255,12,24,15,15,15,255,12,6,15,15,255,0,20,255,12,5,255,5,5,15,15,255,0,20,5,5,5,12,12
005A89  3  0C 18 0F 0F  
005A8D  3  0F FF 0C 06  
005AA6  3  FF 00 05 0F          .byte 255,0,5,15,15,255,0,23,12,12,255,1,5,15,15,255,0,20,1,1,1,12,12,255,0,6,15,255,0,20,5,5,5
005AAA  3  0F FF 00 17  
005AAE  3  0C 0C FF 01  
005AC7  3  0C 0C FF 00          .byte 12,12,255,0,6,15,255,0,23,12,12,15,15,255,12,5,0,0,0,12,12,12,7,7,12,12,12,0,0,0,255,12,4
005ACB  3  06 0F FF 00  
005ACF  3  17 0C 0C 0F  
005AE8  3  07 07 01 01          .byte 7,7,1,1,1,12,12,15,15,12,0,0,0,12,255,0,5,12,7,7,12,255,0,5,12,15,15,12,7,7,12,15,15
005AEC  3  01 0C 0C 0F  
005AF0  3  0F 0C 00 00  
005B09  3  0C 0C 0F 0F          .byte 12,12,15,15,12,0,0,0,12,255,0,6,7,7,255,0,6,12,15,15,12,7,7,12,15,15,12,12,15,15,12,0,0,0
005B0D  3  0C 00 00 00  
005B11  3  0C FF 00 06  
005B2B  3  0C FF 00 0E          .byte 12,255,0,14,12,15,15,12,7,7,12,15,15,12,12,15,15,12,0,0,0,12,255,0,5,255,13,4,255,0,5,12,15,15
005B2F  3  0C 0F 0F 0C  
005B33  3  07 07 0C 0F  
005B4D  3  0C 07 07 0C          .byte 12,7,7,12,15,15,12,12,15,15,12,0,0,0,12,255,0,14,12,15,15,12,7,7,12,15,15,12,12,15,15,12,0,0,0
005B51  3  0F 0F 0C 0C  
005B55  3  0F 0F 0C 00  
005B70  3  0C FF 00 0E          .byte 12,255,0,14,12,15,15,12,7,7,12,15,15,12,12,15,15,12,7,7,12,12,255,0,14,12,15,15,12,7,7,12,15,15
005B74  3  0C 0F 0F 0C  
005B78  3  07 07 0C 0F  
005B92  3  0C 0C 0F 0F          .byte 12,12,15,15,12,7,7,12,255,0,15,255,12,4,7,7,12,15,15,12,12,15,15,12,7,7,12,255,0,4,15,255,0,10
005B96  3  0C 07 07 0C  
005B9A  3  FF 00 0F FF  
005BB4  3  FF 05 04 07          .byte 255,5,4,7,7,12,15,15,12,12,15,15,12,7,7,12,255,0,4,15,255,0,14,7,7,12,15,15,12,12,15,15,12
005BB8  3  07 0C 0F 0F  
005BBC  3  0C 0C 0F 0F  
005BD5  3  07 07 0C FF          .byte 7,7,12,255,0,4,255,12,11,255,1,4,255,12,7,15,15,15,7,7,255,0,5,255,5,20,12,12,15,15,15,7,7
005BD9  3  00 04 FF 0C  
005BDD  3  0B FF 01 04  
005BF6  3  FF 00 19 FF          .byte 255,0,25,255,12,12,255,1,20,12
005BFA  3  0C 0C FF 01  
005BFE  3  14 0C        
005C00  3  FF 0C 0E FF          .byte 255,12,14,255,15,18,12,255,0,12,12,255,15,18,12,255,0,12,255,12,20,255,0,12,255,5,16,0,0,12,12,255,0,30
005C04  3  0F 12 0C FF  
005C08  3  00 0C 0C FF  
005C22  3  0C 0C FF 00          .byte 12,12,255,0,8,15,15,15,12,255,1,16,0,0,12,12,255,0,8,255,15,20,0,0,12,12,255,15,4,255,12,4,255,15,20
005C26  3  08 0F 0F 0F  
005C2A  3  0C FF 01 10  
005C45  3  00 00 0C 0C          .byte 0,0,12,12,255,0,4,5,5,5,12,255,0,13,255,15,7,0,0,12,12,255,0,7,12,255,0,13,255,15,7,0,0
005C49  3  FF 00 04 05  
005C4D  3  05 05 0C FF  
005C66  3  0C 0C 07 07          .byte 12,12,7,7,12,12,1,1,1,12,13,13,13,255,12,10,255,15,7,0,0,12,12,7,7,12,255,0,8,255,5,10,255,15,7
005C6A  3  0C 0C 01 01  
005C6E  3  01 0C 0D 0D  
005C89  3  00 00 0C 0C          .byte 0,0,12,12,7,7,12,255,0,18,255,15,7,0,0,12,12,7,7,12,0,0,255,12,6,255,1,10,12,7,7,12,15,15,15
005C8D  3  07 07 0C FF  
005C91  3  00 12 FF 0F  
005CAC  3  00 00 0C 0C          .byte 0,0,12,12,7,7,12,255,0,8,255,12,4,255,0,6,12,7,7,12,15,15,15,0,0,12,12,7,7,12,255,0,8
005CB0  3  07 07 0C FF  
005CB4  3  00 08 FF 0C  
005CCD  3  FF 0C 04 FF          .byte 255,12,4,255,0,6,12,7,7,12,15,15,15,0,0,12,12,7,7,12,255,0,8,255,5,4,255,0,6,12,7,7,12
005CD1  3  00 06 0C 07  
005CD5  3  07 0C 0F 0F  
005CEE  3  0F 0F 0F 00          .byte 15,15,15,0,0,12,12,7,7,12,255,0,18,12,7,7,12,15,15,15,0,0,12,12,7,7,255,12,5,0,0,0,12
005CF2  3  00 0C 0C 07  
005CF6  3  07 0C FF 00  
005D0F  3  FF 01 04 0C          .byte 255,1,4,12,255,0,5,12,7,7,12,15,15,15,0,0,12,12,7,7,255,0,8,255,5,6,255,0,5,5,7,7,5
005D13  3  FF 00 05 0C  
005D17  3  07 07 0C 0F  
005D30  3  FF 00 05 0C          .byte 255,0,5,12,12,7,7,255,0,20,7,7,255,0,6,255,12,12,255,1,6,255,12,5,1,12,12,1,255,12,6
005D34  3  0C 07 07 FF  
005D38  3  00 14 07 07  
005D4F  3  FF 0C 21 FF          .byte 255,12,33,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,14,12,255,0,15,12,12,255,0,13,12,15,12
005D53  3  00 1E 0C 0C  
005D57  3  FF 00 1E 0C  
005D70  3  FF 00 0E 0C          .byte 255,0,14,12,12,255,0,6,12,255,0,5,12,15,15,15,12,255,0,5,12,255,0,5,13,13,12,12,7,7,12,0,0,0
005D74  3  0C FF 00 06  
005D78  3  0C FF 00 05  
005D92  3  0C 0C 00 00          .byte 12,12,0,0,0,12,255,15,5,12,0,0,0,12,12,255,0,7,12,12,7,7,12,0,0,0,12,15,12,0,12,255,15,7
005D96  3  00 0C FF 0F  
005D9A  3  05 0C 00 00  
005DB4  3  0C 00 0C 0F          .byte 12,0,12,15,12,255,0,7,12,12,7,7,12,0,0,0,12,15,15,12,255,15,9,12,15,15,12,13,13,255,0,5,12,12
005DB8  3  0C FF 00 07  
005DBC  3  0C 0C 07 07  
005DD6  3  07 07 0C 00          .byte 7,7,12,0,0,0,12,255,15,15,12,255,0,7,12,12,7,7,12,0,0,0,12,255,15,15,12,255,0,7,12,12,7,7
005DDA  3  00 00 0C FF  
005DDE  3  0F 0F 0C FF  
005DF8  3  0C 00 00 00          .byte 12,0,0,0,255,12,17,255,0,5,13,13,12,12,7,7,12,0,0,0,12,255,5,7,0,0,255,5,6,12,255,0,7
005DFC  3  FF 0C 11 FF  
005E00  3  00 05 0D 0D  
005E19  3  0C 0C 07 07          .byte 12,12,7,7,12,0,0,0,12,255,0,15,12,255,0,7,12,12,7,7,12,0,0,0,12,255,1,7,7,7,255,1,6
005E1D  3  0C 00 00 00  
005E21  3  0C FF 00 0F  
005E3A  3  0C 0D 0D FF          .byte 12,13,13,255,0,5,12,12,7,7,12,255,0,10,12,7,7,12,255,0,13,12,12,7,7,12,255,0,10,12,7,7,12
005E3E  3  00 05 0C 0C  
005E42  3  07 07 0C FF  
005E5B  3  FF 00 0D 0C          .byte 255,0,13,12,12,7,7,12,255,0,10,12,7,7,12,255,0,11,13,13,12,12,7,7,5,255,0,10,15,7,7,15,255,0,13
005E5F  3  0C 07 07 0C  
005E63  3  FF 00 0A 0C  
005E7E  3  0C 0C 07 07          .byte 12,12,7,7,255,0,11,15,7,7,15,255,0,13,255,12,4,1,255,12,28
005E82  3  FF 00 0B 0F  
005E86  3  07 07 0F FF  
005E93  3  FF 0C 21 FF          .byte 255,12,33,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12
005E97  3  00 1E 0C 0C  
005E9B  3  FF 00 1E 0C  
005EB4  3  07 07 0C FF          .byte 7,7,12,255,15,24,12,7,7,12,12,7,7,12,255,15,24,12,7,7,12,12,7,7,12,255,15,24,12,7,7,12,12
005EB8  3  0F 18 0C 07  
005EBC  3  07 0C 0C 07  
005ED5  3  07 07 0C FF          .byte 7,7,12,255,15,24,12,7,7,12,12,7,7,12,255,15,24,12,7,7,12,12,7,7,12,255,15,24,12,7,7,12,12
005ED9  3  0F 18 0C 07  
005EDD  3  07 0C 0C 07  
005EF6  3  07 07 0C FF          .byte 7,7,12,255,15,24,12,7,7,12,12,7,7,12,255,15,24,12,7,7,12,12,7,7,12,255,15,24,12,7,7,12,12
005EFA  3  0F 18 0C 07  
005EFE  3  07 0C 0C 07  
005F17  3  07 07 0C FF          .byte 7,7,12,255,15,24,12,7,7,12,12,7,7,12,255,15,24,12,7,7,12,12,7,7,255,12,11,15,15,15,255,12,12
005F1B  3  0F 18 0C 07  
005F1F  3  07 0C 0C 07  
005F38  3  07 07 0C 0C          .byte 7,7,12,12,7,7,255,5,11,0,0,0,255,5,12,7,7,12,12,7,7,255,0,26,7,7,255,12,4,255,1,11,12,12,12
005F3C  3  07 07 FF 05  
005F40  3  0B 00 00 00  
005F5B  3  FF 01 0C 0C          .byte 255,1,12,12,12,12
005F5F  3  0C 0C        
005F61  3  FF 0C 21 FF          .byte 255,12,33,255,5,28,0,0,12,12,255,0,30,12,12,255,1,28,7,7,12,12,255,0,27,12,7,7,12,12,255,0,27
005F65  3  05 1C 00 00  
005F69  3  0C 0C FF 00  
005F82  3  0C 07 07 0C          .byte 12,7,7,12,12,255,0,5,13,13,12,0,0,0,12,13,13,13,12,0,0,0,12,13,13,13,12,0,0,0,12,7,7
005F86  3  0C FF 00 05  
005F8A  3  0D 0D 0C 00  
005FA3  3  0C 0C FF 00          .byte 12,12,255,0,7,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,7,7,12,12,255,0,7
005FA7  3  07 0C 00 00  
005FAB  3  00 0C 00 00  
005FC4  3  0C 00 00 00          .byte 12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,7,7,12,12,255,0,5,13,13,12,0,0,0
005FC8  3  0C 00 00 00  
005FCC  3  0C 00 00 00  
005FE6  3  0C 0D 0D 0D          .byte 12,13,13,13,12,0,0,0,12,13,13,13,12,0,0,0,12,7,7,12,12,255,0,7,12,0,0,0,12,0,0,0,12
005FEA  3  0C 00 00 00  
005FEE  3  0C 0D 0D 0D  
006007  3  00 00 00 0C          .byte 0,0,0,12,0,0,0,12,0,0,0,12,7,7,12,12,255,0,7,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0
00600B  3  00 00 00 0C  
00600F  3  00 00 00 0C  
00602A  3  0C 00 00 00          .byte 12,0,0,0,12,7,7,12,12,255,0,5,13,13,12,0,0,0,12,13,13,13,12,0,0,0,12,13,13,13,12,0,0,0
00602E  3  0C 07 07 0C  
006032  3  0C FF 00 05  
00604C  3  0C 07 07 0C          .byte 12,7,7,12,12,255,0,7,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,7,7,12,12
006050  3  0C FF 00 07  
006054  3  0C 00 00 00  
00606D  3  FF 00 07 0C          .byte 255,0,7,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,7,7,12,12,255,0,5,13,13
006071  3  00 00 00 0C  
006075  3  00 00 00 0C  
00608E  3  0C 00 00 00          .byte 12,0,0,0,12,13,13,13,12,0,0,0,12,13,13,13,12,0,0,0,12,7,7,12,12,255,0,7,12,0,0,0,12
006092  3  0C 0D 0D 0D  
006096  3  0C 00 00 00  
0060AF  3  00 00 00 0C          .byte 0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,7,7,12,12,255,0,7,12,0,0,0,12,0,0,0,12,0,0,0
0060B3  3  00 00 00 0C  
0060B7  3  00 00 00 0C  
0060D2  3  0C 00 00 00          .byte 12,0,0,0,12,0,0,0,12,7,7,12,12,13,13,255,0,5,12,0,0,0,12,13,13,13,12,0,0,0,12,13,13,13
0060D6  3  0C 00 00 00  
0060DA  3  0C 07 07 0C  
0060F4  3  0C 00 00 00          .byte 12,0,0,0,12,7,7,12,12,255,0,7,12,0,0,0,15,0,0,0,12,0,0,0,15,0,0,0,12,0,0,0,15
0060F8  3  0C 07 07 0C  
0060FC  3  0C FF 00 07  
006115  3  07 07 0C 0C          .byte 7,7,12,12,255,0,7,12,0,0,0,15,0,0,0,12,0,0,0,15,0,0,0,12,0,0,0,15,7,7,255,12,33
006119  3  FF 00 07 0C  
00611D  3  00 00 00 0F  
006136  3  FF 0C 21 FF          .byte 255,12,33,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,9,255,15,14,255,0,7,12,12
00613A  3  00 1E 0C 0C  
00613E  3  FF 00 1E 0C  
006158  3  FF 00 09 FF          .byte 255,0,9,255,15,14,255,0,7,12,12,255,0,4,12,7,7,255,12,18,255,0,5,12,12,255,0,4,12,7,7,12,255,5,14
00615C  3  0F 0E FF 00  
006160  3  07 0C 0C FF  
00617B  3  00 00 0C FF          .byte 0,0,12,255,0,5,12,12,255,0,4,12,7,7,12,255,0,16,12,255,0,5,12,12,255,0,4,12,7,7,12,255,1,14
00617F  3  00 05 0C 0C  
006183  3  FF 00 04 0C  
00619D  3  07 07 0C FF          .byte 7,7,12,255,0,5,12,12,255,0,4,12,7,7,12,0,0,255,5,12,7,7,12,255,0,5,12,12,255,0,4,12,7,7
0061A1  3  00 05 0C 0C  
0061A5  3  FF 00 04 0C  
0061BF  3  0C FF 00 0E          .byte 12,255,0,14,7,7,12,255,0,5,12,12,255,0,4,12,7,7,12,7,7,255,1,12,12,12,12,255,0,5,12,12,255,0,4
0061C3  3  07 07 0C FF  
0061C7  3  00 05 0C 0C  
0061E2  3  0C 07 07 0C          .byte 12,7,7,12,7,7,255,5,12,0,0,12,255,0,5,12,12,255,0,4,12,7,7,12,7,7,255,0,14,12,255,0,5
0061E6  3  07 07 FF 05  
0061EA  3  0C 00 00 0C  
006203  3  0C 0C FF 00          .byte 12,12,255,0,4,12,7,7,12,12,12,255,1,12,7,7,12,255,0,5,12,12,255,0,4,12,7,7,12,255,0,13,12
006207  3  04 0C 07 07  
00620B  3  0C 0C 0C FF  
006224  3  07 07 0C FF          .byte 7,7,12,255,0,5,12,12,255,0,4,12,7,7,12,255,0,13,12,7,7,12,255,0,5,12,12,255,0,5,7,7,255,0,15
006228  3  00 05 0C 0C  
00622C  3  FF 00 04 0C  
006247  3  07 07 FF 00          .byte 7,7,255,0,6,12,12,255,0,5,7,7,255,0,15,7,7,255,0,6,255,12,33
00624B  3  06 0C 0C FF  
00624F  3  00 05 07 07  
00625E  3  FF 0C 21 FF          .byte 255,12,33,255,0,12,255,15,4,255,0,14,12,12,255,0,12,15,0,0,15,255,0,14,12,12,255,0,12,15,0,0,15
006262  3  00 0C FF 0F  
006266  3  04 FF 00 0E  
00627F  3  FF 00 0E 0C          .byte 255,0,14,12,12,255,0,12,255,15,4,255,0,14,12,12,255,0,12,255,15,4,255,0,14,12,12,255,0,12,255,15,4
006283  3  0C FF 00 0C  
006287  3  FF 0F 04 FF  
0062A0  3  FF 00 0E 0C          .byte 255,0,14,12,12,7,7,12,0,0,0,255,12,6,255,15,4,255,12,7,0,0,0,255,12,6,7,7,12,0,0,0,12
0062A4  3  0C 07 07 0C  
0062A8  3  00 00 00 FF  
0062C1  3  FF 0F 0F 0C          .byte 255,15,15,12,0,0,0,12,15,15,15,12,12,7,7,12,0,0,0,12,255,15,15,12,0,0,0,12,15,15,15,12,12
0062C5  3  00 00 00 0C  
0062C9  3  0F 0F 0F 0C  
0062E2  3  07 07 0C 00          .byte 7,7,12,0,0,0,12,255,15,15,12,0,0,0,12,15,15,15,12,12,7,7,12,0,0,0,12,255,15,15,12,0,0,0
0062E6  3  00 00 0C FF  
0062EA  3  0F 0F 0C 00  
006304  3  0C 0F 0F 0F          .byte 12,15,15,15,12,12,7,7,12,0,0,0,12,255,15,4,255,12,8,15,15,15,12,0,0,0,12,15,15,15,12,12,7,7
006308  3  0C 0C 07 07  
00630C  3  0C 00 00 00  
006326  3  0C 00 00 00          .byte 12,0,0,0,12,255,15,4,255,5,8,15,15,15,12,0,0,0,12,15,15,15,12,12,7,7,12,0,0,0,12,255,15,4
00632A  3  0C FF 0F 04  
00632E  3  FF 05 08 0F  
006348  3  FF 00 08 0F          .byte 255,0,8,15,15,15,12,0,0,0,12,15,15,15,12,12,7,7,12,0,0,0,12,255,15,4,255,1,8,255,15,4,0,0,0
00634C  3  0F 0F 0C 00  
006350  3  00 00 0C 0F  
00636B  3  FF 0C 06 07          .byte 255,12,6,7,7,12,0,0,0,12,255,15,16,0,0,0,255,5,4,12,12,7,7,12,0,0,0,12,255,15,16,255,0,7
00636F  3  07 0C 00 00  
006373  3  00 0C FF 0F  
00638D  3  0C 0C 07 07          .byte 12,12,7,7,12,15,15,15,255,12,17,15,15,15,255,1,4,12,12,255,0,7,255,5,16,0,0,0,255,5,4,12,12
006391  3  0C 0F 0F 0F  
006395  3  FF 0C 11 0F  
0063AE  3  FF 00 0E 0F          .byte 255,0,14,15,255,0,15,255,12,9,255,1,16,12,12,12,255,1,4,12
0063B2  3  FF 00 0F FF  
0063B6  3  0C 09 FF 01  
0063C2  3  FF 0C 21 FF          .byte 255,12,33,255,0,30,12,12,255,0,19,17,16,255,0,9,12,12,255,0,18,17,12,12,16,255,0,8,12,12,255,0,17
0063C6  3  00 1E 0C 0C  
0063CA  3  FF 00 13 11  
0063E3  3  11 FF 0C 04          .byte 17,255,12,4,16,255,0,7,12,12,255,0,16,17,255,12,6,16,255,0,6,12,12,255,0,15,17,255,12,8,16,255,0,5
0063E7  3  10 FF 00 07  
0063EB  3  0C 0C FF 00  
006405  3  0C 0C FF 00          .byte 12,12,255,0,14,17,255,12,10,16,255,0,4,12,12,255,0,13,17,255,12,12,16,0,0,0,12,12,255,0,12,17,255,12,14
006409  3  0E 11 FF 0C  
00640D  3  0A 10 FF 00  
006428  3  10 00 00 0C          .byte 16,0,0,12,12,255,0,11,17,255,12,16,16,0,12,12,255,0,10,17,255,12,18,16,12,12,13,13,255,0,5,13,13
00642C  3  0C FF 00 0B  
006430  3  11 FF 0C 10  
006449  3  FF 0C 17 FF          .byte 255,12,23,255,0,9,15,255,5,6,15,255,5,6,15,255,5,6,12,12,255,0,9,15,255,0,6,15,255,0,6,15,255,0,6
00644D  3  00 09 0F FF  
006451  3  05 06 0F FF  
00646C  3  0C 0C 0D 0D          .byte 12,12,13,13,255,0,5,13,13,12,255,1,6,12,255,1,6,12,255,1,6,12,12,255,0,9,15,255,5,6,15,255,5,6
006470  3  FF 00 05 0D  
006474  3  0D 0C FF 01  
00648E  3  0F FF 05 06          .byte 15,255,5,6,12,12,255,0,9,15,255,0,6,15,255,0,6,15,255,0,6,12,12,13,13,255,0,5,13,13,12,255,1,6
006492  3  0C 0C FF 00  
006496  3  09 0F FF 00  
0064B0  3  0C FF 01 06          .byte 12,255,1,6,12,255,1,6,12,14,255,0,9,15,255,5,6,15,255,5,6,15,255,5,6,12,14,255,0,9,15,255,0,6
0064B4  3  0C FF 01 06  
0064B8  3  0C 0E FF 00  
0064D2  3  0F FF 00 06          .byte 15,255,0,6,15,255,0,6,255,12,12,255,1,6,12,255,1,6,12,255,1,6,12
0064D6  3  0F FF 00 06  
0064DA  3  FF 0C 0C FF  
0064E9  3  FF 0C 21 FF          .byte 255,12,33,255,0,30,12,12,255,0,30,12,12,255,0,8,15,255,0,12,15,255,0,8,12,12,255,0,8,15,255,0,12
0064ED  3  00 1E 0C 0C  
0064F1  3  FF 00 1E 0C  
00650A  3  0F FF 00 08          .byte 15,255,0,8,12,12,255,0,8,255,15,4,255,12,6,255,15,4,255,0,8,12,12,255,0,12,255,5,6,255,0,12,12,12
00650E  3  0C 0C FF 00  
006512  3  08 FF 0F 04  
00652C  3  FF 00 1E 0C          .byte 255,0,30,12,12,255,0,4,13,13,255,0,4,13,13,255,1,6,13,13,255,0,4,13,13,255,0,4,12,12,255,0,12
006530  3  0C FF 00 04  
006534  3  0D 0D FF 00  
00654D  3  FF 05 06 FF          .byte 255,5,6,255,0,12,12,12,255,0,30,12,12,255,0,10,13,13,255,1,6,13,13,255,0,8,13,13,12,12,255,0,12
006551  3  00 0C 0C 0C  
006555  3  FF 00 1E 0C  
00656E  3  FF 05 06 FF          .byte 255,5,6,255,0,12,12,12,255,0,30,12,12,255,0,10,13,13,255,1,6,13,13,255,0,4,13,13,255,0,4,12,12
006572  3  00 0C 0C 0C  
006576  3  FF 00 1E 0C  
00658F  3  FF 00 08 0F          .byte 255,0,8,15,255,0,12,15,255,0,8,12,12,255,0,8,15,255,0,12,15,255,0,8,255,12,6,255,0,4,255,12,14
006593  3  FF 00 0C 0F  
006597  3  FF 00 08 0C  
0065B0  3  FF 00 04 FF          .byte 255,0,4,255,12,6,255,0,30,12,12,255,0,30,12,12,255,14,30,255,12,33
0065B4  3  0C 06 FF 00  
0065B8  3  1E 0C 0C FF  
0065C6  3  FF 0C 21 FF          .byte 255,12,33,255,5,5,255,0,6,255,5,5,255,0,9,255,5,5,12,12,255,0,30,12,12,255,1,5,13,13,255,0,4
0065CA  3  05 05 FF 00  
0065CE  3  06 FF 05 05  
0065E7  3  FF 01 05 0D          .byte 255,1,5,13,13,255,0,7,255,1,5,12,12,255,0,25,255,5,5,12,12,255,0,18,13,13,255,0,10,12,12,255,0,7
0065EB  3  0D FF 00 07  
0065EF  3  FF 01 05 0C  
006609  3  FF 0D 04 FF          .byte 255,13,4,255,0,12,13,13,255,1,5,12,12,255,0,30,12,12,255,0,20,13,13,255,0,8,12,12,255,0,5,13,13
00660D  3  00 0C 0D 0D  
006611  3  FF 01 05 0C  
00662A  3  FF 00 17 0C          .byte 255,0,23,12,12,13,13,255,0,9,255,13,9,255,0,10,12,12,255,0,30,12,12,255,0,23,13,13,255,0,5,12,12
00662E  3  0C 0D 0D FF  
006632  3  00 09 FF 0D  
00664B  3  FF 00 1E 0C          .byte 255,0,30,12,12,255,0,30,255,12,7,255,0,4,255,12,11,255,0,5,255,12,7,255,15,4,12,255,0,5,255,12,9
00664F  3  0C FF 00 1E  
006653  3  FF 0C 07 FF  
00666C  3  FF 00 06 FF          .byte 255,0,6,255,5,5,12,12,255,15,4,12,255,0,7,255,12,5,255,0,13,255,12,7,255,0,18,13,13,255,1,5,12,12
006670  3  05 05 0C 0C  
006674  3  FF 0F 04 0C  
00668E  3  FF 00 1E 0C          .byte 255,0,30,12,12,255,14,30,255,12,33
006692  3  0C FF 0E 1E  
006696  3  FF 0C 21     
006699  3  FF 0C 21 FF          .byte 255,12,33,255,5,4,255,0,13,15,255,0,7,15,255,0,4,12,12,255,0,17,15,255,0,7,15,255,0,4,12,12,255,1,4
00669D  3  05 04 FF 00  
0066A1  3  0D 0F FF 00  
0066BC  3  FF 00 0B 0D          .byte 255,0,11,13,13,12,255,13,10,0,0,12,12,255,0,17,12,255,0,12,12,12,255,0,17,12,255,0,12,12,12,255,0,4
0066C0  3  0D 0C FF 0D  
0066C4  3  0A 00 00 0C  
0066DE  3  0D 0D FF 00          .byte 13,13,255,0,8,255,12,4,255,0,10,13,13,12,12,255,0,14,12,255,0,15,12,12,255,0,14,12,255,0,15,255,12,10
0066E2  3  08 FF 0C 04  
0066E6  3  FF 00 0A 0D  
006700  3  07 07 0C 00          .byte 7,7,12,0,0,0,12,255,0,4,255,13,9,0,0,255,12,10,7,7,12,0,0,0,12,255,0,15,255,12,10,7,7
006704  3  00 00 0C FF  
006708  3  00 04 FF 0D  
006721  3  0C 00 00 00          .byte 12,0,0,0,12,255,0,15,255,12,10,7,7,12,0,0,0,12,0,255,13,7,12,0,0,12,13,13,13,12,12,0,0,0
006725  3  0C FF 00 0F  
006729  3  FF 0C 0A 07  
006743  3  FF 05 04 00          .byte 255,5,4,0,7,7,12,0,0,0,12,255,0,8,12,0,0,12,0,0,0,12,12,255,0,8,7,7,12,0,0,0,12
006747  3  07 07 0C 00  
00674B  3  00 00 0C FF  
006764  3  FF 00 08 0C          .byte 255,0,8,12,0,0,12,0,0,0,12,12,7,7,12,255,1,4,255,12,4,0,0,0,12,0,255,13,4,0,0,0,12
006768  3  00 00 0C 00  
00676C  3  00 00 0C 0C  
006785  3  00 00 0C 00          .byte 0,0,12,0,0,0,12,12,7,7,12,255,5,4,255,0,7,12,255,0,8,12,0,0,12,0,0,0,12,12,7,7,12
006789  3  00 00 0C 0C  
00678D  3  07 07 0C FF  
0067A6  3  FF 00 0B 0C          .byte 255,0,11,12,255,0,8,12,0,0,12,0,0,0,12,12,7,7,12,255,1,4,255,13,4,255,0,4,255,13,8,15,0,0
0067AA  3  FF 00 08 0C  
0067AE  3  00 00 0C 00  
0067C8  3  FF 0C 06 07          .byte 255,12,6,7,7,0,255,5,4,255,0,16,15,0,0,255,5,4,12,12,7,7,255,0,21,15,255,0,6,255,12,5,255,1,4
0067CC  3  07 00 FF 05  
0067D0  3  04 FF 00 10  
0067EB  3  FF 0C 13 FF          .byte 255,12,19,255,1,4,12
0067EF  3  01 04 0C     
0067F2  3  FF 0C 21 00          .byte 255,12,33,0,0,15,255,5,7,15,255,0,16,5,5,5,12,12,0,0,15,255,0,7,15,255,0,19,12,12,13,13,12
0067F6  3  00 0F FF 05  
0067FA  3  07 0F FF 00  
006813  3  FF 01 07 0C          .byte 255,1,7,12,13,13,255,0,6,255,13,8,1,1,1,12,12,0,0,15,255,5,7,15,255,0,19,12,12,0,0,15,255,0,7
006817  3  0D 0D FF 00  
00681B  3  06 FF 0D 08  
006836  3  0F FF 00 13          .byte 15,255,0,19,12,12,13,13,12,255,1,7,12,13,13,255,0,4,255,13,5,0,0,0,13,13,0,0,0,12,12,0,0
00683A  3  0C 0C 0D 0D  
00683E  3  0C FF 01 07  
006857  3  0F FF 05 07          .byte 15,255,5,7,15,255,0,19,12,12,0,0,15,255,0,7,15,255,0,19,12,12,13,13,12,255,1,7,12,13,13,255,0,4
00685B  3  0F FF 00 13  
00685F  3  0C 0C 00 00  
006879  3  FF 0D 05 00          .byte 255,13,5,0,0,0,13,13,12,7,7,12,12,0,0,15,255,5,7,15,255,0,16,12,7,7,12,12,0,0,15,255,0,7
00687D  3  00 00 0D 0D  
006881  3  0C 07 07 0C  
00689B  3  0F FF 00 10          .byte 15,255,0,16,12,7,7,12,12,13,13,12,255,1,7,12,13,13,255,0,5,255,13,6,0,0,0,12,7,7,12,12,255,5,4
00689F  3  0C 07 07 0C  
0068A3  3  0C 0D 0D 0C  
0068BE  3  FF 00 06 0C          .byte 255,0,6,12,255,0,7,12,255,0,8,12,7,7,12,12,255,0,10,12,255,0,7,12,255,0,8,12,7,7,12,12,255,1,4
0068C2  3  FF 00 07 0C  
0068C6  3  FF 00 08 0C  
0068E1  3  0D 0D FF 00          .byte 13,13,255,0,4,255,12,4,255,0,4,12,255,0,8,12,7,7,12,12,255,5,4,255,0,9,12,255,0,4,12,255,0,8
0068E5  3  04 FF 0C 04  
0068E9  3  FF 00 04 0C  
006903  3  0C 07 07 0C          .byte 12,7,7,12,12,255,0,13,12,255,0,4,12,255,0,8,12,7,7,12,12,255,1,4,13,13,255,0,7,12,255,0,4
006907  3  0C FF 00 0D  
00690B  3  0C FF 00 04  
006924  3  0C FF 00 08          .byte 12,255,0,8,12,7,7,12,12,255,0,13,15,255,0,4,15,255,0,9,7,7,12,12,255,0,13,15,255,0,4,15,255,0,9
006928  3  0C 07 07 0C  
00692C  3  0C FF 00 0D  
006947  3  07 07 FF 0C          .byte 7,7,255,12,33
00694B  3  21           
00694C  3  FF 0C 21 FF          .byte 255,12,33,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12
006950  3  00 1E 0C 0C  
006954  3  FF 00 1E 0C  
00696D  3  07 07 0C 0C          .byte 7,7,12,12,12,255,0,4,12,255,0,4,12,255,0,4,12,255,0,4,255,12,8,7,7,12,15,12,255,0,4,12,255,0,4
006971  3  0C FF 00 04  
006975  3  0C FF 00 04  
006990  3  0C FF 00 04          .byte 12,255,0,4,12,255,0,4,12,0,0,5,5,5,12,12,7,7,12,15,12,255,0,4,12,255,0,4,12,255,0,4,12
006994  3  0C FF 00 04  
006998  3  0C 00 00 05  
0069B1  3  FF 00 04 0C          .byte 255,0,4,12,255,0,5,12,12,7,7,12,15,12,255,0,4,12,255,0,4,12,255,0,4,12,255,0,4,12,0,0,1,1,1
0069B5  3  FF 00 05 0C  
0069B9  3  0C 07 07 0C  
0069D4  3  0C 0C 07 07          .byte 12,12,7,7,12,15,12,255,0,4,12,255,0,4,12,255,0,4,12,255,0,4,12,255,0,5,12,12,7,7,12,15,12
0069D8  3  0C 0F 0C FF  
0069DC  3  00 04 0C FF  
0069F5  3  FF 00 04 0C          .byte 255,0,4,12,255,0,4,12,255,0,4,12,255,0,4,12,255,0,5,12,12,7,7,12,15,12,255,0,4,12,255,0,4
0069F9  3  FF 00 04 0C  
0069FD  3  FF 00 04 0C  
006A16  3  0C FF 00 04          .byte 12,255,0,4,12,255,0,4,12,13,13,0,0,0,12,12,7,7,12,15,12,255,0,4,12,255,0,4,12,255,0,4,12
006A1A  3  0C FF 00 04  
006A1E  3  0C 0D 0D 00  
006A37  3  FF 00 04 0F          .byte 255,0,4,15,255,0,5,12,12,7,7,12,15,12,255,0,4,12,255,0,4,12,255,0,4,12,255,0,4,15,0,0,0
006A3B  3  FF 00 05 0C  
006A3F  3  0C 07 07 0C  
006A58  3  0D 0D 0C 0C          .byte 13,13,12,12,7,7,12,15,12,255,0,4,12,255,0,4,12,255,0,4,12,255,0,4,15,255,0,5,12,12,7,7,12
006A5C  3  07 07 0C 0F  
006A60  3  0C FF 00 04  
006A79  3  0F 0C FF 00          .byte 15,12,255,0,4,12,255,0,4,12,255,0,4,12,255,0,4,15,255,0,5,12,12,7,7,12,12,12,255,15,4,12,255,15,4
006A7D  3  04 0C FF 00  
006A81  3  04 0C FF 00  
006A9C  3  0C FF 0F 04          .byte 12,255,15,4,12,255,15,4,255,12,4,7,7,12,12,7,7,255,0,7,5,255,0,4,5,255,0,4,5,255,0,4,255,5,4
006AA0  3  0C FF 0F 04  
006AA4  3  FF 0C 04 07  
006ABF  3  07 07 0C 0C          .byte 7,7,12,12,7,7,255,0,26,7,7,255,12,11,1,255,12,4,1,255,12,4,1,255,12,4,255,1,4,12,12,12
006AC3  3  07 07 FF 00  
006AC7  3  1A 07 07 FF  
006ADF  3  FF 0C 21 00          .byte 255,12,33,0,0,5,5,5,255,0,22,5,5,5,12,12,255,0,30,12,12,7,7,1,1,1,13,13,255,0,18,13,13
006AE3  3  00 05 05 05  
006AE7  3  FF 00 16 05  
006B00  3  01 01 01 0C          .byte 1,1,1,12,12,7,7,12,255,0,27,12,12,7,7,12,255,0,27,12,12,7,7,12,0,0,13,13,255,0,4,13,13
006B04  3  0C 07 07 0C  
006B08  3  FF 00 1B 0C  
006B21  3  FF 00 06 0D          .byte 255,0,6,13,13,255,0,4,13,13,0,0,0,12,12,7,7,12,255,0,27,12,12,7,7,12,13,13,255,0,4,13,13
006B25  3  0D FF 00 04  
006B29  3  0D 0D 00 00  
006B42  3  FF 00 0A 0D          .byte 255,0,10,13,13,255,0,4,13,13,0,12,12,7,7,12,255,0,27,12,12,7,7,12,255,0,27,12,12,7,7,12,0,0
006B46  3  0D FF 00 04  
006B4A  3  0D 0D 00 0C  
006B64  3  0D 0D FF 00          .byte 13,13,255,0,6,255,12,6,255,0,6,13,13,0,0,0,12,12,7,7,12,255,0,10,15,255,0,4,15,255,0,11,12,12
006B68  3  06 FF 0C 06  
006B6C  3  FF 00 06 0D  
006B86  3  07 07 0C FF          .byte 7,7,12,255,0,10,15,255,0,4,15,255,0,11,12,12,7,7,12,13,13,0,0,0,13,13,0,0,0,15,255,0,4
006B8A  3  00 0A 0F FF  
006B8E  3  00 04 0F FF  
006BA7  3  0F FF 00 08          .byte 15,255,0,8,13,13,0,12,12,7,7,12,255,0,10,255,12,6,255,0,11,12,12,7,7,12,0,0,13,13,255,0,6
006BAB  3  0D 0D 00 0C  
006BAF  3  0C 07 07 0C  
006BC8  3  FF 05 06 FF          .byte 255,5,6,255,0,6,13,13,0,0,0,12,12,7,7,12,255,0,27,12,12,7,7,12,12,12,0,0,0,13,13,0,0,0
006BCC  3  00 06 0D 0D  
006BD0  3  00 00 00 0C  
006BEA  3  FF 01 06 00          .byte 255,1,6,0,0,0,13,13,0,0,0,255,12,5,7,7,5,5,5,255,0,8,255,5,6,255,0,8,5,5,5,12,12
006BEE  3  00 00 0D 0D  
006BF2  3  00 00 00 FF  
006C0B  3  07 07 FF 00          .byte 7,7,255,0,28,255,12,4,1,1,1,255,12,8,255,1,6,255,12,8,1,1,1,12
006C0F  3  1C FF 0C 04  
006C13  3  01 01 01 FF  
006C23  3  FF 0C 21 FF          .byte 255,12,33,255,0,30,12,12,255,0,25,12,255,0,4,12,12,255,0,25,12,255,0,4,12,12,255,0,25,12,12,12,7,7
006C27  3  00 1E 0C 0C  
006C2B  3  FF 00 19 0C  
006C45  3  FF 0C 0D FF          .byte 255,12,13,255,0,16,12,7,7,12,12,0,0,255,5,6,0,0,12,255,0,16,12,7,7,12,12,255,0,10,12,255,0,16
006C49  3  00 10 0C 07  
006C4D  3  07 0C 0C 00  
006C67  3  0C 07 07 0C          .byte 12,7,7,12,12,0,0,255,1,6,12,12,12,255,0,16,12,7,7,12,12,0,0,255,5,6,0,0,12,255,0,16,12
006C6B  3  0C 00 00 FF  
006C6F  3  01 06 0C 0C  
006C88  3  07 07 0C 0C          .byte 7,7,12,12,255,0,10,12,255,0,16,12,7,7,255,12,4,255,1,6,0,0,12,255,0,16,12,7,7,12,12,0,0
006C8C  3  FF 00 0A 0C  
006C90  3  FF 00 10 0C  
006CA9  3  FF 05 06 00          .byte 255,5,6,0,0,12,255,0,16,12,7,7,12,12,255,0,10,12,255,0,16,12,7,7,12,12,0,0,255,1,6,12,12,12
006CAD  3  00 0C FF 00  
006CB1  3  10 0C 07 07  
006CCB  3  FF 00 10 0C          .byte 255,0,16,12,7,7,12,12,0,0,255,5,6,255,0,20,7,7,12,12,255,0,28,7,7,255,12,4,255,1,6,12,12
006CCF  3  07 07 0C 0C  
006CD3  3  00 00 FF 05  
006CEC  3  0D 0D 00 00          .byte 13,13,0,0,0,13,13,255,15,13,12,12,255,0,17,255,15,13,12,12,255,0,17,255,15,13,12,12,255,14,17,255,15,13
006CF0  3  00 0D 0D FF  
006CF4  3  0F 0D 0C 0C  
006D0E  3  FF 0C 21             .byte 255,12,33
006D11  3  FF 00 98 04          .byte 255,0,152,4,0,0,4,0,4,255,0,26,4,0,0,4,0,4,255,0,26,255,4,6,255,0,27,255,4,4,255,0,28
006D15  3  00 00 04 00  
006D19  3  04 FF 00 1A  
006D32  3  04 04 00 04          .byte 4,4,0,4,255,0,28,255,4,4,255,0,28,255,4,4,255,0,28,4,0,4,4,255,0,23,20,21,0,0,0,255,4,4
006D36  3  FF 00 1C FF  
006D3A  3  04 04 FF 00  
006D54  3  FF 00 17 12          .byte 255,0,23,18,19,0,0,0,255,4,4,255,0,14,20,21,255,0,7,24,255,0,4,4,4,0,4,255,0,5,4,4,0
006D58  3  13 00 00 00  
006D5C  3  FF 04 04 FF  
006D75  3  04 00 04 04          .byte 4,0,4,4,0,0,18,19,255,0,7,24,255,0,4,255,4,4,255,0,6,255,4,5,0,0,0,24,255,0,8,24,255,0,4
006D79  3  00 00 12 13  
006D7D  3  FF 00 07 18  
006D98  3  FF 04 04 FF          .byte 255,4,4,255,0,6,4,4,0,4,4,0,0,0,24,255,0,8,24,255,0,4,255,4,4,255,0,6,255,4,26,255,0,6
006D9C  3  00 06 04 04  
006DA0  3  00 04 04 00  
006DBA  3  04 04 00 FF          .byte 4,4,0,255,4,21,0,4,255,0,6,255,4,24,0,4,255,0,6,255,4,26,0,0,0
006DBE  3  04 15 00 04  
006DC2  3  FF 00 06 FF  
006DD3  3               numsc:
006DD3  3  17                   .byte 23
006DD4  3               nmedat:
006DD4  3  04 00 70 10          .byte 4,0,112,16,1,13,136,160,255
006DD8  3  01 0D 88 A0  
006DDC  3  FF           
006DDD  3  04 03 88 60          .byte 4,3,136,96,1,24,72,152,1,15,72,136,1,16,88,128,1,16,88,144,1,16,104,136,1,17,88,112,1,18,88,160,1,19,120,120,1,20,120,152,1,21,136,120,1,22,136,152,255
006DE1  3  01 18 48 98  
006DE5  3  01 0F 48 88  
006E0E  3  00 00 10 08          .byte 0,0,16,8,1,4,16,80,1,4,56,32,2,5,136,160,1,4,112,80,2,5,40,144,2,5,64,104,2,5,88,136,255
006E12  3  01 04 10 50  
006E16  3  01 04 38 20  
006E2F  3  00 00 38 50          .byte 0,0,56,80,1,4,80,240,2,5,160,168,2,5,104,64,2,5,16,168,2,5,16,64,255
006E33  3  01 04 50 F0  
006E37  3  02 05 A0 A8  
006E48  3  00 00 88 78          .byte 0,0,136,120,4,8,24,56,4,8,24,72,5,9,24,184,2,5,104,200,5,9,24,168,1,4,72,232,4,8,88,152,5,9,88,88,4,8,88,136,5,9,88,104,2,5,104,40,255
006E4C  3  04 08 18 38  
006E50  3  04 08 18 48  
006E79  3  00 00 A0 08          .byte 0,0,160,8,1,4,48,232,2,5,16,120,2,5,88,224,2,5,88,32,1,4,128,16,6,5,40,176,6,5,64,80,1,4,48,40,3,7,136,208,255
006E7D  3  01 04 30 E8  
006E81  3  02 05 10 78  
006EA2  3  00 00 38 70          .byte 0,0,56,112,1,4,24,224,2,5,128,120,2,5,80,72,2,5,80,120,2,5,104,48,2,5,104,168,6,5,160,64,6,5,160,200,2,5,128,32,3,7,24,16,255
006EA6  3  01 04 18 E0  
006EAA  3  02 05 80 78  
006ECF  3  00 00 30 70          .byte 0,0,48,112,1,4,80,40,2,5,160,64,4,8,88,104,4,8,88,120,2,5,136,168,2,5,48,8,255
006ED3  3  01 04 50 28  
006ED7  3  02 05 A0 40  
006EEC  3  00 00 20 48          .byte 0,0,32,72,2,5,96,80,2,5,160,64,3,7,48,40,1,4,128,160,4,8,168,232,255
006EF0  3  02 05 60 50  
006EF4  3  02 05 A0 40  
006F05  3  00 00 18 70          .byte 0,0,24,112,3,7,40,232,1,4,48,80,1,4,48,160,2,5,112,64,2,5,160,24,2,5,152,184,255
006F09  3  03 07 28 E8  
006F0D  3  01 04 30 50  
006F22  3  00 00 10 78          .byte 0,0,16,120,2,5,160,200,2,5,160,96,2,5,160,24,2,5,160,152,1,4,16,56,255
006F26  3  02 05 A0 C8  
006F2A  3  02 05 A0 60  
006F3B  3  00 00 A0 30          .byte 0,0,160,48,2,5,160,72,2,5,160,104,2,5,160,144,2,5,160,176,2,5,160,208,1,4,112,80,1,4,112,144,2,5,16,208,1,4,112,208,255
006F3F  3  02 05 A0 48  
006F43  3  02 05 A0 68  
006F64  3  00 00 30 30          .byte 0,0,48,48,3,7,32,80,3,7,32,112,3,7,32,144,3,7,32,176,2,5,160,232,2,5,120,104,2,5,160,128,2,5,160,168,2,5,160,208,1,4,120,184,255
006F68  3  03 07 20 50  
006F6C  3  03 07 20 70  
006F91  3  00 00 18 70          .byte 0,0,24,112,1,4,104,40,2,5,160,8,2,5,136,192,2,5,112,112,3,7,48,176,255
006F95  3  01 04 68 28  
006F99  3  02 05 A0 08  
006FAA  3  00 00 40 08          .byte 0,0,64,8,2,5,160,112,2,5,160,152,2,5,160,216,2,5,136,104,2,5,136,224,2,5,136,160,2,5,112,112,2,5,112,152,2,5,112,208,1,4,32,96,255
006FAE  3  02 05 A0 70  
006FB2  3  02 05 A0 98  
006FD7  3  00 00 80 08          .byte 0,0,128,8,2,5,128,136,6,5,56,104,6,5,80,112,6,5,104,120,2,5,32,120,255
006FDB  3  02 05 80 88  
006FDF  3  06 05 38 68  
006FF0  3  00 00 70 08          .byte 0,0,112,8,6,5,112,152,6,5,72,128,1,4,96,64,6,5,112,224,1,4,72,232,6,5,40,72,255
006FF4  3  06 05 70 98  
006FF8  3  06 05 48 80  
00700D  3  00 00 28 80          .byte 0,0,40,128,4,8,96,232,4,8,96,216,4,8,48,232,5,9,72,216,2,5,136,80,6,5,136,168,3,7,16,216,6,5,88,136,2,5,16,192,2,5,160,200,1,4,120,176,255
007011  3  04 08 60 E8  
007015  3  04 08 60 D8  
00703E  3  00 00 70 60          .byte 0,0,112,96,4,8,96,184,2,5,16,32,2,5,64,48,2,5,40,48,2,5,88,48,3,7,16,160,4,8,96,152,4,8,96,168,6,5,40,144,3,7,64,168,1,4,16,16,255
007042  3  04 08 60 B8  
007046  3  02 05 10 20  
00706F  3  00 00 30 C8          .byte 0,0,48,200,1,4,24,32,6,6,136,232,2,5,136,64,2,5,136,96,2,5,136,136,2,5,136,168,6,5,160,88,255
007073  3  01 04 18 20  
007077  3  06 06 88 E8  
007090  3  00 00 70 78          .byte 0,0,112,120,1,4,160,56,1,4,24,56,1,4,112,144,1,4,24,192,2,5,160,232,2,5,16,232,2,5,80,32,2,5,136,64,2,5,80,128,2,5,80,208,2,5,160,144,255
007094  3  01 04 A0 38  
007098  3  01 04 18 38  
0070C1  3  00 00 20 08          .byte 0,0,32,8,4,15,64,168,4,21,128,152,5,22,128,184,4,19,112,152,4,20,112,184,4,16,96,168,4,16,80,160,4,16,80,176,4,17,80,144,4,18,80,192,1,13,24,232,255
0070C5  3  04 0F 40 A8  
0070C9  3  04 15 80 98  
0070F2  3  04 00 88 70          .byte 4,0,136,112,1,24,136,136,255
0070F6  3  01 18 88 88  
0070FA  3  FF           
0070FB  3               NUMOBJ = 1
0070FB  3               objdta:
0070FB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,56,120,254,56,120
0070FF  3  00 00 00 00  
007103  3  00 00 00 00  
007121  3               font:
007121  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
007125  3  00 00 00 00  
007129  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
00712D  3  30 00 30 00  
007131  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
007135  3  00 00 00 00  
007139  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
00713D  3  6C FE 6C 00  
007141  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
007145  3  7E 1E 7E 18  
007149  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
00714D  3  30 6E CE 00  
007151  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
007155  3  7E CC 7E 00  
007159  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
00715D  3  00 00 00 00  
007161  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
007165  3  18 18 0C 00  
007169  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
00716D  3  30 30 60 00  
007171  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
007175  3  7E 18 3C 00  
007179  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
00717D  3  7E 18 18 00  
007181  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
007185  3  00 18 18 30  
007189  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
00718D  3  7E 00 00 00  
007191  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
007195  3  00 38 38 00  
007199  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
00719D  3  18 30 60 00  
0071A1  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
0071A5  3  F6 E6 7C 00  
0071A9  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
0071AD  3  18 18 7E 00  
0071B1  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
0071B5  3  7C C0 FE 00  
0071B9  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
0071BD  3  06 C6 7C 00  
0071C1  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
0071C5  3  D8 FE 18 00  
0071C9  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
0071CD  3  06 C6 7C 00  
0071D1  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
0071D5  3  C6 C6 7C 00  
0071D9  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
0071DD  3  18 30 30 00  
0071E1  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
0071E5  3  C6 C6 7C 00  
0071E9  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
0071ED  3  7E 06 7C 00  
0071F1  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
0071F5  3  00 00 30 00  
0071F9  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
0071FD  3  00 30 30 60  
007201  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
007205  3  30 18 0C 00  
007209  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
00720D  3  00 7E 00 00  
007211  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
007215  3  0C 18 30 00  
007219  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
00721D  3  18 00 18 00  
007221  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
007225  3  FE C0 7C 00  
007229  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
00722D  3  FE C6 C6 00  
007231  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
007235  3  C6 C6 FC 00  
007239  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
00723D  3  C0 C6 7C 00  
007241  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
007245  3  C6 CC F8 00  
007249  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
00724D  3  C0 C0 FE 00  
007251  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
007255  3  C0 C0 C0 00  
007259  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
00725D  3  DE C6 7C 00  
007261  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
007265  3  C6 C6 C6 00  
007269  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
00726D  3  18 18 7E 00  
007271  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
007275  3  C6 C6 7C 00  
007279  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
00727D  3  D8 CC C6 00  
007281  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
007285  3  C0 C0 FE 00  
007289  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
00728D  3  C6 C6 C6 00  
007291  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
007295  3  DE CE C6 00  
007299  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
00729D  3  C6 C6 7C 00  
0072A1  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
0072A5  3  FC C0 C0 00  
0072A9  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
0072AD  3  F6 DE 7C 00  
0072B1  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
0072B5  3  FC CC C6 00  
0072B9  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
0072BD  3  06 C6 7C 00  
0072C1  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
0072C5  3  30 30 30 00  
0072C9  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
0072CD  3  C6 C6 7C 00  
0072D1  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
0072D5  3  C6 6C 38 00  
0072D9  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
0072DD  3  C6 FE 6C 00  
0072E1  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
0072E5  3  38 6C C6 00  
0072E9  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
0072ED  3  30 30 30 00  
0072F1  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
0072F5  3  30 60 FE 00  
0072F9  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
0072FD  3  18 18 1E 00  
007301  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
007305  3  30 18 0C 00  
007309  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
00730D  3  30 30 F0 00  
007311  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
007315  3  30 30 30 00  
007319  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
00731D  3  00 00 00 FF  
007321  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
007325  3  60 60 FE 00  
007329  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
00732D  3  7C CC 7C 00  
007331  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
007335  3  66 66 7C 00  
007339  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
00733D  3  60 60 3C 00  
007341  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
007345  3  CC CC 7C 00  
007349  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
00734D  3  F8 C0 7C 00  
007351  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
007355  3  30 30 30 00  
007359  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
00735D  3  CC 7C 0C 78  
007361  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
007365  3  CC CC CC 00  
007369  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
00736D  3  30 30 78 00  
007371  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
007375  3  0C 0C 6C 38  
007379  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
00737D  3  70 78 6C 00  
007381  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
007385  3  30 30 1C 00  
007389  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
00738D  3  FC FC FC 00  
007391  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
007395  3  CC CC CC 00  
007399  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
00739D  3  CC CC 78 00  
0073A1  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
0073A5  3  CC F8 C0 C0  
0073A9  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
0073AD  3  CC 7C 0C 0E  
0073B1  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
0073B5  3  60 60 60 00  
0073B9  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
0073BD  3  78 0C F8 00  
0073C1  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
0073C5  3  30 30 1C 00  
0073C9  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
0073CD  3  CC CC 78 00  
0073D1  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
0073D5  3  78 78 30 00  
0073D9  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
0073DD  3  FC FC 78 00  
0073E1  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
0073E5  3  30 78 CC 00  
0073E9  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
0073ED  3  CC 7C 0C 78  
0073F1  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
0073F5  3  30 60 FC 00  
0073F9  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
0073FD  3  18 18 1E 00  
007401  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
007405  3  18 18 18 00  
007409  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
00740D  3  30 30 F0 00  
007411  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
007415  3  00 00 00 00  
007419  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
00741D  3  E3 BB C6 7C  
007421  3               
007421  1               end_asm:
007421  1               
007421  1               ;----------------------------------------------------------------------
007421  1               ; RELOCATION OF BEEB CODE FROM LOAD ADDRESS
007421  1               ;----------------------------------------------------------------------
007421  1               
007421  1               relocate:
007421  1               ; Issue *TAPE otherwise DFS goes mental that we've overwritten workspace from &E00 - &1100
007421  1               
007421  1  A9 8C            lda #$8C
007423  1  A2 0C            ldx #$0C
007425  1  A0 00            ldy #$00
007427  1  20 F4 FF         jsr OSBYTE					; *FX &8C,0,0 - *TAPE 1200
00742A  1               
00742A  1               ; Other one off initialisation could happen here...
00742A  1               
00742A  1               ; Relocate all code down to &E00
00742A  1  A2 67        	ldx #>(end_asm - start_asm) + 1
00742C  1  A0 00        	ldy #0
00742E  1               reloop:
00742E  1  B9 00 12     	lda load_address, y
007431  1  99 00 0E     	sta asm_code, y
007434  1  C8           	iny
007435  1  D0 F7        	bne reloop
007437  1  EE 30 78     	inc reloop + 2 + load_address - asm_code
00743A  1  EE 33 78     	inc reloop + 5 + load_address - asm_code
00743D  1  CA           	dex
00743E  1  D0 EE        	bne reloop
007440  1  4C 03 0E     	jmp boot_game
007440  1               
