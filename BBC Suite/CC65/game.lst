ca65 V2.9.2 - (C) Copyright 1998-2000 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ; BBC Micro version by Kieran Connell 2018
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $0e00	; assembly address _BEEB
000000r 1               	.DEFINE load_address $1100	; load address _BEEB
000000r 1               	.DEFINE header   0		; Header Wouter Ras emulator
000000r 1               	.DEFINE filenaam "AGD"
000000r 1               
000000r 1               .org asm_code-22*header
000E00  1               
000E00  1               .IF header
000E00  1               ;********************************************************************
000E00  1               ; ATM Header for Atom emulator Wouter Ras
000E00  1               
000E00  1               name_start:
000E00  1               	.byte filenaam			; Filename
000E00  1               name_end:
000E00  1               	.repeat 16-name_end+name_start	; Fill with 0 till 16 chars
000E00  1               	  .byte $0
000E00  1               	.endrep
000E00  1               
000E00  1               	.word asm_code			; 2 bytes startaddress
000E00  1               	.word exec			; 2 bytes linkaddress
000E00  1               	.word eind_asm-start_asm	; 2 bytes filelength
000E00  1               
000E00  1               ;********************************************************************
000E00  1               .ENDIF
000E00  1               
000E00  1               start_asm:
000E00  1               	.include "z80-zp.inc"
000E00  1               
000E00  2               .segment "ZEROPAGE"
000E00  2               
000E00  2               ws	 = $60
000E00  2               
000E00  2               z80_f	 = ws+$00
000E00  2               z80_a	 = ws+$01
000E00  2               z80_af	 = z80_f
000E00  2               
000E00  2               z80_c	 = ws+$02
000E00  2               z80_b	 = ws+$03
000E00  2               z80_bc	 = z80_c
000E00  2               
000E00  2               z80_e	 = ws+$04
000E00  2               z80_d	 = ws+$05
000E00  2               z80_de	 = z80_e
000E00  2               
000E00  2               z80_l	 = ws+$06
000E00  2               z80_h	 = ws+$07
000E00  2               z80_hl	 = z80_l
000E00  2               
000E00  2               z80_x    = ws+$08
000E00  2               z80_i    = ws+$09
000E00  2               z80_ix	 = z80_x
000E00  2               
000E00  2               z80_iy	 = ws+$0a
000E00  2               
000E00  2               z80_fp	 = ws+$0c
000E00  2               z80_ap	 = ws+$0d
000E00  2               
000E00  2               z80_cp	 = ws+$0e
000E00  2               z80_bp	 = ws+$0f
000E00  2               z80_bcp	 = z80_cp
000E00  2               
000E00  2               z80_ep	 = ws+$10
000E00  2               z80_dp	 = ws+$11
000E00  2               z80_dep	 = z80_ep
000E00  2               
000E00  2               z80_lp	 = ws+$12
000E00  2               z80_hp	 = ws+$13
000E00  2               z80_hlp	 = z80_lp
000E00  2               
000E00  2               z80_sp   = ws+$14
000E00  2               
000E00  2               z80_reg0 = ws+$16
000E00  2               z80_reg1 = ws+$17
000E00  2               z80_reg2 = ws+$18
000E00  2               z80_reg3 = ws+$19
000E00  2               
000E00  2               z80_r	 = ws+$1a
000E00  2               
000E00  2               
000E00  1               .segment "CODE"
000E00  1               
000E00  1  4C 08 58     	jmp relocate + load_address - asm_code
000E03  1               
000E03  1               exec_game:
000E03  1               	.include "game.inc"
000E03  1               	.include "z80.asm"
000E03  2               .include "BALLOON.inc" 
000E03  2               
000E03  3               ; Game engine code --------------------------------------------------------------
000E03  3               
000E03  3               ; Arcade Game Designer.
000E03  3               ; (C) 2008 Jonathan Cauldwell.
000E03  3               ; ZX Spectrum Next Engine v0.1.
000E03  3               
000E03  3               ; Global definitions ------------------------------------------------------------
000E03  3               
000E03  3               	FONT = font		; Font address
000E03  3               
000E03  3               ; Block characteristics.
000E03  3               
000E03  3               	PLATFM = 1		; platform.
000E03  3               	WALL = PLATFM + 1	; solid wall.
000E03  3               	LADDER = WALL + 1	; ladder.
000E03  3               	FODDER = LADDER + 1	; fodder block.
000E03  3               	DEADLY = FODDER + 1	; deadly block.
000E03  3               	CUSTOM = DEADLY + 1	; custom block.
000E03  3               	NUMTYP = CUSTOM + 1	; number of types.
000E03  3               
000E03  3               ; Sprites.
000E03  3               
000E03  3               	NUMSPR = 12		; number of sprites.
000E03  3               	TABSIZ = 17		; size of each entry.
000E03  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000E03  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
000E03  3               
000E03  3               	var_Type = 0	; sprite type
000E03  3               	var_Image = 1	; sprite time number
000E03  3               	var_Frame = 2	; sprite frame
000E03  3               	var_Y = 3		; sprite y coordinate
000E03  3               	var_X = 4		; sprite X coordinate
000E03  3               
000E03  3               	var_newType = 5	; sprite new type
000E03  3               	var_newImage = 6	; sprite new image number
000E03  3               	var_newFrame = 7	; sprite new frame
000E03  3               	var_newY = 8		; sprite new y coordinate
000E03  3               	var_newX = 9		; sprite new x coordinate
000E03  3               	
000E03  3               	var_Direction = 10	; sprite direction
000E03  3               	var_Param1 = 11		; sprite parameter 1
000E03  3               	var_Param2 = 12		; sprite parameter 2
000E03  3               
000E03  3               	var_jumpLo = 13		; sprite jump ptr low
000E03  3               	var_jumpHi = 14		; sprite jump ptr high
000E03  3               	var_dataLo = 15		; sprite data ptr low
000E03  3               	var_dataHi = 16		; sprite data ptr high
000E03  3               
000E03  3               ; Particle engine.
000E03  3               
000E03  3               	NUMSHR = 55		; pieces of shrapnel.
000E03  3               	SHRSIZ = 6		; bytes per particle.
000E03  3               
000E03  3               ; Local vars
000E03  3               
000E03  3               	scraddr	= $80
000E03  3               	fntaddr	= $82
000E03  3               	tileaddr= $84
000E03  3               	bufaddr	= $86
000E03  3               	tmp     = $88
000E03  3               
000E03  3               	scr_l	= $90
000E03  3               	scr_r	= $92
000E03  3               	scr_txt	= $94
000E03  3               
000E03  3               ; System constants
000E03  3               
000E03  3               	ScreenAddr  = $5800	; Startaddress video RAM _BEEB
000E03  3               	ScreenSize 	= $8000 - ScreenAddr	; Screen size bytes _BEEB
000E03  3               	ScreenRowBytes = 320				; 40 columns
000E03  3               
000E03  3               	SpriteMaxY	= 185	; used for clipping bottom of screen
000E03  3               
000E03  3               ;	ScrSelAddr  = $b000	; Screen selection address
000E03  3               ;	KeyRowAddr  = $b000	; PIA key matrix row
000E03  3               ;	KeyColAddr  = $b001	; PIA key matrix column
000E03  3               ;	SpeakerBit  = $b002	; Speaker bit
000E03  3               ;	CmdReg      = $b400	; Command register AtoMMC
000E03  3               ;	DatReg      = $b401	; Data register AtoMMC 
000E03  3               ;	Timer2_Low  = $b808	; Timer 2 low byte
000E03  3               ;	Timer2_High = $b809	; Timer 2 high byte
000E03  3               
000E03  3               ; System calls
000E03  3               
000E03  3               ;	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
000E03  3               ;	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
000E03  3               ;	OSRDCH   = $fe94	; get key subroutine
000E03  3               ;   READKEY  = $fe71	; scan key matrix subroutine
000E03  3               
000E03  3               ; _BEEB MOS calls
000E03  3               
000E03  3               	OSBYTE	 = $fff4
000E03  3               	OSFILE	 = $ffdd
000E03  3               	OSWRCH	 = $ffee
000E03  3               	OSASCI	 = $ffe3
000E03  3               	OSWORD	 = $fff1
000E03  3               	OSFIND	 = $ffce
000E03  3               	OSGBPB	 = $ffd1
000E03  3               	OSARGS	 = $ffda
000E03  3               
000E03  3               ; Conditional compilation flags
000E03  3               ; Flags are set in commandline assembly
000E03  3               
000E03  3               ;	mflag = 0 		; MENU + INV
000E03  3               ;	pflag = 0		; Particle engine
000E03  3               ;	sflag = 0		; scrollytext
000E03  3               ;	fflag = 1		; Fontflag
000E03  3               
000E03  3               .if iflag
000E03  3               	TxtInvert   = $ff	; Invert byte for character printing
000E03  3               	ScrFillByte = $ff	; Screen fill byte for CLS
000E03  3               .else
000E03  3               	TxtInvert   = $00	; Invert byte for character printing
000E03  3               	ScrFillByte = $00	; Screen fill byte for CLS
000E03  3               .endif
000E03  3               	ScrMode     = 4		; Screen mode:	_BEEB (320x256x2)
000E03  3               
000E03  3               ; Workspace
000E03  3               
000E03  3               MAP 	= $300				; properties map buffer (3x256 bytes)
000E03  3               SCADTB_lb = MAP + $300
000E03  3               SCADTB_hb = SCADTB_lb + $100
000E03  3               
000E03  3               .if pflag
000E03  3               SHRAPN 	= $B00 - (NUMSHR * SHRSIZ)	; shrapnel table (55x6 bytes)
000E03  3               .endif
000E03  3               
000E03  3               ;===============================================================
000E03  3               ; Game starts here
000E03  3               ;===============================================================
000E03  3               
000E03  3               ;--------------------------------------------------------------
000E03  3               ; If a font is required...
000E03  3               ;--------------------------------------------------------------
000E03  3               
000E03  3  A9 BF        	lda #<(FONT-256)	; address of font.
000E05  3  8D 52 0E     	sta FontPtr
000E08  3  A9 50        	lda #>(FONT-256)
000E0A  3  8D 53 0E     	sta FontPtr+1
000E0D  3               
000E0D  3               :
000E0D  3  20 88 0F     	jsr game	 	; start the game.
000E10  3               
000E10  3  A2 FF        	ldx #$ff
000E12  3  A0 7F        	ldy #$7f
000E14  3  A9 81        	lda #$81
000E16  3  20 F4 FF     	jsr OSBYTE
000E19  3               
000E19  3  4C 0D 0E     	jmp :-
000E1C  3               
000E1C  3  60           	rts				; exit (to BASIC?)
000E1D  3               	
000E1D  3  00           contrl:	.byte 0			; control, 0 = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000E1E  3  00           joyval:	.byte 0			; joystick reading.
000E1F  3  00           frmno:	.byte 0			; selected frame.
000E20  3               
000E20  3               ; Don't change the order of these four.  
000E20  3               ; Menu routine relies on winlft following wintop.
000E20  3               
000E20  3  00           wintop:	.byte WINDOWTOP		; top of window.
000E21  3  00           winlft:	.byte WINDOWLFT		; left edge.
000E22  3  17           winhgt:	.byte WINDOWHGT		; window height.
000E23  3  1E           winwid:	.byte WINDOWWID		; window width.
000E24  3  22           numob:	.byte NUMOBJ		; number of objects in game.
000E25  3               
000E25  3               ; Variables start here.
000E25  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000E25  3               
000E25  3  00           wntopx:	.byte (8 * WINDOWTOP)
000E26  3  00           wnlftx:	.byte (8 * WINDOWLFT)
000E27  3  A8           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
000E28  3  DE           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
000E29  3               
000E29  3  00           scno:	.byte 0			; present screen number.
000E2A  3  03           numlif:	.byte 3			; number of lives.
000E2B  3               
000E2B  3  00           vara:	.byte 0			; general-purpose variable.
000E2C  3  00           varb:	.byte 0			; general-purpose variable.
000E2D  3  00           varc:	.byte 0			; general-purpose variable.
000E2E  3  00           vard:	.byte 0			; general-purpose variable.
000E2F  3  00           vare:	.byte 0			; general-purpose variable.
000E30  3  00           varf:	.byte 0			; general-purpose variable.
000E31  3  00           varg:	.byte 0			; general-purpose variable.
000E32  3  00           varh:	.byte 0			; general-purpose variable.
000E33  3  00           vari:	.byte 0			; general-purpose variable.
000E34  3  00           varj:	.byte 0			; general-purpose variable.
000E35  3  00           vark:	.byte 0			; general-purpose variable.
000E36  3  00           varl:	.byte 0			; general-purpose variable.
000E37  3  00           varm:	.byte 0			; general-purpose variable.
000E38  3  00           varn:	.byte 0			; general-purpose variable.
000E39  3  00           varo:	.byte 0			; general-purpose variable.
000E3A  3  00           varp:	.byte 0			; general-purpose variable.
000E3B  3  00           varq:	.byte 0			; general-purpose variable.
000E3C  3  00           varr:	.byte 0			; general-purpose variable.
000E3D  3  00           vars:	.byte 0			; general-purpose variable.
000E3E  3  00           vart:	.byte 0			; general-purpose variable.
000E3F  3  00           varu:	.byte 0			; general-purpose variable.
000E40  3  00           varv:	.byte 0			; general-purpose variable.
000E41  3  00           varw:	.byte 0			; general-purpose variable.
000E42  3  00           varz:	.byte 0			; general-purpose variable.
000E43  3               
000E43  3  00           charx:	.byte 0			; cursor x position.
000E44  3  00           chary:	.byte 0			; cursor y position.
000E45  3               
000E45  3  00           clock:	.byte 0			; last clock reading.
000E46  3  FF           varrnd:	.byte 255		; last random number.
000E47  3  FE           varobj:	.byte 254		; last object number.
000E48  3  FF           varopt:	.byte 255		; last option chosen from menu.
000E49  3  FF           varblk:	.byte 255		; block type.
000E4A  3  00           nexlev:	.byte 0			; next level flag.
000E4B  3  00           restfl:	.byte 0			; restart screen flag.
000E4C  3  00           deadf:	.byte 0			; dead flag.
000E4D  3  00           gamwon:	.byte 0			; game won flag.
000E4E  3  00           dispx:	.byte 0			; cursor x position.
000E4F  3  00           dispy:	.byte 0			; cursor y position.
000E50  3               
000E50  3               ; Make sure pointers are arranged in the same order as the data itself.
000E50  3               
000E50  3  1D 4B        frmptr:	.word frmlst         ; sprite frames.
000E52  3               
000E52  3               ;----------------------------------------------------
000E52  3               ; Missing vars 
000E52  3               ;----------------------------------------------------
000E52  3               
000E52  3  00 00        FontPtr:	.byte 0,0
000E54  3               
000E54  3  00           loopa:		.byte 0
000E55  3  00           loopb:		.byte 0
000E56  3  00           loopc:		.byte 0
000E57  3               
000E57  3               ; Assorted game routines which can go in contended memory.
000E57  3               
000E57  3               ;--------------------------------------------------------------
000E57  3               ; Modify for inventory.
000E57  3               ; called by the INV command
000E57  3               ;
000E57  3               ; Input:
000E57  3               ;  X   = message nr with objects seperated with ,
000E57  3               ;
000E57  3               ; Output:
000E57  3               ;  OPT = selected line nr of INV menu
000E57  3               ;--------------------------------------------------------------
000E57  3               
000E57  3               .if mflag
000E57  3               TmpAddr:	.byte 0,0
000E57  3               
000E57  3               minve:
000E57  3               	lda #<(invdis)		; routine address.
000E57  3               	sta mod0+1		; set up menu routine.
000E57  3               	sta mod2+1		; set up count routine.
000E57  3               	lda #>(invdis)
000E57  3               	sta mod0+2
000E57  3               	sta mod2+2
000E57  3               	lda #<(fopt)		; find option from available objects.
000E57  3               	sta mod1+1		; set up routine.
000E57  3               	lda #>(fopt)
000E57  3               	sta mod1+1+1
000E57  3               	jmp dbox		; do menu routine.
000E57  3               
000E57  3               ;--------------------------------------------------------------
000E57  3               ; Modify for menu.
000E57  3               ; called by the MENU command
000E57  3               ;
000E57  3               ; Input:
000E57  3               ;  X   = message nr with menu items seperated with ,
000E57  3               ;
000E57  3               ; Output:
000E57  3               ;  OPT = selected line nr of MENU menu
000E57  3               ;--------------------------------------------------------------
000E57  3               
000E57  3               mmenu:
000E57  3               	lda #<(always)		; routine address.
000E57  3               	sta mod0+1		; set up routine.
000E57  3               	sta mod2+1		; set up count routine.
000E57  3               	lda #>(always)
000E57  3               	sta mod0+2
000E57  3               	sta mod2+2
000E57  3               
000E57  3               	lda #<(fstd)		; standard option selection.
000E57  3               	sta mod1+1		; set up routine.
000E57  3               	lda #>(fstd)
000E57  3               	sta mod1+2
000E57  3               
000E57  3               ; Drop through into box routine.
000E57  3               
000E57  3               ;--------------------------------------------------------------
000E57  3               ; Work out size of box for message or menu.
000E57  3               ;--------------------------------------------------------------
000E57  3               
000E57  3               dbox:
000E57  3               	lda #<(msgdat)		; pointer to messages.
000E57  3               	sta z80_l
000E57  3               	lda #>(msgdat)
000E57  3               	sta z80_h
000E57  3               	
000E57  3               	jsr getwrd		; get message number.
000E57  3               
000E57  3               	lda z80_h		; store pointer to message.
000E57  3               	sta TmpAddr
000E57  3               	lda z80_l
000E57  3               	sta TmpAddr+1
000E57  3               
000E57  3               	lda #1			; height.
000E57  3               	sta z80_d
000E57  3               	lda #0			; start at object zero.
000E57  3               	sta combyt		; store number of object in combyt.
000E57  3               	sta z80_e		; maximum width.
000E57  3               dbox5:
000E57  3               	lda #0			; this line"s width.
000E57  3               	sta z80_b
000E57  3               mod2:
000E57  3               	jsr always		; item in player"s possession?
000E57  3               	cmp #255
000E57  3               	bne dbox6		; not in inventory, skip this line.
000E57  3               	inc z80_d		; add to tally.
000E57  3               dbox6:
000E57  3               	ldy #0			; get character.
000E57  3               	lda (z80_hl),y
000E57  3               	sta z80_a
000E57  3               	inc z80_l		; next character.
000E57  3               	bne :+
000E57  3               	inc z80_h
000E57  3               :
000E57  3               	lda z80_a		; reached end of line?
000E57  3               	cmp #','
000E57  3               	beq dbox3		; yes.
000E57  3               	cmp #13
000E57  3               	beq dbox3		; yes.
000E57  3               	inc z80_b		; add to this line"s width.
000E57  3               	lda z80_a
000E57  3               	bmi dbox4		; end of message? yes, end count.
000E57  3               	jmp dbox6		; repeat until we find the end.
000E57  3               dbox3:
000E57  3               	lda z80_e		; maximum line width.
000E57  3               	cmp z80_b		; have we exceeded longest so far?
000E57  3               	bpl dbox5		; no, carry on looking.
000E57  3               	lda z80_b		; make this the widest so far.
000E57  3               	sta z80_e
000E57  3               	jmp dbox5		; keep looking.
000E57  3               dbox4:
000E57  3               	lda z80_e		; maximum line width.
000E57  3               	cmp z80_b		; have we exceeded longest so far?
000E57  3               	bpl dbox8		; no, carry on looking.
000E57  3               	lda z80_b		; final line is the longest so far.
000E57  3               	sta z80_e
000E57  3               dbox8:
000E57  3               	dec z80_d		; decrement items found.
000E57  3               	bne :+			; total was zero.
000E57  3               	jmp dbox15		
000E57  3               :
000E57  3               	lda z80_e		; longest line.
000E57  3               	bne :+			; was it zero?
000E57  3               	jmp dbox15		; total was zero.
000E57  3               :
000E57  3               	sta bwid		; set up size.
000E57  3               	lda z80_d
000E57  3               	sta blen
000E57  3               
000E57  3               ;--------------------------------------------------------------
000E57  3               ; That's set up our box size.
000E57  3               ;--------------------------------------------------------------
000E57  3               
000E57  3               	lda winhgt		; window height in characters.
000E57  3               	sec
000E57  3               	sbc z80_d		; subtract height of box.
000E57  3               	lsr a			; divide by 2.
000E57  3               	clc
000E57  3               	adc wintop		; add top edge of window.
000E57  3               	sta btop		; set up box top.
000E57  3               
000E57  3               	lda winwid		; window width in characters.
000E57  3               	sec	
000E57  3               	sbc z80_e		; subtract box width.
000E57  3               	lsr a			; divide by 2.
000E57  3               	clc
000E57  3               	adc winlft		; add left edge of window.
000E57  3               	sta blft		; box left.
000E57  3               
000E57  3               	lda FontPtr		; font.
000E57  3               	sta grbase		; set up for text display.
000E57  3               	lda FontPtr+1
000E57  3               	sta grbase+1
000E57  3               
000E57  3               	lda TmpAddr+1		; restore message pointer.
000E57  3               	sta z80_l
000E57  3               	lda TmpAddr
000E57  3               	sta z80_h
000E57  3               
000E57  3               	lda btop		; box top.
000E57  3               	sta dispy		; set display coordinate.
000E57  3               	lda #0			; start at object zero.
000E57  3               	sta combyt		; store number of object in combyt.
000E57  3               dbox2:
000E57  3               	lda combyt		; get object number.
000E57  3               	sta z80_a
000E57  3               mod0:
000E57  3               	jsr always		; check inventory for display.
000E57  3               	cmp #255
000E57  3               	beq :+			
000E57  3               	jmp dbox13		; not in inventory, skip this line.
000E57  3               :
000E57  3               	lda blft		; box left.
000E57  3               	sta dispx		; set left display position.
000E57  3               	lda bwid		; box width.
000E57  3               	sta z80_b		; store width.
000E57  3               dbox0:
000E57  3               	ldy #0			; get character.
000E57  3               	lda (z80_hl),y
000E57  3               	cmp #','		; end of line?
000E57  3               	beq dbox1		; yes, next one.
000E57  3               	cmp #13			; end of line?
000E57  3               	beq dbox1		; yes, next one.
000E57  3               
000E57  3               	dec z80_b		; one less to display.
000E57  3               	and #127		; remove terminator.
000E57  3               
000E57  3               	jsr pchr		; display on screen.
000E57  3               
000E57  3               	ldy #0
000E57  3               	lda (z80_hl),y		; get character.
000E57  3               	sta z80_a
000E57  3               	inc z80_l		; next character.
000E57  3               	bne :+
000E57  3               	inc z80_h
000E57  3               :
000E57  3               	lda z80_a
000E57  3               	cmp #128		; end of message?
000E57  3               	bmi :+
000E57  3               	jmp dbox7		; yes, job done.
000E57  3               :
000E57  3               	lda z80_b		; chars remaining.
000E57  3               	beq :+			; are any left?
000E57  3               	jmp dbox0		; yes, continue.
000E57  3               :
000E57  3               ;---------------------------------------------------
000E57  3               ; Reached limit of characters per line.
000E57  3               ;---------------------------------------------------
000E57  3               
000E57  3               dbox9:
000E57  3               	ldy #0
000E57  3               	lda (z80_hl),y		; get character.
000E57  3               	inc z80_l		; next one.
000E57  3               	bne :+
000E57  3               	inc z80_h
000E57  3               :
000E57  3               	cmp #','		; another line?
000E57  3               	beq dbox10		; yes, do next line.
000E57  3               	cmp #13			; another line?
000E57  3               	beq dbox10		; yes, do next line.
000E57  3               	cmp #128		; end of message?
000E57  3               	bcs :+
000E57  3               	jmp dbox11		; yes, finish message.
000E57  3               :
000E57  3               	jmp dbox9
000E57  3               
000E57  3               ;---------------------------------------------------
000E57  3               ; Fill box to end of line.
000E57  3               ;---------------------------------------------------
000E57  3               
000E57  3               dboxf:
000E57  3               	lda #32			; space character.
000E57  3               	jsr pchr		; display character.
000E57  3               	dec z80_b
000E57  3               	beq :+
000E57  3               	jmp dboxf		; repeat for remaining chars on line.
000E57  3               :
000E57  3               	rts
000E57  3               dbox1:
000E57  3               	inc z80_l		; skip character.
000E57  3               	bne :+
000E57  3               	inc z80_h
000E57  3               :
000E57  3               	jsr dboxf		; fill box out to right side.
000E57  3               dbox10:
000E57  3               	inc dispy		; y coordinate down a line next position.
000E57  3               	jmp dbox2		; next line.
000E57  3               dbox7:
000E57  3               	lda z80_b		; chars remaining.
000E57  3               	bne :+			; are any left?
000E57  3               	jmp dbox11		; no, nothing to draw.
000E57  3               :
000E57  3               	jsr dboxf		; fill message to line.
000E57  3               
000E57  3               ;------------------------------------------------------
000E57  3               ; Drawn the box menu, now select option.
000E57  3               ;------------------------------------------------------
000E57  3               
000E57  3               dbox11:
000E57  3               	lda btop		; box top.
000E57  3               	sta dispy		; set bar position.
000E57  3               dbox14:
000E57  3               	jsr joykey		; get controls.
000E57  3               	cmp #$7f		; anything pressed?
000E57  3               	bne dbox14		; yes, debounce it.
000E57  3               	jsr dbar		; draw bar.
000E57  3               dbox12:
000E57  3               	jsr joykey		; get controls.
000E57  3               	cmp #$7f		; anything pressed?
000E57  3               	beq dbox12		; no, nothing.
000E57  3               	and #16			; fire button pressed?
000E57  3               	bne :+
000E57  3               mod1:
000E57  3               	jmp fstd		; yes, job done.
000E57  3               :
000E57  3               	jsr dbar		; delete bar.
000E57  3               
000E57  3               	lda joyval		; joystick reading.
000E57  3               	and #8			; going up?
000E57  3               	beq dboxu		; yes, go up.
000E57  3               
000E57  3               	ldx dispy		; vertical position of bar.
000E57  3               	inx			; look down.
000E57  3               	txa
000E57  3               	sec
000E57  3               	sbc btop		; find distance from top.
000E57  3               	cmp blen		; top of box.
000E57  3               	bne :+
000E57  3               	jmp dbox14		; yes, go no further.
000E57  3               :
000E57  3               	inc dispy		; move bar.
000E57  3               	jmp dbox14		; continue.
000E57  3               dboxu:
000E57  3               	lda dispy		; vertical position of bar.
000E57  3               	cmp btop		; are we at the top?
000E57  3               	bne :+
000E57  3               	jmp dbox14		; yes, go no further.
000E57  3               :
000E57  3               	dec dispy		; move bar.
000E57  3               	jmp dbox14		; continue.
000E57  3               fstd:
000E57  3               	lda dispy		; bar position.
000E57  3               	sec
000E57  3               	sbc btop		; find selected option.
000E57  3               	sta varopt		; store the option.
000E57  3               	jmp redraw		; redraw the screen.
000E57  3               
000E57  3               ;------------------------------------------------------
000E57  3               ; Option not available.  Skip this line.
000E57  3               ;------------------------------------------------------
000E57  3               
000E57  3               dbox13:
000E57  3               	ldy #0
000E57  3               	lda (z80_hl),y		; get character.
000E57  3               	inc z80_l		; next one.
000E57  3               	bne :+
000E57  3               	inc z80_h
000E57  3               :
000E57  3               	cmp #','		; another line?
000E57  3               	bne :+
000E57  3               	jmp dbox2		; yes, do next line.
000E57  3               :
000E57  3               	cmp #13			; another line?
000E57  3               	bne :+
000E57  3               	jmp dbox2		; yes, do next line.
000E57  3               :
000E57  3               
000E57  3               	bpl :+			; end of message?
000E57  3               	jmp dbox11		; yes, finish message.
000E57  3               :
000E57  3               	jmp dbox13
000E57  3               dbox15:
000E57  3               	lda TmpAddr		; pop message pointer from the stack.
000E57  3               	sta z80_h
000E57  3               	lda TmpAddr+1
000E57  3               	sta z80_l
000E57  3               	rts
000E57  3               
000E57  3               ;------------------------------------------------------
000E57  3               ; Invert bar
000E57  3               ;------------------------------------------------------
000E57  3               
000E57  3               dbar:
000E57  3               	lda blft		; box left.
000E57  3               	sta dispx		; set display coordinate.
000E57  3               	jsr gprad		; get printing address.
000E57  3               
000E57  3               	lda bwid		; box width.
000E57  3               	sta z80_c		; loop counter in c.
000E57  3               	lda z80_h		
000E57  3               	sta z80_d		; store screen address high byte.
000E57  3               dbar1:
000E57  3               	ldx #7			; pixel height in b.
000E57  3               dbar0:
000E57  3               	ldy scrtab,x
000E57  3               	lda (scraddr),y		; get screen byte.
000E57  3               	eor #255		; reverse all bits.
000E57  3               	sta (scraddr),y		; write back to screen.
000E57  3               	dex			; next line down.
000E57  3               	bpl dbar0		; draw rest of character.
000E57  3               
000E57  3               	clc
000E57  3               	lda scraddr		; one char right.
000E57  3               	adc #8
000E57  3               	sta scraddr
000E57  3               	bcc :+
000E57  3               	inc scraddr+1
000E57  3               :
000E57  3               
000E57  3               	dec z80_c		; decrement character counter.
000E57  3               	beq :+
000E57  3               	jmp dbar1		; repeat for whole line.
000E57  3               :
000E57  3               	rts
000E57  3               
000E57  3               ;------------------------------------------------------
000E57  3               ; Point to object
000E57  3               ;
000E57  3               ; Input:
000E57  3               ;  -
000E57  3               ;
000E57  3               ; Output:
000E57  3               ;  A = object number, A=255 if already in possession
000E57  3               ;------------------------------------------------------
000E57  3               
000E57  3               invdis:
000E57  3               	lda z80_l		; store message text pointer.
000E57  3               	pha
000E57  3               	lda z80_h
000E57  3               	pha
000E57  3               	lda combyt		; object number.
000E57  3               	inc combyt		; ready for next one.
000E57  3               	jsr gotob		; check if we have object.
000E57  3               	tay
000E57  3               	pla
000E57  3               	sta z80_h
000E57  3               	pla
000E57  3               	sta z80_l
000E57  3               	tya
000E57  3               	rts
000E57  3               
000E57  3               ;------------------------------------------------------
000E57  3               ; Find option selected.
000E57  3               ;
000E57  3               ; Input:
000E57  3               ;  -
000E57  3               ;
000E57  3               ; Output:
000E57  3               ;  OPT = selected object
000E57  3               ;------------------------------------------------------
000E57  3               
000E57  3               fopt:
000E57  3               	lda dispy
000E57  3               	sec
000E57  3               	sbc btop		; find selected option.
000E57  3               	sta tmp+2		; option selected in b register.
000E57  3               	inc tmp+2
000E57  3               
000E57  3               	lda #0			; set to first item.
000E57  3               	sta combyt		; object number.
000E57  3               fopt0:
000E57  3               	jsr fobj		; find next object in inventory.
000E57  3               	dec tmp+2
000E57  3               	bne fopt0		; repeat for relevant steps down the list.
000E57  3               
000E57  3               	lda combyt		; get option.
000E57  3               	sta varopt		; store the option.
000E57  3               	dec varopt		; one less, due to where we increment combyt.
000E57  3               	jmp redraw		; redraw the screen.
000E57  3               fobj:
000E57  3               	ldy combyt		; object number.
000E57  3               	inc combyt		; ready for next item.
000E57  3               	tya
000E57  3               	jsr gotob		; do we have this item?
000E57  3               	cmp #255
000E57  3               	bne :+
000E57  3               	rts
000E57  3               :
000E57  3               	jmp fobj		; yes, it's on the list.
000E57  3               
000E57  3               bwid:	.byte 0              ; box/menu width.
000E57  3               blen:	.byte 0              ; box/menu height.
000E57  3               btop:	.byte 0              ; box coordinates.
000E57  3               blft:	.byte 0
000E57  3               .endif
000E57  3               
000E57  3               ;----------------------------------------------------
000E57  3               ; Wait for keypress.
000E57  3               ;----------------------------------------------------
000E57  3               
000E57  3               prskey:
000E57  3  8A           	txa
000E58  3  48           	pha
000E59  3               prsloop:
000E59  3  20 C2 0E     	jsr vsync
000E5C  3               ; _BEEB KEYS
000E5C  3  A9 79        	lda #$79
000E5E  3  A2 01        	ldx #$01
000E60  3  20 F4 FF     	jsr OSBYTE
000E63  3  E0 FF        	cpx #$ff
000E65  3  F0 F2        	beq prsloop		; wait until key pressed
000E67  3  68           	pla
000E68  3  AA           	tax
000E69  3  60           	rts
000E6A  3               
000E6A  3               ;----------------------------------------------------
000E6A  3               ; Delay routine 1/50 sec
000E6A  3               ;
000E6A  3               ; Wait 1/60 sec = 16666 usec
000E6A  3               ; Wait 208 x 16 =  3328 usec
000E6A  3               ;                 19994 usec
000E6A  3               ; rts           =     6 usec
000E6A  3               ; Total         = 20000 usec
000E6A  3               ;----------------------------------------------------
000E6A  3               
000E6A  3               delay:
000E6A  3  8D 49 16     	sta xtmp
000E6D  3               del_loop:
000E6D  3  A9 13        	lda #19
000E6F  3  20 F4 FF     	jsr OSBYTE		; wait for vsync _BEEB
000E72  3               
000E72  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
000E74  3               delay1:
000E74  3  61 80        	adc ($80,x)		;	 6 usec
000E76  3  61 80        	adc ($80,x)		;	 6 usec
000E78  3  88           	dey			;	 2 usec
000E79  3  D0 F9        	bne delay1		;	 2 usec
000E7B  3  EA           	nop			; 2 usec
000E7C  3  EA           	nop			; 2 usec
000E7D  3               				; tot: 20000 usec
000E7D  3  CE 49 16     	dec xtmp
000E80  3  D0 EB        	bne del_loop
000E82  3  60           	rts
000E83  3               
000E83  3               ;----------------------------------------------------
000E83  3               ; Clear sprite table.
000E83  3               ;
000E83  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
000E83  3               ;----------------------------------------------------
000E83  3               
000E83  3               xspr:
000E83  3  A9 FF        	lda #255		; clear byte.
000E85  3  A2 00        	ldx #0			; length of table.
000E87  3               xspr0:
000E87  3  9D 96 22     	sta sprtab,x		; sprite table.
000E8A  3  E8           	inx			; move to next byte.
000E8B  3  E0 CC        	cpx #SPRBUF
000E8D  3  D0 F8        	bne xspr0		; repeat for rest of table.
000E8F  3  60           	rts
000E90  3               
000E90  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000E90  3               ; Sound, NOT IMPLEMENTED!!!
000E90  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000E90  3               ;
000E90  3               ;silenc:
000E90  3               ;	jsr silen1 		; silence channel 1.
000E90  3               ;	jsr silen2 		; silence channel 2.
000E90  3               ;	jsr silen3 		; silence channel 3.
000E90  3               ;	jmp plsnd 		; play all channels to switch them off.
000E90  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000E90  3               
000E90  3               ;-------------------------------------------------------------
000E90  3               ; Initialise all objects.
000E90  3               ;
000E90  3               ; Reset current room,y,x to start room,y,x for all objects
000E90  3               ;-------------------------------------------------------------
000E90  3               
000E90  3               iniob:
000E90  3  A9 B3        	lda #<objdta 		; objects table.
000E92  3  85 68        	sta z80_x
000E94  3  A9 4C        	lda #>objdta
000E96  3  85 69        	sta z80_i
000E98  3               
000E98  3  AE 24 0E     	ldx numob 		; number of objects in the game.
000E9B  3               iniob0:
000E9B  3  A0 23        	ldy #35
000E9D  3  B1 68        	lda (z80_ix),y 		; start screen.
000E9F  3  A0 20        	ldy #32
000EA1  3  91 68        	sta (z80_ix),y 		; set start screen.
000EA3  3               
000EA3  3  A0 24        	ldy #36
000EA5  3  B1 68        	lda (z80_ix),y 		; find start y.
000EA7  3  A0 21        	ldy #33
000EA9  3  91 68        	sta (z80_ix),y 		; set start y.
000EAB  3               
000EAB  3  A0 25        	ldy #37
000EAD  3  B1 68        	lda (z80_ix),y 		; get initial x.
000EAF  3  A0 22        	ldy #34
000EB1  3  91 68        	sta (z80_ix),y 		; set x coord.
000EB3  3               
000EB3  3  18           	clc 			; point to next object.
000EB4  3  A5 68        	lda z80_x
000EB6  3  69 26        	adc #38			; distance between objects.
000EB8  3  85 68        	sta z80_x
000EBA  3  90 02        	bcc :+
000EBC  3  E6 69        	inc z80_i
000EBE  3               :
000EBE  3  CA           	dex 			; repeat.
000EBF  3  D0 DA        	bne iniob0
000EC1  3               
000EC1  3  60           	rts
000EC2  3               
000EC2  3               ;-------------------------------------------------------------
000EC2  3               ; Screen synchronisation.
000EC2  3               ;
000EC2  3               ;  - read joystick/keyboard
000EC2  3               ;  - handle sound
000EC2  3               ;  - sync framerate with clock
000EC2  3               ;  - handle shrapnel every even frame
000EC2  3               ;-------------------------------------------------------------
000EC2  3               
000EC2  3               vsync:
000EC2  3  48           	pha
000EC3  3  98           	tya
000EC4  3  48           	pha
000EC5  3  8A           	txa
000EC6  3  48           	pha
000EC7  3  20 AB 19     	jsr joykey		; read joystick/keyboard.
000ECA  3               vsync1:
000ECA  3               ;	lda Timer2_High		; sync framerate with clock
000ECA  3               ;	bne vsync1
000ECA  3               ;	lda #>50000
000ECA  3               ;	sta Timer2_High
000ECA  3               ;	lda #<50000
000ECA  3               ;	sta Timer2_Low
000ECA  3               
000ECA  3  A9 13        	lda #19
000ECC  3  20 F4 FF     	jsr OSBYTE		; _BEEB vsync
000ECF  3               
000ECF  3  AD 45 0E     	lda clock
000ED2  3  29 01        	and #1
000ED4  3  D0 03        	bne:+
000ED6  3  20 87 0F     	jsr proshr		; handle shrapnel every even frame
000ED9  3               :
000ED9  3  AD E4 0E     	lda sndtyp
000EDC  3  F0 00        	beq sndskip
000EDE  3               ; _BEEB TODO SOUND
000EDE  3               ;sndloop:
000EDE  3               ;	lda SpeakerBit		; handle sound
000EDE  3               ;	ldy sndtyp
000EDE  3               ;sndwait:
000EDE  3               ;	dey
000EDE  3               ;	bne sndwait
000EDE  3               ;	eor #4
000EDE  3               ;	sta SpeakerBit
000EDE  3               ;	dec sndtyp
000EDE  3               ;	bne sndloop
000EDE  3               sndskip: 
000EDE  3  68           	pla
000EDF  3  AA           	tax
000EE0  3  68           	pla
000EE1  3  A8           	tay
000EE2  3  68           	pla
000EE3  3  60           	rts
000EE4  3               
000EE4  3  00           sndtyp:	.byte 0
000EE5  3               
000EE5  3               ;-----------------------------------------------
000EE5  3               ; Redraw the screen.
000EE5  3               ;
000EE5  3               ; Remove old copy of all sprites for redraw.
000EE5  3               ;-----------------------------------------------
000EE5  3               
000EE5  3               redraw:
000EE5  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
000EE7  3  48           	pha
000EE8  3  A5 68        	lda z80_x
000EEA  3  48           	pha
000EEB  3               
000EEB  3  20 80 16     	jsr droom		; show screen layout.
000EEE  3  20 7F 11     	jsr shwob		; draw objects.
000EF1  3               numsp0:
000EF1  3  A9 0C        	lda #NUMSPR		; sprites to draw.
000EF3  3  85 88        	sta tmp
000EF5  3               
000EF5  3  A9 96        	lda #<sprtab		; sprite table.
000EF7  3  85 68        	sta z80_x
000EF9  3  A9 22        	lda #>sprtab
000EFB  3  85 69        	sta z80_i
000EFD  3               redrw0:
000EFD  3  A0 00        	ldy #0
000EFF  3  B1 68        	lda (z80_ix),y		; old sprite type.
000F01  3  C9 FF        	cmp #255		; is it enabled?
000F03  3  F0 0B        	beq redrw1 		; no, find next one.
000F05  3               
000F05  3  A0 03        	ldy #var_Y
000F07  3  B1 68        	lda (z80_ix),y 		; sprite y.
000F09  3  C9 B1        	cmp #177		; beyond maximum?
000F0B  3  B0 03        	bcs redrw1		; yes, nothing to draw.
000F0D  3               
000F0D  3  20 A9 1D     	jsr sspria		; show single sprite.
000F10  3               
000F10  3               redrw1:
000F10  3  18           	clc			; next sprite.
000F11  3  A5 68        	lda z80_x
000F13  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
000F15  3  85 68        	sta z80_x
000F17  3  90 02        	bcc :+
000F19  3  E6 69        	inc z80_i
000F1B  3               :
000F1B  3  C6 88        	dec tmp			; repeat for remaining sprites.
000F1D  3  D0 DE        	bne redrw0
000F1F  3               
000F1F  3               rpblc1:
000F1F  3               ;	jsr dshrp		; redraw shrapnel.
000F1F  3               
000F1F  3  68           	pla			; retrieve sprite pointer.
000F20  3  85 68        	sta z80_x
000F22  3  68           	pla
000F23  3  85 69        	sta z80_i
000F25  3               
000F25  3  60           	rts
000F26  3               
000F26  3               ;----------------------------------------------------------------------
000F26  3               ; Clear screen routine.
000F26  3               ;
000F26  3               ; Fill screenmem $8000-$97ff with ScrFillByte
000F26  3               ;----------------------------------------------------------------------
000F26  3               
000F26  3               cls:
000F26  3  A9 58        	lda #>ScreenAddr		; screen address.
000F28  3  8D 31 0F     	sta clsloop+2
000F2B  3  A9 00        	lda #ScrFillByte
000F2D  3  A0 00        	ldy #0
000F2F  3               clsloop:
000F2F  3  99 00 58     	sta ScreenAddr,y
000F32  3  C8           	iny
000F33  3  D0 FA        	bne clsloop
000F35  3  EE 31 0F     	inc clsloop+2
000F38  3  AE 31 0F     	ldx clsloop+2
000F3B  3  E0 80        	cpx #>(ScreenAddr+ScreenSize)		; _BEEB
000F3D  3  D0 F0        	bne clsloop
000F3F  3  60           	rts
000F40  3               
000F40  3               ;----------------------------------------------------------------------
000F40  3               ; Atomic palette is static 
000F40  3               ;----------------------------------------------------------------------
000F40  3               
000F40  3               setpal:
000F40  3  60           	rts
000F41  3               
000F41  3               ;----------------------------------------------------------------------
000F41  3               ; FODDER check
000F41  3               ;----------------------------------------------------------------------
000F41  3               
000F41  3               fdchk:
000F41  3  A0 00        	ldy #0
000F43  3  B1 66        	lda (z80_hl),y	 	; fetch cell.
000F45  3  C9 04        	cmp #FODDER 		; is it fodder?
000F47  3  F0 01        	beq :+
000F49  3  60           	rts 			; no.
000F4A  3               :
000F4A  3  A9 00        	lda #0
000F4C  3  A0 00        	ldy #0
000F4E  3  91 66        	sta (z80_hl),y 		; rewrite block type.
000F50  3               
000F50  3  A5 67        	lda z80_h		; store pointer to block.
000F52  3  48           	pha
000F53  3  A5 66        	lda z80_l
000F55  3  48           	pha
000F56  3               
000F56  3  38           	sec			; set carry flag for subtraction.
000F57  3  A5 66        	lda z80_l 		; find simple displacement for block.
000F59  3  E9 00        	sbc #<MAP
000F5B  3  85 66        	sta z80_l
000F5D  3  A5 67        	lda z80_h
000F5F  3  E9 03        	sbc #>MAP
000F61  3  85 67        	sta z80_h
000F63  3               
000F63  3  A5 66        	lda z80_l		; low byte is y coordinate.
000F65  3  29 1F        	and #31 		; column position 0 - 31.
000F67  3  8D 4E 0E     	sta dispx		; set up x position.
000F6A  3               
000F6A  3  06 66        	asl z80_l		; multiply displacement by 8.
000F6C  3  26 67        	rol z80_h
000F6E  3  06 66        	asl z80_l
000F70  3  26 67        	rol z80_h
000F72  3  06 66        	asl z80_l
000F74  3  26 67        	rol z80_h
000F76  3               
000F76  3  A5 67        	lda z80_h		; x coordinate now in h.
000F78  3  8D 4F 0E     	sta dispy		; set the display coordinate.
000F7B  3               
000F7B  3  A9 00        	lda #0 			; block to write.
000F7D  3  20 5C 15     	jsr pattr 		; write block.
000F80  3               
000F80  3  68           	pla 			; restore block pointer.
000F81  3  85 66        	sta z80_l
000F83  3  68           	pla
000F84  3  85 67        	sta z80_h
000F86  3               
000F86  3  60           	rts
000F87  3               
000F87  3               ;----------------------------------------------------
000F87  3               ; Scrolly text and puzzle variables.
000F87  3               ;----------------------------------------------------
000F87  3               
000F87  3               .if sflag
000F87  3               txtbit:	.byte 128		; bit to write.
000F87  3               txtwid:	.byte 16		; width of ticker message.
000F87  3               txtpos:	.word msgdat
000F87  3               txtini:	.word msgdat
000F87  3               txtscr:	.word ScreenAddr
000F87  3               .endif
000F87  3               
000F87  3               ;----------------------------------------------------
000F87  3               ; Specialist routines.
000F87  3               ; Process shrapnel.
000F87  3               ;----------------------------------------------------
000F87  3               proshr:
000F87  3               .if pflag
000F87  3               	lda #<SHRAPN		; table.
000F87  3               	sta z80_x
000F87  3               	lda #>SHRAPN
000F87  3               	sta z80_i
000F87  3               
000F87  3               	lda #NUMSHR		; shrapnel pieces to process.
000F87  3               	sta shrctr
000F87  3               prosh0:
000F87  3               	ldy #0
000F87  3               	lda (z80_ix),y		; on/off marker.
000F87  3               	asl a
000F87  3               proshx:
000F87  3               	bcs :+
000F87  3               	jsr prosh1 		; on, so process it.
000F87  3               :
000F87  3               	clc
000F87  3               	lda z80_x
000F87  3               	adc #SHRSIZ
000F87  3               	sta z80_x
000F87  3               	bcc :+
000F87  3               	inc z80_i
000F87  3               :
000F87  3               	dec shrctr		; round again.
000F87  3               	bne prosh0
000F87  3               .endif
000F87  3               .if sflag
000F87  3               	jsr scrly
000F87  3               .endif
000F87  3  60           	rts
000F88  3               
000F88  3               .if pflag
000F88  3               shrctr:	.byte 0
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Proces shrapnel piece
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               prosh1:
000F88  3               	jsr plot 		; delete the pixel.
000F88  3               
000F88  3               	lda #<shrptr		; shrapnel routine pointers.
000F88  3               	sta z80_l
000F88  3               	lda #>shrptr
000F88  3               	sta z80_h
000F88  3               
000F88  3               	ldy #0
000F88  3               	lda (z80_ix),y		; restore shrapnel type.
000F88  3               	jsr prosh2 		; run the routine.
000F88  3               	jsr chkxy		; check x and y are good before we redisplay.
000F88  3               
000F88  3               	lda #<SHRSIZ 		; distance to next.
000F88  3               	sta z80_e
000F88  3               	lda #>SHRSIZ
000F88  3               	sta z80_d
000F88  3               	rts
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Run the routine
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               prosh2:
000F88  3               	asl a 			; 2 bytes per address.
000F88  3               	tay
000F88  3               	lda shrptr,y
000F88  3               	sta z80_l
000F88  3               	lda shrptr+1,y 		; fetch high byte from table.
000F88  3               	sta z80_h
000F88  3               	jmp (z80_hl) 		; jump to routine.
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Paricle routine table
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               shrptr:	.word laser		; laser.
000F88  3               	.word trail		; vapour trail.
000F88  3               	.word shrap		; shrapnel from explosion.
000F88  3               	.word dotl		; horizontal starfield left.
000F88  3               	.word dotr		; horizontal starfield right.
000F88  3               	.word dotu		; vertical starfield up.
000F88  3               	.word dotd		; vertical starfield down.
000F88  3               	.word ptcusr		; user particle.
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Explosion shrapnel.
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               shrap:
000F88  3               	ldy #1
000F88  3               	lda (z80_ix),y 		; get the angle.
000F88  3               	clc
000F88  3               	adc #<shrsin		; shrapnel sine table.
000F88  3               	sta z80_l
000F88  3               	lda #>shrsin
000F88  3               	adc #0
000F88  3               	sta z80_h
000F88  3               
000F88  3               	ldy #0
000F88  3               	lda (z80_hl),y 		; fetch value from table.
000F88  3               	sta z80_e
000F88  3               	inc z80_l 		; next byte of table.
000F88  3               	bne :+
000F88  3               	inc z80_h
000F88  3               :
000F88  3               	ldy #0
000F88  3               	lda (z80_hl),y		; fetch value from table.
000F88  3               	sta z80_d
000F88  3               	inc z80_l		; next byte of table.
000F88  3               	bne :+
000F88  3               	inc z80_h
000F88  3               :
000F88  3               	ldy #0
000F88  3               	lda (z80_hl),y 		; fetch value from table.
000F88  3               	sta z80_c
000F88  3               	inc z80_l 		; next byte of table.
000F88  3               	bne :+
000F88  3               	inc z80_h
000F88  3               :
000F88  3               	ldy #0
000F88  3               	lda (z80_hl),y 		; fetch value from table.
000F88  3               	sta z80_b
000F88  3               
000F88  3               	ldy #2
000F88  3               	lda (z80_ix),y 		; x coordinate in hl.
000F88  3               	clc
000F88  3               	adc z80_e		; add sine lb
000F88  3               	sta (z80_ix),y		; store new coordinate lb.
000F88  3               	ldy #3
000F88  3               	lda (z80_ix),y
000F88  3               	adc z80_d		; add sine hb
000F88  3               	sta (z80_ix),y		; store new coordinate hb.
000F88  3               
000F88  3               	ldy #4
000F88  3               	lda (z80_ix),y	 	; y coordinate in hl.
000F88  3               	clc
000F88  3               	adc z80_c		; add cosine lb
000F88  3               	sta (z80_ix),y		; store new coordinate lb.
000F88  3               	ldy #5
000F88  3               	lda (z80_ix),y
000F88  3               	adc z80_b		; add cosine lb
000F88  3               	sta (z80_ix),y		; store new coordinate hb.
000F88  3               
000F88  3               	rts
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Move dots
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               dotl:
000F88  3               	ldy #5
000F88  3               	lda (z80_ix),y
000F88  3               	sec
000F88  3               	sbc #1		 	; move left.
000F88  3               	sta (z80_ix),y
000F88  3               	rts
000F88  3               dotr:
000F88  3               	ldy #5
000F88  3               	lda (z80_ix),y
000F88  3               	clc
000F88  3               	adc #1		 	; move left.
000F88  3               	sta (z80_ix),y
000F88  3               	rts
000F88  3               dotu:
000F88  3               	ldy #3
000F88  3               	lda (z80_ix),y
000F88  3               	sec
000F88  3               	sbc #1		 	; move up.
000F88  3               	sta (z80_ix),y
000F88  3               	rts
000F88  3               dotd:
000F88  3               	ldy #3
000F88  3               	lda (z80_ix),y
000F88  3               	clc
000F88  3               	adc #1			; move down.
000F88  3               	sta (z80_ix),y
000F88  3               	rts
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Check if coordinates are ok before redrawing at new position.
000F88  3               ;
000F88  3               ; left:   X>L		X=L	Ok
000F88  3               ; right:  R+15>X	X=R	Ok
000F88  3               ; top:    Y>T		Y=T	Ok
000F88  3               ; bottom: B+15>Y	Y=B	Ok
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               chkxy:
000F88  3               
000F88  3               ; top:    Y>T		Y=T	Ok
000F88  3               
000F88  3               	ldy #3
000F88  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000F88  3               	cmp wntopx		; window top.
000F88  3               	bcs :+			; compare with top window limit.
000F88  3               	jmp kilshr		; out of window, kill shrapnel.
000F88  3               :
000F88  3               ; left:   X>L		X=L	Ok
000F88  3               
000F88  3               	ldy #5
000F88  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000F88  3               	cmp wnlftx		; left edge.
000F88  3               	bcs :+			; compare with left window limit.
000F88  3               	jmp kilshr		; out of window, kill shrapnel.
000F88  3               :
000F88  3               ; bottom: B+15>Y	Y=B	Ok
000F88  3               
000F88  3               	lda wnbotx		; point to bottom.
000F88  3               	clc
000F88  3               	adc #15
000F88  3               	ldy #3
000F88  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000F88  3               	bcs :+			; compare with shrapnel x coordinate.
000F88  3               	jmp kilshr		; off screen, kill shrapnel..
000F88  3               :
000F88  3               ; right:  R+15>X	X=R	Ok
000F88  3               
000F88  3               	lda wnrgtx		; point to right edge.
000F88  3               	clc
000F88  3               	adc #15
000F88  3               	ldy #5
000F88  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000F88  3               	bcs :+			; compare with window limit.
000F88  3               	jmp kilshr		; off screen, kill shrapnel.
000F88  3               :
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Drop through.
000F88  3               ; Display shrapnel.
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               plot:
000F88  3               	ldy #3
000F88  3               	lda (z80_ix),y		; y integer.
000F88  3               	sta dispy	 	; workspace coordinates.
000F88  3               	ldy #5
000F88  3               	lda (z80_ix),y	 	; x integer.
000F88  3               	sta dispx 		; workspace coordinates.
000F88  3               
000F88  3               	ldy #0
000F88  3               	lda (z80_ix),y 		; type.
000F88  3               	bne :+			; is it a laser?
000F88  3               	jmp plot1 		; yes, draw laser instead.
000F88  3               :
000F88  3               plot0:
000F88  3               	lda dispx		; which pixel within byte do we
000F88  3               	and #7			; want to set first?
000F88  3               	tay
000F88  3               	lda dots,y 		; table of small pixel positions.
000F88  3               	sta z80_e 		; get value.
000F88  3               
000F88  3               	jsr scadd 		; screen address.
000F88  3               	ldy #0
000F88  3               	lda (scraddr),y		; see what's already there.
000F88  3               	eor z80_e
000F88  3               	sta (scraddr),y 	; put back on screen.
000F88  3               	rts
000F88  3               
000F88  3               plot1:
000F88  3               	jsr scadd 		; screen address.
000F88  3               	ldy #0
000F88  3               	lda (scraddr),y 	; fetch byte there.
000F88  3               	eor #255 		; toggle all bits.
000F88  3               	sta (scraddr),y 	; new byte.
000F88  3               	rts
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Switch off shrapnel
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               kilshr:
000F88  3               	lda #128
000F88  3               	ldy #0
000F88  3               	sta (z80_ix),y	; switch off shrapnel.
000F88  3               	rts
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Sine/cosine table
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               shrsin:	.word 0,1024,391,946,724,724,946,391
000F88  3               	.word 1024,0,946,65144,724,64811,391,64589
000F88  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
000F88  3               	.word 64512,0,64589,391,64811,724,65144,946
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Create trail
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               trail:
000F88  3               	ldy #1
000F88  3               	lda (z80_ix),y 	; time remaining.
000F88  3               	sec
000F88  3               	sbc #1
000F88  3               	sta (z80_ix),y
000F88  3               	bne :+
000F88  3               	jmp trailk		; time to switch it off.
000F88  3               :
000F88  3               	jsr qrand		; get a random number.
000F88  3               	lsr a 			; x or y axis?
000F88  3               	bcc :+
000F88  3               	jmp trailv		; use y.
000F88  3               :
000F88  3               ; Trail horizontal
000F88  3               
000F88  3               	lsr a 			; which direction?
000F88  3               	bcc :+
000F88  3               	jmp traill		; go left.
000F88  3               :
000F88  3               ; Trail right
000F88  3               
000F88  3               	ldy #5
000F88  3               	lda (z80_ix),y
000F88  3               	clc
000F88  3               	adc #1	 		; go right.
000F88  3               	sta (z80_ix),y
000F88  3               	rts
000F88  3               
000F88  3               ; Trail left
000F88  3               
000F88  3               traill:
000F88  3               	ldy #5
000F88  3               	lda (z80_ix),y
000F88  3               	sec
000F88  3               	sbc #1 			; go left.
000F88  3               	sta (z80_ix),y
000F88  3               	rts
000F88  3               
000F88  3               ; Trail vertical
000F88  3               
000F88  3               trailv:
000F88  3               	lsr a		 	; which direction?
000F88  3               	bcc :+
000F88  3               	jmp trailu		; go up.
000F88  3               :
000F88  3               ; Trail down
000F88  3               
000F88  3               	ldy #3
000F88  3               	lda (z80_ix),y
000F88  3               	clc
000F88  3               	adc #1 			; go down.
000F88  3               	sta (z80_ix),y
000F88  3               	rts
000F88  3               
000F88  3               ; Trail up
000F88  3               
000F88  3               trailu:
000F88  3               	ldy #3
000F88  3               	lda (z80_ix),y
000F88  3               	sec
000F88  3               	sbc #1 			; go up.
000F88  3               	sta (z80_ix),y
000F88  3               	rts
000F88  3               
000F88  3               ; Kill trail
000F88  3               
000F88  3               trailk:
000F88  3               	lda #200		; set off-screen to kill vapour trail.
000F88  3               	ldy #3
000F88  3               	sta (z80_ix),y
000F88  3               	rts
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Create laser beam
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               laser:
000F88  3               	ldy #1
000F88  3               	lda (z80_ix),y 		; direction.
000F88  3               	ror a 			; left or right?
000F88  3               	bcs :+
000F88  3               	jmp laserl		; move left.
000F88  3               :
000F88  3               ; Laser right
000F88  3               
000F88  3               	lda #8			; distance to travel.
000F88  3               	sta z80_b
000F88  3               	jmp laserm		; move laser.
000F88  3               
000F88  3               ; Laser left
000F88  3               
000F88  3               laserl:
000F88  3               	lda #248		; distance to travel.
000F88  3               	sta z80_b
000F88  3               laserm:
000F88  3               	ldy #5
000F88  3               	lda (z80_ix),y		; x position.
000F88  3               	clc
000F88  3               	adc z80_b		; add distance.
000F88  3               	sta (z80_ix),y		; set new x coordinate.
000F88  3               
000F88  3               ; Test new block.
000F88  3               
000F88  3               	sta dispx 		; set x for block collision detection purposes.
000F88  3               	ldy #3
000F88  3               	lda (z80_ix),y 		; get y.
000F88  3               	sta dispy		; set coordinate for collision test.
000F88  3               	jsr tstbl 		; get block type there.
000F88  3               	cmp #WALL		; is it solid?
000F88  3               	bne :+
000F88  3               	jmp trailk		; yes, it cannot pass.
000F88  3               :
000F88  3               	rts
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Dots mask
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               dots:	.byte 128,64,32,16,8,4,2,1
000F88  3               
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Plot, preserving de.
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               plotde:
000F88  3               	lda z80_d 		; put de on stack.
000F88  3               	pha
000F88  3               	lda z80_e
000F88  3               	pha
000F88  3               
000F88  3               	jsr plot 		; plot pixel.
000F88  3               
000F88  3               	pla			; restore de from stack.
000F88  3               	sta z80_e
000F88  3               	pla
000F88  3               	sta z80_d
000F88  3               
000F88  3               	rts
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Shoot a laser.
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               shoot:
000F88  3               	sta z80_c		; store direction in c register.
000F88  3               	ldy #8
000F88  3               	lda (z80_ix),y 		; y coordinate.
000F88  3               shoot1:
000F88  3               	clc
000F88  3               	adc #7 			; down 7 pixels.
000F88  3               	sta z80_l 		; puty y coordinate in l.
000F88  3               
000F88  3               	ldy #9
000F88  3               	lda (z80_ix),y 		; x coordinate in h.
000F88  3               	sta z80_h
000F88  3               
000F88  3               	lda z80_i		; store pointer to sprite.
000F88  3               	pha
000F88  3               	lda z80_x
000F88  3               	pha
000F88  3               
000F88  3               	jsr fpslot 		; find particle slot.
000F88  3               	bcs :+
000F88  3               	jmp vapou2		; failed, restore ix.
000F88  3               :
000F88  3               	lda #0
000F88  3               	ldy #0
000F88  3               	sta (z80_ix),y 		; set up a laser.
000F88  3               
000F88  3               	lda z80_c
000F88  3               	ldy #1
000F88  3               	sta (z80_ix),y 		; set the direction.
000F88  3               
000F88  3               	lda z80_l
000F88  3               	ldy #3
000F88  3               	sta (z80_ix),y		; set y coordinate.
000F88  3               
000F88  3               	ror z80_c		; check direction we want.
000F88  3               	bcc :+
000F88  3               	jmp shootr		; shoot right.
000F88  3               :
000F88  3               	lda z80_h		; X position.
000F88  3               shoot0:
000F88  3               	and #248		; align on character boundary.
000F88  3               	ldy #5
000F88  3               	sta (z80_ix),y		; set x coordinate.
000F88  3               	jmp vapou0 		; draw first image.
000F88  3               shootr:
000F88  3               	lda z80_h		; x position.
000F88  3               	clc
000F88  3               	adc #15			; look right.
000F88  3               	jmp shoot0		; align and continue.
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Create a bit of vapour trail.
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               vapour:
000F88  3               	lda z80_i		; store pointer to sprite.
000F88  3               	pha
000F88  3               	lda z80_x
000F88  3               	pha
000F88  3               
000F88  3               	ldy #8
000F88  3               	lda (z80_ix),y 		; y coordinate.
000F88  3               	clc
000F88  3               	adc #7			; mid-point of sprite.
000F88  3               	sta z80_l
000F88  3               
000F88  3               	ldy #9
000F88  3               	lda (z80_ix),y 		; x coordinate.
000F88  3               	adc #7
000F88  3               	sta z80_h
000F88  3               
000F88  3               	jsr fpslot 		; find particle slot.
000F88  3               	bcc :+
000F88  3               	jmp vapou1		; no, we can use it.
000F88  3               :
000F88  3               vapou2:
000F88  3               	pla
000F88  3               	sta z80_x
000F88  3               	pla
000F88  3               	sta z80_i
000F88  3               	rts
000F88  3               vapou1:
000F88  3               	lda z80_l
000F88  3               	ldy #3
000F88  3               	sta (z80_ix),y		; set up y.
000F88  3               
000F88  3               	lda z80_h
000F88  3               	ldy #5
000F88  3               	sta (z80_ix),y 		; set up x coordinate.
000F88  3               
000F88  3               	jsr qrand		; get quick random number.
000F88  3               	and #15			; random time.
000F88  3               	clc
000F88  3               	adc #15			; minimum time on screen.
000F88  3               	ldy #1
000F88  3               	sta (z80_ix),y		; set time on screen.
000F88  3               
000F88  3               	lda #1
000F88  3               	ldy #0
000F88  3               	sta (z80_ix),y		; define particle as vapour trail.
000F88  3               vapou0:
000F88  3               	jsr chkxy		; plot first position.
000F88  3               	jmp vapou2
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Create a user particle.
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               ptusr:
000F88  3               	sta z80_f		; store timer.
000F88  3               
000F88  3               	ldy #8
000F88  3               	lda (z80_ix),y 		; y coordinate.
000F88  3               	clc
000F88  3               	adc #7			; mid-point of sprite.
000F88  3               	sta z80_l
000F88  3               
000F88  3               	ldy #9
000F88  3               	lda (z80_ix),y 		; x coordinate.
000F88  3               	clc
000F88  3               	adc #7			; mid-point of sprite.
000F88  3               	sta z80_h
000F88  3               
000F88  3               	jsr fpslot 		; find particle slot.
000F88  3               	bcs ptusr1
000F88  3               	rts 			; out of slots, can't generate anything.
000F88  3               ptusr1:
000F88  3               	lda z80_l
000F88  3               	ldy #3
000F88  3               	sta (z80_ix),y 		; set up y.
000F88  3               
000F88  3               	lda z80_h
000F88  3               	ldy #5
000F88  3               	sta (z80_ix),y		; set up x coordinate.
000F88  3               
000F88  3               	lda z80_f 		; restore timer.
000F88  3               	ldy #1
000F88  3               	sta (z80_ix),y		; set time on screen.
000F88  3               
000F88  3               	lda #7
000F88  3               	ldy #0
000F88  3               	sta (z80_ix),y		; define particle as user particle.
000F88  3               
000F88  3               	jmp chkxy		; plot first position.
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Create a vertical or horizontal star.
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               star:
000F88  3               	lda z80_i		; store pointer to sprite.
000F88  3               	pha
000F88  3               	lda z80_x
000F88  3               	pha
000F88  3               
000F88  3               	jsr fpslot 		; find particle slot.
000F88  3               	bcs star7		; found one we can use.
000F88  3               star0:
000F88  3               	pla 			; restore sprite pointer.
000F88  3               	sta z80_x
000F88  3               	pla
000F88  3               	sta z80_i
000F88  3               	rts 			; out of slots, can't generate anything.
000F88  3               star7:
000F88  3               	lda z80_c		; direction.
000F88  3               	and #3 			; is it left?
000F88  3               	bne :+
000F88  3               	jmp star1 		; yes, it's left.
000F88  3               :
000F88  3               	cmp #1 			; is it right?
000F88  3               	bne :+
000F88  3               	jmp star2 		; yes, it's right.
000F88  3               :
000F88  3               	cmp #2 			; is it up?
000F88  3               	bne :+
000F88  3               	jmp star3 		; yes, it's up.
000F88  3               :
000F88  3               	ldy wntopx 		; get edge of screen.
000F88  3               	iny			; down one pixel.
000F88  3               	tya
000F88  3               star8:
000F88  3               	ldy #3
000F88  3               	sta (z80_ix),y 		; set y coord.
000F88  3               	jsr qrand 		; get quick random number.
000F88  3               star9:
000F88  3               	ldy #5
000F88  3               	sta (z80_ix),y		; set x position.
000F88  3               
000F88  3               	lda z80_c		; direction.
000F88  3               	and #3			; zero to three.
000F88  3               	clc
000F88  3               	adc #3			; 3 to 6 for starfield.
000F88  3               	ldy #0
000F88  3               	sta (z80_ix),y		; define particle as star.
000F88  3               	jsr chkxy		; plot first position.
000F88  3               	jmp star0
000F88  3               star1:
000F88  3               	jsr qrand		; get quick random number.
000F88  3               	ldy #3
000F88  3               	sta (z80_ix),y 		; set y coord.
000F88  3               
000F88  3               	lda wnrgtx 		; get edge of screen.
000F88  3               	clc
000F88  3               	adc #15			; add width of sprite minus 1.
000F88  3               	jmp star9
000F88  3               star2:
000F88  3               	jsr qrand 		; get quick random number.
000F88  3               	ldy #3
000F88  3               	sta (z80_ix),y		; set y coord.
000F88  3               
000F88  3               	lda wnlftx		; get edge of screen.
000F88  3               	jmp star9
000F88  3               star3:
000F88  3               	lda wnbotx 		; get edge of screen.
000F88  3               	clc
000F88  3               	adc #15 		; height of sprite minus one pixel.
000F88  3               	jmp star8
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Find particle slot for lasers or vapour trail.
000F88  3               ; can't use alternate accumulator.
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               fpslot:
000F88  3               	lda #<SHRAPN 		; shrapnel table.
000F88  3               	sta z80_x
000F88  3               	lda #>SHRAPN
000F88  3               	sta z80_i
000F88  3               
000F88  3               	lda #NUMSHR		; number of pieces in table.
000F88  3               	sta z80_b
000F88  3               fpslt0:
000F88  3               	ldy #0
000F88  3               	lda (z80_ix),y		; get type.
000F88  3               	asl a  			; is this slot in use?
000F88  3               	bcc :+
000F88  3               	rts			; no, we can use it.
000F88  3               :
000F88  3               	clc			; point to more shrapnel.
000F88  3               	lda z80_x
000F88  3               	adc #SHRSIZ
000F88  3               	sta z80_x
000F88  3               	bcc :+
000F88  3               	inc z80_i
000F88  3               :
000F88  3               	dec z80_b		; repeat for all shrapnel.
000F88  3               	bne fpslt0
000F88  3               
000F88  3               	clc
000F88  3               	rts 			; out of slots, can't generate anything.
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Create an explosion at sprite position.
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               explod:
000F88  3               	sta z80_c 		; particles to create.
000F88  3               
000F88  3               	lda z80_i 		; store pointer to sprite.
000F88  3               	pha
000F88  3               	lda z80_x
000F88  3               	pha
000F88  3               
000F88  3               	ldy #8
000F88  3               	lda (z80_ix),y 		; y coordinate.
000F88  3               	sta z80_l
000F88  3               	ldy #9
000F88  3               	lda (z80_ix),y		; x coordinate.
000F88  3               	sta z80_h
000F88  3               
000F88  3               	lda #<SHRAPN		; shrapnel table.
000F88  3               	sta z80_x
000F88  3               	lda #>SHRAPN
000F88  3               	sta z80_i
000F88  3               
000F88  3               	lda #NUMSHR		; number of pieces in table.
000F88  3               	sta explcnt
000F88  3               expld0:
000F88  3               	ldy #0
000F88  3               	lda (z80_ix),y		; get type.
000F88  3               	asl a 			; is this slot in use?
000F88  3               	bcs expld1		; no, we can use it.
000F88  3               expld2:
000F88  3               	clc
000F88  3               	lda z80_x
000F88  3               	adc #SHRSIZ
000F88  3               	sta z80_x
000F88  3               	bcc :+
000F88  3               	inc z80_i
000F88  3               :
000F88  3               	dec explcnt		; repeat for all shrapnel.
000F88  3               	bne expld0
000F88  3               expld3:
000F88  3               	pla			; restore sprite pointer.
000F88  3               	sta z80_x
000F88  3               	pla
000F88  3               	sta z80_i
000F88  3               	rts 			; out of slots, can't generate any more.
000F88  3               
000F88  3               expld1:
000F88  3               	lda z80_c		; shrapnel counter.
000F88  3               	and #15			; 0 to 15.
000F88  3               	clc			; add to x.
000F88  3               	adc z80_l
000F88  3               	ldy #3
000F88  3               	sta (z80_ix),y		; y coord.
000F88  3               
000F88  3               	lda seed3 		; crap random number.
000F88  3               	and #15			; 0 to 15.
000F88  3               	clc 			; add to y.
000F88  3               	adc z80_h
000F88  3               	ldy #5
000F88  3               	sta (z80_ix),y		; x coord.
000F88  3               
000F88  3               	lda #2
000F88  3               	ldy #0
000F88  3               	sta (z80_ix),y		; switch it on.
000F88  3               
000F88  3               	jsr chkxy		; plot first position.
000F88  3               	jsr qrand		; quick random angle.
000F88  3               	and #60 		; keep within range.
000F88  3               	ldy #1
000F88  3               	sta (z80_ix),y		; angle.
000F88  3               
000F88  3               	dec z80_c		; one less piece of shrapnel to generate.
000F88  3               	bne expld2 		; back to main explosion loop.
000F88  3               	jmp expld3 		; restore sprite pointer and exit.
000F88  3               
000F88  3               explcnt:	.byte 0
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Quick random
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               qrand:
000F88  3               	jsr random		; r register.
000F88  3               	eor seed3		; combine with seed.
000F88  3               	sta seed3 		; new seed.
000F88  3               	rts
000F88  3               
000F88  3               seed3:	.byte 0
000F88  3               
000F88  3               ;----------------------------------------------------
000F88  3               ; Display all shrapnel.
000F88  3               ;----------------------------------------------------
000F88  3               
000F88  3               dshrp:
000F88  3               	lda #<plotde		; display routine.
000F88  3               	sta proshx+1
000F88  3               	lda #>plotde
000F88  3               	sta proshx+2
000F88  3               	jsr proshr		; process shrapnel.
000F88  3               
000F88  3               	lda #<prosh1		; processing routine.
000F88  3               	sta proshx+1
000F88  3               	lda #>prosh1
000F88  3               	sta proshx+2
000F88  3               	rts
000F88  3               
000F88  3               ;------------------------------------------------------
000F88  3               ; Particle engine.
000F88  3               ;
000F88  3               ; Init particle data for 55 particles in SHRAPN table.
000F88  3               ; Every particle has 6 bytes.
000F88  3               ;
000F88  3               ; global:	-
000F88  3               ; local:	x,y,hl
000F88  3               ; calls:	-
000F88  3               ;------------------------------------------------------
000F88  3               
000F88  3               inishr:
000F88  3               	lda #<SHRAPN 		; table.
000F88  3               	sta z80_l
000F88  3               	lda #>SHRAPN
000F88  3               	sta z80_h
000F88  3               
000F88  3               	ldy #0
000F88  3               	ldx #NUMSHR		; shrapnel pieces to process.
000F88  3               inish0:
000F88  3               	lda #255 		; kill the shrapnel.
000F88  3               	sta (z80_hl),y
000F88  3               
000F88  3               	clc 			; point there.
000F88  3               	lda z80_l
000F88  3               	adc #SHRSIZ		; distance to next.
000F88  3               	sta z80_l
000F88  3               	bcc :+
000F88  3               	inc z80_h
000F88  3               :
000F88  3               	dex
000F88  3               	bne inish0 		; round again.
000F88  3               	rts
000F88  3               
000F88  3               ;------------------------------------------------------
000F88  3               ; Check for collision between laser and sprite.
000F88  3               ;------------------------------------------------------
000F88  3               
000F88  3               lcol:
000F88  3               	lda #<SHRAPN		; shrapnel table.
000F88  3               	sta z80_l
000F88  3               	lda #>SHRAPN
000F88  3               	sta z80_h
000F88  3               
000F88  3               	lda #NUMSHR		; number of pieces in table.
000F88  3               	sta z80_b
000F88  3               lcol0:
000F88  3               	ldy #0
000F88  3               	lda (z80_hl),y 		; get type.
000F88  3               	beq lcol1		; yes, check collision.
000F88  3               lcol3:
000F88  3               	clc			; point to more shrapnel.
000F88  3               	lda z80_l
000F88  3               	adc #SHRSIZ
000F88  3               	sta z80_l
000F88  3               	bcc :+
000F88  3               	inc z80_h
000F88  3               :
000F88  3               	dec z80_b		; repeat for all shrapnel.
000F88  3               	bne lcol0
000F88  3               	rts 			; no collision, carry not set.
000F88  3               lcol1:
000F88  3               	ldy #3
000F88  3               	lda (z80_hl),y		; get y.
000F88  3               	sec
000F88  3               	ldy #8
000F88  3               	sbc (z80_ix),y		; subtract sprite y.
000F88  3               lcolh:
000F88  3               	cmp #16 		; within range?
000F88  3               	bcc :+
000F88  3               	jmp lcol2		; no, missed.
000F88  3               :
000F88  3               	ldy #5
000F88  3               	lda (z80_hl),y 		; get x.
000F88  3               	sec
000F88  3               	ldy #9
000F88  3               	sbc (z80_ix),y 		; subtract sprite y.
000F88  3               	cmp #16			; within range?
000F88  3               	bcs :+
000F88  3               	jmp lcol4 		; yes, collision occurred.
000F88  3               :
000F88  3               lcol2:
000F88  3               	jmp lcol3
000F88  3               lcol4:
000F88  3               	sec
000F88  3               	rts 			; return with carry set for collision.
000F88  3               .endif
000F88  3               
000F88  3               ;------------------------------------------------------
000F88  3               ; Main game engine code starts here.
000F88  3               ; After initialisation, mloop is the main loop
000F88  3               ;------------------------------------------------------
000F88  3               
000F88  3               game:
000F88  3               
000F88  3               ; Set up screen address table.
000F88  3               
000F88  3               setsat:
000F88  3  A9 00        	lda #<ScreenAddr		; start of screen.
000F8A  3  85 80        	sta scraddr
000F8C  3  A9 58        	lda #>ScreenAddr
000F8E  3  85 81        	sta scraddr+1
000F90  3               
000F90  3  A0 00        	ldy #0			; vertical lines on screen.
000F92  3               setsa0:
000F92  3  A5 80        	lda scraddr
000F94  3  99 00 06     	sta SCADTB_lb,y		; write low byte.
000F97  3  A5 81        	lda scraddr+1
000F99  3  99 00 07     	sta SCADTB_hb,y		; write high byte.
000F9C  3  20 2D 1E     	jsr nline		; next line down.
000F9F  3  C8           	iny			; next position in table.
000FA0  3  D0 F0        	bne setsa0
000FA2  3               
000FA2  3               ; Init graphics mode
000FA2  3               
000FA2  3  A9 16        	lda #22
000FA4  3  20 EE FF     	jsr OSWRCH		; _BEEB screen select VDU command
000FA7  3  A9 04        	lda #ScrMode	; graphics mode
000FA9  3  20 EE FF     	jsr OSWRCH		; _BEEB screen mode
000FAC  3  20 40 0F     	jsr setpal 		; set up palette.
000FAF  3               
000FAF  3               ; Init AtoMMC joystick
000FAF  3  20 E7 19     	jsr joyinit		; AtoMMC joystick on PORT B
000FB2  3               
000FB2  3               rpblc2:
000FB2  3               .if pflag
000FB2  3               	jsr inishr 		; initialise particle engine.
000FB2  3               .endif
000FB2  3               evintr:
000FB2  3  20 29 35     	jsr evnt12 		; call intro/menu event.
000FB5  3               
000FB5  3  A9 02        	lda #WALL 		; write default property.
000FB7  3  A2 00        	ldx #0
000FB9  3               clrmap:
000FB9  3  9D 00 03     	sta MAP,x 		; block properties.
000FBC  3  9D 00 04     	sta MAP+256,x
000FBF  3  9D 00 05     	sta MAP+512,x
000FC2  3  E8           	inx			; next byte.
000FC3  3  D0 F4        	bne clrmap
000FC5  3               
000FC5  3  20 90 0E     	jsr iniob 		; initialise objects.
000FC8  3               
000FC8  3  A9 00        	lda #0			; put zero in accumulator.
000FCA  3  8D 4D 0E     	sta gamwon		; reset game won flag.
000FCD  3               
000FCD  3  20 2F 11     	jsr inisc 		; init the score.
000FD0  3               mapst:
000FD0  3  AD 96 23     	lda stmap 		; start position on map.
000FD3  3  8D 73 23     	sta roomtb		; set up position in table, if there is one.
000FD6  3               
000FD6  3               inipbl:
000FD6  3  20 4E 1F     	jsr initsc 		; set up first screen.
000FD9  3               
000FD9  3  A9 62        	lda #<ssprit 		; default to spare sprite in table.
000FDB  3  85 68        	sta z80_x
000FDD  3  A9 23        	lda #>ssprit
000FDF  3  85 69        	sta z80_i
000FE1  3               evini:
000FE1  3  20 2A 35     	jsr evnt13 		; initialisation.
000FE4  3               
000FE4  3               ; Two restarts.
000FE4  3               ; First restart - clear all sprites and initialise everything.
000FE4  3               
000FE4  3               rstrt:
000FE4  3  20 DC 10     	jsr rsevt 		; restart events.
000FE7  3  20 83 0E     	jsr xspr 		; clear sprite table.
000FEA  3  20 B4 20     	jsr sprlst 		; fetch pointer to screen sprites.
000FED  3  20 42 21     	jsr ispr 		; initialise sprite table.
000FF0  3               
000FF0  3  4C FF 0F     	jmp rstrt0
000FF3  3               
000FF3  3               ; Second restart - clear all but player, and don't initialise him.
000FF3  3               
000FF3  3               rstrtn:
000FF3  3  20 DC 10     	jsr rsevt		; restart events.
000FF6  3  20 E2 20     	jsr nspr 		; clear all non-player sprites.
000FF9  3  20 B4 20     	jsr sprlst 		; fetch pointer to screen sprites.
000FFC  3  20 82 21     	jsr kspr 		; initialise sprite table, no more players.
000FFF  3               
000FFF  3               ; Set up the player and/or enemy sprites.
000FFF  3               
000FFF  3               rstrt0:
000FFF  3  A9 00        	lda #0 			; zero in accumulator.
001001  3  8D 4A 0E     	sta nexlev 		; reset next level flag.
001004  3  8D 4B 0E     	sta restfl 		; reset restart flag.
001007  3  8D 4C 0E     	sta deadf 		; reset dead flag.
00100A  3  20 80 16     	jsr droom 		; show screen layout.
00100D  3               rpblc0:
00100D  3               .if pflag
00100D  3               	jsr inishr 		; initialise particle engine.
00100D  3               .endif
00100D  3  20 7F 11     	jsr shwob		; draw objects.
001010  3               
001010  3  A9 96        	lda #<sprtab 		; address of sprite table, even sprites.
001012  3  85 68        	sta z80_x
001014  3  A9 22        	lda #>sprtab
001016  3  85 69        	sta z80_i
001018  3  20 66 1C     	jsr dspr 		; display sprites.
00101B  3               
00101B  3  A9 A7        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00101D  3  85 68        	sta z80_x
00101F  3  A9 22        	lda #>(sprtab+TABSIZ)
001021  3  85 69        	sta z80_i
001023  3  20 66 1C     	jsr dspr 		; display sprites.
001026  3               mloop:
001026  3  20 C2 0E     	jsr vsync 		; synchronise with display.
001029  3               
001029  3  A9 96        	lda #<sprtab 		; address of sprite table, even sprites.
00102B  3  85 68        	sta z80_x
00102D  3  A9 22        	lda #>sprtab
00102F  3  85 69        	sta z80_i
001031  3  20 66 1C     	jsr dspr 		; display even sprites.
001034  3               
001034  3  20 7E 11     	jsr plsnd 		; play sounds.
001037  3  20 C2 0E     	jsr vsync 		; synchronise with display.
00103A  3               
00103A  3  A9 A7        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00103C  3  85 68        	sta z80_x
00103E  3  A9 22        	lda #>(sprtab+TABSIZ)
001040  3  85 69        	sta z80_i
001042  3  20 66 1C     	jsr dspr 		; display odd sprites.
001045  3               
001045  3  A9 62        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
001047  3  85 68        	sta z80_x
001049  3  A9 23        	lda #>(ssprit)
00104B  3  85 69        	sta z80_i
00104D  3               evlp1:
00104D  3  20 02 35     	jsr evnt10 		; called once per main loop.
001050  3  20 DB 1B     	jsr pspr 		; process sprites.
001053  3               
001053  3               ; Main loop events.
001053  3               
001053  3  A9 62        	lda #<ssprit 		; point to spare sprite for spawning purposes.
001055  3  85 68        	sta z80_x
001057  3  A9 23        	lda #>ssprit
001059  3  85 69        	sta z80_i
00105B  3               evlp2:
00105B  3  20 28 35     	jsr evnt11 		; called once per main loop.
00105E  3               bsortx:
00105E  3  20 4E 1B     	jsr bsort 		; sort sprites.
001061  3               
001061  3  AD 4A 0E     	lda nexlev		; finished level flag.
001064  3  D0 21        	bne newlev		; is set, go to next level.
001066  3  AD 4D 0E     	lda gamwon		; finished game flag.
001069  3  D0 2D        	bne evwon		; is set, finish the game.
00106B  3  AD 4B 0E     	lda restfl 		; finished level flag.
00106E  3  C9 01        	cmp #1			; has it been set?
001070  3  D0 03        	bne :+
001072  3  4C E4 0F     	jmp rstrt		; yes, go to next level.
001075  3               :
001075  3  C9 02        	cmp #2			; has it been set?
001077  3  D0 03        	bne :+
001079  3  4C F3 0F     	jmp rstrtn		; yes, go to next level.
00107C  3               :
00107C  3  AD 4C 0E     	lda deadf 		; dead flag.
00107F  3  D0 1D        	bne pdead		; yes, player dead.
001081  3               
001081  3               ; back to start of main loop.
001081  3               
001081  3  EE 45 0E     	inc clock
001084  3  4C 26 10     	jmp mloop		; switched to a jmp mloop during test mode.
001087  3               
001087  3               ;----------------------------------------------------------
001087  3               ; New level
001087  3               ;----------------------------------------------------------
001087  3               
001087  3               newlev:
001087  3  AD 29 0E     	lda scno 			; current screen.
00108A  3  18           	clc
00108B  3  69 01        	adc #1				; next screen.
00108D  3  CD 80 4C     	cmp numsc			; total number of screens.
001090  3  B0 06        	bcs evwon			; yes, game finished.
001092  3  8D 29 0E     	sta scno			; set new level number.
001095  3  4C E4 0F     	jmp rstrt			; restart, clearing all aliens.
001098  3               
001098  3               evwon:
001098  3  20 01 36     	jsr evnt18		 	; game completed.
00109B  3  4C B1 10     	jmp tidyup			; tidy up and return to BASIC/calling routine.
00109E  3               
00109E  3               ;----------------------------------------------------------
00109E  3               ; Player dead.
00109E  3               ;----------------------------------------------------------
00109E  3               
00109E  3               pdead:
00109E  3  A9 00        	lda #0				; zeroise accumulator.
0010A0  3  8D 4C 0E     	sta deadf			; reset dead flag.
0010A3  3               evdie:
0010A3  3  20 FF 35     	jsr evnt16 			; death subroutine.
0010A6  3  AD 2A 0E     	lda numlif			; number of lives.
0010A9  3  F0 03        	beq :+
0010AB  3  4C E4 0F     	jmp rstrt 			; restart game.
0010AE  3               :
0010AE  3               evfail:
0010AE  3  20 00 36     	jsr evnt17 			; failure event.
0010B1  3               
0010B1  3               ;----------------------------------------------------------
0010B1  3               ; Tidy things up
0010B1  3               ;----------------------------------------------------------
0010B1  3               
0010B1  3               tidyup:
0010B1  3  A0 00        	ldy #0				; digits to check.
0010B3  3               tidyu2:
0010B3  3  B9 62 13     	lda score,y 			; get score digit.
0010B6  3  CD 68 13     	cmp hiscor 			; are we larger than high score digit?
0010B9  3  90 07        	bcc tidyu0			; high score is bigger.
0010BB  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0010BD  3  C8           	iny				; next digit of high score.
0010BE  3  C0 06        	cpy #6
0010C0  3  D0 F1        	bne tidyu2			; repeat for all digits
0010C2  3               tidyu0:
0010C2  3  A9 62        	lda #<score			; return pointing to score.
0010C4  3  85 62        	sta z80_c
0010C6  3  A9 13        	lda #>score
0010C8  3  85 63        	sta z80_b
0010CA  3  60           	rts
0010CB  3               tidyu1:
0010CB  3  A0 05        	ldy #5
0010CD  3               tidyu3:
0010CD  3  B9 62 13     	lda score,y			; score.
0010D0  3  99 68 13     	sta hiscor,y			; high score.
0010D3  3  88           	dey
0010D4  3  10 F7        	bpl tidyu3 			; copy score to high score.
0010D6  3               evnewh:
0010D6  3  20 02 36     	jsr evnt19			; new high score event.
0010D9  3  4C C2 10     	jmp tidyu0			; tidy up.
0010DC  3               
0010DC  3               ;--------------------------------------------------
0010DC  3               ; Restart event.
0010DC  3               ;--------------------------------------------------
0010DC  3               
0010DC  3               rsevt:
0010DC  3  A9 62        	lda #<ssprit 			; default to spare element in table.
0010DE  3  85 68        	sta z80_x
0010E0  3  A9 23        	lda #>ssprit
0010E2  3  85 69        	sta z80_i
0010E4  3               evrs:
0010E4  3  4C 35 35     	jmp evnt14	 		; call restart event.
0010E7  3               
0010E7  3               ;------------------------------------------------------------------
0010E7  3               ; Copy number passed in a to string position bc, right-justified.
0010E7  3               ;
0010E7  3               ; Input:
0010E7  3               ;  A  = number
0010E7  3               ;  BC = string address
0010E7  3               ;
0010E7  3               ; Output:
0010E7  3               ;  BC = string with number
0010E7  3               ;-----------------------------------------------------------------
0010E7  3               
0010E7  3               num2ch:
0010E7  3  85 65        	sta z80_d		; Save number
0010E9  3               
0010E9  3  A9 00        	lda #0
0010EB  3  8D 2E 11     	sta flag
0010EE  3               
0010EE  3  A2 64        	ldx #100		; hundreds column.
0010F0  3  86 64        	stx z80_e
0010F2  3  20 03 11     	jsr numdg		; show digit.
0010F5  3               
0010F5  3  A2 0A        	ldx #10			; tens column.
0010F7  3  86 64        	stx z80_e
0010F9  3  20 03 11     	jsr numdg		; show digit.
0010FC  3               
0010FC  3  EE 2E 11     	inc flag
0010FF  3  A2 01        	ldx #1			; units column.
001101  3  86 64        	stx z80_e
001103  3               numdg:
001103  3  A9 30        	lda #48			; clear digit.
001105  3  85 61        	sta z80_a
001107  3               numdg1:
001107  3  A5 65        	lda z80_d
001109  3  C5 64        	cmp z80_e
00110B  3  90 0F        	bcc numdg0		; nothing to show.
00110D  3  38           	sec
00110E  3  A5 65        	lda z80_d
001110  3  E5 64        	sbc z80_e		; subtract from column.
001112  3  85 65        	sta z80_d
001114  3  E6 61        	inc z80_a		; increment digit.
001116  3  EE 2E 11     	inc flag
001119  3  4C 07 11     	jmp numdg1		; repeat until column is zero.
00111C  3               numdg0:
00111C  3  A0 00        	ldy #0
00111E  3  A5 61        	lda z80_a
001120  3  91 62        	sta (z80_bc),y		; write digit to buffer.
001122  3  AD 2E 11     	lda flag
001125  3  F0 06        	beq :+
001127  3  E6 62        	inc z80_c		; next buffer position.
001129  3  D0 02        	bne :+
00112B  3  E6 63        	inc z80_b
00112D  3               :
00112D  3  60           	rts
00112E  3               
00112E  3  00           flag:	.byte 0
00112F  3               
00112F  3               ;---------------------------------------------------------
00112F  3               ; Reset score to "000000"
00112F  3               ;---------------------------------------------------------
00112F  3               
00112F  3               inisc:
00112F  3  A9 30        	lda #'0'
001131  3  A2 05        	ldx #5			; digits to initialise.
001133  3               inisc0:
001133  3  9D 62 13     	sta score,x 		; write zero digit.
001136  3  CA           	dex			; next column.
001137  3  10 FA        	bpl inisc0		; repeat for all digits.
001139  3               
001139  3  60           	rts
00113A  3               
00113A  3               ;-----------------------------------------------------
00113A  3               ; Multiply h by d and return in hl.
00113A  3               ;
00113A  3               ; Input:
00113A  3               ;  H = first number
00113A  3               ;  D = second number
00113A  3               ;
00113A  3               ; Output:
00113A  3               ;  HL = result H x D
00113A  3               ;-----------------------------------------------------
00113A  3               
00113A  3               imul:
00113A  3  A5 65        	lda z80_d		; HL = H * D
00113C  3  85 64        	sta z80_e
00113E  3  A5 67        	lda z80_h
001140  3  85 62        	sta z80_c		; make c first multiplier.
001142  3               imul0:
001142  3  A9 00        	lda #0			; zeroise total.
001144  3  85 66        	sta z80_l
001146  3  85 67        	sta z80_h
001148  3               
001148  3  A5 67        	lda z80_h
00114A  3  85 65        	sta z80_d		; zeroise high byte.
00114C  3               
00114C  3  A9 08        	lda #8			; repeat 8 times.
00114E  3  85 63        	sta z80_b
001150  3               imul1:
001150  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
001152  3  90 0E        	bcc imul2		; wasn't set.
001154  3  18           	clc			; bit was set, so add de.
001155  3  A5 66        	lda z80_l
001157  3  65 64        	adc z80_e
001159  3  85 66        	sta z80_l
00115B  3  A5 67        	lda z80_h
00115D  3  65 65        	adc z80_d
00115F  3  85 67        	sta z80_h
001161  3  18           	clc 			; reset carry.
001162  3               imul2:
001162  3  06 64        	asl z80_e 		; shift de 1 bit left.
001164  3  26 65        	rol z80_d
001166  3  C6 63        	dec z80_b
001168  3  D0 E6        	bne imul1		; repeat 8 times.
00116A  3               
00116A  3  60           	rts
00116B  3               
00116B  3               ;-----------------------------------------------
00116B  3               ; Divide d by e and return in d, remainder in a.
00116B  3               ;
00116B  3               ; Input:
00116B  3               ;  D = first number
00116B  3               ;  E = second number
00116B  3               ;
00116B  3               ; Output:
00116B  3               ;  D = result D/E
00116B  3               ;  A = remainder
00116B  3               ;-----------------------------------------------
00116B  3               
00116B  3               idiv:
00116B  3  A9 00        	lda #0
00116D  3  A0 08        	ldy #8		 	; bits to shift.
00116F  3  06 65        	asl z80_d
001171  3               idiv0:
001171  3  2A           	rol a 			; multiply d by 2.
001172  3  C5 64        	cmp z80_e 		; test if e is smaller.
001174  3  90 02        	bcc idiv1		; e is greater, no division this time.
001176  3  E5 64        	sbc z80_e		; subtract it.
001178  3               idiv1:
001178  3  26 65        	rol z80_d		; rotate into d.
00117A  3  88           	dey
00117B  3  D0 F4        	bne idiv0		; repeat
00117D  3  60           	rts
00117E  3               
00117E  3               ;---------------------------------------------------
00117E  3               ; Play AY sound effect
00117E  3               ;---------------------------------------------------
00117E  3               
00117E  3               plsnd:
00117E  3  60           	rts
00117F  3               
00117F  3               ;---------------------------------------------------
00117F  3               ; Objects handling.
00117F  3               ; 32 bytes for image
00117F  3               ; 3 for room, y and x
00117F  3               ; 3 for starting room, y and x.
00117F  3               ; 254 = disabled.
00117F  3               ; 255 = object in player"s pockets.
00117F  3               ;---------------------------------------------------
00117F  3               
00117F  3               ;---------------------------------------------------
00117F  3               ; Show items present.
00117F  3               ;---------------------------------------------------
00117F  3               
00117F  3               shwob:
00117F  3  A9 B3        	lda #<objdta 			; objects table.
001181  3  85 66        	sta z80_l
001183  3  A9 4C        	lda #>objdta
001185  3  85 67        	sta z80_h
001187  3               
001187  3  AD 24 0E     	lda numob 			; number of objects in the game.
00118A  3  8D 19 1D     	sta sprcnt
00118D  3               shwob0:
00118D  3  A0 20        	ldy #32 			; distance to room number.
00118F  3  B1 66        	lda (z80_hl),y 			; same as an item?
001191  3  CD 29 0E     	cmp scno 			; current location.
001194  3  D0 03        	bne :+
001196  3  20 AC 11     	jsr dobj 			; yes, display object.
001199  3               :
001199  3  18           	clc
00119A  3  A5 66        	lda z80_l
00119C  3  69 26        	adc #38 			; distance to next item.
00119E  3  85 66        	sta z80_l
0011A0  3  A5 67        	lda z80_h
0011A2  3  69 00        	adc #0
0011A4  3  85 67        	sta z80_h	 		; point to it.
0011A6  3  CE 19 1D     	dec sprcnt
0011A9  3  D0 E2        	bne shwob0 			; repeat for others.
0011AB  3  60           	rts
0011AC  3               
0011AC  3               ;---------------------------------------------------
0011AC  3               ; Display object.
0011AC  3               ; hl must point to object's start address.
0011AC  3               ;
0011AC  3               ; Input:
0011AC  3               ;  HL = object address
0011AC  3               ;---------------------------------------------------
0011AC  3               
0011AC  3               dobj:
0011AC  3  A0 21        	ldy #33
0011AE  3  B1 66        	lda (z80_hl),y 			; point to y.
0011B0  3  8D 4F 0E     	sta dispy
0011B3  3  C8           	iny
0011B4  3  B1 66        	lda (z80_hl),y 			; point to x.
0011B6  3  8D 4E 0E     	sta dispx
0011B9  3               dobj1:
0011B9  3  4C C9 15     	jmp sprite 			; draw this sprite.
0011BC  3               
0011BC  3               ;--------------------------------------
0011BC  3               ; Remove an object.
0011BC  3               ;
0011BC  3               ; Input:
0011BC  3               ;  A = object number
0011BC  3               ;--------------------------------------
0011BC  3               
0011BC  3               remob:
0011BC  3  CD 24 0E     	cmp numob			; number of objects in game.
0011BF  3  90 01        	bcc :+				; are we checking past the end?
0011C1  3  60           	rts				; yes, can't get non-existent item.
0011C2  3               :
0011C2  3  48           	pha				; remember object.
0011C3  3  20 D1 11     	jsr getob			; pick it up if we haven't already got it.
0011C6  3  68           	pla				; retrieve object number.
0011C7  3  20 03 12     	jsr gotob			; get its address.
0011CA  3  A9 FE        	lda #254
0011CC  3  A0 20        	ldy #32
0011CE  3  91 66        	sta (z80_hl),y			; remove it.
0011D0  3  60           	rts
0011D1  3               
0011D1  3               ;---------------------------------------------------
0011D1  3               ; Pick up object number held in the accumulator.
0011D1  3               ;
0011D1  3               ; Input:
0011D1  3               ;  A = object number
0011D1  3               ;---------------------------------------------------
0011D1  3               
0011D1  3               getob:
0011D1  3  CD 24 0E     	cmp numob 		; number of objects in game.
0011D4  3  90 01        	bcc :+			; are we checking past the end?
0011D6  3  60           	rts			; yes, can't get non-existent item.
0011D7  3               :
0011D7  3  20 03 12     	jsr gotob 		; check if we already have it.
0011DA  3  C9 FF        	cmp #255
0011DC  3  D0 01        	bne :+
0011DE  3  60           	rts			; we already do.
0011DF  3               :
0011DF  3  A0 20        	ldy #32
0011E1  3  B1 66        	lda (z80_hl),y		; is it on this screen?
0011E3  3  CD 29 0E     	cmp scno 		; current screen.
0011E6  3  D0 16        	bne getob0		; not on screen, so nothing to delete.
0011E8  3               
0011E8  3  A9 FF        	lda #255
0011EA  3  91 66        	sta (z80_hl),y		; pick it up.
0011EC  3  C8           	iny 			; point to y coord.
0011ED  3               getob1:
0011ED  3  A0 21        	ldy #33
0011EF  3  B1 66        	lda (z80_hl),y		; y coord.
0011F1  3  8D 4F 0E     	sta dispy
0011F4  3  A0 22        	ldy #34
0011F6  3  B1 66        	lda (z80_hl),y 		; x coord.
0011F8  3  8D 4E 0E     	sta dispx
0011FB  3  4C B9 11     	jmp dobj1 		; delete object sprite.
0011FE  3               getob0:
0011FE  3  A9 FF        	lda #255
001200  3  91 66        	sta (z80_hl),y 		; pick it up.
001202  3  60           	rts
001203  3               
001203  3               ;-----------------------------------------------------------------
001203  3               ; Got object check.
001203  3               ; Call with object in accumulator, returns zero set if in pockets.
001203  3               ;
001203  3               ; Input:
001203  3               ;  A = object number
001203  3               ;-----------------------------------------------------------------
001203  3               
001203  3               gotob:
001203  3  CD 24 0E     	cmp numob 		; number of objects in game.
001206  3  90 03        	bcc :+ 			; are we checking past the end?
001208  3  4C 0F 12     	jmp gotob0 		; yes, we can't have a non-existent object.
00120B  3               :
00120B  3  20 14 12     	jsr findob		; find the object.
00120E  3               gotob1:
00120E  3  60           	rts
00120F  3               
00120F  3               gotob0:
00120F  3  A9 FE        	lda #254 		; missing.
001211  3  4C 0E 12     	jmp gotob1
001214  3               
001214  3               findob:
001214  3  48           	pha			; save object number
001215  3  A9 B3        	lda #<objdta 		; objects.
001217  3  85 66        	sta z80_l
001219  3  A9 4C        	lda #>objdta
00121B  3  85 67        	sta z80_h
00121D  3  68           	pla			; retreive object number
00121E  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
001220  3  AA           	tax 			; loop counter
001221  3               fndob2:
001221  3  18           	clc
001222  3  A5 66        	lda z80_l
001224  3  69 26        	adc #38 		; size of each object.
001226  3  85 66        	sta z80_l
001228  3  90 02        	bcc :+
00122A  3  E6 67        	inc z80_h
00122C  3               :
00122C  3  CA           	dex 			; repeat until we find address.
00122D  3  D0 F2        	bne fndob2
00122F  3               fndob1:
00122F  3  A0 20        	ldy #32			; distance to room it's in.
001231  3  B1 66        	lda (z80_hl),y		; fetch status.
001233  3  60           	rts
001234  3               
001234  3               ;---------------------------------------------
001234  3               ; Drop object number at (dispx, dispy).
001234  3               ;
001234  3               ; Input:
001234  3               ;  A = object number
001234  3               ;---------------------------------------------
001234  3               
001234  3               drpob:
001234  3  CD 24 0E     	cmp numob 		; are we checking past the end?
001237  3  90 01        	bcc :+
001239  3  60           	rts			; yes, can't drop non-existent item.
00123A  3               :
00123A  3  20 03 12     	jsr gotob		; make sure object is in inventory.
00123D  3  CD 29 0E     	cmp scno		; already on this screen?
001240  3  D0 01        	bne :+
001242  3  60           	rts			; yes, nothing to do.
001243  3               :
001243  3  A0 20        	ldy #32
001245  3  AD 29 0E     	lda scno
001248  3  91 66        	sta (z80_hl),y		; bring onto screen.
00124A  3  AD 4F 0E     	lda dispy		; sprite y coordinate.
00124D  3  C8           	iny 
00124E  3  91 66        	sta (z80_hl),y		; point to object y.
001250  3  AD 4E 0E     	lda dispx 		; sprite x coordinate.
001253  3  C8           	iny
001254  3  91 66        	sta (z80_hl),y 		; point to object x
001256  3  4C AC 11     	jmp dobj		; draw the object sprite.
001259  3               
001259  3               ;-----------------------------------------------
001259  3               ; Seek objects at sprite position.
001259  3               ;
001259  3               ; Output:
001259  3               ;  A = object number, if not found A=255
001259  3               ;-----------------------------------------------
001259  3               
001259  3               skobj:
001259  3  A9 B3        	lda #<objdta 		; pointer to objects.
00125B  3  85 66        	sta z80_l
00125D  3  A9 4C        	lda #>objdta
00125F  3  85 67        	sta z80_h
001261  3               
001261  3  AD 24 0E     	lda numob 		; number of objects in game.
001264  3  85 63        	sta z80_b 		; set up the loop counter.
001266  3               skobj0:
001266  3  AD 29 0E     	lda scno		; current room number.
001269  3  A0 20        	ldy #32
00126B  3  D1 66        	cmp (z80_hl),y		; is object in here?
00126D  3  D0 03        	bne :+
00126F  3  20 84 12     	jsr skobj1		; yes, check coordinates.
001272  3               :
001272  3  18           	clc			; point to next object in table.
001273  3  A5 66        	lda z80_l
001275  3  69 26        	adc #38			; size of each object.
001277  3  85 66        	sta z80_l
001279  3  90 02        	bcc :+
00127B  3  E6 67        	inc z80_h
00127D  3               :
00127D  3  C6 63        	dec z80_b
00127F  3  D0 E5        	bne skobj0		; repeat for all objects.
001281  3               
001281  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
001283  3  60           	rts
001284  3               
001284  3               skobj1:
001284  3  A0 21        	ldy #33			; point to y coordinate.
001286  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
001288  3  38           	sec
001289  3  A0 08        	ldy #var_newY
00128B  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
00128D  3  18           	clc
00128E  3  69 0F        	adc #15			; add sprite height minus one.
001290  3  C9 1F        	cmp #31			; within range?
001292  3  90 03        	bcc :+
001294  3  4C B2 12     	jmp skobj2		; no, ignore object.
001297  3               :
001297  3  A0 22        	ldy #34			; point to x coordinate now.
001299  3  B1 66        	lda (z80_hl),y 		; get coordinate.
00129B  3  38           	sec
00129C  3  A0 09        	ldy #var_newX
00129E  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
0012A0  3  18           	clc			; add sprite width minus one.
0012A1  3  69 0F        	adc #15
0012A3  3  C9 1F        	cmp #31			; within range?
0012A5  3  90 03        	bcc :+
0012A7  3  4C B2 12     	jmp skobj2		; no, ignore object.
0012AA  3               :
0012AA  3  68           	pla			; remove return address from stack.
0012AB  3  68           	pla
0012AC  3               
0012AC  3  AD 24 0E     	lda numob 		; objects in game.
0012AF  3  38           	sec
0012B0  3  E5 63        	sbc z80_b		; subtract loop counter.
0012B2  3               skobj2:
0012B2  3  60           	rts			; accumulator now points to object.
0012B3  3               
0012B3  3               
0012B3  3               ;---------------------------------------------------------------------
0012B3  3               ; Spawn a new sprite.
0012B3  3               ;---------------------------------------------------------------------
0012B3  3               
0012B3  3               spawn:
0012B3  3  A9 96        	lda #<sprtab		; sprite table.
0012B5  3  85 66        	sta z80_l
0012B7  3  A9 22        	lda #>sprtab
0012B9  3  85 67        	sta z80_h
0012BB  3               numsp1:
0012BB  3  A9 0C        	lda #NUMSPR		; number of sprites.
0012BD  3  8D 5E 13     	sta spcnt
0012C0  3               spaw0:
0012C0  3  A0 00        	ldy #var_Type
0012C2  3  B1 66        	lda (z80_hl),y		; get sprite type.
0012C4  3  C9 FF        	cmp #255		; is it an unused slot?
0012C6  3  F0 10        	beq spaw1 		; yes, we can use this one.
0012C8  3               
0012C8  3  18           	clc 			; point to next sprite in table.
0012C9  3  A5 66        	lda z80_l
0012CB  3  69 11        	adc #TABSIZ		; size of each entry.
0012CD  3  85 66        	sta z80_l
0012CF  3  90 02        	bcc :+
0012D1  3  E6 67        	inc z80_h
0012D3  3               :
0012D3  3  CE 5E 13     	dec spcnt		; one less iteration.
0012D6  3  D0 E8        	bne spaw0		; keep going until we find a slot.
0012D8  3               
0012D8  3               ; Didn't find one but drop through and set up a dummy sprite instead.
0012D8  3               
0012D8  3               spaw1:
0012D8  3  A5 69        	lda z80_i		; address of original sprite.
0012DA  3  48           	pha
0012DB  3  A5 68        	lda z80_x
0012DD  3  48           	pha
0012DE  3               
0012DE  3  A5 66        	lda z80_l		; store spawned sprite address.
0012E0  3  8D 5F 13     	sta spptr
0012E3  3  A5 67        	lda z80_h
0012E5  3  8D 60 13     	sta spptr+1
0012E8  3               
0012E8  3  A5 62        	lda z80_c
0012EA  3  A0 00        	ldy #var_Type
0012EC  3  91 66        	sta (z80_hl),y 		; set the type.
0012EE  3  A0 05        	ldy #var_newType
0012F0  3  91 66        	sta (z80_hl),y		; copy
0012F2  3               
0012F2  3  A5 63        	lda z80_b
0012F4  3  A0 01        	ldy #var_Image
0012F6  3  91 66        	sta (z80_hl),y		; set the image.
0012F8  3  A0 06        	ldy #var_newImage
0012FA  3  91 66        	sta (z80_hl),y		; copy
0012FC  3               
0012FC  3  A9 00        	lda #0 				; frame zero.
0012FE  3  A0 02        	ldy #var_Frame
001300  3  91 66        	sta (z80_hl),y		; set frame.
001302  3  A0 07        	ldy #var_newFrame
001304  3  91 66        	sta (z80_hl),y		; copy
001306  3               
001306  3  A0 09        	ldy #9
001308  3  B1 68        	lda (z80_ix),y 		; x coordinate.
00130A  3  A0 04        	ldy #var_X
00130C  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
00130E  3  A0 09        	ldy #var_newX
001310  3  91 66        	sta (z80_hl),y		; copy
001312  3               
001312  3  A0 08        	ldy #8
001314  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001316  3  A0 03        	ldy #var_Y
001318  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
00131A  3  A0 08        	ldy #var_newY
00131C  3  91 66        	sta (z80_hl),y		; copy
00131E  3               
00131E  3  A0 0A        	ldy #10				; direction of original.
001320  3  B1 68        	lda (z80_ix),y
001322  3  A0 0A        	ldy #var_Direction
001324  3  91 66        	sta (z80_hl),y		; direction
001326  3               
001326  3  A9 00        	lda #0
001328  3  A0 0D        	ldy #var_jumpLo
00132A  3  91 66        	sta (z80_hl),y		; reset parameter.
00132C  3  C8           	iny
00132D  3  91 66        	sta (z80_hl),y		; reset parameter.
00132F  3  C8           	iny
001330  3  91 66        	sta (z80_hl),y		; reset parameter.
001332  3  C8           	iny
001333  3  91 66        	sta (z80_hl),y		; reset parameter.
001335  3               rtssp:
001335  3  AD 5F 13     	lda spptr			; address of new sprite.
001338  3  85 68        	sta z80_x
00133A  3  AD 60 13     	lda spptr+1
00133D  3  85 69        	sta z80_i
00133F  3               evis1:
00133F  3  20 E0 34     	jsr evnt09 			; call sprite initialisation event.
001342  3               
001342  3  AD 5F 13     	lda spptr 			; address of new sprite.
001345  3  85 68        	sta z80_x
001347  3  AD 60 13     	lda spptr+1
00134A  3  85 69        	sta z80_i
00134C  3               
00134C  3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
00134C  3  A0 03        	ldy #var_Y
00134E  3  B1 66        	lda (z80_hl), y		; old x coord
001350  3  C9 B9        	cmp #SpriteMaxY     ; beyond maximum?
001352  3  B0 03        	bcs :+				; yes, don't draw it.
001354  3               
001354  3  20 A9 1D     	jsr sspria 			; display the new sprite.
001357  3               :
001357  3  68           	pla					; address of original sprite.
001358  3  85 68        	sta z80_x
00135A  3  68           	pla
00135B  3  85 69        	sta z80_i
00135D  3               
00135D  3  60           	rts
00135E  3               
00135E  3  00           spcnt:	.byte 0
00135F  3  00 00        spptr:	.word 0			; spawned sprite pointer.
001361  3  00           seed:	.byte 0			; seed for random numbers.
001362  3  30 30 30 30  score:	.byte "000000"		; player"s score.
001366  3  30 30        
001368  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
00136C  3  30 30        
00136E  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
001372  3  30 30        
001374  3  00 58        grbase:	.word ScreenAddr	; graphics base address.
001376  3               
001376  3               ;----------------------------------------------------
001376  3               ; Check y-pos
001376  3               ;----------------------------------------------------
001376  3               
001376  3               checkx:
001376  3  AD 4F 0E     	lda dispy		; y position.
001379  3  C9 18        	cmp #24			; off screen?
00137B  3  B0 01        	bcs :+
00137D  3  60           	rts			; no, it's okay.
00137E  3               :
00137E  3  68           	pla			; remove return address from stack.
00137F  3  85 66        	sta z80_l
001381  3  68           	pla
001382  3  85 67        	sta z80_h
001384  3  60           	rts
001385  3               
001385  3               ;-----------------------------------------------
001385  3               ; Displays the current high score.
001385  3               ;-----------------------------------------------
001385  3               
001385  3               dhisc:
001385  3  A9 68        	lda #<hiscor 		; high score text.
001387  3  85 66        	sta z80_l
001389  3  A9 13        	lda #>hiscor
00138B  3  85 67        	sta z80_h
00138D  3  4C 98 13     	jmp dscor1		; check in printable range then show 6 digits.
001390  3               
001390  3               ;------------------------------------------------------
001390  3               ; Displays the current score.
001390  3               ;------------------------------------------------------
001390  3               
001390  3               dscor:
001390  3  A9 62        	lda #<score		; score text.
001392  3  85 66        	sta z80_l
001394  3  A9 13        	lda #>score
001396  3  85 67        	sta z80_h
001398  3               dscor1:
001398  3  20 1C 1B     	jsr preprt		; set up font and print position.
00139B  3  20 76 13     	jsr checkx		; make sure we're in a printable range.
00139E  3               
00139E  3  A9 06        	lda #6			; digits to display.
0013A0  3  85 63        	sta z80_b
0013A2  3  AD 5E 1A     	lda prtmod		; get print mode.
0013A5  3  F0 03        	beq :+			; standard size text?
0013A7  3  4C CB 13     	jmp bscor0		; no, show double-height.
0013AA  3               :
0013AA  3               dscor0:
0013AA  3  A0 00        	ldy #0
0013AC  3  B1 66        	lda (z80_hl),y 		; fetch character.
0013AE  3  20 19 15     	jsr pchar 		; display character.
0013B1  3  EE 4E 0E     	inc dispx		; move along x coordinate
0013B4  3               
0013B4  3  E6 66        	inc z80_l		; next score column.
0013B6  3  D0 02        	bne :+
0013B8  3  E6 67        	inc z80_h
0013BA  3               :
0013BA  3  C6 63        	dec z80_b
0013BC  3  D0 EC        	bne dscor0 		; repeat for all digits.
0013BE  3               dscor2:
0013BE  3  AD 4E 0E     	lda dispx 		; set up display coordinates.
0013C1  3  8D 43 0E     	sta charx
0013C4  3  AD 4F 0E     	lda dispy
0013C7  3  8D 44 0E     	sta chary
0013CA  3  60           	rts
0013CB  3               
0013CB  3               ;------------------------------------------------------
0013CB  3               ; Displays the current score in double-height characters.
0013CB  3               ;
0013CB  3               ; Input:
0013CB  3               ;  B  = digit number
0013CB  3               ;  HL = score string
0013CB  3               ;------------------------------------------------------
0013CB  3               
0013CB  3               bscor0:
0013CB  3  A0 00        	ldy #0
0013CD  3               
0013CD  3  B1 66        	lda (z80_hl),y 		; fetch character.
0013CF  3  20 96 1A     	jsr bchar 		; display big char.
0013D2  3               
0013D2  3  E6 66        	inc z80_l 		; next score column.
0013D4  3  D0 02        	bne :+
0013D6  3  E6 67        	inc z80_h
0013D8  3               :
0013D8  3  C6 63        	dec z80_b
0013DA  3  F0 03        	beq :+
0013DC  3  4C CB 13     	jmp bscor0 		; repeat for all digits.
0013DF  3               :
0013DF  3  4C BE 13     	jmp dscor2 		; tidy up line and column variables.
0013E2  3               
0013E2  3               ;-----------------------------------------------------
0013E2  3               ; Adds number in the hl pair to the score.
0013E2  3               ;-----------------------------------------------------
0013E2  3               
0013E2  3               addsc:
0013E2  3  A9 63        	lda #<(score+1) 	; ten thousands column.
0013E4  3  85 64        	sta z80_e
0013E6  3  A9 13        	lda #>(score+1)
0013E8  3  85 65        	sta z80_d
0013EA  3  A9 10        	lda #<10000		; amount to add each time.
0013EC  3  85 62        	sta z80_c
0013EE  3  A9 27        	lda #>10000
0013F0  3  85 63        	sta z80_b
0013F2  3  20 36 14     	jsr incsc		; add to score.
0013F5  3               
0013F5  3  E6 64        	inc z80_e		; thousands column.
0013F7  3  D0 02        	bne :+
0013F9  3  E6 65        	inc z80_d
0013FB  3               :
0013FB  3  A9 E8        	lda #<1000		; amount to add each time.
0013FD  3  85 62        	sta z80_c
0013FF  3  A9 03        	lda #>1000
001401  3  85 63        	sta z80_b
001403  3  20 36 14     	jsr incsc 		; add to score.
001406  3               
001406  3  E6 64        	inc z80_e		; hundreds column.
001408  3  D0 02        	bne :+
00140A  3  E6 65        	inc z80_d
00140C  3               :
00140C  3  A9 64        	lda #<100		; amount to add each time.
00140E  3  85 62        	sta z80_c
001410  3  A9 00        	lda #>100
001412  3  85 63        	sta z80_b
001414  3  20 36 14     	jsr incsc		; add to score.
001417  3               
001417  3  E6 64        	inc z80_e 		; tens column.
001419  3  D0 02        	bne :+
00141B  3  E6 65        	inc z80_d
00141D  3               :
00141D  3  A9 0A        	lda #<10		; amount to add each time.
00141F  3  85 62        	sta z80_c
001421  3  A9 00        	lda #>10
001423  3  85 63        	sta z80_b
001425  3  20 36 14     	jsr incsc 		; add to score.
001428  3               
001428  3  E6 64        	inc z80_e		; units column.
00142A  3  D0 02        	bne :+
00142C  3  E6 65        	inc z80_d
00142E  3               :
00142E  3  A9 01        	lda #<1			; units.
001430  3  85 62        	sta z80_c
001432  3  A9 00        	lda #>1
001434  3  85 63        	sta z80_b
001436  3               incsc:
001436  3  A5 67        	lda z80_h		; store amount to add.
001438  3  48           	pha
001439  3  A5 66        	lda z80_l
00143B  3  48           	pha
00143C  3               
00143C  3  38           	sec			; subtract from amount to add.
00143D  3  A5 66        	lda z80_l
00143F  3  E5 62        	sbc z80_c
001441  3  85 66        	sta z80_l
001443  3  A5 67        	lda z80_h
001445  3  E5 63        	sbc z80_b
001447  3  85 67        	sta z80_h
001449  3  90 14        	bcc incsc0		; too much, restore value.
00144B  3               
00144B  3  68           	pla			; delete the previous amount from the stack.
00144C  3  68           	pla
00144D  3               
00144D  3  A5 65        	lda z80_d 		; store column position.
00144F  3  48           	pha
001450  3  A5 64        	lda z80_e
001452  3  48           	pha
001453  3  20 66 14     	jsr incsc2		; do the increment.
001456  3               
001456  3  68           	pla			; restore column.
001457  3  85 64        	sta z80_e
001459  3  68           	pla
00145A  3  85 65        	sta z80_d
00145C  3  4C 36 14     	jmp incsc		; repeat until all added.
00145F  3               
00145F  3               incsc0:
00145F  3  68           	pla			; restore previous value.
001460  3  85 66        	sta z80_l
001462  3  68           	pla
001463  3  85 67        	sta z80_h
001465  3  60           	rts
001466  3               incsc2:
001466  3  A0 00        	ldy #0
001468  3  B1 64        	lda (z80_de),y 		; get amount.
00146A  3  18           	clc
00146B  3  69 01        	adc #1			; add one to column.
00146D  3  91 64        	sta (z80_de),y		; write new column total.
00146F  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
001471  3  B0 01        	bcs :+
001473  3  60           	rts			; no, carry on.
001474  3               :
001474  3  A9 30        	lda #'0'		; make it zero.
001476  3  91 64        	sta (z80_de),y		; write new column total.
001478  3  C6 64        	dec z80_e		; back one column.
00147A  3  D0 02        	bne :+
00147C  3  C6 65        	dec z80_d
00147E  3               :
00147E  3  4C 66 14     	jmp incsc2
001481  3               
001481  3               ;------------------------------------
001481  3               ; Add bonus to score and reset bonus
001481  3               ;------------------------------------
001481  3               
001481  3               addbo:
001481  3  A2 05        	ldx #5			; last digit.
001483  3  18           	clc			; clear carry.
001484  3               addbo0:
001484  3  BD 62 13     	lda score,x		; get score.
001487  3  7D 6E 13     	adc bonus,x		; add bonus.
00148A  3  38           	sec			; 0 to 18.
00148B  3  E9 30        	sbc #48
00148D  3  48           	pha
00148E  3  A9 30        	lda #'0'
001490  3  9D 6E 13     	sta bonus,x		; zeroise bonus.
001493  3  68           	pla
001494  3  C9 3A        	cmp #58			; carried?
001496  3  B0 07        	bcs addbo2		; no, do next one.
001498  3  38           	sec
001499  3  E9 0A        	sbc #10			; subtract 10.
00149B  3  38           	sec
00149C  3  4C A0 14     	jmp addbo1
00149F  3               addbo2:
00149F  3  18           	clc
0014A0  3               addbo1:
0014A0  3  9D 62 13     	sta score,x		; write new score.
0014A3  3  CA           	dex			; next digit.
0014A4  3  10 DE        	bpl addbo0		; repeat for all 6 digits.
0014A6  3  60           	rts
0014A7  3               
0014A7  3               ;------------------------------------
0014A7  3               ; Swap score and bonus.
0014A7  3               ;------------------------------------
0014A7  3               
0014A7  3               swpsb:
0014A7  3  A2 05        	ldx #5			; digits to add.
0014A9  3               swpsb0:
0014A9  3  BD 62 13     	lda score,x 		; get score digits.
0014AC  3  48           	pha			; save digit
0014AD  3  BD 6E 13     	lda bonus,x 		; get bonus digits.
0014B0  3  9D 62 13     	sta score,x		; switch score-bonus
0014B3  3  68           	pla
0014B4  3  9D 6E 13     	sta bonus,x
0014B7  3  CA           	dex 			; repeat for all 6 digits.
0014B8  3  10 EF        	bpl swpsb0
0014BA  3  60           	rts
0014BB  3               
0014BB  3               ;----------------------------------------------------
0014BB  3               ; Get print address.
0014BB  3               ;----------------------------------------------------
0014BB  3               
0014BB  3               gprad:
0014BB  3  98           	tya
0014BC  3  48           	pha
0014BD  3               
0014BD  3  AD 4E 0E     	lda dispx 		; x coordinate.
0014C0  3  85 80        	sta scraddr
0014C2  3  A9 00        	lda #0
0014C4  3  85 81        	sta scraddr+1
0014C6  3  06 80        	asl scraddr  	; multiply char by 8
0014C8  3  26 81        	rol scraddr+1
0014CA  3  06 80        	asl scraddr
0014CC  3  26 81        	rol scraddr+1
0014CE  3  06 80        	asl scraddr
0014D0  3  26 81        	rol scraddr+1
0014D2  3               
0014D2  3  AD 4F 0E     	lda dispy		; y coordinate.
0014D5  3  0A           	asl a
0014D6  3  0A           	asl a
0014D7  3  0A           	asl a			; multiply char by 8
0014D8  3  A8           	tay
0014D9  3               
0014D9  3  18           	clc
0014DA  3  A5 80        	lda scraddr
0014DC  3  79 00 06     	adc SCADTB_lb,y
0014DF  3  85 80        	sta scraddr
0014E1  3  A5 81        	lda scraddr+1
0014E3  3  79 00 07     	adc SCADTB_hb,y
0014E6  3  85 81        	sta scraddr+1
0014E8  3               
0014E8  3  68           	pla
0014E9  3  A8           	tay
0014EA  3  60           	rts
0014EB  3               
0014EB  3               ;--------------------------------------------------------------
0014EB  3               ; Get property buffer address of char at (dispx, dispy) in hl.
0014EB  3               ; 
0014EB  3               ; Output:
0014EB  3               ;  buffaddr = bufaddr = MAP + dispy*32 + dispx
0014EB  3               ;--------------------------------------------------------------
0014EB  3               
0014EB  3               pradd:
0014EB  3  AD 4F 0E     	lda dispy 		; y coordinate.
0014EE  3  85 86        	sta bufaddr
0014F0  3  A9 00        	lda #0
0014F2  3  85 87        	sta bufaddr+1
0014F4  3  06 86        	asl bufaddr  		; multiply char by 32
0014F6  3  26 87        	rol bufaddr+1
0014F8  3  06 86        	asl bufaddr
0014FA  3  26 87        	rol bufaddr+1
0014FC  3  06 86        	asl bufaddr
0014FE  3  26 87        	rol bufaddr+1
001500  3  06 86        	asl bufaddr
001502  3  26 87        	rol bufaddr+1
001504  3  06 86        	asl bufaddr
001506  3  26 87        	rol bufaddr+1
001508  3  18           	clc			; add address of MAP graphics.
001509  3  A5 86        	lda bufaddr
00150B  3  6D 4E 0E     	adc dispx
00150E  3  69 00        	adc #<MAP
001510  3  85 86        	sta bufaddr
001512  3  A5 87        	lda bufaddr+1
001514  3  69 03        	adc #>MAP
001516  3  85 87        	sta bufaddr+1
001518  3  60           	rts
001519  3               
001519  3               ;----------------------------------------------------
001519  3               ; Display character in A at dispx,dispy.
001519  3               ;
001519  3               ; Input:
001519  3               ;  A 	   = character to print
001519  3               ;----------------------------------------------------
001519  3               
001519  3               pchar:
001519  3  85 82        	sta fntaddr
00151B  3  A9 00        	lda #0
00151D  3  85 83        	sta fntaddr+1
00151F  3  06 82        	asl fntaddr  		; multiply char by 8.
001521  3  26 83        	rol fntaddr+1
001523  3  06 82        	asl fntaddr
001525  3  26 83        	rol fntaddr+1
001527  3  06 82        	asl fntaddr
001529  3  26 83        	rol fntaddr+1
00152B  3               
00152B  3  A5 82        	lda fntaddr
00152D  3  18           	clc
00152E  3  6D 52 0E     	adc FontPtr
001531  3  85 82        	sta fntaddr		; that's the low byte.
001533  3  A5 83        	lda fntaddr+1
001535  3  6D 53 0E     	adc FontPtr+1
001538  3  85 83        	sta fntaddr+1		; add displacement.
00153A  3               pchark:
00153A  3  20 BB 14     	jsr gprad		; get screen address.
00153D  3  A2 07        	ldx #7			; lines to write.
00153F  3               pchar0:
00153F  3  A0 00        	ldy #0
001541  3  B1 82        	lda (fntaddr),y 	; get image byte.
001543  3  BC 54 15     	ldy scrtab,x		; Get rowoffset
001546  3               
001546  3  49 00        	eor #TxtInvert		; Invert
001548  3               
001548  3  91 80        	sta (scraddr),y 	; copy to screen.
00154A  3  E6 82        	inc fntaddr		; next image byte.
00154C  3  D0 02        	bne :+
00154E  3  E6 83        	inc fntaddr+1
001550  3               :
001550  3  CA           	dex			; next screen row down.
001551  3  10 EC        	bpl pchar0		; repeat.
001553  3  60           	rts
001554  3               
001554  3  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
001558  3  03 02 01 00  
00155C  3               ;scrtab:	.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
00155C  3               
00155C  3               ;----------------------------------------------
00155C  3               ; Print attributes, properties and pixels.
00155C  3               ;
00155C  3               ; Input:
00155C  3               ;  A	= tile number
00155C  3               ;----------------------------------------------
00155C  3               
00155C  3               pattr:
00155C  3  85 63        	sta z80_b		; store cell in b register for now.
00155E  3  AA           	tax
00155F  3  BD 71 38     	lda bprop,x 		; block properties.
001562  3  85 62        	sta z80_c
001564  3  20 EB 14     	jsr pradd 		; get property buffer address.
001567  3  A5 62        	lda z80_c
001569  3  A0 00        	ldy #0
00156B  3  91 86        	sta (bufaddr),y 	; write property.
00156D  3  A5 63        	lda z80_b 		; restore cell.
00156F  3               
00156F  3               ; Print attributes, no properties.
00156F  3               
00156F  3               panp:
00156F  3  85 64        	sta z80_e		; displacement in e.
001571  3  A9 00        	lda #0
001573  3  85 65        	sta z80_d		; no high byte.
001575  3  06 64        	asl z80_e  		; multiply char by 8.
001577  3  26 65        	rol z80_d
001579  3  06 64        	asl z80_e
00157B  3  26 65        	rol z80_d
00157D  3  06 64        	asl z80_e
00157F  3  26 65        	rol z80_d
001581  3  18           	clc
001582  3  A5 64        	lda z80_e
001584  3  69 11        	adc #<chgfx 		; address of graphics.
001586  3  85 84        	sta tileaddr
001588  3  A5 65        	lda z80_d
00158A  3  69 37        	adc #>chgfx
00158C  3  85 85        	sta tileaddr+1
00158E  3  20 BB 14     	jsr gprad 		; get screen address.
001591  3  A2 07        	ldx #7			; number of pixel rows to write.
001593  3               panp0:
001593  3  A0 00        	ldy #0
001595  3  B1 84        	lda (tileaddr),y 	; get image byte.
001597  3  49 00        	eor #TxtInvert		; Invert
001599  3  BC 54 15     	ldy scrtab,x
00159C  3  91 80        	sta (scraddr),y 	; copy to screen.
00159E  3  E6 84        	inc tileaddr 		; next image byte.
0015A0  3  D0 02        	bne :+
0015A2  3  E6 85        	inc tileaddr+1
0015A4  3               :
0015A4  3  CA           	dex	 		; repeat for 8 pixel rows.
0015A5  3  10 EC        	bpl panp0
0015A7  3  EE 4E 0E     	inc dispx 		; move along one.
0015AA  3  EE 43 0E     	inc charx
0015AD  3  60           	rts
0015AE  3               
0015AE  3               ;----------------------------------------------
0015AE  3               ; Print character pixels, no more.
0015AE  3               ;
0015AE  3               ; Input:
0015AE  3               ;  A	= character to print
0015AE  3               ;----------------------------------------------
0015AE  3               
0015AE  3               pchr:
0015AE  3  20 19 15     	jsr pchar 		; show character in accumulator.
0015B1  3  EE 4E 0E     	inc dispx		; move along one.
0015B4  3  60           	rts
0015B5  3               
0015B5  3               ;----------------------------------------------------
0015B5  3               ; Shifter sprite routine for objects.
0015B5  3               ;----------------------------------------------------
0015B5  3               
0015B5  3               sprit7:
0015B5  3  A5 63        	lda z80_b
0015B7  3  F0 0F        	beq sprit0
0015B9  3  85 61        	sta z80_a
0015BB  3               sprit3:
0015BB  3  4E 46 16     	lsr spr			; shift into position.
0015BE  3  6E 47 16     	ror spr+1
0015C1  3  6E 48 16     	ror spr+2
0015C4  3  C6 61        	dec z80_a		; one less iteration.
0015C6  3  D0 F3        	bne sprit3
0015C8  3               sprit0:
0015C8  3  60           	rts 			; now apply to screen.
0015C9  3               
0015C9  3               ;----------------------------------------------------
0015C9  3               ; Draw sprite
0015C9  3               ;----------------------------------------------------
0015C9  3               
0015C9  3               sprite:
0015C9  3  8E 49 16     	stx xtmp		; Save X-reg
0015CC  3  20 8B 1D     	jsr scadd 		; get screen address in scraddr.
0015CF  3               
0015CF  3  AD 4E 0E     	lda dispx 		; x position.
0015D2  3  29 07        	and #7 			; position straddling cells.
0015D4  3  85 63        	sta z80_b		; store in b register.
0015D6  3               
0015D6  3  A5 66        	lda z80_l		; store sprite graphic address.
0015D8  3  8D EB 15     	sta sprit1+1
0015DB  3  8D F2 15     	sta sprit2+1
0015DE  3  A5 67        	lda z80_h
0015E0  3  8D EC 15     	sta sprit1+2
0015E3  3  8D F3 15     	sta sprit2+2
0015E6  3               
0015E6  3  A2 00        	ldx #0			; pixel height.
0015E8  3  A0 00        	ldy #0
0015EA  3               sprit1:
0015EA  3  BD B3 4C     	lda objdta,x		; fetch first byte.
0015ED  3  8D 46 16     	sta spr
0015F0  3  E8           	inx
0015F1  3               sprit2:
0015F1  3  BD B3 4C     	lda objdta,x
0015F4  3  8D 47 16     	sta spr+1
0015F7  3               
0015F7  3  A9 00        	lda #0
0015F9  3  8D 48 16     	sta spr+2
0015FC  3  20 B5 15     	jsr sprit7		; shift sprite
0015FF  3               
0015FF  3  AD 46 16     	lda spr			; fetch graphic.
001602  3  A0 00        	ldy #0			; _BEEB
001604  3  51 80        	eor (scraddr),y		; merge with screen image.
001606  3  91 80        	sta (scraddr),y		; write to screen.
001608  3               
001608  3  AD 47 16     	lda spr+1		; fetch graphic.
00160B  3  A0 08        	ldy #8			; _BEEB
00160D  3  51 80        	eor (scraddr),y		; merge with screen image.
00160F  3  91 80        	sta (scraddr),y		; write to screen.
001611  3               
001611  3  AD 48 16     	lda spr+2		; fetch graphic.
001614  3  A0 10        	ldy #16			; _BEEB
001616  3  51 80        	eor (scraddr),y		; merge with screen image.
001618  3  91 80        	sta (scraddr),y		; write to screen.
00161A  3               
00161A  3  20 2D 1E     	jsr nline
00161D  3               
00161D  3  E8           	inx			; next source byte.
00161E  3  E0 20        	cpx #32
001620  3  D0 C8        	bne sprit1		; repeat
001622  3               
001622  3  AE 49 16     	ldx xtmp		; retreive X-reg
001625  3  60           	rts
001626  3               
001626  3               spritetab:
001626  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
00162A  3  40 41 60 61  
00162E  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
001632  3  C0 C1 E0 E1  
001636  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
00163A  3  40 41 60 61  
00163E  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
001642  3  C0 C1 E0 E1  
001646  3               
001646  3  00 00 00     spr:	.byte 0,0,0
001649  3               
001649  3  00           xtmp:	.byte 0
00164A  3               
00164A  3               ;-----------------------------------------------------------
00164A  3               ; Get room address.
00164A  3               ;-----------------------------------------------------------
00164A  3               
00164A  3               groom:
00164A  3  AE 29 0E     	ldx scno 		; screen number.
00164D  3  A0 00        	ldy #0
00164F  3               groomx:
00164F  3  A9 3B        	lda #<scdat 		; pointer to screens.
001651  3  85 66        	sta z80_l
001653  3  A9 4B        	lda #>scdat
001655  3  85 67        	sta z80_h
001657  3               groom1:
001657  3  E0 00        	cpx #0			; is it the first one?
001659  3  F0 15        	beq groom0 		; no more screens to skip.
00165B  3               
00165B  3  18           	clc
00165C  3  A5 66        	lda z80_l
00165E  3  79 3B 4B     	adc scdat,y 		; low byte of screen size.
001661  3  85 66        	sta z80_l
001663  3  C8           	iny			; point to high byte.
001664  3  A5 67        	lda z80_h
001666  3  79 3B 4B     	adc scdat,y 		; high byte of screen size.
001669  3  85 67        	sta z80_h
00166B  3  C8           	iny			; next address.
00166C  3               
00166C  3  CA           	dex 			; one less iteration.
00166D  3  4C 57 16     	jmp groom1 		; loop until we reach the end.
001670  3               groom0:
001670  3  AD 80 4C     	lda numsc 		; add displacement.
001673  3  0A           	asl a
001674  3  18           	clc			; add double displacement to address.
001675  3  65 66        	adc z80_l
001677  3  85 66        	sta z80_l
001679  3  A5 67        	lda z80_h
00167B  3  69 00        	adc #0
00167D  3  85 67        	sta z80_h
00167F  3  60           	rts
001680  3               
001680  3               ;-----------------------------------------------------------
001680  3               ; Draw present room.
001680  3               ;-----------------------------------------------------------
001680  3               
001680  3               droom:
001680  3  AD 20 0E     	lda wintop 		; window top.
001683  3  8D 4F 0E     	sta dispy		; set cursor y position.
001686  3               droom2:
001686  3  20 4A 16     	jsr groom 		; get address of current room.
001689  3  A9 00        	lda #0	 		; zero in accumulator.
00168B  3  8D E8 16     	sta comcnt 		; reset compression counter.
00168E  3  AD 22 0E     	lda winhgt 		; height of window.
001691  3  8D B5 16     	sta rrow		; set row counter
001694  3               droom0:
001694  3  AD 21 0E     	lda winlft 		; window left edge.
001697  3  8D 4E 0E     	sta dispx 		; set cursor x position.
00169A  3  AD 23 0E     	lda winwid 		; width of window.
00169D  3  8D B4 16     	sta rcol		; set column counter
0016A0  3               droom1:
0016A0  3  20 B6 16     	jsr flbyt 		; decompress next byte on the fly.
0016A3  3  20 5C 15     	jsr pattr 		; show attributes and block.
0016A6  3  CE B4 16     	dec rcol		; one less column.
0016A9  3  D0 F5        	bne droom1 		; repeat for entire line.
0016AB  3  EE 4F 0E     	inc dispy		; move down one line.
0016AE  3  CE B5 16     	dec rrow 		; one less row.
0016B1  3  D0 E1        	bne droom0 		; repeat for all rows.
0016B3  3  60           	rts
0016B4  3               
0016B4  3  00           rcol:	.byte 0
0016B5  3  00           rrow:	.byte 0
0016B6  3               
0016B6  3               ;----------------------------------------------
0016B6  3               ; Decompress bytes on-the-fly.
0016B6  3               ;----------------------------------------------
0016B6  3               
0016B6  3               flbyt:
0016B6  3  AD E8 16     	lda comcnt 		; compression counter.
0016B9  3  D0 22        	bne flbyt1		; any more to decompress?  yes.
0016BB  3               
0016BB  3  A0 00        	ldy #0
0016BD  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
0016BF  3  E6 66        	inc z80_l 		; point to next cell.
0016C1  3  D0 02        	bne :+
0016C3  3  E6 67        	inc z80_h
0016C5  3               :
0016C5  3  C9 FF        	cmp #255 		; is this byte a control code?
0016C7  3  F0 01        	beq :+
0016C9  3  60           	rts 			; no, this byte is uncompressed.
0016CA  3               :
0016CA  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
0016CC  3  8D E7 16     	sta combyt 		; set up the type.
0016CF  3  E6 66        	inc z80_l 		; point to quantity.
0016D1  3  D0 02        	bne :+
0016D3  3  E6 67        	inc z80_h
0016D5  3               :
0016D5  3  B1 66        	lda (z80_hl),y 		; get quantity.
0016D7  3  E6 66        	inc z80_l 		; point to next byte.
0016D9  3  D0 02        	bne :+
0016DB  3  E6 67        	inc z80_h
0016DD  3               :
0016DD  3               flbyt1:
0016DD  3  8D E8 16     	sta comcnt 		; store new quantity.
0016E0  3  CE E8 16     	dec comcnt		; one less.
0016E3  3  AD E7 16     	lda combyt 		; byte to expand.
0016E6  3  60           	rts
0016E7  3               
0016E7  3  00           combyt:	.byte 0			; byte type compressed.
0016E8  3  00           comcnt:	.byte 0			; compression counter.
0016E9  3               
0016E9  3               ;------------------------------------------
0016E9  3               ; Ladder down check.
0016E9  3               ;
0016E9  3               ; Input:
0016E9  3               ;  IX = sprite pointer
0016E9  3               ;------------------------------------------
0016E9  3               
0016E9  3               laddd:
0016E9  3  A0 09        	ldy #9
0016EB  3  B1 68        	lda (z80_ix),y		; x coordinate.
0016ED  3  8D 4E 0E     	sta dispx
0016F0  3               
0016F0  3  A0 08        	ldy #8
0016F2  3  B1 68        	lda (z80_ix),y		; y coordinate.
0016F4  3  29 FE        	and #254		; make it even.
0016F6  3  91 68        	sta (z80_ix),y 		; reset it.
0016F8  3               numsp5:
0016F8  3  18           	clc 			; look down 16 pixels.
0016F9  3  69 10        	adc #16
0016FB  3  8D 4F 0E     	sta dispy		; coords in dispx,dispy.
0016FE  3  4C 16 17     	jmp laddv
001701  3               
001701  3               ;------------------------------------------
001701  3               ; Ladder up check.
001701  3               ;
001701  3               ; Input:
001701  3               ;  IX = sprite pointer
001701  3               ;
001701  3               ; Output:
001701  3               ;  A  = 0 is ok, A <>0 is not ok
001701  3               ;------------------------------------------
001701  3               
001701  3               laddu:
001701  3  A0 09        	ldy #9
001703  3  B1 68        	lda (z80_ix),y		; x coordinate.
001705  3  8D 4E 0E     	sta dispx
001708  3               
001708  3  A0 08        	ldy #8
00170A  3  B1 68        	lda (z80_ix),y		; y coordinate.
00170C  3  29 FE        	and #254 		; make it even.
00170E  3  91 68        	sta (z80_ix),y		; reset it.
001710  3               numsp6:
001710  3  18           	clc 			; look 2 pixels above feet.
001711  3  69 0E        	adc #14
001713  3  8D 4F 0E     	sta dispy		; coords in dispx,dispy.
001716  3               laddv:
001716  3  20 FD 18     	jsr tstbl 		; get map address.
001719  3  20 30 18     	jsr ldchk 		; standard ladder check.
00171C  3  F0 01        	beq :+
00171E  3  60           	rts 			; no way through.
00171F  3               :
00171F  3  E6 86        	inc bufaddr 		; look right one cell.
001721  3  D0 02        	bne :+
001723  3  E6 87        	inc bufaddr+1
001725  3               :
001725  3  20 30 18     	jsr ldchk 		; do the check.
001728  3  F0 01        	beq :+
00172A  3  60           	rts 			; impassable.
00172B  3               :
00172B  3  AD 4E 0E     	lda dispx 		; y coordinate.
00172E  3  29 07        	and #7 			; position straddling block cells.
001730  3  D0 01        	bne :+
001732  3  60           	rts 			; no more checks needed.
001733  3               :
001733  3  E6 86        	inc bufaddr 		; look to third cell.
001735  3  D0 02        	bne :+
001737  3  E6 87        	inc bufaddr+1
001739  3               :
001739  3  20 30 18     	jsr ldchk 		; do the check.
00173C  3  60           	rts  			; return with zero flag set accordingly.
00173D  3               
00173D  3               ;---------------------------------------------------------
00173D  3               ; Can go up check.
00173D  3               ;
00173D  3               ; Input:
00173D  3               ;  IX = sprite pointer
00173D  3               ;
00173D  3               ; Output:
00173D  3               ;  A  = 0 is ok, A <>0 is not ok
00173D  3               ;---------------------------------------------------------
00173D  3               
00173D  3               cangu:
00173D  3  A0 09        	ldy #9
00173F  3  B1 68        	lda (z80_ix),y		; x coordinate.
001741  3  8D 4E 0E     	sta dispx
001744  3  A0 08        	ldy #8
001746  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001748  3  38           	sec
001749  3  E9 02        	sbc #2
00174B  3  8D 4F 0E     	sta dispy		; coords in dispx,dispy.
00174E  3  20 FD 18     	jsr tstbl 		; get map address.
001751  3  20 FA 17     	jsr lrchk 		; standard left/right check.
001754  3  F0 01        	beq :+
001756  3  60           	rts			; no way through.
001757  3               :
001757  3  E6 86        	inc bufaddr		; look right one cell.
001759  3  D0 02        	bne :+
00175B  3  E6 87        	inc bufaddr+1
00175D  3               :
00175D  3  20 FA 17     	jsr lrchk 		; do the check.
001760  3  F0 01        	beq :+
001762  3  60           	rts			; impassable.
001763  3               :
001763  3  AD 4E 0E     	lda dispx		; x coordinate.
001766  3  29 07        	and #7			; position straddling block cells.
001768  3  D0 01        	bne :+
00176A  3  60           	rts			; no more checks needed.
00176B  3               :
00176B  3  E6 86        	inc bufaddr		; look to third cell.
00176D  3  D0 02        	bne :+
00176F  3  E6 87        	inc bufaddr+1
001771  3               :
001771  3  20 FA 17     	jsr lrchk		; do the check.
001774  3  60           	rts 			; return with zero flag set accordingly.
001775  3               
001775  3               ;---------------------------------------------------------
001775  3               ; Can go down check.
001775  3               ;
001775  3               ; Input:
001775  3               ;  IX = sprite pointer
001775  3               ;
001775  3               ; Output:
001775  3               ;  A  = 0 is ok, A <>0 is not ok
001775  3               ;---------------------------------------------------------
001775  3               
001775  3               cangd:
001775  3  A0 09        	ldy #9
001777  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001779  3  8D 4E 0E     	sta dispx
00177C  3  A0 08        	ldy #8
00177E  3  B1 68        	lda (z80_ix),y		; y coordinate.
001780  3               numsp3:
001780  3  18           	clc
001781  3  69 10        	adc #16 		; look down 16 pixels.
001783  3  8D 4F 0E     	sta dispy		; coords in dispx,dispy.
001786  3  20 FD 18     	jsr tstbl 		; get map address.
001789  3  20 0F 18     	jsr plchk 		; block, platform check.
00178C  3  F0 01        	beq :+
00178E  3  60           	rts			; no way through.
00178F  3               :
00178F  3  E6 86        	inc bufaddr		; look right one cell.
001791  3  D0 02        	bne :+
001793  3  E6 87        	inc bufaddr+1
001795  3               :
001795  3  20 0F 18     	jsr plchk		; block, platform check.
001798  3  F0 01        	beq :+
00179A  3  60           	rts			; impassable.
00179B  3               :
00179B  3  AD 4E 0E     	lda dispx		; x coordinate.
00179E  3  29 07        	and #7			; position straddling block cells.
0017A0  3  D0 01        	bne :+
0017A2  3  60           	rts			; no more checks needed.
0017A3  3               :
0017A3  3  E6 86        	inc bufaddr		; look to third cell.
0017A5  3  D0 02        	bne :+
0017A7  3  E6 87        	inc bufaddr+1
0017A9  3               :
0017A9  3  20 0F 18     	jsr plchk		; block, platform check.
0017AC  3  60           	rts			; return with zero flag set accordingly.
0017AD  3               
0017AD  3               ;---------------------------------------------------------
0017AD  3               ; Can go left check.
0017AD  3               ;
0017AD  3               ; Input:
0017AD  3               ;  IX = sprite pointer
0017AD  3               ;
0017AD  3               ; Output:
0017AD  3               ;  A  = 0 is ok, A <>0 is not ok
0017AD  3               ;---------------------------------------------------------
0017AD  3               
0017AD  3               cangl:
0017AD  3  A0 08        	ldy #8
0017AF  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0017B1  3  8D 4F 0E     	sta dispy
0017B4  3  A0 09        	ldy #9
0017B6  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0017B8  3  38           	sec
0017B9  3  E9 02        	sbc #2			; look left 2 pixels.
0017BB  3  8D 4E 0E     	sta dispx		; coords in dispx,dispy.
0017BE  3  4C D2 17     	jmp cangh		; test if we can go there.
0017C1  3               
0017C1  3               ;---------------------------------------------------------
0017C1  3               ; Can go right check.
0017C1  3               ;
0017C1  3               ; Input:
0017C1  3               ;  IX = sprite pointer
0017C1  3               ;
0017C1  3               ; Output:
0017C1  3               ;  A  = 0 is ok, A <>0 is not ok
0017C1  3               ;---------------------------------------------------------
0017C1  3               
0017C1  3               cangr:
0017C1  3  A0 08        	ldy #8
0017C3  3  B1 68        	lda (z80_ix),y		; y coordinate.
0017C5  3  8D 4F 0E     	sta dispy
0017C8  3  A0 09        	ldy #9
0017CA  3  B1 68        	lda (z80_ix),y		; x coordinate.
0017CC  3  18           	clc
0017CD  3  69 10        	adc #16			; look right 16 pixels.
0017CF  3  8D 4E 0E     	sta dispx		; coords in dispx,dispy.
0017D2  3               cangh:
0017D2  3               cangh2:
0017D2  3  A9 03        	lda #3			; default rows to write.
0017D4  3  85 63        	sta z80_b
0017D6  3  AD 4F 0E     	lda dispy		; y position.
0017D9  3  29 07        	and #7			; does x straddle cells?
0017DB  3  D0 02        	bne cangh0		; yes, loop counter is good.
0017DD  3  C6 63        	dec z80_b		; one less row to write.
0017DF  3               cangh0:
0017DF  3  20 FD 18     	jsr tstbl		; get map address.
0017E2  3               cangh1:
0017E2  3  20 FA 17     	jsr lrchk		; standard left/right check.
0017E5  3  F0 01        	beq :+
0017E7  3  60           	rts			; no way through.
0017E8  3               :
0017E8  3  48           	pha
0017E9  3  18           	clc
0017EA  3  A5 86        	lda bufaddr
0017EC  3  69 20        	adc #32			; look down.
0017EE  3  85 86        	sta bufaddr
0017F0  3  90 02        	bcc :+
0017F2  3  E6 87        	inc bufaddr+1
0017F4  3               :
0017F4  3  68           	pla
0017F5  3               
0017F5  3  C6 63        	dec z80_b
0017F7  3  D0 E9        	bne cangh1
0017F9  3  60           	rts
0017FA  3               
0017FA  3               ;-------------------------------------
0017FA  3               ; Check left/right movement is okay.
0017FA  3               ;
0017FA  3               ; Input:
0017FA  3               ;  bufaddr = MAP + x/8 + y/8*32
0017FA  3               ;
0017FA  3               ; Output:
0017FA  3               ;  A  = 0 is ok, A <>0 is not ok
0017FA  3               ;-------------------------------------
0017FA  3               
0017FA  3               lrchk:
0017FA  3  A0 00        	ldy #0
0017FC  3  B1 86        	lda (bufaddr),y		; fetch map cell.
0017FE  3  C9 02        	cmp #WALL 		; is it passable?
001800  3  F0 0A        	beq lrchkx		; no.
001802  3               
001802  3  C9 04        	cmp #FODDER		; fodder has to be dug.
001804  3  F0 06        	beq lrchkx		; not passable.
001806  3  A9 00        	lda #0
001808  3  60           	rts
001809  3               
001809  3               ;--------------------------------------------------------------
001809  3               ; Called by mmenu
001809  3               ;--------------------------------------------------------------
001809  3               
001809  3               always:
001809  3  A9 FF        	lda #255		; report it as okay.
00180B  3  60           	rts
00180C  3               
00180C  3               lrchkx:
00180C  3  A9 01        	lda #1 			; reset all bits.
00180E  3  60           	rts
00180F  3               
00180F  3               
00180F  3               ;--------------------------------------------------------------
00180F  3               ; Check platform or solid item is not in way.
00180F  3               ;
00180F  3               ; Input:
00180F  3               ;  bufaddr = MAP + x/8 + y/8*32
00180F  3               ;
00180F  3               ; Output:
00180F  3               ;  A  = 0 is ok, A <>0 is not ok
00180F  3               ;--------------------------------------------------------------
00180F  3               
00180F  3               plchk:
00180F  3  A0 00        	ldy #0
001811  3  B1 86        	lda (bufaddr),y 	; fetch map cell.
001813  3  C9 02        	cmp #WALL 		; is it passable?
001815  3  F0 F5        	beq lrchkx		; no.
001817  3               
001817  3  C9 04        	cmp #FODDER		; fodder has to be dug.
001819  3  F0 F1        	beq lrchkx		; not passable.
00181B  3               
00181B  3  C9 01        	cmp #PLATFM		; platform is solid.
00181D  3  F0 07        	beq plchkx		; not passable.
00181F  3               
00181F  3  C9 03        	cmp #LADDER		; is it a ladder?
001821  3  F0 E9        	beq lrchkx		; on ladder, deny movement.
001823  3               plchk0:
001823  3  A9 00        	lda #0			; report as ok
001825  3  60           	rts
001826  3               plchkx:
001826  3  AD 4F 0E     	lda dispy		; x coordinate.
001829  3  29 07        	and #7			; position straddling blocks.
00182B  3  F0 DF        	beq lrchkx		; on platform, deny movement.
00182D  3  4C 23 18     	jmp plchk0
001830  3               
001830  3               ;--------------------------------------------------------------
001830  3               ; Check ladder is available.
001830  3               ;
001830  3               ; Input:
001830  3               ;  bufaddr = MAP + x/8 + y/8*32
001830  3               ;
001830  3               ; Output:
001830  3               ;  A  = 0 is ok, A <>0 is not ok
001830  3               ;--------------------------------------------------------------
001830  3               
001830  3               ldchk:
001830  3  A0 00        	ldy #0
001832  3  B1 86        	lda (bufaddr),y 	; fetch cell.
001834  3  C9 03        	cmp #LADDER 		; is it a ladder?
001836  3  F0 03        	beq ldchk1
001838  3  A9 01        	lda #1
00183A  3  60           	rts  			; return with zero flag set accordingly.
00183B  3               ldchk1:
00183B  3  A9 00        	lda #0
00183D  3  60           	rts
00183E  3               
00183E  3               ;--------------------------------------------------------------
00183E  3               ; Touched deadly block check.
00183E  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
00183E  3               ;
00183E  3               ; Input:
00183E  3               ;  IX = sprite address
00183E  3               ;
00183E  3               ; Output:
00183E  3               ;  A  = 0 is ok, A=5 is not ok
00183E  3               ;--------------------------------------------------------------
00183E  3               
00183E  3               tded:
00183E  3  A0 08        	ldy #8
001840  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001842  3  8D 4F 0E     	sta dispy
001845  3  C8           	iny
001846  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001848  3  8D 4E 0E     	sta dispx		; coords in dispx,dispy.
00184B  3  20 FD 18     	jsr tstbl		; get map address.
00184E  3  48           	pha
00184F  3  A9 1F        	lda #31			; default distance to next line down.
001851  3  85 64        	sta z80_e
001853  3  68           	pla
001854  3  C5 63        	cmp z80_b		; is this the required block?
001856  3  D0 01        	bne :+
001858  3  60           	rts			; yes.
001859  3               :
001859  3  E6 86        	inc bufaddr 		; next cell.
00185B  3  D0 02        	bne :+
00185D  3  E6 87        	inc bufaddr+1
00185F  3               :
00185F  3  A0 00        	ldy #0
001861  3  B1 86        	lda (bufaddr),y		; fetch type.
001863  3  C5 63        	cmp z80_b 		; is this deadly/custom?
001865  3  D0 01        	bne :+
001867  3  60           	rts			; yes.
001868  3               :
001868  3  AD 4E 0E     	lda dispx		; horizontal position.
00186B  3  85 62        	sta z80_c 		; store column in c register.
00186D  3  29 07        	and #7			; is it straddling cells?
00186F  3  D0 03        	bne :+
001871  3  4C 85 18     	jmp tded0		; no.
001874  3               :
001874  3  E6 86        	inc bufaddr 		; last cell.
001876  3  D0 02        	bne :+
001878  3  E6 87        	inc bufaddr+1
00187A  3               :
00187A  3  A0 00        	ldy #0
00187C  3  B1 86        	lda (bufaddr),y 	; fetch type.
00187E  3  C5 63        	cmp z80_b		; is this the block?
001880  3  D0 01        	bne :+
001882  3  60           	rts			; yes.
001883  3               :
001883  3  C6 64        	dec z80_e		; one less cell to next row down.
001885  3               tded0:
001885  3  18           	clc 			; point to next row.
001886  3  A5 86        	lda bufaddr
001888  3  65 64        	adc z80_e
00188A  3  85 86        	sta bufaddr
00188C  3  90 02        	bcc :+
00188E  3  E6 87        	inc bufaddr+1
001890  3               :
001890  3  A0 00        	ldy #0
001892  3  B1 86        	lda (bufaddr),y		; fetch left cell block.
001894  3  C5 63        	cmp z80_b		; is this fatal?
001896  3  D0 01        	bne :+
001898  3  60           	rts			; yes.
001899  3               :
001899  3  E6 86        	inc bufaddr 		; next cell.
00189B  3  D0 02        	bne :+
00189D  3  E6 87        	inc bufaddr+1
00189F  3               :
00189F  3  A0 00        	ldy #0
0018A1  3  B1 86        	lda (bufaddr),y 	; fetch type.
0018A3  3  C5 63        	cmp z80_b		; is this fatal?
0018A5  3  D0 01        	bne :+
0018A7  3  60           	rts			; yes.
0018A8  3               :
0018A8  3  A5 62        	lda z80_c		; horizontal position.
0018AA  3  29 07        	and #7			; is it straddling cells?
0018AC  3  D0 03        	bne :+
0018AE  3  4C C0 18     	jmp tded1 		; no.
0018B1  3               :
0018B1  3  E6 86        	inc bufaddr		; last cell.
0018B3  3  D0 02        	bne :+
0018B5  3  E6 87        	inc bufaddr+1
0018B7  3               :
0018B7  3  A0 00        	ldy #0
0018B9  3  B1 86        	lda (bufaddr),y		; fetch type.
0018BB  3  C5 63        	cmp z80_b		; is this fatal?
0018BD  3  D0 01        	bne :+
0018BF  3  60           	rts			; yes.
0018C0  3               :
0018C0  3               tded1:
0018C0  3  AD 4F 0E     	lda dispy		; vertical position.
0018C3  3  29 07        	and #7 			; is it straddling cells?
0018C5  3  D0 01        	bne :+
0018C7  3  60           	rts			; no, job done.
0018C8  3               :
0018C8  3  18           	clc			; point to next row.
0018C9  3  A5 86        	lda bufaddr
0018CB  3  65 64        	adc z80_e
0018CD  3  85 86        	sta bufaddr
0018CF  3  90 02        	bcc :+
0018D1  3  E6 87        	inc bufaddr+1
0018D3  3               :
0018D3  3  A0 00        	ldy #0
0018D5  3  B1 86        	lda (bufaddr),y 	; fetch left cell block.
0018D7  3  C5 63        	cmp z80_b		; is this fatal?
0018D9  3  D0 01        	bne :+
0018DB  3  60           	rts			; yes.
0018DC  3               :
0018DC  3  E6 86        	inc bufaddr		; next cell.
0018DE  3  D0 02        	bne :+
0018E0  3  E6 87        	inc bufaddr+1
0018E2  3               :
0018E2  3  A0 00        	ldy #0
0018E4  3  B1 86        	lda (bufaddr),y 	; fetch type.
0018E6  3  C5 63        	cmp z80_b		; is this fatal?
0018E8  3  D0 01        	bne :+
0018EA  3  60           	rts			; yes.
0018EB  3               :
0018EB  3  A5 62        	lda z80_c		; horizontal position.
0018ED  3  29 07        	and #7			; is it straddling cells?
0018EF  3  D0 01        	bne :+
0018F1  3  60           	rts			; no.
0018F2  3               :
0018F2  3  E6 86        	inc bufaddr		; last cell.
0018F4  3  D0 02        	bne :+
0018F6  3  E6 87        	inc bufaddr+1
0018F8  3               :
0018F8  3  A0 00        	ldy #0
0018FA  3  B1 86        	lda (bufaddr),y		; fetch final type.
0018FC  3  60           	rts 			; return with final type in accumulator.
0018FD  3               
0018FD  3               ;---------------------------------------------------
0018FD  3               ; Fetch block type at (dispx, dispy).
0018FD  3               ;
0018FD  3               ; Output:
0018FD  3               ;  A = block type
0018FD  3               ;---------------------------------------------------
0018FD  3               
0018FD  3               tstbl:
0018FD  3  AD 4F 0E     	lda dispy 		; fetch y coord.
001900  3  4A           	lsr a			; bufaddr = y/8
001901  3  4A           	lsr a
001902  3  4A           	lsr a
001903  3  85 86        	sta bufaddr
001905  3  A9 00        	lda #0
001907  3  85 87        	sta bufaddr+1
001909  3               
001909  3  06 86        	asl bufaddr  		; bufaddr = y/8 * 32
00190B  3  26 87        	rol bufaddr+1
00190D  3  06 86        	asl bufaddr
00190F  3  26 87        	rol bufaddr+1
001911  3  06 86        	asl bufaddr
001913  3  26 87        	rol bufaddr+1
001915  3  06 86        	asl bufaddr
001917  3  26 87        	rol bufaddr+1
001919  3  06 86        	asl bufaddr
00191B  3  26 87        	rol bufaddr+1
00191D  3               
00191D  3  AD 4E 0E     	lda dispx		; x/8
001920  3  4A           	lsr a
001921  3  4A           	lsr a
001922  3  4A           	lsr a
001923  3               
001923  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
001924  3  65 86        	adc bufaddr
001926  3  69 00        	adc #<MAP
001928  3  85 86        	sta bufaddr
00192A  3  A5 87        	lda bufaddr+1
00192C  3  69 03        	adc #>MAP
00192E  3  85 87        	sta bufaddr+1
001930  3               
001930  3  A0 00        	ldy #0
001932  3  B1 86        	lda (bufaddr),y 	; fetch byte there.
001934  3  60           	rts
001935  3               
001935  3               
001935  3               ;-------------------------------------------------------------------
001935  3               ; Jump - if we can.
001935  3               ; Requires initial speed to be set up in accumulator prior to call.
001935  3               ;
001935  3               ; Input:
001935  3               ;  IX = sprite address
001935  3               ;-------------------------------------------------------------------
001935  3               
001935  3               jump:
001935  3  A0 0D        	ldy #13
001937  3  B1 68        	lda (z80_ix),y		; jump table low.
001939  3  A0 0E        	ldy #14
00193B  3  11 68        	ora (z80_ix),y		; jump table high.
00193D  3  F0 01        	beq :+
00193F  3  60           	rts			; already in the air.
001940  3               :
001940  3  A9 19        	lda #>jtab
001942  3  A0 0E        	ldy #14
001944  3  91 68        	sta (z80_ix),y		; set jump high.
001946  3  A9 4D        	lda #<jtab		; jump table start.
001948  3  A0 0D        	ldy #13
00194A  3  91 68        	sta (z80_ix),y		; set jump low.
00194C  3  60           	rts
00194D  3               
00194D  3               ; Jump table.
00194D  3               
00194D  3               jtab:
00194D  3  F8 FA FC     	.byte 248,250,252
001950  3  FE FE FF     	.byte 254,254,255
001953  3  FF FF 00 00  	.byte 255,255,0,0
001957  3  00 01 01 01  	.byte 0,1,1,1,2,2
00195B  3  02 02        
00195D  3  04 06 08 08  	.byte 4,6,8,8,8,99
001961  3  08 63        
001963  3               
001963  3               ;------------------------------------------------
001963  3               ; Random numbers code.
001963  3               ; Pseudo-random number generator, 8-bit.
001963  3               ;
001963  3               ; Output:
001963  3               ;  RND = random number
001963  3               ;------------------------------------------------
001963  3               
001963  3               random:
001963  3  AD 61 13     	lda seed		; get last random number.
001966  3  0A           	asl a
001967  3  0A           	asl a
001968  3  18           	clc
001969  3  6D 61 13     	adc seed
00196C  3  18           	clc
00196D  3  69 45        	adc #$45
00196F  3  8D 61 13     	sta seed		; store new seed.
001972  3  8D 46 0E     	sta varrnd		; return number in variable.
001975  3  60           	rts
001976  3               
001976  3               ;--------------------------------------------------------
001976  3               ; Keys
001976  3               ;
001976  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
001976  3               ;             ||||||||
001976  3               ;             |||||||+> Right    KEY 0  - X
001976  3               ;             ||||||+-> Left     KEY 1  - Z
001976  3               ;             |||||+--> Down     KEY 2  - .
001976  3               ;             ||||+---> Up       KEY 3  - ;
001976  3               ;             |||+----> Fire1    KEY 4  - SPC
001976  3               ;             ||+-----> Fire2    KEY 5  - Q
001976  3               ;             |+------> Fire3    KEY 6  - P
001976  3               ;             +-------> Not used
001976  3               ;
001976  3               ;                       Option1  KEY 7  - 1
001976  3               ;                       Option2  KEY 8  - 2
001976  3               ;                       Option3  KEY 9  - 3
001976  3               ;                       Option4  KEY 10 - 4
001976  3               ;--------------------------------------------------------
001976  3               
001976  3               ;              X   Z   .   ;  SPC  Q   P
001976  3  42 61 68 48  keys:   .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
00197A  3  62 10 37     
00197D  3  30 31 11 12          .byte $30,$31,$11,$12                   ; menu options.
001981  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
001981  3               ;        .byte $21,$11,$01,$92                   ; menu options.
001981  3               
001981  3  42 61 68 48  jkeys:  .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
001985  3  62 10 37     
001988  3  30 31 11 12          .byte $30,$31,$11,$12                   ; menu options.
00198C  3               ;jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
00198C  3               ;        .byte $21,$11,$01,$92                   ; menu options.
00198C  3               
00198C  3               ;--------------------------------------------------------
00198C  3               ; Keyboard test routine.
00198C  3               ;
00198C  3               ; Input:
00198C  3               ;  A = key to read, high nibble=row and low nibble=col
00198C  3               ;
00198C  3               ; Output:
00198C  3               ;  carry clr = key pressed
00198C  3               ;  carry set = key not pressed
00198C  3               ;--------------------------------------------------------
00198C  3               
00198C  3               ktest:
00198C  3  85 61        	sta z80_a		; save key
00198E  3  98           	tya
00198F  3  48           	pha
001990  3               
001990  3               ; _BEEB keyboard read
001990  3  A5 61        	lda z80_a
001992  3  49 80        	eor #$80		; _BEEB just look for this key
001994  3  AA           	tax
001995  3               
001995  3  A9 79        	lda #$79
001997  3  20 F4 FF     	jsr OSBYTE
00199A  3               
00199A  3  8A           	txa
00199B  3  30 04        	bmi pressed 	; _BEEB X is negative if key is pressed
00199D  3               
00199D  3  38           	sec			; key not pressed
00199E  3  68           	pla
00199F  3  A8           	tay
0019A0  3  60           	rts
0019A1  3               
0019A1  3               pressed:
0019A1  3  18           	clc			; key pressed
0019A2  3  68           	pla
0019A3  3  A8           	tay
0019A4  3  60           	rts
0019A5  3               
0019A5  3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
0019A9  3  10 20        
0019AB  3               
0019AB  3               ;-------------------------------------------------------
0019AB  3               ; Joystick and keyboard reading routines.
0019AB  3               ;
0019AB  3               ; contrl = 0, Keyboard
0019AB  3               ;          1, JoyKeyb
0019AB  3               ;          2, JoyMMC
0019AB  3               ;-------------------------------------------------------
0019AB  3               
0019AB  3               joykey:
0019AB  3  AD 1D 0E     	lda contrl 		; control flag.
0019AE  3  C9 01        	cmp #1
0019B0  3  D0 03        	bne :+
0019B2  3  4C D0 19     	jmp joyjoy 		; read keyboard joystick
0019B5  3               :
0019B5  3  C9 02        	cmp #2
0019B7  3  D0 03        	bne :+
0019B9  3  4C E8 19     	jmp joysin 		; read MMC joystick.
0019BC  3               :
0019BC  3               ; Keyboard controls.
0019BC  3               
0019BC  3  A9 00        	lda #0		 	; zero reading.
0019BE  3  85 64        	sta z80_e
0019C0  3               
0019C0  3  A0 06        	ldy #6	 		; address of last key.
0019C2  3               joyke0:
0019C2  3  B9 76 19     	lda keys,y 		; get key from table.
0019C5  3  20 8C 19     	jsr ktest		; being pressed?
0019C8  3  26 64        	rol z80_e 		; rotate into reading.
0019CA  3               
0019CA  3  88           	dey		 	; next key.
0019CB  3  10 F5        	bpl joyke0 		; repeat for all keys.
0019CD  3  4C E1 19     	jmp joyjo1 		; store the value.
0019D0  3               
0019D0  3               ; Keyboard joystick controls.
0019D0  3               
0019D0  3               joyjoy:
0019D0  3  A9 00        	lda #0		 	; zero reading.
0019D2  3  85 64        	sta z80_e
0019D4  3               
0019D4  3  A0 06        	ldy #6	 		; address of last key.
0019D6  3               joyjo3:
0019D6  3  B9 81 19     	lda jkeys,y 		; get key from table.
0019D9  3  20 8C 19     	jsr ktest		; being pressed?
0019DC  3  26 64        	rol z80_e 		; rotate into reading.
0019DE  3               
0019DE  3  88           	dey		 	; next key.
0019DF  3  10 F5        	bpl joyjo3 		; repeat for all keys.
0019E1  3               joyjo1:
0019E1  3  A5 64        	lda z80_e 		; copy e register to accumulator.
0019E3  3               joyjo2:
0019E3  3  8D 1E 0E     	sta joyval		; remember value.
0019E6  3  60           	rts
0019E7  3               
0019E7  3               
0019E7  3               ; AtoMMC joystick controls.
0019E7  3               ; _BEEB TODO
0019E7  3               ; Set PORTB direction
0019E7  3               
0019E7  3               joyinit:
0019E7  3               .if 0
0019E7  3               	lda #$ff   		; Write value to latch, bits 0-7 input
0019E7  3               	sta DatReg
0019E7  3               	jsr interwritedelay
0019E7  3               	lda #$a1   		; Write direction in latch to PORTB
0019E7  3               	sta CmdReg
0019E7  3               
0019E7  3               wait_until_not_busy:
0019E7  3               	lda CmdReg
0019E7  3               	bmi wait_until_not_busy
0019E7  3               .endif
0019E7  3  60           	rts
0019E8  3               
0019E8  3               ; Get PORTB value
0019E8  3               
0019E8  3               joysin:
0019E8  3               .if 0
0019E8  3               	lda #$a2   		; Read value PORTB in latch
0019E8  3               	sta CmdReg
0019E8  3               	jsr interwritedelay
0019E8  3               
0019E8  3               	lda DatReg		; Read joystick status
0019E8  3               	and #$7f
0019E8  3               	sta joyval
0019E8  3               	sta $f0
0019E8  3               
0019E8  3               	lda keys+5		; check fire2
0019E8  3               	jsr ktest
0019E8  3               	bcs :+
0019E8  3               	lda joyval
0019E8  3               	and #$df
0019E8  3               	sta joyval
0019E8  3               :
0019E8  3               	lda keys+6		; check fire3
0019E8  3               	jsr ktest
0019E8  3               	bcs :+
0019E8  3               	lda joyval
0019E8  3               	and #$bf
0019E8  3               	sta joyval
0019E8  3               :
0019E8  3               	rts
0019E8  3               
0019E8  3               ; Short delay
0019E8  3               ; Enough to intersperse 2 writes to the FATPIC.
0019E8  3               
0019E8  3               interwritedelay:
0019E8  3               	lda  #8
0019E8  3               	sec
0019E8  3               loop:
0019E8  3               	sbc  #1
0019E8  3               	bne  loop
0019E8  3               .endif
0019E8  3  60           	rts
0019E9  3               
0019E9  3               ;tmp_byte:   .byte 0
0019E9  3               
0019E9  3               ;---------------------------------------------------------------
0019E9  3               ; Getkey in column,row format
0019E9  3               ;
0019E9  3               ; Output:
0019E9  3               ;  A = high nibble=row and low nibble=column key in matrix
0019E9  3               ;---------------------------------------------------------------
0019E9  3               
0019E9  3               kget:
0019E9  3  8E 49 16     	stx xtmp
0019EC  3               
0019EC  3               kget1:
0019EC  3  A9 79        	lda #$79			; _BEEB read keyboard with OSBYTE &79
0019EE  3  A2 01        	ldx #$01
0019F0  3  20 F4 FF     	jsr OSBYTE
0019F3  3               
0019F3  3  E0 FF        	cpx #$ff
0019F5  3  F0 F5        	beq kget1
0019F7  3               
0019F7  3  8A           	txa
0019F8  3               
0019F8  3  AE 49 16     	ldx xtmp
0019FB  3  60           	rts
0019FC  3               
0019FC  3               ;---------------------------------------------------------------
0019FC  3               ; Display message.
0019FC  3               ;
0019FC  3               ; Input:
0019FC  3               ;  A = message number
0019FC  3               ;---------------------------------------------------------------
0019FC  3               
0019FC  3               dmsg:
0019FC  3  AA           	tax
0019FD  3  A9 04        	lda #<msgdat		; pointer to messages.
0019FF  3  85 66        	sta z80_l
001A01  3  A9 36        	lda #>msgdat
001A03  3  85 67        	sta z80_h
001A05  3  20 35 1B     	jsr getwrd		; get message number.
001A08  3               dmsg3:
001A08  3  20 1C 1B     	jsr preprt		; pre-printing stuff.
001A0B  3  20 76 13     	jsr checkx		; make sure we"re in a printable range.
001A0E  3  AD 5E 1A     	lda prtmod		; print mode.
001A11  3  D0 4C        	bne bmsg1		; no, double-height text.
001A13  3               dmsg0:
001A13  3  A5 67        	lda z80_h		; store string pointer.
001A15  3  48           	pha
001A16  3  A5 66        	lda z80_l
001A18  3  48           	pha
001A19  3               
001A19  3  A0 00        	ldy #0
001A1B  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
001A1D  3  29 7F        	and #127		; remove any end marker.
001A1F  3  C9 0D        	cmp #13
001A21  3  F0 24        	beq dmsg1
001A23  3  20 19 15     	jsr pchar		; display character.
001A26  3  20 02 1B     	jsr nexpos 		; display position.
001A29  3  D0 03        	bne dmsg2		; not on a new line.
001A2B  3  20 0B 1B     	jsr nexlin		; next line down.
001A2E  3               dmsg2:
001A2E  3  68           	pla			; retrieve string pointer
001A2F  3  85 66        	sta z80_l
001A31  3  68           	pla
001A32  3  85 67        	sta z80_h
001A34  3               
001A34  3  A0 00        	ldy #0
001A36  3  B1 66        	lda (z80_hl),y		; fetch last character.
001A38  3  0A           	asl a  			; was it the end?
001A39  3  90 03        	bcc :+
001A3B  3  4C BE 13     	jmp dscor2		; yes, job done.
001A3E  3               :
001A3E  3  E6 66        	inc z80_l		; next character to display.
001A40  3  D0 02        	bne :+
001A42  3  E6 67        	inc z80_h
001A44  3               :
001A44  3  4C 13 1A     	jmp dmsg0
001A47  3               dmsg1:
001A47  3  EE 4F 0E     	inc dispy
001A4A  3  AD 4F 0E     	lda dispy
001A4D  3  C9 18        	cmp #24
001A4F  3  90 05        	bcc dmsg4
001A51  3  A9 00        	lda #0
001A53  3  8D 4F 0E     	sta dispy
001A56  3               dmsg4:
001A56  3  A9 00        	lda #0
001A58  3  8D 4E 0E     	sta dispx
001A5B  3  4C 2E 1A     	jmp dmsg2
001A5E  3               
001A5E  3  00           prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
001A5F  3               
001A5F  3               ;----------------------------------------------------------
001A5F  3               ; Display message in big text.
001A5F  3               ;
001A5F  3               ; Input:
001A5F  3               ;  HL = string pointer
001A5F  3               ;----------------------------------------------------------
001A5F  3               
001A5F  3               bmsg1:
001A5F  3  A0 00        	ldy #0
001A61  3  B1 66        	lda (z80_hl),y 		; get character to display.
001A63  3  29 7F        	and #127		; only want 7 bits.
001A65  3  C9 0D        	cmp #13
001A67  3  F0 13        	beq bmsg2
001A69  3  20 96 1A     	jsr bchar 		; display big char.
001A6C  3               bmsg3:
001A6C  3  A0 00        	ldy #0
001A6E  3  B1 66        	lda (z80_hl),y 		; look at last character.
001A70  3  48           	pha
001A71  3  E6 66        	inc z80_l 		; next character in list.
001A73  3  D0 02        	bne :+
001A75  3  E6 67        	inc z80_h
001A77  3               :
001A77  3  68           	pla
001A78  3  0A           	asl a  			; was terminator flag set?
001A79  3  90 E4        	bcc bmsg1		; no, keep going.
001A7B  3               :
001A7B  3  60           	rts
001A7C  3               bmsg2:
001A7C  3  A9 00        	lda #0
001A7E  3  8D 4E 0E     	sta dispx
001A81  3  EE 4F 0E     	inc dispy
001A84  3  EE 4F 0E     	inc dispy
001A87  3  AD 4F 0E     	lda dispy
001A8A  3  C9 17        	cmp #23
001A8C  3  90 DE        	bcc bmsg3
001A8E  3  A9 00        	lda #0
001A90  3  8D 4F 0E     	sta dispy
001A93  3  4C 6C 1A     	jmp bmsg3
001A96  3               
001A96  3               ;----------------------------------------------------------
001A96  3               ; Big character display.
001A96  3               ;
001A96  3               ; Input:
001A96  3               ;  A = character
001A96  3               ;----------------------------------------------------------
001A96  3               
001A96  3               bchar:
001A96  3  85 64        	sta z80_e		; save char in lb
001A98  3  A9 00        	lda #0
001A9A  3  85 65        	sta z80_d		; reset hb
001A9C  3               
001A9C  3  06 64        	asl z80_e 		; multiply char by 8.
001A9E  3  26 65        	rol z80_d
001AA0  3  06 64        	asl z80_e
001AA2  3  26 65        	rol z80_d
001AA4  3  06 64        	asl z80_e
001AA6  3  26 65        	rol z80_d		; de = a*8
001AA8  3               
001AA8  3  18           	clc			; de = FontPtr + a*8
001AA9  3  A5 64        	lda z80_e
001AAB  3  6D 52 0E     	adc FontPtr 		; address of font.
001AAE  3  85 64        	sta z80_e
001AB0  3  A5 65        	lda z80_d
001AB2  3  6D 53 0E     	adc FontPtr+1
001AB5  3  85 65        	sta z80_d
001AB7  3               
001AB7  3  20 BB 14     	jsr gprad 		; get screen address.
001ABA  3               
001ABA  3  A2 00        	ldx #0			; height of character in font.
001ABC  3               bchar0:
001ABC  3  A0 00        	ldy #0
001ABE  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
001AC0  3               
001AC0  3  49 00        	eor #TxtInvert		; Invert
001AC2  3               
001AC2  3  91 80        	sta (scraddr),y
001AC4  3  48           	pha
001AC5  3  20 2D 1E     	jsr nline 		; next line down.
001AC8  3  68           	pla
001AC9  3  91 80        	sta (scraddr),y
001ACB  3  20 2D 1E     	jsr nline 		; next line down.
001ACE  3               
001ACE  3  18           	clc
001ACF  3  E6 64        	inc z80_e 		; next line of font.
001AD1  3  D0 02        	bne :+
001AD3  3  E6 65        	inc z80_d
001AD5  3               :
001AD5  3  E8           	inx
001AD6  3  E0 08        	cpx #8
001AD8  3  D0 E2        	bne bchar0
001ADA  3               	
001ADA  3  20 02 1B     	jsr nexpos		; display position.
001ADD  3  D0 06        	bne bchar2 		; not on a new line.
001ADF  3               bchar3:
001ADF  3  EE 4F 0E     	inc dispy
001AE2  3  20 0B 1B     	jsr nexlin 		; next line check.
001AE5  3               bchar2:
001AE5  3  4C BE 13     	jmp dscor2		; tidy up line and column variables.
001AE8  3               
001AE8  3               
001AE8  3               ;-------------------------------------------------
001AE8  3               ; Display a character.
001AE8  3               ;
001AE8  3               ; Input:
001AE8  3               ;  A = character
001AE8  3               ;-------------------------------------------------
001AE8  3               
001AE8  3               achar:
001AE8  3  85 63        	sta z80_b 		; copy to b.
001AEA  3  20 1C 1B     	jsr preprt 		; get ready to print.
001AED  3  A5 63        	lda z80_b		; character in accumulator.
001AEF  3  AE 5E 1A     	ldx prtmod 		; print mode.
001AF2  3  F0 03        	beq :+
001AF4  3  4C 96 1A     	jmp bchar 		; no, double-height text.
001AF7  3               :
001AF7  3  20 19 15     	jsr pchar 		; display character.
001AFA  3  20 02 1B     	jsr nexpos 		; display position.
001AFD  3  F0 E0        	beq bchar3		; next line down.
001AFF  3  4C E5 1A     	jmp bchar2 		; tidy up.
001B02  3               
001B02  3               
001B02  3               ;-------------------------------------------------
001B02  3               ; Get next print column position.
001B02  3               ;-------------------------------------------------
001B02  3               
001B02  3               nexpos:
001B02  3  EE 4E 0E     	inc dispx		; move along one position.
001B05  3  AD 4E 0E     	lda dispx 		; get coordinate.
001B08  3  29 1F        	and #31
001B0A  3  60           	rts 			; return with status in zero flag.
001B0B  3               
001B0B  3               ;-------------------------------------------------
001B0B  3               ; Get next print line position.
001B0B  3               ;-------------------------------------------------
001B0B  3               
001B0B  3               nexlin:
001B0B  3  EE 4F 0E     	inc dispy 		; newline.
001B0E  3  AD 4F 0E     	lda dispy		; vertical position.
001B11  3  C9 18        	cmp #24			; past screen edge?
001B13  3  B0 01        	bcs :+
001B15  3  60           	rts			; no, still okay.
001B16  3               :
001B16  3  A9 00        	lda #0			; restart at top.
001B18  3  8D 4F 0E     	sta dispy
001B1B  3  60           	rts
001B1C  3               
001B1C  3               ;--------------------------------------------------------
001B1C  3               ; Pre-print preliminaries.
001B1C  3               ;--------------------------------------------------------
001B1C  3               
001B1C  3               preprt:
001B1C  3  AD 52 0E     	lda FontPtr		; font pointer.
001B1F  3  8D 74 13     	sta grbase		; set up graphics base.
001B22  3  AD 53 0E     	lda FontPtr+1
001B25  3  8D 75 13     	sta grbase+1
001B28  3               prescr:
001B28  3  AD 43 0E     	lda charx 		; display coordinates.
001B2B  3  8D 4E 0E     	sta dispx		; set up general coordinates.
001B2E  3  AD 44 0E     	lda chary
001B31  3  8D 4F 0E     	sta dispy
001B34  3  60           	rts
001B35  3               
001B35  3               ;--------------------------------------------------------------
001B35  3               ; Get messagenr x in hl
001B35  3               ;
001B35  3               ; Input:
001B35  3               ;  HL = pointer to message list
001B35  3               ;  X  = message number.
001B35  3               ;--------------------------------------------------------------
001B35  3               
001B35  3               getwrd:
001B35  3  E0 00        	cpx #0
001B37  3  D0 01        	bne:+ 			; first word in list?
001B39  3  60           	rts 			; yep, don't search.
001B3A  3               :
001B3A  3  A0 00        	ldy #0
001B3C  3               getwd0:
001B3C  3  B1 66        	lda (z80_hl),y
001B3E  3  48           	pha
001B3F  3  E6 66        	inc z80_l
001B41  3  D0 02        	bne :+
001B43  3  E6 67        	inc z80_h
001B45  3               :
001B45  3  68           	pla
001B46  3  C9 80        	cmp #128		; found end?
001B48  3  30 F2        	bmi getwd0		; no, carry on.
001B4A  3  CA           	dex			; until we have right number.
001B4B  3  D0 EF        	bne getwd0
001B4D  3  60           	rts
001B4E  3               
001B4E  3               ;-----------------------------------------------------------
001B4E  3               ; Bubble sort.
001B4E  3               ;-----------------------------------------------------------
001B4E  3               
001B4E  3               bsort:
001B4E  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
001B50  3  8D 86 1B     	sta qscnt
001B53  3               
001B53  3  A9 96        	lda #<sprtab 		; sprite table.
001B55  3  85 68        	sta z80_x
001B57  3  A9 22        	lda #>sprtab
001B59  3  85 69        	sta z80_i
001B5B  3               bsort0:
001B5B  3  A0 00        	ldy #0
001B5D  3  B1 68        	lda (z80_ix),y 		; first sprite type.
001B5F  3  C9 FF        	cmp #255 		; is it switched off?
001B61  3  F0 32        	beq swemp		; yes, may need to switch another in here.
001B63  3               
001B63  3  A0 11        	ldy #TABSIZ
001B65  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
001B67  3  C9 FF        	cmp #255 		; is it enabled?
001B69  3  F0 0A        	beq bsort2 		; no, nothing to swap.
001B6B  3               
001B6B  3  A0 14        	ldy #TABSIZ+3
001B6D  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
001B6F  3  A0 03        	ldy #3
001B71  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
001B73  3  90 12        	bcc bsort1		; next sprite is higher - may need to switch.
001B75  3               bsort2:
001B75  3  18           	clc
001B76  3  A5 68        	lda z80_x
001B78  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
001B7A  3  85 68        	sta z80_x
001B7C  3  90 02        	bcc :+
001B7E  3  E6 69        	inc z80_i
001B80  3               :
001B80  3  CE 86 1B     	dec qscnt 
001B83  3  D0 D6        	bne bsort0		; repeat for remaining sprites.
001B85  3  60           	rts
001B86  3               
001B86  3  00           qscnt:	.byte 0
001B87  3               
001B87  3               bsort1:
001B87  3  A0 11        	ldy #TABSIZ
001B89  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
001B8B  3  C9 FF        	cmp #255		; is it enabled?
001B8D  3  F0 E6        	beq bsort2		; no, nothing to swap.
001B8F  3  20 A3 1B     	jsr swspr		; swap positions.
001B92  3  4C 75 1B     	jmp bsort2
001B95  3               swemp:
001B95  3  A0 11        	ldy #TABSIZ
001B97  3  B1 68        	lda (z80_ix),y		; next table entry.
001B99  3  C9 FF        	cmp #255		; is that one on?
001B9B  3  F0 D8        	beq bsort2		; no, nothing to swap.
001B9D  3  20 A3 1B     	jsr swspr		; swap positions.
001BA0  3  4C 75 1B     	jmp bsort2
001BA3  3               
001BA3  3               ; Swap sprites.
001BA3  3               
001BA3  3               swspr:
001BA3  3  A5 68        	lda z80_x		; table address 
001BA5  3  85 64        	sta z80_e		; copy to de pair.
001BA7  3  85 66        	sta z80_l		; copy to hl pair.
001BA9  3  A5 69        	lda z80_i
001BAB  3  85 67        	sta z80_h
001BAD  3  85 65        	sta z80_d
001BAF  3               
001BAF  3  18           	clc
001BB0  3  A5 66        	lda z80_l
001BB2  3  69 11        	adc #TABSIZ		; distance to second entry.
001BB4  3  85 66        	sta z80_l
001BB6  3  90 02        	bcc :+
001BB8  3  E6 67        	inc z80_h
001BBA  3               :
001BBA  3  A9 11        	lda #TABSIZ		; bytes to swap.
001BBC  3  85 63        	sta z80_b
001BBE  3  A0 00        	ldy #0
001BC0  3               swspr0:
001BC0  3  B1 66        	lda (z80_hl),y		; fetch second byte.
001BC2  3  48           	pha
001BC3  3  B1 64        	lda (z80_de),y 		; fetch first byte.
001BC5  3  91 66        	sta (z80_hl),y 		; copy to second.
001BC7  3  68           	pla
001BC8  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
001BCA  3               
001BCA  3  E6 64        	inc z80_e 		; next byte.
001BCC  3  D0 02        	bne :+	
001BCE  3  E6 65        	inc z80_d
001BD0  3               :
001BD0  3  E6 66        	inc z80_l 		; next byte.
001BD2  3  D0 02        	bne :+
001BD4  3  E6 67        	inc z80_h
001BD6  3               :
001BD6  3  C6 63        	dec z80_b
001BD8  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
001BDA  3  60           	rts
001BDB  3               
001BDB  3               ;----------------------------------------------------
001BDB  3               ; Process sprites.
001BDB  3               ;----------------------------------------------------
001BDB  3               
001BDB  3               pspr:
001BDB  3  A9 0C        	lda #NUMSPR		; sprites to process.
001BDD  3  8D 04 1C     	sta sprptr
001BE0  3               
001BE0  3  A9 96        	lda #<sprtab 		; sprite table.
001BE2  3  85 68        	sta z80_x
001BE4  3  A9 22        	lda #>sprtab
001BE6  3  85 69        	sta z80_i
001BE8  3               pspr1:
001BE8  3  A0 00        	ldy #0
001BEA  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
001BEC  3  C9 09        	cmp #9 			; within range of sprite types?
001BEE  3  B0 03        	bcs :+
001BF0  3  20 05 1C     	jsr pspr2 		; yes, process this one.
001BF3  3               :
001BF3  3  18           	clc
001BF4  3  A5 68        	lda z80_x
001BF6  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
001BF8  3  85 68        	sta z80_x
001BFA  3  90 02        	bcc :+
001BFC  3  E6 69        	inc z80_i		; next sprite.
001BFE  3               :
001BFE  3  CE 04 1C     	dec sprptr 		; repeat for remaining sprites.
001C01  3  D0 E5        	bne pspr1
001C03  3  60           	rts
001C04  3               
001C04  3  00           sprptr:	.byte 0
001C05  3               
001C05  3               pspr2:
001C05  3  A5 68        	lda z80_x 		; store original sprite pointer.
001C07  3  8D 52 1C     	sta ogptr
001C0A  3  A5 69        	lda z80_i
001C0C  3  8D 53 1C     	sta ogptr+1
001C0F  3  20 1D 1C     	jsr pspr3		; do the routine.
001C12  3               rtorg:
001C12  3  AD 52 1C     	lda ogptr 		; restore original pointer to sprite.
001C15  3  85 68        	sta z80_x
001C17  3  AD 53 1C     	lda ogptr+1
001C1A  3  85 69        	sta z80_i
001C1C  3               rtorg0:
001C1C  3  60           	rts
001C1D  3               
001C1D  3               pspr3:
001C1D  3  A9 54        	lda #<evtyp0		; sprite type events list.
001C1F  3  85 66        	sta z80_l
001C21  3  A9 1C        	lda #>evtyp0
001C23  3  85 67        	sta z80_h
001C25  3               pspr4:
001C25  3  B1 68        	lda (z80_ix),y
001C27  3  0A           	asl a			; double accumulator.
001C28  3  18           	clc
001C29  3  65 66        	adc z80_l
001C2B  3  85 66        	sta z80_l
001C2D  3  90 02        	bcc :+
001C2F  3  E6 67        	inc z80_h
001C31  3               :
001C31  3  B1 66        	lda (z80_hl),y
001C33  3  85 64        	sta z80_e 		; copy to de.
001C35  3  48           	pha
001C36  3               
001C36  3  E6 66        	inc z80_l 		; next byte of address.
001C38  3  D0 02        	bne :+
001C3A  3  E6 67        	inc z80_h
001C3C  3               :
001C3C  3  B1 66        	lda (z80_hl),y 		; address high.
001C3E  3  85 65        	sta z80_d
001C40  3               
001C40  3  48           	pha	 		; swap address into hl.
001C41  3  A5 67        	lda z80_h
001C43  3  85 65        	sta z80_d
001C45  3  68           	pla
001C46  3  85 67        	sta z80_h
001C48  3  68           	pla
001C49  3  85 66        	sta z80_l
001C4B  3  A5 66        	lda z80_l
001C4D  3  85 64        	sta z80_e
001C4F  3               	
001C4F  3  6C 66 00     	jmp (z80_hl) 		; go there.
001C52  3               
001C52  3  00 00        ogptr:	.word 0			; original sprite pointer.
001C54  3               
001C54  3               ; Address of each sprite type's routine.
001C54  3               
001C54  3  97 23        evtyp0:	.word evnt00
001C56  3  F5 2B        evtyp1:	.word evnt01
001C58  3  15 30        evtyp2:	.word evnt02
001C5A  3  1E 33        evtyp3:	.word evnt03
001C5C  3  89 33        evtyp4:	.word evnt04
001C5E  3  68 34        evtyp5:	.word evnt05
001C60  3  69 34        evtyp6:	.word evnt06
001C62  3  6A 34        evtyp7:	.word evnt07
001C64  3  6B 34        evtyp8:	.word evnt08
001C66  3               
001C66  3               ;--------------------------------------------------------------
001C66  3               ; Display sprites.
001C66  3               ;
001C66  3               ; Input:
001C66  3               ;  IX = sprite table
001C66  3               ;--------------------------------------------------------------
001C66  3               
001C66  3               dspr:
001C66  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
001C68  3  8D 19 1D     	sta sprcnt
001C6B  3               
001C6B  3               dspr0:
001C6B  3  A0 00        	ldy #var_Type
001C6D  3  B1 68        	lda (z80_ix),y 		; get sprite type.
001C6F  3  C9 FF        	cmp #255 			; is it enabled?
001C71  3  D0 46        	bne dspr1 			; yes, it needs deleting.
001C73  3               
001C73  3               dspr5:
001C73  3  A0 05        	ldy #var_newType
001C75  3  B1 68        	lda (z80_ix),y 		; new type.
001C77  3  C9 FF        	cmp #255			; is it enabled?
001C79  3  F0 03        	beq dspr2			; no, skip
001C7B  3  4C 08 1D     	jmp dspr3 			; yes, it needs drawing.
001C7E  3               
001C7E  3               dspr2:
001C7E  3  A0 05        	ldy #var_newType
001C80  3  B1 68        	lda (z80_ix),y 		; copy new type.
001C82  3  A0 00        	ldy #var_Type
001C84  3  91 68        	sta (z80_ix),y
001C86  3  A0 06        	ldy #var_newImage
001C88  3  B1 68        	lda (z80_ix),y 		; copy new image number.
001C8A  3  A0 01        	ldy #var_Image
001C8C  3  91 68        	sta (z80_ix),y
001C8E  3  A0 07        	ldy #var_newFrame
001C90  3  B1 68        	lda (z80_ix),y 		; copy new frame.
001C92  3  A0 02        	ldy #var_Frame
001C94  3  91 68        	sta (z80_ix),y
001C96  3  A0 08        	ldy #var_newY
001C98  3  B1 68        	lda (z80_ix),y 		; copy new y.
001C9A  3  A0 03        	ldy #var_Y
001C9C  3  91 68        	sta (z80_ix),y
001C9E  3  A0 09        	ldy #var_newX
001CA0  3  B1 68        	lda (z80_ix),y 		; copy new x.
001CA2  3  A0 04        	ldy #var_X
001CA4  3  91 68        	sta (z80_ix),y
001CA6  3               
001CA6  3  18           	clc
001CA7  3  A5 68        	lda z80_x
001CA9  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
001CAB  3  85 68        	sta z80_x
001CAD  3  A5 69        	lda z80_i
001CAF  3  69 00        	adc #0
001CB1  3  85 69        	sta z80_i 			; next sprite.
001CB3  3  CE 19 1D     	dec sprcnt
001CB6  3  D0 B3        	bne dspr0			; repeat for remaining sprites.
001CB8  3  60           	rts
001CB9  3               
001CB9  3               dspr1:
001CB9  3               	; _BEEB clipping code copied from CPC Engine
001CB9  3  A0 03        	ldy #var_Y
001CBB  3  B1 68        	lda (z80_ix), y		; old x coord
001CBD  3  C9 B9        	cmp #SpriteMaxY     ; beyond maximum?
001CBF  3  B0 B2        	bcs dspr5			; yes, don't delete it.
001CC1  3               
001CC1  3  A0 05        	ldy #var_newType
001CC3  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
001CC5  3  C9 FF        	cmp #255			; is this enabled?
001CC7  3  D0 06        	bne dspr4 			; yes, display both.
001CC9  3               
001CC9  3               dspr6:
001CC9  3  20 A9 1D     	jsr sspria 			; show single sprite.
001CCC  3  4C 7E 1C     	jmp dspr2
001CCF  3               
001CCF  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
001CCF  3               
001CCF  3               dspr4:
001CCF  3               	; _BEEB clipping code copied from CPC Engine
001CCF  3  A0 08        	ldy #var_newY
001CD1  3  B1 68        	lda (z80_ix), y		; old x coord
001CD3  3  C9 B9        	cmp #SpriteMaxY     ; beyond maximum?
001CD5  3  B0 F2        	bcs dspr6			; yes, don't display it.
001CD7  3               
001CD7  3  A0 04        	ldy #var_X
001CD9  3  B1 68        	lda (z80_ix),y		; old x.
001CDB  3  A0 09        	ldy #var_newX
001CDD  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
001CDF  3  D0 21        	bne dspr7 			; they differ, need to redraw.
001CE1  3               
001CE1  3  A0 03        	ldy #var_Y
001CE3  3  B1 68        	lda (z80_ix),y		; old y.
001CE5  3  A0 08        	ldy #var_newY
001CE7  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001CE9  3  D0 17        	bne dspr7			; they differ, need to redraw.
001CEB  3               
001CEB  3  A0 02        	ldy #var_Frame
001CED  3  B1 68        	lda (z80_ix),y 		; old frame.
001CEF  3  A0 07        	ldy #var_newFrame
001CF1  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001CF3  3  D0 0D        	bne dspr7 			; they differ, need to redraw.
001CF5  3               
001CF5  3  A0 01        	ldy #var_Image
001CF7  3  B1 68        	lda (z80_ix),y 		; old image.
001CF9  3  A0 06        	ldy #var_newImage
001CFB  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001CFD  3  D0 03        	bne dspr7 			; they differ, need to redraw.
001CFF  3  4C 7E 1C     	jmp dspr2			; everything is the same, don't redraw.
001D02  3               
001D02  3               dspr7:
001D02  3  20 C1 1D     	jsr sspric 			; delete old sprite, draw new one simultaneously.
001D05  3  4C 7E 1C     	jmp dspr2
001D08  3               
001D08  3               dspr3:
001D08  3               	; _BEEB clipping code copied from CPC Engine
001D08  3  A0 08        	ldy #var_newY
001D0A  3  B1 68        	lda (z80_ix), y		; old x coord
001D0C  3  C9 B9        	cmp #SpriteMaxY     ; beyond maximum?
001D0E  3  90 03        	bcc :+				; no, continue
001D10  3  4C 7E 1C     	jmp dspr2			; yes, don't display it.
001D13  3               :
001D13  3  20 BB 1D     	jsr ssprib 			; show single sprite.
001D16  3  4C 7E 1C     	jmp dspr2
001D19  3               
001D19  3  00           sprcnt:	.byte 0
001D1A  3               
001D1A  3               ;-----------------------------------------
001D1A  3               ; Get sprite address calculations.
001D1A  3               ; gspran = new sprite, gsprad = old sprite.
001D1A  3               ;
001D1A  3               ; Input:
001D1A  3               ;  IX = sprite address
001D1A  3               ;-----------------------------------------
001D1A  3               
001D1A  3               gspran:
001D1A  3  A0 08        	ldy #var_newY
001D1C  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
001D1E  3  8D 4F 0E     	sta dispy
001D21  3  A0 09        	ldy #var_newX
001D23  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
001D25  3  8D 4E 0E     	sta dispx
001D28  3  A0 06        	ldy #var_newImage
001D2A  3  B1 68        	lda (z80_ix),y 		; new sprite image.
001D2C  3  20 A5 20     	jsr gfrm		; fetch start frame for this sprite.
001D2F  3               
001D2F  3  A0 00        	ldy #0
001D31  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
001D33  3  A0 07        	ldy #var_newFrame
001D35  3  18           	clc
001D36  3  71 68        	adc (z80_ix),y 		; new add frame number.
001D38  3  4C 59 1D     	jmp gspra0
001D3B  3               
001D3B  3               ;-----------------------------------------
001D3B  3               ; Calculate old sprite address
001D3B  3               ;
001D3B  3               ; Input:
001D3B  3               ;  IX = sprite address
001D3B  3               ;
001D3B  3               ; Output:
001D3B  3               ;  B  = right byte mask
001D3B  3               ;  C  = left byte mask
001D3B  3               ;  DE = spriteframe address
001D3B  3               ;  scraddr = screenaddress(dispx,dispy)
001D3B  3               ;-----------------------------------------
001D3B  3               
001D3B  3               gsprad:
001D3B  3  A0 03        	ldy #var_Y
001D3D  3  B1 68        	lda (z80_ix),y		; y coordinate.
001D3F  3  8D 4F 0E     	sta dispy
001D42  3  A0 04        	ldy #var_X
001D44  3  B1 68        	lda (z80_ix),y		; x coordinate.
001D46  3  8D 4E 0E     	sta dispx
001D49  3  A0 01        	ldy #var_Image
001D4B  3  B1 68        	lda (z80_ix),y 		; sprite image.
001D4D  3  20 A5 20     	jsr gfrm 		; fetch start frame for this sprite.
001D50  3               
001D50  3  A0 00        	ldy #0
001D52  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
001D54  3  A0 02        	ldy #var_Frame
001D56  3  18           	clc
001D57  3  71 68        	adc (z80_ix),y 		; add frame number.
001D59  3               
001D59  3               gspra0:
001D59  3  4A           	lsr a	  		; multiply by 128.
001D5A  3  85 65        	sta z80_d 		; store in d.
001D5C  3  A9 00        	lda #0
001D5E  3  6A           	ror a
001D5F  3  85 64        	sta z80_e 		; got low byte.
001D61  3               
001D61  3  18           	clc 			; address of play sprites.
001D62  3  A5 64        	lda z80_e
001D64  3  69 9D        	adc #<sprgfx
001D66  3  85 64        	sta z80_e
001D68  3  A5 65        	lda z80_d
001D6A  3  69 38        	adc #>sprgfx
001D6C  3  85 65        	sta z80_d
001D6E  3               
001D6E  3  AD 4E 0E     	lda dispx 		; y coordinate.
001D71  3  29 06        	and #6 			; position within byte boundary.
001D73  3  AA           	tax	 		; low byte of table displacement.
001D74  3               
001D74  3  0A           	asl a	  		; multiply by 32.
001D75  3  0A           	asl a  			; already a multiple
001D76  3  0A           	asl a  			; of 2, so just 4
001D77  3  0A           	asl a  			; shifts needed.
001D78  3               
001D78  3  18           	clc 			; add to sprite address.
001D79  3  65 64        	adc z80_e
001D7B  3  85 64        	sta z80_e
001D7D  3  90 02        	bcc :+
001D7F  3  E6 65        	inc z80_d
001D81  3               :
001D81  3  BD A1 1D     	lda spmask,x		 ; pointer to mask table.
001D84  3  85 62        	sta z80_c 		; left mask.
001D86  3  BD A2 1D     	lda spmask+1,x
001D89  3  85 63        	sta z80_b 		; right mask.
001D8B  3               
001D8B  3               ;------------------------------------------------------------------
001D8B  3               ; Drop into screen address routine.
001D8B  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
001D8B  3               ;------------------------------------------------------------------
001D8B  3               
001D8B  3               scadd:
001D8B  3  AE 4F 0E     	ldx dispy
001D8E  3  AD 4E 0E     	lda dispx
001D91  3  29 F8        	and #$f8
001D93  3  18           	clc
001D94  3  7D 00 06     	adc SCADTB_lb,x
001D97  3  85 80        	sta scraddr
001D99  3  BD 00 07     	lda SCADTB_hb,x
001D9C  3  69 00        	adc #0
001D9E  3  85 81        	sta scraddr+1
001DA0  3  60           	rts
001DA1  3               
001DA1  3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
001DA5  3  0F F0 03 FC  
001DA9  3               
001DA9  3               
001DA9  3               ;-----------------------------------------------------------------
001DA9  3               ; These are the sprite routines.
001DA9  3               ; sspria = single sprite, old (ix).
001DA9  3               ; ssprib = single sprite, new (ix+5).
001DA9  3               ; sspric = both sprites, old (ix) and new (ix+5).
001DA9  3               ;-----------------------------------------------------------------
001DA9  3               
001DA9  3               sspria:
001DA9  3  20 3B 1D     	jsr gsprad		; get old sprite address.
001DAC  3               sspri2:
001DAC  3  A9 10        	lda #16			; vertical lines.
001DAE  3  8D BA 1D     	sta acnt
001DB1  3               sspri0:
001DB1  3  20 E4 1D     	jsr dline		; draw a line.
001DB4  3  CE BA 1D     	dec acnt
001DB7  3  D0 F8        	bne sspri0		; repeat 16 times
001DB9  3  60           	rts
001DBA  3               
001DBA  3  00           acnt:	.byte 0
001DBB  3               
001DBB  3               ;-----------------------------------------------------------------
001DBB  3               
001DBB  3               ssprib:
001DBB  3  20 1A 1D     	jsr gspran 		; get new sprite address.
001DBE  3  4C AC 1D     	jmp sspri2
001DC1  3               
001DC1  3               ;-----------------------------------------------------------------
001DC1  3               
001DC1  3               ccnt = $7c
001DC1  3               
001DC1  3               sspric:
001DC1  3  20 3B 1D     	jsr gsprad 		; get old sprite address.
001DC4  3  20 CC 54     	jsr exx  		; store addresses.
001DC7  3  20 1A 1D     	jsr gspran 		; get new sprite addresses.
001DCA  3               
001DCA  3  A9 0F        	lda #15
001DCC  3  85 7C        	sta ccnt
001DCE  3               lloop:
001DCE  3  20 E4 1D     	jsr dline 		; draw a line.
001DD1  3  20 CC 54     	jsr exx  		; restore old addresses.
001DD4  3  20 E4 1D     	jsr dline 		; delete a line.
001DD7  3  20 CC 54     	jsr exx  		; flip to new sprite addresses.
001DDA  3  C6 7C        	dec ccnt
001DDC  3  D0 F0        	bne lloop
001DDE  3               
001DDE  3  20 E4 1D     	jsr dline		; draw a line.
001DE1  3  20 CC 54     	jsr exx 		; restore old addresses.
001DE4  3               
001DE4  3               ;-------------------------------------------------------------
001DE4  3               ; Drop through.
001DE4  3               ; Line drawn, now work out next target address.
001DE4  3               ;
001DE4  3               ; Input:
001DE4  3               ;  B  = right mask
001DE4  3               ;  C  = left mask
001DE4  3               ;  DE = spriteaddress
001DE4  3               ;  scraddr = screen address
001DE4  3               ;-------------------------------------------------------------
001DE4  3               
001DE4  3               dline:
001DE4  3  A0 00        	ldy #0
001DE6  3  B1 64        	lda (z80_de),y 		; graphic data.
001DE8  3  25 62        	and z80_c 		; mask away what's not needed.
001DEA  3  51 80        	eor (scraddr),y 	; XOR with what's there.
001DEC  3  91 80        	sta (scraddr),y 	; bung it in.
001DEE  3               
001DEE  3               ; _BEEB screen arrangement
001DEE  3  18           	clc
001DEF  3  A5 80        	lda scraddr
001DF1  3  69 10        	adc #16
001DF3  3  85 80        	sta scraddr
001DF5  3  90 02        	bcc :+
001DF7  3  E6 81        	inc scraddr+1
001DF9  3               :
001DF9  3               
001DF9  3  B1 64        	lda (z80_de),y 		; fetch data.
001DFB  3  25 63        	and z80_b 		; mask away unwanted bits.
001DFD  3  51 80        	eor (scraddr),y 	; XOR with what's there.
001DFF  3  91 80        	sta (scraddr),y 	; bung it in.
001E01  3               
001E01  3  E6 64        	inc z80_e 		; next graphic.
001E03  3  D0 02        	bne :+
001E05  3  E6 65        	inc z80_d
001E07  3               :
001E07  3               ; _BEEB screen arrangement
001E07  3  38           	sec
001E08  3  A5 80        	lda scraddr 		; one character cell to the left.
001E0A  3  E9 08        	sbc #8
001E0C  3  85 80        	sta scraddr
001E0E  3  A5 81        	lda scraddr+1
001E10  3  E9 00        	sbc #0
001E12  3  85 81        	sta scraddr+1
001E14  3               
001E14  3  B1 64        	lda (z80_de),y 		; second bit of data.
001E16  3  51 80        	eor (scraddr),y 	; XOR with what's there.
001E18  3  91 80        	sta (scraddr),y 	; bung it in.
001E1A  3               
001E1A  3  E6 64        	inc z80_e 		; point to next line of data.
001E1C  3  D0 02        	bne :+
001E1E  3  E6 65        	inc z80_d
001E20  3               :
001E20  3               ; _BEEB screen arrangement
001E20  3  38           	sec
001E21  3  A5 80        	lda scraddr 		; another char left.
001E23  3  E9 08        	sbc #8
001E25  3  85 80        	sta scraddr
001E27  3  A5 81        	lda scraddr+1
001E29  3  E9 00        	sbc #0
001E2B  3  85 81        	sta scraddr+1
001E2D  3               
001E2D  3               ;----------------------------------------------------------------------
001E2D  3               ; Line drawn, now work out next target address.
001E2D  3               ;----------------------------------------------------------------------
001E2D  3               
001E2D  3               ; _BEEB screen arrangement
001E2D  3               
001E2D  3               nline:
001E2D  3  A5 80        	lda scraddr 		; get low byte of address.
001E2F  3  29 07        	and #7				
001E31  3  C9 07        	cmp #7				; is this last line of row?
001E33  3  F0 03        	beq beeb_next_row
001E35  3               
001E35  3               	; within same row
001E35  3  E6 80        	inc scraddr			; new low byte of address.
001E37  3               ;	bne :+
001E37  3               ;	inc scraddr+1		; new high byte of address.
001E37  3               :
001E37  3  60           	rts
001E38  3               
001E38  3               beeb_next_row:
001E38  3  18           	clc
001E39  3  A5 80        	lda scraddr
001E3B  3  69 39        	adc #<(ScreenRowBytes-7)
001E3D  3  85 80        	sta scraddr			; new low byte of address.
001E3F  3  A5 81        	lda scraddr+1
001E41  3  69 01        	adc #>(ScreenRowBytes-7)
001E43  3  85 81        	sta scraddr+1		; new high byte of address.
001E45  3  60           	rts
001E46  3               
001E46  3               ;-----------------------------------------------------------
001E46  3               ; Animates a sprite.
001E46  3               ;
001E46  3               ; Input:
001E46  3               ;  IX = sprite address
001E46  3               ;  HL = last sprite address
001E46  3               ;-----------------------------------------------------------
001E46  3               
001E46  3               animsp:
001E46  3  A0 06        	ldy #var_newImage
001E48  3  B1 68        	lda (z80_ix),y		; sprite image
001E4A  3  20 A5 20     	jsr gfrm		; get frame data.
001E4D  3               
001E4D  3  E6 66        	inc z80_l		; point to frames.
001E4F  3  D0 02        	bne :+
001E51  3  E6 67        	inc z80_h
001E53  3               :
001E53  3  A0 07        	ldy #var_newFrame
001E55  3  B1 68        	lda (z80_ix),y		; sprite frame.
001E57  3  18           	clc
001E58  3  69 01        	adc #1			; next one along.
001E5A  3  A0 00        	ldy #0
001E5C  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
001E5E  3  90 02        	bcc anims0		; no, not yet.
001E60  3  A9 00        	lda #0			; start at first frame.
001E62  3               anims0:
001E62  3  A0 07        	ldy #var_newFrame
001E64  3  91 68        	sta (z80_ix),y		; new frame.
001E66  3  60           	rts
001E67  3               
001E67  3               ;--------------------------------------------------------------
001E67  3               ; Animate back
001E67  3               ;
001E67  3               ; Input:
001E67  3               ;  IX = sprite address
001E67  3               ;  HL = last sprite address
001E67  3               ;--------------------------------------------------------------
001E67  3               
001E67  3               animbk:
001E67  3  A0 06        	ldy #var_newImage
001E69  3  B1 68        	lda (z80_ix),y		; sprite image.
001E6B  3  20 A5 20     	jsr gfrm		; get frame data.
001E6E  3               
001E6E  3  E6 66        	inc z80_l 		; point to frames.
001E70  3  D0 02        	bne :+
001E72  3  E6 67        	inc z80_h
001E74  3               :
001E74  3  A0 07        	ldy #var_newFrame
001E76  3  B1 68        	lda (z80_ix),y 		; sprite frame.
001E78  3  F0 03        	beq :+
001E7A  3  4C 81 1E     	jmp rtanb0 		; yes, start at end.
001E7D  3               :
001E7D  3  A0 00        	ldy #0
001E7F  3  B1 66        	lda (z80_hl),y 		; last sprite.
001E81  3               rtanb0:
001E81  3  38           	sec
001E82  3  E9 01        	sbc #1			; next one along.
001E84  3  4C 62 1E     	jmp anims0		; set new frame.
001E87  3               
001E87  3               ;--------------------------------------------------------------
001E87  3               ; Check for collision with other sprite, strict enforcement.
001E87  3               ;
001E87  3               ; Input:
001E87  3               ;  b		= sprite to test for
001E87  3               ;  ix		= current sprite pointer
001E87  3               ;
001E87  3               ; global:	b
001E87  3               ; local:	x,y,hl,de,skptr
001E87  3               ; calls:	-
001E87  3               ;--------------------------------------------------------------
001E87  3               
001E87  3               sktyp:
001E87  3  A9 96        	lda #<sprtab				; sprite table.
001E89  3  85 66        	sta z80_l
001E8B  3  A9 22        	lda #>sprtab
001E8D  3  85 67        	sta z80_h
001E8F  3               numsp2:
001E8F  3  A9 0C        	lda #NUMSPR				; number of sprites.
001E91  3  8D CA 1E     	sta sktptr
001E94  3               sktyp0:
001E94  3  A5 66        	lda z80_l 				; store pointer to sprite.
001E96  3  8D C8 1E     	sta skptr
001E99  3  A5 67        	lda z80_h
001E9B  3  8D C9 1E     	sta skptr+1
001E9E  3               
001E9E  3  A0 00        	ldy #0
001EA0  3  B1 66        	lda (z80_hl),y 				; get sprite type.
001EA2  3  C5 63        	cmp z80_b				; is it the type we seek?
001EA4  3  F0 25        	beq coltyp				; yes, we can use this one.
001EA6  3               :
001EA6  3               sktyp1:
001EA6  3  18           	clc
001EA7  3  AD C8 1E     	lda skptr				; retrieve sprite pointer.
001EAA  3  69 11        	adc #TABSIZ				; size of each entry.
001EAC  3  85 66        	sta z80_l
001EAE  3  AD C9 1E     	lda skptr+1
001EB1  3  69 00        	adc #0
001EB3  3  85 67        	sta z80_h
001EB5  3  CE CA 1E     	dec sktptr					; one less iteration.
001EB8  3  D0 DA        	bne sktyp0				; keep going until we find a slot.
001EBA  3               :
001EBA  3  A9 00        	lda #0					; default to ROM address - no sprite.
001EBC  3  85 66        	sta z80_l
001EBE  3  85 67        	sta z80_h
001EC0  3  8D C8 1E     	sta skptr				; store pointer to sprite.
001EC3  3  8D C9 1E     	sta skptr+1
001EC6  3               
001EC6  3  18           	clc					; don't return with zero flag set.
001EC7  3  60           	rts 					; didn't find one.
001EC8  3               
001EC8  3  00 00        skptr:	.word 0					; search pointer.
001ECA  3  00           sktptr:	.byte 0
001ECB  3               
001ECB  3               coltyp:
001ECB  3  A0 00        	ldy #0
001ECD  3  B1 68        	lda (z80_ix),y				; current sprite type.
001ECF  3  C5 63        	cmp z80_b				; seeking sprite of same type?
001ED1  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
001ED3  3               colty0:
001ED3  3  A0 09        	ldy #9					; distance to x position in table.
001ED5  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
001ED7  3  85 64        	sta z80_e
001ED9  3  88           	dey
001EDA  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
001EDC  3  85 65        	sta z80_d
001EDE  3               
001EDE  3               ; Drop into collision detection.
001EDE  3               
001EDE  3               colc16:
001EDE  3  A0 09        	ldy #9
001EE0  3  B1 68        	lda (z80_ix),y			 	; x coord.
001EE2  3  38           	sec					; subtract x.
001EE3  3  E5 64        	sbc z80_e
001EE5  3  B0 05        	bcs  colc1a 				; result is positive.
001EE7  3  49 FF        	eor #$ff				; make negative positive.
001EE9  3  18           	clc
001EEA  3  69 01        	adc #1
001EEC  3               colc1a:
001EEC  3  C9 10        	cmp #16 				; within x range?
001EEE  3  B0 B6        	bcs sktyp1				; no - they"ve missed.
001EF0  3  85 62        	sta z80_c				; store difference.
001EF2  3               
001EF2  3  A0 08        	ldy #8
001EF4  3  B1 68        	lda (z80_ix),y				; y coord.
001EF6  3  38           	sec
001EF7  3  E5 65        	sbc z80_d				; subtract y.
001EF9  3  B0 05        	bcs colc1b				; result is positive.
001EFB  3  49 FF        	eor #$ff				; make negative positive.
001EFD  3  18           	clc
001EFE  3  69 01        	adc #1
001F00  3               colc1b:
001F00  3  C9 10        	cmp #16					; within y range?
001F02  3  B0 A2        	bcs sktyp1 				; no - they've missed.
001F04  3  18           	clc					; add x difference.
001F05  3  65 62        	adc z80_c
001F07  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
001F09  3  B0 02        	bcs :+
001F0B  3  38           	sec
001F0C  3  60           	rts 					; carry set if there's a collision.
001F0D  3               :
001F0D  3  4C A6 1E     	jmp sktyp1				; try next sprite in table.
001F10  3               colty1:
001F10  3  A5 68        	lda z80_x  				; compare the two.
001F12  3  C5 66        	cmp z80_l
001F14  3  D0 09        	bne end_col
001F16  3  A5 69        	lda z80_i
001F18  3  C5 67        	cmp z80_h
001F1A  3  D0 03        	bne end_col
001F1C  3  4C A6 1E     	jmp sktyp1 				; addresses are identical.
001F1F  3               end_col:
001F1F  3  4C D3 1E     	jmp colty0
001F22  3               
001F22  3               ;-----------------------------------------------------------
001F22  3               ; Display number, left aligned
001F22  3               ; 
001F22  3               ; Input:
001F22  3               ;  a		= number
001F22  3               ;
001F22  3               ; global:	-
001F22  3               ; local:	a,y,bc,hl,displ0
001F22  3               ; calls:	num2ch,dmsg3
001F22  3               ;-----------------------------------------------------------
001F22  3               
001F22  3               disply:
001F22  3  85 61        	sta z80_a
001F24  3  A9 4A        	lda #<displ0				; display workspace.
001F26  3  85 62        	sta z80_c
001F28  3  A9 1F        	lda #>displ0
001F2A  3  85 63        	sta z80_b
001F2C  3  A5 61        	lda z80_a
001F2E  3  20 E7 10     	jsr num2ch				; convert accumulator to string.
001F31  3               
001F31  3  C6 62        	dec z80_c				; back one character.
001F33  3  D0 02        	bne :+
001F35  3  C6 63        	dec z80_b
001F37  3               :
001F37  3  A0 00        	ldy #0
001F39  3  B1 62        	lda (z80_bc),y				; fetch digit.
001F3B  3  09 80        	ora #128				; insert end marker.
001F3D  3  91 62        	sta (z80_bc),y				; new value.
001F3F  3               
001F3F  3  A9 4A        	lda #<displ0				; display space.
001F41  3  85 66        	sta z80_l
001F43  3  A9 1F        	lda #>displ0
001F45  3  85 67        	sta z80_h
001F47  3  4C 08 1A     	jmp dmsg3				; display the string.
001F4A  3               
001F4A  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
001F4E  3               
001F4E  3               ;----------------------------------------------------------------
001F4E  3               ; Initialise screen.
001F4E  3               ;
001F4E  3               ; global:	roomtb,scno
001F4E  3               ; local:	-
001F4E  3               ; calls:	tstcs
001F4E  3               ;----------------------------------------------------------------
001F4E  3               
001F4E  3               initsc:
001F4E  3  AD 73 23     	lda roomtb 			; whereabouts in the map are we?
001F51  3  20 5C 1F     	jsr tstsc 			; find displacement.
001F54  3  C9 FF        	cmp #255 			; is it valid?
001F56  3  F0 03        	beq init_end 			; no, it's rubbish.
001F58  3  8D 29 0E     	sta scno			; store new room number.
001F5B  3               init_end:
001F5B  3  60           	rts
001F5C  3               
001F5C  3               ;----------------------------------------------------------------
001F5C  3               ; Test screen.
001F5C  3               ;
001F5C  3               ; global:	-
001F5C  3               ; local:	x
001F5C  3               ; calls:	-
001F5C  3               ;----------------------------------------------------------------
001F5C  3               
001F5C  3               tstsc:
001F5C  3  8D 67 1F     	sta tmproom
001F5F  3  18           	clc
001F60  3  69 0B        	adc #MAPWID 			; add width in case we"re negative.
001F62  3  AA           	tax 				; add displacement to map data.
001F63  3  BD 75 23     	lda mapdat-MAPWID,x 		; find room number there.
001F66  3  60           	rts
001F67  3               
001F67  3  00           tmproom:	.byte 0
001F68  3               
001F68  3               ;--------------------------
001F68  3               ; Screen left.
001F68  3               ;--------------------------
001F68  3               
001F68  3               scrl:
001F68  3  AD 73 23     	lda roomtb 			; present room table pointer.
001F6B  3  38           	sec
001F6C  3  E9 01        	sbc #1				; room left.
001F6E  3               scrl0:
001F6E  3  20 5C 1F     	jsr tstsc			; test screen.
001F71  3  C9 FF        	cmp #255			; is there a screen this way?
001F73  3  D0 01        	bne :+
001F75  3  60           	rts				; no, return to loop.
001F76  3               :
001F76  3  AD 67 1F     	lda tmproom			; restore room displacement.
001F79  3  8D 73 23     	sta roomtb			; new room table position.
001F7C  3               scrl1:
001F7C  3  20 4E 1F     	jsr initsc 			; set new screen.
001F7F  3  A9 02        	lda #2
001F81  3  8D 4B 0E     	sta restfl 			; set it.
001F84  3  60           	rts
001F85  3               scrr:
001F85  3  AD 73 23     	lda roomtb 			; room table pointer.
001F88  3  18           	clc
001F89  3  69 01        	adc #1				; room right.
001F8B  3  4C 6E 1F     	jmp scrl0
001F8E  3               scru:
001F8E  3  AD 73 23     	lda roomtb 			; room table pointer.
001F91  3  38           	sec
001F92  3  E9 0B        	sbc #MAPWID 			; room up.
001F94  3  4C 6E 1F     	jmp scrl0
001F97  3               scrd:
001F97  3  AD 73 23     	lda roomtb 			; room table pointer.
001F9A  3  18           	clc
001F9B  3  69 0B        	adc #MAPWID 			; room down.
001F9D  3  4C 6E 1F     	jmp scrl0
001FA0  3               
001FA0  3               ;-----------------------------------------
001FA0  3               ; Jump to new screen.
001FA0  3               ;-----------------------------------------
001FA0  3               
001FA0  3               nwscr:
001FA0  3  A2 00        	ldx #0				; start of map data.
001FA2  3               nwscr0:
001FA2  3  DD 80 23     	cmp mapdat,x
001FA5  3  F0 06        	beq nwscr1			; have we found a match for screen?
001FA7  3  E8           	inx 				; next room.
001FA8  3  E0 50        	cpx #80				; zero room count, 80 to search.
001FAA  3  D0 F6        	bne nwscr0			; keep looking.
001FAC  3  60           	rts
001FAD  3               nwscr1:
001FAD  3  8E 73 23     	stx roomtb			; set the map position.
001FB0  3  4C 7C 1F     	jmp scrl1			; draw new room.
001FB3  3               
001FB3  3               
001FB3  3               ;----------------------------------------------------------
001FB3  3               ; Gravity processing.
001FB3  3               ;----------------------------------------------------------
001FB3  3               
001FB3  3               grav:
001FB3  3  A0 0D        	ldy #13
001FB5  3  B1 68        	lda (z80_ix),y			; jump pointer low.
001FB7  3  85 66        	sta z80_l
001FB9  3  A0 0E        	ldy #14
001FBB  3  B1 68        	lda (z80_ix),y			; jump pointer high.
001FBD  3  85 67        	sta z80_h
001FBF  3  05 66        	ora z80_l			; merge in low byte.
001FC1  3  D0 01        	bne :+
001FC3  3  60           	rts				; if neither is set, we're not in the air.
001FC4  3               :
001FC4  3  A0 00        	ldy #0
001FC6  3  B1 66        	lda (z80_hl),y			; pixels to move.
001FC8  3  85 61        	sta z80_a
001FCA  3  C9 63        	cmp #99				; reached the end?
001FCC  3  D0 06        	bne grav0			; no, continue.
001FCE  3               grav2:
001FCE  3  C6 66        	dec z80_l			; go back to previous value.
001FD0  3  B1 66        	lda (z80_hl),y			; fetch that from table.
001FD2  3  85 61        	sta z80_a
001FD4  3               grav0:
001FD4  3  E6 66        	inc z80_l			; point to next table entry.
001FD6  3  A5 66        	lda z80_l
001FD8  3  A0 0D        	ldy #13
001FDA  3  91 68        	sta (z80_ix),y			; store new pointer low.
001FDC  3  A5 67        	lda z80_h
001FDE  3  A0 0E        	ldy #14
001FE0  3  91 68        	sta (z80_ix),y			; store new pointer high.
001FE2  3               grav1:
001FE2  3  A5 61        	lda z80_a
001FE4  3  D0 01        	bne :+				; any movement required?
001FE6  3  60           	rts				; no, not this time.
001FE7  3               :
001FE7  3  A5 61        	lda z80_a
001FE9  3  C9 80        	cmp #128			; is it up or down?
001FEB  3  B0 15        	bcs gravu			; it's up.
001FED  3               gravd:
001FED  3  85 63        	sta z80_b			; set pixels to move.
001FEF  3               gravd0:
001FEF  3  20 75 17     	jsr cangd			; can we go down?
001FF2  3  D0 28        	bne gravst			; can't move down, so stop.
001FF4  3  A0 08        	ldy #8
001FF6  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
001FF8  3  18           	clc
001FF9  3  69 01        	adc #1
001FFB  3  91 68        	sta (z80_ix),y
001FFD  3  C6 63        	dec z80_b
001FFF  3  D0 EE        	bne gravd0
002001  3  60           	rts
002002  3               gravu:
002002  3  49 FF        	eor #$ff			; flip the sign so it's positive.
002004  3  18           	clc
002005  3  69 01        	adc #1
002007  3  85 63        	sta z80_b			; set pixels to move.
002009  3               gravu0:
002009  3  20 3D 17     	jsr cangu			; can we go up?
00200C  3  D0 71        	bne ifalls			; can't move up, go down next.
00200E  3  A0 08        	ldy #8
002010  3  B1 68        	lda (z80_ix),y
002012  3  38           	sec
002013  3  E9 01        	sbc #1
002015  3  91 68        	sta (z80_ix),y			; adjust new x coord.
002017  3  C6 63        	dec z80_b
002019  3  D0 EE        	bne gravu0
00201B  3  60           	rts
00201C  3               gravst:
00201C  3  A0 0D        	ldy #13
00201E  3  B1 68        	lda (z80_ix),y			; jump pointer low.
002020  3  85 66        	sta z80_l
002022  3  A0 0E        	ldy #14
002024  3  B1 68        	lda (z80_ix),y			; jump pointer high.
002026  3  85 67        	sta z80_h
002028  3               
002028  3  A9 00        	lda #0				; null value in pointer.
00202A  3  A0 0D        	ldy #13
00202C  3  91 68        	sta (z80_ix),y			; store new pointer low.
00202E  3  C8           	iny
00202F  3  91 68        	sta (z80_ix),y			; store new pointer high.
002031  3               
002031  3  A0 00        	ldy #0
002033  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
002035  3  C9 63        	cmp #99				; is it the end marker?
002037  3               evftf:
002037  3  F0 01        	beq :+				; yes, fallen too far.
002039  3  60           	rts
00203A  3               :
00203A  3  4C FE 35     	jmp evnt15			; EVENT FELLTOOFAR
00203D  3               
00203D  3               ;------------------------------------------------
00203D  3               ; Initiate fall check.
00203D  3               ;------------------------------------------------
00203D  3               
00203D  3               ifall:
00203D  3  A0 0D        	ldy #13
00203F  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
002041  3  85 66        	sta z80_l
002043  3  A0 0E        	ldy #14
002045  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
002047  3  85 67        	sta z80_h			; high byte in accumulator.
002049  3  05 66        	ora z80_l			; merge in low byte.
00204B  3  F0 01        	beq :+
00204D  3  60           	rts				; if either is set, we're already in the air.
00204E  3               :
00204E  3  A0 09        	ldy #9
002050  3  B1 68        	lda (z80_ix),y			; y coordinate.
002052  3  8D 4E 0E     	sta dispx
002055  3               numsp7:
002055  3  A0 08        	ldy #8
002057  3  B1 68        	lda (z80_ix),y			; look x coordinate.
002059  3  18           	clc
00205A  3  69 10        	adc #16				; add 16 pixels.
00205C  3  8D 4F 0E     	sta dispy			; set up test coordinates.
00205F  3  20 FD 18     	jsr tstbl			; get map address.
002062  3  20 0F 18     	jsr plchk			; block, platform check.
002065  3  F0 01        	beq :+
002067  3  60           	rts				; it's solid, don't fall.
002068  3               :
002068  3  E6 86        	inc bufaddr			; look right one cell.
00206A  3  20 0F 18     	jsr plchk			; block, platform check.
00206D  3  F0 01        	beq :+
00206F  3  60           	rts				; it's solid, don't fall.
002070  3               :
002070  3  AD 4E 0E     	lda dispx			; y coordinate.
002073  3  29 07        	and #7				; position straddling block cells.
002075  3  F0 08        	beq ifalls			; no more checks needed.
002077  3  E6 86        	inc bufaddr			; look to third cell.
002079  3  20 0F 18     	jsr plchk			; block, platform check.
00207C  3  F0 01        	beq :+
00207E  3  60           	rts				; it's solid, don't fall.
00207F  3               :
00207F  3               ifalls:
00207F  3  A9 4D        	lda #<jtab			; jump table start.
002081  3  85 66        	sta z80_l
002083  3  A9 19        	lda #>jtab
002085  3  85 67        	sta z80_h
002087  3               ifal0:
002087  3  E6 66        	inc z80_l			; point to next value.
002089  3  A0 00        	ldy #0
00208B  3  B1 66        	lda (z80_hl),y			; fetch value.
00208D  3  F0 F8        	beq ifal0			; no, get next value.
00208F  3  C9 63        	cmp #99				; reached end of table?
002091  3  D0 01        	bne :+
002093  3  60           	rts				; yes, don't fall.
002094  3               :
002094  3  C9 80        	cmp #128			; is it going up?
002096  3  B0 EF        	bcs ifal0			; yes, looking for first movement down.
002098  3               
002098  3  A0 0D        	ldy #13
00209A  3  A5 66        	lda z80_l
00209C  3  91 68        	sta (z80_ix),y 			; set jump low.
00209E  3  A0 0E        	ldy #14
0020A0  3  A5 67        	lda z80_h
0020A2  3  91 68        	sta (z80_ix),y 			; set jump high.
0020A4  3  60           	rts
0020A5  3               
0020A5  3               
0020A5  3               ;----------------------------------------------------
0020A5  3               ; Get frame data for a particular sprite.
0020A5  3               ; Input:
0020A5  3               ;  a		= framenumer
0020A5  3               ; Output:
0020A5  3               ;  hl		= frame address
0020A5  3               ;
0020A5  3               ; global:	hl,frmptr
0020A5  3               ; local:	-
0020A5  3               ; calls:	-
0020A5  3               ;----------------------------------------------------
0020A5  3               
0020A5  3               gfrm:
0020A5  3  0A           	asl a	 		 	; multiple of 2.
0020A6  3  18           	clc
0020A7  3  6D 50 0E     	adc frmptr 			; frames used by game.
0020AA  3  85 66        	sta z80_l
0020AC  3  AD 51 0E     	lda frmptr+1
0020AF  3  69 00        	adc #0
0020B1  3  85 67        	sta z80_h 			; point to frame start.
0020B3  3  60           	rts
0020B4  3               
0020B4  3               ;----------------------------------------------------
0020B4  3               ; Find sprite list for current room.
0020B4  3               ;
0020B4  3               ; global:	hl
0020B4  3               ; local:	x,y
0020B4  3               ; calls:	-
0020B4  3               ;----------------------------------------------------
0020B4  3               
0020B4  3               sprlst:
0020B4  3  A9 81        	lda #<nmedat 			; list of enemy sprites.
0020B6  3  85 66        	sta z80_l
0020B8  3  A9 4C        	lda #>nmedat
0020BA  3  85 67        	sta z80_h
0020BC  3  AE 29 0E     	ldx scno 			; screen number.
0020BF  3  D0 01        	bne sprls2 			; is it the first screen?
0020C1  3  60           	rts 				; yes, don't need to search data.
0020C2  3               sprls2:
0020C2  3  A0 00        	ldy #0
0020C4  3               sprls1:
0020C4  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
0020C6  3  C9 FF        	cmp #255			; is it an end marker?
0020C8  3  F0 0E        	beq sprls0 			; yes, end of this room.
0020CA  3               
0020CA  3  18           	clc 				; point to next sprite in list.
0020CB  3  A5 66        	lda z80_l
0020CD  3  69 04        	adc #NMESIZ
0020CF  3  85 66        	sta z80_l
0020D1  3  90 02        	bcc :+
0020D3  3  E6 67        	inc z80_h
0020D5  3               :
0020D5  3  4C C4 20     	jmp sprls1 			; continue until end of room.
0020D8  3               sprls0:
0020D8  3  E6 66        	inc z80_l 			; point to start of next screen.s
0020DA  3  D0 02        	bne :+
0020DC  3  E6 67        	inc z80_h
0020DE  3               :
0020DE  3  CA           	dex
0020DF  3  D0 E3        	bne sprls1 			; continue until room found.
0020E1  3  60           	rts
0020E2  3               
0020E2  3               
0020E2  3               ;----------------------------------------------------
0020E2  3               ; Clear all but a single player sprite.
0020E2  3               ;
0020E2  3               ; global:	-
0020E2  3               ; local:	x,y,ix
0020E2  3               ; calls:	-
0020E2  3               ;----------------------------------------------------
0020E2  3               
0020E2  3               nspr:
0020E2  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0020E4  3  8D 19 1D     	sta sprcnt
0020E7  3  A9 96        	lda #<sprtab 			; sprite table.
0020E9  3  85 68        	sta z80_x
0020EB  3  A9 22        	lda #>sprtab
0020ED  3  85 69        	sta z80_i
0020EF  3               nspr0:
0020EF  3  A0 00        	ldy #0 				; fetch sprite type.
0020F1  3  B1 68        	lda (z80_ix),y 			; is it a player?
0020F3  3  F0 1B        	beq nspr1 			; yes, keep this one.
0020F5  3               
0020F5  3  A9 FF        	lda #255
0020F7  3  A0 00        	ldy #0 				; fetch sprite type.
0020F9  3  91 68        	sta (z80_ix),y 			; delete sprite.
0020FB  3  A0 05        	ldy #5
0020FD  3  91 68        	sta (z80_ix),y 			; remove next type.
0020FF  3               
0020FF  3  18           	clc	 			; next sprite.
002100  3  A5 68        	lda z80_x
002102  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
002104  3  85 68        	sta z80_x
002106  3  90 02        	bcc :+
002108  3  E6 69        	inc z80_i
00210A  3               :
00210A  3  CE 19 1D     	dec sprcnt	 			; one less space in the table.
00210D  3  D0 E0        	bne nspr0
00210F  3  60           	rts
002110  3               nspr1:
002110  3  A9 FF        	lda #255
002112  3  A0 00        	ldy #0
002114  3  91 68        	sta (z80_ix),y 			; delete sprite.
002116  3               
002116  3  18           	clc	 			; point to next sprite.
002117  3  A5 68        	lda z80_x
002119  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00211B  3  85 68        	sta z80_x
00211D  3  90 02        	bcc :+
00211F  3  E6 69        	inc z80_i
002121  3               :
002121  3  CE 19 1D     	dec sprcnt	 			; one less to do.
002124  3  D0 01        	bne nspr2
002126  3  60           	rts
002127  3               nspr2:
002127  3  A9 FF        	lda #255
002129  3  A0 00        	ldy #0
00212B  3  91 68        	sta (z80_ix),y 			; delete sprite.
00212D  3  A0 05        	ldy #5
00212F  3  91 68        	sta (z80_ix),y 			; remove next type.
002131  3               
002131  3  18           	clc	 			; next sprite.
002132  3  A5 68        	lda z80_x
002134  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
002136  3  85 68        	sta z80_x
002138  3  90 02        	bcc :+
00213A  3  E6 69        	inc z80_i
00213C  3               :
00213C  3  CE 19 1D     	dec sprcnt	 			; one less space in table.
00213F  3  D0 E6        	bne nspr2
002141  3  60           	rts
002142  3               
002142  3               ;----------------------------------------------------------
002142  3               ; Two initialisation routines.
002142  3               ; Initialise sprites - copy everything from list to table.
002142  3               ;
002142  3               ; global:	-
002142  3               ; local:	x,y,ix
002142  3               ; calls:	cpsp
002142  3               ;----------------------------------------------------------
002142  3               
002142  3               ispr:
002142  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
002144  3  8D 19 1D     	sta sprcnt
002147  3  A9 96        	lda #<sprtab			; sprite table.
002149  3  85 68        	sta z80_x
00214B  3  A9 22        	lda #>sprtab
00214D  3  85 69        	sta z80_i
00214F  3               ispr2:
00214F  3  A0 00        	ldy #0
002151  3  B1 66        	lda (z80_hl),y 			; fetch byte.
002153  3  C9 FF        	cmp #255 			; is it an end marker?
002155  3  D0 01        	bne :+
002157  3  60           	rts 				; yes, no more to do.
002158  3               :
002158  3               ispr1:
002158  3  A0 00        	ldy #0
00215A  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
00215C  3  C9 FF        	cmp #255 			; is it enabled yet?
00215E  3  D0 08        	bne ispr4			; yes, try another slot.
002160  3               
002160  3  A0 05        	ldy #5
002162  3  B1 68        	lda (z80_ix),y		 	; next type.
002164  3  C9 FF        	cmp #255 			; is it enabled yet?
002166  3  F0 11        	beq ispr3 			; no, process this one.
002168  3               ispr4:
002168  3  18           	clc 				; next sprite.
002169  3  A5 68        	lda z80_x
00216B  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00216D  3  85 68        	sta z80_x
00216F  3  90 02        	bcc :+
002171  3  E6 69        	inc z80_i
002173  3               :
002173  3  CE 19 1D     	dec sprcnt
002176  3  D0 E0        	bne ispr1 			; repeat for remaining sprites.
002178  3  60           	rts  				; no more room in table.
002179  3               ispr3:
002179  3  20 CD 21     	jsr cpsp			; initialise a sprite.
00217C  3  CE 19 1D     	dec sprcnt			; one less space in the table.
00217F  3  D0 CE        	bne ispr2
002181  3  60           	rts
002182  3               
002182  3               
002182  3               ;-----------------------------------------------------------------------
002182  3               ; Initialise sprites - but not player, we're keeping the old one.
002182  3               ;
002182  3               ; global:	-
002182  3               ; local:	x,y,ix
002182  3               ; calls:	cpsp
002182  3               ;-----------------------------------------------------------------------
002182  3               
002182  3               kspr:
002182  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
002184  3  A9 96        	lda #<sprtab 			; sprite table.
002186  3  85 68        	sta z80_x
002188  3  A9 22        	lda #>sprtab
00218A  3  85 69        	sta z80_i
00218C  3               kspr2:
00218C  3  A0 00        	ldy #0
00218E  3  B1 66        	lda (z80_hl),y 			; fetch byte.
002190  3  C9 FF        	cmp #255 			; is it an end marker?
002192  3  D0 01        	bne :+
002194  3  60           	rts 				; yes, no more to do.
002195  3               :
002195  3  C9 00        	cmp #0
002197  3  D0 0E        	bne kspr1 			; no, add to table as normal.
002199  3               
002199  3  18           	clc 				; next sprite.
00219A  3  A5 66        	lda z80_l
00219C  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
00219E  3  85 66        	sta z80_l
0021A0  3  90 02        	bcc :+
0021A2  3  E6 67        	inc z80_h
0021A4  3               :
0021A4  3  4C 8C 21     	jmp kspr2
0021A7  3               kspr1:
0021A7  3  A0 00        	ldy #0 				; fetch sprite type.
0021A9  3  B1 68        	lda (z80_ix),y
0021AB  3  C9 FF        	cmp #255 			; is it enabled yet?
0021AD  3  D0 08        	bne kspr4 			; yes, try another slot.
0021AF  3               
0021AF  3  A0 05        	ldy #5 				; next type.
0021B1  3  B1 68        	lda (z80_ix),y
0021B3  3  C9 FF        	cmp #255 			; is it enabled yet?
0021B5  3  F0 0F        	beq kspr3 			; no, process this one.
0021B7  3               kspr4:
0021B7  3  18           	clc 				; next sprite.
0021B8  3  A5 68        	lda z80_x
0021BA  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0021BC  3  85 68        	sta z80_x
0021BE  3  90 02        	bcc :+
0021C0  3  E6 69        	inc z80_i
0021C2  3               :
0021C2  3  CA           	dex	 			; repeat for remaining sprites.
0021C3  3  D0 E2        	bne kspr1
0021C5  3  60           	rts  				; no more room in table.
0021C6  3               kspr3:
0021C6  3  20 CD 21     	jsr cpsp 			; copy sprite to table.
0021C9  3  CA           	dex	 			; one less space in the table.
0021CA  3  D0 C0        	bne kspr2
0021CC  3  60           	rts
0021CD  3               
0021CD  3               ;----------------------------------------------
0021CD  3               ; Copy sprite from list to table.
0021CD  3               ;
0021CD  3               ; global:	hl,ix
0021CD  3               ; local:	y
0021CD  3               ; calls:	evnt09
0021CD  3               ;----------------------------------------------
0021CD  3               
0021CD  3               cpsp:
0021CD  3  A0 00        	ldy #0					; fetch byte from table.
0021CF  3  B1 66        	lda (z80_hl),y
0021D1  3               	; y=var_Type
0021D1  3  91 68        	sta (z80_ix),y			; set up type.
0021D3  3  A0 05        	ldy #var_newType
0021D5  3  91 68        	sta (z80_ix),y 			; set up type.
0021D7  3               
0021D7  3  E6 66        	inc z80_l 				; move to next byte.
0021D9  3  D0 02        	bne :+
0021DB  3  E6 67        	inc z80_h
0021DD  3               :
0021DD  3  A0 00        	ldy #0 					; fetch byte from table.
0021DF  3  B1 66        	lda (z80_hl),y
0021E1  3  A0 06        	ldy #var_newImage
0021E3  3  91 68        	sta (z80_ix),y			; set up image.
0021E5  3               
0021E5  3  E6 66        	inc z80_l 				; move to next byte.
0021E7  3  D0 02        	bne :+
0021E9  3  E6 67        	inc z80_h
0021EB  3               :
0021EB  3  A0 00        	ldy #0
0021ED  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
0021EF  3  A0 08        	ldy #var_newY
0021F1  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0021F3  3               
0021F3  3  A9 C8        	lda #200 				; set initial coordinate off screen.
0021F5  3  A0 03        	ldy #var_Y
0021F7  3  91 68        	sta (z80_ix),y
0021F9  3               
0021F9  3  E6 66        	inc z80_l 				; move to next byte.
0021FB  3  D0 02        	bne :+
0021FD  3  E6 67        	inc z80_h
0021FF  3               :
0021FF  3  A0 00        	ldy #0 					; fetch byte from table.
002201  3  B1 66        	lda (z80_hl),y
002203  3  A0 09        	ldy #var_newX
002205  3  91 68        	sta (z80_ix),y 			; set up coordinate.
002207  3               
002207  3  E6 66        	inc z80_l 				; move to next byte.
002209  3  D0 02        	bne :+
00220B  3  E6 67        	inc z80_h
00220D  3               :
00220D  3  A9 00        	lda #0					; zeroes in accumulator.
00220F  3  A0 07        	ldy #var_newFrame 		; reset frame number.
002211  3  91 68        	sta (z80_ix),y
002213  3  A0 0A        	ldy #var_Direction 		; reset direction.
002215  3  91 68        	sta (z80_ix),y
002217  3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
002219  3  91 68        	sta (z80_ix),y
00221B  3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
00221D  3  91 68        	sta (z80_ix),y
00221F  3               
00221F  3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
002221  3  A0 10        	ldy #var_dataHi
002223  3  91 68        	sta (z80_ix),y
002225  3               evis0:
002225  3  A5 69        	lda z80_i
002227  3  48           	pha
002228  3  A5 68        	lda z80_x
00222A  3  48           	pha
00222B  3  A5 67        	lda z80_h
00222D  3  48           	pha
00222E  3  A5 66        	lda z80_l
002230  3  48           	pha
002231  3               
002231  3  20 E0 34     	jsr evnt09 				; perform event.
002234  3               
002234  3  68           	pla
002235  3  85 66        	sta z80_l
002237  3  68           	pla
002238  3  85 67        	sta z80_h
00223A  3  68           	pla
00223B  3  85 68        	sta z80_x
00223D  3  68           	pla
00223E  3  85 69        	sta z80_i
002240  3               
002240  3  18           	clc
002241  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
002243  3  69 11        	adc #TABSIZ		 	; next sprite.
002245  3  85 68        	sta z80_x
002247  3  90 02        	bcc :+
002249  3  E6 69        	inc z80_i
00224B  3               :
00224B  3  60           	rts
00224C  3               
00224C  3               
00224C  3               ;-------------------------------------
00224C  3               ; Clear the play area window.
00224C  3               ;-------------------------------------
00224C  3               
00224C  3               clw:
00224C  3  AD 20 0E     	lda wintop			; get coordinates of window.
00224F  3  8D 4F 0E     	sta dispy			; put into dispx for calculation.
002252  3  AD 21 0E     	lda winlft
002255  3  8D 4E 0E     	sta dispx
002258  3               
002258  3  AD 22 0E     	lda winhgt			; height of window.
00225B  3  8D B5 16     	sta rrow			; copy to b register.
00225E  3               clw3:
00225E  3  AD 23 0E     	lda winwid 			; width of window.
002261  3  8D B4 16     	sta rcol
002264  3               clw2:
002264  3  20 BB 14     	jsr gprad 			; get print address.
002267  3  A9 00        	lda #0				; zero byte to write.
002269  3  A2 07        	ldx #7				; pixel height of each cell.
00226B  3               clw1:
00226B  3  BC 54 15     	ldy scrtab,x
00226E  3  91 80        	sta (scraddr),y 			; copy to screen.
002270  3  CA           	dex				; next screen row down.
002271  3  10 F8        	bpl clw1
002273  3               
002273  3  EE 4E 0E     	inc dispx			; next column.
002276  3  CE B4 16     	dec rcol			; one less to do.
002279  3  D0 E9        	bne clw2			; repeat for remaining columns.
00227B  3               
00227B  3  AD 21 0E     	lda winlft			; get left edge.
00227E  3  8D 4E 0E     	sta dispx 			; reset x.
002281  3  EE 4F 0E     	inc dispy 			; next line down.
002284  3               
002284  3  CE B5 16     	dec rrow
002287  3  D0 D5        	bne clw3			; repeat down the screen.
002289  3               
002289  3  AD 20 0E     	lda wintop			; get coordinates of window.
00228C  3  8D 44 0E     	sta chary			; put into display position.
00228F  3  AD 21 0E     	lda winlft
002292  3  8D 43 0E     	sta charx
002295  3  60           	rts
002296  3               
002296  3               
002296  3               ;----------------------------------------------------------
002296  3               ; Effects code.
002296  3               ; Ticker routine is called 25 times per second.
002296  3               ;
002296  3               ; HL = txtscr = left text screen address
002296  3               ; DE = txtscr+txtwid-1 = right text screen address
002296  3               ; BC = txtpos = text scroller position
002296  3               ;
002296  3               ;----------------------------------------------------------
002296  3               
002296  3               .if sflag
002296  3               scrly:
002296  3               	rts
002296  3               	.word txtscr         	; get left screen address.
002296  3               	sta scr_l
002296  3               	lda txtscr+1
002296  3               	sta scr_l+1
002296  3               	sta scr_r+1
002296  3               	
002296  3               	stx xtmp
002296  3               
002296  3               	clc         		; get right screen address.
002296  3               	lda scr_l
002296  3               	adc txtwid
002296  3               	sta scr_r
002296  3               	dec scr_r
002296  3               scrly1:
002296  3               	ldy txtwid		; set txtwide
002296  3               	dey
002296  3               	clc
002296  3               scrly0:
002296  3               	lda (scr_l),y		; scroll 1 line
002296  3               	rol a
002296  3               	sta (scr_l),y
002296  3               	dey
002296  3               	bpl scrly0
002296  3               
002296  3               	clc			; point to next line
002296  3               	lda scr_l
002296  3               	adc #32
002296  3               	sta scr_l
002296  3               	bcc scrly1		; repeat 8 times
002296  3               
002296  3               	lda txtpos 		; get text pointer.
002296  3               	sta scr_txt
002296  3               	lda txtpos+1
002296  3               	sta scr_txt+1
002296  3               
002296  3               	ldy #0
002296  3               	lda (scr_txt),y 		; find character we're displaying.
002296  3               	and #127 		; remove end marker bit if applicable.
002296  3               	cmp #13			; is it newline?
002296  3               	bne scrly5 		; no, it's okay.
002296  3               	lda #32			; convert to a space instead.
002296  3               scrly5:
002296  3               	sta fntaddr		; calculate char address
002296  3               	lda #0
002296  3               	sta fntaddr+1
002296  3               	asl fntaddr  		; multiply char by 8.
002296  3               	rol fntaddr+1
002296  3               	asl fntaddr
002296  3               	rol fntaddr+1
002296  3               	asl fntaddr
002296  3               	rol fntaddr+1
002296  3               	lda fntaddr
002296  3               	clc
002296  3               	adc FontPtr
002296  3               	sta scrly3+1		; that's the low byte.
002296  3               	lda fntaddr+1
002296  3               	adc FontPtr+1
002296  3               	sta scrly3+2		; add displacement.
002296  3               
002296  3               	ldx #0
002296  3               scrly3:
002296  3               	lda $3333,x		; get image of char line.
002296  3               	and txtbit
002296  3               	beq scrly2		; don't plot pixel
002296  3               	ldy scrline,x
002296  3               	lda (scr_r),y
002296  3               	clc
002296  3               	ora #1
002296  3               	sta (scr_r),y		; plot pixel
002296  3               scrly2:
002296  3               	inx			; next line of char.
002296  3               	cpx #8
002296  3               	bne scrly3
002296  3               
002296  3               	lsr txtbit		; bit of text to display.
002296  3               	bcs :+
002296  3               	rts
002296  3               :
002296  3               	ldy #0
002296  3               	lda (scr_txt),y 	; what was the character?
002296  3               	asl a	  		; end of message?
002296  3               	bcs scrly4
002296  3               	inc txtpos
002296  3               	bne :+
002296  3               	inc txtpos+1
002296  3               :
002296  3               	jmp scrly6 		; not yet - continue.
002296  3               scrly4:
002296  3               	lda txtini 		; start of scrolling message.
002296  3               	sta txtpos
002296  3               	lda txtini+1
002296  3               	sta txtpos+1
002296  3               scrly6:
002296  3               	lda #128
002296  3               	sta txtbit
002296  3               	ldx xtmp
002296  3               	rts
002296  3               
002296  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
002296  3               
002296  3               ;-------------------------------------------------------
002296  3               ; Entry TICKER command
002296  3               ;
002296  3               ; Entry:
002296  3               ;  z80_b = message nr
002296  3               ;  z80_c = width
002296  3               ;-------------------------------------------------------
002296  3               
002296  3               iscrly:
002296  3               	jsr prescr 		; set up display position.
002296  3               
002296  3               	lda #<msgdat 		; text messages.
002296  3               	sta z80_l
002296  3               	lda #>msgdat
002296  3               	sta z80_h
002296  3               
002296  3               	lda z80_c 		; width.
002296  3               	sec
002296  3               	sbc #1			; subtract one.
002296  3               	cmp #32 		; is it between 1 and 32?
002296  3               	bcc :+
002296  3               	lda #$60
002296  3               	jmp iscrl0		; no, disable messages.
002296  3               :
002296  3               	ldx z80_b		; message number.
002296  3               	jsr getwrd 		; find message start.
002296  3               
002296  3               	lda z80_l		; set initial text position.
002296  3               	sta txtini
002296  3               	lda z80_h
002296  3               	sta txtini+1
002296  3               
002296  3               	lda #$ad		; code for lda adrr
002296  3               iscrl0:
002296  3               	sta scrly		; enable/disable scrolling routine.
002296  3               
002296  3               	jsr prescr 		; set up display position.
002296  3               	jsr gprad 		; get print address.
002296  3               
002296  3               	lda scraddr 		; set text screen address.
002296  3               	sta txtscr
002296  3               	lda scraddr+1
002296  3               	sta txtscr+1
002296  3               
002296  3               	lda z80_c		; width.
002296  3               	sta txtwid		; set width in working storage.
002296  3               
002296  3               	lda #128 		; start with leftmost bit.
002296  3               	sta txtbit
002296  3               
002296  3               	jmp scrly4
002296  3               .endif
002296  3               
002296  3               ;------------------------------------------------------------------
002296  3               ; Sprite table 
002296  3               ;------------------------------------------------------------------
002296  3               
002296  3               
002296  3               ; ix+0  = type.
002296  3               ; ix+1  = sprite image number.
002296  3               ; ix+2  = frame.
002296  3               ; ix+3  = y coord.
002296  3               ; ix+4  = x coord.
002296  3               
002296  3               ; ix+5  = new type.
002296  3               ; ix+6  = new image number.
002296  3               ; ix+7  = new frame.
002296  3               ; ix+8  = new y coord.
002296  3               ; ix+9  = new x coord.
002296  3               
002296  3               ; ix+10 = direction.
002296  3               ; ix+11 = parameter 1.
002296  3               ; ix+12 = parameter 2.
002296  3               ; ix+13 = jump pointer low.
002296  3               ; ix+14 = jump pointer high.
002296  3               ; ix+15 = data pointer low.
002296  3               ; ix+16 = data pointer high.
002296  3               
002296  3               ; block NUMSPR * TABSIZ,255
002296  3               
002296  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
00229A  3  FF FF FF FF  
00229E  3  FF FF FF FF  
002362  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
002366  3  FF FF FF 00  
00236A  3  C0 78 00 00  
002373  3  07           roomtb:	.byte 7                      ; start room map offset.
002374  3               
002374  3               ; User routine.  Put your own code in here to be called with USER instruction.
002374  3               ; if USER has an argument it will be passed in the accumulator.
002374  3               
002374  3               user:
002374  3  60           	rts
002375  3               
002375  3               ; Everything below here will be generated by the editors.
002375  3               
002375  3               WINDOWTOP = 0
002375  3               WINDOWLFT = 0
002375  3               WINDOWHGT = 23
002375  3               WINDOWWID = 30 ;a
002375  3               MAPWID = 11
002375  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255
002379  3  FF FF FF FF  
00237D  3  FF FF FF     
002380  3               mapdat:
002380  3  FF FF FF FF          .byte 255,255,255,255,0,255,255,255,255,255,255
002384  3  00 FF FF FF  
002388  3  FF FF FF     
00238B  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255
00238F  3  FF FF FF FF  
002393  3  FF FF FF     
002396  3  0A           stmap:  .byte 10
002397  3               
002397  3               evnt00:
002397  3  A9 01                lda #1
002399  3  CD 2F 0E             cmp vare
00239C  3  F0 03                beq *+5
00239E  3  4C DB 23             jmp a00161
0023A1  3  A9 02                lda #2
0023A3  3  A0 06                ldy #6
0023A5  3  D1 68                cmp (z80_ix),y
0023A7  3  F0 03                beq *+5
0023A9  3  4C B7 23             jmp a00073
0023AC  3  20 C1 17             jsr cangr
0023AF  3  F0 03                beq :+
0023B1  3  4C B7 23             jmp a00066
0023B4  3               :
0023B4  3                       ; SPRITEINK command
0023B4  3  4C B7 23             jmp a00073
0023B7  3               a00066: ; SPRITEINK command
0023B7  3  A9 03        a00073: lda #3
0023B9  3  A0 06                ldy #6
0023BB  3  D1 68                cmp (z80_ix),y
0023BD  3  F0 03                beq *+5
0023BF  3  4C CD 23             jmp a00127
0023C2  3  20 AD 17             jsr cangl
0023C5  3  F0 03                beq :+
0023C7  3  4C CD 23             jmp a00120
0023CA  3               :
0023CA  3                       ; SPRITEINK command
0023CA  3  4C CD 23             jmp a00127
0023CD  3               a00120: ; SPRITEINK command
0023CD  3  A9 06        a00127: lda #CUSTOM
0023CF  3  85 63                sta z80_b
0023D1  3  20 3E 18             jsr tded
0023D4  3  C5 63                cmp z80_b
0023D6  3  F0 03                beq :+
0023D8  3  4C DB 23             jmp a00161
0023DB  3               :
0023DB  3                       ; SPRITEINK command
0023DB  3  A0 08        a00161: ldy #8
0023DD  3  B1 68                lda (z80_ix),y
0023DF  3  C9 C8                cmp #200
0023E1  3  90 03                bcc *+5
0023E3  3  4C C1 2B             jmp a03975
0023E6  3  A9 0F                lda #15
0023E8  3  A0 08                ldy #8
0023EA  3  D1 68                cmp (z80_ix),y
0023EC  3  90 03                bcc *+5
0023EE  3  4C D9 24             jmp a00655
0023F1  3  A9 10                lda #16
0023F3  3  85 62                sta z80_c
0023F5  3  A0 08                ldy #8
0023F7  3  B1 68                lda (z80_ix),y
0023F9  3  38                   sec
0023FA  3  E5 62                sbc z80_c
0023FC  3  A0 08                ldy #8
0023FE  3  91 68                sta (z80_ix),y
002400  3  A9 02                lda #2
002402  3  A0 06                ldy #6
002404  3  D1 68                cmp (z80_ix),y
002406  3  F0 03                beq *+5
002408  3  4C 44 24             jmp a00386
00240B  3  A9 01                lda #1
00240D  3  CD 2F 0E             cmp vare
002410  3  F0 03                beq *+5
002412  3  4C 20 24             jmp a00305
002415  3  20 C1 17             jsr cangr
002418  3  F0 03                beq :+
00241A  3  4C 20 24             jmp a00298
00241D  3               :
00241D  3  4C 20 24             jmp a00305
002420  3               a00298: ; SPRITEINK command
002420  3  A9 03        a00305: lda #3
002422  3  A0 06                ldy #6
002424  3  D1 68                cmp (z80_ix),y
002426  3  F0 03                beq *+5
002428  3  4C 36 24             jmp a00352
00242B  3  20 AD 17             jsr cangl
00242E  3  F0 03                beq :+
002430  3  4C 36 24             jmp a00345
002433  3               :
002433  3  4C 36 24             jmp a00352
002436  3               a00345: ; SPRITEINK command
002436  3  A9 06        a00352: lda #CUSTOM
002438  3  85 63                sta z80_b
00243A  3  20 3E 18             jsr tded
00243D  3  C5 63                cmp z80_b
00243F  3  F0 03                beq :+
002441  3  4C 44 24             jmp a00386
002444  3               :
002444  3                       ; SPRITEINK command
002444  3  A9 00        a00386: lda #0
002446  3  8D 3B 0E             sta varq
002449  3  AD 45 0E             lda clock
00244C  3  C9 32                cmp #50
00244E  3  90 03                bcc *+5
002450  3  4C 58 24             jmp a00420
002453  3  A9 01                lda #1
002455  3  8D 3B 0E             sta varq
002458  3  A9 64        a00420: lda #100
00245A  3  CD 45 0E             cmp clock
00245D  3  90 03                bcc *+5
00245F  3  4C 71 24             jmp a00463
002462  3  AD 45 0E             lda clock
002465  3  C9 96                cmp #150
002467  3  90 03                bcc *+5
002469  3  4C 71 24             jmp a00463
00246C  3  A9 01                lda #1
00246E  3  8D 3B 0E             sta varq
002471  3  A9 C8        a00463: lda #200
002473  3  CD 45 0E             cmp clock
002476  3  90 03                bcc *+5
002478  3  4C 80 24             jmp a00488
00247B  3  A9 01                lda #1
00247D  3  8D 3B 0E             sta varq
002480  3  A9 00        a00488: lda #0
002482  3  CD 3B 0E             cmp varq
002485  3  F0 03                beq *+5
002487  3  4C AA 24             jmp a00562
00248A  3  A9 01                lda #1
00248C  3  20 D1 11             jsr getob
00248F  3  A9 00                lda #0
002491  3  20 D1 11             jsr getob
002494  3  A0 09                ldy #9
002496  3  B1 68                lda (z80_ix),y
002498  3  8D 4E 0E             sta dispx
00249B  3  A0 08                ldy #8
00249D  3  B1 68                lda (z80_ix),y
00249F  3  8D 4F 0E             sta dispy
0024A2  3  A9 00                lda #0
0024A4  3  20 34 12             jsr drpob
0024A7  3  4C C7 24             jmp a00615
0024AA  3  A9 01        a00562: lda #1
0024AC  3  20 D1 11             jsr getob
0024AF  3  A9 00                lda #0
0024B1  3  20 D1 11             jsr getob
0024B4  3  A0 09                ldy #9
0024B6  3  B1 68                lda (z80_ix),y
0024B8  3  8D 4E 0E             sta dispx
0024BB  3  A0 08                ldy #8
0024BD  3  B1 68                lda (z80_ix),y
0024BF  3  8D 4F 0E             sta dispy
0024C2  3  A9 01                lda #1
0024C4  3  20 34 12             jsr drpob
0024C7  3  A9 10        a00615: lda #16
0024C9  3  85 62                sta z80_c
0024CB  3  A0 08                ldy #8
0024CD  3  B1 68                lda (z80_ix),y
0024CF  3  18                   clc
0024D0  3  65 62                adc z80_c
0024D2  3  A0 08                ldy #8
0024D4  3  91 68                sta (z80_ix),y
0024D6  3  4C E3 24             jmp a00671
0024D9  3  A9 00        a00655: lda #0
0024DB  3  20 D1 11             jsr getob
0024DE  3  A9 01                lda #1
0024E0  3  20 D1 11             jsr getob
0024E3  3  A0 0A        a00671: ldy #10
0024E5  3  B1 68                lda (z80_ix),y
0024E7  3  8D 39 0E             sta varo
0024EA  3  A0 0A                ldy #10
0024EC  3  B1 68                lda (z80_ix),y
0024EE  3  8D 3A 0E             sta varp
0024F1  3  AD 39 0E             lda varo
0024F4  3  4A                   lsr a
0024F5  3  4A                   lsr a
0024F6  3  4A                   lsr a
0024F7  3  4A                   lsr a
0024F8  3  8D 39 0E             sta varo
0024FB  3  AD 39 0E             lda varo
0024FE  3  8D 3B 0E             sta varq
002501  3  AD 3B 0E             lda varq
002504  3  0A                   asl a
002505  3  0A                   asl a
002506  3  0A                   asl a
002507  3  0A                   asl a
002508  3  8D 3B 0E             sta varq
00250B  3  AD 3B 0E             lda varq
00250E  3  85 62                sta z80_c
002510  3  AD 3A 0E             lda varp
002513  3  38                   sec
002514  3  E5 62                sbc z80_c
002516  3  8D 3A 0E             sta varp
002519  3  A9 01                lda #1
00251B  3  CD 32 0E             cmp varh
00251E  3  F0 03                beq *+5
002520  3  4C 47 25             jmp a00867
002523  3  A9 32                lda #<50
002525  3  85 66                sta z80_l
002527  3  A9 00                lda #>50
002529  3  85 67                sta z80_h
00252B  3  20 E2 13             jsr addsc
00252E  3  A9 0A                lda #10
002530  3  8D 39 0E             sta varo
002533  3  A9 02                lda #2
002535  3  85 62                sta z80_c
002537  3  A0 08                ldy #8
002539  3  B1 68                lda (z80_ix),y
00253B  3  38                   sec
00253C  3  E5 62                sbc z80_c
00253E  3  A0 08                ldy #8
002540  3  91 68                sta (z80_ix),y
002542  3  A9 00                lda #0
002544  3  8D 32 0E             sta varh
002547  3  A9 08        a00867: lda #8
002549  3  CD 3A 0E             cmp varp
00254C  3  F0 03                beq *+5
00254E  3  4C 56 25             jmp a00892
002551  3  A9 00                lda #0
002553  3  8D 3A 0E             sta varp
002556  3  A9 08        a00892: lda #8
002558  3  CD 39 0E             cmp varo
00255B  3  F0 03                beq *+5
00255D  3  4C 65 25             jmp a00917
002560  3  A9 00                lda #0
002562  3  8D 39 0E             sta varo
002565  3  A0 09        a00917: ldy #9
002567  3  B1 68                lda (z80_ix),y
002569  3  C9 04                cmp #4
00256B  3  90 03                bcc *+5
00256D  3  4C 76 25             jmp a00953
002570  3  A9 F0                lda #240
002572  3  A0 09                ldy #9
002574  3  91 68                sta (z80_ix),y
002576  3  A0 08        a00953: ldy #8
002578  3  B1 68                lda (z80_ix),y
00257A  3  C9 10                cmp #16
00257C  3  90 03                bcc *+5
00257E  3  4C 8C 25             jmp a00996
002581  3  A9 10                lda #16
002583  3  A0 08                ldy #8
002585  3  91 68                sta (z80_ix),y
002587  3  A9 01                lda #1
002589  3  8D 39 0E             sta varo
00258C  3  A9 F0        a00996: lda #240
00258E  3  A0 09                ldy #9
002590  3  D1 68                cmp (z80_ix),y
002592  3  90 03                bcc *+5
002594  3  4C 9D 25             jmp a01032
002597  3  A9 04                lda #4
002599  3  A0 09                ldy #9
00259B  3  91 68                sta (z80_ix),y
00259D  3  A9 A0        a01032: lda #160
00259F  3  A0 08                ldy #8
0025A1  3  D1 68                cmp (z80_ix),y
0025A3  3  90 03                bcc *+5
0025A5  3  4C AD 25             jmp a01063
0025A8  3  A9 0C                lda #12
0025AA  3  8D 39 0E             sta varo
0025AD  3  AD 39 0E     a01063: lda varo
0025B0  3  C9 08                cmp #8
0025B2  3  90 03                bcc *+5
0025B4  3  4C 11 26             jmp a01252
0025B7  3  A9 00                lda #0
0025B9  3  CD 39 0E             cmp varo
0025BC  3  90 03                bcc *+5
0025BE  3  4C D4 25             jmp a01136
0025C1  3  20 75 17             jsr cangd
0025C4  3  F0 03                beq :+
0025C6  3  4C D4 25             jmp a01136
0025C9  3               :
0025C9  3  A0 08                ldy #8
0025CB  3  B1 68                lda (z80_ix),y
0025CD  3  18                   clc
0025CE  3  69 01                adc #1
0025D0  3  A0 08                ldy #8
0025D2  3  91 68                sta (z80_ix),y
0025D4  3  A9 01        a01136: lda #1
0025D6  3  CD 39 0E             cmp varo
0025D9  3  90 03                bcc *+5
0025DB  3  4C F1 25             jmp a01192
0025DE  3  20 75 17             jsr cangd
0025E1  3  F0 03                beq :+
0025E3  3  4C F1 25             jmp a01192
0025E6  3               :
0025E6  3  A0 08                ldy #8
0025E8  3  B1 68                lda (z80_ix),y
0025EA  3  18                   clc
0025EB  3  69 01                adc #1
0025ED  3  A0 08                ldy #8
0025EF  3  91 68                sta (z80_ix),y
0025F1  3  A9 02        a01192: lda #2
0025F3  3  CD 39 0E             cmp varo
0025F6  3  90 03                bcc *+5
0025F8  3  4C 0E 26             jmp a01248
0025FB  3  20 75 17             jsr cangd
0025FE  3  F0 03                beq :+
002600  3  4C 0E 26             jmp a01248
002603  3               :
002603  3  A0 08                ldy #8
002605  3  B1 68                lda (z80_ix),y
002607  3  18                   clc
002608  3  69 01                adc #1
00260A  3  A0 08                ldy #8
00260C  3  91 68                sta (z80_ix),y
00260E  3  4C C1 26     a01248: jmp a01600
002611  3  A9 08        a01252: lda #8
002613  3  CD 39 0E             cmp varo
002616  3  90 03                bcc *+5
002618  3  4C 56 26             jmp a01391
00261B  3  A9 00                lda #0
00261D  3  8D 3B 0E             sta varq
002620  3  A9 0F                lda #15
002622  3  A0 08                ldy #8
002624  3  D1 68                cmp (z80_ix),y
002626  3  90 03                bcc *+5
002628  3  4C 3F 26             jmp a01342
00262B  3  A9 10                lda #16
00262D  3  85 62                sta z80_c
00262F  3  A0 08                ldy #8
002631  3  B1 68                lda (z80_ix),y
002633  3  38                   sec
002634  3  E5 62                sbc z80_c
002636  3  A0 08                ldy #8
002638  3  91 68                sta (z80_ix),y
00263A  3  A9 01                lda #1
00263C  3  8D 3B 0E             sta varq
00263F  3  20 3D 17     a01342: jsr cangu
002642  3  F0 03                beq :+
002644  3  4C 56 26             jmp a01391
002647  3               :
002647  3  A9 FF                lda #255
002649  3  85 62                sta z80_c
00264B  3  A0 08                ldy #8
00264D  3  B1 68                lda (z80_ix),y
00264F  3  18                   clc
002650  3  65 62                adc z80_c
002652  3  A0 08                ldy #8
002654  3  91 68                sta (z80_ix),y
002656  3  A9 09        a01391: lda #9
002658  3  CD 39 0E             cmp varo
00265B  3  90 03                bcc *+5
00265D  3  4C 7F 26             jmp a01469
002660  3  20 3D 17             jsr cangu
002663  3  F0 03                beq :+
002665  3  4C 7A 26             jmp a01461
002668  3               :
002668  3  A9 FF                lda #255
00266A  3  85 62                sta z80_c
00266C  3  A0 08                ldy #8
00266E  3  B1 68                lda (z80_ix),y
002670  3  18                   clc
002671  3  65 62                adc z80_c
002673  3  A0 08                ldy #8
002675  3  91 68                sta (z80_ix),y
002677  3  4C 7F 26             jmp a01469
00267A  3  A9 01        a01461: lda #1
00267C  3  8D 39 0E             sta varo
00267F  3  A9 0A        a01469: lda #10
002681  3  CD 39 0E             cmp varo
002684  3  90 03                bcc *+5
002686  3  4C A8 26             jmp a01548
002689  3  20 3D 17             jsr cangu
00268C  3  F0 03                beq :+
00268E  3  4C A3 26             jmp a01540
002691  3               :
002691  3  A9 FF                lda #255
002693  3  85 62                sta z80_c
002695  3  A0 08                ldy #8
002697  3  B1 68                lda (z80_ix),y
002699  3  18                   clc
00269A  3  65 62                adc z80_c
00269C  3  A0 08                ldy #8
00269E  3  91 68                sta (z80_ix),y
0026A0  3  4C A8 26             jmp a01548
0026A3  3  A9 01        a01540: lda #1
0026A5  3  8D 39 0E             sta varo
0026A8  3  A9 01        a01548: lda #1
0026AA  3  CD 3B 0E             cmp varq
0026AD  3  F0 03                beq *+5
0026AF  3  4C C1 26             jmp a01600
0026B2  3  A9 10                lda #16
0026B4  3  85 62                sta z80_c
0026B6  3  A0 08                ldy #8
0026B8  3  B1 68                lda (z80_ix),y
0026BA  3  18                   clc
0026BB  3  65 62                adc z80_c
0026BD  3  A0 08                ldy #8
0026BF  3  91 68                sta (z80_ix),y
0026C1  3  AD 3A 0E     a01600: lda varp
0026C4  3  C9 08                cmp #8
0026C6  3  90 03                bcc *+5
0026C8  3  4C 3D 27             jmp a01828
0026CB  3  A9 00                lda #0
0026CD  3  CD 3A 0E             cmp varp
0026D0  3  90 03                bcc *+5
0026D2  3  4C F0 26             jmp a01685
0026D5  3  20 C1 17             jsr cangr
0026D8  3  F0 03                beq :+
0026DA  3  4C EB 26             jmp a01677
0026DD  3               :
0026DD  3  A0 09                ldy #9
0026DF  3  B1 68                lda (z80_ix),y
0026E1  3  18                   clc
0026E2  3  69 01                adc #1
0026E4  3  A0 09                ldy #9
0026E6  3  91 68                sta (z80_ix),y
0026E8  3  4C F0 26             jmp a01685
0026EB  3  A9 0A        a01677: lda #10
0026ED  3  8D 3A 0E             sta varp
0026F0  3  A9 01        a01685: lda #1
0026F2  3  CD 3A 0E             cmp varp
0026F5  3  90 03                bcc *+5
0026F7  3  4C 15 27             jmp a01754
0026FA  3  20 C1 17             jsr cangr
0026FD  3  F0 03                beq :+
0026FF  3  4C 10 27             jmp a01746
002702  3               :
002702  3  A0 09                ldy #9
002704  3  B1 68                lda (z80_ix),y
002706  3  18                   clc
002707  3  69 01                adc #1
002709  3  A0 09                ldy #9
00270B  3  91 68                sta (z80_ix),y
00270D  3  4C 15 27             jmp a01754
002710  3  A9 0A        a01746: lda #10
002712  3  8D 3A 0E             sta varp
002715  3  A9 02        a01754: lda #2
002717  3  CD 3A 0E             cmp varp
00271A  3  90 03                bcc *+5
00271C  3  4C 3A 27             jmp a01823
00271F  3  20 C1 17             jsr cangr
002722  3  F0 03                beq :+
002724  3  4C 35 27             jmp a01815
002727  3               :
002727  3  A0 09                ldy #9
002729  3  B1 68                lda (z80_ix),y
00272B  3  18                   clc
00272C  3  69 01                adc #1
00272E  3  A0 09                ldy #9
002730  3  91 68                sta (z80_ix),y
002732  3  4C 3A 27             jmp a01823
002735  3  A9 0A        a01815: lda #10
002737  3  8D 3A 0E             sta varp
00273A  3  4C B8 27     a01823: jmp a02063
00273D  3  A9 08        a01828: lda #8
00273F  3  CD 3A 0E             cmp varp
002742  3  90 03                bcc *+5
002744  3  4C 66 27             jmp a01906
002747  3  20 AD 17             jsr cangl
00274A  3  F0 03                beq :+
00274C  3  4C 61 27             jmp a01898
00274F  3               :
00274F  3  A9 FF                lda #255
002751  3  85 62                sta z80_c
002753  3  A0 09                ldy #9
002755  3  B1 68                lda (z80_ix),y
002757  3  18                   clc
002758  3  65 62                adc z80_c
00275A  3  A0 09                ldy #9
00275C  3  91 68                sta (z80_ix),y
00275E  3  4C 66 27             jmp a01906
002761  3  A9 02        a01898: lda #2
002763  3  8D 3A 0E             sta varp
002766  3  A9 09        a01906: lda #9
002768  3  CD 3A 0E             cmp varp
00276B  3  90 03                bcc *+5
00276D  3  4C 8F 27             jmp a01985
002770  3  20 AD 17             jsr cangl
002773  3  F0 03                beq :+
002775  3  4C 8A 27             jmp a01977
002778  3               :
002778  3  A9 FF                lda #255
00277A  3  85 62                sta z80_c
00277C  3  A0 09                ldy #9
00277E  3  B1 68                lda (z80_ix),y
002780  3  18                   clc
002781  3  65 62                adc z80_c
002783  3  A0 09                ldy #9
002785  3  91 68                sta (z80_ix),y
002787  3  4C 8F 27             jmp a01985
00278A  3  A9 02        a01977: lda #2
00278C  3  8D 3A 0E             sta varp
00278F  3  A9 0A        a01985: lda #10
002791  3  CD 3A 0E             cmp varp
002794  3  90 03                bcc *+5
002796  3  4C B8 27             jmp a02063
002799  3  20 AD 17             jsr cangl
00279C  3  F0 03                beq :+
00279E  3  4C B3 27             jmp a02055
0027A1  3               :
0027A1  3  A9 FF                lda #255
0027A3  3  85 62                sta z80_c
0027A5  3  A0 09                ldy #9
0027A7  3  B1 68                lda (z80_ix),y
0027A9  3  18                   clc
0027AA  3  65 62                adc z80_c
0027AC  3  A0 09                ldy #9
0027AE  3  91 68                sta (z80_ix),y
0027B0  3  4C B8 27             jmp a02063
0027B3  3  A9 02        a02055: lda #2
0027B5  3  8D 3A 0E             sta varp
0027B8  3  A9 00        a02063: lda #0
0027BA  3  CD 3A 0E             cmp varp
0027BD  3  90 03                bcc *+5
0027BF  3  4C 1B 28             jmp a02234
0027C2  3  20 75 17             jsr cangd
0027C5  3  F0 03                beq :+
0027C7  3  4C CD 27             jmp a02098
0027CA  3               :
0027CA  3  4C 1B 28             jmp a02234
0027CD  3  A0 09        a02098: ldy #9
0027CF  3  B1 68                lda (z80_ix),y
0027D1  3  CD 2C 0E             cmp varb
0027D4  3  90 03                bcc *+5
0027D6  3  4C D9 27             jmp a02121
0027D9  3  AD 2C 0E     a02121: lda varb
0027DC  3  A0 09                ldy #9
0027DE  3  D1 68                cmp (z80_ix),y
0027E0  3  90 03                bcc *+5
0027E2  3  4C E5 27             jmp a02143
0027E5  3  A9 00        a02143: lda #0
0027E7  3  8D 3B 0E             sta varq
0027EA  3  A9 00                lda #0
0027EC  3  CD 2D 0E             cmp varc
0027EF  3  F0 03                beq *+5
0027F1  3  4C F9 27             jmp a02176
0027F4  3  A9 01                lda #1
0027F6  3  8D 3B 0E             sta varq
0027F9  3  A9 02        a02176: lda #2
0027FB  3  CD 2D 0E             cmp varc
0027FE  3  F0 03                beq *+5
002800  3  4C 08 28             jmp a02201
002803  3  A9 01                lda #1
002805  3  8D 3B 0E             sta varq
002808  3  A9 01        a02201: lda #1
00280A  3  CD 3B 0E             cmp varq
00280D  3  F0 03                beq *+5
00280F  3  4C 1B 28             jmp a02234
002812  3  A9 05                lda #5
002814  3  0A                   asl a
002815  3  8D E4 0E             sta sndtyp
002818  3  20 46 1E             jsr animsp
00281B  3  AD 1E 0E     a02234: lda joyval
00281E  3  29 01                and #1
002820  3  F0 03                beq :+
002822  3  4C DC 28             jmp a02577
002825  3               :
002825  3  A9 08                lda #8
002827  3  CD 3A 0E             cmp varp
00282A  3  90 03                bcc *+5
00282C  3  4C 90 28             jmp a02448
00282F  3  20 75 17             jsr cangd
002832  3  F0 03                beq :+
002834  3  4C 47 28             jmp a02311
002837  3               :
002837  3  A9 FF                lda #255
002839  3  85 62                sta z80_c
00283B  3  AD 3A 0E             lda varp
00283E  3  18                   clc
00283F  3  65 62                adc z80_c
002841  3  8D 3A 0E             sta varp
002844  3  4C 8D 28             jmp a02443
002847  3  AD 1E 0E     a02311: lda joyval
00284A  3  29 02                and #2
00284C  3  F0 03                beq :+
00284E  3  4C 54 28             jmp a02334
002851  3               :
002851  3  4C 8D 28             jmp a02443
002854  3  A9 03        a02334: lda #3
002856  3  A0 06                ldy #6
002858  3  91 68                sta (z80_ix),y
00285A  3  A9 01                lda #1
00285C  3  A0 07                ldy #7
00285E  3  91 68                sta (z80_ix),y
002860  3  A9 02                lda #2
002862  3  CD 2D 0E             cmp varc
002865  3  F0 03                beq *+5
002867  3  4C 70 28             jmp a02389
00286A  3  A9 0A                lda #10
00286C  3  0A                   asl a
00286D  3  8D E4 0E             sta sndtyp
002870  3  A9 00        a02389: lda #0
002872  3  CD 2D 0E             cmp varc
002875  3  F0 03                beq *+5
002877  3  4C 8D 28             jmp a02443
00287A  3  A9 0A                lda #10
00287C  3  0A                   asl a
00287D  3  8D E4 0E             sta sndtyp
002880  3  A9 FF                lda #255
002882  3  85 62                sta z80_c
002884  3  AD 3A 0E             lda varp
002887  3  18                   clc
002888  3  65 62                adc z80_c
00288A  3  8D 3A 0E             sta varp
00288D  3  4C 96 28     a02443: jmp a02461
002890  3  A9 00        a02448: lda #0
002892  3  A0 06                ldy #6
002894  3  91 68                sta (z80_ix),y
002896  3  AD 3A 0E     a02461: lda varp
002899  3  C9 03                cmp #3
00289B  3  90 03                bcc *+5
00289D  3  4C D9 28             jmp a02573
0028A0  3  A9 00                lda #0
0028A2  3  CD 3A 0E             cmp varp
0028A5  3  F0 03                beq *+5
0028A7  3  4C C6 28             jmp a02541
0028AA  3  A9 00                lda #0
0028AC  3  CD 2D 0E             cmp varc
0028AF  3  F0 03                beq *+5
0028B1  3  4C C0 28             jmp a02531
0028B4  3  AD 3A 0E             lda varp
0028B7  3  18                   clc
0028B8  3  69 01                adc #1
0028BA  3  8D 3A 0E             sta varp
0028BD  3  4C C3 28             jmp a02536
0028C0  3  20 46 1E     a02531: jsr animsp
0028C3  3  4C D9 28     a02536: jmp a02573
0028C6  3  A9 00        a02541: lda #0
0028C8  3  CD 2D 0E             cmp varc
0028CB  3  F0 03                beq *+5
0028CD  3  4C D9 28             jmp a02573
0028D0  3  AD 3A 0E             lda varp
0028D3  3  18                   clc
0028D4  3  69 01                adc #1
0028D6  3  8D 3A 0E             sta varp
0028D9  3  4C 49 29     a02573: jmp a02780
0028DC  3  AD 1E 0E     a02577: lda joyval
0028DF  3  29 02                and #2
0028E1  3  F0 03                beq :+
0028E3  3  4C E9 28             jmp a02600
0028E6  3               :
0028E6  3  4C 49 29             jmp a02780
0028E9  3  A9 00        a02600: lda #0
0028EB  3  CD 3A 0E             cmp varp
0028EE  3  90 03                bcc *+5
0028F0  3  4C 49 29             jmp a02780
0028F3  3  20 75 17             jsr cangd
0028F6  3  F0 03                beq :+
0028F8  3  4C FE 28             jmp a02635
0028FB  3               :
0028FB  3  4C 49 29             jmp a02780
0028FE  3  A9 00        a02635: lda #0
002900  3  CD 2D 0E             cmp varc
002903  3  F0 03                beq *+5
002905  3  4C 1B 29             jmp a02688
002908  3  A9 0A                lda #10
00290A  3  0A                   asl a
00290B  3  8D E4 0E             sta sndtyp
00290E  3  A9 FF                lda #255
002910  3  85 62                sta z80_c
002912  3  AD 3A 0E             lda varp
002915  3  18                   clc
002916  3  65 62                adc z80_c
002918  3  8D 3A 0E             sta varp
00291B  3  A9 02        a02688: lda #2
00291D  3  CD 2D 0E             cmp varc
002920  3  F0 03                beq *+5
002922  3  4C 2B 29             jmp a02717
002925  3  A9 0A                lda #10
002927  3  0A                   asl a
002928  3  8D E4 0E             sta sndtyp
00292B  3  A9 02        a02717: lda #2
00292D  3  A0 06                ldy #6
00292F  3  91 68                sta (z80_ix),y
002931  3  A9 01                lda #1
002933  3  A0 07                ldy #7
002935  3  91 68                sta (z80_ix),y
002937  3  A0 09                ldy #9
002939  3  B1 68                lda (z80_ix),y
00293B  3  CD 2C 0E             cmp varb
00293E  3  90 03                bcc *+5
002940  3  4C 49 29             jmp a02780
002943  3  A9 03                lda #3
002945  3  A0 06                ldy #6
002947  3  91 68                sta (z80_ix),y
002949  3  AD 1E 0E     a02780: lda joyval
00294C  3  29 02                and #2
00294E  3  F0 03                beq :+
002950  3  4C 0F 2A             jmp a03131
002953  3               :
002953  3  A9 08                lda #8
002955  3  CD 3A 0E             cmp varp
002958  3  90 03                bcc *+5
00295A  3  4C 70 29             jmp a02846
00295D  3  A9 00                lda #0
00295F  3  CD 2D 0E             cmp varc
002962  3  F0 03                beq *+5
002964  3  4C 70 29             jmp a02846
002967  3  AD 3A 0E             lda varp
00296A  3  18                   clc
00296B  3  69 01                adc #1
00296D  3  8D 3A 0E             sta varp
002970  3  A9 0B        a02846: lda #11
002972  3  CD 3A 0E             cmp varp
002975  3  90 03                bcc *+5
002977  3  4C 7F 29             jmp a02871
00297A  3  A9 0B                lda #11
00297C  3  8D 3A 0E             sta varp
00297F  3  A9 00        a02871: lda #0
002981  3  CD 3A 0E             cmp varp
002984  3  F0 03                beq *+5
002986  3  4C 9E 29             jmp a02922
002989  3  A9 00                lda #0
00298B  3  CD 2D 0E             cmp varc
00298E  3  F0 03                beq *+5
002990  3  4C 9B 29             jmp a02917
002993  3  A9 09                lda #9
002995  3  8D 3A 0E             sta varp
002998  3  4C 9E 29             jmp a02922
00299B  3  20 46 1E     a02917: jsr animsp
00299E  3  AD 3A 0E     a02922: lda varp
0029A1  3  C9 05                cmp #5
0029A3  3  90 03                bcc *+5
0029A5  3  4C 09 2A             jmp a03118
0029A8  3  20 75 17             jsr cangd
0029AB  3  F0 03                beq :+
0029AD  3  4C C0 29             jmp a02982
0029B0  3               :
0029B0  3  A9 FF                lda #255
0029B2  3  85 62                sta z80_c
0029B4  3  AD 3A 0E             lda varp
0029B7  3  18                   clc
0029B8  3  65 62                adc z80_c
0029BA  3  8D 3A 0E             sta varp
0029BD  3  4C 06 2A             jmp a03113
0029C0  3  AD 1E 0E     a02982: lda joyval
0029C3  3  29 01                and #1
0029C5  3  F0 03                beq :+
0029C7  3  4C CD 29             jmp a03004
0029CA  3               :
0029CA  3  4C 06 2A             jmp a03113
0029CD  3  A9 02        a03004: lda #2
0029CF  3  A0 06                ldy #6
0029D1  3  91 68                sta (z80_ix),y
0029D3  3  A9 01                lda #1
0029D5  3  A0 07                ldy #7
0029D7  3  91 68                sta (z80_ix),y
0029D9  3  A9 02                lda #2
0029DB  3  CD 2D 0E             cmp varc
0029DE  3  F0 03                beq *+5
0029E0  3  4C E9 29             jmp a03060
0029E3  3  A9 0A                lda #10
0029E5  3  0A                   asl a
0029E6  3  8D E4 0E             sta sndtyp
0029E9  3  A9 00        a03060: lda #0
0029EB  3  CD 2D 0E             cmp varc
0029EE  3  F0 03                beq *+5
0029F0  3  4C 06 2A             jmp a03113
0029F3  3  A9 0A                lda #10
0029F5  3  0A                   asl a
0029F6  3  8D E4 0E             sta sndtyp
0029F9  3  A9 FF                lda #255
0029FB  3  85 62                sta z80_c
0029FD  3  AD 3A 0E             lda varp
002A00  3  18                   clc
002A01  3  65 62                adc z80_c
002A03  3  8D 3A 0E             sta varp
002A06  3  4C 0F 2A     a03113: jmp a03131
002A09  3  A9 01        a03118: lda #1
002A0B  3  A0 06                ldy #6
002A0D  3  91 68                sta (z80_ix),y
002A0F  3  AD 1E 0E     a03131: lda joyval
002A12  3  29 10                and #16
002A14  3  F0 03                beq :+
002A16  3  4C 60 2A             jmp a03280
002A19  3               :
002A19  3  A9 00                lda #0
002A1B  3  A0 0C                ldy #12
002A1D  3  D1 68                cmp (z80_ix),y
002A1F  3  F0 03                beq *+5
002A21  3  4C 5A 2A             jmp a03267
002A24  3  A9 0A                lda #10
002A26  3  0A                   asl a
002A27  3  8D E4 0E             sta sndtyp
002A2A  3  A9 09                lda #9
002A2C  3  CD 39 0E             cmp varo
002A2F  3  90 03                bcc *+5
002A31  3  4C 4B 2A             jmp a03242
002A34  3  AD 39 0E             lda varo
002A37  3  C9 0D                cmp #13
002A39  3  90 03                bcc *+5
002A3B  3  4C 4B 2A             jmp a03242
002A3E  3  A9 02                lda #2
002A40  3  85 62                sta z80_c
002A42  3  AD 39 0E             lda varo
002A45  3  18                   clc
002A46  3  65 62                adc z80_c
002A48  3  8D 39 0E             sta varo
002A4B  3  AD 39 0E     a03242: lda varo
002A4E  3  C9 05                cmp #5
002A50  3  90 03                bcc *+5
002A52  3  4C 5A 2A             jmp a03267
002A55  3  A9 0B                lda #11
002A57  3  8D 39 0E             sta varo
002A5A  3  A9 02        a03267: lda #2
002A5C  3  A0 0C                ldy #12
002A5E  3  91 68                sta (z80_ix),y
002A60  3  A9 00        a03280: lda #0
002A62  3  8D 44 0E             sta chary
002A65  3  A9 00                lda #0
002A67  3  8D 43 0E             sta charx
002A6A  3  A9 00                lda #0
002A6C  3  A0 0C                ldy #12
002A6E  3  D1 68                cmp (z80_ix),y
002A70  3  90 03                bcc *+5
002A72  3  4C 9C 2A             jmp a03399
002A75  3  AD 1E 0E             lda joyval
002A78  3  29 10                and #16
002A7A  3  F0 03                beq :+
002A7C  3  4C 82 2A             jmp a03341
002A7F  3               :
002A7F  3  4C 9C 2A             jmp a03399
002A82  3  A0 0C        a03341: ldy #12
002A84  3  B1 68                lda (z80_ix),y
002A86  3  C9 07                cmp #7
002A88  3  90 03                bcc *+5
002A8A  3  4C 9C 2A             jmp a03399
002A8D  3  A9 FF                lda #255
002A8F  3  85 62                sta z80_c
002A91  3  A0 0C                ldy #12
002A93  3  B1 68                lda (z80_ix),y
002A95  3  18                   clc
002A96  3  65 62                adc z80_c
002A98  3  A0 0C                ldy #12
002A9A  3  91 68                sta (z80_ix),y
002A9C  3  20 75 17     a03399: jsr cangd
002A9F  3  F0 03                beq :+
002AA1  3  4C 3D 2B             jmp a03707
002AA4  3               :
002AA4  3  A0 06                ldy #6
002AA6  3  B1 68                lda (z80_ix),y
002AA8  3  C9 02                cmp #2
002AAA  3  90 03                bcc *+5
002AAC  3  4C BE 2A             jmp a03470
002AAF  3  A9 02                lda #2
002AB1  3  85 62                sta z80_c
002AB3  3  A0 06                ldy #6
002AB5  3  B1 68                lda (z80_ix),y
002AB7  3  18                   clc
002AB8  3  65 62                adc z80_c
002ABA  3  A0 06                ldy #6
002ABC  3  91 68                sta (z80_ix),y
002ABE  3  AD 1E 0E     a03470: lda joyval
002AC1  3  29 10                and #16
002AC3  3  F0 03                beq :+
002AC5  3  4C 00 2B             jmp a03599
002AC8  3               :
002AC8  3  A0 07                ldy #7
002ACA  3  B1 68                lda (z80_ix),y
002ACC  3  C9 02                cmp #2
002ACE  3  90 03                bcc *+5
002AD0  3  4C FD 2A             jmp a03594
002AD3  3  A9 00                lda #0
002AD5  3  CD 2D 0E             cmp varc
002AD8  3  F0 03                beq *+5
002ADA  3  4C E8 2A             jmp a03552
002ADD  3  A0 07                ldy #7
002ADF  3  B1 68                lda (z80_ix),y
002AE1  3  18                   clc
002AE2  3  69 01                adc #1
002AE4  3  A0 07                ldy #7
002AE6  3  91 68                sta (z80_ix),y
002AE8  3  A9 02        a03552: lda #2
002AEA  3  CD 2D 0E             cmp varc
002AED  3  F0 03                beq *+5
002AEF  3  4C FD 2A             jmp a03594
002AF2  3  A0 07                ldy #7
002AF4  3  B1 68                lda (z80_ix),y
002AF6  3  18                   clc
002AF7  3  69 01                adc #1
002AF9  3  A0 07                ldy #7
002AFB  3  91 68                sta (z80_ix),y
002AFD  3  4C 06 2B     a03594: jmp a03612
002B00  3  A9 00        a03599: lda #0
002B02  3  A0 07                ldy #7
002B04  3  91 68                sta (z80_ix),y
002B06  3  A9 00        a03612: lda #0
002B08  3  CD 2D 0E             cmp varc
002B0B  3  F0 03                beq *+5
002B0D  3  4C 3A 2B             jmp a03703
002B10  3  A9 08                lda #8
002B12  3  CD 39 0E             cmp varo
002B15  3  90 03                bcc *+5
002B17  3  4C 27 2B             jmp a03671
002B1A  3  A9 FF                lda #255
002B1C  3  85 62                sta z80_c
002B1E  3  AD 39 0E             lda varo
002B21  3  18                   clc
002B22  3  65 62                adc z80_c
002B24  3  8D 39 0E             sta varo
002B27  3  AD 39 0E     a03671: lda varo
002B2A  3  C9 04                cmp #4
002B2C  3  90 03                bcc *+5
002B2E  3  4C 3A 2B             jmp a03703
002B31  3  AD 39 0E             lda varo
002B34  3  18                   clc
002B35  3  69 01                adc #1
002B37  3  8D 39 0E             sta varo
002B3A  3  4C 94 2B     a03703: jmp a03886
002B3D  3  A9 00        a03707: lda #0
002B3F  3  A0 0C                ldy #12
002B41  3  D1 68                cmp (z80_ix),y
002B43  3  F0 03                beq *+5
002B45  3  4C 4D 2B             jmp a03738
002B48  3  A9 00                lda #0
002B4A  3  8D 39 0E             sta varo
002B4D  3  A9 00        a03738: lda #0
002B4F  3  CD 3A 0E             cmp varp
002B52  3  F0 03                beq *+5
002B54  3  4C 94 2B             jmp a03886
002B57  3  A9 01                lda #1
002B59  3  A0 06                ldy #6
002B5B  3  D1 68                cmp (z80_ix),y
002B5D  3  90 03                bcc *+5
002B5F  3  4C 7A 2B             jmp a03829
002B62  3  A9 02                lda #2
002B64  3  85 62                sta z80_c
002B66  3  A0 06                ldy #6
002B68  3  B1 68                lda (z80_ix),y
002B6A  3  38                   sec
002B6B  3  E5 62                sbc z80_c
002B6D  3  A0 06                ldy #6
002B6F  3  91 68                sta (z80_ix),y
002B71  3  A9 00                lda #0
002B73  3  A0 07                ldy #7
002B75  3  91 68                sta (z80_ix),y
002B77  3  4C 94 2B             jmp a03886
002B7A  3  A9 01        a03829: lda #1
002B7C  3  A0 06                ldy #6
002B7E  3  D1 68                cmp (z80_ix),y
002B80  3  90 03                bcc *+5
002B82  3  4C 94 2B             jmp a03886
002B85  3  A9 FE                lda #254
002B87  3  85 62                sta z80_c
002B89  3  A0 06                ldy #6
002B8B  3  B1 68                lda (z80_ix),y
002B8D  3  18                   clc
002B8E  3  65 62                adc z80_c
002B90  3  A0 06                ldy #6
002B92  3  91 68                sta (z80_ix),y
002B94  3  AD 39 0E     a03886: lda varo
002B97  3  0A                   asl a
002B98  3  0A                   asl a
002B99  3  0A                   asl a
002B9A  3  0A                   asl a
002B9B  3  8D 39 0E             sta varo
002B9E  3  AD 3A 0E             lda varp
002BA1  3  85 62                sta z80_c
002BA3  3  AD 39 0E             lda varo
002BA6  3  18                   clc
002BA7  3  65 62                adc z80_c
002BA9  3  8D 39 0E             sta varo
002BAC  3  AD 39 0E             lda varo
002BAF  3  A0 0A                ldy #10
002BB1  3  91 68                sta (z80_ix),y
002BB3  3  A0 08                ldy #8
002BB5  3  B1 68                lda (z80_ix),y
002BB7  3  8D 2B 0E             sta vara
002BBA  3  A0 09                ldy #9
002BBC  3  B1 68                lda (z80_ix),y
002BBE  3  8D 2C 0E             sta varb
002BC1  3  A9 01        a03975: lda #1
002BC3  3  CD 2F 0E             cmp vare
002BC6  3  F0 03                beq *+5
002BC8  3  4C F4 2B             jmp a04098
002BCB  3                       ; SPRITEINK command
002BCB  3  A9 0F                lda #15
002BCD  3  A0 08                ldy #8
002BCF  3  D1 68                cmp (z80_ix),y
002BD1  3  90 03                bcc *+5
002BD3  3  4C F4 2B             jmp a04098
002BD6  3  A9 10                lda #16
002BD8  3  85 62                sta z80_c
002BDA  3  A0 08                ldy #8
002BDC  3  B1 68                lda (z80_ix),y
002BDE  3  38                   sec
002BDF  3  E5 62                sbc z80_c
002BE1  3  A0 08                ldy #8
002BE3  3  91 68                sta (z80_ix),y
002BE5  3                       ; SPRITEINK command
002BE5  3  A9 10                lda #16
002BE7  3  85 62                sta z80_c
002BE9  3  A0 08                ldy #8
002BEB  3  B1 68                lda (z80_ix),y
002BED  3  18                   clc
002BEE  3  65 62                adc z80_c
002BF0  3  A0 08                ldy #8
002BF2  3  91 68                sta (z80_ix),y
002BF4  3  60           a04098: rts
002BF5  3               evnt01:
002BF5  3  A0 0A                ldy #10
002BF7  3  B1 68                lda (z80_ix),y
002BF9  3  8D 39 0E             sta varo
002BFC  3  A0 0A                ldy #10
002BFE  3  B1 68                lda (z80_ix),y
002C00  3  8D 46 0E             sta varrnd
002C03  3  AD 46 0E             lda varrnd
002C06  3  4A                   lsr a
002C07  3  8D 46 0E             sta varrnd
002C0A  3  AD 46 0E             lda varrnd
002C0D  3  8D 3A 0E             sta varp
002C10  3  AD 46 0E             lda varrnd
002C13  3  0A                   asl a
002C14  3  8D 46 0E             sta varrnd
002C17  3  AD 46 0E             lda varrnd
002C1A  3  85 62                sta z80_c
002C1C  3  AD 39 0E             lda varo
002C1F  3  38                   sec
002C20  3  E5 62                sbc z80_c
002C22  3  8D 39 0E             sta varo
002C25  3  AD 3A 0E             lda varp
002C28  3  8D 46 0E             sta varrnd
002C2B  3  AD 46 0E             lda varrnd
002C2E  3  4A                   lsr a
002C2F  3  8D 46 0E             sta varrnd
002C32  3  AD 46 0E             lda varrnd
002C35  3  0A                   asl a
002C36  3  8D 46 0E             sta varrnd
002C39  3  AD 46 0E             lda varrnd
002C3C  3  85 62                sta z80_c
002C3E  3  AD 3A 0E             lda varp
002C41  3  38                   sec
002C42  3  E5 62                sbc z80_c
002C44  3  8D 3A 0E             sta varp
002C47  3  AD 46 0E             lda varrnd
002C4A  3  4A                   lsr a
002C4B  3  8D 46 0E             sta varrnd
002C4E  3  AD 46 0E             lda varrnd
002C51  3  A0 0A                ldy #10
002C53  3  91 68                sta (z80_ix),y
002C55  3  A9 00                lda #0
002C57  3  8D 46 0E             sta varrnd
002C5A  3  A9 00                lda #0
002C5C  3  85 63                sta z80_b
002C5E  3  20 87 1E             jsr sktyp
002C61  3  B0 03                bcs :+
002C63  3  4C 77 2C             jmp b00239
002C66  3               :
002C66  3  AD 2B 0E             lda vara
002C69  3  A0 08                ldy #8
002C6B  3  D1 68                cmp (z80_ix),y
002C6D  3  90 03                bcc *+5
002C6F  3  4C 77 2C             jmp b00239
002C72  3  A9 01                lda #1
002C74  3  8D 46 0E             sta varrnd
002C77  3  A9 10        b00239: lda #16
002C79  3  85 62                sta z80_c
002C7B  3  A0 08                ldy #8
002C7D  3  B1 68                lda (z80_ix),y
002C7F  3  38                   sec
002C80  3  E5 62                sbc z80_c
002C82  3  A0 08                ldy #8
002C84  3  91 68                sta (z80_ix),y
002C86  3  A9 00                lda #0
002C88  3  85 63                sta z80_b
002C8A  3  20 87 1E             jsr sktyp
002C8D  3  B0 03                bcs :+
002C8F  3  4C A3 2C             jmp b00327
002C92  3               :
002C92  3  AD 2B 0E             lda vara
002C95  3  A0 08                ldy #8
002C97  3  D1 68                cmp (z80_ix),y
002C99  3  90 03                bcc *+5
002C9B  3  4C A3 2C             jmp b00327
002C9E  3  A9 01                lda #1
002CA0  3  8D 46 0E             sta varrnd
002CA3  3  A9 10        b00327: lda #16
002CA5  3  85 62                sta z80_c
002CA7  3  A0 08                ldy #8
002CA9  3  B1 68                lda (z80_ix),y
002CAB  3  18                   clc
002CAC  3  65 62                adc z80_c
002CAE  3  A0 08                ldy #8
002CB0  3  91 68                sta (z80_ix),y
002CB2  3  A9 01                lda #1
002CB4  3  CD 46 0E             cmp varrnd
002CB7  3  F0 03                beq *+5
002CB9  3  4C FC 2C             jmp b00525
002CBC  3  A9 04                lda #4
002CBE  3  85 62                sta z80_c
002CC0  3  A0 0A                ldy #10
002CC2  3  B1 68                lda (z80_ix),y
002CC4  3  18                   clc
002CC5  3  65 62                adc z80_c
002CC7  3  A0 0A                ldy #10
002CC9  3  91 68                sta (z80_ix),y
002CCB  3  A0 0A                ldy #10
002CCD  3  B1 68                lda (z80_ix),y
002CCF  3  20 D1 11             jsr getob
002CD2  3  A9 04                lda #4
002CD4  3  85 62                sta z80_c
002CD6  3  A0 0A                ldy #10
002CD8  3  B1 68                lda (z80_ix),y
002CDA  3  38                   sec
002CDB  3  E5 62                sbc z80_c
002CDD  3  A0 0A                ldy #10
002CDF  3  91 68                sta (z80_ix),y
002CE1  3  A9 01                lda #1
002CE3  3  8D 32 0E             sta varh
002CE6  3  A9 14                lda #20
002CE8  3  A0 0C                ldy #12
002CEA  3  91 68                sta (z80_ix),y
002CEC  3  A0 0A                ldy #10
002CEE  3  B1 68                lda (z80_ix),y
002CF0  3  0A                   asl a
002CF1  3  A0 0A                ldy #10
002CF3  3  91 68                sta (z80_ix),y
002CF5  3  A9 02                lda #2
002CF7  3  A0 05                ldy #5
002CF9  3  91 68                sta (z80_ix),y
002CFB  3  60                   rts
002CFC  3  A9 14        b00525: lda #20
002CFE  3  85 62                sta z80_c
002D00  3  A0 08                ldy #8
002D02  3  B1 68                lda (z80_ix),y
002D04  3  38                   sec
002D05  3  E5 62                sbc z80_c
002D07  3  A0 08                ldy #8
002D09  3  91 68                sta (z80_ix),y
002D0B  3  20 3D 17             jsr cangu
002D0E  3  F0 03                beq :+
002D10  3  4C 7B 2D             jmp b00757
002D13  3               :
002D13  3  A9 14                lda #20
002D15  3  85 65                sta z80_d
002D17  3  20 63 19             jsr random
002D1A  3  85 67                sta z80_h
002D1C  3  20 3A 11             jsr imul
002D1F  3  A5 67                lda z80_h
002D21  3  8D 46 0E             sta varrnd
002D24  3  A9 00                lda #0
002D26  3  CD 46 0E             cmp varrnd
002D29  3  F0 03                beq *+5
002D2B  3  4C 47 2D             jmp b00665
002D2E  3  A0 08                ldy #8
002D30  3  B1 68                lda (z80_ix),y
002D32  3  CD 2B 0E             cmp vara
002D35  3  90 03                bcc *+5
002D37  3  4C 42 2D             jmp b00657
002D3A  3  A9 00                lda #0
002D3C  3  8D 3A 0E             sta varp
002D3F  3  4C 47 2D             jmp b00665
002D42  3  A9 01        b00657: lda #1
002D44  3  8D 3A 0E             sta varp
002D47  3  A9 14        b00665: lda #20
002D49  3  85 65                sta z80_d
002D4B  3  20 63 19             jsr random
002D4E  3  85 67                sta z80_h
002D50  3  20 3A 11             jsr imul
002D53  3  A5 67                lda z80_h
002D55  3  8D 46 0E             sta varrnd
002D58  3  A9 00                lda #0
002D5A  3  CD 46 0E             cmp varrnd
002D5D  3  F0 03                beq *+5
002D5F  3  4C 7B 2D             jmp b00757
002D62  3  A0 09                ldy #9
002D64  3  B1 68                lda (z80_ix),y
002D66  3  CD 2C 0E             cmp varb
002D69  3  90 03                bcc *+5
002D6B  3  4C 76 2D             jmp b00749
002D6E  3  A9 00                lda #0
002D70  3  8D 39 0E             sta varo
002D73  3  4C 7B 2D             jmp b00757
002D76  3  A9 01        b00749: lda #1
002D78  3  8D 39 0E             sta varo
002D7B  3  A9 14        b00757: lda #20
002D7D  3  85 62                sta z80_c
002D7F  3  A0 08                ldy #8
002D81  3  B1 68                lda (z80_ix),y
002D83  3  18                   clc
002D84  3  65 62                adc z80_c
002D86  3  A0 08                ldy #8
002D88  3  91 68                sta (z80_ix),y
002D8A  3  A9 00                lda #0
002D8C  3  CD 39 0E             cmp varo
002D8F  3  F0 03                beq *+5
002D91  3  4C E1 2D             jmp b00965
002D94  3  A9 10                lda #16
002D96  3  85 62                sta z80_c
002D98  3  A0 09                ldy #9
002D9A  3  B1 68                lda (z80_ix),y
002D9C  3  18                   clc
002D9D  3  65 62                adc z80_c
002D9F  3  A0 09                ldy #9
002DA1  3  91 68                sta (z80_ix),y
002DA3  3  A9 01                lda #1
002DA5  3  85 63                sta z80_b
002DA7  3  20 87 1E             jsr sktyp
002DAA  3  B0 03                bcs :+
002DAC  3  4C B4 2D             jmp b00874
002DAF  3               :
002DAF  3  A9 01                lda #1
002DB1  3  8D 39 0E             sta varo
002DB4  3  A9 10        b00874: lda #16
002DB6  3  85 62                sta z80_c
002DB8  3  A0 09                ldy #9
002DBA  3  B1 68                lda (z80_ix),y
002DBC  3  38                   sec
002DBD  3  E5 62                sbc z80_c
002DBF  3  A0 09                ldy #9
002DC1  3  91 68                sta (z80_ix),y
002DC3  3  20 C1 17             jsr cangr
002DC6  3  F0 03                beq :+
002DC8  3  4C D9 2D             jmp b00953
002DCB  3               :
002DCB  3  A0 09                ldy #9
002DCD  3  B1 68                lda (z80_ix),y
002DCF  3  18                   clc
002DD0  3  69 01                adc #1
002DD2  3  A0 09                ldy #9
002DD4  3  91 68                sta (z80_ix),y
002DD6  3  4C DE 2D             jmp b00961
002DD9  3  A9 01        b00953: lda #1
002DDB  3  8D 39 0E             sta varo
002DDE  3  4C 2B 2E     b00961: jmp b01117
002DE1  3  A9 10        b00965: lda #16
002DE3  3  85 62                sta z80_c
002DE5  3  A0 09                ldy #9
002DE7  3  B1 68                lda (z80_ix),y
002DE9  3  38                   sec
002DEA  3  E5 62                sbc z80_c
002DEC  3  A0 09                ldy #9
002DEE  3  91 68                sta (z80_ix),y
002DF0  3  A9 01                lda #1
002DF2  3  85 63                sta z80_b
002DF4  3  20 87 1E             jsr sktyp
002DF7  3  B0 03                bcs :+
002DF9  3  4C 01 2E             jmp b01030
002DFC  3               :
002DFC  3  A9 00                lda #0
002DFE  3  8D 39 0E             sta varo
002E01  3  A9 10        b01030: lda #16
002E03  3  85 62                sta z80_c
002E05  3  A0 09                ldy #9
002E07  3  B1 68                lda (z80_ix),y
002E09  3  18                   clc
002E0A  3  65 62                adc z80_c
002E0C  3  A0 09                ldy #9
002E0E  3  91 68                sta (z80_ix),y
002E10  3  20 AD 17             jsr cangl
002E13  3  F0 03                beq :+
002E15  3  4C 26 2E             jmp b01109
002E18  3               :
002E18  3  A0 09                ldy #9
002E1A  3  B1 68                lda (z80_ix),y
002E1C  3  38                   sec
002E1D  3  E9 01                sbc #1
002E1F  3  A0 09                ldy #9
002E21  3  91 68                sta (z80_ix),y
002E23  3  4C 2B 2E             jmp b01117
002E26  3  A9 00        b01109: lda #0
002E28  3  8D 39 0E             sta varo
002E2B  3  A9 00        b01117: lda #0
002E2D  3  CD 3A 0E             cmp varp
002E30  3  F0 03                beq *+5
002E32  3  4C A9 2E             jmp b01360
002E35  3  A9 10                lda #16
002E37  3  85 62                sta z80_c
002E39  3  A0 08                ldy #8
002E3B  3  B1 68                lda (z80_ix),y
002E3D  3  18                   clc
002E3E  3  65 62                adc z80_c
002E40  3  A0 08                ldy #8
002E42  3  91 68                sta (z80_ix),y
002E44  3  A9 01                lda #1
002E46  3  85 63                sta z80_b
002E48  3  20 87 1E             jsr sktyp
002E4B  3  B0 03                bcs :+
002E4D  3  4C 55 2E             jmp b01199
002E50  3               :
002E50  3  A9 01                lda #1
002E52  3  8D 3A 0E             sta varp
002E55  3  A9 10        b01199: lda #16
002E57  3  85 62                sta z80_c
002E59  3  A0 08                ldy #8
002E5B  3  B1 68                lda (z80_ix),y
002E5D  3  38                   sec
002E5E  3  E5 62                sbc z80_c
002E60  3  A0 08                ldy #8
002E62  3  91 68                sta (z80_ix),y
002E64  3  A9 01                lda #1
002E66  3  8D 46 0E             sta varrnd
002E69  3  20 75 17             jsr cangd
002E6C  3  F0 03                beq :+
002E6E  3  4C 74 2E             jmp b01260
002E71  3               :
002E71  3  4C 79 2E             jmp b01269
002E74  3  A9 00        b01260: lda #0
002E76  3  8D 46 0E             sta varrnd
002E79  3  A9 8C        b01269: lda #140
002E7B  3  A0 08                ldy #8
002E7D  3  D1 68                cmp (z80_ix),y
002E7F  3  90 03                bcc *+5
002E81  3  4C 89 2E             jmp b01300
002E84  3  A9 00                lda #0
002E86  3  8D 46 0E             sta varrnd
002E89  3  A9 01        b01300: lda #1
002E8B  3  CD 46 0E             cmp varrnd
002E8E  3  F0 03                beq *+5
002E90  3  4C A1 2E             jmp b01348
002E93  3  A0 08                ldy #8
002E95  3  B1 68                lda (z80_ix),y
002E97  3  18                   clc
002E98  3  69 01                adc #1
002E9A  3  A0 08                ldy #8
002E9C  3  91 68                sta (z80_ix),y
002E9E  3  4C A6 2E             jmp b01356
002EA1  3  A9 01        b01348: lda #1
002EA3  3  8D 3A 0E             sta varp
002EA6  3  4C 1A 2F     b01356: jmp b01582
002EA9  3  A9 10        b01360: lda #16
002EAB  3  85 62                sta z80_c
002EAD  3  A0 08                ldy #8
002EAF  3  B1 68                lda (z80_ix),y
002EB1  3  38                   sec
002EB2  3  E5 62                sbc z80_c
002EB4  3  A0 08                ldy #8
002EB6  3  91 68                sta (z80_ix),y
002EB8  3  A9 01                lda #1
002EBA  3  85 63                sta z80_b
002EBC  3  20 87 1E             jsr sktyp
002EBF  3  B0 03                bcs :+
002EC1  3  4C C9 2E             jmp b01425
002EC4  3               :
002EC4  3  A9 00                lda #0
002EC6  3  8D 3A 0E             sta varp
002EC9  3  A9 01        b01425: lda #1
002ECB  3  8D 46 0E             sta varrnd
002ECE  3  20 3D 17             jsr cangu
002ED1  3  F0 03                beq :+
002ED3  3  4C D9 2E             jmp b01452
002ED6  3               :
002ED6  3  4C DE 2E             jmp b01460
002ED9  3  A9 00        b01452: lda #0
002EDB  3  8D 46 0E             sta varrnd
002EDE  3  A9 10        b01460: lda #16
002EE0  3  85 62                sta z80_c
002EE2  3  A0 08                ldy #8
002EE4  3  B1 68                lda (z80_ix),y
002EE6  3  18                   clc
002EE7  3  65 62                adc z80_c
002EE9  3  A0 08                ldy #8
002EEB  3  91 68                sta (z80_ix),y
002EED  3  A9 00                lda #0
002EEF  3  A0 08                ldy #8
002EF1  3  D1 68                cmp (z80_ix),y
002EF3  3  F0 03                beq *+5
002EF5  3  4C FD 2E             jmp b01526
002EF8  3  A9 00                lda #0
002EFA  3  8D 46 0E             sta varrnd
002EFD  3  A9 01        b01526: lda #1
002EFF  3  CD 46 0E             cmp varrnd
002F02  3  F0 03                beq *+5
002F04  3  4C 15 2F             jmp b01574
002F07  3  A0 08                ldy #8
002F09  3  B1 68                lda (z80_ix),y
002F0B  3  38                   sec
002F0C  3  E9 01                sbc #1
002F0E  3  A0 08                ldy #8
002F10  3  91 68                sta (z80_ix),y
002F12  3  4C 1A 2F             jmp b01582
002F15  3  A9 00        b01574: lda #0
002F17  3  8D 3A 0E             sta varp
002F1A  3  A9 00        b01582: lda #0
002F1C  3  CD 39 0E             cmp varo
002F1F  3  F0 03                beq *+5
002F21  3  4C 2D 2F             jmp b01616
002F24  3  A9 07                lda #7
002F26  3  A0 06                ldy #6
002F28  3  91 68                sta (z80_ix),y
002F2A  3  4C 33 2F             jmp b01630
002F2D  3  A9 06        b01616: lda #6
002F2F  3  A0 06                ldy #6
002F31  3  91 68                sta (z80_ix),y
002F33  3  A9 00        b01630: lda #0
002F35  3  8D 46 0E             sta varrnd
002F38  3  A9 00                lda #0
002F3A  3  CD 2D 0E             cmp varc
002F3D  3  F0 03                beq *+5
002F3F  3  4C 47 2F             jmp b01663
002F42  3  A9 01                lda #1
002F44  3  8D 46 0E             sta varrnd
002F47  3  A9 02        b01663: lda #2
002F49  3  CD 2D 0E             cmp varc
002F4C  3  F0 03                beq *+5
002F4E  3  4C 56 2F             jmp b01689
002F51  3  A9 01                lda #1
002F53  3  8D 46 0E             sta varrnd
002F56  3  A9 01        b01689: lda #1
002F58  3  CD 46 0E             cmp varrnd
002F5B  3  F0 03                beq *+5
002F5D  3  4C 6D 2F             jmp b01727
002F60  3  A9 01                lda #1
002F62  3  CD 3A 0E             cmp varp
002F65  3  F0 03                beq *+5
002F67  3  4C 6D 2F             jmp b01727
002F6A  3  20 46 1E             jsr animsp
002F6D  3  A9 04        b01727: lda #4
002F6F  3  85 62                sta z80_c
002F71  3  A0 0A                ldy #10
002F73  3  B1 68                lda (z80_ix),y
002F75  3  18                   clc
002F76  3  65 62                adc z80_c
002F78  3  A0 0A                ldy #10
002F7A  3  91 68                sta (z80_ix),y
002F7C  3  A9 10                lda #16
002F7E  3  A0 08                ldy #8
002F80  3  D1 68                cmp (z80_ix),y
002F82  3  90 03                bcc *+5
002F84  3  4C C4 2F             jmp b01916
002F87  3  A9 10                lda #16
002F89  3  85 62                sta z80_c
002F8B  3  A0 08                ldy #8
002F8D  3  B1 68                lda (z80_ix),y
002F8F  3  38                   sec
002F90  3  E5 62                sbc z80_c
002F92  3  A0 08                ldy #8
002F94  3  91 68                sta (z80_ix),y
002F96  3  A0 0A                ldy #10
002F98  3  B1 68                lda (z80_ix),y
002F9A  3  20 D1 11             jsr getob
002F9D  3  A0 09                ldy #9
002F9F  3  B1 68                lda (z80_ix),y
002FA1  3  8D 4E 0E             sta dispx
002FA4  3  A0 08                ldy #8
002FA6  3  B1 68                lda (z80_ix),y
002FA8  3  8D 4F 0E             sta dispy
002FAB  3  A0 0A                ldy #10
002FAD  3  B1 68                lda (z80_ix),y
002FAF  3  20 34 12             jsr drpob
002FB2  3  A9 10                lda #16
002FB4  3  85 62                sta z80_c
002FB6  3  A0 08                ldy #8
002FB8  3  B1 68                lda (z80_ix),y
002FBA  3  18                   clc
002FBB  3  65 62                adc z80_c
002FBD  3  A0 08                ldy #8
002FBF  3  91 68                sta (z80_ix),y
002FC1  3  4C CB 2F             jmp b01930
002FC4  3  A0 0A        b01916: ldy #10
002FC6  3  B1 68                lda (z80_ix),y
002FC8  3  20 D1 11             jsr getob
002FCB  3  A9 04        b01930: lda #4
002FCD  3  85 62                sta z80_c
002FCF  3  A0 0A                ldy #10
002FD1  3  B1 68                lda (z80_ix),y
002FD3  3  38                   sec
002FD4  3  E5 62                sbc z80_c
002FD6  3  A0 0A                ldy #10
002FD8  3  91 68                sta (z80_ix),y
002FDA  3  A0 0A                ldy #10
002FDC  3  B1 68                lda (z80_ix),y
002FDE  3  0A                   asl a
002FDF  3  0A                   asl a
002FE0  3  A0 0A                ldy #10
002FE2  3  91 68                sta (z80_ix),y
002FE4  3  AD 39 0E             lda varo
002FE7  3  85 62                sta z80_c
002FE9  3  A0 0A                ldy #10
002FEB  3  B1 68                lda (z80_ix),y
002FED  3  18                   clc
002FEE  3  65 62                adc z80_c
002FF0  3  A0 0A                ldy #10
002FF2  3  91 68                sta (z80_ix),y
002FF4  3  AD 3A 0E             lda varp
002FF7  3  85 62                sta z80_c
002FF9  3  A0 0A                ldy #10
002FFB  3  B1 68                lda (z80_ix),y
002FFD  3  18                   clc
002FFE  3  65 62                adc z80_c
003000  3  A0 0A                ldy #10
003002  3  91 68                sta (z80_ix),y
003004  3  AD 3A 0E             lda varp
003007  3  85 62                sta z80_c
003009  3  A0 0A                ldy #10
00300B  3  B1 68                lda (z80_ix),y
00300D  3  18                   clc
00300E  3  65 62                adc z80_c
003010  3  A0 0A                ldy #10
003012  3  91 68                sta (z80_ix),y
003014  3  60                   rts
003015  3               evnt02:
003015  3  A9 09                lda #9
003017  3  A0 06                ldy #6
003019  3  91 68                sta (z80_ix),y
00301B  3  A9 00                lda #0
00301D  3  A0 07                ldy #7
00301F  3  91 68                sta (z80_ix),y
003021  3  A0 0A                ldy #10
003023  3  B1 68                lda (z80_ix),y
003025  3  8D 3A 0E             sta varp
003028  3  A0 0A                ldy #10
00302A  3  B1 68                lda (z80_ix),y
00302C  3  4A                   lsr a
00302D  3  A0 0A                ldy #10
00302F  3  91 68                sta (z80_ix),y
003031  3  A0 0A                ldy #10
003033  3  B1 68                lda (z80_ix),y
003035  3  8D 3B 0E             sta varq
003038  3  AD 3B 0E             lda varq
00303B  3  0A                   asl a
00303C  3  8D 3B 0E             sta varq
00303F  3  AD 3B 0E             lda varq
003042  3  85 62                sta z80_c
003044  3  AD 3A 0E             lda varp
003047  3  38                   sec
003048  3  E5 62                sbc z80_c
00304A  3  8D 3A 0E             sta varp
00304D  3  A9 00                lda #0
00304F  3  A0 0C                ldy #12
003051  3  D1 68                cmp (z80_ix),y
003053  3  90 03                bcc *+5
003055  3  4C 63 30             jmp c00164
003058  3  A0 0C                ldy #12
00305A  3  B1 68                lda (z80_ix),y
00305C  3  38                   sec
00305D  3  E9 01                sbc #1
00305F  3  A0 0C                ldy #12
003061  3  91 68                sta (z80_ix),y
003063  3  A9 00        c00164: lda #0
003065  3  A0 0C                ldy #12
003067  3  D1 68                cmp (z80_ix),y
003069  3  F0 03                beq *+5
00306B  3  4C 11 31             jmp c00519
00306E  3  A9 00                lda #0
003070  3  8D 46 0E             sta varrnd
003073  3  A9 00                lda #0
003075  3  85 63                sta z80_b
003077  3  20 87 1E             jsr sktyp
00307A  3  B0 03                bcs :+
00307C  3  4C 90 30             jmp c00248
00307F  3               :
00307F  3  AD 2B 0E             lda vara
003082  3  A0 08                ldy #8
003084  3  D1 68                cmp (z80_ix),y
003086  3  90 03                bcc *+5
003088  3  4C 90 30             jmp c00248
00308B  3  A9 01                lda #1
00308D  3  8D 46 0E             sta varrnd
003090  3  A9 10        c00248: lda #16
003092  3  85 62                sta z80_c
003094  3  A0 08                ldy #8
003096  3  B1 68                lda (z80_ix),y
003098  3  38                   sec
003099  3  E5 62                sbc z80_c
00309B  3  A0 08                ldy #8
00309D  3  91 68                sta (z80_ix),y
00309F  3  A9 00                lda #0
0030A1  3  85 63                sta z80_b
0030A3  3  20 87 1E             jsr sktyp
0030A6  3  B0 03                bcs :+
0030A8  3  4C BC 30             jmp c00336
0030AB  3               :
0030AB  3  AD 2B 0E             lda vara
0030AE  3  A0 08                ldy #8
0030B0  3  D1 68                cmp (z80_ix),y
0030B2  3  90 03                bcc *+5
0030B4  3  4C BC 30             jmp c00336
0030B7  3  A9 01                lda #1
0030B9  3  8D 46 0E             sta varrnd
0030BC  3  A9 10        c00336: lda #16
0030BE  3  85 62                sta z80_c
0030C0  3  A0 08                ldy #8
0030C2  3  B1 68                lda (z80_ix),y
0030C4  3  18                   clc
0030C5  3  65 62                adc z80_c
0030C7  3  A0 08                ldy #8
0030C9  3  91 68                sta (z80_ix),y
0030CB  3  A9 01                lda #1
0030CD  3  CD 46 0E             cmp varrnd
0030D0  3  F0 03                beq *+5
0030D2  3  4C 11 31             jmp c00519
0030D5  3  A9 01                lda #1
0030D7  3  8D 32 0E             sta varh
0030DA  3  A9 01                lda #1
0030DC  3  8D 3A 0E             sta varp
0030DF  3  A9 0A                lda #10
0030E1  3  A0 0C                ldy #12
0030E3  3  91 68                sta (z80_ix),y
0030E5  3  A9 0A                lda #10
0030E7  3  85 62                sta z80_c
0030E9  3  A0 0A                ldy #10
0030EB  3  B1 68                lda (z80_ix),y
0030ED  3  18                   clc
0030EE  3  65 62                adc z80_c
0030F0  3  A0 0A                ldy #10
0030F2  3  91 68                sta (z80_ix),y
0030F4  3  A0 0A                ldy #10
0030F6  3  B1 68                lda (z80_ix),y
0030F8  3  20 D1 11             jsr getob
0030FB  3  A9 0A                lda #10
0030FD  3  85 62                sta z80_c
0030FF  3  A0 0A                ldy #10
003101  3  B1 68                lda (z80_ix),y
003103  3  38                   sec
003104  3  E5 62                sbc z80_c
003106  3  A0 0A                ldy #10
003108  3  91 68                sta (z80_ix),y
00310A  3  A9 03                lda #3
00310C  3  A0 05                ldy #5
00310E  3  91 68                sta (z80_ix),y
003110  3  60                   rts
003111  3  A9 A8        c00519: lda #168
003113  3  A0 08                ldy #8
003115  3  D1 68                cmp (z80_ix),y
003117  3  90 03                bcc *+5
003119  3  4C 5A 31             jmp c00684
00311C  3  A9 0A                lda #10
00311E  3  85 62                sta z80_c
003120  3  A0 0A                ldy #10
003122  3  B1 68                lda (z80_ix),y
003124  3  18                   clc
003125  3  65 62                adc z80_c
003127  3  A0 0A                ldy #10
003129  3  91 68                sta (z80_ix),y
00312B  3  A0 0A                ldy #10
00312D  3  B1 68                lda (z80_ix),y
00312F  3  20 D1 11             jsr getob
003132  3  A9 0A                lda #10
003134  3  85 62                sta z80_c
003136  3  A0 0A                ldy #10
003138  3  B1 68                lda (z80_ix),y
00313A  3  38                   sec
00313B  3  E5 62                sbc z80_c
00313D  3  A0 0A                ldy #10
00313F  3  91 68                sta (z80_ix),y
003141  3  A9 00                lda #0
003143  3  A0 07                ldy #7
003145  3  91 68                sta (z80_ix),y
003147  3  A9 0C                lda #12
003149  3  A0 06                ldy #6
00314B  3  91 68                sta (z80_ix),y
00314D  3  A9 DC                lda #220
00314F  3  A0 0C                ldy #12
003151  3  91 68                sta (z80_ix),y
003153  3  A9 04                lda #4
003155  3  A0 05                ldy #5
003157  3  91 68                sta (z80_ix),y
003159  3  60                   rts
00315A  3  20 75 17     c00684: jsr cangd
00315D  3  F0 03                beq :+
00315F  3  4C C7 32             jmp c01426
003162  3               :
003162  3  A0 08                ldy #8
003164  3  B1 68                lda (z80_ix),y
003166  3  18                   clc
003167  3  69 01                adc #1
003169  3  A0 08                ldy #8
00316B  3  91 68                sta (z80_ix),y
00316D  3  20 75 17             jsr cangd
003170  3  F0 03                beq :+
003172  3  4C 78 31             jmp c00741
003175  3               :
003175  3  4C 9E 31             jmp c00830
003178  3  A9 0A        c00741: lda #10
00317A  3  85 62                sta z80_c
00317C  3  A0 0A                ldy #10
00317E  3  B1 68                lda (z80_ix),y
003180  3  18                   clc
003181  3  65 62                adc z80_c
003183  3  A0 0A                ldy #10
003185  3  91 68                sta (z80_ix),y
003187  3  A0 0A                ldy #10
003189  3  B1 68                lda (z80_ix),y
00318B  3  20 D1 11             jsr getob
00318E  3  A9 0A                lda #10
003190  3  85 62                sta z80_c
003192  3  A0 0A                ldy #10
003194  3  B1 68                lda (z80_ix),y
003196  3  38                   sec
003197  3  E5 62                sbc z80_c
003199  3  A0 0A                ldy #10
00319B  3  91 68                sta (z80_ix),y
00319D  3  60                   rts
00319E  3  A9 1E        c00830: lda #30
0031A0  3  85 65                sta z80_d
0031A2  3  20 63 19             jsr random
0031A5  3  85 67                sta z80_h
0031A7  3  20 3A 11             jsr imul
0031AA  3  A5 67                lda z80_h
0031AC  3  8D 46 0E             sta varrnd
0031AF  3  A9 01                lda #1
0031B1  3  CD 46 0E             cmp varrnd
0031B4  3  F0 03                beq *+5
0031B6  3  4C D0 31             jmp c00916
0031B9  3  A9 00                lda #0
0031BB  3  CD 3A 0E             cmp varp
0031BE  3  F0 03                beq *+5
0031C0  3  4C CB 31             jmp c00908
0031C3  3  A9 01                lda #1
0031C5  3  8D 3A 0E             sta varp
0031C8  3  4C D0 31             jmp c00916
0031CB  3  A9 00        c00908: lda #0
0031CD  3  8D 3A 0E             sta varp
0031D0  3  A9 00        c00916: lda #0
0031D2  3  CD 3A 0E             cmp varp
0031D5  3  F0 03                beq *+5
0031D7  3  4C 0B 32             jmp c01024
0031DA  3  A0 09                ldy #9
0031DC  3  B1 68                lda (z80_ix),y
0031DE  3  C9 F0                cmp #240
0031E0  3  90 03                bcc *+5
0031E2  3  4C 03 32             jmp c01012
0031E5  3  20 C1 17             jsr cangr
0031E8  3  F0 03                beq :+
0031EA  3  4C FB 31             jmp c00999
0031ED  3               :
0031ED  3  A0 09                ldy #9
0031EF  3  B1 68                lda (z80_ix),y
0031F1  3  18                   clc
0031F2  3  69 01                adc #1
0031F4  3  A0 09                ldy #9
0031F6  3  91 68                sta (z80_ix),y
0031F8  3  4C 00 32             jmp c01007
0031FB  3  A9 01        c00999: lda #1
0031FD  3  8D 3A 0E             sta varp
003200  3  4C 08 32     c01007: jmp c01020
003203  3  A9 01        c01012: lda #1
003205  3  8D 3A 0E             sta varp
003208  3  4C 39 32     c01020: jmp c01111
00320B  3  A9 00        c01024: lda #0
00320D  3  A0 09                ldy #9
00320F  3  D1 68                cmp (z80_ix),y
003211  3  90 03                bcc *+5
003213  3  4C 34 32             jmp c01103
003216  3  20 AD 17             jsr cangl
003219  3  F0 03                beq :+
00321B  3  4C 2C 32             jmp c01090
00321E  3               :
00321E  3  A0 09                ldy #9
003220  3  B1 68                lda (z80_ix),y
003222  3  38                   sec
003223  3  E9 01                sbc #1
003225  3  A0 09                ldy #9
003227  3  91 68                sta (z80_ix),y
003229  3  4C 31 32             jmp c01098
00322C  3  A9 00        c01090: lda #0
00322E  3  8D 3A 0E             sta varp
003231  3  4C 39 32     c01098: jmp c01111
003234  3  A9 00        c01103: lda #0
003236  3  8D 3A 0E             sta varp
003239  3  A9 10        c01111: lda #16
00323B  3  A0 08                ldy #8
00323D  3  D1 68                cmp (z80_ix),y
00323F  3  90 03                bcc *+5
003241  3  4C 9F 32             jmp c01336
003244  3  A9 10                lda #16
003246  3  85 62                sta z80_c
003248  3  A0 08                ldy #8
00324A  3  B1 68                lda (z80_ix),y
00324C  3  38                   sec
00324D  3  E5 62                sbc z80_c
00324F  3  A0 08                ldy #8
003251  3  91 68                sta (z80_ix),y
003253  3  A9 0A                lda #10
003255  3  85 62                sta z80_c
003257  3  A0 0A                ldy #10
003259  3  B1 68                lda (z80_ix),y
00325B  3  18                   clc
00325C  3  65 62                adc z80_c
00325E  3  A0 0A                ldy #10
003260  3  91 68                sta (z80_ix),y
003262  3  A0 0A                ldy #10
003264  3  B1 68                lda (z80_ix),y
003266  3  20 D1 11             jsr getob
003269  3  A0 09                ldy #9
00326B  3  B1 68                lda (z80_ix),y
00326D  3  8D 4E 0E             sta dispx
003270  3  A0 08                ldy #8
003272  3  B1 68                lda (z80_ix),y
003274  3  8D 4F 0E             sta dispy
003277  3  A0 0A                ldy #10
003279  3  B1 68                lda (z80_ix),y
00327B  3  20 34 12             jsr drpob
00327E  3  A9 0A                lda #10
003280  3  85 62                sta z80_c
003282  3  A0 0A                ldy #10
003284  3  B1 68                lda (z80_ix),y
003286  3  38                   sec
003287  3  E5 62                sbc z80_c
003289  3  A0 0A                ldy #10
00328B  3  91 68                sta (z80_ix),y
00328D  3  A9 10                lda #16
00328F  3  85 62                sta z80_c
003291  3  A0 08                ldy #8
003293  3  B1 68                lda (z80_ix),y
003295  3  18                   clc
003296  3  65 62                adc z80_c
003298  3  A0 08                ldy #8
00329A  3  91 68                sta (z80_ix),y
00329C  3  4C C4 32             jmp c01421
00329F  3  A9 0A        c01336: lda #10
0032A1  3  85 62                sta z80_c
0032A3  3  A0 0A                ldy #10
0032A5  3  B1 68                lda (z80_ix),y
0032A7  3  18                   clc
0032A8  3  65 62                adc z80_c
0032AA  3  A0 0A                ldy #10
0032AC  3  91 68                sta (z80_ix),y
0032AE  3  A0 0A                ldy #10
0032B0  3  B1 68                lda (z80_ix),y
0032B2  3  20 D1 11             jsr getob
0032B5  3  A9 0A                lda #10
0032B7  3  85 62                sta z80_c
0032B9  3  A0 0A                ldy #10
0032BB  3  B1 68                lda (z80_ix),y
0032BD  3  38                   sec
0032BE  3  E5 62                sbc z80_c
0032C0  3  A0 0A                ldy #10
0032C2  3  91 68                sta (z80_ix),y
0032C4  3  4C 04 33     c01421: jmp c01565
0032C7  3  A9 0A        c01426: lda #10
0032C9  3  85 62                sta z80_c
0032CB  3  A0 0A                ldy #10
0032CD  3  B1 68                lda (z80_ix),y
0032CF  3  18                   clc
0032D0  3  65 62                adc z80_c
0032D2  3  A0 0A                ldy #10
0032D4  3  91 68                sta (z80_ix),y
0032D6  3  A0 0A                ldy #10
0032D8  3  B1 68                lda (z80_ix),y
0032DA  3  20 D1 11             jsr getob
0032DD  3  A9 0A                lda #10
0032DF  3  85 62                sta z80_c
0032E1  3  A0 0A                ldy #10
0032E3  3  B1 68                lda (z80_ix),y
0032E5  3  38                   sec
0032E6  3  E5 62                sbc z80_c
0032E8  3  A0 0A                ldy #10
0032EA  3  91 68                sta (z80_ix),y
0032EC  3  A9 FF                lda #255
0032EE  3  A0 0C                ldy #12
0032F0  3  91 68                sta (z80_ix),y
0032F2  3  A9 08                lda #8
0032F4  3  A0 06                ldy #6
0032F6  3  91 68                sta (z80_ix),y
0032F8  3  A9 00                lda #0
0032FA  3  A0 07                ldy #7
0032FC  3  91 68                sta (z80_ix),y
0032FE  3  A9 08                lda #8
003300  3  A0 05                ldy #5
003302  3  91 68                sta (z80_ix),y
003304  3  A0 0A        c01565: ldy #10
003306  3  B1 68                lda (z80_ix),y
003308  3  0A                   asl a
003309  3  A0 0A                ldy #10
00330B  3  91 68                sta (z80_ix),y
00330D  3  AD 3A 0E             lda varp
003310  3  85 62                sta z80_c
003312  3  A0 0A                ldy #10
003314  3  B1 68                lda (z80_ix),y
003316  3  18                   clc
003317  3  65 62                adc z80_c
003319  3  A0 0A                ldy #10
00331B  3  91 68                sta (z80_ix),y
00331D  3  60                   rts
00331E  3               evnt03:
00331E  3  A9 0A                lda #10
003320  3  A0 06                ldy #6
003322  3  91 68                sta (z80_ix),y
003324  3  20 46 1E             jsr animsp
003327  3  A0 08                ldy #8
003329  3  B1 68                lda (z80_ix),y
00332B  3  C9 A8                cmp #168
00332D  3  90 03                bcc *+5
00332F  3  4C 70 33             jmp d00181
003332  3  A0 0B                ldy #11
003334  3  B1 68                lda (z80_ix),y
003336  3  85 62                sta z80_c
003338  3  A0 08                ldy #8
00333A  3  B1 68                lda (z80_ix),y
00333C  3  18                   clc
00333D  3  65 62                adc z80_c
00333F  3  A0 08                ldy #8
003341  3  91 68                sta (z80_ix),y
003343  3  A9 00                lda #0
003345  3  A0 0C                ldy #12
003347  3  D1 68                cmp (z80_ix),y
003349  3  90 03                bcc *+5
00334B  3  4C 5C 33             jmp d00136
00334E  3  A0 0C                ldy #12
003350  3  B1 68                lda (z80_ix),y
003352  3  38                   sec
003353  3  E9 01                sbc #1
003355  3  A0 0C                ldy #12
003357  3  91 68                sta (z80_ix),y
003359  3  4C 6D 33             jmp d00176
00335C  3  A0 0B        d00136: ldy #11
00335E  3  B1 68                lda (z80_ix),y
003360  3  18                   clc
003361  3  69 01                adc #1
003363  3  A0 0B                ldy #11
003365  3  91 68                sta (z80_ix),y
003367  3  A9 03                lda #3
003369  3  A0 0C                ldy #12
00336B  3  91 68                sta (z80_ix),y
00336D  3  4C 88 33     d00176: jmp d00235
003370  3  A9 00        d00181: lda #0
003372  3  A0 07                ldy #7
003374  3  91 68                sta (z80_ix),y
003376  3  A9 0C                lda #12
003378  3  A0 06                ldy #6
00337A  3  91 68                sta (z80_ix),y
00337C  3  A9 DC                lda #220
00337E  3  A0 0C                ldy #12
003380  3  91 68                sta (z80_ix),y
003382  3  A9 04                lda #4
003384  3  A0 05                ldy #5
003386  3  91 68                sta (z80_ix),y
003388  3  60           d00235: rts
003389  3               evnt04:
003389  3  A9 78                lda #120
00338B  3  A0 0C                ldy #12
00338D  3  D1 68                cmp (z80_ix),y
00338F  3  90 03                bcc *+5
003391  3  4C F8 33             jmp e00241
003394  3  A9 0C                lda #12
003396  3  A0 06                ldy #6
003398  3  91 68                sta (z80_ix),y
00339A  3  A0 0C                ldy #12
00339C  3  B1 68                lda (z80_ix),y
00339E  3  38                   sec
00339F  3  E9 01                sbc #1
0033A1  3  A0 0C                ldy #12
0033A3  3  91 68                sta (z80_ix),y
0033A5  3  A9 D9                lda #217
0033A7  3  A0 0C                ldy #12
0033A9  3  D1 68                cmp (z80_ix),y
0033AB  3  F0 03                beq *+5
0033AD  3  4C B6 33             jmp e00100
0033B0  3  A9 01                lda #1
0033B2  3  A0 07                ldy #7
0033B4  3  91 68                sta (z80_ix),y
0033B6  3  A9 D6        e00100: lda #214
0033B8  3  A0 0C                ldy #12
0033BA  3  D1 68                cmp (z80_ix),y
0033BC  3  F0 03                beq *+5
0033BE  3  4C C7 33             jmp e00136
0033C1  3  A9 02                lda #2
0033C3  3  A0 07                ldy #7
0033C5  3  91 68                sta (z80_ix),y
0033C7  3  A9 D3        e00136: lda #211
0033C9  3  A0 0C                ldy #12
0033CB  3  D1 68                cmp (z80_ix),y
0033CD  3  F0 03                beq *+5
0033CF  3  4C D8 33             jmp e00173
0033D2  3  A9 C8                lda #200
0033D4  3  A0 08                ldy #8
0033D6  3  91 68                sta (z80_ix),y
0033D8  3  A9 78        e00173: lda #120
0033DA  3  A0 0C                ldy #12
0033DC  3  D1 68                cmp (z80_ix),y
0033DE  3  F0 03                beq *+5
0033E0  3  4C F5 33             jmp e00236
0033E3  3  A9 B0                lda #176
0033E5  3  A0 08                ldy #8
0033E7  3  91 68                sta (z80_ix),y
0033E9  3  A9 0D                lda #13
0033EB  3  A0 06                ldy #6
0033ED  3  91 68                sta (z80_ix),y
0033EF  3  A9 00                lda #0
0033F1  3  A0 07                ldy #7
0033F3  3  91 68                sta (z80_ix),y
0033F5  3  4C 55 34     e00236: jmp e00440
0033F8  3  A9 02        e00241: lda #2
0033FA  3  A0 07                ldy #7
0033FC  3  D1 68                cmp (z80_ix),y
0033FE  3  F0 03                beq *+5
003400  3  4C 0A 34             jmp e00279
003403  3  A9 FF                lda #255
003405  3  A0 05                ldy #5
003407  3  91 68                sta (z80_ix),y
003409  3  60                   rts
00340A  3  A0 08        e00279: ldy #8
00340C  3  B1 68                lda (z80_ix),y
00340E  3  38                   sec
00340F  3  E9 01                sbc #1
003411  3  A0 08                ldy #8
003413  3  91 68                sta (z80_ix),y
003415  3  AD 2D 0E             lda varc
003418  3  C9 02                cmp #2
00341A  3  90 03                bcc *+5
00341C  3  4C 33 34             jmp e00366
00341F  3  A0 09                ldy #9
003421  3  B1 68                lda (z80_ix),y
003423  3  18                   clc
003424  3  69 01                adc #1
003426  3  A0 09                ldy #9
003428  3  91 68                sta (z80_ix),y
00342A  3  A9 00                lda #0
00342C  3  A0 07                ldy #7
00342E  3  91 68                sta (z80_ix),y
003430  3  4C 44 34             jmp e00405
003433  3  A0 09        e00366: ldy #9
003435  3  B1 68                lda (z80_ix),y
003437  3  38                   sec
003438  3  E9 01                sbc #1
00343A  3  A0 09                ldy #9
00343C  3  91 68                sta (z80_ix),y
00343E  3  A9 01                lda #1
003440  3  A0 07                ldy #7
003442  3  91 68                sta (z80_ix),y
003444  3  A9 00        e00405: lda #0
003446  3  A0 08                ldy #8
003448  3  D1 68                cmp (z80_ix),y
00344A  3  F0 03                beq *+5
00344C  3  4C 55 34             jmp e00440
00344F  3  A9 02                lda #2
003451  3  A0 07                ldy #7
003453  3  91 68                sta (z80_ix),y
003455  3  A9 00        e00440: lda #0
003457  3  85 63                sta z80_b
003459  3  20 87 1E             jsr sktyp
00345C  3  B0 03                bcs :+
00345E  3  4C 67 34             jmp e00475
003461  3               :
003461  3  A9 02                lda #2
003463  3  A0 07                ldy #7
003465  3  91 68                sta (z80_ix),y
003467  3  60           e00475: rts
003468  3               evnt05:
003468  3  60                   rts
003469  3               evnt06:
003469  3  60                   rts
00346A  3               evnt07:
00346A  3  60                   rts
00346B  3               evnt08:
00346B  3  A9 00                lda #0
00346D  3  A0 0C                ldy #12
00346F  3  D1 68                cmp (z80_ix),y
003471  3  90 03                bcc *+5
003473  3  4C 85 34             jmp i00060
003476  3  A9 FF                lda #255
003478  3  85 62                sta z80_c
00347A  3  A0 0C                ldy #12
00347C  3  B1 68                lda (z80_ix),y
00347E  3  18                   clc
00347F  3  65 62                adc z80_c
003481  3  A0 0C                ldy #12
003483  3  91 68                sta (z80_ix),y
003485  3  A9 D2        i00060: lda #210
003487  3  A0 0C                ldy #12
003489  3  D1 68                cmp (z80_ix),y
00348B  3  F0 03                beq *+5
00348D  3  4C 93 34             jmp i00087
003490  3  20 46 1E             jsr animsp
003493  3  A9 B4        i00087: lda #180
003495  3  A0 0C                ldy #12
003497  3  D1 68                cmp (z80_ix),y
003499  3  F0 03                beq *+5
00349B  3  4C A1 34             jmp i00115
00349E  3  20 46 1E             jsr animsp
0034A1  3  A9 A0        i00115: lda #160
0034A3  3  A0 0C                ldy #12
0034A5  3  D1 68                cmp (z80_ix),y
0034A7  3  F0 03                beq *+5
0034A9  3  4C C2 34             jmp i00190
0034AC  3  A0 0A                ldy #10
0034AE  3  B1 68                lda (z80_ix),y
0034B0  3  0A                   asl a
0034B1  3  0A                   asl a
0034B2  3  A0 0A                ldy #10
0034B4  3  91 68                sta (z80_ix),y
0034B6  3  A9 01                lda #1
0034B8  3  A0 05                ldy #5
0034BA  3  91 68                sta (z80_ix),y
0034BC  3  A9 06                lda #6
0034BE  3  A0 06                ldy #6
0034C0  3  91 68                sta (z80_ix),y
0034C2  3  A9 00        i00190: lda #0
0034C4  3  85 63                sta z80_b
0034C6  3  20 87 1E             jsr sktyp
0034C9  3  B0 03                bcs :+
0034CB  3  4C DF 34             jmp i00247
0034CE  3               :
0034CE  3  A9 01                lda #1
0034D0  3  8D 32 0E             sta varh
0034D3  3  A9 03                lda #3
0034D5  3  A0 0C                ldy #12
0034D7  3  91 68                sta (z80_ix),y
0034D9  3  A9 03                lda #3
0034DB  3  A0 05                ldy #5
0034DD  3  91 68                sta (z80_ix),y
0034DF  3  60           i00247: rts
0034E0  3               evnt09:
0034E0  3  A9 08                lda #8
0034E2  3  A0 05                ldy #5
0034E4  3  D1 68                cmp (z80_ix),y
0034E6  3  F0 03                beq *+5
0034E8  3  4C 01 35             jmp j00067
0034EB  3  A9 FF                lda #255
0034ED  3  A0 0C                ldy #12
0034EF  3  91 68                sta (z80_ix),y
0034F1  3  AD 33 0E             lda vari
0034F4  3  A0 0A                ldy #10
0034F6  3  91 68                sta (z80_ix),y
0034F8  3  AD 33 0E             lda vari
0034FB  3  18                   clc
0034FC  3  69 01                adc #1
0034FE  3  8D 33 0E             sta vari
003501  3  60           j00067: rts
003502  3               evnt10:
003502  3  AD 2D 0E             lda varc
003505  3  18                   clc
003506  3  69 01                adc #1
003508  3  8D 2D 0E             sta varc
00350B  3  A9 03                lda #3
00350D  3  CD 2D 0E             cmp varc
003510  3  90 03                bcc *+5
003512  3  4C 1A 35             jmp k00042
003515  3  A9 00                lda #0
003517  3  8D 2D 0E             sta varc
00351A  3  A9 00        k00042: lda #0
00351C  3  8D 44 0E             sta chary
00351F  3  A9 00                lda #0
003521  3  8D 43 0E             sta charx
003524  3                       ; COLOUR command
003524  3  20 90 13             jsr dscor
003527  3  60                   rts
003528  3               evnt11:
003528  3  60                   rts
003529  3               evnt12:
003529  3  60                   rts
00352A  3               evnt13:
00352A  3  A9 00                lda #0
00352C  3  8D 33 0E             sta vari
00352F  3  A9 00                lda #0
003531  3  8D 2F 0E             sta vare
003534  3  60                   rts
003535  3               evnt14:
003535  3                       ; BORDER command
003535  3  A9 00                lda #0
003537  3  8D 3B 0E             sta varq
00353A  3  A9 15                lda #21
00353C  3  8D 54 0E             sta loopa
00353F  3  AD 3B 0E     o00024: lda varq
003542  3  8D 44 0E             sta chary
003545  3  A9 1E                lda #30
003547  3  8D 43 0E             sta charx
00354A  3  AD 43 0E             lda charx
00354D  3  8D 4E 0E             sta dispx
003550  3  AD 44 0E             lda chary
003553  3  8D 4F 0E             sta dispy
003556  3  A9 00                lda #0
003558  3  20 5C 15             jsr pattr
00355B  3  AD 43 0E             lda charx
00355E  3  8D 4E 0E             sta dispx
003561  3  AD 44 0E             lda chary
003564  3  8D 4F 0E             sta dispy
003567  3  A9 00                lda #0
003569  3  20 5C 15             jsr pattr
00356C  3  AD 3B 0E             lda varq
00356F  3  18                   clc
003570  3  69 01                adc #1
003572  3  8D 3B 0E             sta varq
003575  3  CE 54 0E             dec loopa
003578  3  F0 03                beq :+
00357A  3  4C 3F 35             jmp o00024
00357D  3               :
00357D  3  A9 17                lda #23
00357F  3  8D 44 0E             sta chary
003582  3  A9 00                lda #0
003584  3  8D 43 0E             sta charx
003587  3  A9 20                lda #32
003589  3  8D 54 0E             sta loopa
00358C  3  AD 43 0E     o00148: lda charx
00358F  3  8D 4E 0E             sta dispx
003592  3  AD 44 0E             lda chary
003595  3  8D 4F 0E             sta dispy
003598  3  A9 03                lda #3
00359A  3  20 5C 15             jsr pattr
00359D  3  CE 54 0E             dec loopa
0035A0  3  F0 03                beq :+
0035A2  3  4C 8C 35             jmp o00148
0035A5  3               :
0035A5  3  A9 15                lda #21
0035A7  3  8D 44 0E             sta chary
0035AA  3  A9 1E                lda #30
0035AC  3  8D 43 0E             sta charx
0035AF  3  AD 43 0E             lda charx
0035B2  3  8D 4E 0E             sta dispx
0035B5  3  AD 44 0E             lda chary
0035B8  3  8D 4F 0E             sta dispy
0035BB  3  A9 01                lda #1
0035BD  3  20 5C 15             jsr pattr
0035C0  3  AD 43 0E             lda charx
0035C3  3  8D 4E 0E             sta dispx
0035C6  3  AD 44 0E             lda chary
0035C9  3  8D 4F 0E             sta dispy
0035CC  3  A9 01                lda #1
0035CE  3  20 5C 15             jsr pattr
0035D1  3  A9 16                lda #22
0035D3  3  8D 44 0E             sta chary
0035D6  3  A9 1E                lda #30
0035D8  3  8D 43 0E             sta charx
0035DB  3  AD 43 0E             lda charx
0035DE  3  8D 4E 0E             sta dispx
0035E1  3  AD 44 0E             lda chary
0035E4  3  8D 4F 0E             sta dispy
0035E7  3  A9 02                lda #2
0035E9  3  20 5C 15             jsr pattr
0035EC  3  AD 43 0E             lda charx
0035EF  3  8D 4E 0E             sta dispx
0035F2  3  AD 44 0E             lda chary
0035F5  3  8D 4F 0E             sta dispy
0035F8  3  A9 02                lda #2
0035FA  3  20 5C 15             jsr pattr
0035FD  3  60                   rts
0035FE  3               evnt15:
0035FE  3  60                   rts
0035FF  3               evnt16:
0035FF  3  60                   rts
003600  3               evnt17:
003600  3  60                   rts
003601  3               evnt18:
003601  3  60                   rts
003602  3               evnt19:
003602  3  60                   rts
003603  3  60           ptcusr: rts
003604  3               msgdat:
003604  3  54 54 54 54          .byte "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT",13
003608  3  54 54 54 54  
00360C  3  54 54 54 54  
003625  3  54 54 54 54          .byte "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT",13
003629  3  54 54 54 54  
00362D  3  54 54 54 54  
003646  3  54 54 54 54          .byte "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT",13
00364A  3  54 54 54 54  
00364E  3  54 54 54 54  
003667  3  54 54 54 54          .byte "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT",13
00366B  3  54 54 54 54  
00366F  3  54 54 54 54  
003688  3  54 54 54 54          .byte "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT",13
00368C  3  54 54 54 54  
003690  3  54 54 54 54  
0036A9  3  54 54 54 54          .byte "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT",13
0036AD  3  54 54 54 54  
0036B1  3  54 54 54 54  
0036CA  3  0D                   .byte 13
0036CB  3  8D                   .byte 141
0036CC  3  41 41 41 41          .byte "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",13
0036D0  3  41 41 41 41  
0036D4  3  41 41 41 41  
0036ED  3  41 41 41 41          .byte "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",13
0036F1  3  41 41 41 41  
0036F5  3  41 41 41 41  
00370E  3  41 8D                .byte "A",141
003710  3               nummsg:
003710  3  02                   .byte 2
003711  3               chgfx:
003711  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003715  3  00 00 00 00  
003719  3  00 1A A5 53          .byte 0,26,165,83,148,37,170,85
00371D  3  94 25 AA 55  
003721  3  FF DE 6A 59          .byte 255,222,106,89,107,92,107,191
003725  3  6B 5C 6B BF  
003729  3  80 61 3F 02          .byte 128,97,63,2,0,96,185,30
00372D  3  00 60 B9 1E  
003731  3  00 00 00 00          .byte 0,0,0,0,0,4,106,149
003735  3  00 04 6A 95  
003739  3  D5 A4 01 00          .byte 213,164,1,0,0,0,0,0
00373D  3  00 00 00 00  
003741  3  D5 A4 01 00          .byte 213,164,1,0,0,0,0,0
003745  3  00 00 00 00  
003749  3  00 00 06 1F          .byte 0,0,6,31,63,49,96,96
00374D  3  3F 31 60 60  
003751  3  00 39 7F 66          .byte 0,57,127,102,194,192,248,252
003755  3  C2 C0 F8 FC  
003759  3  00 C0 E0 20          .byte 0,192,224,32,87,30,28,8
00375D  3  57 1E 1C 08  
003761  3  00 00 00 00          .byte 0,0,0,0,128,96,16,16
003765  3  80 60 10 10  
003769  3  60 21 11 31          .byte 96,33,17,49,121,97,64,128
00376D  3  79 61 40 80  
003771  3  F2 C0 80 80          .byte 242,192,128,128,0,0,128,0
003775  3  00 00 80 00  
003779  3  08 18 04 00          .byte 8,24,4,0,0,0,0,0
00377D  3  00 00 00 00  
003781  3  08 08 08 08          .byte 8,8,8,8,24,124,62,38
003785  3  18 7C 3E 26  
003789  3  80 80 80 47          .byte 128,128,128,71,63,31,30,60
00378D  3  3F 1F 1E 3C  
003791  3  00 00 01 00          .byte 0,0,1,0,0,0,0,2
003795  3  00 00 00 02  
003799  3  00 04 04 F8          .byte 0,4,4,248,112,0,0,0
00379D  3  70 00 00 00  
0037A1  3  03 01 01 01          .byte 3,1,1,1,2,44,16,16
0037A5  3  02 2C 10 10  
0037A9  3  3C 3C 1C 1C          .byte 60,60,28,28,14,7,3,0
0037AD  3  0E 07 03 00  
0037B1  3  14 0C 0E 06          .byte 20,12,14,6,15,51,192,0
0037B5  3  0F 33 C0 00  
0037B9  3  04 02 01 04          .byte 4,2,1,4,8,224,0,0
0037BD  3  08 E0 00 00  
0037C1  3  00 20 C0 00          .byte 0,32,192,0,0,0,0,0
0037C5  3  00 00 00 00  
0037C9  3  00 00 00 10          .byte 0,0,0,16,0,0,0,0
0037CD  3  00 00 00 00  
0037D1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0037D5  3  00 00 00 00  
0037D9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0037DD  3  00 00 00 00  
0037E1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0037E5  3  00 00 00 00  
0037E9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0037ED  3  00 00 00 00  
0037F1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0037F5  3  00 00 00 00  
0037F9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0037FD  3  00 00 00 00  
003801  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003805  3  00 00 00 00  
003809  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00380D  3  00 00 00 00  
003811  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003815  3  00 00 00 00  
003819  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00381D  3  00 00 00 00  
003821  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003825  3  00 00 00 00  
003829  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00382D  3  00 00 00 00  
003831  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003835  3  00 00 00 00  
003839  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00383D  3  00 00 00 00  
003841  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003845  3  00 00 00 00  
003849  3  00 00 28 10          .byte 0,0,40,16,40,0,0,0
00384D  3  28 00 00 00  
003851  3  00 00 28 10          .byte 0,0,40,16,40,0,0,0
003855  3  28 00 00 00  
003859  3  6A D5 AB D5          .byte 106,213,171,213,171,213,171,86
00385D  3  AB D5 AB 56  
003861  3  6A D5 AB D5          .byte 106,213,171,213,171,86,106,86
003865  3  AB 56 6A 56  
003869  3  3C 2C 34 2C          .byte 60,44,52,44,20,24,24,16
00386D  3  14 18 18 10  
003871  3               bprop:
003871  3  00                   .byte 0
003872  3  02                   .byte 2
003873  3  00                   .byte 0
003874  3  00                   .byte 0
003875  3  00                   .byte 0
003876  3  00                   .byte 0
003877  3  00                   .byte 0
003878  3  06                   .byte 6
003879  3  06                   .byte 6
00387A  3  06                   .byte 6
00387B  3  06                   .byte 6
00387C  3  06                   .byte 6
00387D  3  06                   .byte 6
00387E  3  06                   .byte 6
00387F  3  06                   .byte 6
003880  3  06                   .byte 6
003881  3  06                   .byte 6
003882  3  06                   .byte 6
003883  3  06                   .byte 6
003884  3  06                   .byte 6
003885  3  06                   .byte 6
003886  3  06                   .byte 6
003887  3  06                   .byte 6
003888  3  00                   .byte 0
003889  3  00                   .byte 0
00388A  3  00                   .byte 0
00388B  3  00                   .byte 0
00388C  3  00                   .byte 0
00388D  3  00                   .byte 0
00388E  3  00                   .byte 0
00388F  3  00                   .byte 0
003890  3  00                   .byte 0
003891  3  00                   .byte 0
003892  3  00                   .byte 0
003893  3  00                   .byte 0
003894  3  00                   .byte 0
003895  3  00                   .byte 0
003896  3  00                   .byte 0
003897  3  00                   .byte 0
003898  3  00                   .byte 0
003899  3  00                   .byte 0
00389A  3  02                   .byte 2
00389B  3  02                   .byte 2
00389C  3  02                   .byte 2
00389D  3               sprgfx:
00389D  3  07 E0 08 10          .byte 7,224,8,16,18,8,20,8,20,240,17,80,17,88,9,120,7,224,2,0,5,224,2,232,6,104,7,128,0,112,3,128
0038A1  3  12 08 14 08  
0038A5  3  14 F0 11 50  
0038BD  3  01 F8 02 04          .byte 1,248,2,4,4,130,5,2,5,60,4,84,4,86,2,94,1,248,0,128,1,120,0,186,1,154,1,224,0,28,0,224
0038C1  3  04 82 05 02  
0038C5  3  05 3C 04 54  
0038DD  3  00 7E 00 81          .byte 0,126,0,129,129,32,129,64,1,79,1,21,129,21,128,151,0,126,0,32,0,94,128,46,128,102,0,120,0,7,0,56
0038E1  3  81 20 81 40  
0038E5  3  01 4F 01 15  
0038FD  3  80 1F 40 20          .byte 128,31,64,32,32,72,32,80,192,83,64,69,96,69,224,37,128,31,0,8,128,23,160,11,160,25,0,30,192,1,0,14
003901  3  20 48 20 50  
003905  3  C0 53 40 45  
00391D  3  07 E0 08 10          .byte 7,224,8,16,18,8,20,8,20,240,17,80,17,88,9,120,7,224,12,12,9,236,3,240,27,96,22,96,0,0,0,224
003921  3  12 08 14 08  
003925  3  14 F0 11 50  
00393D  3  01 F8 02 04          .byte 1,248,2,4,4,130,5,2,5,60,4,84,4,86,2,94,1,248,3,3,2,123,0,252,6,216,5,152,0,0,0,56
003941  3  04 82 05 02  
003945  3  05 3C 04 54  
00395D  3  00 7E 00 81          .byte 0,126,0,129,129,32,129,64,1,79,1,21,129,21,128,151,0,126,192,192,192,158,0,63,1,182,1,102,0,0,0,14
003961  3  81 20 81 40  
003965  3  01 4F 01 15  
00397D  3  80 1F 40 20          .byte 128,31,64,32,32,72,32,80,192,83,64,69,96,69,224,37,128,31,48,48,176,39,192,15,128,109,128,89,0,0,128,3
003981  3  20 48 20 50  
003985  3  C0 53 40 45  
00399D  3  07 E0 08 10          .byte 7,224,8,16,18,8,20,8,20,240,17,80,17,88,9,120,55,224,54,24,16,232,3,228,3,236,11,216,13,16,6,0
0039A1  3  12 08 14 08  
0039A5  3  14 F0 11 50  
0039BD  3  01 F8 02 04          .byte 1,248,2,4,4,130,5,2,5,60,4,84,4,86,2,94,13,248,13,134,4,58,0,249,0,251,2,246,3,68,1,128
0039C1  3  04 82 05 02  
0039C5  3  05 3C 04 54  
0039DD  3  00 7E 00 81          .byte 0,126,0,129,129,32,129,64,1,79,1,21,129,21,128,151,3,126,131,97,129,14,64,62,192,62,128,189,0,209,0,96
0039E1  3  81 20 81 40  
0039E5  3  01 4F 01 15  
0039FD  3  80 1F 40 20          .byte 128,31,64,32,32,72,32,80,192,83,64,69,96,69,224,37,128,223,96,216,160,67,144,15,176,15,96,47,64,52,0,24
003A01  3  20 48 20 50  
003A05  3  C0 53 40 45  
003A1D  3  07 E0 08 10          .byte 7,224,8,16,16,72,16,40,15,40,10,136,26,136,30,144,7,224,0,64,7,160,23,64,22,96,1,224,14,0,1,192
003A21  3  10 48 10 28  
003A25  3  0F 28 0A 88  
003A3D  3  01 F8 02 04          .byte 1,248,2,4,4,18,4,10,3,202,2,162,6,162,7,164,1,248,0,16,1,232,5,208,5,152,0,120,3,128,0,112
003A41  3  04 12 04 0A  
003A45  3  03 CA 02 A2  
003A5D  3  00 7E 00 81          .byte 0,126,0,129,129,4,129,2,128,242,128,168,129,168,1,233,0,126,0,4,0,122,1,116,1,102,0,30,0,224,0,28
003A61  3  81 04 81 02  
003A65  3  80 F2 80 A8  
003A7D  3  80 1F 40 20          .byte 128,31,64,32,32,65,160,64,160,60,32,42,32,106,64,122,128,31,0,1,128,30,0,93,128,89,128,7,0,56,0,7
003A81  3  20 41 A0 40  
003A85  3  A0 3C 20 2A  
003A9D  3  07 E0 08 10          .byte 7,224,8,16,16,72,16,40,15,40,10,136,26,136,30,144,7,224,48,48,55,144,15,192,6,216,6,104,0,0,7,0
003AA1  3  10 48 10 28  
003AA5  3  0F 28 0A 88  
003ABD  3  01 F8 02 04          .byte 1,248,2,4,4,18,4,10,3,202,2,162,6,162,7,164,1,248,12,12,13,228,3,240,1,182,1,154,0,0,1,192
003AC1  3  04 12 04 0A  
003AC5  3  03 CA 02 A2  
003ADD  3  00 7E 00 81          .byte 0,126,0,129,129,4,129,2,128,242,128,168,129,168,1,233,0,126,3,3,3,121,0,252,128,109,128,102,0,0,0,112
003AE1  3  81 04 81 02  
003AE5  3  80 F2 80 A8  
003AFD  3  80 1F 40 20          .byte 128,31,64,32,32,65,160,64,160,60,32,42,32,106,64,122,128,31,192,192,64,222,0,63,96,27,160,25,0,0,0,28
003B01  3  20 41 A0 40  
003B05  3  A0 3C 20 2A  
003B1D  3  07 E0 08 10          .byte 7,224,8,16,16,72,16,40,15,40,10,136,26,136,30,144,7,236,24,108,23,8,39,192,55,192,27,208,8,176,0,96
003B21  3  10 48 10 28  
003B25  3  0F 28 0A 88  
003B3D  3  01 F8 02 04          .byte 1,248,2,4,4,18,4,10,3,202,2,162,6,162,7,164,1,251,6,27,5,194,9,240,13,240,6,244,2,44,0,24
003B41  3  04 12 04 0A  
003B45  3  03 CA 02 A2  
003B5D  3  00 7E 00 81          .byte 0,126,0,129,129,4,129,2,128,242,128,168,129,168,1,233,192,126,193,134,129,112,2,124,3,124,1,189,0,139,0,6
003B61  3  81 04 81 02  
003B65  3  80 F2 80 A8  
003B7D  3  80 1F 40 20          .byte 128,31,64,32,32,65,160,64,160,60,32,42,32,106,64,122,176,31,176,97,32,92,0,159,0,223,64,111,192,34,128,1
003B81  3  20 41 A0 40  
003B85  3  A0 3C 20 2A  
003B9D  3  00 00 20 FC          .byte 0,0,32,252,49,2,50,65,110,129,36,190,18,42,9,171,4,175,6,92,7,192,7,96,3,252,0,242,0,100,0,24
003BA1  3  31 02 32 41  
003BA5  3  6E 81 24 BE  
003BBD  3  00 00 08 3F          .byte 0,0,8,63,140,64,76,144,91,160,137,47,132,138,194,106,193,43,1,151,1,240,1,216,0,255,128,60,0,25,0,6
003BC1  3  8C 40 4C 90  
003BC5  3  5B A0 89 2F  
003BDD  3  00 00 C2 0F          .byte 0,0,194,15,35,16,19,36,22,232,226,75,161,34,176,154,240,74,192,101,0,124,0,118,192,63,32,15,64,6,128,1
003BE1  3  23 10 13 24  
003BE5  3  16 E8 E2 4B  
003BFD  3  00 00 F0 83          .byte 0,0,240,131,8,196,4,201,5,186,248,146,168,72,172,38,188,18,112,25,0,31,128,29,240,15,200,3,144,1,96,0
003C01  3  08 C4 04 C9  
003C05  3  05 BA F8 92  
003C1D  3  01 F8 02 04          .byte 1,248,2,4,4,130,5,2,5,60,4,84,4,86,7,222,2,120,4,192,9,64,19,232,63,244,115,228,0,200,0,112
003C21  3  04 82 05 02  
003C25  3  05 3C 04 54  
003C3D  3  00 7E 00 81          .byte 0,126,0,129,129,32,129,64,1,79,1,21,129,21,129,247,0,158,1,48,2,80,4,250,15,253,28,249,0,50,0,28
003C41  3  81 20 81 40  
003C45  3  01 4F 01 15  
003C5D  3  80 1F 40 20          .byte 128,31,64,32,32,72,32,80,192,83,64,69,96,69,224,125,128,39,0,76,0,148,129,62,67,255,71,62,128,12,0,7
003C61  3  20 48 20 50  
003C65  3  C0 53 40 45  
003C7D  3  E0 07 10 08          .byte 224,7,16,8,8,18,8,20,240,20,80,17,88,17,120,31,224,9,0,19,0,37,160,79,208,255,145,207,32,3,192,1
003C81  3  08 12 08 14  
003C85  3  F0 14 50 11  
003C9D  3  01 F8 02 04          .byte 1,248,2,4,4,130,5,2,5,60,4,84,4,86,7,222,127,120,240,192,41,64,7,232,7,244,3,228,0,200,0,112
003CA1  3  04 82 05 02  
003CA5  3  05 3C 04 54  
003CBD  3  00 7E 00 81          .byte 0,126,0,129,129,32,129,64,1,79,1,21,129,21,129,247,31,222,60,48,10,80,1,250,1,253,0,249,0,50,0,28
003CC1  3  81 20 81 40  
003CC5  3  01 4F 01 15  
003CDD  3  80 1F 40 20          .byte 128,31,64,32,32,72,32,80,192,83,64,69,96,69,224,125,135,247,15,12,2,148,128,126,64,127,64,62,128,12,0,7
003CE1  3  20 48 20 50  
003CE5  3  C0 53 40 45  
003CFD  3  E0 07 10 08          .byte 224,7,16,8,8,18,8,20,240,20,80,17,88,17,120,31,225,253,3,195,0,165,160,31,208,31,144,15,32,3,192,1
003D01  3  08 12 08 14  
003D05  3  F0 14 50 11  
003D1D  3  00 00 3F 04          .byte 0,0,63,4,64,140,130,76,129,118,125,36,84,72,213,144,245,32,58,96,3,224,6,224,63,192,79,0,38,0,24,0
003D21  3  40 8C 82 4C  
003D25  3  81 76 7D 24  
003D3D  3  00 00 0F C1          .byte 0,0,15,193,16,35,32,147,160,93,31,73,21,18,53,100,61,72,14,152,0,248,1,184,15,240,19,192,9,128,6,0
003D41  3  10 23 20 93  
003D45  3  A0 5D 1F 49  
003D5D  3  00 00 43 F0          .byte 0,0,67,240,196,8,200,36,104,23,71,210,133,68,13,89,15,82,3,166,0,62,0,110,3,252,4,240,2,96,1,128
003D61  3  C4 08 C8 24  
003D65  3  68 17 47 D2  
003D7D  3  00 00 10 FC          .byte 0,0,16,252,49,2,50,9,218,5,145,244,33,81,67,86,131,212,128,233,128,15,128,27,0,255,1,60,0,152,0,96
003D81  3  31 02 32 09  
003D85  3  DA 05 91 F4  
003D9D  3  1F 80 20 40          .byte 31,128,32,64,65,32,64,160,60,160,42,32,106,32,123,224,30,64,3,32,2,144,23,200,47,252,39,206,19,0,14,0
003DA1  3  41 20 40 A0  
003DA5  3  3C A0 2A 20  
003DBD  3  07 E0 08 10          .byte 7,224,8,16,16,72,16,40,15,40,10,136,26,136,30,248,7,144,0,200,0,164,5,242,11,255,137,243,4,192,3,128
003DC1  3  10 48 10 28  
003DC5  3  0F 28 0A 88  
003DDD  3  01 F8 02 04          .byte 1,248,2,4,4,18,4,10,3,202,2,162,6,162,7,190,1,228,0,50,0,41,129,124,194,255,226,124,1,48,0,224
003DE1  3  04 12 04 0A  
003DE5  3  03 CA 02 A2  
003DFD  3  00 7E 00 81          .byte 0,126,0,129,129,4,129,2,128,242,128,168,129,168,129,239,0,121,128,12,64,10,32,95,240,191,56,159,0,76,0,56
003E01  3  81 04 81 02  
003E05  3  80 F2 80 A8  
003E1D  3  1F 80 20 40          .byte 31,128,32,64,65,32,64,160,60,160,42,32,106,32,123,224,30,254,3,15,2,148,23,224,47,224,39,192,19,0,14,0
003E21  3  41 20 40 A0  
003E25  3  3C A0 2A 20  
003E3D  3  07 E0 08 10          .byte 7,224,8,16,16,72,16,40,15,40,10,136,26,136,30,248,135,191,192,195,0,165,5,248,11,248,9,240,4,192,3,128
003E41  3  10 48 10 28  
003E45  3  0F 28 0A 88  
003E5D  3  01 F8 02 04          .byte 1,248,2,4,4,18,4,10,3,202,2,162,6,162,7,190,225,239,240,48,64,41,1,126,2,254,2,124,1,48,0,224
003E61  3  04 12 04 0A  
003E65  3  03 CA 02 A2  
003E7D  3  00 7E 00 81          .byte 0,126,0,129,129,4,129,2,128,242,128,168,129,168,129,239,248,123,60,12,80,10,128,95,128,191,0,159,0,76,0,56
003E81  3  81 04 81 02  
003E85  3  80 F2 80 A8  
003E9D  3  03 E0 04 10          .byte 3,224,4,16,8,40,8,8,7,240,2,160,2,160,7,240,11,232,17,196,18,36,52,22,46,58,19,228,10,40,6,48
003EA1  3  08 28 08 08  
003EA5  3  07 F0 02 A0  
003EBD  3  00 F8 01 04          .byte 0,248,1,4,2,10,2,2,1,252,0,168,0,168,1,252,2,250,4,113,4,137,141,5,139,142,4,249,2,138,1,140
003EC1  3  02 0A 02 02  
003EC5  3  01 FC 00 A8  
003EDD  3  00 3E 00 41          .byte 0,62,0,65,128,130,128,128,0,127,0,42,0,42,0,127,128,190,65,28,65,34,99,65,162,227,65,62,128,162,0,99
003EE1  3  80 82 80 80  
003EE5  3  00 7F 00 2A  
003EFD  3  80 0F 40 10          .byte 128,15,64,16,160,32,32,32,192,31,128,10,128,10,192,31,160,47,16,71,144,72,88,208,232,184,144,79,160,40,192,24
003F01  3  A0 20 20 20  
003F05  3  C0 1F 80 0A  
003F1D  3  00 00 03 E0          .byte 0,0,3,224,4,16,8,40,8,8,7,240,122,175,42,170,19,228,9,200,28,28,38,50,36,18,18,36,11,232,6,48
003F21  3  04 10 08 28  
003F25  3  08 08 07 F0  
003F3D  3  00 00 00 F8          .byte 0,0,0,248,1,4,2,10,2,2,1,252,222,171,138,170,4,249,2,114,7,7,137,140,137,4,4,137,2,250,1,140
003F41  3  01 04 02 0A  
003F45  3  02 02 01 FC  
003F5D  3  00 00 00 3E          .byte 0,0,0,62,0,65,128,130,128,128,0,127,247,170,162,170,65,62,128,156,193,193,34,99,34,65,65,34,128,190,0,99
003F61  3  00 41 80 82  
003F65  3  80 80 00 7F  
003F7D  3  00 00 80 0F          .byte 0,0,128,15,64,16,160,32,32,32,192,31,189,234,168,170,144,79,32,39,112,112,200,152,72,144,144,72,160,47,192,24
003F81  3  40 10 A0 20  
003F85  3  20 20 C0 1F  
003F9D  3  00 00 00 00          .byte 0,0,0,0,3,224,4,16,8,40,8,8,7,240,14,184,18,164,35,226,77,217,118,55,36,18,18,36,11,232,6,48
003FA1  3  03 E0 04 10  
003FA5  3  08 28 08 08  
003FBD  3  00 00 00 00          .byte 0,0,0,0,0,248,1,4,2,10,2,2,1,252,3,174,4,169,136,248,83,118,221,141,137,4,4,137,2,250,1,140
003FC1  3  00 F8 01 04  
003FC5  3  02 0A 02 02  
003FDD  3  00 00 00 00          .byte 0,0,0,0,0,62,0,65,128,130,128,128,0,127,128,235,65,42,34,62,148,221,119,99,34,65,65,34,128,190,0,99
003FE1  3  00 3E 00 41  
003FE5  3  80 82 80 80  
003FFD  3  00 00 00 00          .byte 0,0,0,0,128,15,64,16,160,32,32,32,192,31,224,58,144,74,136,143,101,55,221,216,72,144,144,72,160,47,192,24
004001  3  80 0F 40 10  
004005  3  A0 20 20 20  
00401D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,192,7,240,11,152,45,172,54,236,58,158,29,126
004021  3  00 00 00 00  
004025  3  00 00 00 00  
00403D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,1,252,2,230,11,107,13,187,142,167,135,95
004041  3  00 00 00 00  
004045  3  00 00 00 00  
00405D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,127,128,185,194,218,195,110,227,169,225,215
004061  3  00 00 00 00  
004065  3  00 00 00 00  
00407D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,192,31,96,46,176,182,176,219,120,234,248,117
004081  3  00 00 00 00  
004085  3  00 00 00 00  
00409D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,5,224,14,248,38,204,195,86,119,118,161,79,179,127,81,111,43,111,54,247,29,254
0040A1  3  00 00 00 00  
0040A5  3  00 00 05 E0  
0040BD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,1,120,3,190,9,179,176,213,157,221,232,83,236,223,212,91,202,219,205,189,135,127
0040C1  3  00 00 00 00  
0040C5  3  00 00 01 78  
0040DD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,94,128,239,194,108,108,53,103,119,250,20,251,55,245,22,242,182,115,111,225,223
0040E1  3  00 00 00 00  
0040E5  3  00 00 00 5E  
0040FD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,128,23,224,59,48,155,91,13,217,221,62,133,254,205,189,69,188,173,220,219,248,119
004101  3  00 00 00 00  
004105  3  00 00 80 17  
00411D  3  00 80 02 B0          .byte 0,128,2,176,0,188,2,190,0,83,1,85,64,93,129,83,160,95,200,109,242,237,119,219,31,62,0,254,31,204,53,228
004121  3  00 BC 02 BE  
004125  3  00 53 01 55  
00413D  3  00 20 00 AC          .byte 0,32,0,172,0,47,128,175,192,20,64,85,80,23,224,84,232,23,114,27,124,187,221,246,135,207,128,63,7,243,13,121
004141  3  00 2F 80 AF  
004145  3  C0 14 40 55  
00415D  3  00 08 00 2B          .byte 0,8,0,43,192,11,224,43,48,5,80,21,212,5,56,21,250,5,220,134,223,46,183,125,225,243,224,15,193,252,67,94
004161  3  C0 0B E0 2B  
004165  3  30 05 50 15  
00417D  3  00 02 C0 0A          .byte 0,2,192,10,240,2,248,10,76,1,84,5,117,1,78,5,126,129,183,33,183,203,109,223,248,124,248,3,48,127,144,215
004181  3  F0 02 F8 0A  
004185  3  4C 01 54 05  
00419D  3  01 08 01 08          .byte 1,8,1,8,3,216,7,176,8,194,53,230,254,54,32,43,24,92,7,48,3,104,1,152,9,240,14,224,7,0,0,0
0041A1  3  03 D8 07 B0  
0041A5  3  08 C2 35 E6  
0041BD  3  00 42 00 42          .byte 0,66,0,66,0,246,1,236,130,48,141,121,191,141,200,10,6,23,1,204,0,218,0,102,2,124,3,184,1,192,0,0
0041C1  3  00 F6 01 EC  
0041C5  3  82 30 8D 79  
0041DD  3  80 10 80 10          .byte 128,16,128,16,128,61,0,123,32,140,99,94,111,227,178,2,193,133,0,115,128,54,128,25,0,159,0,238,0,112,0,0
0041E1  3  80 3D 00 7B  
0041E5  3  20 8C 63 5E  
0041FD  3  20 04 20 04          .byte 32,4,32,4,96,15,192,30,8,35,152,215,219,248,172,128,112,97,192,28,160,13,96,6,192,39,128,59,0,28,0,0
004201  3  60 0F C0 1E  
004205  3  08 23 98 D7  
00421D  3  01 08 01 08          .byte 1,8,1,8,3,216,7,176,8,192,53,224,254,48,32,32,24,86,7,55,3,100,1,152,9,240,14,224,7,0,0,0
004221  3  03 D8 07 B0  
004225  3  08 C0 35 E0  
00423D  3  00 42 00 42          .byte 0,66,0,66,0,246,1,236,2,48,13,120,63,140,8,8,134,21,193,205,0,217,0,102,2,124,3,184,1,192,0,0
004241  3  00 F6 01 EC  
004245  3  02 30 0D 78  
00425D  3  80 10 80 10          .byte 128,16,128,16,128,61,0,123,0,140,3,94,15,227,2,2,97,133,112,115,64,54,128,25,0,159,0,238,0,112,0,0
004261  3  80 3D 00 7B  
004265  3  00 8C 03 5E  
00427D  3  20 04 20 04          .byte 32,4,32,4,96,15,192,30,0,35,128,215,195,248,128,128,88,97,220,28,144,13,96,6,192,39,128,59,0,28,0,0
004281  3  60 0F C0 1E  
004285  3  00 23 80 D7  
00429D  3  01 08 01 08          .byte 1,8,1,8,3,216,7,176,8,192,53,224,254,48,32,32,24,112,7,56,3,157,1,203,9,246,14,228,7,0,0,0
0042A1  3  03 D8 07 B0  
0042A5  3  08 C0 35 E0  
0042BD  3  00 42 00 42          .byte 0,66,0,66,0,246,1,236,2,48,13,120,63,140,8,8,6,28,1,206,64,231,192,114,130,125,3,185,1,192,0,0
0042C1  3  00 F6 01 EC  
0042C5  3  02 30 0D 78  
0042DD  3  80 10 80 10          .byte 128,16,128,16,128,61,0,123,0,140,3,94,15,227,2,2,1,135,128,115,208,57,176,28,96,159,64,238,0,112,0,0
0042E1  3  80 3D 00 7B  
0042E5  3  00 8C 03 5E  
0042FD  3  20 04 20 04          .byte 32,4,32,4,96,15,192,30,0,35,128,215,195,248,128,128,192,97,224,28,116,14,44,7,216,39,144,59,0,28,0,0
004301  3  60 0F C0 1E  
004305  3  00 23 80 D7  
00431D  3  10 80 10 80          .byte 16,128,16,128,27,192,13,224,67,16,103,172,108,127,212,4,58,24,12,224,22,192,25,128,15,144,7,112,0,224,0,0
004321  3  1B C0 0D E0  
004325  3  43 10 67 AC  
00433D  3  04 20 04 20          .byte 4,32,4,32,6,240,3,120,16,196,25,235,219,31,53,1,14,134,3,56,5,176,6,96,3,228,1,220,0,56,0,0
004341  3  06 F0 03 78  
004345  3  10 C4 19 EB  
00435D  3  01 08 01 08          .byte 1,8,1,8,1,188,0,222,4,49,198,122,246,199,77,64,131,161,0,206,1,108,1,152,0,249,0,119,0,14,0,0
004361  3  01 BC 00 DE  
004365  3  04 31 C6 7A  
00437D  3  00 42 00 42          .byte 0,66,0,66,0,111,128,55,65,12,177,158,253,177,19,80,96,232,128,51,0,91,0,102,64,62,192,29,128,3,0,0
004381  3  00 6F 80 37  
004385  3  41 0C B1 9E  
00439D  3  10 80 10 80          .byte 16,128,16,128,27,192,13,224,3,16,7,172,12,127,4,4,106,24,236,224,38,192,25,128,15,144,7,112,0,224,0,0
0043A1  3  1B C0 0D E0  
0043A5  3  03 10 07 AC  
0043BD  3  04 20 04 20          .byte 4,32,4,32,6,240,3,120,0,196,1,235,195,31,1,1,26,134,59,56,9,176,6,96,3,228,1,220,0,56,0,0
0043C1  3  06 F0 03 78  
0043C5  3  00 C4 01 EB  
0043DD  3  01 08 01 08          .byte 1,8,1,8,1,188,0,222,0,49,192,122,240,199,64,64,134,161,14,206,2,108,1,152,0,249,0,119,0,14,0,0
0043E1  3  01 BC 00 DE  
0043E5  3  00 31 C0 7A  
0043FD  3  00 42 00 42          .byte 0,66,0,66,0,111,128,55,64,12,176,30,252,49,16,16,97,168,131,179,0,155,0,102,64,62,192,29,128,3,0,0
004401  3  00 6F 80 37  
004405  3  40 0C B0 1E  
00441D  3  10 80 10 80          .byte 16,128,16,128,27,192,13,224,3,16,7,172,12,127,4,4,14,24,28,224,185,192,211,128,111,144,39,112,0,224,0,0
004421  3  1B C0 0D E0  
004425  3  03 10 07 AC  
00443D  3  04 20 04 20          .byte 4,32,4,32,6,240,3,120,0,196,1,235,195,31,1,1,3,134,7,56,46,112,52,224,27,228,9,220,0,56,0,0
004441  3  06 F0 03 78  
004445  3  00 C4 01 EB  
00445D  3  01 08 01 08          .byte 1,8,1,8,1,188,0,222,0,49,192,122,240,199,64,64,128,225,1,206,11,156,13,56,6,249,2,119,0,14,0,0
004461  3  01 BC 00 DE  
004465  3  00 31 C0 7A  
00447D  3  00 42 00 42          .byte 0,66,0,66,0,111,128,55,64,12,176,30,252,49,16,16,96,56,128,115,2,231,3,78,65,190,192,157,128,3,0,0
004481  3  00 6F 80 37  
004485  3  40 0C B0 1E  
00449D  3  00 01 00 01          .byte 0,1,0,1,0,123,0,246,1,24,6,188,31,198,4,4,3,12,0,246,0,66,0,132,1,30,1,60,1,226,0,124
0044A1  3  00 7B 00 F6  
0044A5  3  01 18 06 BC  
0044BD  3  40 00 40 00          .byte 64,0,64,0,192,30,128,61,0,70,1,175,135,241,1,1,0,195,128,61,128,16,0,33,128,71,0,79,128,120,0,31
0044C1  3  C0 1E 80 3D  
0044C5  3  00 46 01 AF  
0044DD  3  10 00 10 00          .byte 16,0,16,0,176,7,96,15,128,17,192,107,97,252,64,64,192,48,96,15,32,4,64,8,224,17,192,19,32,30,192,7
0044E1  3  B0 07 60 0F  
0044E5  3  80 11 C0 6B  
0044FD  3  04 00 04 00          .byte 4,0,4,0,236,1,216,3,96,4,240,26,24,127,16,16,48,12,216,3,8,1,16,2,120,4,240,4,136,7,240,1
004501  3  EC 01 D8 03  
004505  3  60 04 F0 1A  
00451D  3  00 00 00 01          .byte 0,0,0,1,0,1,0,123,0,246,1,24,6,188,31,198,4,4,3,12,0,246,56,66,116,142,125,28,125,226,56,124
004521  3  00 01 00 7B  
004525  3  00 F6 01 18  
00453D  3  00 00 40 00          .byte 0,0,64,0,64,0,192,30,128,61,0,70,1,175,135,241,1,1,0,195,128,61,142,16,157,35,31,71,159,120,14,31
004541  3  40 00 C0 1E  
004545  3  80 3D 00 46  
00455D  3  00 00 10 00          .byte 0,0,16,0,16,0,176,7,96,15,128,17,192,107,97,252,64,64,192,48,96,15,35,132,231,72,199,209,39,222,195,135
004561  3  10 00 B0 07  
004565  3  60 0F 80 11  
00457D  3  00 00 04 00          .byte 0,0,4,0,4,0,236,1,216,3,96,4,240,26,24,127,16,16,48,12,216,3,8,225,57,210,113,244,137,247,240,225
004581  3  04 00 EC 01  
004585  3  D8 03 60 04  
00459D  3  00 01 00 01          .byte 0,1,0,1,0,123,0,246,1,24,6,188,31,198,4,4,3,12,61,246,122,66,253,132,253,30,255,60,126,226,60,124
0045A1  3  00 7B 00 F6  
0045A5  3  01 18 06 BC  
0045BD  3  40 00 40 00          .byte 64,0,64,0,192,30,128,61,0,70,1,175,135,241,1,1,0,195,143,125,158,144,63,97,191,71,63,207,159,184,15,31
0045C1  3  C0 1E 80 3D  
0045C5  3  00 46 01 AF  
0045DD  3  10 00 10 00          .byte 16,0,16,0,176,7,96,15,128,17,192,107,97,252,64,64,192,48,99,223,39,164,79,216,239,209,207,243,39,238,195,199
0045E1  3  B0 07 60 0F  
0045E5  3  80 11 C0 6B  
0045FD  3  04 00 04 00          .byte 4,0,4,0,236,1,216,3,96,4,240,26,24,127,16,16,48,12,216,247,9,233,19,246,123,244,243,252,137,251,240,241
004601  3  EC 01 D8 03  
004605  3  60 04 F0 1A  
00461D  3  00 00 00 20          .byte 0,0,0,32,15,160,31,96,34,216,104,156,124,126,225,254,141,62,130,198,1,216,1,156,2,12,3,0,2,0,0,0
004621  3  0F A0 1F 60  
004625  3  22 D8 68 9C  
00463D  3  00 00 00 08          .byte 0,0,0,8,3,232,7,216,8,182,26,39,159,31,184,127,163,79,160,177,0,118,0,103,0,131,0,192,0,128,0,0
004641  3  03 E8 07 D8  
004645  3  08 B6 1A 27  
00465D  3  00 00 00 02          .byte 0,0,0,2,0,250,1,246,130,45,198,137,231,199,238,31,232,211,104,44,128,29,192,25,192,32,0,48,0,32,0,0
004661  3  00 FA 01 F6  
004665  3  82 2D C6 89  
00467D  3  00 00 80 00          .byte 0,0,128,0,128,62,128,125,96,139,113,162,249,241,251,135,250,52,26,11,96,7,112,6,48,8,0,12,0,8,0,0
004681  3  80 3E 80 7D  
004685  3  60 8B 71 A2  
00469D  3  00 00 10 00          .byte 0,0,16,0,25,192,15,32,6,180,11,52,105,204,68,112,210,32,218,32,191,208,31,216,31,188,15,20,6,4,0,0
0046A1  3  19 C0 0F 20  
0046A5  3  06 B4 0B 34  
0046BD  3  00 00 04 00          .byte 0,0,4,0,6,112,3,200,1,173,2,205,26,115,17,28,52,136,54,136,47,244,7,246,7,239,3,197,1,129,0,0
0046C1  3  06 70 03 C8  
0046C5  3  01 AD 02 CD  
0046DD  3  00 00 01 00          .byte 0,0,1,0,1,156,0,242,64,107,64,179,198,156,4,71,13,34,13,162,11,253,129,253,193,251,64,241,64,96,0,0
0046E1  3  01 9C 00 F2  
0046E5  3  40 6B 40 B3  
0046FD  3  00 00 00 40          .byte 0,0,0,64,0,103,128,60,208,26,208,44,49,167,193,17,131,72,131,104,66,255,96,127,240,126,80,60,16,24,0,0
004701  3  00 67 80 3C  
004705  3  D0 1A D0 2C  
00471D  3  00 00 10 00          .byte 0,0,16,0,25,192,15,32,6,180,11,52,105,204,68,112,210,34,218,70,191,187,31,184,31,208,15,0,6,0,0,0
004721  3  19 C0 0F 20  
004725  3  06 B4 0B 34  
00473D  3  00 00 04 00          .byte 0,0,4,0,6,112,3,200,1,173,2,205,26,115,17,28,180,136,182,145,239,238,7,238,7,244,3,192,1,128,0,0
004741  3  06 70 03 C8  
004745  3  01 AD 02 CD  
00475D  3  00 00 01 00          .byte 0,0,1,0,1,156,0,242,64,107,64,179,198,156,4,71,45,34,109,164,187,251,129,251,1,253,0,240,0,96,0,0
004761  3  01 9C 00 F2  
004765  3  40 6B 40 B3  
00477D  3  00 00 00 40          .byte 0,0,0,64,0,103,128,60,208,26,208,44,49,167,193,17,139,72,27,105,238,254,224,126,64,127,0,60,0,24,0,0
004781  3  00 67 80 3C  
004785  3  D0 1A D0 2C  
00479D  3  00 00 00 00          .byte 0,0,0,0,0,0,3,224,6,176,6,176,11,104,25,204,9,72,4,144,3,96,0,128,11,232,4,16,0,0,0,0
0047A1  3  00 00 03 E0  
0047A5  3  06 B0 06 B0  
0047BD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,248,1,172,1,172,2,218,6,115,2,82,1,36,0,216,0,32,2,250,1,4,0,0,0,0
0047C1  3  00 00 00 F8  
0047C5  3  01 AC 01 AC  
0047DD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,62,0,107,0,107,128,182,193,156,128,148,0,73,0,54,0,8,128,190,0,65,0,0,0,0
0047E1  3  00 00 00 3E  
0047E5  3  00 6B 00 6B  
0047FD  3  00 00 00 00          .byte 0,0,0,0,0,0,128,15,192,26,192,26,160,45,48,103,32,37,64,18,128,13,0,2,160,47,64,16,0,0,0,0
004801  3  00 00 80 0F  
004805  3  C0 1A C0 1A  
00481D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,5,64,4,0,8,32,9,64,4,64,0,0,4,64,5,64,5,64,4,64
004821  3  00 00 00 00  
004825  3  00 00 00 00  
00483D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,80,1,0,2,8,2,80,1,16,0,0,1,16,1,80,1,80,1,16
004841  3  00 00 00 00  
004845  3  00 00 00 00  
00485D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,64,0,130,0,148,0,68,0,0,0,68,0,84,0,84,0,68
004861  3  00 00 00 00  
004865  3  00 00 00 00  
00487D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,16,128,32,0,37,0,17,0,0,0,17,0,21,0,21,0,17
004881  3  00 00 00 00  
004885  3  00 00 00 00  
00489D  3  00 10 18 38          .byte 0,16,24,56,24,100,36,64,6,64,0,0,5,80,20,0,8,32,9,64,4,64,0,0,5,64,4,64,0,0,0,0
0048A1  3  18 64 24 40  
0048A5  3  06 40 00 00  
0048BD  3  00 04 06 0E          .byte 0,4,6,14,6,25,9,16,1,144,0,0,1,84,5,0,2,8,2,80,1,16,0,0,1,80,1,16,0,0,0,0
0048C1  3  06 19 09 10  
0048C5  3  01 90 00 00  
0048DD  3  00 01 81 83          .byte 0,1,129,131,65,134,2,68,0,100,0,0,0,85,1,64,0,130,0,148,0,68,0,0,0,84,0,68,0,0,0,0
0048E1  3  41 86 02 44  
0048E5  3  00 64 00 00  
0048FD  3  40 00 E0 60          .byte 64,0,224,96,144,97,0,145,0,25,0,0,64,21,0,80,128,32,0,37,0,17,0,0,0,21,0,17,0,0,0,0
004901  3  90 61 00 91  
004905  3  00 19 00 00  
00491D  3  60 16 90 01          .byte 96,22,144,1,192,13,40,34,0,0,0,0,96,6,144,9,136,17,64,6,0,2,0,0,0,0,0,0,0,0,0,0
004921  3  C0 0D 28 22  
004925  3  00 00 00 00  
00493D  3  98 05 64 00          .byte 152,5,100,0,112,3,138,8,0,0,0,0,152,1,100,2,98,4,144,1,128,0,0,0,0,0,0,0,0,0,0,0
004941  3  70 03 8A 08  
004945  3  00 00 00 00  
00495D  3  66 01 19 00          .byte 102,1,25,0,220,0,34,130,0,0,0,0,102,0,153,0,24,129,100,0,32,0,0,0,0,0,0,0,0,0,0,0
004961  3  DC 00 22 82  
004965  3  00 00 00 00  
00497D  3  59 80 06 40          .byte 89,128,6,64,55,0,136,160,0,0,0,0,25,128,38,64,70,32,25,0,8,0,0,0,0,0,0,0,0,0,0,0
004981  3  37 00 88 A0  
004985  3  00 00 00 00  
00499D  3  00 00 07 C0          .byte 0,0,7,192,24,48,32,8,64,100,64,20,128,10,128,10,128,2,144,2,80,4,72,4,32,8,24,48,7,192,0,0
0049A1  3  18 30 20 08  
0049A5  3  40 64 40 14  
0049BD  3  00 00 01 F0          .byte 0,0,1,240,6,12,8,2,16,25,16,5,160,2,160,2,160,0,164,0,20,1,18,1,8,2,6,12,1,240,0,0
0049C1  3  06 0C 08 02  
0049C5  3  10 19 10 05  
0049DD  3  00 00 00 7C          .byte 0,0,0,124,1,131,130,0,68,6,68,1,168,0,168,0,40,0,41,0,69,0,68,128,130,0,1,131,0,124,0,0
0049E1  3  01 83 82 00  
0049E5  3  44 06 44 01  
0049FD  3  00 00 00 1F          .byte 0,0,0,31,192,96,32,128,145,1,81,0,42,0,42,0,10,0,10,64,17,64,17,32,32,128,192,96,0,31,0,0
004A01  3  C0 60 20 80  
004A05  3  91 01 51 00  
004A1D  3  0F E0 10 10          .byte 15,224,16,16,32,8,64,100,64,20,128,10,128,10,128,10,160,2,160,2,144,2,80,4,72,4,32,8,24,48,7,192
004A21  3  20 08 40 64  
004A25  3  40 14 80 0A  
004A3D  3  03 F8 04 04          .byte 3,248,4,4,8,2,16,25,16,5,160,2,160,2,160,2,168,0,168,0,164,0,20,1,18,1,8,2,6,12,1,240
004A41  3  08 02 10 19  
004A45  3  10 05 A0 02  
004A5D  3  00 FE 01 01          .byte 0,254,1,1,130,0,68,6,68,1,168,0,168,0,168,0,42,0,42,0,41,0,69,0,68,128,130,0,1,131,0,124
004A61  3  82 00 44 06  
004A65  3  44 01 A8 00  
004A7D  3  80 3F 40 40          .byte 128,63,64,64,32,128,145,1,81,0,42,0,42,0,42,0,10,128,10,128,10,64,17,64,17,32,32,128,192,96,0,31
004A81  3  20 80 91 01  
004A85  3  51 00 2A 00  
004A9D  3  04 20 06 60          .byte 4,32,6,96,114,78,16,8,0,0,192,3,96,6,0,0,0,0,96,6,192,3,0,0,16,8,114,78,6,96,4,32
004AA1  3  72 4E 10 08  
004AA5  3  00 00 C0 03  
004ABD  3  01 08 01 98          .byte 1,8,1,152,156,147,4,2,0,0,240,0,152,1,0,0,0,0,152,1,240,0,0,0,4,2,156,147,1,152,1,8
004AC1  3  9C 93 04 02  
004AC5  3  00 00 F0 00  
004ADD  3  00 42 00 66          .byte 0,66,0,102,231,36,129,0,0,0,60,0,102,0,0,0,0,0,102,0,60,0,0,0,129,0,231,36,0,102,0,66
004AE1  3  E7 24 81 00  
004AE5  3  00 00 3C 00  
004AFD  3  80 10 80 19          .byte 128,16,128,25,57,201,32,64,0,0,15,0,25,128,0,0,0,0,25,128,15,0,0,0,32,64,57,201,128,25,128,16
004B01  3  39 C9 20 40  
004B05  3  00 00 0F 00  
004B1D  3               frmlst:
004B1D  3  00 03                .byte 0,3
004B1F  3  03 03                .byte 3,3
004B21  3  06 03                .byte 6,3
004B23  3  09 03                .byte 9,3
004B25  3  0C 03                .byte 12,3
004B27  3  0F 03                .byte 15,3
004B29  3  12 03                .byte 18,3
004B2B  3  15 03                .byte 21,3
004B2D  3  18 03                .byte 24,3
004B2F  3  1B 01                .byte 27,1
004B31  3  1C 02                .byte 28,2
004B33  3  1E 01                .byte 30,1
004B35  3  1F 03                .byte 31,3
004B37  3  22 03 25 00          .byte 34,3,37,0
004B3B  3               scdat:
004B3B  3  7B 00 C6 00          .word 123,198
004B3F  3  FF 00 50 17          .byte 255,0,80,23,255,0,5,23,255,0,6,23,255,0,5,23,255,0,4,7,8,9,10,255,0,26,11,12,13,14,255,0,26
004B43  3  FF 00 05 17  
004B47  3  FF 00 06 17  
004B60  3  0F 10 11 12          .byte 15,16,17,18,255,0,26,19,20,21,22,255,0,5,23,255,0,8,23,255,0,34,23,255,0,12,23,255,0,5,23,255,0,102
004B64  3  FF 00 1A 13  
004B68  3  14 15 16 FF  
004B82  3  FF 01 0E FF          .byte 255,1,14,255,0,10,23,255,0,5,6,255,5,12,6,255,0,4,23,255,0,70,23,255,0,8,23,255,0,6,23,255,0,48
004B86  3  00 0A 17 FF  
004B8A  3  00 05 06 FF  
004BA4  3  17 FF 00 4C          .byte 23,255,0,76,255,1,8,255,0,16,255,1,6,255,2,8,255,4,16,255,2,6
004BA8  3  FF 01 08 FF  
004BAC  3  00 10 FF 01  
004BBA  3  FF 00 50 17          .byte 255,0,80,23,255,0,5,23,255,0,6,23,255,0,5,23,255,0,29,1,1,255,0,11,1,1,1,255,0,7,7,8,9
004BBE  3  FF 00 05 17  
004BC2  3  FF 00 06 17  
004BDB  3  0A 00 00 00          .byte 10,0,0,0,5,5,255,0,11,5,41,5,255,0,7,11,12,13,14,255,0,17,42,255,0,8,15,16,17,18,255,0,17
004BDF  3  05 05 FF 00  
004BE3  3  0B 05 29 05  
004BFC  3  2B FF 00 08          .byte 43,255,0,8,19,20,21,22,0,23,255,0,12,23,255,0,5,23,255,0,18,1,1,1,255,0,27,5,41,5,255,0,28
004C00  3  13 14 15 16  
004C04  3  00 17 FF 00  
004C1D  3  2A FF 00 1D          .byte 42,255,0,29,43,255,0,16,23,255,0,4,1,1,1,255,0,10,7,8,9,10,0,0,23,255,0,10,5,41,5,255,0,10
004C21  3  2B FF 00 10  
004C25  3  17 FF 00 04  
004C3F  3  0B 0C 0D 0E          .byte 11,12,13,14,255,0,14,42,255,0,11,15,16,17,18,255,0,13,23,43,255,0,7,23,0,0,0,19,20,21,22,255,0,48
004C43  3  FF 00 0E 2A  
004C47  3  FF 00 0B 0F  
004C61  3  17 FF 01 04          .byte 23,255,1,4,255,0,26,255,5,4,255,0,42,255,1,8,255,0,16,255,1,6,255,2,8,255,4,16,255,2,6
004C65  3  FF 00 1A FF  
004C69  3  05 04 FF 00  
004C80  3               numsc:
004C80  3  02                   .byte 2
004C81  3               nmedat:
004C81  3  00 00 98 08          .byte 0,0,152,8,8,8,80,120,8,8,80,72,8,8,80,168,8,8,152,208,8,8,152,40,255
004C85  3  08 08 50 78  
004C89  3  08 08 50 48  
004C9A  3  00 00 98 08          .byte 0,0,152,8,8,8,16,72,8,8,16,176,8,8,56,120,8,8,88,64,8,8,128,120,255
004C9E  3  08 08 10 48  
004CA2  3  08 08 10 B0  
004CB3  3               NUMOBJ = 34
004CB3  3               objdta:
004CB3  3  00 00 00 00          .byte 0,0,0,0,30,56,59,124,125,174,125,182,255,214,255,222,255,222,255,220,127,188,63,120,30,240,8,32,4,64,2,128,255,80,88,255,80,88
004CB7  3  1E 38 3B 7C  
004CBB  3  7D AE 7D B6  
004CD9  3  00 00 1E 00          .byte 0,0,30,0,59,0,125,184,125,188,255,204,255,214,255,214,255,222,127,158,63,60,30,124,9,248,8,240,4,64,2,128,255,8,8,255,8,8
004CDD  3  3B 00 7D B8  
004CE1  3  7D BC FF CC  
004CFF  3  00 00 1E 00          .byte 0,0,30,0,59,0,125,128,125,128,255,192,255,192,255,192,255,192,127,128,63,0,30,0,8,0,8,0,4,0,2,0,255,0,0,255,0,0
004D03  3  3B 00 7D 80  
004D07  3  7D 80 FF C0  
004D25  3  00 00 00 F0          .byte 0,0,0,240,1,216,3,188,3,188,7,254,7,254,7,254,7,254,3,252,1,248,0,240,0,32,0,64,0,128,0,128,255,64,112,255,64,112
004D29  3  01 D8 03 BC  
004D2D  3  03 BC 07 FE  
004D4B  3  00 00 03 C0          .byte 0,0,3,192,7,224,15,176,15,208,31,216,31,248,31,248,31,248,15,240,7,224,7,224,3,192,1,0,0,128,1,0,255,64,144,255,64,144
004D4F  3  07 E0 0F B0  
004D53  3  0F D0 1F D8  
004D71  3  00 00 03 C0          .byte 0,0,3,192,7,224,15,176,15,208,31,216,31,248,31,248,31,248,15,240,7,224,7,224,3,192,1,0,0,128,1,0,255,0,0,255,0,0
004D75  3  07 E0 0F B0  
004D79  3  0F D0 1F D8  
004D97  3  00 00 03 C0          .byte 0,0,3,192,7,224,15,176,15,208,31,216,31,248,31,248,31,248,15,240,7,224,7,224,3,192,1,0,0,128,1,0,255,0,0,255,0,0
004D9B  3  07 E0 0F B0  
004D9F  3  0F D0 1F D8  
004DBD  3  00 00 03 C0          .byte 0,0,3,192,7,224,15,176,15,208,31,216,31,248,31,248,31,248,15,240,7,224,7,224,3,192,1,0,0,128,1,0,255,0,0,255,0,0
004DC1  3  07 E0 0F B0  
004DC5  3  0F D0 1F D8  
004DE3  3  00 00 03 C0          .byte 0,0,3,192,7,224,15,176,15,208,31,216,31,248,31,248,31,248,15,240,7,224,7,224,3,192,1,0,0,128,1,0,255,0,0,255,0,0
004DE7  3  07 E0 0F B0  
004DEB  3  0F D0 1F D8  
004E09  3  00 00 03 C0          .byte 0,0,3,192,7,224,15,176,15,208,31,216,31,248,31,248,31,248,15,240,7,224,7,224,3,192,1,0,0,128,1,0,255,0,0,255,0,0
004E0D  3  07 E0 0F B0  
004E11  3  0F D0 1F D8  
004E2F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,5,64,27,176,55,216,119,220,111,236,239,238,144,18,110,236,17,16,9,32,5,64,255,0,0,255,0,0
004E33  3  00 00 00 00  
004E37  3  00 00 05 40  
004E55  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,5,64,27,176,55,216,119,220,111,236,239,238,144,18,110,236,17,16,9,32,5,64,255,0,0,255,0,0
004E59  3  00 00 00 00  
004E5D  3  00 00 05 40  
004E7B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,5,64,27,176,55,216,119,220,111,236,239,238,144,18,110,236,17,16,9,32,5,64,255,0,0,255,0,0
004E7F  3  00 00 00 00  
004E83  3  00 00 05 40  
004EA1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,5,64,27,176,55,216,119,220,111,236,239,238,144,18,110,236,17,16,9,32,5,64,255,0,0,255,0,0
004EA5  3  00 00 00 00  
004EA9  3  00 00 05 40  
004EC7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,5,64,27,176,55,216,119,220,111,236,239,238,144,18,110,236,17,16,9,32,5,64,255,0,0,255,0,0
004ECB  3  00 00 00 00  
004ECF  3  00 00 05 40  
004EED  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,5,64,27,176,55,216,119,220,111,236,239,238,144,18,110,236,17,16,9,32,5,64,255,0,0,255,0,0
004EF1  3  00 00 00 00  
004EF5  3  00 00 05 40  
004F13  3  00 00 00 00          .byte 0,0,0,0,0,0,3,224,6,176,6,176,11,104,25,204,9,72,4,144,3,96,0,128,11,232,4,16,0,0,0,0,255,0,0,255,0,0
004F17  3  00 00 03 E0  
004F1B  3  06 B0 06 B0  
004F39  3  00 00 03 C0          .byte 0,0,3,192,5,96,10,176,13,80,26,168,21,88,26,168,21,88,26,168,13,80,10,176,5,96,2,192,1,128,1,0,255,32,24,255,32,24
004F3D  3  05 60 0A B0  
004F41  3  0D 50 1A A8  
004F5F  3  00 00 03 C0          .byte 0,0,3,192,4,32,8,16,8,80,16,40,16,40,16,8,16,8,16,8,8,16,8,16,4,32,2,64,1,128,1,0,255,0,0,255,0,0
004F63  3  04 20 08 10  
004F67  3  08 50 10 28  
004F85  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0
004F89  3  00 00 00 00  
004F8D  3  00 00 00 00  
004FAB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0
004FAF  3  00 00 00 00  
004FB3  3  00 00 00 00  
004FD1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0
004FD5  3  00 00 00 00  
004FD9  3  00 00 00 00  
004FF7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0
004FFB  3  00 00 00 00  
004FFF  3  00 00 00 00  
00501D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0
005021  3  00 00 00 00  
005025  3  00 00 00 00  
005043  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0
005047  3  00 00 00 00  
00504B  3  00 00 00 00  
005069  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0
00506D  3  00 00 00 00  
005071  3  00 00 00 00  
00508F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0
005093  3  00 00 00 00  
005097  3  00 00 00 00  
0050B5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0
0050B9  3  00 00 00 00  
0050BD  3  00 00 00 00  
0050DB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,59,184,34,168,58,168,10,168,59,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0
0050DF  3  00 00 00 00  
0050E3  3  3B B8 22 A8  
005101  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,59,184,10,40,11,168,8,168,11,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0
005105  3  00 00 00 00  
005109  3  3B B8 0A 28  
005127  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,46,238,42,170,42,170,42,170,46,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0
00512B  3  00 00 00 00  
00512F  3  2E EE 2A AA  
00514D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,46,238,40,170,46,170,34,170,46,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0
005151  3  00 00 00 00  
005155  3  2E EE 28 AA  
005173  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,238,238,42,170,234,170,138,170,238,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0
005177  3  00 00 00 00  
00517B  3  EE EE 2A AA  
005199  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0
00519D  3  00 00 00 00  
0051A1  3  00 00 00 00  
0051BF  3               font:
0051BF  3  87 3E 02 CD          .byte 135,62,2,205,153,128,205,158
0051C3  3  99 80 CD 9E  
0051C7  3  87 C9 C9 C9          .byte 135,201,201,201,201,201,0,24
0051CB  3  C9 C9 00 18  
0051CF  3  6C 6C 6C 00          .byte 108,108,108,0,0,0,0,0
0051D3  3  00 00 00 00  
0051D7  3  6C 6C FE 6C          .byte 108,108,254,108,254,108,108,0
0051DB  3  FE 6C 6C 00  
0051DF  3  30 7C C0 78          .byte 48,124,192,120,12,248,48,0
0051E3  3  0C F8 30 00  
0051E7  3  00 C6 CC 18          .byte 0,198,204,24,48,102,198,0
0051EB  3  30 66 C6 00  
0051EF  3  38 6C 38 76          .byte 56,108,56,118,220,204,118,0
0051F3  3  DC CC 76 00  
0051F7  3  60 60 C0 00          .byte 96,96,192,0,0,0,0,0
0051FB  3  00 00 00 00  
0051FF  3  18 30 60 60          .byte 24,48,96,96,96,48,24,0
005203  3  60 30 18 00  
005207  3  60 30 18 18          .byte 96,48,24,24,24,48,96,0
00520B  3  18 30 60 00  
00520F  3  00 66 3C FF          .byte 0,102,60,255,60,102,0,0
005213  3  3C 66 00 00  
005217  3  00 30 30 FC          .byte 0,48,48,252,48,48,0,0
00521B  3  30 30 00 00  
00521F  3  00 00 00 00          .byte 0,0,0,0,0,48,48,96
005223  3  00 30 30 60  
005227  3  00 00 00 FC          .byte 0,0,0,252,0,0,0,0
00522B  3  00 00 00 00  
00522F  3  00 00 00 00          .byte 0,0,0,0,0,48,48,0
005233  3  00 30 30 00  
005237  3  06 0C 18 30          .byte 6,12,24,48,96,192,128,0
00523B  3  60 C0 80 00  
00523F  3  38 4C C6 C6          .byte 56,76,198,198,198,100,56,0
005243  3  C6 64 38 00  
005247  3  18 38 18 18          .byte 24,56,24,24,24,24,126,0
00524B  3  18 18 7E 00  
00524F  3  7C C6 0E 3C          .byte 124,198,14,60,120,224,254,0
005253  3  78 E0 FE 00  
005257  3  7E 0C 18 3C          .byte 126,12,24,60,6,198,124,0
00525B  3  06 C6 7C 00  
00525F  3  1C 3C 6C CC          .byte 28,60,108,204,254,12,12,0
005263  3  FE 0C 0C 00  
005267  3  FC C0 FC 06          .byte 252,192,252,6,6,198,124,0
00526B  3  06 C6 7C 00  
00526F  3  3C 60 C0 FC          .byte 60,96,192,252,198,198,124,0
005273  3  C6 C6 7C 00  
005277  3  FE C6 0C 18          .byte 254,198,12,24,48,48,48,0
00527B  3  30 30 30 00  
00527F  3  7C C6 C6 7C          .byte 124,198,198,124,198,198,124,0
005283  3  C6 C6 7C 00  
005287  3  7C C6 C6 7E          .byte 124,198,198,126,6,12,120,0
00528B  3  06 0C 78 00  
00528F  3  00 30 30 00          .byte 0,48,48,0,0,48,48,0
005293  3  00 30 30 00  
005297  3  00 30 30 00          .byte 0,48,48,0,0,48,48,96
00529B  3  00 30 30 60  
00529F  3  18 30 60 C0          .byte 24,48,96,192,96,48,24,0
0052A3  3  60 30 18 00  
0052A7  3  00 00 FC 00          .byte 0,0,252,0,0,252,0,0
0052AB  3  00 FC 00 00  
0052AF  3  60 30 18 0C          .byte 96,48,24,12,24,48,96,0
0052B3  3  18 30 60 00  
0052B7  3  78 CC 0C 18          .byte 120,204,12,24,48,0,48,0
0052BB  3  30 00 30 00  
0052BF  3  7C C6 DE DE          .byte 124,198,222,222,222,192,120,0
0052C3  3  DE C0 78 00  
0052C7  3  38 6C C6 C6          .byte 56,108,198,198,254,198,198,0
0052CB  3  FE C6 C6 00  
0052CF  3  FC C6 C6 FC          .byte 252,198,198,252,198,198,252,0
0052D3  3  C6 C6 FC 00  
0052D7  3  3C 66 C0 C0          .byte 60,102,192,192,192,102,60,0
0052DB  3  C0 66 3C 00  
0052DF  3  F8 CC C6 C6          .byte 248,204,198,198,198,204,248,0
0052E3  3  C6 CC F8 00  
0052E7  3  FE C0 C0 FC          .byte 254,192,192,252,192,192,254,0
0052EB  3  C0 C0 FE 00  
0052EF  3  FE C0 C0 FC          .byte 254,192,192,252,192,192,192,0
0052F3  3  C0 C0 C0 00  
0052F7  3  3E 60 C0 CE          .byte 62,96,192,206,198,102,62,0
0052FB  3  C6 66 3E 00  
0052FF  3  C6 C6 C6 FE          .byte 198,198,198,254,198,198,198,0
005303  3  C6 C6 C6 00  
005307  3  7E 18 18 18          .byte 126,24,24,24,24,24,126,0
00530B  3  18 18 7E 00  
00530F  3  1E 06 06 06          .byte 30,6,6,6,198,198,124,0
005313  3  C6 C6 7C 00  
005317  3  C6 CC D8 F0          .byte 198,204,216,240,248,220,206,0
00531B  3  F8 DC CE 00  
00531F  3  60 60 60 60          .byte 96,96,96,96,96,96,126,0
005323  3  60 60 7E 00  
005327  3  C6 EE FE FE          .byte 198,238,254,254,214,198,198,0
00532B  3  D6 C6 C6 00  
00532F  3  C6 E6 F6 FE          .byte 198,230,246,254,222,206,198,0
005333  3  DE CE C6 00  
005337  3  7C C6 C6 C6          .byte 124,198,198,198,198,198,124,0
00533B  3  C6 C6 7C 00  
00533F  3  FC C6 C6 C6          .byte 252,198,198,198,252,192,192,0
005343  3  FC C0 C0 00  
005347  3  7C C6 C6 C6          .byte 124,198,198,198,222,204,122,0
00534B  3  DE CC 7A 00  
00534F  3  FC C6 C6 CE          .byte 252,198,198,206,248,220,206,0
005353  3  F8 DC CE 00  
005357  3  78 CC C0 7C          .byte 120,204,192,124,6,198,124,0
00535B  3  06 C6 7C 00  
00535F  3  7E 18 18 18          .byte 126,24,24,24,24,24,24,0
005363  3  18 18 18 00  
005367  3  C6 C6 C6 C6          .byte 198,198,198,198,198,198,124,0
00536B  3  C6 C6 7C 00  
00536F  3  C6 C6 C6 EE          .byte 198,198,198,238,124,56,16,0
005373  3  7C 38 10 00  
005377  3  C6 C6 D6 FE          .byte 198,198,214,254,254,238,198,0
00537B  3  FE EE C6 00  
00537F  3  C6 EE 7C 38          .byte 198,238,124,56,124,238,198,0
005383  3  7C EE C6 00  
005387  3  66 66 66 3C          .byte 102,102,102,60,24,24,24,0
00538B  3  18 18 18 00  
00538F  3  FE 0E 1C 38          .byte 254,14,28,56,112,224,254,0
005393  3  70 E0 FE 00  
005397  3  78 60 60 60          .byte 120,96,96,96,96,96,120,0
00539B  3  60 60 78 00  
00539F  3  C0 60 30 18          .byte 192,96,48,24,12,6,2,0
0053A3  3  0C 06 02 00  
0053A7  3  78 18 18 18          .byte 120,24,24,24,24,24,120,0
0053AB  3  18 18 78 00  
0053AF  3  10 38 6C C6          .byte 16,56,108,198,0,0,0,0
0053B3  3  00 00 00 00  
0053B7  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
0053BB  3  00 00 00 FF  
0053BF  3  30 30 18 00          .byte 48,48,24,0,0,0,0,0
0053C3  3  00 00 00 00  
0053C7  3  00 00 3C 66          .byte 0,0,60,102,102,102,59,0
0053CB  3  66 66 3B 00  
0053CF  3  60 60 7C 66          .byte 96,96,124,102,102,102,124,0
0053D3  3  66 66 7C 00  
0053D7  3  00 00 3E 60          .byte 0,0,62,96,96,96,62,0
0053DB  3  60 60 3E 00  
0053DF  3  06 06 3E 66          .byte 6,6,62,102,102,102,62,0
0053E3  3  66 66 3E 00  
0053E7  3  00 00 3C 66          .byte 0,0,60,102,126,96,62,0
0053EB  3  7E 60 3E 00  
0053EF  3  0E 18 18 7E          .byte 14,24,24,126,24,24,24,0
0053F3  3  18 18 18 00  
0053F7  3  00 00 3E 66          .byte 0,0,62,102,102,62,6,60
0053FB  3  66 3E 06 3C  
0053FF  3  60 60 60 7C          .byte 96,96,96,124,102,102,102,0
005403  3  66 66 66 00  
005407  3  00 18 00 18          .byte 0,24,0,24,24,24,24,0
00540B  3  18 18 18 00  
00540F  3  00 06 00 06          .byte 0,6,0,6,6,6,102,60
005413  3  06 06 66 3C  
005417  3  60 60 62 64          .byte 96,96,98,100,104,124,102,0
00541B  3  68 7C 66 00  
00541F  3  18 18 18 18          .byte 24,24,24,24,24,24,24,0
005423  3  18 18 18 00  
005427  3  00 00 76 6B          .byte 0,0,118,107,107,107,107,0
00542B  3  6B 6B 6B 00  
00542F  3  00 00 7C 66          .byte 0,0,124,102,102,102,102,0
005433  3  66 66 66 00  
005437  3  00 00 3C 66          .byte 0,0,60,102,102,102,60,0
00543B  3  66 66 3C 00  
00543F  3  00 00 7C 66          .byte 0,0,124,102,102,124,96,96
005443  3  66 7C 60 60  
005447  3  00 00 3E 66          .byte 0,0,62,102,102,62,6,6
00544B  3  66 3E 06 06  
00544F  3  00 00 6E 70          .byte 0,0,110,112,96,96,96,0
005453  3  60 60 60 00  
005457  3  00 00 3C 40          .byte 0,0,60,64,60,6,124,0
00545B  3  3C 06 7C 00  
00545F  3  30 30 FC 30          .byte 48,48,252,48,48,48,28,0
005463  3  30 30 1C 00  
005467  3  00 00 66 66          .byte 0,0,102,102,102,102,60,0
00546B  3  66 66 3C 00  
00546F  3  00 00 66 66          .byte 0,0,102,102,102,36,24,0
005473  3  66 24 18 00  
005477  3  00 00 63 6B          .byte 0,0,99,107,107,107,54,0
00547B  3  6B 6B 36 00  
00547F  3  00 00 63 36          .byte 0,0,99,54,28,54,99,0
005483  3  1C 36 63 00  
005487  3  00 00 66 66          .byte 0,0,102,102,44,24,48,96
00548B  3  2C 18 30 60  
00548F  3  00 00 7E 0C          .byte 0,0,126,12,24,48,126,0
005493  3  18 30 7E 00  
005497  3  1C 30 30 E0          .byte 28,48,48,224,48,48,28,0
00549B  3  30 30 1C 00  
00549F  3  18 18 18 00          .byte 24,24,24,0,24,24,24,0
0054A3  3  18 18 18 00  
0054A7  3  E0 30 30 1C          .byte 224,48,48,28,48,48,224,0
0054AB  3  30 30 E0 00  
0054AF  3  76 DC 00 00          .byte 118,220,0,0,0,0,0,0
0054B3  3  00 00 00 00  
0054B7  3  00 10 38 6C          .byte 0,16,56,108,198,198,254,0
0054BB  3  C6 C6 FE 00  
0054BF  3               
0054BF  1               
0054BF  2               ;------------------------------------------------------
0054BF  2               ; z80.asm
0054BF  2               ; spectrum stuff
0054BF  2               ; adresses
0054BF  2               
0054BF  2               ;ws	 = $60
0054BF  2               
0054BF  2               ;z80_f	 = ws+$00
0054BF  2               ;z80_a	 = ws+$01
0054BF  2               ;z80_af	 = z80_f
0054BF  2               
0054BF  2               ;z80_c	 = ws+$02
0054BF  2               ;z80_b	 = ws+$03
0054BF  2               ;z80_bc	 = z80_c
0054BF  2               
0054BF  2               ;z80_e	 = ws+$04
0054BF  2               ;z80_d	 = ws+$05
0054BF  2               ;z80_de	 = z80_e
0054BF  2               
0054BF  2               ;z80_l	 = ws+$06
0054BF  2               ;z80_h	 = ws+$07
0054BF  2               ;z80_hl	 = z80_l
0054BF  2               
0054BF  2               ;z80_x    = ws+$08
0054BF  2               ;z80_i    = ws+$09
0054BF  2               ;z80_ix	 = z80_x
0054BF  2               
0054BF  2               ;z80_iy	 = ws+$0a
0054BF  2               
0054BF  2               ;z80_fp	 = ws+$0c
0054BF  2               ;z80_ap	 = ws+$0d
0054BF  2               
0054BF  2               ;z80_cp	 = ws+$0e
0054BF  2               ;z80_bp	 = ws+$0f
0054BF  2               ;z80_bcp = z80_cp
0054BF  2               
0054BF  2               ;z80_ep	 = ws+$10
0054BF  2               ;z80_dp	 = ws+$11
0054BF  2               ;z80_dep = z80_ep
0054BF  2               
0054BF  2               ;z80_lp	 = ws+$12
0054BF  2               ;z80_hp	 = ws+$13
0054BF  2               ;z80_hlp = z80_lp
0054BF  2               
0054BF  2               ;z80_sp   = ws+$14
0054BF  2               
0054BF  2               ;z80_reg0 = ws+$16
0054BF  2               ;z80_reg1 = ws+$17
0054BF  2               ;z80_reg2 = ws+$18
0054BF  2               ;z80_reg3 = ws+$19
0054BF  2               
0054BF  2               ;z80_r	 = ws+$1a
0054BF  2               
0054BF  2               ; Contains seperatly 1 bit set
0054BF  2               
0054BF  2               _bitmem0	= $f8
0054BF  2               _bitmem1	= $f9
0054BF  2               _bitmem2	= $fa
0054BF  2               _bitmem3	= $fb
0054BF  2               _bitmem4	= $fc
0054BF  2               _bitmem5	= $fd
0054BF  2               _bitmem6	= $fe
0054BF  2               _bitmem7	= $ff
0054BF  2               	
0054BF  2               ; constants	
0054BF  2               _bitvalue0	= $01	
0054BF  2               _bitvalue1	= $02	
0054BF  2               _bitvalue2	= $04	
0054BF  2               _bitvalue3	= $08	
0054BF  2               _bitvalue4	= $10	
0054BF  2               _bitvalue5	= $20	
0054BF  2               _bitvalue6	= $40	
0054BF  2               _bitvalue7	= $80	
0054BF  2               
0054BF  2               _notbitvalue0	= $fe	
0054BF  2               _notbitvalue1	= $fd	
0054BF  2               _notbitvalue2	= $fb	
0054BF  2               _notbitvalue3	= $f7	
0054BF  2               _notbitvalue4	= $ef	
0054BF  2               _notbitvalue5	= $df	
0054BF  2               _notbitvalue6	= $bf	
0054BF  2               _notbitvalue7	= $7f	
0054BF  2               
0054BF  2               
0054BF  2               ;add_hl_bc:
0054BF  2               ;		lda z80_l
0054BF  2               ;		clc
0054BF  2               ;		adc z80_c
0054BF  2               ;		sta z80_l
0054BF  2               ;		lda z80_h
0054BF  2               ;		adc z80_b
0054BF  2               ;		sta z80_h
0054BF  2               ;		rts
0054BF  2               ;		
0054BF  2               ;add_ix_de:
0054BF  2               ;		lda z80_ix
0054BF  2               ;		clc
0054BF  2               ;		adc z80_e
0054BF  2               ;		sta z80_ix
0054BF  2               ;		lda z80_ix+1
0054BF  2               ;		adc z80_d
0054BF  2               ;		sta z80_ix+1
0054BF  2               ;		rts
0054BF  2               ;		
0054BF  2               ;add_iy_de:
0054BF  2               ;		lda z80_iy
0054BF  2               ;		clc
0054BF  2               ;		adc z80_e
0054BF  2               ;		sta z80_iy
0054BF  2               ;		lda z80_iy+1
0054BF  2               ;		adc z80_d
0054BF  2               ;		sta z80_iy+1
0054BF  2               ;		rts
0054BF  2               ;		
0054BF  2               ;add_hl_de:
0054BF  2               ;		lda z80_l
0054BF  2               ;		clc
0054BF  2               ;		adc z80_e
0054BF  2               ;		sta z80_l
0054BF  2               ;		lda z80_h
0054BF  2               ;		adc z80_d
0054BF  2               ;		sta z80_h
0054BF  2               ;		rts
0054BF  2               ;
0054BF  2               ;add_ix_bc:
0054BF  2               ;		lda z80_ix
0054BF  2               ;		clc
0054BF  2               ;		adc z80_c
0054BF  2               ;		sta z80_ix
0054BF  2               ;		lda z80_ix+1
0054BF  2               ;		adc z80_b
0054BF  2               ;		sta z80_ix+1
0054BF  2               ;		rts
0054BF  2               ;		
0054BF  2               ;add_iy_bc:
0054BF  2               ;		lda z80_iy
0054BF  2               ;		clc
0054BF  2               ;		adc z80_c
0054BF  2               ;		sta z80_iy
0054BF  2               ;		lda z80_iy+1
0054BF  2               ;		adc z80_b
0054BF  2               ;		sta z80_iy+1
0054BF  2               ;		rts
0054BF  2               ;		
0054BF  2               sbc_hl_de:
0054BF  2  A5 66        		lda z80_l
0054C1  2  E5 64        		sbc z80_e
0054C3  2  85 66        		sta z80_l
0054C5  2  A5 67        		lda z80_h
0054C7  2  E5 65        		sbc z80_d
0054C9  2  85 67        		sta z80_h
0054CB  2  60           		rts
0054CC  2               
0054CC  2               ;sbc_hl_bc:
0054CC  2               ;		lda z80_l
0054CC  2               ;		sbc z80_c
0054CC  2               ;		sta z80_l
0054CC  2               ;		lda z80_h
0054CC  2               ;		sbc z80_b
0054CC  2               ;		sta z80_h
0054CC  2               ;		rts
0054CC  2               ;
0054CC  2               ;cmp_hl_bc:
0054CC  2               ;		lda z80_l
0054CC  2               ;		cmp z80_c
0054CC  2               ;		bne cmp_hl_bc_end
0054CC  2               ;		lda z80_h
0054CC  2               ;		cmp z80_b
0054CC  2               ;cmp_hl_bc_end:
0054CC  2               ;		rts
0054CC  2               ;		
0054CC  2               ;cmp_iy_ix:
0054CC  2               ;		lda z80_iy
0054CC  2               ;		cmp z80_ix
0054CC  2               ;		bne cmp_iy_ix_end
0054CC  2               ;		lda z80_iy+1
0054CC  2               ;		cmp z80_ix+1
0054CC  2               ;cmp_iy_ix_end:
0054CC  2               ;		rts
0054CC  2               ;		
0054CC  2               ;dec_hl:
0054CC  2               ;		lda z80_l
0054CC  2               ;		bne dec_hl_no_dec_h
0054CC  2               ;		dec z80_h
0054CC  2               ;dec_hl_no_dec_h:
0054CC  2               ;		dec z80_l
0054CC  2               ;		rts
0054CC  2               ;	
0054CC  2               ;dec_ix:
0054CC  2               ;		lda z80_ix
0054CC  2               ;		bne dec_ix_no_dec_h
0054CC  2               ;		dec z80_ix+1
0054CC  2               ;dec_ix_no_dec_h:
0054CC  2               ;		dec z80_ix
0054CC  2               ;		rts
0054CC  2               ;		
0054CC  2               ;dec_bc:	
0054CC  2               ;		lda z80_c
0054CC  2               ;		bne dec_bc_no_dec_b
0054CC  2               ;		dec z80_b
0054CC  2               ;dec_bc_no_dec_b:
0054CC  2               ;		dec z80_c
0054CC  2               ;		rts
0054CC  2               ;	
0054CC  2               ;dec_de:
0054CC  2               ;		lda z80_e
0054CC  2               ;		bne dec_de_no_dec_d
0054CC  2               ;		dec z80_d
0054CC  2               ;dec_de_no_dec_d:
0054CC  2               ;		dec z80_e
0054CC  2               ;		rts
0054CC  2               ;		
0054CC  2               ;ex_af_afs:
0054CC  2               ;	rts
0054CC  2               ;ex_de_hl:
0054CC  2               ;		lda z80_e
0054CC  2               ;		ldx z80_l
0054CC  2               ;		stx z80_e
0054CC  2               ;		sta z80_l
0054CC  2               ;		lda z80_d
0054CC  2               ;		ldx z80_h
0054CC  2               ;		stx z80_d
0054CC  2               ;		sta z80_h
0054CC  2               ;		rts
0054CC  2               ;
0054CC  2               exx:
0054CC  2  A5 62        		lda z80_c
0054CE  2  A4 6E        		ldy z80_cp
0054D0  2  84 62        		sty z80_c
0054D2  2  85 6E        		sta z80_cp
0054D4  2  A5 63        		lda z80_b
0054D6  2  A4 6F        		ldy z80_bp
0054D8  2  84 63        		sty z80_b
0054DA  2  85 6F        		sta z80_bp
0054DC  2  A5 64        		lda z80_e
0054DE  2  A4 70        		ldy z80_ep
0054E0  2  84 64        		sty z80_e
0054E2  2  85 70        		sta z80_ep
0054E4  2  A5 65        		lda z80_d
0054E6  2  A4 71        		ldy z80_dp
0054E8  2  84 65        		sty z80_d
0054EA  2  85 71        		sta z80_dp		
0054EC  2  A5 80        		lda scraddr
0054EE  2  A4 72        		ldy z80_lp
0054F0  2  84 80        		sty scraddr
0054F2  2  85 72        		sta z80_lp
0054F4  2  A5 81        		lda scraddr+1
0054F6  2  A4 73        		ldy z80_hp
0054F8  2  84 81        		sty scraddr+1
0054FA  2  85 73        		sta z80_hp
0054FC  2  60           		rts
0054FD  2               		
0054FD  2               ;ex_sp_hl:
0054FD  2               ;		tsx
0054FD  2               ;		lda $0103,x
0054FD  2               ;		ldy z80_h
0054FD  2               ;		sta z80_h
0054FD  2               ;		tya
0054FD  2               ;		sta $0103,x
0054FD  2               ;		lda $0104,x
0054FD  2               ;		ldy z80_l
0054FD  2               ;		sta z80_l
0054FD  2               ;		tya
0054FD  2               ;		sta $104,x
0054FD  2               ;		rts
0054FD  2               ;		
0054FD  2               ;ldi:
0054FD  2               ;	rts
0054FD  2               ;ldir:
0054FD  2               ;		ldy #$00
0054FD  2               ;		ldx z80_b
0054FD  2               ;		beq ldir_last_page
0054FD  2               ;ldir_loop:		
0054FD  2               ;		lda (z80_hl),y
0054FD  2               ;		sta (z80_de),y
0054FD  2               ;		iny
0054FD  2               ;		bne ldir_loop
0054FD  2               ;		inc z80_h
0054FD  2               ;		inc z80_d
0054FD  2               ;		dex
0054FD  2               ;		bne ldir_loop
0054FD  2               ;ldir_last_page:
0054FD  2               ;		lda z80_c
0054FD  2               ;		beq ldir_end
0054FD  2               ;ldir_last_page_loop:		
0054FD  2               ;		lda (z80_hl),y
0054FD  2               ;		sta (z80_de),y
0054FD  2               ;		iny
0054FD  2               ;		cpy z80_c
0054FD  2               ;		bne ldir_last_page_loop
0054FD  2               ;ldir_end:		
0054FD  2               ;		stx z80_c
0054FD  2               ;		stx z80_b
0054FD  2               ;		tya
0054FD  2               ;		clc
0054FD  2               ;		adc z80_l
0054FD  2               ;		sta z80_l
0054FD  2               ;		bcc *+4
0054FD  2               ;		inc z80_h
0054FD  2               ;		tya
0054FD  2               ;		clc
0054FD  2               ;		adc z80_e
0054FD  2               ;		sta z80_e
0054FD  2               ;		bcc *+4
0054FD  2               ;		inc z80_d
0054FD  2               ;		rts
0054FD  2               ;		
0054FD  2               ;lddr:		ldy #$00
0054FD  2               ;lddr_loop:
0054FD  2               ;		lda (z80_hl),y
0054FD  2               ;		sta (z80_de),y
0054FD  2               ;		jsr dec_hl
0054FD  2               ;		jsr dec_de
0054FD  2               ;		jsr dec_bc
0054FD  2               ;		lda z80_b
0054FD  2               ;		ora z80_c
0054FD  2               ;		bne lddr_loop
0054FD  2               ;		rts
0054FD  2               ;ei:
0054FD  2               ;		rts
0054FD  2               ;di:
0054FD  2               ;		rts
0054FD  2               		
0054FD  2               ;-------------------------------------------------------------
0054FD  2               ; Set bits in bitmem
0054FD  2               ;-------------------------------------------------------------
0054FD  2               	
0054FD  2               z80_init:
0054FD  2  A2 00        	ldx #$00
0054FF  2  A9 01        	lda #$01
005501  2               z80_init_loop:		
005501  2  95 F8        	sta _bitmem0,x
005503  2  E8           	inx
005504  2  0A           	asl a
005505  2  D0 FA        	bne z80_init_loop
005507  2  60           	rts
005508  2               
005508  2               push_af:
005508  2               push_bc:
005508  2               push_de:
005508  2               push_hl:
005508  2               
005508  2               pop_af:
005508  2               pop_bc:
005508  2               pop_de:
005508  2               pop_ix:
005508  2               pop_hl:
005508  2               
005508  2               add_hl_hl:
005508  2               
005508  2               inc_bc:
005508  2               inc_de:
005508  2               inc_hl:
005508  2               inc_ix:
005508  2               inc_sp:
005508  2               
005508  2               cpir:
005508  2               
005508  2               ex_af_af:
005508  2               ;	rts
005508  2               
005508  1               eind_asm:
005508  1               
005508  1               relocate:
005508  1               ; Issue *TAPE otherwise DFS goes mental that we've overwritten workspace from &E00 - &1100
005508  1               
005508  1  A9 8C            lda #$8C
00550A  1  A2 0C            ldx #$0C
00550C  1  A0 00            ldy #$00
00550E  1  20 F4 FF         jsr OSBYTE					; *FX &8C,0,0 - *TAPE 1200
005511  1               
005511  1               ; Relocate all code down to &E00
005511  1  A2 48        	ldx #>(eind_asm - start_asm) + 1
005513  1  A0 00        	ldy #0
005515  1               reloop:
005515  1  B9 00 11     	lda load_address, y
005518  1  99 00 0E     	sta asm_code, y
00551B  1  C8           	iny
00551C  1  D0 F7        	bne reloop
00551E  1  EE 17 58     	inc reloop + 2 + load_address - asm_code
005521  1  EE 1A 58     	inc reloop + 5 + load_address - asm_code
005524  1  CA           	dex
005525  1  D0 EE        	bne reloop
005527  1  4C 03 0E     	jmp exec_game
005527  1               
