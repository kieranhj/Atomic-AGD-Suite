ca65 V2.9.2 - (C) Copyright 1998-2000 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ; BBC Micro version by Kieran Connell 2018
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $1100	; assembly address _BEEB
000000r 1               	.DEFINE header   0		; Header Wouter Ras emulator
000000r 1               	.DEFINE filenaam "AGD"
000000r 1               
000000r 1               .org asm_code-22*header
001100  1               
001100  1               .IF header
001100  1               ;********************************************************************
001100  1               ; ATM Header for Atom emulator Wouter Ras
001100  1               
001100  1               name_start:
001100  1               	.byte filenaam			; Filename
001100  1               name_end:
001100  1               	.repeat 16-name_end+name_start	; Fill with 0 till 16 chars
001100  1               	  .byte $0
001100  1               	.endrep
001100  1               
001100  1               	.word asm_code			; 2 bytes startaddress
001100  1               	.word exec			; 2 bytes linkaddress
001100  1               	.word eind_asm-start_asm	; 2 bytes filelength
001100  1               
001100  1               ;********************************************************************
001100  1               .ENDIF
001100  1               
001100  1               exec:
001100  1               start_asm:
001100  1               	.include "z80-zp.inc"
001100  1               	.include "game.inc"
001100  2               .segment "ZEROPAGE"
001100  2               
001100  2               ws	 = $60
001100  2               
001100  2               z80_f	 = ws+$00
001100  2               z80_a	 = ws+$01
001100  2               z80_af	 = z80_f
001100  2               
001100  2               z80_c	 = ws+$02
001100  2               z80_b	 = ws+$03
001100  2               z80_bc	 = z80_c
001100  2               
001100  2               z80_e	 = ws+$04
001100  2               z80_d	 = ws+$05
001100  2               z80_de	 = z80_e
001100  2               
001100  2               z80_l	 = ws+$06
001100  2               z80_h	 = ws+$07
001100  2               z80_hl	 = z80_l
001100  2               
001100  2               z80_x    = ws+$08
001100  2               z80_i    = ws+$09
001100  2               z80_ix	 = z80_x
001100  2               
001100  2               z80_iy	 = ws+$0a
001100  2               
001100  2               z80_fp	 = ws+$0c
001100  2               z80_ap	 = ws+$0d
001100  2               
001100  2               z80_cp	 = ws+$0e
001100  2               z80_bp	 = ws+$0f
001100  2               z80_bcp	 = z80_cp
001100  2               
001100  2               z80_ep	 = ws+$10
001100  2               z80_dp	 = ws+$11
001100  2               z80_dep	 = z80_ep
001100  2               
001100  2               z80_lp	 = ws+$12
001100  2               z80_hp	 = ws+$13
001100  2               z80_hlp	 = z80_lp
001100  2               
001100  2               z80_sp   = ws+$14
001100  2               
001100  2               z80_reg0 = ws+$16
001100  2               z80_reg1 = ws+$17
001100  2               z80_reg2 = ws+$18
001100  2               z80_reg3 = ws+$19
001100  2               
001100  2               z80_r	 = ws+$1a
001100  2               
001100  2               
001100  1               	.include "z80.asm"
001100  2               .include "test.inc" 
001100  2               
001100  3               ; Game engine code --------------------------------------------------------------
001100  3               
001100  3               ; Arcade Game Designer.
001100  3               ; (C) 2008 Jonathan Cauldwell.
001100  3               ; ZX Spectrum Next Engine v0.1.
001100  3               
001100  3               ; Global definitions ------------------------------------------------------------
001100  3               
001100  3               	FONT = font		; Font address
001100  3               
001100  3               ; Block characteristics.
001100  3               
001100  3               	PLATFM = 1		; platform.
001100  3               	WALL = PLATFM + 1	; solid wall.
001100  3               	LADDER = WALL + 1	; ladder.
001100  3               	FODDER = LADDER + 1	; fodder block.
001100  3               	DEADLY = FODDER + 1	; deadly block.
001100  3               	CUSTOM = DEADLY + 1	; custom block.
001100  3               	NUMTYP = CUSTOM + 1	; number of types.
001100  3               
001100  3               ; Sprites.
001100  3               
001100  3               	NUMSPR = 12		; number of sprites.
001100  3               	TABSIZ = 17		; size of each entry.
001100  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
001100  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
001100  3               
001100  3               	var_Type = 0	; sprite type
001100  3               	var_Image = 1	; sprite time number
001100  3               	var_Frame = 2	; sprite frame
001100  3               	var_Y = 3		; sprite y coordinate
001100  3               	var_X = 4		; sprite X coordinate
001100  3               
001100  3               	var_newType = 5	; sprite new type
001100  3               	var_newImage = 6	; sprite new image number
001100  3               	var_newFrame = 7	; sprite new frame
001100  3               	var_newY = 8		; sprite new y coordinate
001100  3               	var_newX = 9		; sprite new x coordinate
001100  3               	
001100  3               	var_Direction = 10	; sprite direction
001100  3               	var_Param1 = 11		; sprite parameter 1
001100  3               	var_Param2 = 12		; sprite parameter 2
001100  3               
001100  3               	var_jumpLo = 13		; sprite jump ptr low
001100  3               	var_jumpHi = 14		; sprite jump ptr high
001100  3               	var_dataLo = 15		; sprite data ptr low
001100  3               	var_dataHi = 16		; sprite data ptr high
001100  3               
001100  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
001100  3               
001100  3               ; Particle engine.
001100  3               
001100  3               	NUMSHR = 55		; pieces of shrapnel.
001100  3               	SHRSIZ = 6		; bytes per particle.
001100  3               
001100  3               ; Local vars
001100  3               
001100  3               	scraddr	= $80
001100  3               	fntaddr	= $82
001100  3               	tileaddr= $84
001100  3               	bufaddr	= $86
001100  3               	tmp     = $88
001100  3               
001100  3               	scr_l	= $90
001100  3               	scr_r	= $92
001100  3               	scr_txt	= $94
001100  3               
001100  3               ; System constants
001100  3               
001100  3               	ScreenAddr  = $5800	; Startaddress video RAM _BEEB
001100  3               	ScreenSize 	= $8000 - ScreenAddr	; Screen size bytes _BEEB
001100  3               	ScreenRowBytes = 320				; 40 columns
001100  3               
001100  3               	SpriteMaxY	= 185	; used for clipping bottom of screen
001100  3               
001100  3               ;	ScrSelAddr  = $b000	; Screen selection address
001100  3               ;	KeyRowAddr  = $b000	; PIA key matrix row
001100  3               ;	KeyColAddr  = $b001	; PIA key matrix column
001100  3               ;	SpeakerBit  = $b002	; Speaker bit
001100  3               ;	CmdReg      = $b400	; Command register AtoMMC
001100  3               ;	DatReg      = $b401	; Data register AtoMMC 
001100  3               ;	Timer2_Low  = $b808	; Timer 2 low byte
001100  3               ;	Timer2_High = $b809	; Timer 2 high byte
001100  3               
001100  3               ; System calls
001100  3               
001100  3               ;	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
001100  3               ;	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
001100  3               ;	OSRDCH   = $fe94	; get key subroutine
001100  3               ;   READKEY  = $fe71	; scan key matrix subroutine
001100  3               
001100  3               ; _BEEB MOS calls
001100  3               
001100  3               	OSBYTE	 = $fff4
001100  3               	OSFILE	 = $ffdd
001100  3               	OSWRCH	 = $ffee
001100  3               	OSASCI	 = $ffe3
001100  3               	OSWORD	 = $fff1
001100  3               	OSFIND	 = $ffce
001100  3               	OSGBPB	 = $ffd1
001100  3               	OSARGS	 = $ffda
001100  3               
001100  3               ; Conditional compilation flags
001100  3               ; Flags are set in commandline assembly
001100  3               
001100  3               ;	mflag = 0 		; MENU + INV
001100  3               ;	pflag = 0		; Particle engine
001100  3               ;	sflag = 0		; scrollytext
001100  3               ;	fflag = 1		; Fontflag
001100  3               
001100  3               .if iflag
001100  3               	TxtInvert   = $ff	; Invert byte for character printing
001100  3               	ScrFillByte = $ff	; Screen fill byte for CLS
001100  3               .else
001100  3               	TxtInvert   = $00	; Invert byte for character printing
001100  3               	ScrFillByte = $00	; Screen fill byte for CLS
001100  3               .endif
001100  3               	ScrMode     = 4		; Screen mode:	_BEEB
001100  3               				;  $d0 = CLEAR4a colour
001100  3               				;  $f0 = CLEAR4  mono
001100  3               
001100  3               ;===============================================================
001100  3               ; Game starts here
001100  3               ;===============================================================
001100  3               
001100  3               .segment "CODE"
001100  3               
001100  3               ;--------------------------------------------------------------
001100  3               ; If a font is required...
001100  3               ;--------------------------------------------------------------
001100  3               
001100  3  A9 BC        	lda #<(FONT-256)	; address of font.
001102  3  8D 5D 32     	sta FontPtr
001105  3  A9 38        	lda #>(FONT-256)
001107  3  8D 5E 32     	sta FontPtr+1
00110A  3               
00110A  3               :
00110A  3  20 20 17     	jsr game	 	; start the game.
00110D  3               
00110D  3  A2 FF        	ldx #$ff
00110F  3  A0 7F        	ldy #$7f
001111  3  A9 81        	lda #$81
001113  3  20 F4 FF     	jsr OSBYTE
001116  3               
001116  3  4C 0A 11     	jmp :-
001119  3               
001119  3  60           	rts				; exit (to BASIC?)
00111A  3               	
00111A  3  00           contrl:	.byte 0			; control, 0 = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
00111B  3  00           joyval:	.byte 0			; joystick reading.
00111C  3  00           frmno:	.byte 0			; selected frame.
00111D  3               
00111D  3               ; Don't change the order of these four.  
00111D  3               ; Menu routine relies on winlft following wintop.
00111D  3               
00111D  3  01           wintop:	.byte WINDOWTOP		; top of window.
00111E  3  09           winlft:	.byte WINDOWLFT		; left edge.
00111F  3  16           winhgt:	.byte WINDOWHGT		; window height.
001120  3  16           winwid:	.byte WINDOWWID		; window width.
001121  3  01           numob:	.byte NUMOBJ		; number of objects in game.
001122  3               
001122  3               ; Variables start here.
001122  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
001122  3               
001122  3  08           wntopx:	.byte (8 * WINDOWTOP)
001123  3  48           wnlftx:	.byte (8 * WINDOWLFT)
001124  3  A8           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
001125  3  E6           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
001126  3               
001126  3  00           scno:	.byte 0			; present screen number.
001127  3  03           numlif:	.byte 3			; number of lives.
001128  3               
001128  3  00           vara:	.byte 0			; general-purpose variable.
001129  3  00           varb:	.byte 0			; general-purpose variable.
00112A  3  00           varc:	.byte 0			; general-purpose variable.
00112B  3  00           vard:	.byte 0			; general-purpose variable.
00112C  3  00           vare:	.byte 0			; general-purpose variable.
00112D  3  00           varf:	.byte 0			; general-purpose variable.
00112E  3  00           varg:	.byte 0			; general-purpose variable.
00112F  3  00           varh:	.byte 0			; general-purpose variable.
001130  3  00           vari:	.byte 0			; general-purpose variable.
001131  3  00           varj:	.byte 0			; general-purpose variable.
001132  3  00           vark:	.byte 0			; general-purpose variable.
001133  3  00           varl:	.byte 0			; general-purpose variable.
001134  3  00           varm:	.byte 0			; general-purpose variable.
001135  3  00           varn:	.byte 0			; general-purpose variable.
001136  3  00           varo:	.byte 0			; general-purpose variable.
001137  3  00           varp:	.byte 0			; general-purpose variable.
001138  3  00           varq:	.byte 0			; general-purpose variable.
001139  3  00           varr:	.byte 0			; general-purpose variable.
00113A  3  00           vars:	.byte 0			; general-purpose variable.
00113B  3  00           vart:	.byte 0			; general-purpose variable.
00113C  3  00           varu:	.byte 0			; general-purpose variable.
00113D  3  00           varv:	.byte 0			; general-purpose variable.
00113E  3  00           varw:	.byte 0			; general-purpose variable.
00113F  3  00           varz:	.byte 0			; general-purpose variable.
001140  3               
001140  3  00           charx:	.byte 0			; cursor x position.
001141  3  00           chary:	.byte 0			; cursor y position.
001142  3               
001142  3  00           clock:	.byte 0			; last clock reading.
001143  3  FF           varrnd:	.byte 255		; last random number.
001144  3  FE           varobj:	.byte 254		; last object number.
001145  3  FF           varopt:	.byte 255		; last option chosen from menu.
001146  3  FF           varblk:	.byte 255		; block type.
001147  3  00           nexlev:	.byte 0			; next level flag.
001148  3  00           restfl:	.byte 0			; restart screen flag.
001149  3  00           deadf:	.byte 0			; dead flag.
00114A  3  00           gamwon:	.byte 0			; game won flag.
00114B  3  00           dispx:	.byte 0			; cursor x position.
00114C  3  00           dispy:	.byte 0			; cursor y position.
00114D  3               
00114D  3               ; Make sure pointers are arranged in the same order as the data itself.
00114D  3               
00114D  3  2A 38        frmptr:	.word frmlst         ; sprite frames.
00114F  3               
00114F  3               ; Assorted game routines which can go in contended memory.
00114F  3               
00114F  3               ;--------------------------------------------------------------
00114F  3               ; Modify for inventory.
00114F  3               ; called by the INV command
00114F  3               ;
00114F  3               ; Input:
00114F  3               ;  X   = message nr with objects seperated with ,
00114F  3               ;
00114F  3               ; Output:
00114F  3               ;  OPT = selected line nr of INV menu
00114F  3               ;--------------------------------------------------------------
00114F  3               
00114F  3               .if mflag
00114F  3               minve:
00114F  3               	lda #<(invdis)		; routine address.
00114F  3               	sta mod0+1		; set up menu routine.
00114F  3               	sta mod2+1		; set up count routine.
00114F  3               	lda #>(invdis)
00114F  3               	sta mod0+2
00114F  3               	sta mod2+2
00114F  3               	lda #<(fopt)		; find option from available objects.
00114F  3               	sta mod1+1		; set up routine.
00114F  3               	lda #>(fopt)
00114F  3               	sta mod1+1+1
00114F  3               	jmp dbox		; do menu routine.
00114F  3               
00114F  3               ;--------------------------------------------------------------
00114F  3               ; Modify for menu.
00114F  3               ; called by the MENU command
00114F  3               ;
00114F  3               ; Input:
00114F  3               ;  X   = message nr with menu items seperated with ,
00114F  3               ;
00114F  3               ; Output:
00114F  3               ;  OPT = selected line nr of MENU menu
00114F  3               ;--------------------------------------------------------------
00114F  3               
00114F  3               mmenu:
00114F  3               	lda #<(always)		; routine address.
00114F  3               	sta mod0+1		; set up routine.
00114F  3               	sta mod2+1		; set up count routine.
00114F  3               	lda #>(always)
00114F  3               	sta mod0+2
00114F  3               	sta mod2+2
00114F  3               
00114F  3               	lda #<(fstd)		; standard option selection.
00114F  3               	sta mod1+1		; set up routine.
00114F  3               	lda #>(fstd)
00114F  3               	sta mod1+2
00114F  3               
00114F  3               ; Drop through into box routine.
00114F  3               
00114F  3               ;--------------------------------------------------------------
00114F  3               ; Work out size of box for message or menu.
00114F  3               ;--------------------------------------------------------------
00114F  3               
00114F  3               dbox:
00114F  3               	lda #<(msgdat)		; pointer to messages.
00114F  3               	sta z80_l
00114F  3               	lda #>(msgdat)
00114F  3               	sta z80_h
00114F  3               	
00114F  3               	jsr getwrd		; get message number.
00114F  3               
00114F  3               	lda z80_h		; store pointer to message.
00114F  3               	sta TmpAddr
00114F  3               	lda z80_l
00114F  3               	sta TmpAddr+1
00114F  3               
00114F  3               	lda #1			; height.
00114F  3               	sta z80_d
00114F  3               	lda #0			; start at object zero.
00114F  3               	sta combyt		; store number of object in combyt.
00114F  3               	sta z80_e		; maximum width.
00114F  3               dbox5:
00114F  3               	lda #0			; this line"s width.
00114F  3               	sta z80_b
00114F  3               mod2:
00114F  3               	jsr always		; item in player"s possession?
00114F  3               	cmp #255
00114F  3               	bne dbox6		; not in inventory, skip this line.
00114F  3               	inc z80_d		; add to tally.
00114F  3               dbox6:
00114F  3               	ldy #0			; get character.
00114F  3               	lda (z80_hl),y
00114F  3               	sta z80_a
00114F  3               	inc z80_l		; next character.
00114F  3               	bne :+
00114F  3               	inc z80_h
00114F  3               :
00114F  3               	lda z80_a		; reached end of line?
00114F  3               	cmp #','
00114F  3               	beq dbox3		; yes.
00114F  3               	cmp #13
00114F  3               	beq dbox3		; yes.
00114F  3               	inc z80_b		; add to this line"s width.
00114F  3               	lda z80_a
00114F  3               	bmi dbox4		; end of message? yes, end count.
00114F  3               	jmp dbox6		; repeat until we find the end.
00114F  3               dbox3:
00114F  3               	lda z80_e		; maximum line width.
00114F  3               	cmp z80_b		; have we exceeded longest so far?
00114F  3               	bpl dbox5		; no, carry on looking.
00114F  3               	lda z80_b		; make this the widest so far.
00114F  3               	sta z80_e
00114F  3               	jmp dbox5		; keep looking.
00114F  3               dbox4:
00114F  3               	lda z80_e		; maximum line width.
00114F  3               	cmp z80_b		; have we exceeded longest so far?
00114F  3               	bpl dbox8		; no, carry on looking.
00114F  3               	lda z80_b		; final line is the longest so far.
00114F  3               	sta z80_e
00114F  3               dbox8:
00114F  3               	dec z80_d		; decrement items found.
00114F  3               	bne :+			; total was zero.
00114F  3               	jmp dbox15		
00114F  3               :
00114F  3               	lda z80_e		; longest line.
00114F  3               	bne :+			; was it zero?
00114F  3               	jmp dbox15		; total was zero.
00114F  3               :
00114F  3               	sta bwid		; set up size.
00114F  3               	lda z80_d
00114F  3               	sta blen
00114F  3               
00114F  3               ;--------------------------------------------------------------
00114F  3               ; That's set up our box size.
00114F  3               ;--------------------------------------------------------------
00114F  3               
00114F  3               	lda winhgt		; window height in characters.
00114F  3               	sec
00114F  3               	sbc z80_d		; subtract height of box.
00114F  3               	lsr a			; divide by 2.
00114F  3               	clc
00114F  3               	adc wintop		; add top edge of window.
00114F  3               	sta btop		; set up box top.
00114F  3               
00114F  3               	lda winwid		; window width in characters.
00114F  3               	sec	
00114F  3               	sbc z80_e		; subtract box width.
00114F  3               	lsr a			; divide by 2.
00114F  3               	clc
00114F  3               	adc winlft		; add left edge of window.
00114F  3               	sta blft		; box left.
00114F  3               
00114F  3               	lda FontPtr		; font.
00114F  3               	sta grbase		; set up for text display.
00114F  3               	lda FontPtr+1
00114F  3               	sta grbase+1
00114F  3               
00114F  3               	lda TmpAddr+1		; restore message pointer.
00114F  3               	sta z80_l
00114F  3               	lda TmpAddr
00114F  3               	sta z80_h
00114F  3               
00114F  3               	lda btop		; box top.
00114F  3               	sta dispy		; set display coordinate.
00114F  3               	lda #0			; start at object zero.
00114F  3               	sta combyt		; store number of object in combyt.
00114F  3               dbox2:
00114F  3               	lda combyt		; get object number.
00114F  3               	sta z80_a
00114F  3               mod0:
00114F  3               	jsr always		; check inventory for display.
00114F  3               	cmp #255
00114F  3               	beq :+			
00114F  3               	jmp dbox13		; not in inventory, skip this line.
00114F  3               :
00114F  3               	lda blft		; box left.
00114F  3               	sta dispx		; set left display position.
00114F  3               	lda bwid		; box width.
00114F  3               	sta z80_b		; store width.
00114F  3               dbox0:
00114F  3               	ldy #0			; get character.
00114F  3               	lda (z80_hl),y
00114F  3               	cmp #','		; end of line?
00114F  3               	beq dbox1		; yes, next one.
00114F  3               	cmp #13			; end of line?
00114F  3               	beq dbox1		; yes, next one.
00114F  3               
00114F  3               	dec z80_b		; one less to display.
00114F  3               	and #127		; remove terminator.
00114F  3               
00114F  3               	jsr pchr		; display on screen.
00114F  3               
00114F  3               	ldy #0
00114F  3               	lda (z80_hl),y		; get character.
00114F  3               	sta z80_a
00114F  3               	inc z80_l		; next character.
00114F  3               	bne :+
00114F  3               	inc z80_h
00114F  3               :
00114F  3               	lda z80_a
00114F  3               	cmp #128		; end of message?
00114F  3               	bmi :+
00114F  3               	jmp dbox7		; yes, job done.
00114F  3               :
00114F  3               	lda z80_b		; chars remaining.
00114F  3               	beq :+			; are any left?
00114F  3               	jmp dbox0		; yes, continue.
00114F  3               :
00114F  3               ;---------------------------------------------------
00114F  3               ; Reached limit of characters per line.
00114F  3               ;---------------------------------------------------
00114F  3               
00114F  3               dbox9:
00114F  3               	ldy #0
00114F  3               	lda (z80_hl),y		; get character.
00114F  3               	inc z80_l		; next one.
00114F  3               	bne :+
00114F  3               	inc z80_h
00114F  3               :
00114F  3               	cmp #','		; another line?
00114F  3               	beq dbox10		; yes, do next line.
00114F  3               	cmp #13			; another line?
00114F  3               	beq dbox10		; yes, do next line.
00114F  3               	cmp #128		; end of message?
00114F  3               	bcs :+
00114F  3               	jmp dbox11		; yes, finish message.
00114F  3               :
00114F  3               	jmp dbox9
00114F  3               
00114F  3               ;---------------------------------------------------
00114F  3               ; Fill box to end of line.
00114F  3               ;---------------------------------------------------
00114F  3               
00114F  3               dboxf:
00114F  3               	lda #32			; space character.
00114F  3               	jsr pchr		; display character.
00114F  3               	dec z80_b
00114F  3               	beq :+
00114F  3               	jmp dboxf		; repeat for remaining chars on line.
00114F  3               :
00114F  3               	rts
00114F  3               dbox1:
00114F  3               	inc z80_l		; skip character.
00114F  3               	bne :+
00114F  3               	inc z80_h
00114F  3               :
00114F  3               	jsr dboxf		; fill box out to right side.
00114F  3               dbox10:
00114F  3               	inc dispy		; y coordinate down a line next position.
00114F  3               	jmp dbox2		; next line.
00114F  3               dbox7:
00114F  3               	lda z80_b		; chars remaining.
00114F  3               	bne :+			; are any left?
00114F  3               	jmp dbox11		; no, nothing to draw.
00114F  3               :
00114F  3               	jsr dboxf		; fill message to line.
00114F  3               
00114F  3               ;------------------------------------------------------
00114F  3               ; Drawn the box menu, now select option.
00114F  3               ;------------------------------------------------------
00114F  3               
00114F  3               dbox11:
00114F  3               	lda btop		; box top.
00114F  3               	sta dispy		; set bar position.
00114F  3               dbox14:
00114F  3               	jsr joykey		; get controls.
00114F  3               	cmp #$7f		; anything pressed?
00114F  3               	bne dbox14		; yes, debounce it.
00114F  3               	jsr dbar		; draw bar.
00114F  3               dbox12:
00114F  3               	jsr joykey		; get controls.
00114F  3               	cmp #$7f		; anything pressed?
00114F  3               	beq dbox12		; no, nothing.
00114F  3               	and #16			; fire button pressed?
00114F  3               	bne :+
00114F  3               mod1:
00114F  3               	jmp fstd		; yes, job done.
00114F  3               :
00114F  3               	jsr dbar		; delete bar.
00114F  3               
00114F  3               	lda joyval		; joystick reading.
00114F  3               	and #8			; going up?
00114F  3               	beq dboxu		; yes, go up.
00114F  3               
00114F  3               	ldx dispy		; vertical position of bar.
00114F  3               	inx			; look down.
00114F  3               	txa
00114F  3               	sec
00114F  3               	sbc btop		; find distance from top.
00114F  3               	cmp blen		; top of box.
00114F  3               	bne :+
00114F  3               	jmp dbox14		; yes, go no further.
00114F  3               :
00114F  3               	inc dispy		; move bar.
00114F  3               	jmp dbox14		; continue.
00114F  3               dboxu:
00114F  3               	lda dispy		; vertical position of bar.
00114F  3               	cmp btop		; are we at the top?
00114F  3               	bne :+
00114F  3               	jmp dbox14		; yes, go no further.
00114F  3               :
00114F  3               	dec dispy		; move bar.
00114F  3               	jmp dbox14		; continue.
00114F  3               fstd:
00114F  3               	lda dispy		; bar position.
00114F  3               	sec
00114F  3               	sbc btop		; find selected option.
00114F  3               	sta varopt		; store the option.
00114F  3               	jmp redraw		; redraw the screen.
00114F  3               
00114F  3               ;------------------------------------------------------
00114F  3               ; Option not available.  Skip this line.
00114F  3               ;------------------------------------------------------
00114F  3               
00114F  3               dbox13:
00114F  3               	ldy #0
00114F  3               	lda (z80_hl),y		; get character.
00114F  3               	inc z80_l		; next one.
00114F  3               	bne :+
00114F  3               	inc z80_h
00114F  3               :
00114F  3               	cmp #','		; another line?
00114F  3               	bne :+
00114F  3               	jmp dbox2		; yes, do next line.
00114F  3               :
00114F  3               	cmp #13			; another line?
00114F  3               	bne :+
00114F  3               	jmp dbox2		; yes, do next line.
00114F  3               :
00114F  3               
00114F  3               	bpl :+			; end of message?
00114F  3               	jmp dbox11		; yes, finish message.
00114F  3               :
00114F  3               	jmp dbox13
00114F  3               dbox15:
00114F  3               	lda TmpAddr		; pop message pointer from the stack.
00114F  3               	sta z80_h
00114F  3               	lda TmpAddr+1
00114F  3               	sta z80_l
00114F  3               	rts
00114F  3               
00114F  3               ;------------------------------------------------------
00114F  3               ; Invert bar
00114F  3               ;------------------------------------------------------
00114F  3               
00114F  3               dbar:
00114F  3               	lda blft		; box left.
00114F  3               	sta dispx		; set display coordinate.
00114F  3               	jsr gprad		; get printing address.
00114F  3               
00114F  3               	lda bwid		; box width.
00114F  3               	sta z80_c		; loop counter in c.
00114F  3               	lda z80_h		
00114F  3               	sta z80_d		; store screen address high byte.
00114F  3               dbar1:
00114F  3               	ldx #7			; pixel height in b.
00114F  3               dbar0:
00114F  3               	ldy scrtab,x
00114F  3               	lda (scraddr),y		; get screen byte.
00114F  3               	eor #255		; reverse all bits.
00114F  3               	sta (scraddr),y		; write back to screen.
00114F  3               	dex			; next line down.
00114F  3               	bpl dbar0		; draw rest of character.
00114F  3               
00114F  3               	clc
00114F  3               	lda scraddr		; one char right.
00114F  3               	adc #8
00114F  3               	sta scraddr
00114F  3               	bcc :+
00114F  3               	inc scraddr+1
00114F  3               :
00114F  3               
00114F  3               	dec z80_c		; decrement character counter.
00114F  3               	beq :+
00114F  3               	jmp dbar1		; repeat for whole line.
00114F  3               :
00114F  3               	rts
00114F  3               
00114F  3               ;------------------------------------------------------
00114F  3               ; Point to object
00114F  3               ;
00114F  3               ; Input:
00114F  3               ;  -
00114F  3               ;
00114F  3               ; Output:
00114F  3               ;  A = object number, A=255 if already in possession
00114F  3               ;------------------------------------------------------
00114F  3               
00114F  3               invdis:
00114F  3               	lda z80_l		; store message text pointer.
00114F  3               	pha
00114F  3               	lda z80_h
00114F  3               	pha
00114F  3               	lda combyt		; object number.
00114F  3               	inc combyt		; ready for next one.
00114F  3               	jsr gotob		; check if we have object.
00114F  3               	tay
00114F  3               	pla
00114F  3               	sta z80_h
00114F  3               	pla
00114F  3               	sta z80_l
00114F  3               	tya
00114F  3               	rts
00114F  3               
00114F  3               ;------------------------------------------------------
00114F  3               ; Find option selected.
00114F  3               ;
00114F  3               ; Input:
00114F  3               ;  -
00114F  3               ;
00114F  3               ; Output:
00114F  3               ;  OPT = selected object
00114F  3               ;------------------------------------------------------
00114F  3               
00114F  3               fopt:
00114F  3               	lda dispy
00114F  3               	sec
00114F  3               	sbc btop		; find selected option.
00114F  3               	sta tmp+2		; option selected in b register.
00114F  3               	inc tmp+2
00114F  3               
00114F  3               	lda #0			; set to first item.
00114F  3               	sta combyt		; object number.
00114F  3               fopt0:
00114F  3               	jsr fobj		; find next object in inventory.
00114F  3               	dec tmp+2
00114F  3               	bne fopt0		; repeat for relevant steps down the list.
00114F  3               
00114F  3               	lda combyt		; get option.
00114F  3               	sta varopt		; store the option.
00114F  3               	dec varopt		; one less, due to where we increment combyt.
00114F  3               	jmp redraw		; redraw the screen.
00114F  3               fobj:
00114F  3               	ldy combyt		; object number.
00114F  3               	inc combyt		; ready for next item.
00114F  3               	tya
00114F  3               	jsr gotob		; do we have this item?
00114F  3               	cmp #255
00114F  3               	bne :+
00114F  3               	rts
00114F  3               :
00114F  3               	jmp fobj		; yes, it's on the list.
00114F  3               
00114F  3               bwid:	.byte 0              ; box/menu width.
00114F  3               blen:	.byte 0              ; box/menu height.
00114F  3               btop:	.byte 0              ; box coordinates.
00114F  3               blft:	.byte 0
00114F  3               .endif
00114F  3               
00114F  3               ;----------------------------------------------------
00114F  3               ; Wait for keypress.
00114F  3               ;----------------------------------------------------
00114F  3               
00114F  3               prskey:
00114F  3  8A           	txa
001150  3  48           	pha
001151  3               prsloop:
001151  3  20 BA 11     	jsr vsync
001154  3               ; _BEEB KEYS
001154  3  A9 79        	lda #$79
001156  3  A2 01        	ldx #$01
001158  3  20 F4 FF     	jsr OSBYTE
00115B  3  E0 FF        	cpx #$ff
00115D  3  F0 F2        	beq prsloop		; wait until key pressed
00115F  3  68           	pla
001160  3  AA           	tax
001161  3  60           	rts
001162  3               
001162  3               ;----------------------------------------------------
001162  3               ; Delay routine 1/50 sec
001162  3               ;
001162  3               ; Wait 1/60 sec = 16666 usec
001162  3               ; Wait 208 x 16 =  3328 usec
001162  3               ;                 19994 usec
001162  3               ; rts           =     6 usec
001162  3               ; Total         = 20000 usec
001162  3               ;----------------------------------------------------
001162  3               
001162  3               delay:
001162  3  8D E7 1D     	sta xtmp
001165  3               del_loop:
001165  3  A9 13        	lda #19
001167  3  20 F4 FF     	jsr OSBYTE		; wait for vsync _BEEB
00116A  3               
00116A  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
00116C  3               delay1:
00116C  3  61 80        	adc ($80,x)		;	 6 usec
00116E  3  61 80        	adc ($80,x)		;	 6 usec
001170  3  88           	dey			;	 2 usec
001171  3  D0 F9        	bne delay1		;	 2 usec
001173  3  EA           	nop			; 2 usec
001174  3  EA           	nop			; 2 usec
001175  3               				; tot: 20000 usec
001175  3  CE E7 1D     	dec xtmp
001178  3  D0 EB        	bne del_loop
00117A  3  60           	rts
00117B  3               
00117B  3               ;----------------------------------------------------
00117B  3               ; Clear sprite table.
00117B  3               ;
00117B  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
00117B  3               ;----------------------------------------------------
00117B  3               
00117B  3               xspr:
00117B  3  A9 FF        	lda #255		; clear byte.
00117D  3  A2 00        	ldx #0			; length of table.
00117F  3               xspr0:
00117F  3  9D 34 2B     	sta sprtab,x		; sprite table.
001182  3  E8           	inx			; move to next byte.
001183  3  E0 CC        	cpx #SPRBUF
001185  3  D0 F8        	bne xspr0		; repeat for rest of table.
001187  3  60           	rts
001188  3               
001188  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
001188  3               ; Sound, NOT IMPLEMENTED!!!
001188  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
001188  3               ;
001188  3               ;silenc:
001188  3               ;	jsr silen1 		; silence channel 1.
001188  3               ;	jsr silen2 		; silence channel 2.
001188  3               ;	jsr silen3 		; silence channel 3.
001188  3               ;	jmp plsnd 		; play all channels to switch them off.
001188  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
001188  3               
001188  3               ;-------------------------------------------------------------
001188  3               ; Initialise all objects.
001188  3               ;
001188  3               ; Reset current room,y,x to start room,y,x for all objects
001188  3               ;-------------------------------------------------------------
001188  3               
001188  3               iniob:
001188  3  A9 96        	lda #<objdta 		; objects table.
00118A  3  85 68        	sta z80_x
00118C  3  A9 39        	lda #>objdta
00118E  3  85 69        	sta z80_i
001190  3               
001190  3  AE 21 11     	ldx numob 		; number of objects in the game.
001193  3               iniob0:
001193  3  A0 23        	ldy #35
001195  3  B1 68        	lda (z80_ix),y 		; start screen.
001197  3  A0 20        	ldy #32
001199  3  91 68        	sta (z80_ix),y 		; set start screen.
00119B  3               
00119B  3  A0 24        	ldy #36
00119D  3  B1 68        	lda (z80_ix),y 		; find start y.
00119F  3  A0 21        	ldy #33
0011A1  3  91 68        	sta (z80_ix),y 		; set start y.
0011A3  3               
0011A3  3  A0 25        	ldy #37
0011A5  3  B1 68        	lda (z80_ix),y 		; get initial x.
0011A7  3  A0 22        	ldy #34
0011A9  3  91 68        	sta (z80_ix),y 		; set x coord.
0011AB  3               
0011AB  3  18           	clc 			; point to next object.
0011AC  3  A5 68        	lda z80_x
0011AE  3  69 26        	adc #38			; distance between objects.
0011B0  3  85 68        	sta z80_x
0011B2  3  90 02        	bcc :+
0011B4  3  E6 69        	inc z80_i
0011B6  3               :
0011B6  3  CA           	dex 			; repeat.
0011B7  3  D0 DA        	bne iniob0
0011B9  3               
0011B9  3  60           	rts
0011BA  3               
0011BA  3               ;-------------------------------------------------------------
0011BA  3               ; Screen synchronisation.
0011BA  3               ;
0011BA  3               ;  - read joystick/keyboard
0011BA  3               ;  - handle sound
0011BA  3               ;  - sync framerate with clock
0011BA  3               ;  - handle shrapnel every even frame
0011BA  3               ;-------------------------------------------------------------
0011BA  3               
0011BA  3               vsync:
0011BA  3  48           	pha
0011BB  3  98           	tya
0011BC  3  48           	pha
0011BD  3  8A           	txa
0011BE  3  48           	pha
0011BF  3  20 49 21     	jsr joykey		; read joystick/keyboard.
0011C2  3               vsync1:
0011C2  3               ;	lda Timer2_High		; sync framerate with clock
0011C2  3               ;	bne vsync1
0011C2  3               ;	lda #>50000
0011C2  3               ;	sta Timer2_High
0011C2  3               ;	lda #<50000
0011C2  3               ;	sta Timer2_Low
0011C2  3               
0011C2  3  A9 13        	lda #19
0011C4  3  20 F4 FF     	jsr OSBYTE		; _BEEB vsync
0011C7  3               
0011C7  3  AD 42 11     	lda clock
0011CA  3  29 01        	and #1
0011CC  3  D0 03        	bne:+
0011CE  3  20 87 12     	jsr proshr		; handle shrapnel every even frame
0011D1  3               :
0011D1  3  AD DC 11     	lda sndtyp
0011D4  3  F0 00        	beq sndskip
0011D6  3               ; _BEEB TODO SOUND
0011D6  3               ;sndloop:
0011D6  3               ;	lda SpeakerBit		; handle sound
0011D6  3               ;	ldy sndtyp
0011D6  3               ;sndwait:
0011D6  3               ;	dey
0011D6  3               ;	bne sndwait
0011D6  3               ;	eor #4
0011D6  3               ;	sta SpeakerBit
0011D6  3               ;	dec sndtyp
0011D6  3               ;	bne sndloop
0011D6  3               sndskip: 
0011D6  3  68           	pla
0011D7  3  AA           	tax
0011D8  3  68           	pla
0011D9  3  A8           	tay
0011DA  3  68           	pla
0011DB  3  60           	rts
0011DC  3               
0011DC  3  00           sndtyp:	.byte 0
0011DD  3               
0011DD  3               ;-----------------------------------------------
0011DD  3               ; Redraw the screen.
0011DD  3               ;
0011DD  3               ; Remove old copy of all sprites for redraw.
0011DD  3               ;-----------------------------------------------
0011DD  3               
0011DD  3               redraw:
0011DD  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
0011DF  3  48           	pha
0011E0  3  A5 68        	lda z80_x
0011E2  3  48           	pha
0011E3  3               
0011E3  3  20 1E 1E     	jsr droom		; show screen layout.
0011E6  3  20 1D 19     	jsr shwob		; draw objects.
0011E9  3               numsp0:
0011E9  3  A9 0C        	lda #NUMSPR		; sprites to draw.
0011EB  3  85 88        	sta tmp
0011ED  3               
0011ED  3  A9 34        	lda #<sprtab		; sprite table.
0011EF  3  85 68        	sta z80_x
0011F1  3  A9 2B        	lda #>sprtab
0011F3  3  85 69        	sta z80_i
0011F5  3               redrw0:
0011F5  3  A0 00        	ldy #0
0011F7  3  B1 68        	lda (z80_ix),y		; old sprite type.
0011F9  3  C9 FF        	cmp #255		; is it enabled?
0011FB  3  F0 0B        	beq redrw1 		; no, find next one.
0011FD  3               
0011FD  3  A0 03        	ldy #var_Y
0011FF  3  B1 68        	lda (z80_ix),y 		; sprite y.
001201  3  C9 B1        	cmp #177		; beyond maximum?
001203  3  B0 03        	bcs redrw1		; yes, nothing to draw.
001205  3               
001205  3  20 47 25     	jsr sspria		; show single sprite.
001208  3               
001208  3               redrw1:
001208  3  18           	clc			; next sprite.
001209  3  A5 68        	lda z80_x
00120B  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00120D  3  85 68        	sta z80_x
00120F  3  90 02        	bcc :+
001211  3  E6 69        	inc z80_i
001213  3               :
001213  3  C6 88        	dec tmp			; repeat for remaining sprites.
001215  3  D0 DE        	bne redrw0
001217  3               
001217  3               rpblc1:
001217  3               ;	jsr dshrp		; redraw shrapnel.
001217  3               
001217  3  68           	pla			; retrieve sprite pointer.
001218  3  85 68        	sta z80_x
00121A  3  68           	pla
00121B  3  85 69        	sta z80_i
00121D  3               
00121D  3  60           	rts
00121E  3               
00121E  3               ;----------------------------------------------------------------------
00121E  3               ; Clear screen routine.
00121E  3               ;
00121E  3               ; Fill screenmem $8000-$97ff with ScrFillByte
00121E  3               ;----------------------------------------------------------------------
00121E  3               
00121E  3               cls:
00121E  3  A9 58        	lda #>ScreenAddr		; screen address.
001220  3  8D 29 12     	sta clsloop+2
001223  3  A9 00        	lda #ScrFillByte
001225  3  A0 00        	ldy #0
001227  3               clsloop:
001227  3  99 00 58     	sta ScreenAddr,y
00122A  3  C8           	iny
00122B  3  D0 FA        	bne clsloop
00122D  3  EE 29 12     	inc clsloop+2
001230  3  AE 29 12     	ldx clsloop+2
001233  3  E0 80        	cpx #>(ScreenAddr+ScreenSize)		; _BEEB
001235  3  D0 F0        	bne clsloop
001237  3  60           	rts
001238  3               
001238  3               ;----------------------------------------------------------------------
001238  3               ; Atomic palette is static 
001238  3               ;----------------------------------------------------------------------
001238  3               
001238  3               setpal:
001238  3  60           	rts
001239  3               
001239  3               ;----------------------------------------------------------------------
001239  3               ; FODDER check
001239  3               ;----------------------------------------------------------------------
001239  3               
001239  3               fdchk:
001239  3  A0 00        	ldy #0
00123B  3  B1 66        	lda (z80_hl),y	 	; fetch cell.
00123D  3  C9 04        	cmp #FODDER 		; is it fodder?
00123F  3  F0 01        	beq :+
001241  3  60           	rts 			; no.
001242  3               :
001242  3  A9 00        	lda #0
001244  3  A0 00        	ldy #0
001246  3  91 66        	sta (z80_hl),y 		; rewrite block type.
001248  3               
001248  3  A5 67        	lda z80_h		; store pointer to block.
00124A  3  48           	pha
00124B  3  A5 66        	lda z80_l
00124D  3  48           	pha
00124E  3               
00124E  3  38           	sec			; set carry flag for subtraction.
00124F  3  A5 66        	lda z80_l 		; find simple displacement for block.
001251  3  E9 13        	sbc #<MAP
001253  3  85 66        	sta z80_l
001255  3  A5 67        	lda z80_h
001257  3  E9 2C        	sbc #>MAP
001259  3  85 67        	sta z80_h
00125B  3               
00125B  3  A5 66        	lda z80_l		; low byte is y coordinate.
00125D  3  29 1F        	and #31 		; column position 0 - 31.
00125F  3  8D 4B 11     	sta dispx		; set up x position.
001262  3               
001262  3  06 66        	asl z80_l		; multiply displacement by 8.
001264  3  26 67        	rol z80_h
001266  3  06 66        	asl z80_l
001268  3  26 67        	rol z80_h
00126A  3  06 66        	asl z80_l
00126C  3  26 67        	rol z80_h
00126E  3               
00126E  3  A5 67        	lda z80_h		; x coordinate now in h.
001270  3  8D 4C 11     	sta dispy		; set the display coordinate.
001273  3               
001273  3  A9 00        	lda #0 			; block to write.
001275  3  20 FA 1C     	jsr pattr 		; write block.
001278  3               
001278  3  68           	pla 			; restore block pointer.
001279  3  85 66        	sta z80_l
00127B  3  68           	pla
00127C  3  85 67        	sta z80_h
00127E  3               
00127E  3  60           	rts
00127F  3               
00127F  3               ;----------------------------------------------------
00127F  3               ; Scrolly text and puzzle variables.
00127F  3               ;----------------------------------------------------
00127F  3               
00127F  3               .if sflag
00127F  3  80           txtbit:	.byte 128		; bit to write.
001280  3  10           txtwid:	.byte 16		; width of ticker message.
001281  3  D7 35        txtpos:	.word msgdat
001283  3  D7 35        txtini:	.word msgdat
001285  3  00 58        txtscr:	.word ScreenAddr
001287  3               .endif
001287  3               
001287  3               ;----------------------------------------------------
001287  3               ; Specialist routines.
001287  3               ; Process shrapnel.
001287  3               ;----------------------------------------------------
001287  3               proshr:
001287  3               .if pflag
001287  3  A9 13        	lda #<SHRAPN		; table.
001289  3  85 68        	sta z80_x
00128B  3  A9 31        	lda #>SHRAPN
00128D  3  85 69        	sta z80_i
00128F  3               
00128F  3  A9 37        	lda #NUMSHR		; shrapnel pieces to process.
001291  3  8D B2 12     	sta shrctr
001294  3               prosh0:
001294  3  A0 00        	ldy #0
001296  3  B1 68        	lda (z80_ix),y		; on/off marker.
001298  3  0A           	asl a
001299  3               proshx:
001299  3  B0 03        	bcs :+
00129B  3  20 B3 12     	jsr prosh1 		; on, so process it.
00129E  3               :
00129E  3  18           	clc
00129F  3  A5 68        	lda z80_x
0012A1  3  69 06        	adc #SHRSIZ
0012A3  3  85 68        	sta z80_x
0012A5  3  90 02        	bcc :+
0012A7  3  E6 69        	inc z80_i
0012A9  3               :
0012A9  3  CE B2 12     	dec shrctr		; round again.
0012AC  3  D0 E6        	bne prosh0
0012AE  3               .endif
0012AE  3               .if sflag
0012AE  3  20 34 2A     	jsr scrly
0012B1  3               .endif
0012B1  3  60           	rts
0012B2  3               
0012B2  3               .if pflag
0012B2  3  00           shrctr:	.byte 0
0012B3  3               
0012B3  3               ;----------------------------------------------------
0012B3  3               ; Proces shrapnel piece
0012B3  3               ;----------------------------------------------------
0012B3  3               
0012B3  3               prosh1:
0012B3  3  20 AA 13     	jsr plot 		; delete the pixel.
0012B6  3               
0012B6  3  A9 E0        	lda #<shrptr		; shrapnel routine pointers.
0012B8  3  85 66        	sta z80_l
0012BA  3  A9 12        	lda #>shrptr
0012BC  3  85 67        	sta z80_h
0012BE  3               
0012BE  3  A0 00        	ldy #0
0012C0  3  B1 68        	lda (z80_ix),y		; restore shrapnel type.
0012C2  3  20 D1 12     	jsr prosh2 		; run the routine.
0012C5  3  20 74 13     	jsr chkxy		; check x and y are good before we redisplay.
0012C8  3               
0012C8  3  A9 06        	lda #<SHRSIZ 		; distance to next.
0012CA  3  85 64        	sta z80_e
0012CC  3  A9 00        	lda #>SHRSIZ
0012CE  3  85 65        	sta z80_d
0012D0  3  60           	rts
0012D1  3               
0012D1  3               ;----------------------------------------------------
0012D1  3               ; Run the routine
0012D1  3               ;----------------------------------------------------
0012D1  3               
0012D1  3               prosh2:
0012D1  3  0A           	asl a 			; 2 bytes per address.
0012D2  3  A8           	tay
0012D3  3  B9 E0 12     	lda shrptr,y
0012D6  3  85 66        	sta z80_l
0012D8  3  B9 E1 12     	lda shrptr+1,y 		; fetch high byte from table.
0012DB  3  85 67        	sta z80_h
0012DD  3  6C 66 00     	jmp (z80_hl) 		; jump to routine.
0012E0  3               
0012E0  3               ;----------------------------------------------------
0012E0  3               ; Paricle routine table
0012E0  3               ;----------------------------------------------------
0012E0  3               
0012E0  3  7D 14        shrptr:	.word laser		; laser.
0012E2  3  2B 14        	.word trail		; vapour trail.
0012E4  3  F0 12        	.word shrap		; shrapnel from explosion.
0012E6  3  4C 13        	.word dotl		; horizontal starfield left.
0012E8  3  56 13        	.word dotr		; horizontal starfield right.
0012EA  3  60 13        	.word dotu		; vertical starfield up.
0012EC  3  6A 13        	.word dotd		; vertical starfield down.
0012EE  3  D6 35        	.word ptcusr		; user particle.
0012F0  3               
0012F0  3               ;----------------------------------------------------
0012F0  3               ; Explosion shrapnel.
0012F0  3               ;----------------------------------------------------
0012F0  3               
0012F0  3               shrap:
0012F0  3  A0 01        	ldy #1
0012F2  3  B1 68        	lda (z80_ix),y 		; get the angle.
0012F4  3  18           	clc
0012F5  3  69 EB        	adc #<shrsin		; shrapnel sine table.
0012F7  3  85 66        	sta z80_l
0012F9  3  A9 13        	lda #>shrsin
0012FB  3  69 00        	adc #0
0012FD  3  85 67        	sta z80_h
0012FF  3               
0012FF  3  A0 00        	ldy #0
001301  3  B1 66        	lda (z80_hl),y 		; fetch value from table.
001303  3  85 64        	sta z80_e
001305  3  E6 66        	inc z80_l 		; next byte of table.
001307  3  D0 02        	bne :+
001309  3  E6 67        	inc z80_h
00130B  3               :
00130B  3  A0 00        	ldy #0
00130D  3  B1 66        	lda (z80_hl),y		; fetch value from table.
00130F  3  85 65        	sta z80_d
001311  3  E6 66        	inc z80_l		; next byte of table.
001313  3  D0 02        	bne :+
001315  3  E6 67        	inc z80_h
001317  3               :
001317  3  A0 00        	ldy #0
001319  3  B1 66        	lda (z80_hl),y 		; fetch value from table.
00131B  3  85 62        	sta z80_c
00131D  3  E6 66        	inc z80_l 		; next byte of table.
00131F  3  D0 02        	bne :+
001321  3  E6 67        	inc z80_h
001323  3               :
001323  3  A0 00        	ldy #0
001325  3  B1 66        	lda (z80_hl),y 		; fetch value from table.
001327  3  85 63        	sta z80_b
001329  3               
001329  3  A0 02        	ldy #2
00132B  3  B1 68        	lda (z80_ix),y 		; x coordinate in hl.
00132D  3  18           	clc
00132E  3  65 64        	adc z80_e		; add sine lb
001330  3  91 68        	sta (z80_ix),y		; store new coordinate lb.
001332  3  A0 03        	ldy #3
001334  3  B1 68        	lda (z80_ix),y
001336  3  65 65        	adc z80_d		; add sine hb
001338  3  91 68        	sta (z80_ix),y		; store new coordinate hb.
00133A  3               
00133A  3  A0 04        	ldy #4
00133C  3  B1 68        	lda (z80_ix),y	 	; y coordinate in hl.
00133E  3  18           	clc
00133F  3  65 62        	adc z80_c		; add cosine lb
001341  3  91 68        	sta (z80_ix),y		; store new coordinate lb.
001343  3  A0 05        	ldy #5
001345  3  B1 68        	lda (z80_ix),y
001347  3  65 63        	adc z80_b		; add cosine lb
001349  3  91 68        	sta (z80_ix),y		; store new coordinate hb.
00134B  3               
00134B  3  60           	rts
00134C  3               
00134C  3               ;----------------------------------------------------
00134C  3               ; Move dots
00134C  3               ;----------------------------------------------------
00134C  3               
00134C  3               dotl:
00134C  3  A0 05        	ldy #5
00134E  3  B1 68        	lda (z80_ix),y
001350  3  38           	sec
001351  3  E9 01        	sbc #1		 	; move left.
001353  3  91 68        	sta (z80_ix),y
001355  3  60           	rts
001356  3               dotr:
001356  3  A0 05        	ldy #5
001358  3  B1 68        	lda (z80_ix),y
00135A  3  18           	clc
00135B  3  69 01        	adc #1		 	; move left.
00135D  3  91 68        	sta (z80_ix),y
00135F  3  60           	rts
001360  3               dotu:
001360  3  A0 03        	ldy #3
001362  3  B1 68        	lda (z80_ix),y
001364  3  38           	sec
001365  3  E9 01        	sbc #1		 	; move up.
001367  3  91 68        	sta (z80_ix),y
001369  3  60           	rts
00136A  3               dotd:
00136A  3  A0 03        	ldy #3
00136C  3  B1 68        	lda (z80_ix),y
00136E  3  18           	clc
00136F  3  69 01        	adc #1			; move down.
001371  3  91 68        	sta (z80_ix),y
001373  3  60           	rts
001374  3               
001374  3               ;----------------------------------------------------
001374  3               ; Check if coordinates are ok before redrawing at new position.
001374  3               ;
001374  3               ; left:   X>L		X=L	Ok
001374  3               ; right:  R+15>X	X=R	Ok
001374  3               ; top:    Y>T		Y=T	Ok
001374  3               ; bottom: B+15>Y	Y=B	Ok
001374  3               ;----------------------------------------------------
001374  3               
001374  3               chkxy:
001374  3               
001374  3               ; top:    Y>T		Y=T	Ok
001374  3               
001374  3  A0 03        	ldy #3
001376  3  B1 68        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
001378  3  CD 22 11     	cmp wntopx		; window top.
00137B  3  B0 03        	bcs :+			; compare with top window limit.
00137D  3  4C E4 13     	jmp kilshr		; out of window, kill shrapnel.
001380  3               :
001380  3               ; left:   X>L		X=L	Ok
001380  3               
001380  3  A0 05        	ldy #5
001382  3  B1 68        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
001384  3  CD 23 11     	cmp wnlftx		; left edge.
001387  3  B0 03        	bcs :+			; compare with left window limit.
001389  3  4C E4 13     	jmp kilshr		; out of window, kill shrapnel.
00138C  3               :
00138C  3               ; bottom: B+15>Y	Y=B	Ok
00138C  3               
00138C  3  AD 24 11     	lda wnbotx		; point to bottom.
00138F  3  18           	clc
001390  3  69 0F        	adc #15
001392  3  A0 03        	ldy #3
001394  3  D1 68        	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
001396  3  B0 03        	bcs :+			; compare with shrapnel x coordinate.
001398  3  4C E4 13     	jmp kilshr		; off screen, kill shrapnel..
00139B  3               :
00139B  3               ; right:  R+15>X	X=R	Ok
00139B  3               
00139B  3  AD 25 11     	lda wnrgtx		; point to right edge.
00139E  3  18           	clc
00139F  3  69 0F        	adc #15
0013A1  3  A0 05        	ldy #5
0013A3  3  D1 68        	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0013A5  3  B0 03        	bcs :+			; compare with window limit.
0013A7  3  4C E4 13     	jmp kilshr		; off screen, kill shrapnel.
0013AA  3               :
0013AA  3               
0013AA  3               ;----------------------------------------------------
0013AA  3               ; Drop through.
0013AA  3               ; Display shrapnel.
0013AA  3               ;----------------------------------------------------
0013AA  3               
0013AA  3               plot:
0013AA  3  A0 03        	ldy #3
0013AC  3  B1 68        	lda (z80_ix),y		; y integer.
0013AE  3  8D 4C 11     	sta dispy	 	; workspace coordinates.
0013B1  3  A0 05        	ldy #5
0013B3  3  B1 68        	lda (z80_ix),y	 	; x integer.
0013B5  3  8D 4B 11     	sta dispx 		; workspace coordinates.
0013B8  3               
0013B8  3  A0 00        	ldy #0
0013BA  3  B1 68        	lda (z80_ix),y 		; type.
0013BC  3  D0 03        	bne :+			; is it a laser?
0013BE  3  4C D8 13     	jmp plot1 		; yes, draw laser instead.
0013C1  3               :
0013C1  3               plot0:
0013C1  3  AD 4B 11     	lda dispx		; which pixel within byte do we
0013C4  3  29 07        	and #7			; want to set first?
0013C6  3  A8           	tay
0013C7  3  B9 B0 14     	lda dots,y 		; table of small pixel positions.
0013CA  3  85 64        	sta z80_e 		; get value.
0013CC  3               
0013CC  3  20 29 25     	jsr scadd 		; screen address.
0013CF  3  A0 00        	ldy #0
0013D1  3  B1 80        	lda (scraddr),y		; see what's already there.
0013D3  3  45 64        	eor z80_e
0013D5  3  91 80        	sta (scraddr),y 	; put back on screen.
0013D7  3  60           	rts
0013D8  3               
0013D8  3               plot1:
0013D8  3  20 29 25     	jsr scadd 		; screen address.
0013DB  3  A0 00        	ldy #0
0013DD  3  B1 80        	lda (scraddr),y 	; fetch byte there.
0013DF  3  49 FF        	eor #255 		; toggle all bits.
0013E1  3  91 80        	sta (scraddr),y 	; new byte.
0013E3  3  60           	rts
0013E4  3               
0013E4  3               ;----------------------------------------------------
0013E4  3               ; Switch off shrapnel
0013E4  3               ;----------------------------------------------------
0013E4  3               
0013E4  3               kilshr:
0013E4  3  A9 80        	lda #128
0013E6  3  A0 00        	ldy #0
0013E8  3  91 68        	sta (z80_ix),y	; switch off shrapnel.
0013EA  3  60           	rts
0013EB  3               
0013EB  3               ;----------------------------------------------------
0013EB  3               ; Sine/cosine table
0013EB  3               ;----------------------------------------------------
0013EB  3               
0013EB  3  00 00 00 04  shrsin:	.word 0,1024,391,946,724,724,946,391
0013EF  3  87 01 B2 03  
0013F3  3  D4 02 D4 02  
0013FB  3  00 04 00 00  	.word 1024,0,946,65144,724,64811,391,64589
0013FF  3  B2 03 78 FE  
001403  3  D4 02 2B FD  
00140B  3  00 00 00 FC  	.word 0,64512,65144,64589,64811,64811,64589,65144
00140F  3  78 FE 4D FC  
001413  3  2B FD 2B FD  
00141B  3  00 FC 00 00  	.word 64512,0,64589,391,64811,724,65144,946
00141F  3  4D FC 87 01  
001423  3  2B FD D4 02  
00142B  3               
00142B  3               ;----------------------------------------------------
00142B  3               ; Create trail
00142B  3               ;----------------------------------------------------
00142B  3               
00142B  3               trail:
00142B  3  A0 01        	ldy #1
00142D  3  B1 68        	lda (z80_ix),y 	; time remaining.
00142F  3  38           	sec
001430  3  E9 01        	sbc #1
001432  3  91 68        	sta (z80_ix),y
001434  3  D0 03        	bne :+
001436  3  4C 76 14     	jmp trailk		; time to switch it off.
001439  3               :
001439  3  20 97 16     	jsr qrand		; get a random number.
00143C  3  4A           	lsr a 			; x or y axis?
00143D  3  90 03        	bcc :+
00143F  3  4C 5C 14     	jmp trailv		; use y.
001442  3               :
001442  3               ; Trail horizontal
001442  3               
001442  3  4A           	lsr a 			; which direction?
001443  3  90 03        	bcc :+
001445  3  4C 52 14     	jmp traill		; go left.
001448  3               :
001448  3               ; Trail right
001448  3               
001448  3  A0 05        	ldy #5
00144A  3  B1 68        	lda (z80_ix),y
00144C  3  18           	clc
00144D  3  69 01        	adc #1	 		; go right.
00144F  3  91 68        	sta (z80_ix),y
001451  3  60           	rts
001452  3               
001452  3               ; Trail left
001452  3               
001452  3               traill:
001452  3  A0 05        	ldy #5
001454  3  B1 68        	lda (z80_ix),y
001456  3  38           	sec
001457  3  E9 01        	sbc #1 			; go left.
001459  3  91 68        	sta (z80_ix),y
00145B  3  60           	rts
00145C  3               
00145C  3               ; Trail vertical
00145C  3               
00145C  3               trailv:
00145C  3  4A           	lsr a		 	; which direction?
00145D  3  90 03        	bcc :+
00145F  3  4C 6C 14     	jmp trailu		; go up.
001462  3               :
001462  3               ; Trail down
001462  3               
001462  3  A0 03        	ldy #3
001464  3  B1 68        	lda (z80_ix),y
001466  3  18           	clc
001467  3  69 01        	adc #1 			; go down.
001469  3  91 68        	sta (z80_ix),y
00146B  3  60           	rts
00146C  3               
00146C  3               ; Trail up
00146C  3               
00146C  3               trailu:
00146C  3  A0 03        	ldy #3
00146E  3  B1 68        	lda (z80_ix),y
001470  3  38           	sec
001471  3  E9 01        	sbc #1 			; go up.
001473  3  91 68        	sta (z80_ix),y
001475  3  60           	rts
001476  3               
001476  3               ; Kill trail
001476  3               
001476  3               trailk:
001476  3  A9 C8        	lda #200		; set off-screen to kill vapour trail.
001478  3  A0 03        	ldy #3
00147A  3  91 68        	sta (z80_ix),y
00147C  3  60           	rts
00147D  3               
00147D  3               ;----------------------------------------------------
00147D  3               ; Create laser beam
00147D  3               ;----------------------------------------------------
00147D  3               
00147D  3               laser:
00147D  3  A0 01        	ldy #1
00147F  3  B1 68        	lda (z80_ix),y 		; direction.
001481  3  6A           	ror a 			; left or right?
001482  3  B0 03        	bcs :+
001484  3  4C 8E 14     	jmp laserl		; move left.
001487  3               :
001487  3               ; Laser right
001487  3               
001487  3  A9 08        	lda #8			; distance to travel.
001489  3  85 63        	sta z80_b
00148B  3  4C 92 14     	jmp laserm		; move laser.
00148E  3               
00148E  3               ; Laser left
00148E  3               
00148E  3               laserl:
00148E  3  A9 F8        	lda #248		; distance to travel.
001490  3  85 63        	sta z80_b
001492  3               laserm:
001492  3  A0 05        	ldy #5
001494  3  B1 68        	lda (z80_ix),y		; x position.
001496  3  18           	clc
001497  3  65 63        	adc z80_b		; add distance.
001499  3  91 68        	sta (z80_ix),y		; set new x coordinate.
00149B  3               
00149B  3               ; Test new block.
00149B  3               
00149B  3  8D 4B 11     	sta dispx 		; set x for block collision detection purposes.
00149E  3  A0 03        	ldy #3
0014A0  3  B1 68        	lda (z80_ix),y 		; get y.
0014A2  3  8D 4C 11     	sta dispy		; set coordinate for collision test.
0014A5  3  20 9B 20     	jsr tstbl 		; get block type there.
0014A8  3  C9 02        	cmp #WALL		; is it solid?
0014AA  3  D0 03        	bne :+
0014AC  3  4C 76 14     	jmp trailk		; yes, it cannot pass.
0014AF  3               :
0014AF  3  60           	rts
0014B0  3               
0014B0  3               ;----------------------------------------------------
0014B0  3               ; Dots mask
0014B0  3               ;----------------------------------------------------
0014B0  3               
0014B0  3  80 40 20 10  dots:	.byte 128,64,32,16,8,4,2,1
0014B4  3  08 04 02 01  
0014B8  3               
0014B8  3               
0014B8  3               ;----------------------------------------------------
0014B8  3               ; Plot, preserving de.
0014B8  3               ;----------------------------------------------------
0014B8  3               
0014B8  3               plotde:
0014B8  3  A5 65        	lda z80_d 		; put de on stack.
0014BA  3  48           	pha
0014BB  3  A5 64        	lda z80_e
0014BD  3  48           	pha
0014BE  3               
0014BE  3  20 AA 13     	jsr plot 		; plot pixel.
0014C1  3               
0014C1  3  68           	pla			; restore de from stack.
0014C2  3  85 64        	sta z80_e
0014C4  3  68           	pla
0014C5  3  85 65        	sta z80_d
0014C7  3               
0014C7  3  60           	rts
0014C8  3               
0014C8  3               ;----------------------------------------------------
0014C8  3               ; Shoot a laser.
0014C8  3               ;----------------------------------------------------
0014C8  3               
0014C8  3               shoot:
0014C8  3  85 62        	sta z80_c		; store direction in c register.
0014CA  3  A0 08        	ldy #8
0014CC  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0014CE  3               shoot1:
0014CE  3  18           	clc
0014CF  3  69 07        	adc #7 			; down 7 pixels.
0014D1  3  85 66        	sta z80_l 		; puty y coordinate in l.
0014D3  3               
0014D3  3  A0 09        	ldy #9
0014D5  3  B1 68        	lda (z80_ix),y 		; x coordinate in h.
0014D7  3  85 67        	sta z80_h
0014D9  3               
0014D9  3  A5 69        	lda z80_i		; store pointer to sprite.
0014DB  3  48           	pha
0014DC  3  A5 68        	lda z80_x
0014DE  3  48           	pha
0014DF  3               
0014DF  3  20 02 16     	jsr fpslot 		; find particle slot.
0014E2  3  B0 03        	bcs :+
0014E4  3  4C 32 15     	jmp vapou2		; failed, restore ix.
0014E7  3               :
0014E7  3  A9 00        	lda #0
0014E9  3  A0 00        	ldy #0
0014EB  3  91 68        	sta (z80_ix),y 		; set up a laser.
0014ED  3               
0014ED  3  A5 62        	lda z80_c
0014EF  3  A0 01        	ldy #1
0014F1  3  91 68        	sta (z80_ix),y 		; set the direction.
0014F3  3               
0014F3  3  A5 66        	lda z80_l
0014F5  3  A0 03        	ldy #3
0014F7  3  91 68        	sta (z80_ix),y		; set y coordinate.
0014F9  3               
0014F9  3  66 62        	ror z80_c		; check direction we want.
0014FB  3  90 03        	bcc :+
0014FD  3  4C 0B 15     	jmp shootr		; shoot right.
001500  3               :
001500  3  A5 67        	lda z80_h		; X position.
001502  3               shoot0:
001502  3  29 F8        	and #248		; align on character boundary.
001504  3  A0 05        	ldy #5
001506  3  91 68        	sta (z80_ix),y		; set x coordinate.
001508  3  4C 57 15     	jmp vapou0 		; draw first image.
00150B  3               shootr:
00150B  3  A5 67        	lda z80_h		; x position.
00150D  3  18           	clc
00150E  3  69 0F        	adc #15			; look right.
001510  3  4C 02 15     	jmp shoot0		; align and continue.
001513  3               
001513  3               ;----------------------------------------------------
001513  3               ; Create a bit of vapour trail.
001513  3               ;----------------------------------------------------
001513  3               
001513  3               vapour:
001513  3  A5 69        	lda z80_i		; store pointer to sprite.
001515  3  48           	pha
001516  3  A5 68        	lda z80_x
001518  3  48           	pha
001519  3               
001519  3  A0 08        	ldy #8
00151B  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00151D  3  18           	clc
00151E  3  69 07        	adc #7			; mid-point of sprite.
001520  3  85 66        	sta z80_l
001522  3               
001522  3  A0 09        	ldy #9
001524  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001526  3  69 07        	adc #7
001528  3  85 67        	sta z80_h
00152A  3               
00152A  3  20 02 16     	jsr fpslot 		; find particle slot.
00152D  3  90 03        	bcc :+
00152F  3  4C 39 15     	jmp vapou1		; no, we can use it.
001532  3               :
001532  3               vapou2:
001532  3  68           	pla
001533  3  85 68        	sta z80_x
001535  3  68           	pla
001536  3  85 69        	sta z80_i
001538  3  60           	rts
001539  3               vapou1:
001539  3  A5 66        	lda z80_l
00153B  3  A0 03        	ldy #3
00153D  3  91 68        	sta (z80_ix),y		; set up y.
00153F  3               
00153F  3  A5 67        	lda z80_h
001541  3  A0 05        	ldy #5
001543  3  91 68        	sta (z80_ix),y 		; set up x coordinate.
001545  3               
001545  3  20 97 16     	jsr qrand		; get quick random number.
001548  3  29 0F        	and #15			; random time.
00154A  3  18           	clc
00154B  3  69 0F        	adc #15			; minimum time on screen.
00154D  3  A0 01        	ldy #1
00154F  3  91 68        	sta (z80_ix),y		; set time on screen.
001551  3               
001551  3  A9 01        	lda #1
001553  3  A0 00        	ldy #0
001555  3  91 68        	sta (z80_ix),y		; define particle as vapour trail.
001557  3               vapou0:
001557  3  20 74 13     	jsr chkxy		; plot first position.
00155A  3  4C 32 15     	jmp vapou2
00155D  3               
00155D  3               ;----------------------------------------------------
00155D  3               ; Create a user particle.
00155D  3               ;----------------------------------------------------
00155D  3               
00155D  3               ptusr:
00155D  3  85 60        	sta z80_f		; store timer.
00155F  3               
00155F  3  A0 08        	ldy #8
001561  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001563  3  18           	clc
001564  3  69 07        	adc #7			; mid-point of sprite.
001566  3  85 66        	sta z80_l
001568  3               
001568  3  A0 09        	ldy #9
00156A  3  B1 68        	lda (z80_ix),y 		; x coordinate.
00156C  3  18           	clc
00156D  3  69 07        	adc #7			; mid-point of sprite.
00156F  3  85 67        	sta z80_h
001571  3               
001571  3  20 02 16     	jsr fpslot 		; find particle slot.
001574  3  B0 01        	bcs ptusr1
001576  3  60           	rts 			; out of slots, can't generate anything.
001577  3               ptusr1:
001577  3  A5 66        	lda z80_l
001579  3  A0 03        	ldy #3
00157B  3  91 68        	sta (z80_ix),y 		; set up y.
00157D  3               
00157D  3  A5 67        	lda z80_h
00157F  3  A0 05        	ldy #5
001581  3  91 68        	sta (z80_ix),y		; set up x coordinate.
001583  3               
001583  3  A5 60        	lda z80_f 		; restore timer.
001585  3  A0 01        	ldy #1
001587  3  91 68        	sta (z80_ix),y		; set time on screen.
001589  3               
001589  3  A9 07        	lda #7
00158B  3  A0 00        	ldy #0
00158D  3  91 68        	sta (z80_ix),y		; define particle as user particle.
00158F  3               
00158F  3  4C 74 13     	jmp chkxy		; plot first position.
001592  3               
001592  3               ;----------------------------------------------------
001592  3               ; Create a vertical or horizontal star.
001592  3               ;----------------------------------------------------
001592  3               
001592  3               star:
001592  3  A5 69        	lda z80_i		; store pointer to sprite.
001594  3  48           	pha
001595  3  A5 68        	lda z80_x
001597  3  48           	pha
001598  3               
001598  3  20 02 16     	jsr fpslot 		; find particle slot.
00159B  3  B0 07        	bcs star7		; found one we can use.
00159D  3               star0:
00159D  3  68           	pla 			; restore sprite pointer.
00159E  3  85 68        	sta z80_x
0015A0  3  68           	pla
0015A1  3  85 69        	sta z80_i
0015A3  3  60           	rts 			; out of slots, can't generate anything.
0015A4  3               star7:
0015A4  3  A5 62        	lda z80_c		; direction.
0015A6  3  29 03        	and #3 			; is it left?
0015A8  3  D0 03        	bne :+
0015AA  3  4C DC 15     	jmp star1 		; yes, it's left.
0015AD  3               :
0015AD  3  C9 01        	cmp #1 			; is it right?
0015AF  3  D0 03        	bne :+
0015B1  3  4C EC 15     	jmp star2 		; yes, it's right.
0015B4  3               :
0015B4  3  C9 02        	cmp #2 			; is it up?
0015B6  3  D0 03        	bne :+
0015B8  3  4C F9 15     	jmp star3 		; yes, it's up.
0015BB  3               :
0015BB  3  AC 22 11     	ldy wntopx 		; get edge of screen.
0015BE  3  C8           	iny			; down one pixel.
0015BF  3  98           	tya
0015C0  3               star8:
0015C0  3  A0 03        	ldy #3
0015C2  3  91 68        	sta (z80_ix),y 		; set y coord.
0015C4  3  20 97 16     	jsr qrand 		; get quick random number.
0015C7  3               star9:
0015C7  3  A0 05        	ldy #5
0015C9  3  91 68        	sta (z80_ix),y		; set x position.
0015CB  3               
0015CB  3  A5 62        	lda z80_c		; direction.
0015CD  3  29 03        	and #3			; zero to three.
0015CF  3  18           	clc
0015D0  3  69 03        	adc #3			; 3 to 6 for starfield.
0015D2  3  A0 00        	ldy #0
0015D4  3  91 68        	sta (z80_ix),y		; define particle as star.
0015D6  3  20 74 13     	jsr chkxy		; plot first position.
0015D9  3  4C 9D 15     	jmp star0
0015DC  3               star1:
0015DC  3  20 97 16     	jsr qrand		; get quick random number.
0015DF  3  A0 03        	ldy #3
0015E1  3  91 68        	sta (z80_ix),y 		; set y coord.
0015E3  3               
0015E3  3  AD 25 11     	lda wnrgtx 		; get edge of screen.
0015E6  3  18           	clc
0015E7  3  69 0F        	adc #15			; add width of sprite minus 1.
0015E9  3  4C C7 15     	jmp star9
0015EC  3               star2:
0015EC  3  20 97 16     	jsr qrand 		; get quick random number.
0015EF  3  A0 03        	ldy #3
0015F1  3  91 68        	sta (z80_ix),y		; set y coord.
0015F3  3               
0015F3  3  AD 23 11     	lda wnlftx		; get edge of screen.
0015F6  3  4C C7 15     	jmp star9
0015F9  3               star3:
0015F9  3  AD 24 11     	lda wnbotx 		; get edge of screen.
0015FC  3  18           	clc
0015FD  3  69 0F        	adc #15 		; height of sprite minus one pixel.
0015FF  3  4C C0 15     	jmp star8
001602  3               
001602  3               ;----------------------------------------------------
001602  3               ; Find particle slot for lasers or vapour trail.
001602  3               ; can't use alternate accumulator.
001602  3               ;----------------------------------------------------
001602  3               
001602  3               fpslot:
001602  3  A9 13        	lda #<SHRAPN 		; shrapnel table.
001604  3  85 68        	sta z80_x
001606  3  A9 31        	lda #>SHRAPN
001608  3  85 69        	sta z80_i
00160A  3               
00160A  3  A9 37        	lda #NUMSHR		; number of pieces in table.
00160C  3  85 63        	sta z80_b
00160E  3               fpslt0:
00160E  3  A0 00        	ldy #0
001610  3  B1 68        	lda (z80_ix),y		; get type.
001612  3  0A           	asl a  			; is this slot in use?
001613  3  90 01        	bcc :+
001615  3  60           	rts			; no, we can use it.
001616  3               :
001616  3  18           	clc			; point to more shrapnel.
001617  3  A5 68        	lda z80_x
001619  3  69 06        	adc #SHRSIZ
00161B  3  85 68        	sta z80_x
00161D  3  90 02        	bcc :+
00161F  3  E6 69        	inc z80_i
001621  3               :
001621  3  C6 63        	dec z80_b		; repeat for all shrapnel.
001623  3  D0 E9        	bne fpslt0
001625  3               
001625  3  18           	clc
001626  3  60           	rts 			; out of slots, can't generate anything.
001627  3               
001627  3               ;----------------------------------------------------
001627  3               ; Create an explosion at sprite position.
001627  3               ;----------------------------------------------------
001627  3               
001627  3               explod:
001627  3  85 62        	sta z80_c 		; particles to create.
001629  3               
001629  3  A5 69        	lda z80_i 		; store pointer to sprite.
00162B  3  48           	pha
00162C  3  A5 68        	lda z80_x
00162E  3  48           	pha
00162F  3               
00162F  3  A0 08        	ldy #8
001631  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001633  3  85 66        	sta z80_l
001635  3  A0 09        	ldy #9
001637  3  B1 68        	lda (z80_ix),y		; x coordinate.
001639  3  85 67        	sta z80_h
00163B  3               
00163B  3  A9 13        	lda #<SHRAPN		; shrapnel table.
00163D  3  85 68        	sta z80_x
00163F  3  A9 31        	lda #>SHRAPN
001641  3  85 69        	sta z80_i
001643  3               
001643  3  A9 37        	lda #NUMSHR		; number of pieces in table.
001645  3  8D 96 16     	sta explcnt
001648  3               expld0:
001648  3  A0 00        	ldy #0
00164A  3  B1 68        	lda (z80_ix),y		; get type.
00164C  3  0A           	asl a 			; is this slot in use?
00164D  3  B0 17        	bcs expld1		; no, we can use it.
00164F  3               expld2:
00164F  3  18           	clc
001650  3  A5 68        	lda z80_x
001652  3  69 06        	adc #SHRSIZ
001654  3  85 68        	sta z80_x
001656  3  90 02        	bcc :+
001658  3  E6 69        	inc z80_i
00165A  3               :
00165A  3  CE 96 16     	dec explcnt		; repeat for all shrapnel.
00165D  3  D0 E9        	bne expld0
00165F  3               expld3:
00165F  3  68           	pla			; restore sprite pointer.
001660  3  85 68        	sta z80_x
001662  3  68           	pla
001663  3  85 69        	sta z80_i
001665  3  60           	rts 			; out of slots, can't generate any more.
001666  3               
001666  3               expld1:
001666  3  A5 62        	lda z80_c		; shrapnel counter.
001668  3  29 0F        	and #15			; 0 to 15.
00166A  3  18           	clc			; add to x.
00166B  3  65 66        	adc z80_l
00166D  3  A0 03        	ldy #3
00166F  3  91 68        	sta (z80_ix),y		; y coord.
001671  3               
001671  3  AD A1 16     	lda seed3 		; crap random number.
001674  3  29 0F        	and #15			; 0 to 15.
001676  3  18           	clc 			; add to y.
001677  3  65 67        	adc z80_h
001679  3  A0 05        	ldy #5
00167B  3  91 68        	sta (z80_ix),y		; x coord.
00167D  3               
00167D  3  A9 02        	lda #2
00167F  3  A0 00        	ldy #0
001681  3  91 68        	sta (z80_ix),y		; switch it on.
001683  3               
001683  3  20 74 13     	jsr chkxy		; plot first position.
001686  3  20 97 16     	jsr qrand		; quick random angle.
001689  3  29 3C        	and #60 		; keep within range.
00168B  3  A0 01        	ldy #1
00168D  3  91 68        	sta (z80_ix),y		; angle.
00168F  3               
00168F  3  C6 62        	dec z80_c		; one less piece of shrapnel to generate.
001691  3  D0 BC        	bne expld2 		; back to main explosion loop.
001693  3  4C 5F 16     	jmp expld3 		; restore sprite pointer and exit.
001696  3               
001696  3  00           explcnt:	.byte 0
001697  3               
001697  3               ;----------------------------------------------------
001697  3               ; Quick random
001697  3               ;----------------------------------------------------
001697  3               
001697  3               qrand:
001697  3  20 01 21     	jsr random		; r register.
00169A  3  4D A1 16     	eor seed3		; combine with seed.
00169D  3  8D A1 16     	sta seed3 		; new seed.
0016A0  3  60           	rts
0016A1  3               
0016A1  3  00           seed3:	.byte 0
0016A2  3               
0016A2  3               ;----------------------------------------------------
0016A2  3               ; Display all shrapnel.
0016A2  3               ;----------------------------------------------------
0016A2  3               
0016A2  3               dshrp:
0016A2  3  A9 B8        	lda #<plotde		; display routine.
0016A4  3  8D 9A 12     	sta proshx+1
0016A7  3  A9 14        	lda #>plotde
0016A9  3  8D 9B 12     	sta proshx+2
0016AC  3  20 87 12     	jsr proshr		; process shrapnel.
0016AF  3               
0016AF  3  A9 B3        	lda #<prosh1		; processing routine.
0016B1  3  8D 9A 12     	sta proshx+1
0016B4  3  A9 12        	lda #>prosh1
0016B6  3  8D 9B 12     	sta proshx+2
0016B9  3  60           	rts
0016BA  3               
0016BA  3               ;------------------------------------------------------
0016BA  3               ; Particle engine.
0016BA  3               ;
0016BA  3               ; Init particle data for 55 particles in SHRAPN table.
0016BA  3               ; Every particle has 6 bytes.
0016BA  3               ;
0016BA  3               ; global:	-
0016BA  3               ; local:	x,y,hl
0016BA  3               ; calls:	-
0016BA  3               ;------------------------------------------------------
0016BA  3               
0016BA  3               inishr:
0016BA  3  A9 13        	lda #<SHRAPN 		; table.
0016BC  3  85 66        	sta z80_l
0016BE  3  A9 31        	lda #>SHRAPN
0016C0  3  85 67        	sta z80_h
0016C2  3               
0016C2  3  A0 00        	ldy #0
0016C4  3  A2 37        	ldx #NUMSHR		; shrapnel pieces to process.
0016C6  3               inish0:
0016C6  3  A9 FF        	lda #255 		; kill the shrapnel.
0016C8  3  91 66        	sta (z80_hl),y
0016CA  3               
0016CA  3  18           	clc 			; point there.
0016CB  3  A5 66        	lda z80_l
0016CD  3  69 06        	adc #SHRSIZ		; distance to next.
0016CF  3  85 66        	sta z80_l
0016D1  3  90 02        	bcc :+
0016D3  3  E6 67        	inc z80_h
0016D5  3               :
0016D5  3  CA           	dex
0016D6  3  D0 EE        	bne inish0 		; round again.
0016D8  3  60           	rts
0016D9  3               
0016D9  3               ;------------------------------------------------------
0016D9  3               ; Check for collision between laser and sprite.
0016D9  3               ;------------------------------------------------------
0016D9  3               
0016D9  3               lcol:
0016D9  3  A9 13        	lda #<SHRAPN		; shrapnel table.
0016DB  3  85 66        	sta z80_l
0016DD  3  A9 31        	lda #>SHRAPN
0016DF  3  85 67        	sta z80_h
0016E1  3               
0016E1  3  A9 37        	lda #NUMSHR		; number of pieces in table.
0016E3  3  85 63        	sta z80_b
0016E5  3               lcol0:
0016E5  3  A0 00        	ldy #0
0016E7  3  B1 66        	lda (z80_hl),y 		; get type.
0016E9  3  F0 10        	beq lcol1		; yes, check collision.
0016EB  3               lcol3:
0016EB  3  18           	clc			; point to more shrapnel.
0016EC  3  A5 66        	lda z80_l
0016EE  3  69 06        	adc #SHRSIZ
0016F0  3  85 66        	sta z80_l
0016F2  3  90 02        	bcc :+
0016F4  3  E6 67        	inc z80_h
0016F6  3               :
0016F6  3  C6 63        	dec z80_b		; repeat for all shrapnel.
0016F8  3  D0 EB        	bne lcol0
0016FA  3  60           	rts 			; no collision, carry not set.
0016FB  3               lcol1:
0016FB  3  A0 03        	ldy #3
0016FD  3  B1 66        	lda (z80_hl),y		; get y.
0016FF  3  38           	sec
001700  3  A0 08        	ldy #8
001702  3  F1 68        	sbc (z80_ix),y		; subtract sprite y.
001704  3               lcolh:
001704  3  C9 10        	cmp #16 		; within range?
001706  3  90 03        	bcc :+
001708  3  4C 1B 17     	jmp lcol2		; no, missed.
00170B  3               :
00170B  3  A0 05        	ldy #5
00170D  3  B1 66        	lda (z80_hl),y 		; get x.
00170F  3  38           	sec
001710  3  A0 09        	ldy #9
001712  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
001714  3  C9 10        	cmp #16			; within range?
001716  3  B0 03        	bcs :+
001718  3  4C 1E 17     	jmp lcol4 		; yes, collision occurred.
00171B  3               :
00171B  3               lcol2:
00171B  3  4C EB 16     	jmp lcol3
00171E  3               lcol4:
00171E  3  38           	sec
00171F  3  60           	rts 			; return with carry set for collision.
001720  3               .endif
001720  3               
001720  3               ;------------------------------------------------------
001720  3               ; Main game engine code starts here.
001720  3               ; After initialisation, mloop is the main loop
001720  3               ;------------------------------------------------------
001720  3               
001720  3               game:
001720  3               
001720  3               ; Set up screen address table.
001720  3               
001720  3               setsat:
001720  3  A9 00        	lda #<ScreenAddr		; start of screen.
001722  3  85 80        	sta scraddr
001724  3  A9 58        	lda #>ScreenAddr
001726  3  85 81        	sta scraddr+1
001728  3               
001728  3  A0 00        	ldy #0			; vertical lines on screen.
00172A  3               setsa0:
00172A  3  A5 80        	lda scraddr
00172C  3  99 13 2F     	sta SCADTB_lb,y		; write low byte.
00172F  3  A5 81        	lda scraddr+1
001731  3  99 13 30     	sta SCADTB_hb,y		; write high byte.
001734  3  20 CB 25     	jsr nline		; next line down.
001737  3  C8           	iny			; next position in table.
001738  3  D0 F0        	bne setsa0
00173A  3               	
00173A  3               ; Init graphics mode
00173A  3               
00173A  3  A9 16        	lda #22
00173C  3  20 EE FF     	jsr OSWRCH		; _BEEB screen select VDU command
00173F  3  A9 04        	lda #ScrMode	; graphics mode
001741  3  20 EE FF     	jsr OSWRCH		; _BEEB screen mode
001744  3  20 38 12     	jsr setpal 		; set up palette.
001747  3               
001747  3               ; Init AtoMMC joystick
001747  3  20 85 21     	jsr joyinit		; AtoMMC joystick on PORT B
00174A  3               
00174A  3               rpblc2:
00174A  3               .if pflag
00174A  3  20 BA 16     	jsr inishr 		; initialise particle engine.
00174D  3               .endif
00174D  3               evintr:
00174D  3  20 2B 34     	jsr evnt12 		; call intro/menu event.
001750  3               
001750  3  A9 02        	lda #WALL 		; write default property.
001752  3  A2 00        	ldx #0
001754  3               clrmap:
001754  3  9D 13 2C     	sta MAP,x 		; block properties.
001757  3  9D 13 2D     	sta MAP+256,x
00175A  3  9D 13 2E     	sta MAP+512,x
00175D  3  E8           	inx			; next byte.
00175E  3  D0 F4        	bne clrmap
001760  3               
001760  3  20 88 11     	jsr iniob 		; initialise objects.
001763  3               
001763  3  A9 00        	lda #0			; put zero in accumulator.
001765  3  8D 4A 11     	sta gamwon		; reset game won flag.
001768  3               
001768  3  20 CD 18     	jsr inisc 		; init the score.
00176B  3               mapst:
00176B  3  AD 74 32     	lda stmap 		; start position on map.
00176E  3  8D 11 2C     	sta roomtb		; set up position in table, if there is one.
001771  3               
001771  3               inipbl:
001771  3  20 EC 26     	jsr initsc 		; set up first screen.
001774  3               
001774  3  A9 00        	lda #<ssprit 		; default to spare sprite in table.
001776  3  85 68        	sta z80_x
001778  3  A9 2C        	lda #>ssprit
00177A  3  85 69        	sta z80_i
00177C  3               evini:
00177C  3  20 63 35     	jsr evnt13 		; initialisation.
00177F  3               
00177F  3               ; Two restarts.
00177F  3               ; First restart - clear all sprites and initialise everything.
00177F  3               
00177F  3               rstrt:
00177F  3  20 7A 18     	jsr rsevt 		; restart events.
001782  3  20 7B 11     	jsr xspr 		; clear sprite table.
001785  3  20 52 28     	jsr sprlst 		; fetch pointer to screen sprites.
001788  3  20 E0 28     	jsr ispr 		; initialise sprite table.
00178B  3               
00178B  3  4C 9A 17     	jmp rstrt0
00178E  3               
00178E  3               ; Second restart - clear all but player, and don't initialise him.
00178E  3               
00178E  3               rstrtn:
00178E  3  20 7A 18     	jsr rsevt		; restart events.
001791  3  20 80 28     	jsr nspr 		; clear all non-player sprites.
001794  3  20 52 28     	jsr sprlst 		; fetch pointer to screen sprites.
001797  3  20 20 29     	jsr kspr 		; initialise sprite table, no more players.
00179A  3               
00179A  3               ; Set up the player and/or enemy sprites.
00179A  3               
00179A  3               rstrt0:
00179A  3  A9 00        	lda #0 			; zero in accumulator.
00179C  3  8D 47 11     	sta nexlev 		; reset next level flag.
00179F  3  8D 48 11     	sta restfl 		; reset restart flag.
0017A2  3  8D 49 11     	sta deadf 		; reset dead flag.
0017A5  3  20 1E 1E     	jsr droom 		; show screen layout.
0017A8  3               rpblc0:
0017A8  3               .if pflag
0017A8  3  20 BA 16     	jsr inishr 		; initialise particle engine.
0017AB  3               .endif
0017AB  3  20 1D 19     	jsr shwob		; draw objects.
0017AE  3               
0017AE  3  A9 34        	lda #<sprtab 		; address of sprite table, even sprites.
0017B0  3  85 68        	sta z80_x
0017B2  3  A9 2B        	lda #>sprtab
0017B4  3  85 69        	sta z80_i
0017B6  3  20 04 24     	jsr dspr 		; display sprites.
0017B9  3               
0017B9  3  A9 45        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0017BB  3  85 68        	sta z80_x
0017BD  3  A9 2B        	lda #>(sprtab+TABSIZ)
0017BF  3  85 69        	sta z80_i
0017C1  3  20 04 24     	jsr dspr 		; display sprites.
0017C4  3               mloop:
0017C4  3  20 BA 11     	jsr vsync 		; synchronise with display.
0017C7  3               
0017C7  3  A9 34        	lda #<sprtab 		; address of sprite table, even sprites.
0017C9  3  85 68        	sta z80_x
0017CB  3  A9 2B        	lda #>sprtab
0017CD  3  85 69        	sta z80_i
0017CF  3  20 04 24     	jsr dspr 		; display even sprites.
0017D2  3               
0017D2  3  20 1C 19     	jsr plsnd 		; play sounds.
0017D5  3  20 BA 11     	jsr vsync 		; synchronise with display.
0017D8  3               
0017D8  3  A9 45        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0017DA  3  85 68        	sta z80_x
0017DC  3  A9 2B        	lda #>(sprtab+TABSIZ)
0017DE  3  85 69        	sta z80_i
0017E0  3  20 04 24     	jsr dspr 		; display odd sprites.
0017E3  3               
0017E3  3  A9 00        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
0017E5  3  85 68        	sta z80_x
0017E7  3  A9 2C        	lda #>(ssprit)
0017E9  3  85 69        	sta z80_i
0017EB  3               evlp1:
0017EB  3  20 0E 34     	jsr evnt10 		; called once per main loop.
0017EE  3  20 79 23     	jsr pspr 		; process sprites.
0017F1  3               
0017F1  3               ; Main loop events.
0017F1  3               
0017F1  3  A9 00        	lda #<ssprit 		; point to spare sprite for spawning purposes.
0017F3  3  85 68        	sta z80_x
0017F5  3  A9 2C        	lda #>ssprit
0017F7  3  85 69        	sta z80_i
0017F9  3               evlp2:
0017F9  3  20 2A 34     	jsr evnt11 		; called once per main loop.
0017FC  3               bsortx:
0017FC  3  20 EC 22     	jsr bsort 		; sort sprites.
0017FF  3               
0017FF  3  AD 47 11     	lda nexlev		; finished level flag.
001802  3  D0 21        	bne newlev		; is set, go to next level.
001804  3  AD 4A 11     	lda gamwon		; finished game flag.
001807  3  D0 2D        	bne evwon		; is set, finish the game.
001809  3  AD 48 11     	lda restfl 		; finished level flag.
00180C  3  C9 01        	cmp #1			; has it been set?
00180E  3  D0 03        	bne :+
001810  3  4C 7F 17     	jmp rstrt		; yes, go to next level.
001813  3               :
001813  3  C9 02        	cmp #2			; has it been set?
001815  3  D0 03        	bne :+
001817  3  4C 8E 17     	jmp rstrtn		; yes, go to next level.
00181A  3               :
00181A  3  AD 49 11     	lda deadf 		; dead flag.
00181D  3  D0 1D        	bne pdead		; yes, player dead.
00181F  3               
00181F  3               ; back to start of main loop.
00181F  3               
00181F  3  EE 42 11     	inc clock
001822  3  4C C4 17     	jmp mloop		; switched to a jmp mloop during test mode.
001825  3               
001825  3               ;----------------------------------------------------------
001825  3               ; New level
001825  3               ;----------------------------------------------------------
001825  3               
001825  3               newlev:
001825  3  AD 26 11     	lda scno 			; current screen.
001828  3  18           	clc
001829  3  69 01        	adc #1				; next screen.
00182B  3  CD 72 39     	cmp numsc			; total number of screens.
00182E  3  B0 06        	bcs evwon			; yes, game finished.
001830  3  8D 26 11     	sta scno			; set new level number.
001833  3  4C 7F 17     	jmp rstrt			; restart, clearing all aliens.
001836  3               
001836  3               evwon:
001836  3  20 B3 35     	jsr evnt18		 	; game completed.
001839  3  4C 4F 18     	jmp tidyup			; tidy up and return to BASIC/calling routine.
00183C  3               
00183C  3               ;----------------------------------------------------------
00183C  3               ; Player dead.
00183C  3               ;----------------------------------------------------------
00183C  3               
00183C  3               pdead:
00183C  3  A9 00        	lda #0				; zeroise accumulator.
00183E  3  8D 49 11     	sta deadf			; reset dead flag.
001841  3               evdie:
001841  3  20 8A 35     	jsr evnt16 			; death subroutine.
001844  3  AD 27 11     	lda numlif			; number of lives.
001847  3  F0 03        	beq :+
001849  3  4C 7F 17     	jmp rstrt 			; restart game.
00184C  3               :
00184C  3               evfail:
00184C  3  20 94 35     	jsr evnt17 			; failure event.
00184F  3               
00184F  3               ;----------------------------------------------------------
00184F  3               ; Tidy things up
00184F  3               ;----------------------------------------------------------
00184F  3               
00184F  3               tidyup:
00184F  3  A0 00        	ldy #0				; digits to check.
001851  3               tidyu2:
001851  3  B9 00 1B     	lda score,y 			; get score digit.
001854  3  CD 06 1B     	cmp hiscor 			; are we larger than high score digit?
001857  3  90 07        	bcc tidyu0			; high score is bigger.
001859  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
00185B  3  C8           	iny				; next digit of high score.
00185C  3  C0 06        	cpy #6
00185E  3  D0 F1        	bne tidyu2			; repeat for all digits
001860  3               tidyu0:
001860  3  A9 00        	lda #<score			; return pointing to score.
001862  3  85 62        	sta z80_c
001864  3  A9 1B        	lda #>score
001866  3  85 63        	sta z80_b
001868  3  60           	rts
001869  3               tidyu1:
001869  3  A0 05        	ldy #5
00186B  3               tidyu3:
00186B  3  B9 00 1B     	lda score,y			; score.
00186E  3  99 06 1B     	sta hiscor,y			; high score.
001871  3  88           	dey
001872  3  10 F7        	bpl tidyu3 			; copy score to high score.
001874  3               evnewh:
001874  3  20 C6 35     	jsr evnt19			; new high score event.
001877  3  4C 60 18     	jmp tidyu0			; tidy up.
00187A  3               
00187A  3               ;--------------------------------------------------
00187A  3               ; Restart event.
00187A  3               ;--------------------------------------------------
00187A  3               
00187A  3               rsevt:
00187A  3  A9 00        	lda #<ssprit 			; default to spare element in table.
00187C  3  85 68        	sta z80_x
00187E  3  A9 2C        	lda #>ssprit
001880  3  85 69        	sta z80_i
001882  3               evrs:
001882  3  4C 69 35     	jmp evnt14	 		; call restart event.
001885  3               
001885  3               ;------------------------------------------------------------------
001885  3               ; Copy number passed in a to string position bc, right-justified.
001885  3               ;
001885  3               ; Input:
001885  3               ;  A  = number
001885  3               ;  BC = string address
001885  3               ;
001885  3               ; Output:
001885  3               ;  BC = string with number
001885  3               ;-----------------------------------------------------------------
001885  3               
001885  3               num2ch:
001885  3  85 65        	sta z80_d		; Save number
001887  3               
001887  3  A9 00        	lda #0
001889  3  8D CC 18     	sta flag
00188C  3               
00188C  3  A2 64        	ldx #100		; hundreds column.
00188E  3  86 64        	stx z80_e
001890  3  20 A1 18     	jsr numdg		; show digit.
001893  3               
001893  3  A2 0A        	ldx #10			; tens column.
001895  3  86 64        	stx z80_e
001897  3  20 A1 18     	jsr numdg		; show digit.
00189A  3               
00189A  3  EE CC 18     	inc flag
00189D  3  A2 01        	ldx #1			; units column.
00189F  3  86 64        	stx z80_e
0018A1  3               numdg:
0018A1  3  A9 30        	lda #48			; clear digit.
0018A3  3  85 61        	sta z80_a
0018A5  3               numdg1:
0018A5  3  A5 65        	lda z80_d
0018A7  3  C5 64        	cmp z80_e
0018A9  3  90 0F        	bcc numdg0		; nothing to show.
0018AB  3  38           	sec
0018AC  3  A5 65        	lda z80_d
0018AE  3  E5 64        	sbc z80_e		; subtract from column.
0018B0  3  85 65        	sta z80_d
0018B2  3  E6 61        	inc z80_a		; increment digit.
0018B4  3  EE CC 18     	inc flag
0018B7  3  4C A5 18     	jmp numdg1		; repeat until column is zero.
0018BA  3               numdg0:
0018BA  3  A0 00        	ldy #0
0018BC  3  A5 61        	lda z80_a
0018BE  3  91 62        	sta (z80_bc),y		; write digit to buffer.
0018C0  3  AD CC 18     	lda flag
0018C3  3  F0 06        	beq :+
0018C5  3  E6 62        	inc z80_c		; next buffer position.
0018C7  3  D0 02        	bne :+
0018C9  3  E6 63        	inc z80_b
0018CB  3               :
0018CB  3  60           	rts
0018CC  3               
0018CC  3  00           flag:	.byte 0
0018CD  3               
0018CD  3               ;---------------------------------------------------------
0018CD  3               ; Reset score to "000000"
0018CD  3               ;---------------------------------------------------------
0018CD  3               
0018CD  3               inisc:
0018CD  3  A9 30        	lda #'0'
0018CF  3  A2 05        	ldx #5			; digits to initialise.
0018D1  3               inisc0:
0018D1  3  9D 00 1B     	sta score,x 		; write zero digit.
0018D4  3  CA           	dex			; next column.
0018D5  3  10 FA        	bpl inisc0		; repeat for all digits.
0018D7  3               
0018D7  3  60           	rts
0018D8  3               
0018D8  3               ;-----------------------------------------------------
0018D8  3               ; Multiply h by d and return in hl.
0018D8  3               ;
0018D8  3               ; Input:
0018D8  3               ;  H = first number
0018D8  3               ;  D = second number
0018D8  3               ;
0018D8  3               ; Output:
0018D8  3               ;  HL = result H x D
0018D8  3               ;-----------------------------------------------------
0018D8  3               
0018D8  3               imul:
0018D8  3  A5 65        	lda z80_d		; HL = H * D
0018DA  3  85 64        	sta z80_e
0018DC  3  A5 67        	lda z80_h
0018DE  3  85 62        	sta z80_c		; make c first multiplier.
0018E0  3               imul0:
0018E0  3  A9 00        	lda #0			; zeroise total.
0018E2  3  85 66        	sta z80_l
0018E4  3  85 67        	sta z80_h
0018E6  3               
0018E6  3  A5 67        	lda z80_h
0018E8  3  85 65        	sta z80_d		; zeroise high byte.
0018EA  3               
0018EA  3  A9 08        	lda #8			; repeat 8 times.
0018EC  3  85 63        	sta z80_b
0018EE  3               imul1:
0018EE  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
0018F0  3  90 0E        	bcc imul2		; wasn't set.
0018F2  3  18           	clc			; bit was set, so add de.
0018F3  3  A5 66        	lda z80_l
0018F5  3  65 64        	adc z80_e
0018F7  3  85 66        	sta z80_l
0018F9  3  A5 67        	lda z80_h
0018FB  3  65 65        	adc z80_d
0018FD  3  85 67        	sta z80_h
0018FF  3  18           	clc 			; reset carry.
001900  3               imul2:
001900  3  06 64        	asl z80_e 		; shift de 1 bit left.
001902  3  26 65        	rol z80_d
001904  3  C6 63        	dec z80_b
001906  3  D0 E6        	bne imul1		; repeat 8 times.
001908  3               
001908  3  60           	rts
001909  3               
001909  3               ;-----------------------------------------------
001909  3               ; Divide d by e and return in d, remainder in a.
001909  3               ;
001909  3               ; Input:
001909  3               ;  D = first number
001909  3               ;  E = second number
001909  3               ;
001909  3               ; Output:
001909  3               ;  D = result D/E
001909  3               ;  A = remainder
001909  3               ;-----------------------------------------------
001909  3               
001909  3               idiv:
001909  3  A9 00        	lda #0
00190B  3  A0 08        	ldy #8		 	; bits to shift.
00190D  3  06 65        	asl z80_d
00190F  3               idiv0:
00190F  3  2A           	rol a 			; multiply d by 2.
001910  3  C5 64        	cmp z80_e 		; test if e is smaller.
001912  3  90 02        	bcc idiv1		; e is greater, no division this time.
001914  3  E5 64        	sbc z80_e		; subtract it.
001916  3               idiv1:
001916  3  26 65        	rol z80_d		; rotate into d.
001918  3  88           	dey
001919  3  D0 F4        	bne idiv0		; repeat
00191B  3  60           	rts
00191C  3               
00191C  3               ;---------------------------------------------------
00191C  3               ; Play AY sound effect
00191C  3               ;---------------------------------------------------
00191C  3               
00191C  3               plsnd:
00191C  3  60           	rts
00191D  3               
00191D  3               ;---------------------------------------------------
00191D  3               ; Objects handling.
00191D  3               ; 32 bytes for image
00191D  3               ; 3 for room, y and x
00191D  3               ; 3 for starting room, y and x.
00191D  3               ; 254 = disabled.
00191D  3               ; 255 = object in player"s pockets.
00191D  3               ;---------------------------------------------------
00191D  3               
00191D  3               ;---------------------------------------------------
00191D  3               ; Show items present.
00191D  3               ;---------------------------------------------------
00191D  3               
00191D  3               shwob:
00191D  3  A9 96        	lda #<objdta 			; objects table.
00191F  3  85 66        	sta z80_l
001921  3  A9 39        	lda #>objdta
001923  3  85 67        	sta z80_h
001925  3               
001925  3  AD 21 11     	lda numob 			; number of objects in the game.
001928  3  8D B7 24     	sta sprcnt
00192B  3               shwob0:
00192B  3  A0 20        	ldy #32 			; distance to room number.
00192D  3  B1 66        	lda (z80_hl),y 			; same as an item?
00192F  3  CD 26 11     	cmp scno 			; current location.
001932  3  D0 03        	bne :+
001934  3  20 4A 19     	jsr dobj 			; yes, display object.
001937  3               :
001937  3  18           	clc
001938  3  A5 66        	lda z80_l
00193A  3  69 26        	adc #38 			; distance to next item.
00193C  3  85 66        	sta z80_l
00193E  3  A5 67        	lda z80_h
001940  3  69 00        	adc #0
001942  3  85 67        	sta z80_h	 		; point to it.
001944  3  CE B7 24     	dec sprcnt
001947  3  D0 E2        	bne shwob0 			; repeat for others.
001949  3  60           	rts
00194A  3               
00194A  3               ;---------------------------------------------------
00194A  3               ; Display object.
00194A  3               ; hl must point to object's start address.
00194A  3               ;
00194A  3               ; Input:
00194A  3               ;  HL = object address
00194A  3               ;---------------------------------------------------
00194A  3               
00194A  3               dobj:
00194A  3  A0 21        	ldy #33
00194C  3  B1 66        	lda (z80_hl),y 			; point to y.
00194E  3  8D 4C 11     	sta dispy
001951  3  C8           	iny
001952  3  B1 66        	lda (z80_hl),y 			; point to x.
001954  3  8D 4B 11     	sta dispx
001957  3               dobj1:
001957  3  4C 67 1D     	jmp sprite 			; draw this sprite.
00195A  3               
00195A  3               ;--------------------------------------
00195A  3               ; Remove an object.
00195A  3               ;
00195A  3               ; Input:
00195A  3               ;  A = object number
00195A  3               ;--------------------------------------
00195A  3               
00195A  3               remob:
00195A  3  CD 21 11     	cmp numob			; number of objects in game.
00195D  3  90 01        	bcc :+				; are we checking past the end?
00195F  3  60           	rts				; yes, can't get non-existent item.
001960  3               :
001960  3  48           	pha				; remember object.
001961  3  20 6F 19     	jsr getob			; pick it up if we haven't already got it.
001964  3  68           	pla				; retrieve object number.
001965  3  20 A1 19     	jsr gotob			; get its address.
001968  3  A9 FE        	lda #254
00196A  3  A0 20        	ldy #32
00196C  3  91 66        	sta (z80_hl),y			; remove it.
00196E  3  60           	rts
00196F  3               
00196F  3               ;---------------------------------------------------
00196F  3               ; Pick up object number held in the accumulator.
00196F  3               ;
00196F  3               ; Input:
00196F  3               ;  A = object number
00196F  3               ;---------------------------------------------------
00196F  3               
00196F  3               getob:
00196F  3  CD 21 11     	cmp numob 		; number of objects in game.
001972  3  90 01        	bcc :+			; are we checking past the end?
001974  3  60           	rts			; yes, can't get non-existent item.
001975  3               :
001975  3  20 A1 19     	jsr gotob 		; check if we already have it.
001978  3  C9 FF        	cmp #255
00197A  3  D0 01        	bne :+
00197C  3  60           	rts			; we already do.
00197D  3               :
00197D  3  A0 20        	ldy #32
00197F  3  B1 66        	lda (z80_hl),y		; is it on this screen?
001981  3  CD 26 11     	cmp scno 		; current screen.
001984  3  D0 16        	bne getob0		; not on screen, so nothing to delete.
001986  3               
001986  3  A9 FF        	lda #255
001988  3  91 66        	sta (z80_hl),y		; pick it up.
00198A  3  C8           	iny 			; point to y coord.
00198B  3               getob1:
00198B  3  A0 21        	ldy #33
00198D  3  B1 66        	lda (z80_hl),y		; y coord.
00198F  3  8D 4C 11     	sta dispy
001992  3  A0 22        	ldy #34
001994  3  B1 66        	lda (z80_hl),y 		; x coord.
001996  3  8D 4B 11     	sta dispx
001999  3  4C 57 19     	jmp dobj1 		; delete object sprite.
00199C  3               getob0:
00199C  3  A9 FF        	lda #255
00199E  3  91 66        	sta (z80_hl),y 		; pick it up.
0019A0  3  60           	rts
0019A1  3               
0019A1  3               ;-----------------------------------------------------------------
0019A1  3               ; Got object check.
0019A1  3               ; Call with object in accumulator, returns zero set if in pockets.
0019A1  3               ;
0019A1  3               ; Input:
0019A1  3               ;  A = object number
0019A1  3               ;-----------------------------------------------------------------
0019A1  3               
0019A1  3               gotob:
0019A1  3  CD 21 11     	cmp numob 		; number of objects in game.
0019A4  3  90 03        	bcc :+ 			; are we checking past the end?
0019A6  3  4C AD 19     	jmp gotob0 		; yes, we can't have a non-existent object.
0019A9  3               :
0019A9  3  20 B2 19     	jsr findob		; find the object.
0019AC  3               gotob1:
0019AC  3  60           	rts
0019AD  3               
0019AD  3               gotob0:
0019AD  3  A9 FE        	lda #254 		; missing.
0019AF  3  4C AC 19     	jmp gotob1
0019B2  3               
0019B2  3               findob:
0019B2  3  48           	pha			; save object number
0019B3  3  A9 96        	lda #<objdta 		; objects.
0019B5  3  85 66        	sta z80_l
0019B7  3  A9 39        	lda #>objdta
0019B9  3  85 67        	sta z80_h
0019BB  3  68           	pla			; retreive object number
0019BC  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
0019BE  3  AA           	tax 			; loop counter
0019BF  3               fndob2:
0019BF  3  18           	clc
0019C0  3  A5 66        	lda z80_l
0019C2  3  69 26        	adc #38 		; size of each object.
0019C4  3  85 66        	sta z80_l
0019C6  3  90 02        	bcc :+
0019C8  3  E6 67        	inc z80_h
0019CA  3               :
0019CA  3  CA           	dex 			; repeat until we find address.
0019CB  3  D0 F2        	bne fndob2
0019CD  3               fndob1:
0019CD  3  A0 20        	ldy #32			; distance to room it's in.
0019CF  3  B1 66        	lda (z80_hl),y		; fetch status.
0019D1  3  60           	rts
0019D2  3               
0019D2  3               ;---------------------------------------------
0019D2  3               ; Drop object number at (dispx, dispy).
0019D2  3               ;
0019D2  3               ; Input:
0019D2  3               ;  A = object number
0019D2  3               ;---------------------------------------------
0019D2  3               
0019D2  3               drpob:
0019D2  3  CD 21 11     	cmp numob 		; are we checking past the end?
0019D5  3  90 01        	bcc :+
0019D7  3  60           	rts			; yes, can't drop non-existent item.
0019D8  3               :
0019D8  3  20 A1 19     	jsr gotob		; make sure object is in inventory.
0019DB  3  CD 26 11     	cmp scno		; already on this screen?
0019DE  3  D0 01        	bne :+
0019E0  3  60           	rts			; yes, nothing to do.
0019E1  3               :
0019E1  3  A0 20        	ldy #32
0019E3  3  AD 26 11     	lda scno
0019E6  3  91 66        	sta (z80_hl),y		; bring onto screen.
0019E8  3  AD 4C 11     	lda dispy		; sprite y coordinate.
0019EB  3  C8           	iny 
0019EC  3  91 66        	sta (z80_hl),y		; point to object y.
0019EE  3  AD 4B 11     	lda dispx 		; sprite x coordinate.
0019F1  3  C8           	iny
0019F2  3  91 66        	sta (z80_hl),y 		; point to object x
0019F4  3  4C 4A 19     	jmp dobj		; draw the object sprite.
0019F7  3               
0019F7  3               ;-----------------------------------------------
0019F7  3               ; Seek objects at sprite position.
0019F7  3               ;
0019F7  3               ; Output:
0019F7  3               ;  A = object number, if not found A=255
0019F7  3               ;-----------------------------------------------
0019F7  3               
0019F7  3               skobj:
0019F7  3  A9 96        	lda #<objdta 		; pointer to objects.
0019F9  3  85 66        	sta z80_l
0019FB  3  A9 39        	lda #>objdta
0019FD  3  85 67        	sta z80_h
0019FF  3               
0019FF  3  AD 21 11     	lda numob 		; number of objects in game.
001A02  3  85 63        	sta z80_b 		; set up the loop counter.
001A04  3               skobj0:
001A04  3  AD 26 11     	lda scno		; current room number.
001A07  3  A0 20        	ldy #32
001A09  3  D1 66        	cmp (z80_hl),y		; is object in here?
001A0B  3  D0 03        	bne :+
001A0D  3  20 22 1A     	jsr skobj1		; yes, check coordinates.
001A10  3               :
001A10  3  18           	clc			; point to next object in table.
001A11  3  A5 66        	lda z80_l
001A13  3  69 26        	adc #38			; size of each object.
001A15  3  85 66        	sta z80_l
001A17  3  90 02        	bcc :+
001A19  3  E6 67        	inc z80_h
001A1B  3               :
001A1B  3  C6 63        	dec z80_b
001A1D  3  D0 E5        	bne skobj0		; repeat for all objects.
001A1F  3               
001A1F  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
001A21  3  60           	rts
001A22  3               
001A22  3               skobj1:
001A22  3  A0 21        	ldy #33			; point to y coordinate.
001A24  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
001A26  3  38           	sec
001A27  3  A0 08        	ldy #var_newY
001A29  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
001A2B  3  18           	clc
001A2C  3  69 0F        	adc #15			; add sprite height minus one.
001A2E  3  C9 1F        	cmp #31			; within range?
001A30  3  90 03        	bcc :+
001A32  3  4C 50 1A     	jmp skobj2		; no, ignore object.
001A35  3               :
001A35  3  A0 22        	ldy #34			; point to x coordinate now.
001A37  3  B1 66        	lda (z80_hl),y 		; get coordinate.
001A39  3  38           	sec
001A3A  3  A0 09        	ldy #var_newX
001A3C  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
001A3E  3  18           	clc			; add sprite width minus one.
001A3F  3  69 0F        	adc #15
001A41  3  C9 1F        	cmp #31			; within range?
001A43  3  90 03        	bcc :+
001A45  3  4C 50 1A     	jmp skobj2		; no, ignore object.
001A48  3               :
001A48  3  68           	pla			; remove return address from stack.
001A49  3  68           	pla
001A4A  3               
001A4A  3  AD 21 11     	lda numob 		; objects in game.
001A4D  3  38           	sec
001A4E  3  E5 63        	sbc z80_b		; subtract loop counter.
001A50  3               skobj2:
001A50  3  60           	rts			; accumulator now points to object.
001A51  3               
001A51  3               
001A51  3               ;---------------------------------------------------------------------
001A51  3               ; Spawn a new sprite.
001A51  3               ;---------------------------------------------------------------------
001A51  3               
001A51  3               spawn:
001A51  3  A9 34        	lda #<sprtab		; sprite table.
001A53  3  85 66        	sta z80_l
001A55  3  A9 2B        	lda #>sprtab
001A57  3  85 67        	sta z80_h
001A59  3               numsp1:
001A59  3  A9 0C        	lda #NUMSPR		; number of sprites.
001A5B  3  8D FC 1A     	sta spcnt
001A5E  3               spaw0:
001A5E  3  A0 00        	ldy #var_Type
001A60  3  B1 66        	lda (z80_hl),y		; get sprite type.
001A62  3  C9 FF        	cmp #255		; is it an unused slot?
001A64  3  F0 10        	beq spaw1 		; yes, we can use this one.
001A66  3               
001A66  3  18           	clc 			; point to next sprite in table.
001A67  3  A5 66        	lda z80_l
001A69  3  69 11        	adc #TABSIZ		; size of each entry.
001A6B  3  85 66        	sta z80_l
001A6D  3  90 02        	bcc :+
001A6F  3  E6 67        	inc z80_h
001A71  3               :
001A71  3  CE FC 1A     	dec spcnt		; one less iteration.
001A74  3  D0 E8        	bne spaw0		; keep going until we find a slot.
001A76  3               
001A76  3               ; Didn't find one but drop through and set up a dummy sprite instead.
001A76  3               
001A76  3               spaw1:
001A76  3  A5 69        	lda z80_i		; address of original sprite.
001A78  3  48           	pha
001A79  3  A5 68        	lda z80_x
001A7B  3  48           	pha
001A7C  3               
001A7C  3  A5 66        	lda z80_l		; store spawned sprite address.
001A7E  3  8D FD 1A     	sta spptr
001A81  3  A5 67        	lda z80_h
001A83  3  8D FE 1A     	sta spptr+1
001A86  3               
001A86  3  A5 62        	lda z80_c
001A88  3  A0 00        	ldy #var_Type
001A8A  3  91 66        	sta (z80_hl),y 		; set the type.
001A8C  3  A0 05        	ldy #var_newType
001A8E  3  91 66        	sta (z80_hl),y		; copy
001A90  3               
001A90  3  A5 63        	lda z80_b
001A92  3  A0 01        	ldy #var_Image
001A94  3  91 66        	sta (z80_hl),y		; set the image.
001A96  3  A0 06        	ldy #var_newImage
001A98  3  91 66        	sta (z80_hl),y		; copy
001A9A  3               
001A9A  3  A9 00        	lda #0 				; frame zero.
001A9C  3  A0 02        	ldy #var_Frame
001A9E  3  91 66        	sta (z80_hl),y		; set frame.
001AA0  3  A0 07        	ldy #var_newFrame
001AA2  3  91 66        	sta (z80_hl),y		; copy
001AA4  3               
001AA4  3  A0 09        	ldy #9
001AA6  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001AA8  3  A0 04        	ldy #var_X
001AAA  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
001AAC  3  A0 09        	ldy #var_newX
001AAE  3  91 66        	sta (z80_hl),y		; copy
001AB0  3               
001AB0  3  A0 08        	ldy #8
001AB2  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001AB4  3  A0 03        	ldy #var_Y
001AB6  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
001AB8  3  A0 08        	ldy #var_newY
001ABA  3  91 66        	sta (z80_hl),y		; copy
001ABC  3               
001ABC  3  A0 0A        	ldy #10				; direction of original.
001ABE  3  B1 68        	lda (z80_ix),y
001AC0  3  A0 0A        	ldy #var_Direction
001AC2  3  91 66        	sta (z80_hl),y		; direction
001AC4  3               
001AC4  3  A9 00        	lda #0
001AC6  3  A0 0D        	ldy #var_jumpLo
001AC8  3  91 66        	sta (z80_hl),y		; reset parameter.
001ACA  3  C8           	iny
001ACB  3  91 66        	sta (z80_hl),y		; reset parameter.
001ACD  3  C8           	iny
001ACE  3  91 66        	sta (z80_hl),y		; reset parameter.
001AD0  3  C8           	iny
001AD1  3  91 66        	sta (z80_hl),y		; reset parameter.
001AD3  3               rtssp:
001AD3  3  AD FD 1A     	lda spptr			; address of new sprite.
001AD6  3  85 68        	sta z80_x
001AD8  3  AD FE 1A     	lda spptr+1
001ADB  3  85 69        	sta z80_i
001ADD  3               evis1:
001ADD  3  20 0D 34     	jsr evnt09 			; call sprite initialisation event.
001AE0  3               
001AE0  3  AD FD 1A     	lda spptr 			; address of new sprite.
001AE3  3  85 68        	sta z80_x
001AE5  3  AD FE 1A     	lda spptr+1
001AE8  3  85 69        	sta z80_i
001AEA  3               
001AEA  3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
001AEA  3  A0 03        	ldy #var_Y
001AEC  3  B1 66        	lda (z80_hl), y		; old x coord
001AEE  3  C9 B9        	cmp #SpriteMaxY     ; beyond maximum?
001AF0  3  B0 03        	bcs :+				; yes, don't draw it.
001AF2  3               
001AF2  3  20 47 25     	jsr sspria 			; display the new sprite.
001AF5  3               :
001AF5  3  68           	pla					; address of original sprite.
001AF6  3  85 68        	sta z80_x
001AF8  3  68           	pla
001AF9  3  85 69        	sta z80_i
001AFB  3               
001AFB  3  60           	rts
001AFC  3               
001AFC  3  00           spcnt:	.byte 0
001AFD  3  00 00        spptr:	.word 0			; spawned sprite pointer.
001AFF  3  00           seed:	.byte 0			; seed for random numbers.
001B00  3  30 30 30 30  score:	.byte "000000"		; player"s score.
001B04  3  30 30        
001B06  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
001B0A  3  30 30        
001B0C  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
001B10  3  30 30        
001B12  3  00 58        grbase:	.word ScreenAddr	; graphics base address.
001B14  3               
001B14  3               ;----------------------------------------------------
001B14  3               ; Check y-pos
001B14  3               ;----------------------------------------------------
001B14  3               
001B14  3               checkx:
001B14  3  AD 4C 11     	lda dispy		; y position.
001B17  3  C9 18        	cmp #24			; off screen?
001B19  3  B0 01        	bcs :+
001B1B  3  60           	rts			; no, it's okay.
001B1C  3               :
001B1C  3  68           	pla			; remove return address from stack.
001B1D  3  85 66        	sta z80_l
001B1F  3  68           	pla
001B20  3  85 67        	sta z80_h
001B22  3  60           	rts
001B23  3               
001B23  3               ;-----------------------------------------------
001B23  3               ; Displays the current high score.
001B23  3               ;-----------------------------------------------
001B23  3               
001B23  3               dhisc:
001B23  3  A9 06        	lda #<hiscor 		; high score text.
001B25  3  85 66        	sta z80_l
001B27  3  A9 1B        	lda #>hiscor
001B29  3  85 67        	sta z80_h
001B2B  3  4C 36 1B     	jmp dscor1		; check in printable range then show 6 digits.
001B2E  3               
001B2E  3               ;------------------------------------------------------
001B2E  3               ; Displays the current score.
001B2E  3               ;------------------------------------------------------
001B2E  3               
001B2E  3               dscor:
001B2E  3  A9 00        	lda #<score		; score text.
001B30  3  85 66        	sta z80_l
001B32  3  A9 1B        	lda #>score
001B34  3  85 67        	sta z80_h
001B36  3               dscor1:
001B36  3  20 BA 22     	jsr preprt		; set up font and print position.
001B39  3  20 14 1B     	jsr checkx		; make sure we're in a printable range.
001B3C  3               
001B3C  3  A9 06        	lda #6			; digits to display.
001B3E  3  85 63        	sta z80_b
001B40  3  AD FC 21     	lda prtmod		; get print mode.
001B43  3  F0 03        	beq :+			; standard size text?
001B45  3  4C 69 1B     	jmp bscor0		; no, show double-height.
001B48  3               :
001B48  3               dscor0:
001B48  3  A0 00        	ldy #0
001B4A  3  B1 66        	lda (z80_hl),y 		; fetch character.
001B4C  3  20 B7 1C     	jsr pchar 		; display character.
001B4F  3  EE 4B 11     	inc dispx		; move along x coordinate
001B52  3               
001B52  3  E6 66        	inc z80_l		; next score column.
001B54  3  D0 02        	bne :+
001B56  3  E6 67        	inc z80_h
001B58  3               :
001B58  3  C6 63        	dec z80_b
001B5A  3  D0 EC        	bne dscor0 		; repeat for all digits.
001B5C  3               dscor2:
001B5C  3  AD 4B 11     	lda dispx 		; set up display coordinates.
001B5F  3  8D 40 11     	sta charx
001B62  3  AD 4C 11     	lda dispy
001B65  3  8D 41 11     	sta chary
001B68  3  60           	rts
001B69  3               
001B69  3               ;------------------------------------------------------
001B69  3               ; Displays the current score in double-height characters.
001B69  3               ;
001B69  3               ; Input:
001B69  3               ;  B  = digit number
001B69  3               ;  HL = score string
001B69  3               ;------------------------------------------------------
001B69  3               
001B69  3               bscor0:
001B69  3  A0 00        	ldy #0
001B6B  3               
001B6B  3  B1 66        	lda (z80_hl),y 		; fetch character.
001B6D  3  20 34 22     	jsr bchar 		; display big char.
001B70  3               
001B70  3  E6 66        	inc z80_l 		; next score column.
001B72  3  D0 02        	bne :+
001B74  3  E6 67        	inc z80_h
001B76  3               :
001B76  3  C6 63        	dec z80_b
001B78  3  F0 03        	beq :+
001B7A  3  4C 69 1B     	jmp bscor0 		; repeat for all digits.
001B7D  3               :
001B7D  3  4C 5C 1B     	jmp dscor2 		; tidy up line and column variables.
001B80  3               
001B80  3               ;-----------------------------------------------------
001B80  3               ; Adds number in the hl pair to the score.
001B80  3               ;-----------------------------------------------------
001B80  3               
001B80  3               addsc:
001B80  3  A9 01        	lda #<(score+1) 	; ten thousands column.
001B82  3  85 64        	sta z80_e
001B84  3  A9 1B        	lda #>(score+1)
001B86  3  85 65        	sta z80_d
001B88  3  A9 10        	lda #<10000		; amount to add each time.
001B8A  3  85 62        	sta z80_c
001B8C  3  A9 27        	lda #>10000
001B8E  3  85 63        	sta z80_b
001B90  3  20 D4 1B     	jsr incsc		; add to score.
001B93  3               
001B93  3  E6 64        	inc z80_e		; thousands column.
001B95  3  D0 02        	bne :+
001B97  3  E6 65        	inc z80_d
001B99  3               :
001B99  3  A9 E8        	lda #<1000		; amount to add each time.
001B9B  3  85 62        	sta z80_c
001B9D  3  A9 03        	lda #>1000
001B9F  3  85 63        	sta z80_b
001BA1  3  20 D4 1B     	jsr incsc 		; add to score.
001BA4  3               
001BA4  3  E6 64        	inc z80_e		; hundreds column.
001BA6  3  D0 02        	bne :+
001BA8  3  E6 65        	inc z80_d
001BAA  3               :
001BAA  3  A9 64        	lda #<100		; amount to add each time.
001BAC  3  85 62        	sta z80_c
001BAE  3  A9 00        	lda #>100
001BB0  3  85 63        	sta z80_b
001BB2  3  20 D4 1B     	jsr incsc		; add to score.
001BB5  3               
001BB5  3  E6 64        	inc z80_e 		; tens column.
001BB7  3  D0 02        	bne :+
001BB9  3  E6 65        	inc z80_d
001BBB  3               :
001BBB  3  A9 0A        	lda #<10		; amount to add each time.
001BBD  3  85 62        	sta z80_c
001BBF  3  A9 00        	lda #>10
001BC1  3  85 63        	sta z80_b
001BC3  3  20 D4 1B     	jsr incsc 		; add to score.
001BC6  3               
001BC6  3  E6 64        	inc z80_e		; units column.
001BC8  3  D0 02        	bne :+
001BCA  3  E6 65        	inc z80_d
001BCC  3               :
001BCC  3  A9 01        	lda #<1			; units.
001BCE  3  85 62        	sta z80_c
001BD0  3  A9 00        	lda #>1
001BD2  3  85 63        	sta z80_b
001BD4  3               incsc:
001BD4  3  A5 67        	lda z80_h		; store amount to add.
001BD6  3  48           	pha
001BD7  3  A5 66        	lda z80_l
001BD9  3  48           	pha
001BDA  3               
001BDA  3  38           	sec			; subtract from amount to add.
001BDB  3  A5 66        	lda z80_l
001BDD  3  E5 62        	sbc z80_c
001BDF  3  85 66        	sta z80_l
001BE1  3  A5 67        	lda z80_h
001BE3  3  E5 63        	sbc z80_b
001BE5  3  85 67        	sta z80_h
001BE7  3  90 14        	bcc incsc0		; too much, restore value.
001BE9  3               
001BE9  3  68           	pla			; delete the previous amount from the stack.
001BEA  3  68           	pla
001BEB  3               
001BEB  3  A5 65        	lda z80_d 		; store column position.
001BED  3  48           	pha
001BEE  3  A5 64        	lda z80_e
001BF0  3  48           	pha
001BF1  3  20 04 1C     	jsr incsc2		; do the increment.
001BF4  3               
001BF4  3  68           	pla			; restore column.
001BF5  3  85 64        	sta z80_e
001BF7  3  68           	pla
001BF8  3  85 65        	sta z80_d
001BFA  3  4C D4 1B     	jmp incsc		; repeat until all added.
001BFD  3               
001BFD  3               incsc0:
001BFD  3  68           	pla			; restore previous value.
001BFE  3  85 66        	sta z80_l
001C00  3  68           	pla
001C01  3  85 67        	sta z80_h
001C03  3  60           	rts
001C04  3               incsc2:
001C04  3  A0 00        	ldy #0
001C06  3  B1 64        	lda (z80_de),y 		; get amount.
001C08  3  18           	clc
001C09  3  69 01        	adc #1			; add one to column.
001C0B  3  91 64        	sta (z80_de),y		; write new column total.
001C0D  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
001C0F  3  B0 01        	bcs :+
001C11  3  60           	rts			; no, carry on.
001C12  3               :
001C12  3  A9 30        	lda #'0'		; make it zero.
001C14  3  91 64        	sta (z80_de),y		; write new column total.
001C16  3  C6 64        	dec z80_e		; back one column.
001C18  3  D0 02        	bne :+
001C1A  3  C6 65        	dec z80_d
001C1C  3               :
001C1C  3  4C 04 1C     	jmp incsc2
001C1F  3               
001C1F  3               ;------------------------------------
001C1F  3               ; Add bonus to score and reset bonus
001C1F  3               ;------------------------------------
001C1F  3               
001C1F  3               addbo:
001C1F  3  A2 05        	ldx #5			; last digit.
001C21  3  18           	clc			; clear carry.
001C22  3               addbo0:
001C22  3  BD 00 1B     	lda score,x		; get score.
001C25  3  7D 0C 1B     	adc bonus,x		; add bonus.
001C28  3  38           	sec			; 0 to 18.
001C29  3  E9 30        	sbc #48
001C2B  3  48           	pha
001C2C  3  A9 30        	lda #'0'
001C2E  3  9D 0C 1B     	sta bonus,x		; zeroise bonus.
001C31  3  68           	pla
001C32  3  C9 3A        	cmp #58			; carried?
001C34  3  B0 07        	bcs addbo2		; no, do next one.
001C36  3  38           	sec
001C37  3  E9 0A        	sbc #10			; subtract 10.
001C39  3  38           	sec
001C3A  3  4C 3E 1C     	jmp addbo1
001C3D  3               addbo2:
001C3D  3  18           	clc
001C3E  3               addbo1:
001C3E  3  9D 00 1B     	sta score,x		; write new score.
001C41  3  CA           	dex			; next digit.
001C42  3  10 DE        	bpl addbo0		; repeat for all 6 digits.
001C44  3  60           	rts
001C45  3               
001C45  3               ;------------------------------------
001C45  3               ; Swap score and bonus.
001C45  3               ;------------------------------------
001C45  3               
001C45  3               swpsb:
001C45  3  A2 05        	ldx #5			; digits to add.
001C47  3               swpsb0:
001C47  3  BD 00 1B     	lda score,x 		; get score digits.
001C4A  3  48           	pha			; save digit
001C4B  3  BD 0C 1B     	lda bonus,x 		; get bonus digits.
001C4E  3  9D 00 1B     	sta score,x		; switch score-bonus
001C51  3  68           	pla
001C52  3  9D 0C 1B     	sta bonus,x
001C55  3  CA           	dex 			; repeat for all 6 digits.
001C56  3  10 EF        	bpl swpsb0
001C58  3  60           	rts
001C59  3               
001C59  3               ;----------------------------------------------------
001C59  3               ; Get print address.
001C59  3               ;----------------------------------------------------
001C59  3               
001C59  3               gprad:
001C59  3  98           	tya
001C5A  3  48           	pha
001C5B  3               
001C5B  3  AD 4B 11     	lda dispx 		; x coordinate.
001C5E  3  85 80        	sta scraddr
001C60  3  A9 00        	lda #0
001C62  3  85 81        	sta scraddr+1
001C64  3  06 80        	asl scraddr  	; multiply char by 8
001C66  3  26 81        	rol scraddr+1
001C68  3  06 80        	asl scraddr
001C6A  3  26 81        	rol scraddr+1
001C6C  3  06 80        	asl scraddr
001C6E  3  26 81        	rol scraddr+1
001C70  3               
001C70  3  AD 4C 11     	lda dispy		; y coordinate.
001C73  3  0A           	asl a
001C74  3  0A           	asl a
001C75  3  0A           	asl a			; multiply char by 8
001C76  3  A8           	tay
001C77  3               
001C77  3  18           	clc
001C78  3  A5 80        	lda scraddr
001C7A  3  79 13 2F     	adc SCADTB_lb,y
001C7D  3  85 80        	sta scraddr
001C7F  3  A5 81        	lda scraddr+1
001C81  3  79 13 30     	adc SCADTB_hb,y
001C84  3  85 81        	sta scraddr+1
001C86  3               
001C86  3  68           	pla
001C87  3  A8           	tay
001C88  3  60           	rts
001C89  3               
001C89  3               ;--------------------------------------------------------------
001C89  3               ; Get property buffer address of char at (dispx, dispy) in hl.
001C89  3               ; 
001C89  3               ; Output:
001C89  3               ;  buffaddr = bufaddr = MAP + dispy*32 + dispx
001C89  3               ;--------------------------------------------------------------
001C89  3               
001C89  3               pradd:
001C89  3  AD 4C 11     	lda dispy 		; y coordinate.
001C8C  3  85 86        	sta bufaddr
001C8E  3  A9 00        	lda #0
001C90  3  85 87        	sta bufaddr+1
001C92  3  06 86        	asl bufaddr  		; multiply char by 32
001C94  3  26 87        	rol bufaddr+1
001C96  3  06 86        	asl bufaddr
001C98  3  26 87        	rol bufaddr+1
001C9A  3  06 86        	asl bufaddr
001C9C  3  26 87        	rol bufaddr+1
001C9E  3  06 86        	asl bufaddr
001CA0  3  26 87        	rol bufaddr+1
001CA2  3  06 86        	asl bufaddr
001CA4  3  26 87        	rol bufaddr+1
001CA6  3  18           	clc			; add address of MAP graphics.
001CA7  3  A5 86        	lda bufaddr
001CA9  3  6D 4B 11     	adc dispx
001CAC  3  69 13        	adc #<MAP
001CAE  3  85 86        	sta bufaddr
001CB0  3  A5 87        	lda bufaddr+1
001CB2  3  69 2C        	adc #>MAP
001CB4  3  85 87        	sta bufaddr+1
001CB6  3  60           	rts
001CB7  3               
001CB7  3               ;----------------------------------------------------
001CB7  3               ; Display character in A at dispx,dispy.
001CB7  3               ;
001CB7  3               ; Input:
001CB7  3               ;  A 	   = character to print
001CB7  3               ;----------------------------------------------------
001CB7  3               
001CB7  3               pchar:
001CB7  3  85 82        	sta fntaddr
001CB9  3  A9 00        	lda #0
001CBB  3  85 83        	sta fntaddr+1
001CBD  3  06 82        	asl fntaddr  		; multiply char by 8.
001CBF  3  26 83        	rol fntaddr+1
001CC1  3  06 82        	asl fntaddr
001CC3  3  26 83        	rol fntaddr+1
001CC5  3  06 82        	asl fntaddr
001CC7  3  26 83        	rol fntaddr+1
001CC9  3               
001CC9  3  A5 82        	lda fntaddr
001CCB  3  18           	clc
001CCC  3  6D 5D 32     	adc FontPtr
001CCF  3  85 82        	sta fntaddr		; that's the low byte.
001CD1  3  A5 83        	lda fntaddr+1
001CD3  3  6D 5E 32     	adc FontPtr+1
001CD6  3  85 83        	sta fntaddr+1		; add displacement.
001CD8  3               pchark:
001CD8  3  20 59 1C     	jsr gprad		; get screen address.
001CDB  3  A2 07        	ldx #7			; lines to write.
001CDD  3               pchar0:
001CDD  3  A0 00        	ldy #0
001CDF  3  B1 82        	lda (fntaddr),y 	; get image byte.
001CE1  3  BC F2 1C     	ldy scrtab,x		; Get rowoffset
001CE4  3               
001CE4  3  49 00        	eor #TxtInvert		; Invert
001CE6  3               
001CE6  3  91 80        	sta (scraddr),y 	; copy to screen.
001CE8  3  E6 82        	inc fntaddr		; next image byte.
001CEA  3  D0 02        	bne :+
001CEC  3  E6 83        	inc fntaddr+1
001CEE  3               :
001CEE  3  CA           	dex			; next screen row down.
001CEF  3  10 EC        	bpl pchar0		; repeat.
001CF1  3  60           	rts
001CF2  3               
001CF2  3  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
001CF6  3  03 02 01 00  
001CFA  3               ;scrtab:	.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
001CFA  3               
001CFA  3               ;----------------------------------------------
001CFA  3               ; Print attributes, properties and pixels.
001CFA  3               ;
001CFA  3               ; Input:
001CFA  3               ;  A	= tile number
001CFA  3               ;----------------------------------------------
001CFA  3               
001CFA  3               pattr:
001CFA  3  85 63        	sta z80_b		; store cell in b register for now.
001CFC  3  AA           	tax
001CFD  3  BD A8 36     	lda bprop,x 		; block properties.
001D00  3  85 62        	sta z80_c
001D02  3  20 89 1C     	jsr pradd 		; get property buffer address.
001D05  3  A5 62        	lda z80_c
001D07  3  A0 00        	ldy #0
001D09  3  91 86        	sta (bufaddr),y 	; write property.
001D0B  3  A5 63        	lda z80_b 		; restore cell.
001D0D  3               
001D0D  3               ; Print attributes, no properties.
001D0D  3               
001D0D  3               panp:
001D0D  3  85 64        	sta z80_e		; displacement in e.
001D0F  3  A9 00        	lda #0
001D11  3  85 65        	sta z80_d		; no high byte.
001D13  3  06 64        	asl z80_e  		; multiply char by 8.
001D15  3  26 65        	rol z80_d
001D17  3  06 64        	asl z80_e
001D19  3  26 65        	rol z80_d
001D1B  3  06 64        	asl z80_e
001D1D  3  26 65        	rol z80_d
001D1F  3  18           	clc
001D20  3  A5 64        	lda z80_e
001D22  3  69 98        	adc #<chgfx 		; address of graphics.
001D24  3  85 84        	sta tileaddr
001D26  3  A5 65        	lda z80_d
001D28  3  69 36        	adc #>chgfx
001D2A  3  85 85        	sta tileaddr+1
001D2C  3  20 59 1C     	jsr gprad 		; get screen address.
001D2F  3  A2 07        	ldx #7			; number of pixel rows to write.
001D31  3               panp0:
001D31  3  A0 00        	ldy #0
001D33  3  B1 84        	lda (tileaddr),y 	; get image byte.
001D35  3  49 00        	eor #TxtInvert		; Invert
001D37  3  BC F2 1C     	ldy scrtab,x
001D3A  3  91 80        	sta (scraddr),y 	; copy to screen.
001D3C  3  E6 84        	inc tileaddr 		; next image byte.
001D3E  3  D0 02        	bne :+
001D40  3  E6 85        	inc tileaddr+1
001D42  3               :
001D42  3  CA           	dex	 		; repeat for 8 pixel rows.
001D43  3  10 EC        	bpl panp0
001D45  3  EE 4B 11     	inc dispx 		; move along one.
001D48  3  EE 40 11     	inc charx
001D4B  3  60           	rts
001D4C  3               
001D4C  3               ;----------------------------------------------
001D4C  3               ; Print character pixels, no more.
001D4C  3               ;
001D4C  3               ; Input:
001D4C  3               ;  A	= character to print
001D4C  3               ;----------------------------------------------
001D4C  3               
001D4C  3               pchr:
001D4C  3  20 B7 1C     	jsr pchar 		; show character in accumulator.
001D4F  3  EE 4B 11     	inc dispx		; move along one.
001D52  3  60           	rts
001D53  3               
001D53  3               ;----------------------------------------------------
001D53  3               ; Shifter sprite routine for objects.
001D53  3               ;----------------------------------------------------
001D53  3               
001D53  3               sprit7:
001D53  3  A5 63        	lda z80_b
001D55  3  F0 0F        	beq sprit0
001D57  3  85 61        	sta z80_a
001D59  3               sprit3:
001D59  3  4E E4 1D     	lsr spr			; shift into position.
001D5C  3  6E E5 1D     	ror spr+1
001D5F  3  6E E6 1D     	ror spr+2
001D62  3  C6 61        	dec z80_a		; one less iteration.
001D64  3  D0 F3        	bne sprit3
001D66  3               sprit0:
001D66  3  60           	rts 			; now apply to screen.
001D67  3               
001D67  3               ;----------------------------------------------------
001D67  3               ; Draw sprite
001D67  3               ;----------------------------------------------------
001D67  3               
001D67  3               sprite:
001D67  3  8E E7 1D     	stx xtmp		; Save X-reg
001D6A  3  20 29 25     	jsr scadd 		; get screen address in scraddr.
001D6D  3               
001D6D  3  AD 4B 11     	lda dispx 		; x position.
001D70  3  29 07        	and #7 			; position straddling cells.
001D72  3  85 63        	sta z80_b		; store in b register.
001D74  3               
001D74  3  A5 66        	lda z80_l		; store sprite graphic address.
001D76  3  8D 89 1D     	sta sprit1+1
001D79  3  8D 90 1D     	sta sprit2+1
001D7C  3  A5 67        	lda z80_h
001D7E  3  8D 8A 1D     	sta sprit1+2
001D81  3  8D 91 1D     	sta sprit2+2
001D84  3               
001D84  3  A2 00        	ldx #0			; pixel height.
001D86  3  A0 00        	ldy #0
001D88  3               sprit1:
001D88  3  BD 96 39     	lda objdta,x		; fetch first byte.
001D8B  3  8D E4 1D     	sta spr
001D8E  3  E8           	inx
001D8F  3               sprit2:
001D8F  3  BD 96 39     	lda objdta,x
001D92  3  8D E5 1D     	sta spr+1
001D95  3               
001D95  3  A9 00        	lda #0
001D97  3  8D E6 1D     	sta spr+2
001D9A  3  20 53 1D     	jsr sprit7		; shift sprite
001D9D  3               
001D9D  3  AD E4 1D     	lda spr			; fetch graphic.
001DA0  3  A0 00        	ldy #0			; _BEEB
001DA2  3  51 80        	eor (scraddr),y		; merge with screen image.
001DA4  3  91 80        	sta (scraddr),y		; write to screen.
001DA6  3               
001DA6  3  AD E5 1D     	lda spr+1		; fetch graphic.
001DA9  3  A0 08        	ldy #8			; _BEEB
001DAB  3  51 80        	eor (scraddr),y		; merge with screen image.
001DAD  3  91 80        	sta (scraddr),y		; write to screen.
001DAF  3               
001DAF  3  AD E6 1D     	lda spr+2		; fetch graphic.
001DB2  3  A0 10        	ldy #16			; _BEEB
001DB4  3  51 80        	eor (scraddr),y		; merge with screen image.
001DB6  3  91 80        	sta (scraddr),y		; write to screen.
001DB8  3               
001DB8  3  20 CB 25     	jsr nline
001DBB  3               
001DBB  3  E8           	inx			; next source byte.
001DBC  3  E0 20        	cpx #32
001DBE  3  D0 C8        	bne sprit1		; repeat
001DC0  3               
001DC0  3  AE E7 1D     	ldx xtmp		; retreive X-reg
001DC3  3  60           	rts
001DC4  3               
001DC4  3               spritetab:
001DC4  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
001DC8  3  40 41 60 61  
001DCC  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
001DD0  3  C0 C1 E0 E1  
001DD4  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
001DD8  3  40 41 60 61  
001DDC  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
001DE0  3  C0 C1 E0 E1  
001DE4  3               
001DE4  3  00 00 00     spr:	.byte 0,0,0
001DE7  3               
001DE7  3  00           xtmp:	.byte 0
001DE8  3               
001DE8  3               ;-----------------------------------------------------------
001DE8  3               ; Get room address.
001DE8  3               ;-----------------------------------------------------------
001DE8  3               
001DE8  3               groom:
001DE8  3  AE 26 11     	ldx scno 		; screen number.
001DEB  3  A0 00        	ldy #0
001DED  3               groomx:
001DED  3  A9 30        	lda #<scdat 		; pointer to screens.
001DEF  3  85 66        	sta z80_l
001DF1  3  A9 38        	lda #>scdat
001DF3  3  85 67        	sta z80_h
001DF5  3               groom1:
001DF5  3  E0 00        	cpx #0			; is it the first one?
001DF7  3  F0 15        	beq groom0 		; no more screens to skip.
001DF9  3               
001DF9  3  18           	clc
001DFA  3  A5 66        	lda z80_l
001DFC  3  79 30 38     	adc scdat,y 		; low byte of screen size.
001DFF  3  85 66        	sta z80_l
001E01  3  C8           	iny			; point to high byte.
001E02  3  A5 67        	lda z80_h
001E04  3  79 30 38     	adc scdat,y 		; high byte of screen size.
001E07  3  85 67        	sta z80_h
001E09  3  C8           	iny			; next address.
001E0A  3               
001E0A  3  CA           	dex 			; one less iteration.
001E0B  3  4C F5 1D     	jmp groom1 		; loop until we reach the end.
001E0E  3               groom0:
001E0E  3  AD 72 39     	lda numsc 		; add displacement.
001E11  3  0A           	asl a
001E12  3  18           	clc			; add double displacement to address.
001E13  3  65 66        	adc z80_l
001E15  3  85 66        	sta z80_l
001E17  3  A5 67        	lda z80_h
001E19  3  69 00        	adc #0
001E1B  3  85 67        	sta z80_h
001E1D  3  60           	rts
001E1E  3               
001E1E  3               ;-----------------------------------------------------------
001E1E  3               ; Draw present room.
001E1E  3               ;-----------------------------------------------------------
001E1E  3               
001E1E  3               droom:
001E1E  3  AD 1D 11     	lda wintop 		; window top.
001E21  3  8D 4C 11     	sta dispy		; set cursor y position.
001E24  3               droom2:
001E24  3  20 E8 1D     	jsr groom 		; get address of current room.
001E27  3  A9 00        	lda #0	 		; zero in accumulator.
001E29  3  8D 86 1E     	sta comcnt 		; reset compression counter.
001E2C  3  AD 1F 11     	lda winhgt 		; height of window.
001E2F  3  8D 53 1E     	sta rrow		; set row counter
001E32  3               droom0:
001E32  3  AD 1E 11     	lda winlft 		; window left edge.
001E35  3  8D 4B 11     	sta dispx 		; set cursor x position.
001E38  3  AD 20 11     	lda winwid 		; width of window.
001E3B  3  8D 52 1E     	sta rcol		; set column counter
001E3E  3               droom1:
001E3E  3  20 54 1E     	jsr flbyt 		; decompress next byte on the fly.
001E41  3  20 FA 1C     	jsr pattr 		; show attributes and block.
001E44  3  CE 52 1E     	dec rcol		; one less column.
001E47  3  D0 F5        	bne droom1 		; repeat for entire line.
001E49  3  EE 4C 11     	inc dispy		; move down one line.
001E4C  3  CE 53 1E     	dec rrow 		; one less row.
001E4F  3  D0 E1        	bne droom0 		; repeat for all rows.
001E51  3  60           	rts
001E52  3               
001E52  3  00           rcol:	.byte 0
001E53  3  00           rrow:	.byte 0
001E54  3               
001E54  3               ;----------------------------------------------
001E54  3               ; Decompress bytes on-the-fly.
001E54  3               ;----------------------------------------------
001E54  3               
001E54  3               flbyt:
001E54  3  AD 86 1E     	lda comcnt 		; compression counter.
001E57  3  D0 22        	bne flbyt1		; any more to decompress?  yes.
001E59  3               
001E59  3  A0 00        	ldy #0
001E5B  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
001E5D  3  E6 66        	inc z80_l 		; point to next cell.
001E5F  3  D0 02        	bne :+
001E61  3  E6 67        	inc z80_h
001E63  3               :
001E63  3  C9 FF        	cmp #255 		; is this byte a control code?
001E65  3  F0 01        	beq :+
001E67  3  60           	rts 			; no, this byte is uncompressed.
001E68  3               :
001E68  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
001E6A  3  8D 85 1E     	sta combyt 		; set up the type.
001E6D  3  E6 66        	inc z80_l 		; point to quantity.
001E6F  3  D0 02        	bne :+
001E71  3  E6 67        	inc z80_h
001E73  3               :
001E73  3  B1 66        	lda (z80_hl),y 		; get quantity.
001E75  3  E6 66        	inc z80_l 		; point to next byte.
001E77  3  D0 02        	bne :+
001E79  3  E6 67        	inc z80_h
001E7B  3               :
001E7B  3               flbyt1:
001E7B  3  8D 86 1E     	sta comcnt 		; store new quantity.
001E7E  3  CE 86 1E     	dec comcnt		; one less.
001E81  3  AD 85 1E     	lda combyt 		; byte to expand.
001E84  3  60           	rts
001E85  3               
001E85  3  00           combyt:	.byte 0			; byte type compressed.
001E86  3  00           comcnt:	.byte 0			; compression counter.
001E87  3               
001E87  3               ;------------------------------------------
001E87  3               ; Ladder down check.
001E87  3               ;
001E87  3               ; Input:
001E87  3               ;  IX = sprite pointer
001E87  3               ;------------------------------------------
001E87  3               
001E87  3               laddd:
001E87  3  A0 09        	ldy #9
001E89  3  B1 68        	lda (z80_ix),y		; x coordinate.
001E8B  3  8D 4B 11     	sta dispx
001E8E  3               
001E8E  3  A0 08        	ldy #8
001E90  3  B1 68        	lda (z80_ix),y		; y coordinate.
001E92  3  29 FE        	and #254		; make it even.
001E94  3  91 68        	sta (z80_ix),y 		; reset it.
001E96  3               numsp5:
001E96  3  18           	clc 			; look down 16 pixels.
001E97  3  69 10        	adc #16
001E99  3  8D 4C 11     	sta dispy		; coords in dispx,dispy.
001E9C  3  4C B4 1E     	jmp laddv
001E9F  3               
001E9F  3               ;------------------------------------------
001E9F  3               ; Ladder up check.
001E9F  3               ;
001E9F  3               ; Input:
001E9F  3               ;  IX = sprite pointer
001E9F  3               ;
001E9F  3               ; Output:
001E9F  3               ;  A  = 0 is ok, A <>0 is not ok
001E9F  3               ;------------------------------------------
001E9F  3               
001E9F  3               laddu:
001E9F  3  A0 09        	ldy #9
001EA1  3  B1 68        	lda (z80_ix),y		; x coordinate.
001EA3  3  8D 4B 11     	sta dispx
001EA6  3               
001EA6  3  A0 08        	ldy #8
001EA8  3  B1 68        	lda (z80_ix),y		; y coordinate.
001EAA  3  29 FE        	and #254 		; make it even.
001EAC  3  91 68        	sta (z80_ix),y		; reset it.
001EAE  3               numsp6:
001EAE  3  18           	clc 			; look 2 pixels above feet.
001EAF  3  69 0E        	adc #14
001EB1  3  8D 4C 11     	sta dispy		; coords in dispx,dispy.
001EB4  3               laddv:
001EB4  3  20 9B 20     	jsr tstbl 		; get map address.
001EB7  3  20 CE 1F     	jsr ldchk 		; standard ladder check.
001EBA  3  F0 01        	beq :+
001EBC  3  60           	rts 			; no way through.
001EBD  3               :
001EBD  3  E6 86        	inc bufaddr 		; look right one cell.
001EBF  3  D0 02        	bne :+
001EC1  3  E6 87        	inc bufaddr+1
001EC3  3               :
001EC3  3  20 CE 1F     	jsr ldchk 		; do the check.
001EC6  3  F0 01        	beq :+
001EC8  3  60           	rts 			; impassable.
001EC9  3               :
001EC9  3  AD 4B 11     	lda dispx 		; y coordinate.
001ECC  3  29 07        	and #7 			; position straddling block cells.
001ECE  3  D0 01        	bne :+
001ED0  3  60           	rts 			; no more checks needed.
001ED1  3               :
001ED1  3  E6 86        	inc bufaddr 		; look to third cell.
001ED3  3  D0 02        	bne :+
001ED5  3  E6 87        	inc bufaddr+1
001ED7  3               :
001ED7  3  20 CE 1F     	jsr ldchk 		; do the check.
001EDA  3  60           	rts  			; return with zero flag set accordingly.
001EDB  3               
001EDB  3               ;---------------------------------------------------------
001EDB  3               ; Can go up check.
001EDB  3               ;
001EDB  3               ; Input:
001EDB  3               ;  IX = sprite pointer
001EDB  3               ;
001EDB  3               ; Output:
001EDB  3               ;  A  = 0 is ok, A <>0 is not ok
001EDB  3               ;---------------------------------------------------------
001EDB  3               
001EDB  3               cangu:
001EDB  3  A0 09        	ldy #9
001EDD  3  B1 68        	lda (z80_ix),y		; x coordinate.
001EDF  3  8D 4B 11     	sta dispx
001EE2  3  A0 08        	ldy #8
001EE4  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001EE6  3  38           	sec
001EE7  3  E9 02        	sbc #2
001EE9  3  8D 4C 11     	sta dispy		; coords in dispx,dispy.
001EEC  3  20 9B 20     	jsr tstbl 		; get map address.
001EEF  3  20 98 1F     	jsr lrchk 		; standard left/right check.
001EF2  3  F0 01        	beq :+
001EF4  3  60           	rts			; no way through.
001EF5  3               :
001EF5  3  E6 86        	inc bufaddr		; look right one cell.
001EF7  3  D0 02        	bne :+
001EF9  3  E6 87        	inc bufaddr+1
001EFB  3               :
001EFB  3  20 98 1F     	jsr lrchk 		; do the check.
001EFE  3  F0 01        	beq :+
001F00  3  60           	rts			; impassable.
001F01  3               :
001F01  3  AD 4B 11     	lda dispx		; x coordinate.
001F04  3  29 07        	and #7			; position straddling block cells.
001F06  3  D0 01        	bne :+
001F08  3  60           	rts			; no more checks needed.
001F09  3               :
001F09  3  E6 86        	inc bufaddr		; look to third cell.
001F0B  3  D0 02        	bne :+
001F0D  3  E6 87        	inc bufaddr+1
001F0F  3               :
001F0F  3  20 98 1F     	jsr lrchk		; do the check.
001F12  3  60           	rts 			; return with zero flag set accordingly.
001F13  3               
001F13  3               ;---------------------------------------------------------
001F13  3               ; Can go down check.
001F13  3               ;
001F13  3               ; Input:
001F13  3               ;  IX = sprite pointer
001F13  3               ;
001F13  3               ; Output:
001F13  3               ;  A  = 0 is ok, A <>0 is not ok
001F13  3               ;---------------------------------------------------------
001F13  3               
001F13  3               cangd:
001F13  3  A0 09        	ldy #9
001F15  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001F17  3  8D 4B 11     	sta dispx
001F1A  3  A0 08        	ldy #8
001F1C  3  B1 68        	lda (z80_ix),y		; y coordinate.
001F1E  3               numsp3:
001F1E  3  18           	clc
001F1F  3  69 10        	adc #16 		; look down 16 pixels.
001F21  3  8D 4C 11     	sta dispy		; coords in dispx,dispy.
001F24  3  20 9B 20     	jsr tstbl 		; get map address.
001F27  3  20 AD 1F     	jsr plchk 		; block, platform check.
001F2A  3  F0 01        	beq :+
001F2C  3  60           	rts			; no way through.
001F2D  3               :
001F2D  3  E6 86        	inc bufaddr		; look right one cell.
001F2F  3  D0 02        	bne :+
001F31  3  E6 87        	inc bufaddr+1
001F33  3               :
001F33  3  20 AD 1F     	jsr plchk		; block, platform check.
001F36  3  F0 01        	beq :+
001F38  3  60           	rts			; impassable.
001F39  3               :
001F39  3  AD 4B 11     	lda dispx		; x coordinate.
001F3C  3  29 07        	and #7			; position straddling block cells.
001F3E  3  D0 01        	bne :+
001F40  3  60           	rts			; no more checks needed.
001F41  3               :
001F41  3  E6 86        	inc bufaddr		; look to third cell.
001F43  3  D0 02        	bne :+
001F45  3  E6 87        	inc bufaddr+1
001F47  3               :
001F47  3  20 AD 1F     	jsr plchk		; block, platform check.
001F4A  3  60           	rts			; return with zero flag set accordingly.
001F4B  3               
001F4B  3               ;---------------------------------------------------------
001F4B  3               ; Can go left check.
001F4B  3               ;
001F4B  3               ; Input:
001F4B  3               ;  IX = sprite pointer
001F4B  3               ;
001F4B  3               ; Output:
001F4B  3               ;  A  = 0 is ok, A <>0 is not ok
001F4B  3               ;---------------------------------------------------------
001F4B  3               
001F4B  3               cangl:
001F4B  3  A0 08        	ldy #8
001F4D  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001F4F  3  8D 4C 11     	sta dispy
001F52  3  A0 09        	ldy #9
001F54  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001F56  3  38           	sec
001F57  3  E9 02        	sbc #2			; look left 2 pixels.
001F59  3  8D 4B 11     	sta dispx		; coords in dispx,dispy.
001F5C  3  4C 70 1F     	jmp cangh		; test if we can go there.
001F5F  3               
001F5F  3               ;---------------------------------------------------------
001F5F  3               ; Can go right check.
001F5F  3               ;
001F5F  3               ; Input:
001F5F  3               ;  IX = sprite pointer
001F5F  3               ;
001F5F  3               ; Output:
001F5F  3               ;  A  = 0 is ok, A <>0 is not ok
001F5F  3               ;---------------------------------------------------------
001F5F  3               
001F5F  3               cangr:
001F5F  3  A0 08        	ldy #8
001F61  3  B1 68        	lda (z80_ix),y		; y coordinate.
001F63  3  8D 4C 11     	sta dispy
001F66  3  A0 09        	ldy #9
001F68  3  B1 68        	lda (z80_ix),y		; x coordinate.
001F6A  3  18           	clc
001F6B  3  69 10        	adc #16			; look right 16 pixels.
001F6D  3  8D 4B 11     	sta dispx		; coords in dispx,dispy.
001F70  3               cangh:
001F70  3               cangh2:
001F70  3  A9 03        	lda #3			; default rows to write.
001F72  3  85 63        	sta z80_b
001F74  3  AD 4C 11     	lda dispy		; y position.
001F77  3  29 07        	and #7			; does x straddle cells?
001F79  3  D0 02        	bne cangh0		; yes, loop counter is good.
001F7B  3  C6 63        	dec z80_b		; one less row to write.
001F7D  3               cangh0:
001F7D  3  20 9B 20     	jsr tstbl		; get map address.
001F80  3               cangh1:
001F80  3  20 98 1F     	jsr lrchk		; standard left/right check.
001F83  3  F0 01        	beq :+
001F85  3  60           	rts			; no way through.
001F86  3               :
001F86  3  48           	pha
001F87  3  18           	clc
001F88  3  A5 86        	lda bufaddr
001F8A  3  69 20        	adc #32			; look down.
001F8C  3  85 86        	sta bufaddr
001F8E  3  90 02        	bcc :+
001F90  3  E6 87        	inc bufaddr+1
001F92  3               :
001F92  3  68           	pla
001F93  3               
001F93  3  C6 63        	dec z80_b
001F95  3  D0 E9        	bne cangh1
001F97  3  60           	rts
001F98  3               
001F98  3               ;-------------------------------------
001F98  3               ; Check left/right movement is okay.
001F98  3               ;
001F98  3               ; Input:
001F98  3               ;  bufaddr = MAP + x/8 + y/8*32
001F98  3               ;
001F98  3               ; Output:
001F98  3               ;  A  = 0 is ok, A <>0 is not ok
001F98  3               ;-------------------------------------
001F98  3               
001F98  3               lrchk:
001F98  3  A0 00        	ldy #0
001F9A  3  B1 86        	lda (bufaddr),y		; fetch map cell.
001F9C  3  C9 02        	cmp #WALL 		; is it passable?
001F9E  3  F0 0A        	beq lrchkx		; no.
001FA0  3               
001FA0  3  C9 04        	cmp #FODDER		; fodder has to be dug.
001FA2  3  F0 06        	beq lrchkx		; not passable.
001FA4  3  A9 00        	lda #0
001FA6  3  60           	rts
001FA7  3               
001FA7  3               ;--------------------------------------------------------------
001FA7  3               ; Called by mmenu
001FA7  3               ;--------------------------------------------------------------
001FA7  3               
001FA7  3               always:
001FA7  3  A9 FF        	lda #255		; report it as okay.
001FA9  3  60           	rts
001FAA  3               
001FAA  3               lrchkx:
001FAA  3  A9 01        	lda #1 			; reset all bits.
001FAC  3  60           	rts
001FAD  3               
001FAD  3               
001FAD  3               ;--------------------------------------------------------------
001FAD  3               ; Check platform or solid item is not in way.
001FAD  3               ;
001FAD  3               ; Input:
001FAD  3               ;  bufaddr = MAP + x/8 + y/8*32
001FAD  3               ;
001FAD  3               ; Output:
001FAD  3               ;  A  = 0 is ok, A <>0 is not ok
001FAD  3               ;--------------------------------------------------------------
001FAD  3               
001FAD  3               plchk:
001FAD  3  A0 00        	ldy #0
001FAF  3  B1 86        	lda (bufaddr),y 	; fetch map cell.
001FB1  3  C9 02        	cmp #WALL 		; is it passable?
001FB3  3  F0 F5        	beq lrchkx		; no.
001FB5  3               
001FB5  3  C9 04        	cmp #FODDER		; fodder has to be dug.
001FB7  3  F0 F1        	beq lrchkx		; not passable.
001FB9  3               
001FB9  3  C9 01        	cmp #PLATFM		; platform is solid.
001FBB  3  F0 07        	beq plchkx		; not passable.
001FBD  3               
001FBD  3  C9 03        	cmp #LADDER		; is it a ladder?
001FBF  3  F0 E9        	beq lrchkx		; on ladder, deny movement.
001FC1  3               plchk0:
001FC1  3  A9 00        	lda #0			; report as ok
001FC3  3  60           	rts
001FC4  3               plchkx:
001FC4  3  AD 4C 11     	lda dispy		; x coordinate.
001FC7  3  29 07        	and #7			; position straddling blocks.
001FC9  3  F0 DF        	beq lrchkx		; on platform, deny movement.
001FCB  3  4C C1 1F     	jmp plchk0
001FCE  3               
001FCE  3               ;--------------------------------------------------------------
001FCE  3               ; Check ladder is available.
001FCE  3               ;
001FCE  3               ; Input:
001FCE  3               ;  bufaddr = MAP + x/8 + y/8*32
001FCE  3               ;
001FCE  3               ; Output:
001FCE  3               ;  A  = 0 is ok, A <>0 is not ok
001FCE  3               ;--------------------------------------------------------------
001FCE  3               
001FCE  3               ldchk:
001FCE  3  A0 00        	ldy #0
001FD0  3  B1 86        	lda (bufaddr),y 	; fetch cell.
001FD2  3  C9 03        	cmp #LADDER 		; is it a ladder?
001FD4  3  F0 03        	beq ldchk1
001FD6  3  A9 01        	lda #1
001FD8  3  60           	rts  			; return with zero flag set accordingly.
001FD9  3               ldchk1:
001FD9  3  A9 00        	lda #0
001FDB  3  60           	rts
001FDC  3               
001FDC  3               ;--------------------------------------------------------------
001FDC  3               ; Touched deadly block check.
001FDC  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
001FDC  3               ;
001FDC  3               ; Input:
001FDC  3               ;  IX = sprite address
001FDC  3               ;
001FDC  3               ; Output:
001FDC  3               ;  A  = 0 is ok, A=5 is not ok
001FDC  3               ;--------------------------------------------------------------
001FDC  3               
001FDC  3               tded:
001FDC  3  A0 08        	ldy #8
001FDE  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001FE0  3  8D 4C 11     	sta dispy
001FE3  3  C8           	iny
001FE4  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001FE6  3  8D 4B 11     	sta dispx		; coords in dispx,dispy.
001FE9  3  20 9B 20     	jsr tstbl		; get map address.
001FEC  3  48           	pha
001FED  3  A9 1F        	lda #31			; default distance to next line down.
001FEF  3  85 64        	sta z80_e
001FF1  3  68           	pla
001FF2  3  C5 63        	cmp z80_b		; is this the required block?
001FF4  3  D0 01        	bne :+
001FF6  3  60           	rts			; yes.
001FF7  3               :
001FF7  3  E6 86        	inc bufaddr 		; next cell.
001FF9  3  D0 02        	bne :+
001FFB  3  E6 87        	inc bufaddr+1
001FFD  3               :
001FFD  3  A0 00        	ldy #0
001FFF  3  B1 86        	lda (bufaddr),y		; fetch type.
002001  3  C5 63        	cmp z80_b 		; is this deadly/custom?
002003  3  D0 01        	bne :+
002005  3  60           	rts			; yes.
002006  3               :
002006  3  AD 4B 11     	lda dispx		; horizontal position.
002009  3  85 62        	sta z80_c 		; store column in c register.
00200B  3  29 07        	and #7			; is it straddling cells?
00200D  3  D0 03        	bne :+
00200F  3  4C 23 20     	jmp tded0		; no.
002012  3               :
002012  3  E6 86        	inc bufaddr 		; last cell.
002014  3  D0 02        	bne :+
002016  3  E6 87        	inc bufaddr+1
002018  3               :
002018  3  A0 00        	ldy #0
00201A  3  B1 86        	lda (bufaddr),y 	; fetch type.
00201C  3  C5 63        	cmp z80_b		; is this the block?
00201E  3  D0 01        	bne :+
002020  3  60           	rts			; yes.
002021  3               :
002021  3  C6 64        	dec z80_e		; one less cell to next row down.
002023  3               tded0:
002023  3  18           	clc 			; point to next row.
002024  3  A5 86        	lda bufaddr
002026  3  65 64        	adc z80_e
002028  3  85 86        	sta bufaddr
00202A  3  90 02        	bcc :+
00202C  3  E6 87        	inc bufaddr+1
00202E  3               :
00202E  3  A0 00        	ldy #0
002030  3  B1 86        	lda (bufaddr),y		; fetch left cell block.
002032  3  C5 63        	cmp z80_b		; is this fatal?
002034  3  D0 01        	bne :+
002036  3  60           	rts			; yes.
002037  3               :
002037  3  E6 86        	inc bufaddr 		; next cell.
002039  3  D0 02        	bne :+
00203B  3  E6 87        	inc bufaddr+1
00203D  3               :
00203D  3  A0 00        	ldy #0
00203F  3  B1 86        	lda (bufaddr),y 	; fetch type.
002041  3  C5 63        	cmp z80_b		; is this fatal?
002043  3  D0 01        	bne :+
002045  3  60           	rts			; yes.
002046  3               :
002046  3  A5 62        	lda z80_c		; horizontal position.
002048  3  29 07        	and #7			; is it straddling cells?
00204A  3  D0 03        	bne :+
00204C  3  4C 5E 20     	jmp tded1 		; no.
00204F  3               :
00204F  3  E6 86        	inc bufaddr		; last cell.
002051  3  D0 02        	bne :+
002053  3  E6 87        	inc bufaddr+1
002055  3               :
002055  3  A0 00        	ldy #0
002057  3  B1 86        	lda (bufaddr),y		; fetch type.
002059  3  C5 63        	cmp z80_b		; is this fatal?
00205B  3  D0 01        	bne :+
00205D  3  60           	rts			; yes.
00205E  3               :
00205E  3               tded1:
00205E  3  AD 4C 11     	lda dispy		; vertical position.
002061  3  29 07        	and #7 			; is it straddling cells?
002063  3  D0 01        	bne :+
002065  3  60           	rts			; no, job done.
002066  3               :
002066  3  18           	clc			; point to next row.
002067  3  A5 86        	lda bufaddr
002069  3  65 64        	adc z80_e
00206B  3  85 86        	sta bufaddr
00206D  3  90 02        	bcc :+
00206F  3  E6 87        	inc bufaddr+1
002071  3               :
002071  3  A0 00        	ldy #0
002073  3  B1 86        	lda (bufaddr),y 	; fetch left cell block.
002075  3  C5 63        	cmp z80_b		; is this fatal?
002077  3  D0 01        	bne :+
002079  3  60           	rts			; yes.
00207A  3               :
00207A  3  E6 86        	inc bufaddr		; next cell.
00207C  3  D0 02        	bne :+
00207E  3  E6 87        	inc bufaddr+1
002080  3               :
002080  3  A0 00        	ldy #0
002082  3  B1 86        	lda (bufaddr),y 	; fetch type.
002084  3  C5 63        	cmp z80_b		; is this fatal?
002086  3  D0 01        	bne :+
002088  3  60           	rts			; yes.
002089  3               :
002089  3  A5 62        	lda z80_c		; horizontal position.
00208B  3  29 07        	and #7			; is it straddling cells?
00208D  3  D0 01        	bne :+
00208F  3  60           	rts			; no.
002090  3               :
002090  3  E6 86        	inc bufaddr		; last cell.
002092  3  D0 02        	bne :+
002094  3  E6 87        	inc bufaddr+1
002096  3               :
002096  3  A0 00        	ldy #0
002098  3  B1 86        	lda (bufaddr),y		; fetch final type.
00209A  3  60           	rts 			; return with final type in accumulator.
00209B  3               
00209B  3               ;---------------------------------------------------
00209B  3               ; Fetch block type at (dispx, dispy).
00209B  3               ;
00209B  3               ; Output:
00209B  3               ;  A = block type
00209B  3               ;---------------------------------------------------
00209B  3               
00209B  3               tstbl:
00209B  3  AD 4C 11     	lda dispy 		; fetch y coord.
00209E  3  4A           	lsr a			; bufaddr = y/8
00209F  3  4A           	lsr a
0020A0  3  4A           	lsr a
0020A1  3  85 86        	sta bufaddr
0020A3  3  A9 00        	lda #0
0020A5  3  85 87        	sta bufaddr+1
0020A7  3               
0020A7  3  06 86        	asl bufaddr  		; bufaddr = y/8 * 32
0020A9  3  26 87        	rol bufaddr+1
0020AB  3  06 86        	asl bufaddr
0020AD  3  26 87        	rol bufaddr+1
0020AF  3  06 86        	asl bufaddr
0020B1  3  26 87        	rol bufaddr+1
0020B3  3  06 86        	asl bufaddr
0020B5  3  26 87        	rol bufaddr+1
0020B7  3  06 86        	asl bufaddr
0020B9  3  26 87        	rol bufaddr+1
0020BB  3               
0020BB  3  AD 4B 11     	lda dispx		; x/8
0020BE  3  4A           	lsr a
0020BF  3  4A           	lsr a
0020C0  3  4A           	lsr a
0020C1  3               
0020C1  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
0020C2  3  65 86        	adc bufaddr
0020C4  3  69 13        	adc #<MAP
0020C6  3  85 86        	sta bufaddr
0020C8  3  A5 87        	lda bufaddr+1
0020CA  3  69 2C        	adc #>MAP
0020CC  3  85 87        	sta bufaddr+1
0020CE  3               
0020CE  3  A0 00        	ldy #0
0020D0  3  B1 86        	lda (bufaddr),y 	; fetch byte there.
0020D2  3  60           	rts
0020D3  3               
0020D3  3               
0020D3  3               ;-------------------------------------------------------------------
0020D3  3               ; Jump - if we can.
0020D3  3               ; Requires initial speed to be set up in accumulator prior to call.
0020D3  3               ;
0020D3  3               ; Input:
0020D3  3               ;  IX = sprite address
0020D3  3               ;-------------------------------------------------------------------
0020D3  3               
0020D3  3               jump:
0020D3  3  A0 0D        	ldy #13
0020D5  3  B1 68        	lda (z80_ix),y		; jump table low.
0020D7  3  A0 0E        	ldy #14
0020D9  3  11 68        	ora (z80_ix),y		; jump table high.
0020DB  3  F0 01        	beq :+
0020DD  3  60           	rts			; already in the air.
0020DE  3               :
0020DE  3  A9 20        	lda #>jtab
0020E0  3  A0 0E        	ldy #14
0020E2  3  91 68        	sta (z80_ix),y		; set jump high.
0020E4  3  A9 EB        	lda #<jtab		; jump table start.
0020E6  3  A0 0D        	ldy #13
0020E8  3  91 68        	sta (z80_ix),y		; set jump low.
0020EA  3  60           	rts
0020EB  3               
0020EB  3               ; Jump table.
0020EB  3               
0020EB  3               jtab:
0020EB  3  F8 FA FC     	.byte 248,250,252
0020EE  3  FE FE FF     	.byte 254,254,255
0020F1  3  FF FF 00 00  	.byte 255,255,0,0
0020F5  3  00 01 01 01  	.byte 0,1,1,1,2,2
0020F9  3  02 02        
0020FB  3  04 06 08 08  	.byte 4,6,8,8,8,99
0020FF  3  08 63        
002101  3               
002101  3               ;------------------------------------------------
002101  3               ; Random numbers code.
002101  3               ; Pseudo-random number generator, 8-bit.
002101  3               ;
002101  3               ; Output:
002101  3               ;  RND = random number
002101  3               ;------------------------------------------------
002101  3               
002101  3               random:
002101  3  AD FF 1A     	lda seed		; get last random number.
002104  3  0A           	asl a
002105  3  0A           	asl a
002106  3  18           	clc
002107  3  6D FF 1A     	adc seed
00210A  3  18           	clc
00210B  3  69 45        	adc #$45
00210D  3  8D FF 1A     	sta seed		; store new seed.
002110  3  8D 43 11     	sta varrnd		; return number in variable.
002113  3  60           	rts
002114  3               
002114  3               ;--------------------------------------------------------
002114  3               ; Keys
002114  3               ;
002114  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
002114  3               ;             ||||||||
002114  3               ;             |||||||+> Right    KEY 0  - X
002114  3               ;             ||||||+-> Left     KEY 1  - Z
002114  3               ;             |||||+--> Down     KEY 2  - .
002114  3               ;             ||||+---> Up       KEY 3  - ;
002114  3               ;             |||+----> Fire1    KEY 4  - SPC
002114  3               ;             ||+-----> Fire2    KEY 5  - Q
002114  3               ;             |+------> Fire3    KEY 6  - P
002114  3               ;             +-------> Not used
002114  3               ;
002114  3               ;                       Option1  KEY 7  - 1
002114  3               ;                       Option2  KEY 8  - 2
002114  3               ;                       Option3  KEY 9  - 3
002114  3               ;                       Option4  KEY 10 - 4
002114  3               ;--------------------------------------------------------
002114  3               
002114  3               ;              X   Z   .   ;  SPC  Q   P
002114  3  42 61 68 48  keys:   .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
002118  3  62 10 37     
00211B  3  30 31 11 12          .byte $30,$31,$11,$12                   ; menu options.
00211F  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
00211F  3               ;        .byte $21,$11,$01,$92                   ; menu options.
00211F  3               
00211F  3  42 61 68 48  jkeys:  .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
002123  3  62 10 37     
002126  3  30 31 11 12          .byte $30,$31,$11,$12                   ; menu options.
00212A  3               ;jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
00212A  3               ;        .byte $21,$11,$01,$92                   ; menu options.
00212A  3               
00212A  3               ;--------------------------------------------------------
00212A  3               ; Keyboard test routine.
00212A  3               ;
00212A  3               ; Input:
00212A  3               ;  A = key to read, high nibble=row and low nibble=col
00212A  3               ;
00212A  3               ; Output:
00212A  3               ;  carry clr = key pressed
00212A  3               ;  carry set = key not pressed
00212A  3               ;--------------------------------------------------------
00212A  3               
00212A  3               ktest:
00212A  3  85 61        	sta z80_a		; save key
00212C  3  98           	tya
00212D  3  48           	pha
00212E  3               
00212E  3               ; _BEEB keyboard read
00212E  3  A5 61        	lda z80_a
002130  3  49 80        	eor #$80		; _BEEB just look for this key
002132  3  AA           	tax
002133  3               
002133  3  A9 79        	lda #$79
002135  3  20 F4 FF     	jsr OSBYTE
002138  3               
002138  3  8A           	txa
002139  3  30 04        	bmi pressed 	; _BEEB X is negative if key is pressed
00213B  3               
00213B  3  38           	sec			; key not pressed
00213C  3  68           	pla
00213D  3  A8           	tay
00213E  3  60           	rts
00213F  3               
00213F  3               pressed:
00213F  3  18           	clc			; key pressed
002140  3  68           	pla
002141  3  A8           	tay
002142  3  60           	rts
002143  3               
002143  3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
002147  3  10 20        
002149  3               
002149  3               ;-------------------------------------------------------
002149  3               ; Joystick and keyboard reading routines.
002149  3               ;
002149  3               ; contrl = 0, Keyboard
002149  3               ;          1, JoyKeyb
002149  3               ;          2, JoyMMC
002149  3               ;-------------------------------------------------------
002149  3               
002149  3               joykey:
002149  3  AD 1A 11     	lda contrl 		; control flag.
00214C  3  C9 01        	cmp #1
00214E  3  D0 03        	bne :+
002150  3  4C 6E 21     	jmp joyjoy 		; read keyboard joystick
002153  3               :
002153  3  C9 02        	cmp #2
002155  3  D0 03        	bne :+
002157  3  4C 86 21     	jmp joysin 		; read MMC joystick.
00215A  3               :
00215A  3               ; Keyboard controls.
00215A  3               
00215A  3  A9 00        	lda #0		 	; zero reading.
00215C  3  85 64        	sta z80_e
00215E  3               
00215E  3  A0 06        	ldy #6	 		; address of last key.
002160  3               joyke0:
002160  3  B9 14 21     	lda keys,y 		; get key from table.
002163  3  20 2A 21     	jsr ktest		; being pressed?
002166  3  26 64        	rol z80_e 		; rotate into reading.
002168  3               
002168  3  88           	dey		 	; next key.
002169  3  10 F5        	bpl joyke0 		; repeat for all keys.
00216B  3  4C 7F 21     	jmp joyjo1 		; store the value.
00216E  3               
00216E  3               ; Keyboard joystick controls.
00216E  3               
00216E  3               joyjoy:
00216E  3  A9 00        	lda #0		 	; zero reading.
002170  3  85 64        	sta z80_e
002172  3               
002172  3  A0 06        	ldy #6	 		; address of last key.
002174  3               joyjo3:
002174  3  B9 1F 21     	lda jkeys,y 		; get key from table.
002177  3  20 2A 21     	jsr ktest		; being pressed?
00217A  3  26 64        	rol z80_e 		; rotate into reading.
00217C  3               
00217C  3  88           	dey		 	; next key.
00217D  3  10 F5        	bpl joyjo3 		; repeat for all keys.
00217F  3               joyjo1:
00217F  3  A5 64        	lda z80_e 		; copy e register to accumulator.
002181  3               joyjo2:
002181  3  8D 1B 11     	sta joyval		; remember value.
002184  3  60           	rts
002185  3               
002185  3               
002185  3               ; AtoMMC joystick controls.
002185  3               ; _BEEB TODO
002185  3               ; Set PORTB direction
002185  3               
002185  3               joyinit:
002185  3               .if 0
002185  3               	lda #$ff   		; Write value to latch, bits 0-7 input
002185  3               	sta DatReg
002185  3               	jsr interwritedelay
002185  3               	lda #$a1   		; Write direction in latch to PORTB
002185  3               	sta CmdReg
002185  3               
002185  3               wait_until_not_busy:
002185  3               	lda CmdReg
002185  3               	bmi wait_until_not_busy
002185  3               .endif
002185  3  60           	rts
002186  3               
002186  3               ; Get PORTB value
002186  3               
002186  3               joysin:
002186  3               .if 0
002186  3               	lda #$a2   		; Read value PORTB in latch
002186  3               	sta CmdReg
002186  3               	jsr interwritedelay
002186  3               
002186  3               	lda DatReg		; Read joystick status
002186  3               	and #$7f
002186  3               	sta joyval
002186  3               	sta $f0
002186  3               
002186  3               	lda keys+5		; check fire2
002186  3               	jsr ktest
002186  3               	bcs :+
002186  3               	lda joyval
002186  3               	and #$df
002186  3               	sta joyval
002186  3               :
002186  3               	lda keys+6		; check fire3
002186  3               	jsr ktest
002186  3               	bcs :+
002186  3               	lda joyval
002186  3               	and #$bf
002186  3               	sta joyval
002186  3               :
002186  3               	rts
002186  3               
002186  3               ; Short delay
002186  3               ; Enough to intersperse 2 writes to the FATPIC.
002186  3               
002186  3               interwritedelay:
002186  3               	lda  #8
002186  3               	sec
002186  3               loop:
002186  3               	sbc  #1
002186  3               	bne  loop
002186  3               .endif
002186  3  60           	rts
002187  3               
002187  3               ;tmp_byte:   .byte 0
002187  3               
002187  3               ;---------------------------------------------------------------
002187  3               ; Getkey in column,row format
002187  3               ;
002187  3               ; Output:
002187  3               ;  A = high nibble=row and low nibble=column key in matrix
002187  3               ;---------------------------------------------------------------
002187  3               
002187  3               kget:
002187  3  8E E7 1D     	stx xtmp
00218A  3               
00218A  3               kget1:
00218A  3  A9 79        	lda #$79			; _BEEB read keyboard with OSBYTE &79
00218C  3  A2 01        	ldx #$01
00218E  3  20 F4 FF     	jsr OSBYTE
002191  3               
002191  3  E0 FF        	cpx #$ff
002193  3  F0 F5        	beq kget1
002195  3               
002195  3  8A           	txa
002196  3               
002196  3  AE E7 1D     	ldx xtmp
002199  3  60           	rts
00219A  3               
00219A  3               ;---------------------------------------------------------------
00219A  3               ; Display message.
00219A  3               ;
00219A  3               ; Input:
00219A  3               ;  A = message number
00219A  3               ;---------------------------------------------------------------
00219A  3               
00219A  3               dmsg:
00219A  3  AA           	tax
00219B  3  A9 D7        	lda #<msgdat		; pointer to messages.
00219D  3  85 66        	sta z80_l
00219F  3  A9 35        	lda #>msgdat
0021A1  3  85 67        	sta z80_h
0021A3  3  20 D3 22     	jsr getwrd		; get message number.
0021A6  3               dmsg3:
0021A6  3  20 BA 22     	jsr preprt		; pre-printing stuff.
0021A9  3  20 14 1B     	jsr checkx		; make sure we"re in a printable range.
0021AC  3  AD FC 21     	lda prtmod		; print mode.
0021AF  3  D0 4C        	bne bmsg1		; no, double-height text.
0021B1  3               dmsg0:
0021B1  3  A5 67        	lda z80_h		; store string pointer.
0021B3  3  48           	pha
0021B4  3  A5 66        	lda z80_l
0021B6  3  48           	pha
0021B7  3               
0021B7  3  A0 00        	ldy #0
0021B9  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
0021BB  3  29 7F        	and #127		; remove any end marker.
0021BD  3  C9 0D        	cmp #13
0021BF  3  F0 24        	beq dmsg1
0021C1  3  20 B7 1C     	jsr pchar		; display character.
0021C4  3  20 A0 22     	jsr nexpos 		; display position.
0021C7  3  D0 03        	bne dmsg2		; not on a new line.
0021C9  3  20 A9 22     	jsr nexlin		; next line down.
0021CC  3               dmsg2:
0021CC  3  68           	pla			; retrieve string pointer
0021CD  3  85 66        	sta z80_l
0021CF  3  68           	pla
0021D0  3  85 67        	sta z80_h
0021D2  3               
0021D2  3  A0 00        	ldy #0
0021D4  3  B1 66        	lda (z80_hl),y		; fetch last character.
0021D6  3  0A           	asl a  			; was it the end?
0021D7  3  90 03        	bcc :+
0021D9  3  4C 5C 1B     	jmp dscor2		; yes, job done.
0021DC  3               :
0021DC  3  E6 66        	inc z80_l		; next character to display.
0021DE  3  D0 02        	bne :+
0021E0  3  E6 67        	inc z80_h
0021E2  3               :
0021E2  3  4C B1 21     	jmp dmsg0
0021E5  3               dmsg1:
0021E5  3  EE 4C 11     	inc dispy
0021E8  3  AD 4C 11     	lda dispy
0021EB  3  C9 18        	cmp #24
0021ED  3  90 05        	bcc dmsg4
0021EF  3  A9 00        	lda #0
0021F1  3  8D 4C 11     	sta dispy
0021F4  3               dmsg4:
0021F4  3  A9 00        	lda #0
0021F6  3  8D 4B 11     	sta dispx
0021F9  3  4C CC 21     	jmp dmsg2
0021FC  3               
0021FC  3  00           prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
0021FD  3               
0021FD  3               ;----------------------------------------------------------
0021FD  3               ; Display message in big text.
0021FD  3               ;
0021FD  3               ; Input:
0021FD  3               ;  HL = string pointer
0021FD  3               ;----------------------------------------------------------
0021FD  3               
0021FD  3               bmsg1:
0021FD  3  A0 00        	ldy #0
0021FF  3  B1 66        	lda (z80_hl),y 		; get character to display.
002201  3  29 7F        	and #127		; only want 7 bits.
002203  3  C9 0D        	cmp #13
002205  3  F0 13        	beq bmsg2
002207  3  20 34 22     	jsr bchar 		; display big char.
00220A  3               bmsg3:
00220A  3  A0 00        	ldy #0
00220C  3  B1 66        	lda (z80_hl),y 		; look at last character.
00220E  3  48           	pha
00220F  3  E6 66        	inc z80_l 		; next character in list.
002211  3  D0 02        	bne :+
002213  3  E6 67        	inc z80_h
002215  3               :
002215  3  68           	pla
002216  3  0A           	asl a  			; was terminator flag set?
002217  3  90 E4        	bcc bmsg1		; no, keep going.
002219  3               :
002219  3  60           	rts
00221A  3               bmsg2:
00221A  3  A9 00        	lda #0
00221C  3  8D 4B 11     	sta dispx
00221F  3  EE 4C 11     	inc dispy
002222  3  EE 4C 11     	inc dispy
002225  3  AD 4C 11     	lda dispy
002228  3  C9 17        	cmp #23
00222A  3  90 DE        	bcc bmsg3
00222C  3  A9 00        	lda #0
00222E  3  8D 4C 11     	sta dispy
002231  3  4C 0A 22     	jmp bmsg3
002234  3               
002234  3               ;----------------------------------------------------------
002234  3               ; Big character display.
002234  3               ;
002234  3               ; Input:
002234  3               ;  A = character
002234  3               ;----------------------------------------------------------
002234  3               
002234  3               bchar:
002234  3  85 64        	sta z80_e		; save char in lb
002236  3  A9 00        	lda #0
002238  3  85 65        	sta z80_d		; reset hb
00223A  3               
00223A  3  06 64        	asl z80_e 		; multiply char by 8.
00223C  3  26 65        	rol z80_d
00223E  3  06 64        	asl z80_e
002240  3  26 65        	rol z80_d
002242  3  06 64        	asl z80_e
002244  3  26 65        	rol z80_d		; de = a*8
002246  3               
002246  3  18           	clc			; de = FontPtr + a*8
002247  3  A5 64        	lda z80_e
002249  3  6D 5D 32     	adc FontPtr 		; address of font.
00224C  3  85 64        	sta z80_e
00224E  3  A5 65        	lda z80_d
002250  3  6D 5E 32     	adc FontPtr+1
002253  3  85 65        	sta z80_d
002255  3               
002255  3  20 59 1C     	jsr gprad 		; get screen address.
002258  3               
002258  3  A2 00        	ldx #0			; height of character in font.
00225A  3               bchar0:
00225A  3  A0 00        	ldy #0
00225C  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
00225E  3               
00225E  3  49 00        	eor #TxtInvert		; Invert
002260  3               
002260  3  91 80        	sta (scraddr),y
002262  3  48           	pha
002263  3  20 CB 25     	jsr nline 		; next line down.
002266  3  68           	pla
002267  3  91 80        	sta (scraddr),y
002269  3  20 CB 25     	jsr nline 		; next line down.
00226C  3               
00226C  3  18           	clc
00226D  3  E6 64        	inc z80_e 		; next line of font.
00226F  3  D0 02        	bne :+
002271  3  E6 65        	inc z80_d
002273  3               :
002273  3  E8           	inx
002274  3  E0 08        	cpx #8
002276  3  D0 E2        	bne bchar0
002278  3               	
002278  3  20 A0 22     	jsr nexpos		; display position.
00227B  3  D0 06        	bne bchar2 		; not on a new line.
00227D  3               bchar3:
00227D  3  EE 4C 11     	inc dispy
002280  3  20 A9 22     	jsr nexlin 		; next line check.
002283  3               bchar2:
002283  3  4C 5C 1B     	jmp dscor2		; tidy up line and column variables.
002286  3               
002286  3               
002286  3               ;-------------------------------------------------
002286  3               ; Display a character.
002286  3               ;
002286  3               ; Input:
002286  3               ;  A = character
002286  3               ;-------------------------------------------------
002286  3               
002286  3               achar:
002286  3  85 63        	sta z80_b 		; copy to b.
002288  3  20 BA 22     	jsr preprt 		; get ready to print.
00228B  3  A5 63        	lda z80_b		; character in accumulator.
00228D  3  AE FC 21     	ldx prtmod 		; print mode.
002290  3  F0 03        	beq :+
002292  3  4C 34 22     	jmp bchar 		; no, double-height text.
002295  3               :
002295  3  20 B7 1C     	jsr pchar 		; display character.
002298  3  20 A0 22     	jsr nexpos 		; display position.
00229B  3  F0 E0        	beq bchar3		; next line down.
00229D  3  4C 83 22     	jmp bchar2 		; tidy up.
0022A0  3               
0022A0  3               
0022A0  3               ;-------------------------------------------------
0022A0  3               ; Get next print column position.
0022A0  3               ;-------------------------------------------------
0022A0  3               
0022A0  3               nexpos:
0022A0  3  EE 4B 11     	inc dispx		; move along one position.
0022A3  3  AD 4B 11     	lda dispx 		; get coordinate.
0022A6  3  29 1F        	and #31
0022A8  3  60           	rts 			; return with status in zero flag.
0022A9  3               
0022A9  3               ;-------------------------------------------------
0022A9  3               ; Get next print line position.
0022A9  3               ;-------------------------------------------------
0022A9  3               
0022A9  3               nexlin:
0022A9  3  EE 4C 11     	inc dispy 		; newline.
0022AC  3  AD 4C 11     	lda dispy		; vertical position.
0022AF  3  C9 18        	cmp #24			; past screen edge?
0022B1  3  B0 01        	bcs :+
0022B3  3  60           	rts			; no, still okay.
0022B4  3               :
0022B4  3  A9 00        	lda #0			; restart at top.
0022B6  3  8D 4C 11     	sta dispy
0022B9  3  60           	rts
0022BA  3               
0022BA  3               ;--------------------------------------------------------
0022BA  3               ; Pre-print preliminaries.
0022BA  3               ;--------------------------------------------------------
0022BA  3               
0022BA  3               preprt:
0022BA  3  AD 5D 32     	lda FontPtr		; font pointer.
0022BD  3  8D 12 1B     	sta grbase		; set up graphics base.
0022C0  3  AD 5E 32     	lda FontPtr+1
0022C3  3  8D 13 1B     	sta grbase+1
0022C6  3               prescr:
0022C6  3  AD 40 11     	lda charx 		; display coordinates.
0022C9  3  8D 4B 11     	sta dispx		; set up general coordinates.
0022CC  3  AD 41 11     	lda chary
0022CF  3  8D 4C 11     	sta dispy
0022D2  3  60           	rts
0022D3  3               
0022D3  3               ;--------------------------------------------------------------
0022D3  3               ; Get messagenr x in hl
0022D3  3               ;
0022D3  3               ; Input:
0022D3  3               ;  HL = pointer to message list
0022D3  3               ;  X  = message number.
0022D3  3               ;--------------------------------------------------------------
0022D3  3               
0022D3  3               getwrd:
0022D3  3  E0 00        	cpx #0
0022D5  3  D0 01        	bne:+ 			; first word in list?
0022D7  3  60           	rts 			; yep, don't search.
0022D8  3               :
0022D8  3  A0 00        	ldy #0
0022DA  3               getwd0:
0022DA  3  B1 66        	lda (z80_hl),y
0022DC  3  48           	pha
0022DD  3  E6 66        	inc z80_l
0022DF  3  D0 02        	bne :+
0022E1  3  E6 67        	inc z80_h
0022E3  3               :
0022E3  3  68           	pla
0022E4  3  C9 80        	cmp #128		; found end?
0022E6  3  30 F2        	bmi getwd0		; no, carry on.
0022E8  3  CA           	dex			; until we have right number.
0022E9  3  D0 EF        	bne getwd0
0022EB  3  60           	rts
0022EC  3               
0022EC  3               ;-----------------------------------------------------------
0022EC  3               ; Bubble sort.
0022EC  3               ;-----------------------------------------------------------
0022EC  3               
0022EC  3               bsort:
0022EC  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
0022EE  3  8D 24 23     	sta qscnt
0022F1  3               
0022F1  3  A9 34        	lda #<sprtab 		; sprite table.
0022F3  3  85 68        	sta z80_x
0022F5  3  A9 2B        	lda #>sprtab
0022F7  3  85 69        	sta z80_i
0022F9  3               bsort0:
0022F9  3  A0 00        	ldy #0
0022FB  3  B1 68        	lda (z80_ix),y 		; first sprite type.
0022FD  3  C9 FF        	cmp #255 		; is it switched off?
0022FF  3  F0 32        	beq swemp		; yes, may need to switch another in here.
002301  3               
002301  3  A0 11        	ldy #TABSIZ
002303  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
002305  3  C9 FF        	cmp #255 		; is it enabled?
002307  3  F0 0A        	beq bsort2 		; no, nothing to swap.
002309  3               
002309  3  A0 14        	ldy #TABSIZ+3
00230B  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
00230D  3  A0 03        	ldy #3
00230F  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
002311  3  90 12        	bcc bsort1		; next sprite is higher - may need to switch.
002313  3               bsort2:
002313  3  18           	clc
002314  3  A5 68        	lda z80_x
002316  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002318  3  85 68        	sta z80_x
00231A  3  90 02        	bcc :+
00231C  3  E6 69        	inc z80_i
00231E  3               :
00231E  3  CE 24 23     	dec qscnt 
002321  3  D0 D6        	bne bsort0		; repeat for remaining sprites.
002323  3  60           	rts
002324  3               
002324  3  00           qscnt:	.byte 0
002325  3               
002325  3               bsort1:
002325  3  A0 11        	ldy #TABSIZ
002327  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
002329  3  C9 FF        	cmp #255		; is it enabled?
00232B  3  F0 E6        	beq bsort2		; no, nothing to swap.
00232D  3  20 41 23     	jsr swspr		; swap positions.
002330  3  4C 13 23     	jmp bsort2
002333  3               swemp:
002333  3  A0 11        	ldy #TABSIZ
002335  3  B1 68        	lda (z80_ix),y		; next table entry.
002337  3  C9 FF        	cmp #255		; is that one on?
002339  3  F0 D8        	beq bsort2		; no, nothing to swap.
00233B  3  20 41 23     	jsr swspr		; swap positions.
00233E  3  4C 13 23     	jmp bsort2
002341  3               
002341  3               ; Swap sprites.
002341  3               
002341  3               swspr:
002341  3  A5 68        	lda z80_x		; table address 
002343  3  85 64        	sta z80_e		; copy to de pair.
002345  3  85 66        	sta z80_l		; copy to hl pair.
002347  3  A5 69        	lda z80_i
002349  3  85 67        	sta z80_h
00234B  3  85 65        	sta z80_d
00234D  3               
00234D  3  18           	clc
00234E  3  A5 66        	lda z80_l
002350  3  69 11        	adc #TABSIZ		; distance to second entry.
002352  3  85 66        	sta z80_l
002354  3  90 02        	bcc :+
002356  3  E6 67        	inc z80_h
002358  3               :
002358  3  A9 11        	lda #TABSIZ		; bytes to swap.
00235A  3  85 63        	sta z80_b
00235C  3  A0 00        	ldy #0
00235E  3               swspr0:
00235E  3  B1 66        	lda (z80_hl),y		; fetch second byte.
002360  3  48           	pha
002361  3  B1 64        	lda (z80_de),y 		; fetch first byte.
002363  3  91 66        	sta (z80_hl),y 		; copy to second.
002365  3  68           	pla
002366  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
002368  3               
002368  3  E6 64        	inc z80_e 		; next byte.
00236A  3  D0 02        	bne :+	
00236C  3  E6 65        	inc z80_d
00236E  3               :
00236E  3  E6 66        	inc z80_l 		; next byte.
002370  3  D0 02        	bne :+
002372  3  E6 67        	inc z80_h
002374  3               :
002374  3  C6 63        	dec z80_b
002376  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
002378  3  60           	rts
002379  3               
002379  3               ;----------------------------------------------------
002379  3               ; Process sprites.
002379  3               ;----------------------------------------------------
002379  3               
002379  3               pspr:
002379  3  A9 0C        	lda #NUMSPR		; sprites to process.
00237B  3  8D A2 23     	sta sprptr
00237E  3               
00237E  3  A9 34        	lda #<sprtab 		; sprite table.
002380  3  85 68        	sta z80_x
002382  3  A9 2B        	lda #>sprtab
002384  3  85 69        	sta z80_i
002386  3               pspr1:
002386  3  A0 00        	ldy #0
002388  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
00238A  3  C9 09        	cmp #9 			; within range of sprite types?
00238C  3  B0 03        	bcs :+
00238E  3  20 A3 23     	jsr pspr2 		; yes, process this one.
002391  3               :
002391  3  18           	clc
002392  3  A5 68        	lda z80_x
002394  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002396  3  85 68        	sta z80_x
002398  3  90 02        	bcc :+
00239A  3  E6 69        	inc z80_i		; next sprite.
00239C  3               :
00239C  3  CE A2 23     	dec sprptr 		; repeat for remaining sprites.
00239F  3  D0 E5        	bne pspr1
0023A1  3  60           	rts
0023A2  3               
0023A2  3  00           sprptr:	.byte 0
0023A3  3               
0023A3  3               pspr2:
0023A3  3  A5 68        	lda z80_x 		; store original sprite pointer.
0023A5  3  8D F0 23     	sta ogptr
0023A8  3  A5 69        	lda z80_i
0023AA  3  8D F1 23     	sta ogptr+1
0023AD  3  20 BB 23     	jsr pspr3		; do the routine.
0023B0  3               rtorg:
0023B0  3  AD F0 23     	lda ogptr 		; restore original pointer to sprite.
0023B3  3  85 68        	sta z80_x
0023B5  3  AD F1 23     	lda ogptr+1
0023B8  3  85 69        	sta z80_i
0023BA  3               rtorg0:
0023BA  3  60           	rts
0023BB  3               
0023BB  3               pspr3:
0023BB  3  A9 F2        	lda #<evtyp0		; sprite type events list.
0023BD  3  85 66        	sta z80_l
0023BF  3  A9 23        	lda #>evtyp0
0023C1  3  85 67        	sta z80_h
0023C3  3               pspr4:
0023C3  3  B1 68        	lda (z80_ix),y
0023C5  3  0A           	asl a			; double accumulator.
0023C6  3  18           	clc
0023C7  3  65 66        	adc z80_l
0023C9  3  85 66        	sta z80_l
0023CB  3  90 02        	bcc :+
0023CD  3  E6 67        	inc z80_h
0023CF  3               :
0023CF  3  B1 66        	lda (z80_hl),y
0023D1  3  85 64        	sta z80_e 		; copy to de.
0023D3  3  48           	pha
0023D4  3               
0023D4  3  E6 66        	inc z80_l 		; next byte of address.
0023D6  3  D0 02        	bne :+
0023D8  3  E6 67        	inc z80_h
0023DA  3               :
0023DA  3  B1 66        	lda (z80_hl),y 		; address high.
0023DC  3  85 65        	sta z80_d
0023DE  3               
0023DE  3  48           	pha	 		; swap address into hl.
0023DF  3  A5 67        	lda z80_h
0023E1  3  85 65        	sta z80_d
0023E3  3  68           	pla
0023E4  3  85 67        	sta z80_h
0023E6  3  68           	pla
0023E7  3  85 66        	sta z80_l
0023E9  3  A5 66        	lda z80_l
0023EB  3  85 64        	sta z80_e
0023ED  3               	
0023ED  3  6C 66 00     	jmp (z80_hl) 		; go there.
0023F0  3               
0023F0  3  00 00        ogptr:	.word 0			; original sprite pointer.
0023F2  3               
0023F2  3               ; Address of each sprite type's routine.
0023F2  3               
0023F2  3  75 32        evtyp0:	.word evnt00
0023F4  3  6D 33        evtyp1:	.word evnt01
0023F6  3  06 34        evtyp2:	.word evnt02
0023F8  3  07 34        evtyp3:	.word evnt03
0023FA  3  08 34        evtyp4:	.word evnt04
0023FC  3  09 34        evtyp5:	.word evnt05
0023FE  3  0A 34        evtyp6:	.word evnt06
002400  3  0B 34        evtyp7:	.word evnt07
002402  3  0C 34        evtyp8:	.word evnt08
002404  3               
002404  3               ;--------------------------------------------------------------
002404  3               ; Display sprites.
002404  3               ;
002404  3               ; Input:
002404  3               ;  IX = sprite table
002404  3               ;--------------------------------------------------------------
002404  3               
002404  3               dspr:
002404  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
002406  3  8D B7 24     	sta sprcnt
002409  3               
002409  3               dspr0:
002409  3  A0 00        	ldy #var_Type
00240B  3  B1 68        	lda (z80_ix),y 		; get sprite type.
00240D  3  C9 FF        	cmp #255 			; is it enabled?
00240F  3  D0 46        	bne dspr1 			; yes, it needs deleting.
002411  3               
002411  3               dspr5:
002411  3  A0 05        	ldy #var_newType
002413  3  B1 68        	lda (z80_ix),y 		; new type.
002415  3  C9 FF        	cmp #255			; is it enabled?
002417  3  F0 03        	beq dspr2			; no, skip
002419  3  4C A6 24     	jmp dspr3 			; yes, it needs drawing.
00241C  3               
00241C  3               dspr2:
00241C  3  A0 05        	ldy #var_newType
00241E  3  B1 68        	lda (z80_ix),y 		; copy new type.
002420  3  A0 00        	ldy #var_Type
002422  3  91 68        	sta (z80_ix),y
002424  3  A0 06        	ldy #var_newImage
002426  3  B1 68        	lda (z80_ix),y 		; copy new image number.
002428  3  A0 01        	ldy #var_Image
00242A  3  91 68        	sta (z80_ix),y
00242C  3  A0 07        	ldy #var_newFrame
00242E  3  B1 68        	lda (z80_ix),y 		; copy new frame.
002430  3  A0 02        	ldy #var_Frame
002432  3  91 68        	sta (z80_ix),y
002434  3  A0 08        	ldy #var_newY
002436  3  B1 68        	lda (z80_ix),y 		; copy new y.
002438  3  A0 03        	ldy #var_Y
00243A  3  91 68        	sta (z80_ix),y
00243C  3  A0 09        	ldy #var_newX
00243E  3  B1 68        	lda (z80_ix),y 		; copy new x.
002440  3  A0 04        	ldy #var_X
002442  3  91 68        	sta (z80_ix),y
002444  3               
002444  3  18           	clc
002445  3  A5 68        	lda z80_x
002447  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
002449  3  85 68        	sta z80_x
00244B  3  A5 69        	lda z80_i
00244D  3  69 00        	adc #0
00244F  3  85 69        	sta z80_i 			; next sprite.
002451  3  CE B7 24     	dec sprcnt
002454  3  D0 B3        	bne dspr0			; repeat for remaining sprites.
002456  3  60           	rts
002457  3               
002457  3               dspr1:
002457  3               	; _BEEB clipping code copied from CPC Engine
002457  3  A0 03        	ldy #var_Y
002459  3  B1 68        	lda (z80_ix), y		; old x coord
00245B  3  C9 B9        	cmp #SpriteMaxY     ; beyond maximum?
00245D  3  B0 B2        	bcs dspr5			; yes, don't delete it.
00245F  3               
00245F  3  A0 05        	ldy #var_newType
002461  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
002463  3  C9 FF        	cmp #255			; is this enabled?
002465  3  D0 06        	bne dspr4 			; yes, display both.
002467  3               
002467  3               dspr6:
002467  3  20 47 25     	jsr sspria 			; show single sprite.
00246A  3  4C 1C 24     	jmp dspr2
00246D  3               
00246D  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
00246D  3               
00246D  3               dspr4:
00246D  3               	; _BEEB clipping code copied from CPC Engine
00246D  3  A0 08        	ldy #var_newY
00246F  3  B1 68        	lda (z80_ix), y		; old x coord
002471  3  C9 B9        	cmp #SpriteMaxY     ; beyond maximum?
002473  3  B0 F2        	bcs dspr6			; yes, don't display it.
002475  3               
002475  3  A0 04        	ldy #var_X
002477  3  B1 68        	lda (z80_ix),y		; old x.
002479  3  A0 09        	ldy #var_newX
00247B  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
00247D  3  D0 21        	bne dspr7 			; they differ, need to redraw.
00247F  3               
00247F  3  A0 03        	ldy #var_Y
002481  3  B1 68        	lda (z80_ix),y		; old y.
002483  3  A0 08        	ldy #var_newY
002485  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002487  3  D0 17        	bne dspr7			; they differ, need to redraw.
002489  3               
002489  3  A0 02        	ldy #var_Frame
00248B  3  B1 68        	lda (z80_ix),y 		; old frame.
00248D  3  A0 07        	ldy #var_newFrame
00248F  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002491  3  D0 0D        	bne dspr7 			; they differ, need to redraw.
002493  3               
002493  3  A0 01        	ldy #var_Image
002495  3  B1 68        	lda (z80_ix),y 		; old image.
002497  3  A0 06        	ldy #var_newImage
002499  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
00249B  3  D0 03        	bne dspr7 			; they differ, need to redraw.
00249D  3  4C 1C 24     	jmp dspr2			; everything is the same, don't redraw.
0024A0  3               
0024A0  3               dspr7:
0024A0  3  20 5F 25     	jsr sspric 			; delete old sprite, draw new one simultaneously.
0024A3  3  4C 1C 24     	jmp dspr2
0024A6  3               
0024A6  3               dspr3:
0024A6  3               	; _BEEB clipping code copied from CPC Engine
0024A6  3  A0 08        	ldy #var_newY
0024A8  3  B1 68        	lda (z80_ix), y		; old x coord
0024AA  3  C9 B9        	cmp #SpriteMaxY     ; beyond maximum?
0024AC  3  90 03        	bcc :+				; no, continue
0024AE  3  4C 1C 24     	jmp dspr2			; yes, don't display it.
0024B1  3               :
0024B1  3  20 59 25     	jsr ssprib 			; show single sprite.
0024B4  3  4C 1C 24     	jmp dspr2
0024B7  3               
0024B7  3  00           sprcnt:	.byte 0
0024B8  3               
0024B8  3               ;-----------------------------------------
0024B8  3               ; Get sprite address calculations.
0024B8  3               ; gspran = new sprite, gsprad = old sprite.
0024B8  3               ;
0024B8  3               ; Input:
0024B8  3               ;  IX = sprite address
0024B8  3               ;-----------------------------------------
0024B8  3               
0024B8  3               gspran:
0024B8  3  A0 08        	ldy #var_newY
0024BA  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
0024BC  3  8D 4C 11     	sta dispy
0024BF  3  A0 09        	ldy #var_newX
0024C1  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
0024C3  3  8D 4B 11     	sta dispx
0024C6  3  A0 06        	ldy #var_newImage
0024C8  3  B1 68        	lda (z80_ix),y 		; new sprite image.
0024CA  3  20 43 28     	jsr gfrm		; fetch start frame for this sprite.
0024CD  3               
0024CD  3  A0 00        	ldy #0
0024CF  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0024D1  3  A0 07        	ldy #var_newFrame
0024D3  3  18           	clc
0024D4  3  71 68        	adc (z80_ix),y 		; new add frame number.
0024D6  3  4C F7 24     	jmp gspra0
0024D9  3               
0024D9  3               ;-----------------------------------------
0024D9  3               ; Calculate old sprite address
0024D9  3               ;
0024D9  3               ; Input:
0024D9  3               ;  IX = sprite address
0024D9  3               ;
0024D9  3               ; Output:
0024D9  3               ;  B  = right byte mask
0024D9  3               ;  C  = left byte mask
0024D9  3               ;  DE = spriteframe address
0024D9  3               ;  scraddr = screenaddress(dispx,dispy)
0024D9  3               ;-----------------------------------------
0024D9  3               
0024D9  3               gsprad:
0024D9  3  A0 03        	ldy #var_Y
0024DB  3  B1 68        	lda (z80_ix),y		; y coordinate.
0024DD  3  8D 4C 11     	sta dispy
0024E0  3  A0 04        	ldy #var_X
0024E2  3  B1 68        	lda (z80_ix),y		; x coordinate.
0024E4  3  8D 4B 11     	sta dispx
0024E7  3  A0 01        	ldy #var_Image
0024E9  3  B1 68        	lda (z80_ix),y 		; sprite image.
0024EB  3  20 43 28     	jsr gfrm 		; fetch start frame for this sprite.
0024EE  3               
0024EE  3  A0 00        	ldy #0
0024F0  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0024F2  3  A0 02        	ldy #var_Frame
0024F4  3  18           	clc
0024F5  3  71 68        	adc (z80_ix),y 		; add frame number.
0024F7  3               
0024F7  3               gspra0:
0024F7  3  4A           	lsr a	  		; multiply by 128.
0024F8  3  85 65        	sta z80_d 		; store in d.
0024FA  3  A9 00        	lda #0
0024FC  3  6A           	ror a
0024FD  3  85 64        	sta z80_e 		; got low byte.
0024FF  3               
0024FF  3  18           	clc 			; address of play sprites.
002500  3  A5 64        	lda z80_e
002502  3  69 AA        	adc #<sprgfx
002504  3  85 64        	sta z80_e
002506  3  A5 65        	lda z80_d
002508  3  69 36        	adc #>sprgfx
00250A  3  85 65        	sta z80_d
00250C  3               
00250C  3  AD 4B 11     	lda dispx 		; y coordinate.
00250F  3  29 06        	and #6 			; position within byte boundary.
002511  3  AA           	tax	 		; low byte of table displacement.
002512  3               
002512  3  0A           	asl a	  		; multiply by 32.
002513  3  0A           	asl a  			; already a multiple
002514  3  0A           	asl a  			; of 2, so just 4
002515  3  0A           	asl a  			; shifts needed.
002516  3               
002516  3  18           	clc 			; add to sprite address.
002517  3  65 64        	adc z80_e
002519  3  85 64        	sta z80_e
00251B  3  90 02        	bcc :+
00251D  3  E6 65        	inc z80_d
00251F  3               :
00251F  3  BD 3F 25     	lda spmask,x		 ; pointer to mask table.
002522  3  85 62        	sta z80_c 		; left mask.
002524  3  BD 40 25     	lda spmask+1,x
002527  3  85 63        	sta z80_b 		; right mask.
002529  3               
002529  3               ;------------------------------------------------------------------
002529  3               ; Drop into screen address routine.
002529  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
002529  3               ;------------------------------------------------------------------
002529  3               
002529  3               scadd:
002529  3  AE 4C 11     	ldx dispy
00252C  3  AD 4B 11     	lda dispx
00252F  3  29 F8        	and #$f8
002531  3  18           	clc
002532  3  7D 13 2F     	adc SCADTB_lb,x
002535  3  85 80        	sta scraddr
002537  3  BD 13 30     	lda SCADTB_hb,x
00253A  3  69 00        	adc #0
00253C  3  85 81        	sta scraddr+1
00253E  3  60           	rts
00253F  3               
00253F  3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
002543  3  0F F0 03 FC  
002547  3               
002547  3               
002547  3               ;-----------------------------------------------------------------
002547  3               ; These are the sprite routines.
002547  3               ; sspria = single sprite, old (ix).
002547  3               ; ssprib = single sprite, new (ix+5).
002547  3               ; sspric = both sprites, old (ix) and new (ix+5).
002547  3               ;-----------------------------------------------------------------
002547  3               
002547  3               sspria:
002547  3  20 D9 24     	jsr gsprad		; get old sprite address.
00254A  3               sspri2:
00254A  3  A9 10        	lda #16			; vertical lines.
00254C  3  8D 58 25     	sta acnt
00254F  3               sspri0:
00254F  3  20 82 25     	jsr dline		; draw a line.
002552  3  CE 58 25     	dec acnt
002555  3  D0 F8        	bne sspri0		; repeat 16 times
002557  3  60           	rts
002558  3               
002558  3  00           acnt:	.byte 0
002559  3               
002559  3               ;-----------------------------------------------------------------
002559  3               
002559  3               ssprib:
002559  3  20 B8 24     	jsr gspran 		; get new sprite address.
00255C  3  4C 4A 25     	jmp sspri2
00255F  3               
00255F  3               ;-----------------------------------------------------------------
00255F  3               
00255F  3               ccnt = $7c
00255F  3               
00255F  3               sspric:
00255F  3  20 D9 24     	jsr gsprad 		; get old sprite address.
002562  3  20 C9 3C     	jsr exx  		; store addresses.
002565  3  20 B8 24     	jsr gspran 		; get new sprite addresses.
002568  3               
002568  3  A9 0F        	lda #15
00256A  3  85 7C        	sta ccnt
00256C  3               lloop:
00256C  3  20 82 25     	jsr dline 		; draw a line.
00256F  3  20 C9 3C     	jsr exx  		; restore old addresses.
002572  3  20 82 25     	jsr dline 		; delete a line.
002575  3  20 C9 3C     	jsr exx  		; flip to new sprite addresses.
002578  3  C6 7C        	dec ccnt
00257A  3  D0 F0        	bne lloop
00257C  3               
00257C  3  20 82 25     	jsr dline		; draw a line.
00257F  3  20 C9 3C     	jsr exx 		; restore old addresses.
002582  3               
002582  3               ;-------------------------------------------------------------
002582  3               ; Drop through.
002582  3               ; Line drawn, now work out next target address.
002582  3               ;
002582  3               ; Input:
002582  3               ;  B  = right mask
002582  3               ;  C  = left mask
002582  3               ;  DE = spriteaddress
002582  3               ;  scraddr = screen address
002582  3               ;-------------------------------------------------------------
002582  3               
002582  3               dline:
002582  3  A0 00        	ldy #0
002584  3  B1 64        	lda (z80_de),y 		; graphic data.
002586  3  25 62        	and z80_c 		; mask away what's not needed.
002588  3  51 80        	eor (scraddr),y 	; XOR with what's there.
00258A  3  91 80        	sta (scraddr),y 	; bung it in.
00258C  3               
00258C  3               ; _BEEB screen arrangement
00258C  3  18           	clc
00258D  3  A5 80        	lda scraddr
00258F  3  69 10        	adc #16
002591  3  85 80        	sta scraddr
002593  3  90 02        	bcc :+
002595  3  E6 81        	inc scraddr+1
002597  3               :
002597  3               
002597  3  B1 64        	lda (z80_de),y 		; fetch data.
002599  3  25 63        	and z80_b 		; mask away unwanted bits.
00259B  3  51 80        	eor (scraddr),y 	; XOR with what's there.
00259D  3  91 80        	sta (scraddr),y 	; bung it in.
00259F  3               
00259F  3  E6 64        	inc z80_e 		; next graphic.
0025A1  3  D0 02        	bne :+
0025A3  3  E6 65        	inc z80_d
0025A5  3               :
0025A5  3               ; _BEEB screen arrangement
0025A5  3  38           	sec
0025A6  3  A5 80        	lda scraddr 		; one character cell to the left.
0025A8  3  E9 08        	sbc #8
0025AA  3  85 80        	sta scraddr
0025AC  3  A5 81        	lda scraddr+1
0025AE  3  E9 00        	sbc #0
0025B0  3  85 81        	sta scraddr+1
0025B2  3               
0025B2  3  B1 64        	lda (z80_de),y 		; second bit of data.
0025B4  3  51 80        	eor (scraddr),y 	; XOR with what's there.
0025B6  3  91 80        	sta (scraddr),y 	; bung it in.
0025B8  3               
0025B8  3  E6 64        	inc z80_e 		; point to next line of data.
0025BA  3  D0 02        	bne :+
0025BC  3  E6 65        	inc z80_d
0025BE  3               :
0025BE  3               ; _BEEB screen arrangement
0025BE  3  38           	sec
0025BF  3  A5 80        	lda scraddr 		; another char left.
0025C1  3  E9 08        	sbc #8
0025C3  3  85 80        	sta scraddr
0025C5  3  A5 81        	lda scraddr+1
0025C7  3  E9 00        	sbc #0
0025C9  3  85 81        	sta scraddr+1
0025CB  3               
0025CB  3               ;----------------------------------------------------------------------
0025CB  3               ; Line drawn, now work out next target address.
0025CB  3               ;----------------------------------------------------------------------
0025CB  3               
0025CB  3               ; _BEEB screen arrangement
0025CB  3               
0025CB  3               nline:
0025CB  3  A5 80        	lda scraddr 		; get low byte of address.
0025CD  3  29 07        	and #7				
0025CF  3  C9 07        	cmp #7				; is this last line of row?
0025D1  3  F0 03        	beq beeb_next_row
0025D3  3               
0025D3  3               	; within same row
0025D3  3  E6 80        	inc scraddr			; new low byte of address.
0025D5  3               ;	bne :+
0025D5  3               ;	inc scraddr+1		; new high byte of address.
0025D5  3               :
0025D5  3  60           	rts
0025D6  3               
0025D6  3               beeb_next_row:
0025D6  3  18           	clc
0025D7  3  A5 80        	lda scraddr
0025D9  3  69 39        	adc #<(ScreenRowBytes-7)
0025DB  3  85 80        	sta scraddr			; new low byte of address.
0025DD  3  A5 81        	lda scraddr+1
0025DF  3  69 01        	adc #>(ScreenRowBytes-7)
0025E1  3  85 81        	sta scraddr+1		; new high byte of address.
0025E3  3  60           	rts
0025E4  3               
0025E4  3               ;-----------------------------------------------------------
0025E4  3               ; Animates a sprite.
0025E4  3               ;
0025E4  3               ; Input:
0025E4  3               ;  IX = sprite address
0025E4  3               ;  HL = last sprite address
0025E4  3               ;-----------------------------------------------------------
0025E4  3               
0025E4  3               animsp:
0025E4  3  A0 06        	ldy #var_newImage
0025E6  3  B1 68        	lda (z80_ix),y		; sprite image
0025E8  3  20 43 28     	jsr gfrm		; get frame data.
0025EB  3               
0025EB  3  E6 66        	inc z80_l		; point to frames.
0025ED  3  D0 02        	bne :+
0025EF  3  E6 67        	inc z80_h
0025F1  3               :
0025F1  3  A0 07        	ldy #var_newFrame
0025F3  3  B1 68        	lda (z80_ix),y		; sprite frame.
0025F5  3  18           	clc
0025F6  3  69 01        	adc #1			; next one along.
0025F8  3  A0 00        	ldy #0
0025FA  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
0025FC  3  90 02        	bcc anims0		; no, not yet.
0025FE  3  A9 00        	lda #0			; start at first frame.
002600  3               anims0:
002600  3  A0 07        	ldy #var_newFrame
002602  3  91 68        	sta (z80_ix),y		; new frame.
002604  3  60           	rts
002605  3               
002605  3               ;--------------------------------------------------------------
002605  3               ; Animate back
002605  3               ;
002605  3               ; Input:
002605  3               ;  IX = sprite address
002605  3               ;  HL = last sprite address
002605  3               ;--------------------------------------------------------------
002605  3               
002605  3               animbk:
002605  3  A0 06        	ldy #var_newImage
002607  3  B1 68        	lda (z80_ix),y		; sprite image.
002609  3  20 43 28     	jsr gfrm		; get frame data.
00260C  3               
00260C  3  E6 66        	inc z80_l 		; point to frames.
00260E  3  D0 02        	bne :+
002610  3  E6 67        	inc z80_h
002612  3               :
002612  3  A0 07        	ldy #var_newFrame
002614  3  B1 68        	lda (z80_ix),y 		; sprite frame.
002616  3  F0 03        	beq :+
002618  3  4C 1F 26     	jmp rtanb0 		; yes, start at end.
00261B  3               :
00261B  3  A0 00        	ldy #0
00261D  3  B1 66        	lda (z80_hl),y 		; last sprite.
00261F  3               rtanb0:
00261F  3  38           	sec
002620  3  E9 01        	sbc #1			; next one along.
002622  3  4C 00 26     	jmp anims0		; set new frame.
002625  3               
002625  3               ;--------------------------------------------------------------
002625  3               ; Check for collision with other sprite, strict enforcement.
002625  3               ;
002625  3               ; Input:
002625  3               ;  b		= sprite to test for
002625  3               ;  ix		= current sprite pointer
002625  3               ;
002625  3               ; global:	b
002625  3               ; local:	x,y,hl,de,skptr
002625  3               ; calls:	-
002625  3               ;--------------------------------------------------------------
002625  3               
002625  3               sktyp:
002625  3  A9 34        	lda #<sprtab				; sprite table.
002627  3  85 66        	sta z80_l
002629  3  A9 2B        	lda #>sprtab
00262B  3  85 67        	sta z80_h
00262D  3               numsp2:
00262D  3  A9 0C        	lda #NUMSPR				; number of sprites.
00262F  3  8D 68 26     	sta sktptr
002632  3               sktyp0:
002632  3  A5 66        	lda z80_l 				; store pointer to sprite.
002634  3  8D 66 26     	sta skptr
002637  3  A5 67        	lda z80_h
002639  3  8D 67 26     	sta skptr+1
00263C  3               
00263C  3  A0 00        	ldy #0
00263E  3  B1 66        	lda (z80_hl),y 				; get sprite type.
002640  3  C5 63        	cmp z80_b				; is it the type we seek?
002642  3  F0 25        	beq coltyp				; yes, we can use this one.
002644  3               :
002644  3               sktyp1:
002644  3  18           	clc
002645  3  AD 66 26     	lda skptr				; retrieve sprite pointer.
002648  3  69 11        	adc #TABSIZ				; size of each entry.
00264A  3  85 66        	sta z80_l
00264C  3  AD 67 26     	lda skptr+1
00264F  3  69 00        	adc #0
002651  3  85 67        	sta z80_h
002653  3  CE 68 26     	dec sktptr					; one less iteration.
002656  3  D0 DA        	bne sktyp0				; keep going until we find a slot.
002658  3               :
002658  3  A9 00        	lda #0					; default to ROM address - no sprite.
00265A  3  85 66        	sta z80_l
00265C  3  85 67        	sta z80_h
00265E  3  8D 66 26     	sta skptr				; store pointer to sprite.
002661  3  8D 67 26     	sta skptr+1
002664  3               
002664  3  18           	clc					; don't return with zero flag set.
002665  3  60           	rts 					; didn't find one.
002666  3               
002666  3  00 00        skptr:	.word 0					; search pointer.
002668  3  00           sktptr:	.byte 0
002669  3               
002669  3               coltyp:
002669  3  A0 00        	ldy #0
00266B  3  B1 68        	lda (z80_ix),y				; current sprite type.
00266D  3  C5 63        	cmp z80_b				; seeking sprite of same type?
00266F  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
002671  3               colty0:
002671  3  A0 09        	ldy #9					; distance to x position in table.
002673  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
002675  3  85 64        	sta z80_e
002677  3  88           	dey
002678  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
00267A  3  85 65        	sta z80_d
00267C  3               
00267C  3               ; Drop into collision detection.
00267C  3               
00267C  3               colc16:
00267C  3  A0 09        	ldy #9
00267E  3  B1 68        	lda (z80_ix),y			 	; x coord.
002680  3  38           	sec					; subtract x.
002681  3  E5 64        	sbc z80_e
002683  3  B0 05        	bcs  colc1a 				; result is positive.
002685  3  49 FF        	eor #$ff				; make negative positive.
002687  3  18           	clc
002688  3  69 01        	adc #1
00268A  3               colc1a:
00268A  3  C9 10        	cmp #16 				; within x range?
00268C  3  B0 B6        	bcs sktyp1				; no - they"ve missed.
00268E  3  85 62        	sta z80_c				; store difference.
002690  3               
002690  3  A0 08        	ldy #8
002692  3  B1 68        	lda (z80_ix),y				; y coord.
002694  3  38           	sec
002695  3  E5 65        	sbc z80_d				; subtract y.
002697  3  B0 05        	bcs colc1b				; result is positive.
002699  3  49 FF        	eor #$ff				; make negative positive.
00269B  3  18           	clc
00269C  3  69 01        	adc #1
00269E  3               colc1b:
00269E  3  C9 10        	cmp #16					; within y range?
0026A0  3  B0 A2        	bcs sktyp1 				; no - they've missed.
0026A2  3  18           	clc					; add x difference.
0026A3  3  65 62        	adc z80_c
0026A5  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
0026A7  3  B0 02        	bcs :+
0026A9  3  38           	sec
0026AA  3  60           	rts 					; carry set if there's a collision.
0026AB  3               :
0026AB  3  4C 44 26     	jmp sktyp1				; try next sprite in table.
0026AE  3               colty1:
0026AE  3  A5 68        	lda z80_x  				; compare the two.
0026B0  3  C5 66        	cmp z80_l
0026B2  3  D0 09        	bne end_col
0026B4  3  A5 69        	lda z80_i
0026B6  3  C5 67        	cmp z80_h
0026B8  3  D0 03        	bne end_col
0026BA  3  4C 44 26     	jmp sktyp1 				; addresses are identical.
0026BD  3               end_col:
0026BD  3  4C 71 26     	jmp colty0
0026C0  3               
0026C0  3               ;-----------------------------------------------------------
0026C0  3               ; Display number, left aligned
0026C0  3               ; 
0026C0  3               ; Input:
0026C0  3               ;  a		= number
0026C0  3               ;
0026C0  3               ; global:	-
0026C0  3               ; local:	a,y,bc,hl,displ0
0026C0  3               ; calls:	num2ch,dmsg3
0026C0  3               ;-----------------------------------------------------------
0026C0  3               
0026C0  3               disply:
0026C0  3  85 61        	sta z80_a
0026C2  3  A9 E8        	lda #<displ0				; display workspace.
0026C4  3  85 62        	sta z80_c
0026C6  3  A9 26        	lda #>displ0
0026C8  3  85 63        	sta z80_b
0026CA  3  A5 61        	lda z80_a
0026CC  3  20 85 18     	jsr num2ch				; convert accumulator to string.
0026CF  3               
0026CF  3  C6 62        	dec z80_c				; back one character.
0026D1  3  D0 02        	bne :+
0026D3  3  C6 63        	dec z80_b
0026D5  3               :
0026D5  3  A0 00        	ldy #0
0026D7  3  B1 62        	lda (z80_bc),y				; fetch digit.
0026D9  3  09 80        	ora #128				; insert end marker.
0026DB  3  91 62        	sta (z80_bc),y				; new value.
0026DD  3               
0026DD  3  A9 E8        	lda #<displ0				; display space.
0026DF  3  85 66        	sta z80_l
0026E1  3  A9 26        	lda #>displ0
0026E3  3  85 67        	sta z80_h
0026E5  3  4C A6 21     	jmp dmsg3				; display the string.
0026E8  3               
0026E8  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
0026EC  3               
0026EC  3               ;----------------------------------------------------------------
0026EC  3               ; Initialise screen.
0026EC  3               ;
0026EC  3               ; global:	roomtb,scno
0026EC  3               ; local:	-
0026EC  3               ; calls:	tstcs
0026EC  3               ;----------------------------------------------------------------
0026EC  3               
0026EC  3               initsc:
0026EC  3  AD 11 2C     	lda roomtb 			; whereabouts in the map are we?
0026EF  3  20 FA 26     	jsr tstsc 			; find displacement.
0026F2  3  C9 FF        	cmp #255 			; is it valid?
0026F4  3  F0 03        	beq init_end 			; no, it's rubbish.
0026F6  3  8D 26 11     	sta scno			; store new room number.
0026F9  3               init_end:
0026F9  3  60           	rts
0026FA  3               
0026FA  3               ;----------------------------------------------------------------
0026FA  3               ; Test screen.
0026FA  3               ;
0026FA  3               ; global:	-
0026FA  3               ; local:	x
0026FA  3               ; calls:	-
0026FA  3               ;----------------------------------------------------------------
0026FA  3               
0026FA  3               tstsc:
0026FA  3  8D 05 27     	sta tmproom
0026FD  3  18           	clc
0026FE  3  69 04        	adc #MAPWID 			; add width in case we"re negative.
002700  3  AA           	tax 				; add displacement to map data.
002701  3  BD 64 32     	lda mapdat-MAPWID,x 		; find room number there.
002704  3  60           	rts
002705  3               
002705  3  00           tmproom:	.byte 0
002706  3               
002706  3               ;--------------------------
002706  3               ; Screen left.
002706  3               ;--------------------------
002706  3               
002706  3               scrl:
002706  3  AD 11 2C     	lda roomtb 			; present room table pointer.
002709  3  38           	sec
00270A  3  E9 01        	sbc #1				; room left.
00270C  3               scrl0:
00270C  3  20 FA 26     	jsr tstsc			; test screen.
00270F  3  C9 FF        	cmp #255			; is there a screen this way?
002711  3  D0 01        	bne :+
002713  3  60           	rts				; no, return to loop.
002714  3               :
002714  3  AD 05 27     	lda tmproom			; restore room displacement.
002717  3  8D 11 2C     	sta roomtb			; new room table position.
00271A  3               scrl1:
00271A  3  20 EC 26     	jsr initsc 			; set new screen.
00271D  3  A9 02        	lda #2
00271F  3  8D 48 11     	sta restfl 			; set it.
002722  3  60           	rts
002723  3               scrr:
002723  3  AD 11 2C     	lda roomtb 			; room table pointer.
002726  3  18           	clc
002727  3  69 01        	adc #1				; room right.
002729  3  4C 0C 27     	jmp scrl0
00272C  3               scru:
00272C  3  AD 11 2C     	lda roomtb 			; room table pointer.
00272F  3  38           	sec
002730  3  E9 04        	sbc #MAPWID 			; room up.
002732  3  4C 0C 27     	jmp scrl0
002735  3               scrd:
002735  3  AD 11 2C     	lda roomtb 			; room table pointer.
002738  3  18           	clc
002739  3  69 04        	adc #MAPWID 			; room down.
00273B  3  4C 0C 27     	jmp scrl0
00273E  3               
00273E  3               ;-----------------------------------------
00273E  3               ; Jump to new screen.
00273E  3               ;-----------------------------------------
00273E  3               
00273E  3               nwscr:
00273E  3  A2 00        	ldx #0				; start of map data.
002740  3               nwscr0:
002740  3  DD 68 32     	cmp mapdat,x
002743  3  F0 06        	beq nwscr1			; have we found a match for screen?
002745  3  E8           	inx 				; next room.
002746  3  E0 50        	cpx #80				; zero room count, 80 to search.
002748  3  D0 F6        	bne nwscr0			; keep looking.
00274A  3  60           	rts
00274B  3               nwscr1:
00274B  3  8E 11 2C     	stx roomtb			; set the map position.
00274E  3  4C 1A 27     	jmp scrl1			; draw new room.
002751  3               
002751  3               
002751  3               ;----------------------------------------------------------
002751  3               ; Gravity processing.
002751  3               ;----------------------------------------------------------
002751  3               
002751  3               grav:
002751  3  A0 0D        	ldy #13
002753  3  B1 68        	lda (z80_ix),y			; jump pointer low.
002755  3  85 66        	sta z80_l
002757  3  A0 0E        	ldy #14
002759  3  B1 68        	lda (z80_ix),y			; jump pointer high.
00275B  3  85 67        	sta z80_h
00275D  3  05 66        	ora z80_l			; merge in low byte.
00275F  3  D0 01        	bne :+
002761  3  60           	rts				; if neither is set, we're not in the air.
002762  3               :
002762  3  A0 00        	ldy #0
002764  3  B1 66        	lda (z80_hl),y			; pixels to move.
002766  3  85 61        	sta z80_a
002768  3  C9 63        	cmp #99				; reached the end?
00276A  3  D0 06        	bne grav0			; no, continue.
00276C  3               grav2:
00276C  3  C6 66        	dec z80_l			; go back to previous value.
00276E  3  B1 66        	lda (z80_hl),y			; fetch that from table.
002770  3  85 61        	sta z80_a
002772  3               grav0:
002772  3  E6 66        	inc z80_l			; point to next table entry.
002774  3  A5 66        	lda z80_l
002776  3  A0 0D        	ldy #13
002778  3  91 68        	sta (z80_ix),y			; store new pointer low.
00277A  3  A5 67        	lda z80_h
00277C  3  A0 0E        	ldy #14
00277E  3  91 68        	sta (z80_ix),y			; store new pointer high.
002780  3               grav1:
002780  3  A5 61        	lda z80_a
002782  3  D0 01        	bne :+				; any movement required?
002784  3  60           	rts				; no, not this time.
002785  3               :
002785  3  A5 61        	lda z80_a
002787  3  C9 80        	cmp #128			; is it up or down?
002789  3  B0 15        	bcs gravu			; it's up.
00278B  3               gravd:
00278B  3  85 63        	sta z80_b			; set pixels to move.
00278D  3               gravd0:
00278D  3  20 13 1F     	jsr cangd			; can we go down?
002790  3  D0 28        	bne gravst			; can't move down, so stop.
002792  3  A0 08        	ldy #8
002794  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
002796  3  18           	clc
002797  3  69 01        	adc #1
002799  3  91 68        	sta (z80_ix),y
00279B  3  C6 63        	dec z80_b
00279D  3  D0 EE        	bne gravd0
00279F  3  60           	rts
0027A0  3               gravu:
0027A0  3  49 FF        	eor #$ff			; flip the sign so it's positive.
0027A2  3  18           	clc
0027A3  3  69 01        	adc #1
0027A5  3  85 63        	sta z80_b			; set pixels to move.
0027A7  3               gravu0:
0027A7  3  20 DB 1E     	jsr cangu			; can we go up?
0027AA  3  D0 71        	bne ifalls			; can't move up, go down next.
0027AC  3  A0 08        	ldy #8
0027AE  3  B1 68        	lda (z80_ix),y
0027B0  3  38           	sec
0027B1  3  E9 01        	sbc #1
0027B3  3  91 68        	sta (z80_ix),y			; adjust new x coord.
0027B5  3  C6 63        	dec z80_b
0027B7  3  D0 EE        	bne gravu0
0027B9  3  60           	rts
0027BA  3               gravst:
0027BA  3  A0 0D        	ldy #13
0027BC  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0027BE  3  85 66        	sta z80_l
0027C0  3  A0 0E        	ldy #14
0027C2  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0027C4  3  85 67        	sta z80_h
0027C6  3               
0027C6  3  A9 00        	lda #0				; null value in pointer.
0027C8  3  A0 0D        	ldy #13
0027CA  3  91 68        	sta (z80_ix),y			; store new pointer low.
0027CC  3  C8           	iny
0027CD  3  91 68        	sta (z80_ix),y			; store new pointer high.
0027CF  3               
0027CF  3  A0 00        	ldy #0
0027D1  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
0027D3  3  C9 63        	cmp #99				; is it the end marker?
0027D5  3               evftf:
0027D5  3  F0 01        	beq :+				; yes, fallen too far.
0027D7  3  60           	rts
0027D8  3               :
0027D8  3  4C 89 35     	jmp evnt15			; EVENT FELLTOOFAR
0027DB  3               
0027DB  3               ;------------------------------------------------
0027DB  3               ; Initiate fall check.
0027DB  3               ;------------------------------------------------
0027DB  3               
0027DB  3               ifall:
0027DB  3  A0 0D        	ldy #13
0027DD  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
0027DF  3  85 66        	sta z80_l
0027E1  3  A0 0E        	ldy #14
0027E3  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
0027E5  3  85 67        	sta z80_h			; high byte in accumulator.
0027E7  3  05 66        	ora z80_l			; merge in low byte.
0027E9  3  F0 01        	beq :+
0027EB  3  60           	rts				; if either is set, we're already in the air.
0027EC  3               :
0027EC  3  A0 09        	ldy #9
0027EE  3  B1 68        	lda (z80_ix),y			; y coordinate.
0027F0  3  8D 4B 11     	sta dispx
0027F3  3               numsp7:
0027F3  3  A0 08        	ldy #8
0027F5  3  B1 68        	lda (z80_ix),y			; look x coordinate.
0027F7  3  18           	clc
0027F8  3  69 10        	adc #16				; add 16 pixels.
0027FA  3  8D 4C 11     	sta dispy			; set up test coordinates.
0027FD  3  20 9B 20     	jsr tstbl			; get map address.
002800  3  20 AD 1F     	jsr plchk			; block, platform check.
002803  3  F0 01        	beq :+
002805  3  60           	rts				; it's solid, don't fall.
002806  3               :
002806  3  E6 86        	inc bufaddr			; look right one cell.
002808  3  20 AD 1F     	jsr plchk			; block, platform check.
00280B  3  F0 01        	beq :+
00280D  3  60           	rts				; it's solid, don't fall.
00280E  3               :
00280E  3  AD 4B 11     	lda dispx			; y coordinate.
002811  3  29 07        	and #7				; position straddling block cells.
002813  3  F0 08        	beq ifalls			; no more checks needed.
002815  3  E6 86        	inc bufaddr			; look to third cell.
002817  3  20 AD 1F     	jsr plchk			; block, platform check.
00281A  3  F0 01        	beq :+
00281C  3  60           	rts				; it's solid, don't fall.
00281D  3               :
00281D  3               ifalls:
00281D  3  A9 EB        	lda #<jtab			; jump table start.
00281F  3  85 66        	sta z80_l
002821  3  A9 20        	lda #>jtab
002823  3  85 67        	sta z80_h
002825  3               ifal0:
002825  3  E6 66        	inc z80_l			; point to next value.
002827  3  A0 00        	ldy #0
002829  3  B1 66        	lda (z80_hl),y			; fetch value.
00282B  3  F0 F8        	beq ifal0			; no, get next value.
00282D  3  C9 63        	cmp #99				; reached end of table?
00282F  3  D0 01        	bne :+
002831  3  60           	rts				; yes, don't fall.
002832  3               :
002832  3  C9 80        	cmp #128			; is it going up?
002834  3  B0 EF        	bcs ifal0			; yes, looking for first movement down.
002836  3               
002836  3  A0 0D        	ldy #13
002838  3  A5 66        	lda z80_l
00283A  3  91 68        	sta (z80_ix),y 			; set jump low.
00283C  3  A0 0E        	ldy #14
00283E  3  A5 67        	lda z80_h
002840  3  91 68        	sta (z80_ix),y 			; set jump high.
002842  3  60           	rts
002843  3               
002843  3               
002843  3               ;----------------------------------------------------
002843  3               ; Get frame data for a particular sprite.
002843  3               ; Input:
002843  3               ;  a		= framenumer
002843  3               ; Output:
002843  3               ;  hl		= frame address
002843  3               ;
002843  3               ; global:	hl,frmptr
002843  3               ; local:	-
002843  3               ; calls:	-
002843  3               ;----------------------------------------------------
002843  3               
002843  3               gfrm:
002843  3  0A           	asl a	 		 	; multiple of 2.
002844  3  18           	clc
002845  3  6D 4D 11     	adc frmptr 			; frames used by game.
002848  3  85 66        	sta z80_l
00284A  3  AD 4E 11     	lda frmptr+1
00284D  3  69 00        	adc #0
00284F  3  85 67        	sta z80_h 			; point to frame start.
002851  3  60           	rts
002852  3               
002852  3               ;----------------------------------------------------
002852  3               ; Find sprite list for current room.
002852  3               ;
002852  3               ; global:	hl
002852  3               ; local:	x,y
002852  3               ; calls:	-
002852  3               ;----------------------------------------------------
002852  3               
002852  3               sprlst:
002852  3  A9 73        	lda #<nmedat 			; list of enemy sprites.
002854  3  85 66        	sta z80_l
002856  3  A9 39        	lda #>nmedat
002858  3  85 67        	sta z80_h
00285A  3  AE 26 11     	ldx scno 			; screen number.
00285D  3  D0 01        	bne sprls2 			; is it the first screen?
00285F  3  60           	rts 				; yes, don't need to search data.
002860  3               sprls2:
002860  3  A0 00        	ldy #0
002862  3               sprls1:
002862  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
002864  3  C9 FF        	cmp #255			; is it an end marker?
002866  3  F0 0E        	beq sprls0 			; yes, end of this room.
002868  3               
002868  3  18           	clc 				; point to next sprite in list.
002869  3  A5 66        	lda z80_l
00286B  3  69 04        	adc #NMESIZ
00286D  3  85 66        	sta z80_l
00286F  3  90 02        	bcc :+
002871  3  E6 67        	inc z80_h
002873  3               :
002873  3  4C 62 28     	jmp sprls1 			; continue until end of room.
002876  3               sprls0:
002876  3  E6 66        	inc z80_l 			; point to start of next screen.s
002878  3  D0 02        	bne :+
00287A  3  E6 67        	inc z80_h
00287C  3               :
00287C  3  CA           	dex
00287D  3  D0 E3        	bne sprls1 			; continue until room found.
00287F  3  60           	rts
002880  3               
002880  3               
002880  3               ;----------------------------------------------------
002880  3               ; Clear all but a single player sprite.
002880  3               ;
002880  3               ; global:	-
002880  3               ; local:	x,y,ix
002880  3               ; calls:	-
002880  3               ;----------------------------------------------------
002880  3               
002880  3               nspr:
002880  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
002882  3  8D B7 24     	sta sprcnt
002885  3  A9 34        	lda #<sprtab 			; sprite table.
002887  3  85 68        	sta z80_x
002889  3  A9 2B        	lda #>sprtab
00288B  3  85 69        	sta z80_i
00288D  3               nspr0:
00288D  3  A0 00        	ldy #0 				; fetch sprite type.
00288F  3  B1 68        	lda (z80_ix),y 			; is it a player?
002891  3  F0 1B        	beq nspr1 			; yes, keep this one.
002893  3               
002893  3  A9 FF        	lda #255
002895  3  A0 00        	ldy #0 				; fetch sprite type.
002897  3  91 68        	sta (z80_ix),y 			; delete sprite.
002899  3  A0 05        	ldy #5
00289B  3  91 68        	sta (z80_ix),y 			; remove next type.
00289D  3               
00289D  3  18           	clc	 			; next sprite.
00289E  3  A5 68        	lda z80_x
0028A0  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0028A2  3  85 68        	sta z80_x
0028A4  3  90 02        	bcc :+
0028A6  3  E6 69        	inc z80_i
0028A8  3               :
0028A8  3  CE B7 24     	dec sprcnt	 			; one less space in the table.
0028AB  3  D0 E0        	bne nspr0
0028AD  3  60           	rts
0028AE  3               nspr1:
0028AE  3  A9 FF        	lda #255
0028B0  3  A0 00        	ldy #0
0028B2  3  91 68        	sta (z80_ix),y 			; delete sprite.
0028B4  3               
0028B4  3  18           	clc	 			; point to next sprite.
0028B5  3  A5 68        	lda z80_x
0028B7  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0028B9  3  85 68        	sta z80_x
0028BB  3  90 02        	bcc :+
0028BD  3  E6 69        	inc z80_i
0028BF  3               :
0028BF  3  CE B7 24     	dec sprcnt	 			; one less to do.
0028C2  3  D0 01        	bne nspr2
0028C4  3  60           	rts
0028C5  3               nspr2:
0028C5  3  A9 FF        	lda #255
0028C7  3  A0 00        	ldy #0
0028C9  3  91 68        	sta (z80_ix),y 			; delete sprite.
0028CB  3  A0 05        	ldy #5
0028CD  3  91 68        	sta (z80_ix),y 			; remove next type.
0028CF  3               
0028CF  3  18           	clc	 			; next sprite.
0028D0  3  A5 68        	lda z80_x
0028D2  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0028D4  3  85 68        	sta z80_x
0028D6  3  90 02        	bcc :+
0028D8  3  E6 69        	inc z80_i
0028DA  3               :
0028DA  3  CE B7 24     	dec sprcnt	 			; one less space in table.
0028DD  3  D0 E6        	bne nspr2
0028DF  3  60           	rts
0028E0  3               
0028E0  3               ;----------------------------------------------------------
0028E0  3               ; Two initialisation routines.
0028E0  3               ; Initialise sprites - copy everything from list to table.
0028E0  3               ;
0028E0  3               ; global:	-
0028E0  3               ; local:	x,y,ix
0028E0  3               ; calls:	cpsp
0028E0  3               ;----------------------------------------------------------
0028E0  3               
0028E0  3               ispr:
0028E0  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0028E2  3  8D B7 24     	sta sprcnt
0028E5  3  A9 34        	lda #<sprtab			; sprite table.
0028E7  3  85 68        	sta z80_x
0028E9  3  A9 2B        	lda #>sprtab
0028EB  3  85 69        	sta z80_i
0028ED  3               ispr2:
0028ED  3  A0 00        	ldy #0
0028EF  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0028F1  3  C9 FF        	cmp #255 			; is it an end marker?
0028F3  3  D0 01        	bne :+
0028F5  3  60           	rts 				; yes, no more to do.
0028F6  3               :
0028F6  3               ispr1:
0028F6  3  A0 00        	ldy #0
0028F8  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
0028FA  3  C9 FF        	cmp #255 			; is it enabled yet?
0028FC  3  D0 08        	bne ispr4			; yes, try another slot.
0028FE  3               
0028FE  3  A0 05        	ldy #5
002900  3  B1 68        	lda (z80_ix),y		 	; next type.
002902  3  C9 FF        	cmp #255 			; is it enabled yet?
002904  3  F0 11        	beq ispr3 			; no, process this one.
002906  3               ispr4:
002906  3  18           	clc 				; next sprite.
002907  3  A5 68        	lda z80_x
002909  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00290B  3  85 68        	sta z80_x
00290D  3  90 02        	bcc :+
00290F  3  E6 69        	inc z80_i
002911  3               :
002911  3  CE B7 24     	dec sprcnt
002914  3  D0 E0        	bne ispr1 			; repeat for remaining sprites.
002916  3  60           	rts  				; no more room in table.
002917  3               ispr3:
002917  3  20 6B 29     	jsr cpsp			; initialise a sprite.
00291A  3  CE B7 24     	dec sprcnt			; one less space in the table.
00291D  3  D0 CE        	bne ispr2
00291F  3  60           	rts
002920  3               
002920  3               
002920  3               ;-----------------------------------------------------------------------
002920  3               ; Initialise sprites - but not player, we're keeping the old one.
002920  3               ;
002920  3               ; global:	-
002920  3               ; local:	x,y,ix
002920  3               ; calls:	cpsp
002920  3               ;-----------------------------------------------------------------------
002920  3               
002920  3               kspr:
002920  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
002922  3  A9 34        	lda #<sprtab 			; sprite table.
002924  3  85 68        	sta z80_x
002926  3  A9 2B        	lda #>sprtab
002928  3  85 69        	sta z80_i
00292A  3               kspr2:
00292A  3  A0 00        	ldy #0
00292C  3  B1 66        	lda (z80_hl),y 			; fetch byte.
00292E  3  C9 FF        	cmp #255 			; is it an end marker?
002930  3  D0 01        	bne :+
002932  3  60           	rts 				; yes, no more to do.
002933  3               :
002933  3  C9 00        	cmp #0
002935  3  D0 0E        	bne kspr1 			; no, add to table as normal.
002937  3               
002937  3  18           	clc 				; next sprite.
002938  3  A5 66        	lda z80_l
00293A  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
00293C  3  85 66        	sta z80_l
00293E  3  90 02        	bcc :+
002940  3  E6 67        	inc z80_h
002942  3               :
002942  3  4C 2A 29     	jmp kspr2
002945  3               kspr1:
002945  3  A0 00        	ldy #0 				; fetch sprite type.
002947  3  B1 68        	lda (z80_ix),y
002949  3  C9 FF        	cmp #255 			; is it enabled yet?
00294B  3  D0 08        	bne kspr4 			; yes, try another slot.
00294D  3               
00294D  3  A0 05        	ldy #5 				; next type.
00294F  3  B1 68        	lda (z80_ix),y
002951  3  C9 FF        	cmp #255 			; is it enabled yet?
002953  3  F0 0F        	beq kspr3 			; no, process this one.
002955  3               kspr4:
002955  3  18           	clc 				; next sprite.
002956  3  A5 68        	lda z80_x
002958  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00295A  3  85 68        	sta z80_x
00295C  3  90 02        	bcc :+
00295E  3  E6 69        	inc z80_i
002960  3               :
002960  3  CA           	dex	 			; repeat for remaining sprites.
002961  3  D0 E2        	bne kspr1
002963  3  60           	rts  				; no more room in table.
002964  3               kspr3:
002964  3  20 6B 29     	jsr cpsp 			; copy sprite to table.
002967  3  CA           	dex	 			; one less space in the table.
002968  3  D0 C0        	bne kspr2
00296A  3  60           	rts
00296B  3               
00296B  3               ;----------------------------------------------
00296B  3               ; Copy sprite from list to table.
00296B  3               ;
00296B  3               ; global:	hl,ix
00296B  3               ; local:	y
00296B  3               ; calls:	evnt09
00296B  3               ;----------------------------------------------
00296B  3               
00296B  3               cpsp:
00296B  3  A0 00        	ldy #0					; fetch byte from table.
00296D  3  B1 66        	lda (z80_hl),y
00296F  3               	; y=var_Type
00296F  3  91 68        	sta (z80_ix),y			; set up type.
002971  3  A0 05        	ldy #var_newType
002973  3  91 68        	sta (z80_ix),y 			; set up type.
002975  3               
002975  3  E6 66        	inc z80_l 				; move to next byte.
002977  3  D0 02        	bne :+
002979  3  E6 67        	inc z80_h
00297B  3               :
00297B  3  A0 00        	ldy #0 					; fetch byte from table.
00297D  3  B1 66        	lda (z80_hl),y
00297F  3  A0 06        	ldy #var_newImage
002981  3  91 68        	sta (z80_ix),y			; set up image.
002983  3               
002983  3  E6 66        	inc z80_l 				; move to next byte.
002985  3  D0 02        	bne :+
002987  3  E6 67        	inc z80_h
002989  3               :
002989  3  A0 00        	ldy #0
00298B  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
00298D  3  A0 08        	ldy #var_newY
00298F  3  91 68        	sta (z80_ix),y 			; set up coordinate.
002991  3               
002991  3  A9 C8        	lda #200 				; set initial coordinate off screen.
002993  3  A0 03        	ldy #var_Y
002995  3  91 68        	sta (z80_ix),y
002997  3               
002997  3  E6 66        	inc z80_l 				; move to next byte.
002999  3  D0 02        	bne :+
00299B  3  E6 67        	inc z80_h
00299D  3               :
00299D  3  A0 00        	ldy #0 					; fetch byte from table.
00299F  3  B1 66        	lda (z80_hl),y
0029A1  3  A0 09        	ldy #var_newX
0029A3  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0029A5  3               
0029A5  3  E6 66        	inc z80_l 				; move to next byte.
0029A7  3  D0 02        	bne :+
0029A9  3  E6 67        	inc z80_h
0029AB  3               :
0029AB  3  A9 00        	lda #0					; zeroes in accumulator.
0029AD  3  A0 07        	ldy #var_newFrame 		; reset frame number.
0029AF  3  91 68        	sta (z80_ix),y
0029B1  3  A0 0A        	ldy #var_Direction 		; reset direction.
0029B3  3  91 68        	sta (z80_ix),y
0029B5  3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
0029B7  3  91 68        	sta (z80_ix),y
0029B9  3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
0029BB  3  91 68        	sta (z80_ix),y
0029BD  3               
0029BD  3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
0029BF  3  A0 10        	ldy #var_dataHi
0029C1  3  91 68        	sta (z80_ix),y
0029C3  3               evis0:
0029C3  3  A5 69        	lda z80_i
0029C5  3  48           	pha
0029C6  3  A5 68        	lda z80_x
0029C8  3  48           	pha
0029C9  3  A5 67        	lda z80_h
0029CB  3  48           	pha
0029CC  3  A5 66        	lda z80_l
0029CE  3  48           	pha
0029CF  3               
0029CF  3  20 0D 34     	jsr evnt09 				; perform event.
0029D2  3               
0029D2  3  68           	pla
0029D3  3  85 66        	sta z80_l
0029D5  3  68           	pla
0029D6  3  85 67        	sta z80_h
0029D8  3  68           	pla
0029D9  3  85 68        	sta z80_x
0029DB  3  68           	pla
0029DC  3  85 69        	sta z80_i
0029DE  3               
0029DE  3  18           	clc
0029DF  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
0029E1  3  69 11        	adc #TABSIZ		 	; next sprite.
0029E3  3  85 68        	sta z80_x
0029E5  3  90 02        	bcc :+
0029E7  3  E6 69        	inc z80_i
0029E9  3               :
0029E9  3  60           	rts
0029EA  3               
0029EA  3               
0029EA  3               ;-------------------------------------
0029EA  3               ; Clear the play area window.
0029EA  3               ;-------------------------------------
0029EA  3               
0029EA  3               clw:
0029EA  3  AD 1D 11     	lda wintop			; get coordinates of window.
0029ED  3  8D 4C 11     	sta dispy			; put into dispx for calculation.
0029F0  3  AD 1E 11     	lda winlft
0029F3  3  8D 4B 11     	sta dispx
0029F6  3               
0029F6  3  AD 1F 11     	lda winhgt			; height of window.
0029F9  3  8D 53 1E     	sta rrow			; copy to b register.
0029FC  3               clw3:
0029FC  3  AD 20 11     	lda winwid 			; width of window.
0029FF  3  8D 52 1E     	sta rcol
002A02  3               clw2:
002A02  3  20 59 1C     	jsr gprad 			; get print address.
002A05  3  A9 00        	lda #0				; zero byte to write.
002A07  3  A2 07        	ldx #7				; pixel height of each cell.
002A09  3               clw1:
002A09  3  BC F2 1C     	ldy scrtab,x
002A0C  3  91 80        	sta (scraddr),y 			; copy to screen.
002A0E  3  CA           	dex				; next screen row down.
002A0F  3  10 F8        	bpl clw1
002A11  3               
002A11  3  EE 4B 11     	inc dispx			; next column.
002A14  3  CE 52 1E     	dec rcol			; one less to do.
002A17  3  D0 E9        	bne clw2			; repeat for remaining columns.
002A19  3               
002A19  3  AD 1E 11     	lda winlft			; get left edge.
002A1C  3  8D 4B 11     	sta dispx 			; reset x.
002A1F  3  EE 4C 11     	inc dispy 			; next line down.
002A22  3               
002A22  3  CE 53 1E     	dec rrow
002A25  3  D0 D5        	bne clw3			; repeat down the screen.
002A27  3               
002A27  3  AD 1D 11     	lda wintop			; get coordinates of window.
002A2A  3  8D 41 11     	sta chary			; put into display position.
002A2D  3  AD 1E 11     	lda winlft
002A30  3  8D 40 11     	sta charx
002A33  3  60           	rts
002A34  3               
002A34  3               
002A34  3               ;----------------------------------------------------------
002A34  3               ; Effects code.
002A34  3               ; Ticker routine is called 25 times per second.
002A34  3               ;
002A34  3               ; HL = txtscr = left text screen address
002A34  3               ; DE = txtscr+txtwid-1 = right text screen address
002A34  3               ; BC = txtpos = text scroller position
002A34  3               ;
002A34  3               ;----------------------------------------------------------
002A34  3               
002A34  3               .if sflag
002A34  3               scrly:
002A34  3  60           	rts
002A35  3  85 12        	.word txtscr         	; get left screen address.
002A37  3  85 90        	sta scr_l
002A39  3  AD 86 12     	lda txtscr+1
002A3C  3  85 91        	sta scr_l+1
002A3E  3  85 93        	sta scr_r+1
002A40  3               	
002A40  3  8E E7 1D     	stx xtmp
002A43  3               
002A43  3  18           	clc         		; get right screen address.
002A44  3  A5 90        	lda scr_l
002A46  3  6D 80 12     	adc txtwid
002A49  3  85 92        	sta scr_r
002A4B  3  C6 92        	dec scr_r
002A4D  3               scrly1:
002A4D  3  AC 80 12     	ldy txtwid		; set txtwide
002A50  3  88           	dey
002A51  3  18           	clc
002A52  3               scrly0:
002A52  3  B1 90        	lda (scr_l),y		; scroll 1 line
002A54  3  2A           	rol a
002A55  3  91 90        	sta (scr_l),y
002A57  3  88           	dey
002A58  3  10 F8        	bpl scrly0
002A5A  3               
002A5A  3  18           	clc			; point to next line
002A5B  3  A5 90        	lda scr_l
002A5D  3  69 20        	adc #32
002A5F  3  85 90        	sta scr_l
002A61  3  90 EA        	bcc scrly1		; repeat 8 times
002A63  3               
002A63  3  AD 81 12     	lda txtpos 		; get text pointer.
002A66  3  85 94        	sta scr_txt
002A68  3  AD 82 12     	lda txtpos+1
002A6B  3  85 95        	sta scr_txt+1
002A6D  3               
002A6D  3  A0 00        	ldy #0
002A6F  3  B1 94        	lda (scr_txt),y 		; find character we're displaying.
002A71  3  29 7F        	and #127 		; remove end marker bit if applicable.
002A73  3  C9 0D        	cmp #13			; is it newline?
002A75  3  D0 02        	bne scrly5 		; no, it's okay.
002A77  3  A9 20        	lda #32			; convert to a space instead.
002A79  3               scrly5:
002A79  3  85 82        	sta fntaddr		; calculate char address
002A7B  3  A9 00        	lda #0
002A7D  3  85 83        	sta fntaddr+1
002A7F  3  06 82        	asl fntaddr  		; multiply char by 8.
002A81  3  26 83        	rol fntaddr+1
002A83  3  06 82        	asl fntaddr
002A85  3  26 83        	rol fntaddr+1
002A87  3  06 82        	asl fntaddr
002A89  3  26 83        	rol fntaddr+1
002A8B  3  A5 82        	lda fntaddr
002A8D  3  18           	clc
002A8E  3  6D 5D 32     	adc FontPtr
002A91  3  8D 9F 2A     	sta scrly3+1		; that's the low byte.
002A94  3  A5 83        	lda fntaddr+1
002A96  3  6D 5E 32     	adc FontPtr+1
002A99  3  8D A0 2A     	sta scrly3+2		; add displacement.
002A9C  3               
002A9C  3  A2 00        	ldx #0
002A9E  3               scrly3:
002A9E  3  BD 33 33     	lda $3333,x		; get image of char line.
002AA1  3  2D 7F 12     	and txtbit
002AA4  3  F0 0A        	beq scrly2		; don't plot pixel
002AA6  3  BC E2 2A     	ldy scrline,x
002AA9  3  B1 92        	lda (scr_r),y
002AAB  3  18           	clc
002AAC  3  09 01        	ora #1
002AAE  3  91 92        	sta (scr_r),y		; plot pixel
002AB0  3               scrly2:
002AB0  3  E8           	inx			; next line of char.
002AB1  3  E0 08        	cpx #8
002AB3  3  D0 E9        	bne scrly3
002AB5  3               
002AB5  3  4E 7F 12     	lsr txtbit		; bit of text to display.
002AB8  3  B0 01        	bcs :+
002ABA  3  60           	rts
002ABB  3               :
002ABB  3  A0 00        	ldy #0
002ABD  3  B1 94        	lda (scr_txt),y 	; what was the character?
002ABF  3  0A           	asl a	  		; end of message?
002AC0  3  B0 0B        	bcs scrly4
002AC2  3  EE 81 12     	inc txtpos
002AC5  3  D0 03        	bne :+
002AC7  3  EE 82 12     	inc txtpos+1
002ACA  3               :
002ACA  3  4C D9 2A     	jmp scrly6 		; not yet - continue.
002ACD  3               scrly4:
002ACD  3  AD 83 12     	lda txtini 		; start of scrolling message.
002AD0  3  8D 81 12     	sta txtpos
002AD3  3  AD 84 12     	lda txtini+1
002AD6  3  8D 82 12     	sta txtpos+1
002AD9  3               scrly6:
002AD9  3  A9 80        	lda #128
002ADB  3  8D 7F 12     	sta txtbit
002ADE  3  AE E7 1D     	ldx xtmp
002AE1  3  60           	rts
002AE2  3               
002AE2  3  00 20 40 60  scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
002AE6  3  80 A0 C0 E0  
002AEA  3               
002AEA  3               ;-------------------------------------------------------
002AEA  3               ; Entry TICKER command
002AEA  3               ;
002AEA  3               ; Entry:
002AEA  3               ;  z80_b = message nr
002AEA  3               ;  z80_c = width
002AEA  3               ;-------------------------------------------------------
002AEA  3               
002AEA  3               iscrly:
002AEA  3  20 C6 22     	jsr prescr 		; set up display position.
002AED  3               
002AED  3  A9 D7        	lda #<msgdat 		; text messages.
002AEF  3  85 66        	sta z80_l
002AF1  3  A9 35        	lda #>msgdat
002AF3  3  85 67        	sta z80_h
002AF5  3               
002AF5  3  A5 62        	lda z80_c 		; width.
002AF7  3  38           	sec
002AF8  3  E9 01        	sbc #1			; subtract one.
002AFA  3  C9 20        	cmp #32 		; is it between 1 and 32?
002AFC  3  90 05        	bcc :+
002AFE  3  A9 60        	lda #$60
002B00  3  4C 14 2B     	jmp iscrl0		; no, disable messages.
002B03  3               :
002B03  3  A6 63        	ldx z80_b		; message number.
002B05  3  20 D3 22     	jsr getwrd 		; find message start.
002B08  3               
002B08  3  A5 66        	lda z80_l		; set initial text position.
002B0A  3  8D 83 12     	sta txtini
002B0D  3  A5 67        	lda z80_h
002B0F  3  8D 84 12     	sta txtini+1
002B12  3               
002B12  3  A9 AD        	lda #$ad		; code for lda adrr
002B14  3               iscrl0:
002B14  3  8D 34 2A     	sta scrly		; enable/disable scrolling routine.
002B17  3               
002B17  3  20 C6 22     	jsr prescr 		; set up display position.
002B1A  3  20 59 1C     	jsr gprad 		; get print address.
002B1D  3               
002B1D  3  A5 80        	lda scraddr 		; set text screen address.
002B1F  3  8D 85 12     	sta txtscr
002B22  3  A5 81        	lda scraddr+1
002B24  3  8D 86 12     	sta txtscr+1
002B27  3               
002B27  3  A5 62        	lda z80_c		; width.
002B29  3  8D 80 12     	sta txtwid		; set width in working storage.
002B2C  3               
002B2C  3  A9 80        	lda #128 		; start with leftmost bit.
002B2E  3  8D 7F 12     	sta txtbit
002B31  3               
002B31  3  4C CD 2A     	jmp scrly4
002B34  3               .endif
002B34  3               
002B34  3               ;------------------------------------------------------------------
002B34  3               ; Sprite table 
002B34  3               ;------------------------------------------------------------------
002B34  3               
002B34  3               
002B34  3               ; ix+0  = type.
002B34  3               ; ix+1  = sprite image number.
002B34  3               ; ix+2  = frame.
002B34  3               ; ix+3  = y coord.
002B34  3               ; ix+4  = x coord.
002B34  3               
002B34  3               ; ix+5  = new type.
002B34  3               ; ix+6  = new image number.
002B34  3               ; ix+7  = new frame.
002B34  3               ; ix+8  = new y coord.
002B34  3               ; ix+9  = new x coord.
002B34  3               
002B34  3               ; ix+10 = direction.
002B34  3               ; ix+11 = parameter 1.
002B34  3               ; ix+12 = parameter 2.
002B34  3               ; ix+13 = jump pointer low.
002B34  3               ; ix+14 = jump pointer high.
002B34  3               ; ix+15 = data pointer low.
002B34  3               ; ix+16 = data pointer high.
002B34  3               
002B34  3               ; block NUMSPR * TABSIZ,255
002B34  3               
002B34  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
002B38  3  FF FF FF FF  
002B3C  3  FF FF FF FF  
002C00  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
002C04  3  FF FF FF 00  
002C08  3  C0 78 00 00  
002C11  3  07           roomtb:	.byte 7                      ; start room map offset.
002C12  3               
002C12  3               ; User routine.  Put your own code in here to be called with USER instruction.
002C12  3               ; if USER has an argument it will be passed in the accumulator.
002C12  3               
002C12  3               user:
002C12  3  60           	rts
002C13  3               
002C13  3               ;----------------------------------------------------
002C13  3               ; Missing vars 
002C13  3               ;----------------------------------------------------
002C13  3               
002C13  3  00 00 00 00  MAP: .res 3*256,0					; properties map buffer (3x256 bytes)
002C17  3  00 00 00 00  
002C1B  3  00 00 00 00  
002F13  3  00 00 00 00  SCADTB_lb: .res 256,0				; screen address table lo-byte (256 bytes)
002F17  3  00 00 00 00  
002F1B  3  00 00 00 00  
003013  3  00 00 00 00  SCADTB_hb: .res 256,0				; screen address table hi-byte (256 bytes)
003017  3  00 00 00 00  
00301B  3  00 00 00 00  
003113  3  00 00 00 00  SHRAPN: .res 55*6,0					; shrapnel table (55x6 bytes)
003117  3  00 00 00 00  
00311B  3  00 00 00 00  
00325D  3               
00325D  3  00 00        FontPtr:	.byte 0,0
00325F  3  00 00        TmpAddr:	.byte 0,0
003261  3               
003261  3  00           loopa:		.byte 0
003262  3  00           loopb:		.byte 0
003263  3  00           loopc:		.byte 0
003264  3               
003264  3               ; Everything below here will be generated by the editors.
003264  3               
003264  3               WINDOWTOP = 1
003264  3               WINDOWLFT = 9
003264  3               WINDOWHGT = 22
003264  3               WINDOWWID = 22 ;a
003264  3               MAPWID = 4
003264  3  FF FF FF FF          .byte 255,255,255,255
003268  3               mapdat:
003268  3  FF 01 00 FF          .byte 255,1,0,255,255,2,255,255
00326C  3  FF 02 FF FF  
003270  3  FF FF FF FF          .byte 255,255,255,255
003274  3  02           stmap:  .byte 2
003275  3               
003275  3               evnt00:
003275  3                       ; SPRITEINK command
003275  3  20 F7 19             jsr skobj
003278  3  8D 44 11             sta varobj
00327B  3  A9 00                lda #0
00327D  3  CD 44 11             cmp varobj
003280  3  F0 03                beq *+5
003282  3  4C 8B 32             jmp a00044
003285  3  AD 44 11             lda varobj
003288  3  20 6F 19             jsr getob
00328B  3  AD 1B 11     a00044: lda joyval
00328E  3  29 08                and #8
003290  3  F0 03                beq :+
003292  3  4C C0 32             jmp a00147
003295  3               :
003295  3  AD 22 11             lda wntopx
003298  3  A0 08                ldy #8
00329A  3  D1 68                cmp (z80_ix),y
00329C  3  B0 03                bcs *+5
00329E  3  4C AF 32             jmp a00111
0032A1  3  20 2C 27             jsr scru
0032A4  3  AD 24 11             lda wnbotx
0032A7  3  A0 08                ldy #8
0032A9  3  91 68                sta (z80_ix),y
0032AB  3  60                   rts
0032AC  3  4C C0 32             jmp a00147
0032AF  3  20 DB 1E     a00111: jsr cangu
0032B2  3  F0 03                beq :+
0032B4  3  4C C0 32             jmp a00147
0032B7  3               :
0032B7  3  A0 08                ldy #8
0032B9  3  B1 68                lda (z80_ix),y
0032BB  3  38                   sec
0032BC  3  E9 02                sbc #2
0032BE  3  91 68                sta (z80_ix),y
0032C0  3  AD 1B 11     a00147: lda joyval
0032C3  3  29 04                and #4
0032C5  3  F0 03                beq :+
0032C7  3  4C F4 32             jmp a00249
0032CA  3               :
0032CA  3  AD 24 11             lda wnbotx
0032CD  3  A0 08                ldy #8
0032CF  3  D1 68                cmp (z80_ix),y
0032D1  3  F0 02                beq *+4
0032D3  3  B0 0E                bcs a00213
0032D5  3  20 35 27             jsr scrd
0032D8  3  AD 22 11             lda wntopx
0032DB  3  A0 08                ldy #8
0032DD  3  91 68                sta (z80_ix),y
0032DF  3  60                   rts
0032E0  3  4C F4 32             jmp a00249
0032E3  3  20 13 1F     a00213: jsr cangd
0032E6  3  F0 03                beq :+
0032E8  3  4C F4 32             jmp a00249
0032EB  3               :
0032EB  3  A0 08                ldy #8
0032ED  3  B1 68                lda (z80_ix),y
0032EF  3  18                   clc
0032F0  3  69 02                adc #2
0032F2  3  91 68                sta (z80_ix),y
0032F4  3  AD 1B 11     a00249: lda joyval
0032F7  3  29 02                and #2
0032F9  3  F0 03                beq :+
0032FB  3  4C 29 33             jmp a00351
0032FE  3               :
0032FE  3  AD 23 11             lda wnlftx
003301  3  A0 09                ldy #9
003303  3  D1 68                cmp (z80_ix),y
003305  3  B0 03                bcs *+5
003307  3  4C 18 33             jmp a00316
00330A  3  20 06 27             jsr scrl
00330D  3  AD 25 11             lda wnrgtx
003310  3  A0 09                ldy #9
003312  3  91 68                sta (z80_ix),y
003314  3  60                   rts
003315  3  4C 29 33             jmp a00351
003318  3  20 4B 1F     a00316: jsr cangl
00331B  3  F0 03                beq :+
00331D  3  4C 29 33             jmp a00351
003320  3               :
003320  3  A0 09                ldy #9
003322  3  B1 68                lda (z80_ix),y
003324  3  38                   sec
003325  3  E9 02                sbc #2
003327  3  91 68                sta (z80_ix),y
003329  3  AD 1B 11     a00351: lda joyval
00332C  3  29 01                and #1
00332E  3  F0 03                beq :+
003330  3  4C 5D 33             jmp a00453
003333  3               :
003333  3  AD 25 11             lda wnrgtx
003336  3  A0 09                ldy #9
003338  3  D1 68                cmp (z80_ix),y
00333A  3  F0 02                beq *+4
00333C  3  B0 0E                bcs a00418
00333E  3  20 23 27             jsr scrr
003341  3  AD 23 11             lda wnlftx
003344  3  A0 09                ldy #9
003346  3  91 68                sta (z80_ix),y
003348  3  60                   rts
003349  3  4C 5D 33             jmp a00453
00334C  3  20 5F 1F     a00418: jsr cangr
00334F  3  F0 03                beq :+
003351  3  4C 5D 33             jmp a00453
003354  3               :
003354  3  A0 09                ldy #9
003356  3  B1 68                lda (z80_ix),y
003358  3  18                   clc
003359  3  69 02                adc #2
00335B  3  91 68                sta (z80_ix),y
00335D  3  AD 1B 11     a00453: lda joyval
003360  3  29 10                and #16
003362  3  F0 03                beq :+
003364  3  4C 6C 33             jmp a00480
003367  3               :
003367  3  A9 10                lda #16
003369  3  20 27 16             jsr explod
00336C  3               a00480: ; SPRITEINK command
00336C  3  60                   rts
00336D  3               evnt01:
00336D  3  A9 00                lda #0
00336F  3  A0 0A                ldy #10
003371  3  D1 68                cmp (z80_ix),y
003373  3  F0 03                beq *+5
003375  3  4C 95 33             jmp b00082
003378  3  20 DB 1E             jsr cangu
00337B  3  F0 03                beq :+
00337D  3  4C 8C 33             jmp b00064
003380  3               :
003380  3  A0 08                ldy #8
003382  3  B1 68                lda (z80_ix),y
003384  3  38                   sec
003385  3  E9 02                sbc #2
003387  3  91 68                sta (z80_ix),y
003389  3  4C 92 33             jmp b00078
00338C  3  A9 01        b00064: lda #1
00338E  3  A0 0A                ldy #10
003390  3  91 68                sta (z80_ix),y
003392  3  4C AF 33     b00078: jmp b00136
003395  3  20 13 1F     b00082: jsr cangd
003398  3  F0 03                beq :+
00339A  3  4C A9 33             jmp b00123
00339D  3               :
00339D  3  A0 08                ldy #8
00339F  3  B1 68                lda (z80_ix),y
0033A1  3  18                   clc
0033A2  3  69 02                adc #2
0033A4  3  91 68                sta (z80_ix),y
0033A6  3  4C AF 33             jmp b00136
0033A9  3  A9 00        b00123: lda #0
0033AB  3  A0 0A                ldy #10
0033AD  3  91 68                sta (z80_ix),y
0033AF  3  A9 00        b00136: lda #0
0033B1  3  A0 0B                ldy #11
0033B3  3  D1 68                cmp (z80_ix),y
0033B5  3  F0 03                beq *+5
0033B7  3  4C D7 33             jmp b00217
0033BA  3  20 4B 1F             jsr cangl
0033BD  3  F0 03                beq :+
0033BF  3  4C CE 33             jmp b00199
0033C2  3               :
0033C2  3  A0 09                ldy #9
0033C4  3  B1 68                lda (z80_ix),y
0033C6  3  38                   sec
0033C7  3  E9 02                sbc #2
0033C9  3  91 68                sta (z80_ix),y
0033CB  3  4C D4 33             jmp b00212
0033CE  3  A9 01        b00199: lda #1
0033D0  3  A0 0B                ldy #11
0033D2  3  91 68                sta (z80_ix),y
0033D4  3  4C F1 33     b00212: jmp b00271
0033D7  3  20 5F 1F     b00217: jsr cangr
0033DA  3  F0 03                beq :+
0033DC  3  4C EB 33             jmp b00257
0033DF  3               :
0033DF  3  A0 09                ldy #9
0033E1  3  B1 68                lda (z80_ix),y
0033E3  3  18                   clc
0033E4  3  69 02                adc #2
0033E6  3  91 68                sta (z80_ix),y
0033E8  3  4C F1 33             jmp b00271
0033EB  3  A9 00        b00257: lda #0
0033ED  3  A0 0B                ldy #11
0033EF  3  91 68                sta (z80_ix),y
0033F1  3               b00271: ; SPRITEINK command
0033F1  3  20 E4 25             jsr animsp
0033F4  3  A9 00                lda #0
0033F6  3  85 63                sta z80_b
0033F8  3  20 25 26             jsr sktyp
0033FB  3  B0 03                bcs :+
0033FD  3  4C 05 34             jmp b00312
003400  3               :
003400  3  A9 01                lda #1
003402  3  8D 49 11             sta deadf
003405  3  60           b00312: rts
003406  3               evnt02:
003406  3  60                   rts
003407  3               evnt03:
003407  3  60                   rts
003408  3               evnt04:
003408  3  60                   rts
003409  3               evnt05:
003409  3  60                   rts
00340A  3               evnt06:
00340A  3  60                   rts
00340B  3               evnt07:
00340B  3  60                   rts
00340C  3               evnt08:
00340C  3  60                   rts
00340D  3               evnt09:
00340D  3  60                   rts
00340E  3               evnt10:
00340E  3  A9 00                lda #0
003410  3  CD 26 11             cmp scno
003413  3  F0 03                beq *+5
003415  3  4C 29 34             jmp k00048
003418  3  A9 00                lda #0
00341A  3  20 A1 19             jsr gotob
00341D  3  C9 FF                cmp #255
00341F  3  F0 03                beq :+
003421  3  4C 29 34             jmp k00048
003424  3               :
003424  3  A9 01                lda #1
003426  3  8D 4A 11             sta gamwon
003429  3  60           k00048: rts
00342A  3               evnt11:
00342A  3  60                   rts
00342B  3               evnt12:
00342B  3                       ; COLOUR command
00342B  3  20 1E 12             jsr cls
00342E  3  A9 04                lda #4
003430  3  8D 41 11             sta chary
003433  3  A9 08                lda #8
003435  3  8D 40 11             sta charx
003438  3  A9 00                lda #0
00343A  3  20 9A 21             jsr dmsg
00343D  3  A9 08                lda #8
00343F  3  8D 41 11             sta chary
003442  3  A9 08                lda #8
003444  3  8D 40 11             sta charx
003447  3  A9 01                lda #1
003449  3  20 9A 21             jsr dmsg
00344C  3  A9 0A                lda #10
00344E  3  8D 41 11             sta chary
003451  3  A9 08                lda #8
003453  3  8D 40 11             sta charx
003456  3  A9 02                lda #2
003458  3  20 9A 21             jsr dmsg
00345B  3  A9 0C                lda #12
00345D  3  8D 41 11             sta chary
003460  3  A9 08                lda #8
003462  3  8D 40 11             sta charx
003465  3  A9 03                lda #3
003467  3  20 9A 21             jsr dmsg
00346A  3  A9 0E                lda #14
00346C  3  8D 41 11             sta chary
00346F  3  A9 08                lda #8
003471  3  8D 40 11             sta charx
003474  3  A9 04                lda #4
003476  3  20 9A 21             jsr dmsg
003479  3                       ; INK command
003479  3  A9 00                lda #0
00347B  3  8D 41 11             sta chary
00347E  3  A9 01                lda #1
003480  3  8D 40 11             sta charx
003483  3  A9 1E                lda #30
003485  3  85 62                sta z80_c
003487  3  A9 05                lda #5
003489  3  85 63                sta z80_b
00348B  3  20 EA 2A             jsr iscrly
00348E  3  20 4F 11             jsr prskey
003491  3  A9 60                lda #96
003493  3  8D 34 2A             sta scrly
003496  3  A0 07                ldy #7
003498  3  B9 14 21             lda keys,y
00349B  3  20 2A 21             jsr ktest
00349E  3  90 03                bcc :+
0034A0  3  4C A8 34             jmp m00222
0034A3  3               :
0034A3  3  A9 00                lda #0
0034A5  3  8D 1A 11             sta contrl
0034A8  3  A0 08        m00222: ldy #8
0034AA  3  B9 14 21             lda keys,y
0034AD  3  20 2A 21             jsr ktest
0034B0  3  90 03                bcc :+
0034B2  3  4C B5 34             jmp m00244
0034B5  3               :
0034B5  3  A0 09        m00244: ldy #9
0034B7  3  B9 14 21             lda keys,y
0034BA  3  20 2A 21             jsr ktest
0034BD  3  90 03                bcc :+
0034BF  3  4C C2 34             jmp m00266
0034C2  3               :
0034C2  3  A0 0A        m00266: ldy #10
0034C4  3  B9 14 21             lda keys,y
0034C7  3  20 2A 21             jsr ktest
0034CA  3  90 03                bcc :+
0034CC  3  4C 5F 35             jmp m00542
0034CF  3               :
0034CF  3  A9 32                lda #50
0034D1  3  20 62 11             jsr delay
0034D4  3  20 1E 12             jsr cls
0034D7  3                       ; INK command
0034D7  3  A9 02                lda #2
0034D9  3  8D 41 11             sta chary
0034DC  3  A9 04                lda #4
0034DE  3  8D 40 11             sta charx
0034E1  3  A9 06                lda #6
0034E3  3  20 9A 21             jsr dmsg
0034E6  3  A9 05                lda #5
0034E8  3  8D 41 11             sta chary
0034EB  3  A9 0F                lda #15
0034ED  3  8D 40 11             sta charx
0034F0  3                       ; INK command
0034F0  3  A9 07                lda #7
0034F2  3  20 9A 21             jsr dmsg
0034F5  3  A9 03                lda #3
0034F7  3  AA                   tax
0034F8  3  20 87 21             jsr kget
0034FB  3  9D 14 21             sta keys,x
0034FE  3  A9 32                lda #50
003500  3  20 62 11             jsr delay
003503  3  A9 07                lda #7
003505  3  8D 41 11             sta chary
003508  3  A9 0E                lda #14
00350A  3  8D 40 11             sta charx
00350D  3  A9 08                lda #8
00350F  3  20 9A 21             jsr dmsg
003512  3  A9 02                lda #2
003514  3  AA                   tax
003515  3  20 87 21             jsr kget
003518  3  9D 14 21             sta keys,x
00351B  3  A9 32                lda #50
00351D  3  20 62 11             jsr delay
003520  3  A9 09                lda #9
003522  3  8D 41 11             sta chary
003525  3  A9 0E                lda #14
003527  3  8D 40 11             sta charx
00352A  3  A9 09                lda #9
00352C  3  20 9A 21             jsr dmsg
00352F  3  A9 01                lda #1
003531  3  AA                   tax
003532  3  20 87 21             jsr kget
003535  3  9D 14 21             sta keys,x
003538  3  A9 32                lda #50
00353A  3  20 62 11             jsr delay
00353D  3  A9 0B                lda #11
00353F  3  8D 41 11             sta chary
003542  3  A9 0D                lda #13
003544  3  8D 40 11             sta charx
003547  3  A9 0A                lda #10
003549  3  20 9A 21             jsr dmsg
00354C  3  A9 00                lda #0
00354E  3  AA                   tax
00354F  3  20 87 21             jsr kget
003552  3  9D 14 21             sta keys,x
003555  3  A9 32                lda #50
003557  3  20 62 11             jsr delay
00355A  3  A9 00                lda #0
00355C  3  8D 1A 11             sta contrl
00355F  3  20 1E 12     m00542: jsr cls
003562  3  60                   rts
003563  3               evnt13:
003563  3  A9 03                lda #3
003565  3  8D 27 11             sta numlif
003568  3  60                   rts
003569  3               evnt14:
003569  3                       ; INK command
003569  3  A9 02                lda #2
00356B  3  8D 41 11             sta chary
00356E  3  A9 01                lda #1
003570  3  8D 40 11             sta charx
003573  3  A9 0B                lda #11
003575  3  20 9A 21             jsr dmsg
003578  3                       ; INK command
003578  3  A9 03                lda #3
00357A  3  8D 41 11             sta chary
00357D  3  A9 03                lda #3
00357F  3  8D 40 11             sta charx
003582  3  AD 27 11             lda numlif
003585  3  20 C0 26             jsr disply
003588  3  60                   rts
003589  3               evnt15:
003589  3  60                   rts
00358A  3               evnt16:
00358A  3  AD 27 11             lda numlif
00358D  3  38                   sec
00358E  3  E9 01                sbc #1
003590  3  8D 27 11             sta numlif
003593  3  60                   rts
003594  3               evnt17:
003594  3  A9 0B                lda #11
003596  3  8D 41 11             sta chary
003599  3  A9 10                lda #16
00359B  3  8D 40 11             sta charx
00359E  3  A9 0C                lda #12
0035A0  3  20 9A 21             jsr dmsg
0035A3  3  A9 0C                lda #12
0035A5  3  8D 41 11             sta chary
0035A8  3  A9 10                lda #16
0035AA  3  8D 40 11             sta charx
0035AD  3  A9 0D                lda #13
0035AF  3  20 9A 21             jsr dmsg
0035B2  3  60                   rts
0035B3  3               evnt18:
0035B3  3  20 1E 12             jsr cls
0035B6  3                       ; INK command
0035B6  3                       ; PAPER command
0035B6  3  A9 05                lda #5
0035B8  3  8D 41 11             sta chary
0035BB  3  A9 0A                lda #10
0035BD  3  8D 40 11             sta charx
0035C0  3  A9 0E                lda #14
0035C2  3  20 9A 21             jsr dmsg
0035C5  3  60                   rts
0035C6  3               evnt19:
0035C6  3  A9 04                lda #4
0035C8  3  8D 41 11             sta chary
0035CB  3  A9 09                lda #9
0035CD  3  8D 40 11             sta charx
0035D0  3  A9 0F                lda #15
0035D2  3  20 9A 21             jsr dmsg
0035D5  3  60                   rts
0035D6  3  60           ptcusr: rts
0035D7  3               msgdat:
0035D7  3  53 49 4D 50          .byte "SIMPLE TEST GAM",197
0035DB  3  4C 45 20 54  
0035DF  3  45 53 54 20  
0035E7  3  31 2E 20 4B          .byte "1. KEYBOAR",196
0035EB  3  45 59 42 4F  
0035EF  3  41 52 C4     
0035F2  3  32 2E 20 4A          .byte "2. JOYSTICK ",176
0035F6  3  4F 59 53 54  
0035FA  3  49 43 4B 20  
0035FF  3  33 2E 20 4A          .byte "3. JOYSTICK ",177
003603  3  4F 59 53 54  
003607  3  49 43 4B 20  
00360C  3  34 2E 20 52          .byte "4. REDEFINE KEY",211
003610  3  45 44 45 46  
003614  3  49 4E 45 20  
00361C  3  43 4F 4C 4C          .byte "COLLECT THE BARREL THEN RETURN TO THE START SCREEN",160
003620  3  45 43 54 20  
003624  3  54 48 45 20  
00364F  3  50 52 45 53          .byte "PRESS KEY FOR",186
003653  3  53 20 4B 45  
003657  3  59 20 46 4F  
00365D  3  55 D0                .byte "U",208
00365F  3  44 4F 57 CE          .byte "DOW",206
003663  3  4C 45 46 D4          .byte "LEF",212
003667  3  52 49 47 48          .byte "RIGH",212
00366B  3  D4           
00366C  3  4C 49 56 45          .byte "LIVE",211
003670  3  D3           
003671  3  47 41 4D C5          .byte "GAM",197
003675  3  4F 56 45 D2          .byte "OVE",210
003679  3  43 4F 4E 47          .byte "CONGRATULATIONS",161
00367D  3  52 41 54 55  
003681  3  4C 41 54 49  
003689  3  4E 45 57 20          .byte "NEW HIGH SCOR",197
00368D  3  48 49 47 48  
003691  3  20 53 43 4F  
003697  3               nummsg:
003697  3  10                   .byte 16
003698  3               chgfx:
003698  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00369C  3  00 00 00 00  
0036A0  3  FE FE FE 00          .byte 254,254,254,0,239,239,239,0
0036A4  3  EF EF EF 00  
0036A8  3               bprop:
0036A8  3  00                   .byte 0
0036A9  3  02                   .byte 2
0036AA  3               sprgfx:
0036AA  3  07 E0 1F F8          .byte 7,224,31,248,63,252,127,254,127,254,255,255,255,255,255,255,255,255,255,255,255,255,127,254,127,254,63,252,31,248,7,224
0036AE  3  3F FC 7F FE  
0036B2  3  7F FE FF FF  
0036CA  3  01 F8 07 FE          .byte 1,248,7,254,15,255,159,255,159,255,255,255,255,255,255,255,255,255,255,255,255,255,159,255,159,255,15,255,7,254,1,248
0036CE  3  0F FF 9F FF  
0036D2  3  9F FF FF FF  
0036EA  3  00 7E 81 FF          .byte 0,126,129,255,195,255,231,255,231,255,255,255,255,255,255,255,255,255,255,255,255,255,231,255,231,255,195,255,129,255,0,126
0036EE  3  C3 FF E7 FF  
0036F2  3  E7 FF FF FF  
00370A  3  80 1F E0 7F          .byte 128,31,224,127,240,255,249,255,249,255,255,255,255,255,255,255,255,255,255,255,255,255,249,255,249,255,240,255,224,127,128,31
00370E  3  F0 FF F9 FF  
003712  3  F9 FF FF FF  
00372A  3  FF FF 80 01          .byte 255,255,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,255,255
00372E  3  80 01 80 01  
003732  3  80 01 80 01  
00374A  3  FF FF 60 00          .byte 255,255,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,255,255
00374E  3  60 00 60 00  
003752  3  60 00 60 00  
00376A  3  FF FF 18 00          .byte 255,255,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,255,255
00376E  3  18 00 18 00  
003772  3  18 00 18 00  
00378A  3  FF FF 06 00          .byte 255,255,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,255,255
00378E  3  06 00 06 00  
003792  3  06 00 06 00  
0037AA  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
0037AE  3  FF FF FF FF  
0037B2  3  FF FF FF FF  
0037CA  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
0037CE  3  FF FF FF FF  
0037D2  3  FF FF FF FF  
0037EA  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
0037EE  3  FF FF FF FF  
0037F2  3  FF FF FF FF  
00380A  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
00380E  3  FF FF FF FF  
003812  3  FF FF FF FF  
00382A  3               frmlst:
00382A  3  00 01                .byte 0,1
00382C  3  01 02 03 00          .byte 1,2,3,0
003830  3               scdat:
003830  3  64 00 6A 00          .word 100,106,110
003834  3  6E 00        
003836  3  FF 01 17 FF          .byte 255,1,23,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1
00383A  3  00 14 01 01  
00383E  3  FF 00 14 01  
003857  3  FF 00 14 01          .byte 255,0,20,1,1,255,0,20,1,255,0,21,1,255,0,21,1,255,0,21,1,255,0,21,1,1,255,0,20,1,1,255,0,20
00385B  3  01 FF 00 14  
00385F  3  01 FF 00 15  
003879  3  01 01 FF 00          .byte 1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,255,1,23
00387D  3  14 01 01 FF  
003881  3  00 14 01 01  
00389A  3  FF 01 17 FF          .byte 255,1,23,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1
00389E  3  00 14 01 01  
0038A2  3  FF 00 14 01  
0038BB  3  FF 00 14 01          .byte 255,0,20,1,1,255,0,20,1,1,255,0,21,1,255,0,21,1,255,0,21,1,255,0,21,1,255,0,20,1,1,255,0,20
0038BF  3  01 FF 00 14  
0038C3  3  01 01 FF 00  
0038DD  3  01 01 FF 00          .byte 1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,255,1,10
0038E1  3  14 01 01 FF  
0038E5  3  00 14 01 01  
0038FE  3  FF 00 04 FF          .byte 255,0,4,255,1,9
003902  3  01 09        
003904  3  FF 01 09 FF          .byte 255,1,9,255,0,4,255,1,10,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1
003908  3  00 04 FF 01  
00390C  3  0A FF 00 14  
003926  3  FF 00 14 01          .byte 255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20
00392A  3  01 FF 00 14  
00392E  3  01 01 FF 00  
003947  3  01 01 FF 00          .byte 1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20
00394B  3  14 01 01 FF  
00394F  3  00 14 01 01  
00396A  3  01 01 FF 00          .byte 1,1,255,0,20,255,1,23
00396E  3  14 FF 01 17  
003972  3               numsc:
003972  3  03                   .byte 3
003973  3               nmedat:
003973  3  00 00 80 80          .byte 0,0,128,128,1,1,32,88,255
003977  3  01 01 20 58  
00397B  3  FF           
00397C  3  00 00 80 80          .byte 0,0,128,128,1,1,88,160,1,1,136,96,255
003980  3  01 01 58 A0  
003984  3  01 01 88 60  
003989  3  00 00 80 80          .byte 0,0,128,128,1,1,88,160,0,0,128,128,255
00398D  3  01 01 58 A0  
003991  3  00 00 80 80  
003996  3               NUMOBJ = 1
003996  3               objdta:
003996  3  1F F0 2A A8          .byte 31,240,42,168,86,212,64,4,128,2,182,218,182,218,182,218,182,218,182,218,182,218,128,2,64,4,86,212,42,168,31,240,2,160,104,2,160,104
00399A  3  56 D4 40 04  
00399E  3  80 02 B6 DA  
0039BC  3               font:
0039BC  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0039C0  3  00 00 00 00  
0039C4  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
0039C8  3  30 00 30 00  
0039CC  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
0039D0  3  00 00 00 00  
0039D4  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
0039D8  3  6C FE 6C 00  
0039DC  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
0039E0  3  7E 1E 7E 18  
0039E4  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
0039E8  3  30 6E CE 00  
0039EC  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
0039F0  3  7E CC 7E 00  
0039F4  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
0039F8  3  00 00 00 00  
0039FC  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
003A00  3  18 18 0C 00  
003A04  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
003A08  3  30 30 60 00  
003A0C  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
003A10  3  7E 18 3C 00  
003A14  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
003A18  3  7E 18 18 00  
003A1C  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
003A20  3  00 18 18 30  
003A24  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
003A28  3  7E 00 00 00  
003A2C  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
003A30  3  00 38 38 00  
003A34  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
003A38  3  18 30 60 00  
003A3C  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
003A40  3  F6 E6 7C 00  
003A44  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
003A48  3  18 18 7E 00  
003A4C  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
003A50  3  7C C0 FE 00  
003A54  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
003A58  3  06 C6 7C 00  
003A5C  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
003A60  3  D8 FE 18 00  
003A64  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
003A68  3  06 C6 7C 00  
003A6C  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
003A70  3  C6 C6 7C 00  
003A74  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
003A78  3  18 30 30 00  
003A7C  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
003A80  3  C6 C6 7C 00  
003A84  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
003A88  3  7E 06 7C 00  
003A8C  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
003A90  3  00 00 30 00  
003A94  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
003A98  3  00 30 30 60  
003A9C  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
003AA0  3  30 18 0C 00  
003AA4  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
003AA8  3  00 7E 00 00  
003AAC  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
003AB0  3  0C 18 30 00  
003AB4  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
003AB8  3  18 00 18 00  
003ABC  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
003AC0  3  FE C0 7C 00  
003AC4  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
003AC8  3  FE C6 C6 00  
003ACC  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
003AD0  3  C6 C6 FC 00  
003AD4  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
003AD8  3  C0 C6 7C 00  
003ADC  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
003AE0  3  C6 CC F8 00  
003AE4  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
003AE8  3  C0 C0 FE 00  
003AEC  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
003AF0  3  C0 C0 C0 00  
003AF4  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
003AF8  3  DE C6 7C 00  
003AFC  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
003B00  3  C6 C6 C6 00  
003B04  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
003B08  3  18 18 7E 00  
003B0C  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
003B10  3  C6 C6 7C 00  
003B14  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
003B18  3  D8 CC C6 00  
003B1C  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
003B20  3  C0 C0 FE 00  
003B24  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
003B28  3  C6 C6 C6 00  
003B2C  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
003B30  3  DE CE C6 00  
003B34  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
003B38  3  C6 C6 7C 00  
003B3C  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
003B40  3  FC C0 C0 00  
003B44  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
003B48  3  F6 DE 7C 00  
003B4C  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
003B50  3  FC CC C6 00  
003B54  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
003B58  3  06 C6 7C 00  
003B5C  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
003B60  3  30 30 30 00  
003B64  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
003B68  3  C6 C6 7C 00  
003B6C  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
003B70  3  C6 6C 38 00  
003B74  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
003B78  3  C6 FE 6C 00  
003B7C  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
003B80  3  38 6C C6 00  
003B84  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
003B88  3  30 30 30 00  
003B8C  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
003B90  3  30 60 FE 00  
003B94  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
003B98  3  18 18 1E 00  
003B9C  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
003BA0  3  30 18 0C 00  
003BA4  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
003BA8  3  30 30 F0 00  
003BAC  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
003BB0  3  30 30 30 00  
003BB4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
003BB8  3  00 00 00 FF  
003BBC  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
003BC0  3  60 60 FE 00  
003BC4  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
003BC8  3  7C CC 7C 00  
003BCC  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
003BD0  3  66 66 7C 00  
003BD4  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
003BD8  3  60 60 3C 00  
003BDC  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
003BE0  3  CC CC 7C 00  
003BE4  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
003BE8  3  F8 C0 7C 00  
003BEC  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
003BF0  3  30 30 30 00  
003BF4  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
003BF8  3  CC 7C 0C 78  
003BFC  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
003C00  3  CC CC CC 00  
003C04  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
003C08  3  30 30 78 00  
003C0C  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
003C10  3  0C 0C 6C 38  
003C14  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
003C18  3  70 78 6C 00  
003C1C  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
003C20  3  30 30 1C 00  
003C24  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
003C28  3  FC FC FC 00  
003C2C  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
003C30  3  CC CC CC 00  
003C34  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
003C38  3  CC CC 78 00  
003C3C  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
003C40  3  CC F8 C0 C0  
003C44  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
003C48  3  CC 7C 0C 0E  
003C4C  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
003C50  3  60 60 60 00  
003C54  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
003C58  3  78 0C F8 00  
003C5C  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
003C60  3  30 30 1C 00  
003C64  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
003C68  3  CC CC 78 00  
003C6C  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
003C70  3  78 78 30 00  
003C74  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
003C78  3  FC FC 78 00  
003C7C  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
003C80  3  30 78 CC 00  
003C84  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
003C88  3  CC 7C 0C 78  
003C8C  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
003C90  3  30 60 FC 00  
003C94  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
003C98  3  18 18 1E 00  
003C9C  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
003CA0  3  18 18 18 00  
003CA4  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
003CA8  3  30 30 F0 00  
003CAC  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
003CB0  3  00 00 00 00  
003CB4  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
003CB8  3  E3 BB C6 7C  
003CBC  3               
003CBC  1               eind_asm:
003CBC  2               ;------------------------------------------------------
003CBC  2               ; z80.asm
003CBC  2               ; spectrum stuff
003CBC  2               ; adresses
003CBC  2               
003CBC  2               ;ws	 = $60
003CBC  2               
003CBC  2               ;z80_f	 = ws+$00
003CBC  2               ;z80_a	 = ws+$01
003CBC  2               ;z80_af	 = z80_f
003CBC  2               
003CBC  2               ;z80_c	 = ws+$02
003CBC  2               ;z80_b	 = ws+$03
003CBC  2               ;z80_bc	 = z80_c
003CBC  2               
003CBC  2               ;z80_e	 = ws+$04
003CBC  2               ;z80_d	 = ws+$05
003CBC  2               ;z80_de	 = z80_e
003CBC  2               
003CBC  2               ;z80_l	 = ws+$06
003CBC  2               ;z80_h	 = ws+$07
003CBC  2               ;z80_hl	 = z80_l
003CBC  2               
003CBC  2               ;z80_x    = ws+$08
003CBC  2               ;z80_i    = ws+$09
003CBC  2               ;z80_ix	 = z80_x
003CBC  2               
003CBC  2               ;z80_iy	 = ws+$0a
003CBC  2               
003CBC  2               ;z80_fp	 = ws+$0c
003CBC  2               ;z80_ap	 = ws+$0d
003CBC  2               
003CBC  2               ;z80_cp	 = ws+$0e
003CBC  2               ;z80_bp	 = ws+$0f
003CBC  2               ;z80_bcp = z80_cp
003CBC  2               
003CBC  2               ;z80_ep	 = ws+$10
003CBC  2               ;z80_dp	 = ws+$11
003CBC  2               ;z80_dep = z80_ep
003CBC  2               
003CBC  2               ;z80_lp	 = ws+$12
003CBC  2               ;z80_hp	 = ws+$13
003CBC  2               ;z80_hlp = z80_lp
003CBC  2               
003CBC  2               ;z80_sp   = ws+$14
003CBC  2               
003CBC  2               ;z80_reg0 = ws+$16
003CBC  2               ;z80_reg1 = ws+$17
003CBC  2               ;z80_reg2 = ws+$18
003CBC  2               ;z80_reg3 = ws+$19
003CBC  2               
003CBC  2               ;z80_r	 = ws+$1a
003CBC  2               
003CBC  2               ; Contains seperatly 1 bit set
003CBC  2               
003CBC  2               _bitmem0	= $f8
003CBC  2               _bitmem1	= $f9
003CBC  2               _bitmem2	= $fa
003CBC  2               _bitmem3	= $fb
003CBC  2               _bitmem4	= $fc
003CBC  2               _bitmem5	= $fd
003CBC  2               _bitmem6	= $fe
003CBC  2               _bitmem7	= $ff
003CBC  2               	
003CBC  2               ; constants	
003CBC  2               _bitvalue0	= $01	
003CBC  2               _bitvalue1	= $02	
003CBC  2               _bitvalue2	= $04	
003CBC  2               _bitvalue3	= $08	
003CBC  2               _bitvalue4	= $10	
003CBC  2               _bitvalue5	= $20	
003CBC  2               _bitvalue6	= $40	
003CBC  2               _bitvalue7	= $80	
003CBC  2               
003CBC  2               _notbitvalue0	= $fe	
003CBC  2               _notbitvalue1	= $fd	
003CBC  2               _notbitvalue2	= $fb	
003CBC  2               _notbitvalue3	= $f7	
003CBC  2               _notbitvalue4	= $ef	
003CBC  2               _notbitvalue5	= $df	
003CBC  2               _notbitvalue6	= $bf	
003CBC  2               _notbitvalue7	= $7f	
003CBC  2               
003CBC  2               
003CBC  2               ;add_hl_bc:
003CBC  2               ;		lda z80_l
003CBC  2               ;		clc
003CBC  2               ;		adc z80_c
003CBC  2               ;		sta z80_l
003CBC  2               ;		lda z80_h
003CBC  2               ;		adc z80_b
003CBC  2               ;		sta z80_h
003CBC  2               ;		rts
003CBC  2               ;		
003CBC  2               ;add_ix_de:
003CBC  2               ;		lda z80_ix
003CBC  2               ;		clc
003CBC  2               ;		adc z80_e
003CBC  2               ;		sta z80_ix
003CBC  2               ;		lda z80_ix+1
003CBC  2               ;		adc z80_d
003CBC  2               ;		sta z80_ix+1
003CBC  2               ;		rts
003CBC  2               ;		
003CBC  2               ;add_iy_de:
003CBC  2               ;		lda z80_iy
003CBC  2               ;		clc
003CBC  2               ;		adc z80_e
003CBC  2               ;		sta z80_iy
003CBC  2               ;		lda z80_iy+1
003CBC  2               ;		adc z80_d
003CBC  2               ;		sta z80_iy+1
003CBC  2               ;		rts
003CBC  2               ;		
003CBC  2               ;add_hl_de:
003CBC  2               ;		lda z80_l
003CBC  2               ;		clc
003CBC  2               ;		adc z80_e
003CBC  2               ;		sta z80_l
003CBC  2               ;		lda z80_h
003CBC  2               ;		adc z80_d
003CBC  2               ;		sta z80_h
003CBC  2               ;		rts
003CBC  2               ;
003CBC  2               ;add_ix_bc:
003CBC  2               ;		lda z80_ix
003CBC  2               ;		clc
003CBC  2               ;		adc z80_c
003CBC  2               ;		sta z80_ix
003CBC  2               ;		lda z80_ix+1
003CBC  2               ;		adc z80_b
003CBC  2               ;		sta z80_ix+1
003CBC  2               ;		rts
003CBC  2               ;		
003CBC  2               ;add_iy_bc:
003CBC  2               ;		lda z80_iy
003CBC  2               ;		clc
003CBC  2               ;		adc z80_c
003CBC  2               ;		sta z80_iy
003CBC  2               ;		lda z80_iy+1
003CBC  2               ;		adc z80_b
003CBC  2               ;		sta z80_iy+1
003CBC  2               ;		rts
003CBC  2               ;		
003CBC  2               sbc_hl_de:
003CBC  2  A5 66        		lda z80_l
003CBE  2  E5 64        		sbc z80_e
003CC0  2  85 66        		sta z80_l
003CC2  2  A5 67        		lda z80_h
003CC4  2  E5 65        		sbc z80_d
003CC6  2  85 67        		sta z80_h
003CC8  2  60           		rts
003CC9  2               
003CC9  2               ;sbc_hl_bc:
003CC9  2               ;		lda z80_l
003CC9  2               ;		sbc z80_c
003CC9  2               ;		sta z80_l
003CC9  2               ;		lda z80_h
003CC9  2               ;		sbc z80_b
003CC9  2               ;		sta z80_h
003CC9  2               ;		rts
003CC9  2               ;
003CC9  2               ;cmp_hl_bc:
003CC9  2               ;		lda z80_l
003CC9  2               ;		cmp z80_c
003CC9  2               ;		bne cmp_hl_bc_end
003CC9  2               ;		lda z80_h
003CC9  2               ;		cmp z80_b
003CC9  2               ;cmp_hl_bc_end:
003CC9  2               ;		rts
003CC9  2               ;		
003CC9  2               ;cmp_iy_ix:
003CC9  2               ;		lda z80_iy
003CC9  2               ;		cmp z80_ix
003CC9  2               ;		bne cmp_iy_ix_end
003CC9  2               ;		lda z80_iy+1
003CC9  2               ;		cmp z80_ix+1
003CC9  2               ;cmp_iy_ix_end:
003CC9  2               ;		rts
003CC9  2               ;		
003CC9  2               ;dec_hl:
003CC9  2               ;		lda z80_l
003CC9  2               ;		bne dec_hl_no_dec_h
003CC9  2               ;		dec z80_h
003CC9  2               ;dec_hl_no_dec_h:
003CC9  2               ;		dec z80_l
003CC9  2               ;		rts
003CC9  2               ;	
003CC9  2               ;dec_ix:
003CC9  2               ;		lda z80_ix
003CC9  2               ;		bne dec_ix_no_dec_h
003CC9  2               ;		dec z80_ix+1
003CC9  2               ;dec_ix_no_dec_h:
003CC9  2               ;		dec z80_ix
003CC9  2               ;		rts
003CC9  2               ;		
003CC9  2               ;dec_bc:	
003CC9  2               ;		lda z80_c
003CC9  2               ;		bne dec_bc_no_dec_b
003CC9  2               ;		dec z80_b
003CC9  2               ;dec_bc_no_dec_b:
003CC9  2               ;		dec z80_c
003CC9  2               ;		rts
003CC9  2               ;	
003CC9  2               ;dec_de:
003CC9  2               ;		lda z80_e
003CC9  2               ;		bne dec_de_no_dec_d
003CC9  2               ;		dec z80_d
003CC9  2               ;dec_de_no_dec_d:
003CC9  2               ;		dec z80_e
003CC9  2               ;		rts
003CC9  2               ;		
003CC9  2               ;ex_af_afs:
003CC9  2               ;	rts
003CC9  2               ;ex_de_hl:
003CC9  2               ;		lda z80_e
003CC9  2               ;		ldx z80_l
003CC9  2               ;		stx z80_e
003CC9  2               ;		sta z80_l
003CC9  2               ;		lda z80_d
003CC9  2               ;		ldx z80_h
003CC9  2               ;		stx z80_d
003CC9  2               ;		sta z80_h
003CC9  2               ;		rts
003CC9  2               ;
003CC9  2               exx:
003CC9  2  A5 62        		lda z80_c
003CCB  2  A4 6E        		ldy z80_cp
003CCD  2  84 62        		sty z80_c
003CCF  2  85 6E        		sta z80_cp
003CD1  2  A5 63        		lda z80_b
003CD3  2  A4 6F        		ldy z80_bp
003CD5  2  84 63        		sty z80_b
003CD7  2  85 6F        		sta z80_bp
003CD9  2  A5 64        		lda z80_e
003CDB  2  A4 70        		ldy z80_ep
003CDD  2  84 64        		sty z80_e
003CDF  2  85 70        		sta z80_ep
003CE1  2  A5 65        		lda z80_d
003CE3  2  A4 71        		ldy z80_dp
003CE5  2  84 65        		sty z80_d
003CE7  2  85 71        		sta z80_dp		
003CE9  2  A5 80        		lda scraddr
003CEB  2  A4 72        		ldy z80_lp
003CED  2  84 80        		sty scraddr
003CEF  2  85 72        		sta z80_lp
003CF1  2  A5 81        		lda scraddr+1
003CF3  2  A4 73        		ldy z80_hp
003CF5  2  84 81        		sty scraddr+1
003CF7  2  85 73        		sta z80_hp
003CF9  2  60           		rts
003CFA  2               		
003CFA  2               ;ex_sp_hl:
003CFA  2               ;		tsx
003CFA  2               ;		lda $0103,x
003CFA  2               ;		ldy z80_h
003CFA  2               ;		sta z80_h
003CFA  2               ;		tya
003CFA  2               ;		sta $0103,x
003CFA  2               ;		lda $0104,x
003CFA  2               ;		ldy z80_l
003CFA  2               ;		sta z80_l
003CFA  2               ;		tya
003CFA  2               ;		sta $104,x
003CFA  2               ;		rts
003CFA  2               ;		
003CFA  2               ;ldi:
003CFA  2               ;	rts
003CFA  2               ;ldir:
003CFA  2               ;		ldy #$00
003CFA  2               ;		ldx z80_b
003CFA  2               ;		beq ldir_last_page
003CFA  2               ;ldir_loop:		
003CFA  2               ;		lda (z80_hl),y
003CFA  2               ;		sta (z80_de),y
003CFA  2               ;		iny
003CFA  2               ;		bne ldir_loop
003CFA  2               ;		inc z80_h
003CFA  2               ;		inc z80_d
003CFA  2               ;		dex
003CFA  2               ;		bne ldir_loop
003CFA  2               ;ldir_last_page:
003CFA  2               ;		lda z80_c
003CFA  2               ;		beq ldir_end
003CFA  2               ;ldir_last_page_loop:		
003CFA  2               ;		lda (z80_hl),y
003CFA  2               ;		sta (z80_de),y
003CFA  2               ;		iny
003CFA  2               ;		cpy z80_c
003CFA  2               ;		bne ldir_last_page_loop
003CFA  2               ;ldir_end:		
003CFA  2               ;		stx z80_c
003CFA  2               ;		stx z80_b
003CFA  2               ;		tya
003CFA  2               ;		clc
003CFA  2               ;		adc z80_l
003CFA  2               ;		sta z80_l
003CFA  2               ;		bcc *+4
003CFA  2               ;		inc z80_h
003CFA  2               ;		tya
003CFA  2               ;		clc
003CFA  2               ;		adc z80_e
003CFA  2               ;		sta z80_e
003CFA  2               ;		bcc *+4
003CFA  2               ;		inc z80_d
003CFA  2               ;		rts
003CFA  2               ;		
003CFA  2               ;lddr:		ldy #$00
003CFA  2               ;lddr_loop:
003CFA  2               ;		lda (z80_hl),y
003CFA  2               ;		sta (z80_de),y
003CFA  2               ;		jsr dec_hl
003CFA  2               ;		jsr dec_de
003CFA  2               ;		jsr dec_bc
003CFA  2               ;		lda z80_b
003CFA  2               ;		ora z80_c
003CFA  2               ;		bne lddr_loop
003CFA  2               ;		rts
003CFA  2               ;ei:
003CFA  2               ;		rts
003CFA  2               ;di:
003CFA  2               ;		rts
003CFA  2               		
003CFA  2               ;-------------------------------------------------------------
003CFA  2               ; Set bits in bitmem
003CFA  2               ;-------------------------------------------------------------
003CFA  2               	
003CFA  2               z80_init:
003CFA  2  A2 00        	ldx #$00
003CFC  2  A9 01        	lda #$01
003CFE  2               z80_init_loop:		
003CFE  2  95 F8        	sta _bitmem0,x
003D00  2  E8           	inx
003D01  2  0A           	asl a
003D02  2  D0 FA        	bne z80_init_loop
003D04  2  60           	rts
003D05  2               
003D05  2               push_af:
003D05  2               push_bc:
003D05  2               push_de:
003D05  2               push_hl:
003D05  2               
003D05  2               pop_af:
003D05  2               pop_bc:
003D05  2               pop_de:
003D05  2               pop_ix:
003D05  2               pop_hl:
003D05  2               
003D05  2               add_hl_hl:
003D05  2               
003D05  2               inc_bc:
003D05  2               inc_de:
003D05  2               inc_hl:
003D05  2               inc_ix:
003D05  2               inc_sp:
003D05  2               
003D05  2               cpir:
003D05  2               
003D05  2               ex_af_af:
003D05  2               ;	rts
003D05  2               
003D05  1               
