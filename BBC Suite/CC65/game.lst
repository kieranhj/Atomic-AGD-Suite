ca65 V2.9.2 - (C) Copyright 1998-2000 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ; BBC Micro version by Kieran Connell 2018
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $1100	; assembly address _BEEB
000000r 1               	.DEFINE header   0		; Header Wouter Ras emulator
000000r 1               	.DEFINE filenaam "AGD"
000000r 1               
000000r 1               .org asm_code-22*header
001100  1               
001100  1               .IF header
001100  1               ;********************************************************************
001100  1               ; ATM Header for Atom emulator Wouter Ras
001100  1               
001100  1               name_start:
001100  1               	.byte filenaam			; Filename
001100  1               name_end:
001100  1               	.repeat 16-name_end+name_start	; Fill with 0 till 16 chars
001100  1               	  .byte $0
001100  1               	.endrep
001100  1               
001100  1               	.word asm_code			; 2 bytes startaddress
001100  1               	.word exec			; 2 bytes linkaddress
001100  1               	.word eind_asm-start_asm	; 2 bytes filelength
001100  1               
001100  1               ;********************************************************************
001100  1               .ENDIF
001100  1               
001100  1               exec:
001100  1               start_asm:
001100  1               	.include "z80-zp.inc"
001100  1               	.include "game.inc"
001100  2               .segment "ZEROPAGE"
001100  2               
001100  2               ws	 = $60
001100  2               
001100  2               z80_f	 = ws+$00
001100  2               z80_a	 = ws+$01
001100  2               z80_af	 = z80_f
001100  2               
001100  2               z80_c	 = ws+$02
001100  2               z80_b	 = ws+$03
001100  2               z80_bc	 = z80_c
001100  2               
001100  2               z80_e	 = ws+$04
001100  2               z80_d	 = ws+$05
001100  2               z80_de	 = z80_e
001100  2               
001100  2               z80_l	 = ws+$06
001100  2               z80_h	 = ws+$07
001100  2               z80_hl	 = z80_l
001100  2               
001100  2               z80_x    = ws+$08
001100  2               z80_i    = ws+$09
001100  2               z80_ix	 = z80_x
001100  2               
001100  2               z80_iy	 = ws+$0a
001100  2               
001100  2               z80_fp	 = ws+$0c
001100  2               z80_ap	 = ws+$0d
001100  2               
001100  2               z80_cp	 = ws+$0e
001100  2               z80_bp	 = ws+$0f
001100  2               z80_bcp	 = z80_cp
001100  2               
001100  2               z80_ep	 = ws+$10
001100  2               z80_dp	 = ws+$11
001100  2               z80_dep	 = z80_ep
001100  2               
001100  2               z80_lp	 = ws+$12
001100  2               z80_hp	 = ws+$13
001100  2               z80_hlp	 = z80_lp
001100  2               
001100  2               z80_sp   = ws+$14
001100  2               
001100  2               z80_reg0 = ws+$16
001100  2               z80_reg1 = ws+$17
001100  2               z80_reg2 = ws+$18
001100  2               z80_reg3 = ws+$19
001100  2               
001100  2               z80_r	 = ws+$1a
001100  2               
001100  2               
001100  1               	.include "z80.asm"
001100  2               .include "terrahawks.inc" 
001100  2               
001100  3               ; Game engine code --------------------------------------------------------------
001100  3               
001100  3               ; Arcade Game Designer.
001100  3               ; (C) 2008 Jonathan Cauldwell.
001100  3               ; ZX Spectrum Next Engine v0.1.
001100  3               
001100  3               ; Global definitions ------------------------------------------------------------
001100  3               
001100  3               	FONT = font		; Font address
001100  3               
001100  3               ; Block characteristics.
001100  3               
001100  3               	PLATFM = 1		; platform.
001100  3               	WALL = PLATFM + 1	; solid wall.
001100  3               	LADDER = WALL + 1	; ladder.
001100  3               	FODDER = LADDER + 1	; fodder block.
001100  3               	DEADLY = FODDER + 1	; deadly block.
001100  3               	CUSTOM = DEADLY + 1	; custom block.
001100  3               	NUMTYP = CUSTOM + 1	; number of types.
001100  3               
001100  3               ; Sprites.
001100  3               
001100  3               	NUMSPR = 12		; number of sprites.
001100  3               	TABSIZ = 17		; size of each entry.
001100  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
001100  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
001100  3               
001100  3               	var_Type = 0	; sprite type
001100  3               	var_Image = 1	; sprite time number
001100  3               	var_Frame = 2	; sprite frame
001100  3               	var_Y = 3		; sprite y coordinate
001100  3               	var_X = 4		; sprite X coordinate
001100  3               
001100  3               	var_newType = 5	; sprite new type
001100  3               	var_newImage = 6	; sprite new image number
001100  3               	var_newFrame = 7	; sprite new frame
001100  3               	var_newY = 8		; sprite new y coordinate
001100  3               	var_newX = 9		; sprite new x coordinate
001100  3               	
001100  3               	var_Direction = 10	; sprite direction
001100  3               	var_Param1 = 11		; sprite parameter 1
001100  3               	var_Param2 = 12		; sprite parameter 2
001100  3               
001100  3               	var_jumpLo = 13		; sprite jump ptr low
001100  3               	var_jumpHi = 14		; sprite jump ptr high
001100  3               	var_dataLo = 15		; sprite data ptr low
001100  3               	var_dataHi = 16		; sprite data ptr high
001100  3               
001100  3               ; Particle engine.
001100  3               
001100  3               	NUMSHR = 55		; pieces of shrapnel.
001100  3               	SHRSIZ = 6		; bytes per particle.
001100  3               
001100  3               ; Local vars
001100  3               
001100  3               	scraddr	= $80
001100  3               	fntaddr	= $82
001100  3               	tileaddr= $84
001100  3               	bufaddr	= $86
001100  3               	tmp     = $88
001100  3               
001100  3               	scr_l	= $90
001100  3               	scr_r	= $92
001100  3               	scr_txt	= $94
001100  3               
001100  3               ; System constants
001100  3               
001100  3               	ScreenAddr  = $5800	; Startaddress video RAM _BEEB
001100  3               	ScreenSize 	= $8000 - ScreenAddr	; Screen size bytes _BEEB
001100  3               	ScreenRowBytes = 320				; 40 columns
001100  3               
001100  3               	SpriteMaxY	= 185	; used for clipping bottom of screen
001100  3               
001100  3               ;	ScrSelAddr  = $b000	; Screen selection address
001100  3               ;	KeyRowAddr  = $b000	; PIA key matrix row
001100  3               ;	KeyColAddr  = $b001	; PIA key matrix column
001100  3               ;	SpeakerBit  = $b002	; Speaker bit
001100  3               ;	CmdReg      = $b400	; Command register AtoMMC
001100  3               ;	DatReg      = $b401	; Data register AtoMMC 
001100  3               ;	Timer2_Low  = $b808	; Timer 2 low byte
001100  3               ;	Timer2_High = $b809	; Timer 2 high byte
001100  3               
001100  3               ; System calls
001100  3               
001100  3               ;	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
001100  3               ;	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
001100  3               ;	OSRDCH   = $fe94	; get key subroutine
001100  3               ;   READKEY  = $fe71	; scan key matrix subroutine
001100  3               
001100  3               ; _BEEB MOS calls
001100  3               
001100  3               	OSBYTE	 = $fff4
001100  3               	OSFILE	 = $ffdd
001100  3               	OSWRCH	 = $ffee
001100  3               	OSASCI	 = $ffe3
001100  3               	OSWORD	 = $fff1
001100  3               	OSFIND	 = $ffce
001100  3               	OSGBPB	 = $ffd1
001100  3               	OSARGS	 = $ffda
001100  3               
001100  3               ; Conditional compilation flags
001100  3               ; Flags are set in commandline assembly
001100  3               
001100  3               ;	mflag = 0 		; MENU + INV
001100  3               ;	pflag = 0		; Particle engine
001100  3               ;	sflag = 0		; scrollytext
001100  3               ;	fflag = 1		; Fontflag
001100  3               
001100  3               .if iflag
001100  3               	TxtInvert   = $ff	; Invert byte for character printing
001100  3               	ScrFillByte = $ff	; Screen fill byte for CLS
001100  3               .else
001100  3               	TxtInvert   = $00	; Invert byte for character printing
001100  3               	ScrFillByte = $00	; Screen fill byte for CLS
001100  3               .endif
001100  3               	ScrMode     = 4		; Screen mode:	_BEEB (320x256x2)
001100  3               
001100  3               ; Workspace
001100  3               
001100  3               MAP 	= $300				; properties map buffer (3x256 bytes)
001100  3               SCADTB_lb = MAP + $300
001100  3               SCADTB_hb = SCADTB_lb + $100
001100  3               
001100  3               .if pflag
001100  3               SHRAPN 	= $B00 - (NUMSHR * SHRSIZ)	; shrapnel table (55x6 bytes)
001100  3               .endif
001100  3               
001100  3               ;===============================================================
001100  3               ; Game starts here
001100  3               ;===============================================================
001100  3               
001100  3               .segment "CODE"
001100  3               
001100  3               ;--------------------------------------------------------------
001100  3               ; If a font is required...
001100  3               ;--------------------------------------------------------------
001100  3               
001100  3  A9 9B        	lda #<(FONT-256)	; address of font.
001102  3  8D 4F 11     	sta FontPtr
001105  3  A9 4F        	lda #>(FONT-256)
001107  3  8D 50 11     	sta FontPtr+1
00110A  3               
00110A  3               :
00110A  3  20 1A 17     	jsr game	 	; start the game.
00110D  3               
00110D  3  A2 FF        	ldx #$ff
00110F  3  A0 7F        	ldy #$7f
001111  3  A9 81        	lda #$81
001113  3  20 F4 FF     	jsr OSBYTE
001116  3               
001116  3  4C 0A 11     	jmp :-
001119  3               
001119  3  60           	rts				; exit (to BASIC?)
00111A  3               	
00111A  3  00           contrl:	.byte 0			; control, 0 = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
00111B  3  00           joyval:	.byte 0			; joystick reading.
00111C  3  00           frmno:	.byte 0			; selected frame.
00111D  3               
00111D  3               ; Don't change the order of these four.  
00111D  3               ; Menu routine relies on winlft following wintop.
00111D  3               
00111D  3  00           wintop:	.byte WINDOWTOP		; top of window.
00111E  3  00           winlft:	.byte WINDOWLFT		; left edge.
00111F  3  17           winhgt:	.byte WINDOWHGT		; window height.
001120  3  1F           winwid:	.byte WINDOWWID		; window width.
001121  3  01           numob:	.byte NUMOBJ		; number of objects in game.
001122  3               
001122  3               ; Variables start here.
001122  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
001122  3               
001122  3  00           wntopx:	.byte (8 * WINDOWTOP)
001123  3  00           wnlftx:	.byte (8 * WINDOWLFT)
001124  3  A8           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
001125  3  E6           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
001126  3               
001126  3  00           scno:	.byte 0			; present screen number.
001127  3  03           numlif:	.byte 3			; number of lives.
001128  3               
001128  3  00           vara:	.byte 0			; general-purpose variable.
001129  3  00           varb:	.byte 0			; general-purpose variable.
00112A  3  00           varc:	.byte 0			; general-purpose variable.
00112B  3  00           vard:	.byte 0			; general-purpose variable.
00112C  3  00           vare:	.byte 0			; general-purpose variable.
00112D  3  00           varf:	.byte 0			; general-purpose variable.
00112E  3  00           varg:	.byte 0			; general-purpose variable.
00112F  3  00           varh:	.byte 0			; general-purpose variable.
001130  3  00           vari:	.byte 0			; general-purpose variable.
001131  3  00           varj:	.byte 0			; general-purpose variable.
001132  3  00           vark:	.byte 0			; general-purpose variable.
001133  3  00           varl:	.byte 0			; general-purpose variable.
001134  3  00           varm:	.byte 0			; general-purpose variable.
001135  3  00           varn:	.byte 0			; general-purpose variable.
001136  3  00           varo:	.byte 0			; general-purpose variable.
001137  3  00           varp:	.byte 0			; general-purpose variable.
001138  3  00           varq:	.byte 0			; general-purpose variable.
001139  3  00           varr:	.byte 0			; general-purpose variable.
00113A  3  00           vars:	.byte 0			; general-purpose variable.
00113B  3  00           vart:	.byte 0			; general-purpose variable.
00113C  3  00           varu:	.byte 0			; general-purpose variable.
00113D  3  00           varv:	.byte 0			; general-purpose variable.
00113E  3  00           varw:	.byte 0			; general-purpose variable.
00113F  3  00           varz:	.byte 0			; general-purpose variable.
001140  3               
001140  3  00           charx:	.byte 0			; cursor x position.
001141  3  00           chary:	.byte 0			; cursor y position.
001142  3               
001142  3  00           clock:	.byte 0			; last clock reading.
001143  3  FF           varrnd:	.byte 255		; last random number.
001144  3  FE           varobj:	.byte 254		; last object number.
001145  3  FF           varopt:	.byte 255		; last option chosen from menu.
001146  3  FF           varblk:	.byte 255		; block type.
001147  3  00           nexlev:	.byte 0			; next level flag.
001148  3  00           restfl:	.byte 0			; restart screen flag.
001149  3  00           deadf:	.byte 0			; dead flag.
00114A  3  00           gamwon:	.byte 0			; game won flag.
00114B  3  00           dispx:	.byte 0			; cursor x position.
00114C  3  00           dispy:	.byte 0			; cursor y position.
00114D  3               
00114D  3               ; Make sure pointers are arranged in the same order as the data itself.
00114D  3               
00114D  3  E3 4F        frmptr:	.word frmlst         ; sprite frames.
00114F  3               
00114F  3               ;----------------------------------------------------
00114F  3               ; Missing vars 
00114F  3               ;----------------------------------------------------
00114F  3               
00114F  3  00 00        FontPtr:	.byte 0,0
001151  3               
001151  3  00           loopa:		.byte 0
001152  3  00           loopb:		.byte 0
001153  3  00           loopc:		.byte 0
001154  3               
001154  3               ; Assorted game routines which can go in contended memory.
001154  3               
001154  3               ;--------------------------------------------------------------
001154  3               ; Modify for inventory.
001154  3               ; called by the INV command
001154  3               ;
001154  3               ; Input:
001154  3               ;  X   = message nr with objects seperated with ,
001154  3               ;
001154  3               ; Output:
001154  3               ;  OPT = selected line nr of INV menu
001154  3               ;--------------------------------------------------------------
001154  3               
001154  3               .if mflag
001154  3               TmpAddr:	.byte 0,0
001154  3               
001154  3               minve:
001154  3               	lda #<(invdis)		; routine address.
001154  3               	sta mod0+1		; set up menu routine.
001154  3               	sta mod2+1		; set up count routine.
001154  3               	lda #>(invdis)
001154  3               	sta mod0+2
001154  3               	sta mod2+2
001154  3               	lda #<(fopt)		; find option from available objects.
001154  3               	sta mod1+1		; set up routine.
001154  3               	lda #>(fopt)
001154  3               	sta mod1+1+1
001154  3               	jmp dbox		; do menu routine.
001154  3               
001154  3               ;--------------------------------------------------------------
001154  3               ; Modify for menu.
001154  3               ; called by the MENU command
001154  3               ;
001154  3               ; Input:
001154  3               ;  X   = message nr with menu items seperated with ,
001154  3               ;
001154  3               ; Output:
001154  3               ;  OPT = selected line nr of MENU menu
001154  3               ;--------------------------------------------------------------
001154  3               
001154  3               mmenu:
001154  3               	lda #<(always)		; routine address.
001154  3               	sta mod0+1		; set up routine.
001154  3               	sta mod2+1		; set up count routine.
001154  3               	lda #>(always)
001154  3               	sta mod0+2
001154  3               	sta mod2+2
001154  3               
001154  3               	lda #<(fstd)		; standard option selection.
001154  3               	sta mod1+1		; set up routine.
001154  3               	lda #>(fstd)
001154  3               	sta mod1+2
001154  3               
001154  3               ; Drop through into box routine.
001154  3               
001154  3               ;--------------------------------------------------------------
001154  3               ; Work out size of box for message or menu.
001154  3               ;--------------------------------------------------------------
001154  3               
001154  3               dbox:
001154  3               	lda #<(msgdat)		; pointer to messages.
001154  3               	sta z80_l
001154  3               	lda #>(msgdat)
001154  3               	sta z80_h
001154  3               	
001154  3               	jsr getwrd		; get message number.
001154  3               
001154  3               	lda z80_h		; store pointer to message.
001154  3               	sta TmpAddr
001154  3               	lda z80_l
001154  3               	sta TmpAddr+1
001154  3               
001154  3               	lda #1			; height.
001154  3               	sta z80_d
001154  3               	lda #0			; start at object zero.
001154  3               	sta combyt		; store number of object in combyt.
001154  3               	sta z80_e		; maximum width.
001154  3               dbox5:
001154  3               	lda #0			; this line"s width.
001154  3               	sta z80_b
001154  3               mod2:
001154  3               	jsr always		; item in player"s possession?
001154  3               	cmp #255
001154  3               	bne dbox6		; not in inventory, skip this line.
001154  3               	inc z80_d		; add to tally.
001154  3               dbox6:
001154  3               	ldy #0			; get character.
001154  3               	lda (z80_hl),y
001154  3               	sta z80_a
001154  3               	inc z80_l		; next character.
001154  3               	bne :+
001154  3               	inc z80_h
001154  3               :
001154  3               	lda z80_a		; reached end of line?
001154  3               	cmp #','
001154  3               	beq dbox3		; yes.
001154  3               	cmp #13
001154  3               	beq dbox3		; yes.
001154  3               	inc z80_b		; add to this line"s width.
001154  3               	lda z80_a
001154  3               	bmi dbox4		; end of message? yes, end count.
001154  3               	jmp dbox6		; repeat until we find the end.
001154  3               dbox3:
001154  3               	lda z80_e		; maximum line width.
001154  3               	cmp z80_b		; have we exceeded longest so far?
001154  3               	bpl dbox5		; no, carry on looking.
001154  3               	lda z80_b		; make this the widest so far.
001154  3               	sta z80_e
001154  3               	jmp dbox5		; keep looking.
001154  3               dbox4:
001154  3               	lda z80_e		; maximum line width.
001154  3               	cmp z80_b		; have we exceeded longest so far?
001154  3               	bpl dbox8		; no, carry on looking.
001154  3               	lda z80_b		; final line is the longest so far.
001154  3               	sta z80_e
001154  3               dbox8:
001154  3               	dec z80_d		; decrement items found.
001154  3               	bne :+			; total was zero.
001154  3               	jmp dbox15		
001154  3               :
001154  3               	lda z80_e		; longest line.
001154  3               	bne :+			; was it zero?
001154  3               	jmp dbox15		; total was zero.
001154  3               :
001154  3               	sta bwid		; set up size.
001154  3               	lda z80_d
001154  3               	sta blen
001154  3               
001154  3               ;--------------------------------------------------------------
001154  3               ; That's set up our box size.
001154  3               ;--------------------------------------------------------------
001154  3               
001154  3               	lda winhgt		; window height in characters.
001154  3               	sec
001154  3               	sbc z80_d		; subtract height of box.
001154  3               	lsr a			; divide by 2.
001154  3               	clc
001154  3               	adc wintop		; add top edge of window.
001154  3               	sta btop		; set up box top.
001154  3               
001154  3               	lda winwid		; window width in characters.
001154  3               	sec	
001154  3               	sbc z80_e		; subtract box width.
001154  3               	lsr a			; divide by 2.
001154  3               	clc
001154  3               	adc winlft		; add left edge of window.
001154  3               	sta blft		; box left.
001154  3               
001154  3               	lda FontPtr		; font.
001154  3               	sta grbase		; set up for text display.
001154  3               	lda FontPtr+1
001154  3               	sta grbase+1
001154  3               
001154  3               	lda TmpAddr+1		; restore message pointer.
001154  3               	sta z80_l
001154  3               	lda TmpAddr
001154  3               	sta z80_h
001154  3               
001154  3               	lda btop		; box top.
001154  3               	sta dispy		; set display coordinate.
001154  3               	lda #0			; start at object zero.
001154  3               	sta combyt		; store number of object in combyt.
001154  3               dbox2:
001154  3               	lda combyt		; get object number.
001154  3               	sta z80_a
001154  3               mod0:
001154  3               	jsr always		; check inventory for display.
001154  3               	cmp #255
001154  3               	beq :+			
001154  3               	jmp dbox13		; not in inventory, skip this line.
001154  3               :
001154  3               	lda blft		; box left.
001154  3               	sta dispx		; set left display position.
001154  3               	lda bwid		; box width.
001154  3               	sta z80_b		; store width.
001154  3               dbox0:
001154  3               	ldy #0			; get character.
001154  3               	lda (z80_hl),y
001154  3               	cmp #','		; end of line?
001154  3               	beq dbox1		; yes, next one.
001154  3               	cmp #13			; end of line?
001154  3               	beq dbox1		; yes, next one.
001154  3               
001154  3               	dec z80_b		; one less to display.
001154  3               	and #127		; remove terminator.
001154  3               
001154  3               	jsr pchr		; display on screen.
001154  3               
001154  3               	ldy #0
001154  3               	lda (z80_hl),y		; get character.
001154  3               	sta z80_a
001154  3               	inc z80_l		; next character.
001154  3               	bne :+
001154  3               	inc z80_h
001154  3               :
001154  3               	lda z80_a
001154  3               	cmp #128		; end of message?
001154  3               	bmi :+
001154  3               	jmp dbox7		; yes, job done.
001154  3               :
001154  3               	lda z80_b		; chars remaining.
001154  3               	beq :+			; are any left?
001154  3               	jmp dbox0		; yes, continue.
001154  3               :
001154  3               ;---------------------------------------------------
001154  3               ; Reached limit of characters per line.
001154  3               ;---------------------------------------------------
001154  3               
001154  3               dbox9:
001154  3               	ldy #0
001154  3               	lda (z80_hl),y		; get character.
001154  3               	inc z80_l		; next one.
001154  3               	bne :+
001154  3               	inc z80_h
001154  3               :
001154  3               	cmp #','		; another line?
001154  3               	beq dbox10		; yes, do next line.
001154  3               	cmp #13			; another line?
001154  3               	beq dbox10		; yes, do next line.
001154  3               	cmp #128		; end of message?
001154  3               	bcs :+
001154  3               	jmp dbox11		; yes, finish message.
001154  3               :
001154  3               	jmp dbox9
001154  3               
001154  3               ;---------------------------------------------------
001154  3               ; Fill box to end of line.
001154  3               ;---------------------------------------------------
001154  3               
001154  3               dboxf:
001154  3               	lda #32			; space character.
001154  3               	jsr pchr		; display character.
001154  3               	dec z80_b
001154  3               	beq :+
001154  3               	jmp dboxf		; repeat for remaining chars on line.
001154  3               :
001154  3               	rts
001154  3               dbox1:
001154  3               	inc z80_l		; skip character.
001154  3               	bne :+
001154  3               	inc z80_h
001154  3               :
001154  3               	jsr dboxf		; fill box out to right side.
001154  3               dbox10:
001154  3               	inc dispy		; y coordinate down a line next position.
001154  3               	jmp dbox2		; next line.
001154  3               dbox7:
001154  3               	lda z80_b		; chars remaining.
001154  3               	bne :+			; are any left?
001154  3               	jmp dbox11		; no, nothing to draw.
001154  3               :
001154  3               	jsr dboxf		; fill message to line.
001154  3               
001154  3               ;------------------------------------------------------
001154  3               ; Drawn the box menu, now select option.
001154  3               ;------------------------------------------------------
001154  3               
001154  3               dbox11:
001154  3               	lda btop		; box top.
001154  3               	sta dispy		; set bar position.
001154  3               dbox14:
001154  3               	jsr joykey		; get controls.
001154  3               	cmp #$7f		; anything pressed?
001154  3               	bne dbox14		; yes, debounce it.
001154  3               	jsr dbar		; draw bar.
001154  3               dbox12:
001154  3               	jsr joykey		; get controls.
001154  3               	cmp #$7f		; anything pressed?
001154  3               	beq dbox12		; no, nothing.
001154  3               	and #16			; fire button pressed?
001154  3               	bne :+
001154  3               mod1:
001154  3               	jmp fstd		; yes, job done.
001154  3               :
001154  3               	jsr dbar		; delete bar.
001154  3               
001154  3               	lda joyval		; joystick reading.
001154  3               	and #8			; going up?
001154  3               	beq dboxu		; yes, go up.
001154  3               
001154  3               	ldx dispy		; vertical position of bar.
001154  3               	inx			; look down.
001154  3               	txa
001154  3               	sec
001154  3               	sbc btop		; find distance from top.
001154  3               	cmp blen		; top of box.
001154  3               	bne :+
001154  3               	jmp dbox14		; yes, go no further.
001154  3               :
001154  3               	inc dispy		; move bar.
001154  3               	jmp dbox14		; continue.
001154  3               dboxu:
001154  3               	lda dispy		; vertical position of bar.
001154  3               	cmp btop		; are we at the top?
001154  3               	bne :+
001154  3               	jmp dbox14		; yes, go no further.
001154  3               :
001154  3               	dec dispy		; move bar.
001154  3               	jmp dbox14		; continue.
001154  3               fstd:
001154  3               	lda dispy		; bar position.
001154  3               	sec
001154  3               	sbc btop		; find selected option.
001154  3               	sta varopt		; store the option.
001154  3               	jmp redraw		; redraw the screen.
001154  3               
001154  3               ;------------------------------------------------------
001154  3               ; Option not available.  Skip this line.
001154  3               ;------------------------------------------------------
001154  3               
001154  3               dbox13:
001154  3               	ldy #0
001154  3               	lda (z80_hl),y		; get character.
001154  3               	inc z80_l		; next one.
001154  3               	bne :+
001154  3               	inc z80_h
001154  3               :
001154  3               	cmp #','		; another line?
001154  3               	bne :+
001154  3               	jmp dbox2		; yes, do next line.
001154  3               :
001154  3               	cmp #13			; another line?
001154  3               	bne :+
001154  3               	jmp dbox2		; yes, do next line.
001154  3               :
001154  3               
001154  3               	bpl :+			; end of message?
001154  3               	jmp dbox11		; yes, finish message.
001154  3               :
001154  3               	jmp dbox13
001154  3               dbox15:
001154  3               	lda TmpAddr		; pop message pointer from the stack.
001154  3               	sta z80_h
001154  3               	lda TmpAddr+1
001154  3               	sta z80_l
001154  3               	rts
001154  3               
001154  3               ;------------------------------------------------------
001154  3               ; Invert bar
001154  3               ;------------------------------------------------------
001154  3               
001154  3               dbar:
001154  3               	lda blft		; box left.
001154  3               	sta dispx		; set display coordinate.
001154  3               	jsr gprad		; get printing address.
001154  3               
001154  3               	lda bwid		; box width.
001154  3               	sta z80_c		; loop counter in c.
001154  3               	lda z80_h		
001154  3               	sta z80_d		; store screen address high byte.
001154  3               dbar1:
001154  3               	ldx #7			; pixel height in b.
001154  3               dbar0:
001154  3               	ldy scrtab,x
001154  3               	lda (scraddr),y		; get screen byte.
001154  3               	eor #255		; reverse all bits.
001154  3               	sta (scraddr),y		; write back to screen.
001154  3               	dex			; next line down.
001154  3               	bpl dbar0		; draw rest of character.
001154  3               
001154  3               	clc
001154  3               	lda scraddr		; one char right.
001154  3               	adc #8
001154  3               	sta scraddr
001154  3               	bcc :+
001154  3               	inc scraddr+1
001154  3               :
001154  3               
001154  3               	dec z80_c		; decrement character counter.
001154  3               	beq :+
001154  3               	jmp dbar1		; repeat for whole line.
001154  3               :
001154  3               	rts
001154  3               
001154  3               ;------------------------------------------------------
001154  3               ; Point to object
001154  3               ;
001154  3               ; Input:
001154  3               ;  -
001154  3               ;
001154  3               ; Output:
001154  3               ;  A = object number, A=255 if already in possession
001154  3               ;------------------------------------------------------
001154  3               
001154  3               invdis:
001154  3               	lda z80_l		; store message text pointer.
001154  3               	pha
001154  3               	lda z80_h
001154  3               	pha
001154  3               	lda combyt		; object number.
001154  3               	inc combyt		; ready for next one.
001154  3               	jsr gotob		; check if we have object.
001154  3               	tay
001154  3               	pla
001154  3               	sta z80_h
001154  3               	pla
001154  3               	sta z80_l
001154  3               	tya
001154  3               	rts
001154  3               
001154  3               ;------------------------------------------------------
001154  3               ; Find option selected.
001154  3               ;
001154  3               ; Input:
001154  3               ;  -
001154  3               ;
001154  3               ; Output:
001154  3               ;  OPT = selected object
001154  3               ;------------------------------------------------------
001154  3               
001154  3               fopt:
001154  3               	lda dispy
001154  3               	sec
001154  3               	sbc btop		; find selected option.
001154  3               	sta tmp+2		; option selected in b register.
001154  3               	inc tmp+2
001154  3               
001154  3               	lda #0			; set to first item.
001154  3               	sta combyt		; object number.
001154  3               fopt0:
001154  3               	jsr fobj		; find next object in inventory.
001154  3               	dec tmp+2
001154  3               	bne fopt0		; repeat for relevant steps down the list.
001154  3               
001154  3               	lda combyt		; get option.
001154  3               	sta varopt		; store the option.
001154  3               	dec varopt		; one less, due to where we increment combyt.
001154  3               	jmp redraw		; redraw the screen.
001154  3               fobj:
001154  3               	ldy combyt		; object number.
001154  3               	inc combyt		; ready for next item.
001154  3               	tya
001154  3               	jsr gotob		; do we have this item?
001154  3               	cmp #255
001154  3               	bne :+
001154  3               	rts
001154  3               :
001154  3               	jmp fobj		; yes, it's on the list.
001154  3               
001154  3               bwid:	.byte 0              ; box/menu width.
001154  3               blen:	.byte 0              ; box/menu height.
001154  3               btop:	.byte 0              ; box coordinates.
001154  3               blft:	.byte 0
001154  3               .endif
001154  3               
001154  3               ;----------------------------------------------------
001154  3               ; Wait for keypress.
001154  3               ;----------------------------------------------------
001154  3               
001154  3               prskey:
001154  3  8A           	txa
001155  3  48           	pha
001156  3               prsloop:
001156  3  20 BF 11     	jsr vsync
001159  3               ; _BEEB KEYS
001159  3  A9 79        	lda #$79
00115B  3  A2 01        	ldx #$01
00115D  3  20 F4 FF     	jsr OSBYTE
001160  3  E0 FF        	cpx #$ff
001162  3  F0 F2        	beq prsloop		; wait until key pressed
001164  3  68           	pla
001165  3  AA           	tax
001166  3  60           	rts
001167  3               
001167  3               ;----------------------------------------------------
001167  3               ; Delay routine 1/50 sec
001167  3               ;
001167  3               ; Wait 1/60 sec = 16666 usec
001167  3               ; Wait 208 x 16 =  3328 usec
001167  3               ;                 19994 usec
001167  3               ; rts           =     6 usec
001167  3               ; Total         = 20000 usec
001167  3               ;----------------------------------------------------
001167  3               
001167  3               delay:
001167  3  8D E1 1D     	sta xtmp
00116A  3               del_loop:
00116A  3  A9 13        	lda #19
00116C  3  20 F4 FF     	jsr OSBYTE		; wait for vsync _BEEB
00116F  3               
00116F  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
001171  3               delay1:
001171  3  61 80        	adc ($80,x)		;	 6 usec
001173  3  61 80        	adc ($80,x)		;	 6 usec
001175  3  88           	dey			;	 2 usec
001176  3  D0 F9        	bne delay1		;	 2 usec
001178  3  EA           	nop			; 2 usec
001179  3  EA           	nop			; 2 usec
00117A  3               				; tot: 20000 usec
00117A  3  CE E1 1D     	dec xtmp
00117D  3  D0 EB        	bne del_loop
00117F  3  60           	rts
001180  3               
001180  3               ;----------------------------------------------------
001180  3               ; Clear sprite table.
001180  3               ;
001180  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
001180  3               ;----------------------------------------------------
001180  3               
001180  3               xspr:
001180  3  A9 FF        	lda #255		; clear byte.
001182  3  A2 00        	ldx #0			; length of table.
001184  3               xspr0:
001184  3  9D 2E 2A     	sta sprtab,x		; sprite table.
001187  3  E8           	inx			; move to next byte.
001188  3  E0 CC        	cpx #SPRBUF
00118A  3  D0 F8        	bne xspr0		; repeat for rest of table.
00118C  3  60           	rts
00118D  3               
00118D  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00118D  3               ; Sound, NOT IMPLEMENTED!!!
00118D  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00118D  3               ;
00118D  3               ;silenc:
00118D  3               ;	jsr silen1 		; silence channel 1.
00118D  3               ;	jsr silen2 		; silence channel 2.
00118D  3               ;	jsr silen3 		; silence channel 3.
00118D  3               ;	jmp plsnd 		; play all channels to switch them off.
00118D  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00118D  3               
00118D  3               ;-------------------------------------------------------------
00118D  3               ; Initialise all objects.
00118D  3               ;
00118D  3               ; Reset current room,y,x to start room,y,x for all objects
00118D  3               ;-------------------------------------------------------------
00118D  3               
00118D  3               iniob:
00118D  3  A9 75        	lda #<objdta 		; objects table.
00118F  3  85 68        	sta z80_x
001191  3  A9 50        	lda #>objdta
001193  3  85 69        	sta z80_i
001195  3               
001195  3  AE 21 11     	ldx numob 		; number of objects in the game.
001198  3               iniob0:
001198  3  A0 23        	ldy #35
00119A  3  B1 68        	lda (z80_ix),y 		; start screen.
00119C  3  A0 20        	ldy #32
00119E  3  91 68        	sta (z80_ix),y 		; set start screen.
0011A0  3               
0011A0  3  A0 24        	ldy #36
0011A2  3  B1 68        	lda (z80_ix),y 		; find start y.
0011A4  3  A0 21        	ldy #33
0011A6  3  91 68        	sta (z80_ix),y 		; set start y.
0011A8  3               
0011A8  3  A0 25        	ldy #37
0011AA  3  B1 68        	lda (z80_ix),y 		; get initial x.
0011AC  3  A0 22        	ldy #34
0011AE  3  91 68        	sta (z80_ix),y 		; set x coord.
0011B0  3               
0011B0  3  18           	clc 			; point to next object.
0011B1  3  A5 68        	lda z80_x
0011B3  3  69 26        	adc #38			; distance between objects.
0011B5  3  85 68        	sta z80_x
0011B7  3  90 02        	bcc :+
0011B9  3  E6 69        	inc z80_i
0011BB  3               :
0011BB  3  CA           	dex 			; repeat.
0011BC  3  D0 DA        	bne iniob0
0011BE  3               
0011BE  3  60           	rts
0011BF  3               
0011BF  3               ;-------------------------------------------------------------
0011BF  3               ; Screen synchronisation.
0011BF  3               ;
0011BF  3               ;  - read joystick/keyboard
0011BF  3               ;  - handle sound
0011BF  3               ;  - sync framerate with clock
0011BF  3               ;  - handle shrapnel every even frame
0011BF  3               ;-------------------------------------------------------------
0011BF  3               
0011BF  3               vsync:
0011BF  3  48           	pha
0011C0  3  98           	tya
0011C1  3  48           	pha
0011C2  3  8A           	txa
0011C3  3  48           	pha
0011C4  3  20 43 21     	jsr joykey		; read joystick/keyboard.
0011C7  3               vsync1:
0011C7  3               ;	lda Timer2_High		; sync framerate with clock
0011C7  3               ;	bne vsync1
0011C7  3               ;	lda #>50000
0011C7  3               ;	sta Timer2_High
0011C7  3               ;	lda #<50000
0011C7  3               ;	sta Timer2_Low
0011C7  3               
0011C7  3  A9 13        	lda #19
0011C9  3  20 F4 FF     	jsr OSBYTE		; _BEEB vsync
0011CC  3               
0011CC  3  AD 42 11     	lda clock
0011CF  3  29 01        	and #1
0011D1  3  D0 03        	bne:+
0011D3  3  20 84 12     	jsr proshr		; handle shrapnel every even frame
0011D6  3               :
0011D6  3  AD E1 11     	lda sndtyp
0011D9  3  F0 00        	beq sndskip
0011DB  3               ; _BEEB TODO SOUND
0011DB  3               ;sndloop:
0011DB  3               ;	lda SpeakerBit		; handle sound
0011DB  3               ;	ldy sndtyp
0011DB  3               ;sndwait:
0011DB  3               ;	dey
0011DB  3               ;	bne sndwait
0011DB  3               ;	eor #4
0011DB  3               ;	sta SpeakerBit
0011DB  3               ;	dec sndtyp
0011DB  3               ;	bne sndloop
0011DB  3               sndskip: 
0011DB  3  68           	pla
0011DC  3  AA           	tax
0011DD  3  68           	pla
0011DE  3  A8           	tay
0011DF  3  68           	pla
0011E0  3  60           	rts
0011E1  3               
0011E1  3  00           sndtyp:	.byte 0
0011E2  3               
0011E2  3               ;-----------------------------------------------
0011E2  3               ; Redraw the screen.
0011E2  3               ;
0011E2  3               ; Remove old copy of all sprites for redraw.
0011E2  3               ;-----------------------------------------------
0011E2  3               
0011E2  3               redraw:
0011E2  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
0011E4  3  48           	pha
0011E5  3  A5 68        	lda z80_x
0011E7  3  48           	pha
0011E8  3               
0011E8  3  20 18 1E     	jsr droom		; show screen layout.
0011EB  3  20 17 19     	jsr shwob		; draw objects.
0011EE  3               numsp0:
0011EE  3  A9 0C        	lda #NUMSPR		; sprites to draw.
0011F0  3  85 88        	sta tmp
0011F2  3               
0011F2  3  A9 2E        	lda #<sprtab		; sprite table.
0011F4  3  85 68        	sta z80_x
0011F6  3  A9 2A        	lda #>sprtab
0011F8  3  85 69        	sta z80_i
0011FA  3               redrw0:
0011FA  3  A0 00        	ldy #0
0011FC  3  B1 68        	lda (z80_ix),y		; old sprite type.
0011FE  3  C9 FF        	cmp #255		; is it enabled?
001200  3  F0 0B        	beq redrw1 		; no, find next one.
001202  3               
001202  3  A0 03        	ldy #var_Y
001204  3  B1 68        	lda (z80_ix),y 		; sprite y.
001206  3  C9 B1        	cmp #177		; beyond maximum?
001208  3  B0 03        	bcs redrw1		; yes, nothing to draw.
00120A  3               
00120A  3  20 41 25     	jsr sspria		; show single sprite.
00120D  3               
00120D  3               redrw1:
00120D  3  18           	clc			; next sprite.
00120E  3  A5 68        	lda z80_x
001210  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
001212  3  85 68        	sta z80_x
001214  3  90 02        	bcc :+
001216  3  E6 69        	inc z80_i
001218  3               :
001218  3  C6 88        	dec tmp			; repeat for remaining sprites.
00121A  3  D0 DE        	bne redrw0
00121C  3               
00121C  3               rpblc1:
00121C  3               ;	jsr dshrp		; redraw shrapnel.
00121C  3               
00121C  3  68           	pla			; retrieve sprite pointer.
00121D  3  85 68        	sta z80_x
00121F  3  68           	pla
001220  3  85 69        	sta z80_i
001222  3               
001222  3  60           	rts
001223  3               
001223  3               ;----------------------------------------------------------------------
001223  3               ; Clear screen routine.
001223  3               ;
001223  3               ; Fill screenmem $8000-$97ff with ScrFillByte
001223  3               ;----------------------------------------------------------------------
001223  3               
001223  3               cls:
001223  3  A9 58        	lda #>ScreenAddr		; screen address.
001225  3  8D 2E 12     	sta clsloop+2
001228  3  A9 00        	lda #ScrFillByte
00122A  3  A0 00        	ldy #0
00122C  3               clsloop:
00122C  3  99 00 58     	sta ScreenAddr,y
00122F  3  C8           	iny
001230  3  D0 FA        	bne clsloop
001232  3  EE 2E 12     	inc clsloop+2
001235  3  AE 2E 12     	ldx clsloop+2
001238  3  E0 80        	cpx #>(ScreenAddr+ScreenSize)		; _BEEB
00123A  3  D0 F0        	bne clsloop
00123C  3  60           	rts
00123D  3               
00123D  3               ;----------------------------------------------------------------------
00123D  3               ; Atomic palette is static 
00123D  3               ;----------------------------------------------------------------------
00123D  3               
00123D  3               setpal:
00123D  3  60           	rts
00123E  3               
00123E  3               ;----------------------------------------------------------------------
00123E  3               ; FODDER check
00123E  3               ;----------------------------------------------------------------------
00123E  3               
00123E  3               fdchk:
00123E  3  A0 00        	ldy #0
001240  3  B1 66        	lda (z80_hl),y	 	; fetch cell.
001242  3  C9 04        	cmp #FODDER 		; is it fodder?
001244  3  F0 01        	beq :+
001246  3  60           	rts 			; no.
001247  3               :
001247  3  A9 00        	lda #0
001249  3  A0 00        	ldy #0
00124B  3  91 66        	sta (z80_hl),y 		; rewrite block type.
00124D  3               
00124D  3  A5 67        	lda z80_h		; store pointer to block.
00124F  3  48           	pha
001250  3  A5 66        	lda z80_l
001252  3  48           	pha
001253  3               
001253  3  38           	sec			; set carry flag for subtraction.
001254  3  A5 66        	lda z80_l 		; find simple displacement for block.
001256  3  E9 00        	sbc #<MAP
001258  3  85 66        	sta z80_l
00125A  3  A5 67        	lda z80_h
00125C  3  E9 03        	sbc #>MAP
00125E  3  85 67        	sta z80_h
001260  3               
001260  3  A5 66        	lda z80_l		; low byte is y coordinate.
001262  3  29 1F        	and #31 		; column position 0 - 31.
001264  3  8D 4B 11     	sta dispx		; set up x position.
001267  3               
001267  3  06 66        	asl z80_l		; multiply displacement by 8.
001269  3  26 67        	rol z80_h
00126B  3  06 66        	asl z80_l
00126D  3  26 67        	rol z80_h
00126F  3  06 66        	asl z80_l
001271  3  26 67        	rol z80_h
001273  3               
001273  3  A5 67        	lda z80_h		; x coordinate now in h.
001275  3  8D 4C 11     	sta dispy		; set the display coordinate.
001278  3               
001278  3  A9 00        	lda #0 			; block to write.
00127A  3  20 F4 1C     	jsr pattr 		; write block.
00127D  3               
00127D  3  68           	pla 			; restore block pointer.
00127E  3  85 66        	sta z80_l
001280  3  68           	pla
001281  3  85 67        	sta z80_h
001283  3               
001283  3  60           	rts
001284  3               
001284  3               ;----------------------------------------------------
001284  3               ; Scrolly text and puzzle variables.
001284  3               ;----------------------------------------------------
001284  3               
001284  3               .if sflag
001284  3               txtbit:	.byte 128		; bit to write.
001284  3               txtwid:	.byte 16		; width of ticker message.
001284  3               txtpos:	.word msgdat
001284  3               txtini:	.word msgdat
001284  3               txtscr:	.word ScreenAddr
001284  3               .endif
001284  3               
001284  3               ;----------------------------------------------------
001284  3               ; Specialist routines.
001284  3               ; Process shrapnel.
001284  3               ;----------------------------------------------------
001284  3               proshr:
001284  3               .if pflag
001284  3  A9 B6        	lda #<SHRAPN		; table.
001286  3  85 68        	sta z80_x
001288  3  A9 09        	lda #>SHRAPN
00128A  3  85 69        	sta z80_i
00128C  3               
00128C  3  A9 37        	lda #NUMSHR		; shrapnel pieces to process.
00128E  3  8D AC 12     	sta shrctr
001291  3               prosh0:
001291  3  A0 00        	ldy #0
001293  3  B1 68        	lda (z80_ix),y		; on/off marker.
001295  3  0A           	asl a
001296  3               proshx:
001296  3  B0 03        	bcs :+
001298  3  20 AD 12     	jsr prosh1 		; on, so process it.
00129B  3               :
00129B  3  18           	clc
00129C  3  A5 68        	lda z80_x
00129E  3  69 06        	adc #SHRSIZ
0012A0  3  85 68        	sta z80_x
0012A2  3  90 02        	bcc :+
0012A4  3  E6 69        	inc z80_i
0012A6  3               :
0012A6  3  CE AC 12     	dec shrctr		; round again.
0012A9  3  D0 E6        	bne prosh0
0012AB  3               .endif
0012AB  3               .if sflag
0012AB  3               	jsr scrly
0012AB  3               .endif
0012AB  3  60           	rts
0012AC  3               
0012AC  3               .if pflag
0012AC  3  00           shrctr:	.byte 0
0012AD  3               
0012AD  3               ;----------------------------------------------------
0012AD  3               ; Proces shrapnel piece
0012AD  3               ;----------------------------------------------------
0012AD  3               
0012AD  3               prosh1:
0012AD  3  20 A4 13     	jsr plot 		; delete the pixel.
0012B0  3               
0012B0  3  A9 DA        	lda #<shrptr		; shrapnel routine pointers.
0012B2  3  85 66        	sta z80_l
0012B4  3  A9 12        	lda #>shrptr
0012B6  3  85 67        	sta z80_h
0012B8  3               
0012B8  3  A0 00        	ldy #0
0012BA  3  B1 68        	lda (z80_ix),y		; restore shrapnel type.
0012BC  3  20 CB 12     	jsr prosh2 		; run the routine.
0012BF  3  20 6E 13     	jsr chkxy		; check x and y are good before we redisplay.
0012C2  3               
0012C2  3  A9 06        	lda #<SHRSIZ 		; distance to next.
0012C4  3  85 64        	sta z80_e
0012C6  3  A9 00        	lda #>SHRSIZ
0012C8  3  85 65        	sta z80_d
0012CA  3  60           	rts
0012CB  3               
0012CB  3               ;----------------------------------------------------
0012CB  3               ; Run the routine
0012CB  3               ;----------------------------------------------------
0012CB  3               
0012CB  3               prosh2:
0012CB  3  0A           	asl a 			; 2 bytes per address.
0012CC  3  A8           	tay
0012CD  3  B9 DA 12     	lda shrptr,y
0012D0  3  85 66        	sta z80_l
0012D2  3  B9 DB 12     	lda shrptr+1,y 		; fetch high byte from table.
0012D5  3  85 67        	sta z80_h
0012D7  3  6C 66 00     	jmp (z80_hl) 		; jump to routine.
0012DA  3               
0012DA  3               ;----------------------------------------------------
0012DA  3               ; Paricle routine table
0012DA  3               ;----------------------------------------------------
0012DA  3               
0012DA  3  77 14        shrptr:	.word laser		; laser.
0012DC  3  25 14        	.word trail		; vapour trail.
0012DE  3  EA 12        	.word shrap		; shrapnel from explosion.
0012E0  3  46 13        	.word dotl		; horizontal starfield left.
0012E2  3  50 13        	.word dotr		; horizontal starfield right.
0012E4  3  5A 13        	.word dotu		; vertical starfield up.
0012E6  3  64 13        	.word dotd		; vertical starfield down.
0012E8  3  B6 38        	.word ptcusr		; user particle.
0012EA  3               
0012EA  3               ;----------------------------------------------------
0012EA  3               ; Explosion shrapnel.
0012EA  3               ;----------------------------------------------------
0012EA  3               
0012EA  3               shrap:
0012EA  3  A0 01        	ldy #1
0012EC  3  B1 68        	lda (z80_ix),y 		; get the angle.
0012EE  3  18           	clc
0012EF  3  69 E5        	adc #<shrsin		; shrapnel sine table.
0012F1  3  85 66        	sta z80_l
0012F3  3  A9 13        	lda #>shrsin
0012F5  3  69 00        	adc #0
0012F7  3  85 67        	sta z80_h
0012F9  3               
0012F9  3  A0 00        	ldy #0
0012FB  3  B1 66        	lda (z80_hl),y 		; fetch value from table.
0012FD  3  85 64        	sta z80_e
0012FF  3  E6 66        	inc z80_l 		; next byte of table.
001301  3  D0 02        	bne :+
001303  3  E6 67        	inc z80_h
001305  3               :
001305  3  A0 00        	ldy #0
001307  3  B1 66        	lda (z80_hl),y		; fetch value from table.
001309  3  85 65        	sta z80_d
00130B  3  E6 66        	inc z80_l		; next byte of table.
00130D  3  D0 02        	bne :+
00130F  3  E6 67        	inc z80_h
001311  3               :
001311  3  A0 00        	ldy #0
001313  3  B1 66        	lda (z80_hl),y 		; fetch value from table.
001315  3  85 62        	sta z80_c
001317  3  E6 66        	inc z80_l 		; next byte of table.
001319  3  D0 02        	bne :+
00131B  3  E6 67        	inc z80_h
00131D  3               :
00131D  3  A0 00        	ldy #0
00131F  3  B1 66        	lda (z80_hl),y 		; fetch value from table.
001321  3  85 63        	sta z80_b
001323  3               
001323  3  A0 02        	ldy #2
001325  3  B1 68        	lda (z80_ix),y 		; x coordinate in hl.
001327  3  18           	clc
001328  3  65 64        	adc z80_e		; add sine lb
00132A  3  91 68        	sta (z80_ix),y		; store new coordinate lb.
00132C  3  A0 03        	ldy #3
00132E  3  B1 68        	lda (z80_ix),y
001330  3  65 65        	adc z80_d		; add sine hb
001332  3  91 68        	sta (z80_ix),y		; store new coordinate hb.
001334  3               
001334  3  A0 04        	ldy #4
001336  3  B1 68        	lda (z80_ix),y	 	; y coordinate in hl.
001338  3  18           	clc
001339  3  65 62        	adc z80_c		; add cosine lb
00133B  3  91 68        	sta (z80_ix),y		; store new coordinate lb.
00133D  3  A0 05        	ldy #5
00133F  3  B1 68        	lda (z80_ix),y
001341  3  65 63        	adc z80_b		; add cosine lb
001343  3  91 68        	sta (z80_ix),y		; store new coordinate hb.
001345  3               
001345  3  60           	rts
001346  3               
001346  3               ;----------------------------------------------------
001346  3               ; Move dots
001346  3               ;----------------------------------------------------
001346  3               
001346  3               dotl:
001346  3  A0 05        	ldy #5
001348  3  B1 68        	lda (z80_ix),y
00134A  3  38           	sec
00134B  3  E9 01        	sbc #1		 	; move left.
00134D  3  91 68        	sta (z80_ix),y
00134F  3  60           	rts
001350  3               dotr:
001350  3  A0 05        	ldy #5
001352  3  B1 68        	lda (z80_ix),y
001354  3  18           	clc
001355  3  69 01        	adc #1		 	; move left.
001357  3  91 68        	sta (z80_ix),y
001359  3  60           	rts
00135A  3               dotu:
00135A  3  A0 03        	ldy #3
00135C  3  B1 68        	lda (z80_ix),y
00135E  3  38           	sec
00135F  3  E9 01        	sbc #1		 	; move up.
001361  3  91 68        	sta (z80_ix),y
001363  3  60           	rts
001364  3               dotd:
001364  3  A0 03        	ldy #3
001366  3  B1 68        	lda (z80_ix),y
001368  3  18           	clc
001369  3  69 01        	adc #1			; move down.
00136B  3  91 68        	sta (z80_ix),y
00136D  3  60           	rts
00136E  3               
00136E  3               ;----------------------------------------------------
00136E  3               ; Check if coordinates are ok before redrawing at new position.
00136E  3               ;
00136E  3               ; left:   X>L		X=L	Ok
00136E  3               ; right:  R+15>X	X=R	Ok
00136E  3               ; top:    Y>T		Y=T	Ok
00136E  3               ; bottom: B+15>Y	Y=B	Ok
00136E  3               ;----------------------------------------------------
00136E  3               
00136E  3               chkxy:
00136E  3               
00136E  3               ; top:    Y>T		Y=T	Ok
00136E  3               
00136E  3  A0 03        	ldy #3
001370  3  B1 68        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
001372  3  CD 22 11     	cmp wntopx		; window top.
001375  3  B0 03        	bcs :+			; compare with top window limit.
001377  3  4C DE 13     	jmp kilshr		; out of window, kill shrapnel.
00137A  3               :
00137A  3               ; left:   X>L		X=L	Ok
00137A  3               
00137A  3  A0 05        	ldy #5
00137C  3  B1 68        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
00137E  3  CD 23 11     	cmp wnlftx		; left edge.
001381  3  B0 03        	bcs :+			; compare with left window limit.
001383  3  4C DE 13     	jmp kilshr		; out of window, kill shrapnel.
001386  3               :
001386  3               ; bottom: B+15>Y	Y=B	Ok
001386  3               
001386  3  AD 24 11     	lda wnbotx		; point to bottom.
001389  3  18           	clc
00138A  3  69 0F        	adc #15
00138C  3  A0 03        	ldy #3
00138E  3  D1 68        	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
001390  3  B0 03        	bcs :+			; compare with shrapnel x coordinate.
001392  3  4C DE 13     	jmp kilshr		; off screen, kill shrapnel..
001395  3               :
001395  3               ; right:  R+15>X	X=R	Ok
001395  3               
001395  3  AD 25 11     	lda wnrgtx		; point to right edge.
001398  3  18           	clc
001399  3  69 0F        	adc #15
00139B  3  A0 05        	ldy #5
00139D  3  D1 68        	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
00139F  3  B0 03        	bcs :+			; compare with window limit.
0013A1  3  4C DE 13     	jmp kilshr		; off screen, kill shrapnel.
0013A4  3               :
0013A4  3               
0013A4  3               ;----------------------------------------------------
0013A4  3               ; Drop through.
0013A4  3               ; Display shrapnel.
0013A4  3               ;----------------------------------------------------
0013A4  3               
0013A4  3               plot:
0013A4  3  A0 03        	ldy #3
0013A6  3  B1 68        	lda (z80_ix),y		; y integer.
0013A8  3  8D 4C 11     	sta dispy	 	; workspace coordinates.
0013AB  3  A0 05        	ldy #5
0013AD  3  B1 68        	lda (z80_ix),y	 	; x integer.
0013AF  3  8D 4B 11     	sta dispx 		; workspace coordinates.
0013B2  3               
0013B2  3  A0 00        	ldy #0
0013B4  3  B1 68        	lda (z80_ix),y 		; type.
0013B6  3  D0 03        	bne :+			; is it a laser?
0013B8  3  4C D2 13     	jmp plot1 		; yes, draw laser instead.
0013BB  3               :
0013BB  3               plot0:
0013BB  3  AD 4B 11     	lda dispx		; which pixel within byte do we
0013BE  3  29 07        	and #7			; want to set first?
0013C0  3  A8           	tay
0013C1  3  B9 AA 14     	lda dots,y 		; table of small pixel positions.
0013C4  3  85 64        	sta z80_e 		; get value.
0013C6  3               
0013C6  3  20 23 25     	jsr scadd 		; screen address.
0013C9  3  A0 00        	ldy #0
0013CB  3  B1 80        	lda (scraddr),y		; see what's already there.
0013CD  3  45 64        	eor z80_e
0013CF  3  91 80        	sta (scraddr),y 	; put back on screen.
0013D1  3  60           	rts
0013D2  3               
0013D2  3               plot1:
0013D2  3  20 23 25     	jsr scadd 		; screen address.
0013D5  3  A0 00        	ldy #0
0013D7  3  B1 80        	lda (scraddr),y 	; fetch byte there.
0013D9  3  49 FF        	eor #255 		; toggle all bits.
0013DB  3  91 80        	sta (scraddr),y 	; new byte.
0013DD  3  60           	rts
0013DE  3               
0013DE  3               ;----------------------------------------------------
0013DE  3               ; Switch off shrapnel
0013DE  3               ;----------------------------------------------------
0013DE  3               
0013DE  3               kilshr:
0013DE  3  A9 80        	lda #128
0013E0  3  A0 00        	ldy #0
0013E2  3  91 68        	sta (z80_ix),y	; switch off shrapnel.
0013E4  3  60           	rts
0013E5  3               
0013E5  3               ;----------------------------------------------------
0013E5  3               ; Sine/cosine table
0013E5  3               ;----------------------------------------------------
0013E5  3               
0013E5  3  00 00 00 04  shrsin:	.word 0,1024,391,946,724,724,946,391
0013E9  3  87 01 B2 03  
0013ED  3  D4 02 D4 02  
0013F5  3  00 04 00 00  	.word 1024,0,946,65144,724,64811,391,64589
0013F9  3  B2 03 78 FE  
0013FD  3  D4 02 2B FD  
001405  3  00 00 00 FC  	.word 0,64512,65144,64589,64811,64811,64589,65144
001409  3  78 FE 4D FC  
00140D  3  2B FD 2B FD  
001415  3  00 FC 00 00  	.word 64512,0,64589,391,64811,724,65144,946
001419  3  4D FC 87 01  
00141D  3  2B FD D4 02  
001425  3               
001425  3               ;----------------------------------------------------
001425  3               ; Create trail
001425  3               ;----------------------------------------------------
001425  3               
001425  3               trail:
001425  3  A0 01        	ldy #1
001427  3  B1 68        	lda (z80_ix),y 	; time remaining.
001429  3  38           	sec
00142A  3  E9 01        	sbc #1
00142C  3  91 68        	sta (z80_ix),y
00142E  3  D0 03        	bne :+
001430  3  4C 70 14     	jmp trailk		; time to switch it off.
001433  3               :
001433  3  20 91 16     	jsr qrand		; get a random number.
001436  3  4A           	lsr a 			; x or y axis?
001437  3  90 03        	bcc :+
001439  3  4C 56 14     	jmp trailv		; use y.
00143C  3               :
00143C  3               ; Trail horizontal
00143C  3               
00143C  3  4A           	lsr a 			; which direction?
00143D  3  90 03        	bcc :+
00143F  3  4C 4C 14     	jmp traill		; go left.
001442  3               :
001442  3               ; Trail right
001442  3               
001442  3  A0 05        	ldy #5
001444  3  B1 68        	lda (z80_ix),y
001446  3  18           	clc
001447  3  69 01        	adc #1	 		; go right.
001449  3  91 68        	sta (z80_ix),y
00144B  3  60           	rts
00144C  3               
00144C  3               ; Trail left
00144C  3               
00144C  3               traill:
00144C  3  A0 05        	ldy #5
00144E  3  B1 68        	lda (z80_ix),y
001450  3  38           	sec
001451  3  E9 01        	sbc #1 			; go left.
001453  3  91 68        	sta (z80_ix),y
001455  3  60           	rts
001456  3               
001456  3               ; Trail vertical
001456  3               
001456  3               trailv:
001456  3  4A           	lsr a		 	; which direction?
001457  3  90 03        	bcc :+
001459  3  4C 66 14     	jmp trailu		; go up.
00145C  3               :
00145C  3               ; Trail down
00145C  3               
00145C  3  A0 03        	ldy #3
00145E  3  B1 68        	lda (z80_ix),y
001460  3  18           	clc
001461  3  69 01        	adc #1 			; go down.
001463  3  91 68        	sta (z80_ix),y
001465  3  60           	rts
001466  3               
001466  3               ; Trail up
001466  3               
001466  3               trailu:
001466  3  A0 03        	ldy #3
001468  3  B1 68        	lda (z80_ix),y
00146A  3  38           	sec
00146B  3  E9 01        	sbc #1 			; go up.
00146D  3  91 68        	sta (z80_ix),y
00146F  3  60           	rts
001470  3               
001470  3               ; Kill trail
001470  3               
001470  3               trailk:
001470  3  A9 C8        	lda #200		; set off-screen to kill vapour trail.
001472  3  A0 03        	ldy #3
001474  3  91 68        	sta (z80_ix),y
001476  3  60           	rts
001477  3               
001477  3               ;----------------------------------------------------
001477  3               ; Create laser beam
001477  3               ;----------------------------------------------------
001477  3               
001477  3               laser:
001477  3  A0 01        	ldy #1
001479  3  B1 68        	lda (z80_ix),y 		; direction.
00147B  3  6A           	ror a 			; left or right?
00147C  3  B0 03        	bcs :+
00147E  3  4C 88 14     	jmp laserl		; move left.
001481  3               :
001481  3               ; Laser right
001481  3               
001481  3  A9 08        	lda #8			; distance to travel.
001483  3  85 63        	sta z80_b
001485  3  4C 8C 14     	jmp laserm		; move laser.
001488  3               
001488  3               ; Laser left
001488  3               
001488  3               laserl:
001488  3  A9 F8        	lda #248		; distance to travel.
00148A  3  85 63        	sta z80_b
00148C  3               laserm:
00148C  3  A0 05        	ldy #5
00148E  3  B1 68        	lda (z80_ix),y		; x position.
001490  3  18           	clc
001491  3  65 63        	adc z80_b		; add distance.
001493  3  91 68        	sta (z80_ix),y		; set new x coordinate.
001495  3               
001495  3               ; Test new block.
001495  3               
001495  3  8D 4B 11     	sta dispx 		; set x for block collision detection purposes.
001498  3  A0 03        	ldy #3
00149A  3  B1 68        	lda (z80_ix),y 		; get y.
00149C  3  8D 4C 11     	sta dispy		; set coordinate for collision test.
00149F  3  20 95 20     	jsr tstbl 		; get block type there.
0014A2  3  C9 02        	cmp #WALL		; is it solid?
0014A4  3  D0 03        	bne :+
0014A6  3  4C 70 14     	jmp trailk		; yes, it cannot pass.
0014A9  3               :
0014A9  3  60           	rts
0014AA  3               
0014AA  3               ;----------------------------------------------------
0014AA  3               ; Dots mask
0014AA  3               ;----------------------------------------------------
0014AA  3               
0014AA  3  80 40 20 10  dots:	.byte 128,64,32,16,8,4,2,1
0014AE  3  08 04 02 01  
0014B2  3               
0014B2  3               
0014B2  3               ;----------------------------------------------------
0014B2  3               ; Plot, preserving de.
0014B2  3               ;----------------------------------------------------
0014B2  3               
0014B2  3               plotde:
0014B2  3  A5 65        	lda z80_d 		; put de on stack.
0014B4  3  48           	pha
0014B5  3  A5 64        	lda z80_e
0014B7  3  48           	pha
0014B8  3               
0014B8  3  20 A4 13     	jsr plot 		; plot pixel.
0014BB  3               
0014BB  3  68           	pla			; restore de from stack.
0014BC  3  85 64        	sta z80_e
0014BE  3  68           	pla
0014BF  3  85 65        	sta z80_d
0014C1  3               
0014C1  3  60           	rts
0014C2  3               
0014C2  3               ;----------------------------------------------------
0014C2  3               ; Shoot a laser.
0014C2  3               ;----------------------------------------------------
0014C2  3               
0014C2  3               shoot:
0014C2  3  85 62        	sta z80_c		; store direction in c register.
0014C4  3  A0 08        	ldy #8
0014C6  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0014C8  3               shoot1:
0014C8  3  18           	clc
0014C9  3  69 07        	adc #7 			; down 7 pixels.
0014CB  3  85 66        	sta z80_l 		; puty y coordinate in l.
0014CD  3               
0014CD  3  A0 09        	ldy #9
0014CF  3  B1 68        	lda (z80_ix),y 		; x coordinate in h.
0014D1  3  85 67        	sta z80_h
0014D3  3               
0014D3  3  A5 69        	lda z80_i		; store pointer to sprite.
0014D5  3  48           	pha
0014D6  3  A5 68        	lda z80_x
0014D8  3  48           	pha
0014D9  3               
0014D9  3  20 FC 15     	jsr fpslot 		; find particle slot.
0014DC  3  B0 03        	bcs :+
0014DE  3  4C 2C 15     	jmp vapou2		; failed, restore ix.
0014E1  3               :
0014E1  3  A9 00        	lda #0
0014E3  3  A0 00        	ldy #0
0014E5  3  91 68        	sta (z80_ix),y 		; set up a laser.
0014E7  3               
0014E7  3  A5 62        	lda z80_c
0014E9  3  A0 01        	ldy #1
0014EB  3  91 68        	sta (z80_ix),y 		; set the direction.
0014ED  3               
0014ED  3  A5 66        	lda z80_l
0014EF  3  A0 03        	ldy #3
0014F1  3  91 68        	sta (z80_ix),y		; set y coordinate.
0014F3  3               
0014F3  3  66 62        	ror z80_c		; check direction we want.
0014F5  3  90 03        	bcc :+
0014F7  3  4C 05 15     	jmp shootr		; shoot right.
0014FA  3               :
0014FA  3  A5 67        	lda z80_h		; X position.
0014FC  3               shoot0:
0014FC  3  29 F8        	and #248		; align on character boundary.
0014FE  3  A0 05        	ldy #5
001500  3  91 68        	sta (z80_ix),y		; set x coordinate.
001502  3  4C 51 15     	jmp vapou0 		; draw first image.
001505  3               shootr:
001505  3  A5 67        	lda z80_h		; x position.
001507  3  18           	clc
001508  3  69 0F        	adc #15			; look right.
00150A  3  4C FC 14     	jmp shoot0		; align and continue.
00150D  3               
00150D  3               ;----------------------------------------------------
00150D  3               ; Create a bit of vapour trail.
00150D  3               ;----------------------------------------------------
00150D  3               
00150D  3               vapour:
00150D  3  A5 69        	lda z80_i		; store pointer to sprite.
00150F  3  48           	pha
001510  3  A5 68        	lda z80_x
001512  3  48           	pha
001513  3               
001513  3  A0 08        	ldy #8
001515  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001517  3  18           	clc
001518  3  69 07        	adc #7			; mid-point of sprite.
00151A  3  85 66        	sta z80_l
00151C  3               
00151C  3  A0 09        	ldy #9
00151E  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001520  3  69 07        	adc #7
001522  3  85 67        	sta z80_h
001524  3               
001524  3  20 FC 15     	jsr fpslot 		; find particle slot.
001527  3  90 03        	bcc :+
001529  3  4C 33 15     	jmp vapou1		; no, we can use it.
00152C  3               :
00152C  3               vapou2:
00152C  3  68           	pla
00152D  3  85 68        	sta z80_x
00152F  3  68           	pla
001530  3  85 69        	sta z80_i
001532  3  60           	rts
001533  3               vapou1:
001533  3  A5 66        	lda z80_l
001535  3  A0 03        	ldy #3
001537  3  91 68        	sta (z80_ix),y		; set up y.
001539  3               
001539  3  A5 67        	lda z80_h
00153B  3  A0 05        	ldy #5
00153D  3  91 68        	sta (z80_ix),y 		; set up x coordinate.
00153F  3               
00153F  3  20 91 16     	jsr qrand		; get quick random number.
001542  3  29 0F        	and #15			; random time.
001544  3  18           	clc
001545  3  69 0F        	adc #15			; minimum time on screen.
001547  3  A0 01        	ldy #1
001549  3  91 68        	sta (z80_ix),y		; set time on screen.
00154B  3               
00154B  3  A9 01        	lda #1
00154D  3  A0 00        	ldy #0
00154F  3  91 68        	sta (z80_ix),y		; define particle as vapour trail.
001551  3               vapou0:
001551  3  20 6E 13     	jsr chkxy		; plot first position.
001554  3  4C 2C 15     	jmp vapou2
001557  3               
001557  3               ;----------------------------------------------------
001557  3               ; Create a user particle.
001557  3               ;----------------------------------------------------
001557  3               
001557  3               ptusr:
001557  3  85 60        	sta z80_f		; store timer.
001559  3               
001559  3  A0 08        	ldy #8
00155B  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00155D  3  18           	clc
00155E  3  69 07        	adc #7			; mid-point of sprite.
001560  3  85 66        	sta z80_l
001562  3               
001562  3  A0 09        	ldy #9
001564  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001566  3  18           	clc
001567  3  69 07        	adc #7			; mid-point of sprite.
001569  3  85 67        	sta z80_h
00156B  3               
00156B  3  20 FC 15     	jsr fpslot 		; find particle slot.
00156E  3  B0 01        	bcs ptusr1
001570  3  60           	rts 			; out of slots, can't generate anything.
001571  3               ptusr1:
001571  3  A5 66        	lda z80_l
001573  3  A0 03        	ldy #3
001575  3  91 68        	sta (z80_ix),y 		; set up y.
001577  3               
001577  3  A5 67        	lda z80_h
001579  3  A0 05        	ldy #5
00157B  3  91 68        	sta (z80_ix),y		; set up x coordinate.
00157D  3               
00157D  3  A5 60        	lda z80_f 		; restore timer.
00157F  3  A0 01        	ldy #1
001581  3  91 68        	sta (z80_ix),y		; set time on screen.
001583  3               
001583  3  A9 07        	lda #7
001585  3  A0 00        	ldy #0
001587  3  91 68        	sta (z80_ix),y		; define particle as user particle.
001589  3               
001589  3  4C 6E 13     	jmp chkxy		; plot first position.
00158C  3               
00158C  3               ;----------------------------------------------------
00158C  3               ; Create a vertical or horizontal star.
00158C  3               ;----------------------------------------------------
00158C  3               
00158C  3               star:
00158C  3  A5 69        	lda z80_i		; store pointer to sprite.
00158E  3  48           	pha
00158F  3  A5 68        	lda z80_x
001591  3  48           	pha
001592  3               
001592  3  20 FC 15     	jsr fpslot 		; find particle slot.
001595  3  B0 07        	bcs star7		; found one we can use.
001597  3               star0:
001597  3  68           	pla 			; restore sprite pointer.
001598  3  85 68        	sta z80_x
00159A  3  68           	pla
00159B  3  85 69        	sta z80_i
00159D  3  60           	rts 			; out of slots, can't generate anything.
00159E  3               star7:
00159E  3  A5 62        	lda z80_c		; direction.
0015A0  3  29 03        	and #3 			; is it left?
0015A2  3  D0 03        	bne :+
0015A4  3  4C D6 15     	jmp star1 		; yes, it's left.
0015A7  3               :
0015A7  3  C9 01        	cmp #1 			; is it right?
0015A9  3  D0 03        	bne :+
0015AB  3  4C E6 15     	jmp star2 		; yes, it's right.
0015AE  3               :
0015AE  3  C9 02        	cmp #2 			; is it up?
0015B0  3  D0 03        	bne :+
0015B2  3  4C F3 15     	jmp star3 		; yes, it's up.
0015B5  3               :
0015B5  3  AC 22 11     	ldy wntopx 		; get edge of screen.
0015B8  3  C8           	iny			; down one pixel.
0015B9  3  98           	tya
0015BA  3               star8:
0015BA  3  A0 03        	ldy #3
0015BC  3  91 68        	sta (z80_ix),y 		; set y coord.
0015BE  3  20 91 16     	jsr qrand 		; get quick random number.
0015C1  3               star9:
0015C1  3  A0 05        	ldy #5
0015C3  3  91 68        	sta (z80_ix),y		; set x position.
0015C5  3               
0015C5  3  A5 62        	lda z80_c		; direction.
0015C7  3  29 03        	and #3			; zero to three.
0015C9  3  18           	clc
0015CA  3  69 03        	adc #3			; 3 to 6 for starfield.
0015CC  3  A0 00        	ldy #0
0015CE  3  91 68        	sta (z80_ix),y		; define particle as star.
0015D0  3  20 6E 13     	jsr chkxy		; plot first position.
0015D3  3  4C 97 15     	jmp star0
0015D6  3               star1:
0015D6  3  20 91 16     	jsr qrand		; get quick random number.
0015D9  3  A0 03        	ldy #3
0015DB  3  91 68        	sta (z80_ix),y 		; set y coord.
0015DD  3               
0015DD  3  AD 25 11     	lda wnrgtx 		; get edge of screen.
0015E0  3  18           	clc
0015E1  3  69 0F        	adc #15			; add width of sprite minus 1.
0015E3  3  4C C1 15     	jmp star9
0015E6  3               star2:
0015E6  3  20 91 16     	jsr qrand 		; get quick random number.
0015E9  3  A0 03        	ldy #3
0015EB  3  91 68        	sta (z80_ix),y		; set y coord.
0015ED  3               
0015ED  3  AD 23 11     	lda wnlftx		; get edge of screen.
0015F0  3  4C C1 15     	jmp star9
0015F3  3               star3:
0015F3  3  AD 24 11     	lda wnbotx 		; get edge of screen.
0015F6  3  18           	clc
0015F7  3  69 0F        	adc #15 		; height of sprite minus one pixel.
0015F9  3  4C BA 15     	jmp star8
0015FC  3               
0015FC  3               ;----------------------------------------------------
0015FC  3               ; Find particle slot for lasers or vapour trail.
0015FC  3               ; can't use alternate accumulator.
0015FC  3               ;----------------------------------------------------
0015FC  3               
0015FC  3               fpslot:
0015FC  3  A9 B6        	lda #<SHRAPN 		; shrapnel table.
0015FE  3  85 68        	sta z80_x
001600  3  A9 09        	lda #>SHRAPN
001602  3  85 69        	sta z80_i
001604  3               
001604  3  A9 37        	lda #NUMSHR		; number of pieces in table.
001606  3  85 63        	sta z80_b
001608  3               fpslt0:
001608  3  A0 00        	ldy #0
00160A  3  B1 68        	lda (z80_ix),y		; get type.
00160C  3  0A           	asl a  			; is this slot in use?
00160D  3  90 01        	bcc :+
00160F  3  60           	rts			; no, we can use it.
001610  3               :
001610  3  18           	clc			; point to more shrapnel.
001611  3  A5 68        	lda z80_x
001613  3  69 06        	adc #SHRSIZ
001615  3  85 68        	sta z80_x
001617  3  90 02        	bcc :+
001619  3  E6 69        	inc z80_i
00161B  3               :
00161B  3  C6 63        	dec z80_b		; repeat for all shrapnel.
00161D  3  D0 E9        	bne fpslt0
00161F  3               
00161F  3  18           	clc
001620  3  60           	rts 			; out of slots, can't generate anything.
001621  3               
001621  3               ;----------------------------------------------------
001621  3               ; Create an explosion at sprite position.
001621  3               ;----------------------------------------------------
001621  3               
001621  3               explod:
001621  3  85 62        	sta z80_c 		; particles to create.
001623  3               
001623  3  A5 69        	lda z80_i 		; store pointer to sprite.
001625  3  48           	pha
001626  3  A5 68        	lda z80_x
001628  3  48           	pha
001629  3               
001629  3  A0 08        	ldy #8
00162B  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00162D  3  85 66        	sta z80_l
00162F  3  A0 09        	ldy #9
001631  3  B1 68        	lda (z80_ix),y		; x coordinate.
001633  3  85 67        	sta z80_h
001635  3               
001635  3  A9 B6        	lda #<SHRAPN		; shrapnel table.
001637  3  85 68        	sta z80_x
001639  3  A9 09        	lda #>SHRAPN
00163B  3  85 69        	sta z80_i
00163D  3               
00163D  3  A9 37        	lda #NUMSHR		; number of pieces in table.
00163F  3  8D 90 16     	sta explcnt
001642  3               expld0:
001642  3  A0 00        	ldy #0
001644  3  B1 68        	lda (z80_ix),y		; get type.
001646  3  0A           	asl a 			; is this slot in use?
001647  3  B0 17        	bcs expld1		; no, we can use it.
001649  3               expld2:
001649  3  18           	clc
00164A  3  A5 68        	lda z80_x
00164C  3  69 06        	adc #SHRSIZ
00164E  3  85 68        	sta z80_x
001650  3  90 02        	bcc :+
001652  3  E6 69        	inc z80_i
001654  3               :
001654  3  CE 90 16     	dec explcnt		; repeat for all shrapnel.
001657  3  D0 E9        	bne expld0
001659  3               expld3:
001659  3  68           	pla			; restore sprite pointer.
00165A  3  85 68        	sta z80_x
00165C  3  68           	pla
00165D  3  85 69        	sta z80_i
00165F  3  60           	rts 			; out of slots, can't generate any more.
001660  3               
001660  3               expld1:
001660  3  A5 62        	lda z80_c		; shrapnel counter.
001662  3  29 0F        	and #15			; 0 to 15.
001664  3  18           	clc			; add to x.
001665  3  65 66        	adc z80_l
001667  3  A0 03        	ldy #3
001669  3  91 68        	sta (z80_ix),y		; y coord.
00166B  3               
00166B  3  AD 9B 16     	lda seed3 		; crap random number.
00166E  3  29 0F        	and #15			; 0 to 15.
001670  3  18           	clc 			; add to y.
001671  3  65 67        	adc z80_h
001673  3  A0 05        	ldy #5
001675  3  91 68        	sta (z80_ix),y		; x coord.
001677  3               
001677  3  A9 02        	lda #2
001679  3  A0 00        	ldy #0
00167B  3  91 68        	sta (z80_ix),y		; switch it on.
00167D  3               
00167D  3  20 6E 13     	jsr chkxy		; plot first position.
001680  3  20 91 16     	jsr qrand		; quick random angle.
001683  3  29 3C        	and #60 		; keep within range.
001685  3  A0 01        	ldy #1
001687  3  91 68        	sta (z80_ix),y		; angle.
001689  3               
001689  3  C6 62        	dec z80_c		; one less piece of shrapnel to generate.
00168B  3  D0 BC        	bne expld2 		; back to main explosion loop.
00168D  3  4C 59 16     	jmp expld3 		; restore sprite pointer and exit.
001690  3               
001690  3  00           explcnt:	.byte 0
001691  3               
001691  3               ;----------------------------------------------------
001691  3               ; Quick random
001691  3               ;----------------------------------------------------
001691  3               
001691  3               qrand:
001691  3  20 FB 20     	jsr random		; r register.
001694  3  4D 9B 16     	eor seed3		; combine with seed.
001697  3  8D 9B 16     	sta seed3 		; new seed.
00169A  3  60           	rts
00169B  3               
00169B  3  00           seed3:	.byte 0
00169C  3               
00169C  3               ;----------------------------------------------------
00169C  3               ; Display all shrapnel.
00169C  3               ;----------------------------------------------------
00169C  3               
00169C  3               dshrp:
00169C  3  A9 B2        	lda #<plotde		; display routine.
00169E  3  8D 97 12     	sta proshx+1
0016A1  3  A9 14        	lda #>plotde
0016A3  3  8D 98 12     	sta proshx+2
0016A6  3  20 84 12     	jsr proshr		; process shrapnel.
0016A9  3               
0016A9  3  A9 AD        	lda #<prosh1		; processing routine.
0016AB  3  8D 97 12     	sta proshx+1
0016AE  3  A9 12        	lda #>prosh1
0016B0  3  8D 98 12     	sta proshx+2
0016B3  3  60           	rts
0016B4  3               
0016B4  3               ;------------------------------------------------------
0016B4  3               ; Particle engine.
0016B4  3               ;
0016B4  3               ; Init particle data for 55 particles in SHRAPN table.
0016B4  3               ; Every particle has 6 bytes.
0016B4  3               ;
0016B4  3               ; global:	-
0016B4  3               ; local:	x,y,hl
0016B4  3               ; calls:	-
0016B4  3               ;------------------------------------------------------
0016B4  3               
0016B4  3               inishr:
0016B4  3  A9 B6        	lda #<SHRAPN 		; table.
0016B6  3  85 66        	sta z80_l
0016B8  3  A9 09        	lda #>SHRAPN
0016BA  3  85 67        	sta z80_h
0016BC  3               
0016BC  3  A0 00        	ldy #0
0016BE  3  A2 37        	ldx #NUMSHR		; shrapnel pieces to process.
0016C0  3               inish0:
0016C0  3  A9 FF        	lda #255 		; kill the shrapnel.
0016C2  3  91 66        	sta (z80_hl),y
0016C4  3               
0016C4  3  18           	clc 			; point there.
0016C5  3  A5 66        	lda z80_l
0016C7  3  69 06        	adc #SHRSIZ		; distance to next.
0016C9  3  85 66        	sta z80_l
0016CB  3  90 02        	bcc :+
0016CD  3  E6 67        	inc z80_h
0016CF  3               :
0016CF  3  CA           	dex
0016D0  3  D0 EE        	bne inish0 		; round again.
0016D2  3  60           	rts
0016D3  3               
0016D3  3               ;------------------------------------------------------
0016D3  3               ; Check for collision between laser and sprite.
0016D3  3               ;------------------------------------------------------
0016D3  3               
0016D3  3               lcol:
0016D3  3  A9 B6        	lda #<SHRAPN		; shrapnel table.
0016D5  3  85 66        	sta z80_l
0016D7  3  A9 09        	lda #>SHRAPN
0016D9  3  85 67        	sta z80_h
0016DB  3               
0016DB  3  A9 37        	lda #NUMSHR		; number of pieces in table.
0016DD  3  85 63        	sta z80_b
0016DF  3               lcol0:
0016DF  3  A0 00        	ldy #0
0016E1  3  B1 66        	lda (z80_hl),y 		; get type.
0016E3  3  F0 10        	beq lcol1		; yes, check collision.
0016E5  3               lcol3:
0016E5  3  18           	clc			; point to more shrapnel.
0016E6  3  A5 66        	lda z80_l
0016E8  3  69 06        	adc #SHRSIZ
0016EA  3  85 66        	sta z80_l
0016EC  3  90 02        	bcc :+
0016EE  3  E6 67        	inc z80_h
0016F0  3               :
0016F0  3  C6 63        	dec z80_b		; repeat for all shrapnel.
0016F2  3  D0 EB        	bne lcol0
0016F4  3  60           	rts 			; no collision, carry not set.
0016F5  3               lcol1:
0016F5  3  A0 03        	ldy #3
0016F7  3  B1 66        	lda (z80_hl),y		; get y.
0016F9  3  38           	sec
0016FA  3  A0 08        	ldy #8
0016FC  3  F1 68        	sbc (z80_ix),y		; subtract sprite y.
0016FE  3               lcolh:
0016FE  3  C9 10        	cmp #16 		; within range?
001700  3  90 03        	bcc :+
001702  3  4C 15 17     	jmp lcol2		; no, missed.
001705  3               :
001705  3  A0 05        	ldy #5
001707  3  B1 66        	lda (z80_hl),y 		; get x.
001709  3  38           	sec
00170A  3  A0 09        	ldy #9
00170C  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
00170E  3  C9 10        	cmp #16			; within range?
001710  3  B0 03        	bcs :+
001712  3  4C 18 17     	jmp lcol4 		; yes, collision occurred.
001715  3               :
001715  3               lcol2:
001715  3  4C E5 16     	jmp lcol3
001718  3               lcol4:
001718  3  38           	sec
001719  3  60           	rts 			; return with carry set for collision.
00171A  3               .endif
00171A  3               
00171A  3               ;------------------------------------------------------
00171A  3               ; Main game engine code starts here.
00171A  3               ; After initialisation, mloop is the main loop
00171A  3               ;------------------------------------------------------
00171A  3               
00171A  3               game:
00171A  3               
00171A  3               ; Set up screen address table.
00171A  3               
00171A  3               setsat:
00171A  3  A9 00        	lda #<ScreenAddr		; start of screen.
00171C  3  85 80        	sta scraddr
00171E  3  A9 58        	lda #>ScreenAddr
001720  3  85 81        	sta scraddr+1
001722  3               
001722  3  A0 00        	ldy #0			; vertical lines on screen.
001724  3               setsa0:
001724  3  A5 80        	lda scraddr
001726  3  99 00 06     	sta SCADTB_lb,y		; write low byte.
001729  3  A5 81        	lda scraddr+1
00172B  3  99 00 07     	sta SCADTB_hb,y		; write high byte.
00172E  3  20 C5 25     	jsr nline		; next line down.
001731  3  C8           	iny			; next position in table.
001732  3  D0 F0        	bne setsa0
001734  3               
001734  3               ; Init graphics mode
001734  3               
001734  3  A9 16        	lda #22
001736  3  20 EE FF     	jsr OSWRCH		; _BEEB screen select VDU command
001739  3  A9 04        	lda #ScrMode	; graphics mode
00173B  3  20 EE FF     	jsr OSWRCH		; _BEEB screen mode
00173E  3  20 3D 12     	jsr setpal 		; set up palette.
001741  3               
001741  3               ; Init AtoMMC joystick
001741  3  20 7F 21     	jsr joyinit		; AtoMMC joystick on PORT B
001744  3               
001744  3               rpblc2:
001744  3               .if pflag
001744  3  20 B4 16     	jsr inishr 		; initialise particle engine.
001747  3               .endif
001747  3               evintr:
001747  3  20 3E 37     	jsr evnt12 		; call intro/menu event.
00174A  3               
00174A  3  A9 02        	lda #WALL 		; write default property.
00174C  3  A2 00        	ldx #0
00174E  3               clrmap:
00174E  3  9D 00 03     	sta MAP,x 		; block properties.
001751  3  9D 00 04     	sta MAP+256,x
001754  3  9D 00 05     	sta MAP+512,x
001757  3  E8           	inx			; next byte.
001758  3  D0 F4        	bne clrmap
00175A  3               
00175A  3  20 8D 11     	jsr iniob 		; initialise objects.
00175D  3               
00175D  3  A9 00        	lda #0			; put zero in accumulator.
00175F  3  8D 4A 11     	sta gamwon		; reset game won flag.
001762  3               
001762  3  20 C7 18     	jsr inisc 		; init the score.
001765  3               mapst:
001765  3  AD 16 2B     	lda stmap 		; start position on map.
001768  3  8D 0B 2B     	sta roomtb		; set up position in table, if there is one.
00176B  3               
00176B  3               inipbl:
00176B  3  20 E6 26     	jsr initsc 		; set up first screen.
00176E  3               
00176E  3  A9 FA        	lda #<ssprit 		; default to spare sprite in table.
001770  3  85 68        	sta z80_x
001772  3  A9 2A        	lda #>ssprit
001774  3  85 69        	sta z80_i
001776  3               evini:
001776  3  20 44 37     	jsr evnt13 		; initialisation.
001779  3               
001779  3               ; Two restarts.
001779  3               ; First restart - clear all sprites and initialise everything.
001779  3               
001779  3               rstrt:
001779  3  20 74 18     	jsr rsevt 		; restart events.
00177C  3  20 80 11     	jsr xspr 		; clear sprite table.
00177F  3  20 4C 28     	jsr sprlst 		; fetch pointer to screen sprites.
001782  3  20 DA 28     	jsr ispr 		; initialise sprite table.
001785  3               
001785  3  4C 94 17     	jmp rstrt0
001788  3               
001788  3               ; Second restart - clear all but player, and don't initialise him.
001788  3               
001788  3               rstrtn:
001788  3  20 74 18     	jsr rsevt		; restart events.
00178B  3  20 7A 28     	jsr nspr 		; clear all non-player sprites.
00178E  3  20 4C 28     	jsr sprlst 		; fetch pointer to screen sprites.
001791  3  20 1A 29     	jsr kspr 		; initialise sprite table, no more players.
001794  3               
001794  3               ; Set up the player and/or enemy sprites.
001794  3               
001794  3               rstrt0:
001794  3  A9 00        	lda #0 			; zero in accumulator.
001796  3  8D 47 11     	sta nexlev 		; reset next level flag.
001799  3  8D 48 11     	sta restfl 		; reset restart flag.
00179C  3  8D 49 11     	sta deadf 		; reset dead flag.
00179F  3  20 18 1E     	jsr droom 		; show screen layout.
0017A2  3               rpblc0:
0017A2  3               .if pflag
0017A2  3  20 B4 16     	jsr inishr 		; initialise particle engine.
0017A5  3               .endif
0017A5  3  20 17 19     	jsr shwob		; draw objects.
0017A8  3               
0017A8  3  A9 2E        	lda #<sprtab 		; address of sprite table, even sprites.
0017AA  3  85 68        	sta z80_x
0017AC  3  A9 2A        	lda #>sprtab
0017AE  3  85 69        	sta z80_i
0017B0  3  20 FE 23     	jsr dspr 		; display sprites.
0017B3  3               
0017B3  3  A9 3F        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0017B5  3  85 68        	sta z80_x
0017B7  3  A9 2A        	lda #>(sprtab+TABSIZ)
0017B9  3  85 69        	sta z80_i
0017BB  3  20 FE 23     	jsr dspr 		; display sprites.
0017BE  3               mloop:
0017BE  3  20 BF 11     	jsr vsync 		; synchronise with display.
0017C1  3               
0017C1  3  A9 2E        	lda #<sprtab 		; address of sprite table, even sprites.
0017C3  3  85 68        	sta z80_x
0017C5  3  A9 2A        	lda #>sprtab
0017C7  3  85 69        	sta z80_i
0017C9  3  20 FE 23     	jsr dspr 		; display even sprites.
0017CC  3               
0017CC  3  20 16 19     	jsr plsnd 		; play sounds.
0017CF  3  20 BF 11     	jsr vsync 		; synchronise with display.
0017D2  3               
0017D2  3  A9 3F        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0017D4  3  85 68        	sta z80_x
0017D6  3  A9 2A        	lda #>(sprtab+TABSIZ)
0017D8  3  85 69        	sta z80_i
0017DA  3  20 FE 23     	jsr dspr 		; display odd sprites.
0017DD  3               
0017DD  3  A9 FA        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
0017DF  3  85 68        	sta z80_x
0017E1  3  A9 2A        	lda #>(ssprit)
0017E3  3  85 69        	sta z80_i
0017E5  3               evlp1:
0017E5  3  20 6D 36     	jsr evnt10 		; called once per main loop.
0017E8  3  20 73 23     	jsr pspr 		; process sprites.
0017EB  3               
0017EB  3               ; Main loop events.
0017EB  3               
0017EB  3  A9 FA        	lda #<ssprit 		; point to spare sprite for spawning purposes.
0017ED  3  85 68        	sta z80_x
0017EF  3  A9 2A        	lda #>ssprit
0017F1  3  85 69        	sta z80_i
0017F3  3               evlp2:
0017F3  3  20 30 37     	jsr evnt11 		; called once per main loop.
0017F6  3               bsortx:
0017F6  3  20 E6 22     	jsr bsort 		; sort sprites.
0017F9  3               
0017F9  3  AD 47 11     	lda nexlev		; finished level flag.
0017FC  3  D0 21        	bne newlev		; is set, go to next level.
0017FE  3  AD 4A 11     	lda gamwon		; finished game flag.
001801  3  D0 2D        	bne evwon		; is set, finish the game.
001803  3  AD 48 11     	lda restfl 		; finished level flag.
001806  3  C9 01        	cmp #1			; has it been set?
001808  3  D0 03        	bne :+
00180A  3  4C 79 17     	jmp rstrt		; yes, go to next level.
00180D  3               :
00180D  3  C9 02        	cmp #2			; has it been set?
00180F  3  D0 03        	bne :+
001811  3  4C 88 17     	jmp rstrtn		; yes, go to next level.
001814  3               :
001814  3  AD 49 11     	lda deadf 		; dead flag.
001817  3  D0 1D        	bne pdead		; yes, player dead.
001819  3               
001819  3               ; back to start of main loop.
001819  3               
001819  3  EE 42 11     	inc clock
00181C  3  4C BE 17     	jmp mloop		; switched to a jmp mloop during test mode.
00181F  3               
00181F  3               ;----------------------------------------------------------
00181F  3               ; New level
00181F  3               ;----------------------------------------------------------
00181F  3               
00181F  3               newlev:
00181F  3  AD 26 11     	lda scno 			; current screen.
001822  3  18           	clc
001823  3  69 01        	adc #1				; next screen.
001825  3  CD 6B 50     	cmp numsc			; total number of screens.
001828  3  B0 06        	bcs evwon			; yes, game finished.
00182A  3  8D 26 11     	sta scno			; set new level number.
00182D  3  4C 79 17     	jmp rstrt			; restart, clearing all aliens.
001830  3               
001830  3               evwon:
001830  3  20 AA 38     	jsr evnt18		 	; game completed.
001833  3  4C 49 18     	jmp tidyup			; tidy up and return to BASIC/calling routine.
001836  3               
001836  3               ;----------------------------------------------------------
001836  3               ; Player dead.
001836  3               ;----------------------------------------------------------
001836  3               
001836  3               pdead:
001836  3  A9 00        	lda #0				; zeroise accumulator.
001838  3  8D 49 11     	sta deadf			; reset dead flag.
00183B  3               evdie:
00183B  3  20 90 38     	jsr evnt16 			; death subroutine.
00183E  3  AD 27 11     	lda numlif			; number of lives.
001841  3  F0 03        	beq :+
001843  3  4C 79 17     	jmp rstrt 			; restart game.
001846  3               :
001846  3               evfail:
001846  3  20 A4 38     	jsr evnt17 			; failure event.
001849  3               
001849  3               ;----------------------------------------------------------
001849  3               ; Tidy things up
001849  3               ;----------------------------------------------------------
001849  3               
001849  3               tidyup:
001849  3  A0 00        	ldy #0				; digits to check.
00184B  3               tidyu2:
00184B  3  B9 FA 1A     	lda score,y 			; get score digit.
00184E  3  CD 00 1B     	cmp hiscor 			; are we larger than high score digit?
001851  3  90 07        	bcc tidyu0			; high score is bigger.
001853  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
001855  3  C8           	iny				; next digit of high score.
001856  3  C0 06        	cpy #6
001858  3  D0 F1        	bne tidyu2			; repeat for all digits
00185A  3               tidyu0:
00185A  3  A9 FA        	lda #<score			; return pointing to score.
00185C  3  85 62        	sta z80_c
00185E  3  A9 1A        	lda #>score
001860  3  85 63        	sta z80_b
001862  3  60           	rts
001863  3               tidyu1:
001863  3  A0 05        	ldy #5
001865  3               tidyu3:
001865  3  B9 FA 1A     	lda score,y			; score.
001868  3  99 00 1B     	sta hiscor,y			; high score.
00186B  3  88           	dey
00186C  3  10 F7        	bpl tidyu3 			; copy score to high score.
00186E  3               evnewh:
00186E  3  20 B5 38     	jsr evnt19			; new high score event.
001871  3  4C 5A 18     	jmp tidyu0			; tidy up.
001874  3               
001874  3               ;--------------------------------------------------
001874  3               ; Restart event.
001874  3               ;--------------------------------------------------
001874  3               
001874  3               rsevt:
001874  3  A9 FA        	lda #<ssprit 			; default to spare element in table.
001876  3  85 68        	sta z80_x
001878  3  A9 2A        	lda #>ssprit
00187A  3  85 69        	sta z80_i
00187C  3               evrs:
00187C  3  4C E3 37     	jmp evnt14	 		; call restart event.
00187F  3               
00187F  3               ;------------------------------------------------------------------
00187F  3               ; Copy number passed in a to string position bc, right-justified.
00187F  3               ;
00187F  3               ; Input:
00187F  3               ;  A  = number
00187F  3               ;  BC = string address
00187F  3               ;
00187F  3               ; Output:
00187F  3               ;  BC = string with number
00187F  3               ;-----------------------------------------------------------------
00187F  3               
00187F  3               num2ch:
00187F  3  85 65        	sta z80_d		; Save number
001881  3               
001881  3  A9 00        	lda #0
001883  3  8D C6 18     	sta flag
001886  3               
001886  3  A2 64        	ldx #100		; hundreds column.
001888  3  86 64        	stx z80_e
00188A  3  20 9B 18     	jsr numdg		; show digit.
00188D  3               
00188D  3  A2 0A        	ldx #10			; tens column.
00188F  3  86 64        	stx z80_e
001891  3  20 9B 18     	jsr numdg		; show digit.
001894  3               
001894  3  EE C6 18     	inc flag
001897  3  A2 01        	ldx #1			; units column.
001899  3  86 64        	stx z80_e
00189B  3               numdg:
00189B  3  A9 30        	lda #48			; clear digit.
00189D  3  85 61        	sta z80_a
00189F  3               numdg1:
00189F  3  A5 65        	lda z80_d
0018A1  3  C5 64        	cmp z80_e
0018A3  3  90 0F        	bcc numdg0		; nothing to show.
0018A5  3  38           	sec
0018A6  3  A5 65        	lda z80_d
0018A8  3  E5 64        	sbc z80_e		; subtract from column.
0018AA  3  85 65        	sta z80_d
0018AC  3  E6 61        	inc z80_a		; increment digit.
0018AE  3  EE C6 18     	inc flag
0018B1  3  4C 9F 18     	jmp numdg1		; repeat until column is zero.
0018B4  3               numdg0:
0018B4  3  A0 00        	ldy #0
0018B6  3  A5 61        	lda z80_a
0018B8  3  91 62        	sta (z80_bc),y		; write digit to buffer.
0018BA  3  AD C6 18     	lda flag
0018BD  3  F0 06        	beq :+
0018BF  3  E6 62        	inc z80_c		; next buffer position.
0018C1  3  D0 02        	bne :+
0018C3  3  E6 63        	inc z80_b
0018C5  3               :
0018C5  3  60           	rts
0018C6  3               
0018C6  3  00           flag:	.byte 0
0018C7  3               
0018C7  3               ;---------------------------------------------------------
0018C7  3               ; Reset score to "000000"
0018C7  3               ;---------------------------------------------------------
0018C7  3               
0018C7  3               inisc:
0018C7  3  A9 30        	lda #'0'
0018C9  3  A2 05        	ldx #5			; digits to initialise.
0018CB  3               inisc0:
0018CB  3  9D FA 1A     	sta score,x 		; write zero digit.
0018CE  3  CA           	dex			; next column.
0018CF  3  10 FA        	bpl inisc0		; repeat for all digits.
0018D1  3               
0018D1  3  60           	rts
0018D2  3               
0018D2  3               ;-----------------------------------------------------
0018D2  3               ; Multiply h by d and return in hl.
0018D2  3               ;
0018D2  3               ; Input:
0018D2  3               ;  H = first number
0018D2  3               ;  D = second number
0018D2  3               ;
0018D2  3               ; Output:
0018D2  3               ;  HL = result H x D
0018D2  3               ;-----------------------------------------------------
0018D2  3               
0018D2  3               imul:
0018D2  3  A5 65        	lda z80_d		; HL = H * D
0018D4  3  85 64        	sta z80_e
0018D6  3  A5 67        	lda z80_h
0018D8  3  85 62        	sta z80_c		; make c first multiplier.
0018DA  3               imul0:
0018DA  3  A9 00        	lda #0			; zeroise total.
0018DC  3  85 66        	sta z80_l
0018DE  3  85 67        	sta z80_h
0018E0  3               
0018E0  3  A5 67        	lda z80_h
0018E2  3  85 65        	sta z80_d		; zeroise high byte.
0018E4  3               
0018E4  3  A9 08        	lda #8			; repeat 8 times.
0018E6  3  85 63        	sta z80_b
0018E8  3               imul1:
0018E8  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
0018EA  3  90 0E        	bcc imul2		; wasn't set.
0018EC  3  18           	clc			; bit was set, so add de.
0018ED  3  A5 66        	lda z80_l
0018EF  3  65 64        	adc z80_e
0018F1  3  85 66        	sta z80_l
0018F3  3  A5 67        	lda z80_h
0018F5  3  65 65        	adc z80_d
0018F7  3  85 67        	sta z80_h
0018F9  3  18           	clc 			; reset carry.
0018FA  3               imul2:
0018FA  3  06 64        	asl z80_e 		; shift de 1 bit left.
0018FC  3  26 65        	rol z80_d
0018FE  3  C6 63        	dec z80_b
001900  3  D0 E6        	bne imul1		; repeat 8 times.
001902  3               
001902  3  60           	rts
001903  3               
001903  3               ;-----------------------------------------------
001903  3               ; Divide d by e and return in d, remainder in a.
001903  3               ;
001903  3               ; Input:
001903  3               ;  D = first number
001903  3               ;  E = second number
001903  3               ;
001903  3               ; Output:
001903  3               ;  D = result D/E
001903  3               ;  A = remainder
001903  3               ;-----------------------------------------------
001903  3               
001903  3               idiv:
001903  3  A9 00        	lda #0
001905  3  A0 08        	ldy #8		 	; bits to shift.
001907  3  06 65        	asl z80_d
001909  3               idiv0:
001909  3  2A           	rol a 			; multiply d by 2.
00190A  3  C5 64        	cmp z80_e 		; test if e is smaller.
00190C  3  90 02        	bcc idiv1		; e is greater, no division this time.
00190E  3  E5 64        	sbc z80_e		; subtract it.
001910  3               idiv1:
001910  3  26 65        	rol z80_d		; rotate into d.
001912  3  88           	dey
001913  3  D0 F4        	bne idiv0		; repeat
001915  3  60           	rts
001916  3               
001916  3               ;---------------------------------------------------
001916  3               ; Play AY sound effect
001916  3               ;---------------------------------------------------
001916  3               
001916  3               plsnd:
001916  3  60           	rts
001917  3               
001917  3               ;---------------------------------------------------
001917  3               ; Objects handling.
001917  3               ; 32 bytes for image
001917  3               ; 3 for room, y and x
001917  3               ; 3 for starting room, y and x.
001917  3               ; 254 = disabled.
001917  3               ; 255 = object in player"s pockets.
001917  3               ;---------------------------------------------------
001917  3               
001917  3               ;---------------------------------------------------
001917  3               ; Show items present.
001917  3               ;---------------------------------------------------
001917  3               
001917  3               shwob:
001917  3  A9 75        	lda #<objdta 			; objects table.
001919  3  85 66        	sta z80_l
00191B  3  A9 50        	lda #>objdta
00191D  3  85 67        	sta z80_h
00191F  3               
00191F  3  AD 21 11     	lda numob 			; number of objects in the game.
001922  3  8D B1 24     	sta sprcnt
001925  3               shwob0:
001925  3  A0 20        	ldy #32 			; distance to room number.
001927  3  B1 66        	lda (z80_hl),y 			; same as an item?
001929  3  CD 26 11     	cmp scno 			; current location.
00192C  3  D0 03        	bne :+
00192E  3  20 44 19     	jsr dobj 			; yes, display object.
001931  3               :
001931  3  18           	clc
001932  3  A5 66        	lda z80_l
001934  3  69 26        	adc #38 			; distance to next item.
001936  3  85 66        	sta z80_l
001938  3  A5 67        	lda z80_h
00193A  3  69 00        	adc #0
00193C  3  85 67        	sta z80_h	 		; point to it.
00193E  3  CE B1 24     	dec sprcnt
001941  3  D0 E2        	bne shwob0 			; repeat for others.
001943  3  60           	rts
001944  3               
001944  3               ;---------------------------------------------------
001944  3               ; Display object.
001944  3               ; hl must point to object's start address.
001944  3               ;
001944  3               ; Input:
001944  3               ;  HL = object address
001944  3               ;---------------------------------------------------
001944  3               
001944  3               dobj:
001944  3  A0 21        	ldy #33
001946  3  B1 66        	lda (z80_hl),y 			; point to y.
001948  3  8D 4C 11     	sta dispy
00194B  3  C8           	iny
00194C  3  B1 66        	lda (z80_hl),y 			; point to x.
00194E  3  8D 4B 11     	sta dispx
001951  3               dobj1:
001951  3  4C 61 1D     	jmp sprite 			; draw this sprite.
001954  3               
001954  3               ;--------------------------------------
001954  3               ; Remove an object.
001954  3               ;
001954  3               ; Input:
001954  3               ;  A = object number
001954  3               ;--------------------------------------
001954  3               
001954  3               remob:
001954  3  CD 21 11     	cmp numob			; number of objects in game.
001957  3  90 01        	bcc :+				; are we checking past the end?
001959  3  60           	rts				; yes, can't get non-existent item.
00195A  3               :
00195A  3  48           	pha				; remember object.
00195B  3  20 69 19     	jsr getob			; pick it up if we haven't already got it.
00195E  3  68           	pla				; retrieve object number.
00195F  3  20 9B 19     	jsr gotob			; get its address.
001962  3  A9 FE        	lda #254
001964  3  A0 20        	ldy #32
001966  3  91 66        	sta (z80_hl),y			; remove it.
001968  3  60           	rts
001969  3               
001969  3               ;---------------------------------------------------
001969  3               ; Pick up object number held in the accumulator.
001969  3               ;
001969  3               ; Input:
001969  3               ;  A = object number
001969  3               ;---------------------------------------------------
001969  3               
001969  3               getob:
001969  3  CD 21 11     	cmp numob 		; number of objects in game.
00196C  3  90 01        	bcc :+			; are we checking past the end?
00196E  3  60           	rts			; yes, can't get non-existent item.
00196F  3               :
00196F  3  20 9B 19     	jsr gotob 		; check if we already have it.
001972  3  C9 FF        	cmp #255
001974  3  D0 01        	bne :+
001976  3  60           	rts			; we already do.
001977  3               :
001977  3  A0 20        	ldy #32
001979  3  B1 66        	lda (z80_hl),y		; is it on this screen?
00197B  3  CD 26 11     	cmp scno 		; current screen.
00197E  3  D0 16        	bne getob0		; not on screen, so nothing to delete.
001980  3               
001980  3  A9 FF        	lda #255
001982  3  91 66        	sta (z80_hl),y		; pick it up.
001984  3  C8           	iny 			; point to y coord.
001985  3               getob1:
001985  3  A0 21        	ldy #33
001987  3  B1 66        	lda (z80_hl),y		; y coord.
001989  3  8D 4C 11     	sta dispy
00198C  3  A0 22        	ldy #34
00198E  3  B1 66        	lda (z80_hl),y 		; x coord.
001990  3  8D 4B 11     	sta dispx
001993  3  4C 51 19     	jmp dobj1 		; delete object sprite.
001996  3               getob0:
001996  3  A9 FF        	lda #255
001998  3  91 66        	sta (z80_hl),y 		; pick it up.
00199A  3  60           	rts
00199B  3               
00199B  3               ;-----------------------------------------------------------------
00199B  3               ; Got object check.
00199B  3               ; Call with object in accumulator, returns zero set if in pockets.
00199B  3               ;
00199B  3               ; Input:
00199B  3               ;  A = object number
00199B  3               ;-----------------------------------------------------------------
00199B  3               
00199B  3               gotob:
00199B  3  CD 21 11     	cmp numob 		; number of objects in game.
00199E  3  90 03        	bcc :+ 			; are we checking past the end?
0019A0  3  4C A7 19     	jmp gotob0 		; yes, we can't have a non-existent object.
0019A3  3               :
0019A3  3  20 AC 19     	jsr findob		; find the object.
0019A6  3               gotob1:
0019A6  3  60           	rts
0019A7  3               
0019A7  3               gotob0:
0019A7  3  A9 FE        	lda #254 		; missing.
0019A9  3  4C A6 19     	jmp gotob1
0019AC  3               
0019AC  3               findob:
0019AC  3  48           	pha			; save object number
0019AD  3  A9 75        	lda #<objdta 		; objects.
0019AF  3  85 66        	sta z80_l
0019B1  3  A9 50        	lda #>objdta
0019B3  3  85 67        	sta z80_h
0019B5  3  68           	pla			; retreive object number
0019B6  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
0019B8  3  AA           	tax 			; loop counter
0019B9  3               fndob2:
0019B9  3  18           	clc
0019BA  3  A5 66        	lda z80_l
0019BC  3  69 26        	adc #38 		; size of each object.
0019BE  3  85 66        	sta z80_l
0019C0  3  90 02        	bcc :+
0019C2  3  E6 67        	inc z80_h
0019C4  3               :
0019C4  3  CA           	dex 			; repeat until we find address.
0019C5  3  D0 F2        	bne fndob2
0019C7  3               fndob1:
0019C7  3  A0 20        	ldy #32			; distance to room it's in.
0019C9  3  B1 66        	lda (z80_hl),y		; fetch status.
0019CB  3  60           	rts
0019CC  3               
0019CC  3               ;---------------------------------------------
0019CC  3               ; Drop object number at (dispx, dispy).
0019CC  3               ;
0019CC  3               ; Input:
0019CC  3               ;  A = object number
0019CC  3               ;---------------------------------------------
0019CC  3               
0019CC  3               drpob:
0019CC  3  CD 21 11     	cmp numob 		; are we checking past the end?
0019CF  3  90 01        	bcc :+
0019D1  3  60           	rts			; yes, can't drop non-existent item.
0019D2  3               :
0019D2  3  20 9B 19     	jsr gotob		; make sure object is in inventory.
0019D5  3  CD 26 11     	cmp scno		; already on this screen?
0019D8  3  D0 01        	bne :+
0019DA  3  60           	rts			; yes, nothing to do.
0019DB  3               :
0019DB  3  A0 20        	ldy #32
0019DD  3  AD 26 11     	lda scno
0019E0  3  91 66        	sta (z80_hl),y		; bring onto screen.
0019E2  3  AD 4C 11     	lda dispy		; sprite y coordinate.
0019E5  3  C8           	iny 
0019E6  3  91 66        	sta (z80_hl),y		; point to object y.
0019E8  3  AD 4B 11     	lda dispx 		; sprite x coordinate.
0019EB  3  C8           	iny
0019EC  3  91 66        	sta (z80_hl),y 		; point to object x
0019EE  3  4C 44 19     	jmp dobj		; draw the object sprite.
0019F1  3               
0019F1  3               ;-----------------------------------------------
0019F1  3               ; Seek objects at sprite position.
0019F1  3               ;
0019F1  3               ; Output:
0019F1  3               ;  A = object number, if not found A=255
0019F1  3               ;-----------------------------------------------
0019F1  3               
0019F1  3               skobj:
0019F1  3  A9 75        	lda #<objdta 		; pointer to objects.
0019F3  3  85 66        	sta z80_l
0019F5  3  A9 50        	lda #>objdta
0019F7  3  85 67        	sta z80_h
0019F9  3               
0019F9  3  AD 21 11     	lda numob 		; number of objects in game.
0019FC  3  85 63        	sta z80_b 		; set up the loop counter.
0019FE  3               skobj0:
0019FE  3  AD 26 11     	lda scno		; current room number.
001A01  3  A0 20        	ldy #32
001A03  3  D1 66        	cmp (z80_hl),y		; is object in here?
001A05  3  D0 03        	bne :+
001A07  3  20 1C 1A     	jsr skobj1		; yes, check coordinates.
001A0A  3               :
001A0A  3  18           	clc			; point to next object in table.
001A0B  3  A5 66        	lda z80_l
001A0D  3  69 26        	adc #38			; size of each object.
001A0F  3  85 66        	sta z80_l
001A11  3  90 02        	bcc :+
001A13  3  E6 67        	inc z80_h
001A15  3               :
001A15  3  C6 63        	dec z80_b
001A17  3  D0 E5        	bne skobj0		; repeat for all objects.
001A19  3               
001A19  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
001A1B  3  60           	rts
001A1C  3               
001A1C  3               skobj1:
001A1C  3  A0 21        	ldy #33			; point to y coordinate.
001A1E  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
001A20  3  38           	sec
001A21  3  A0 08        	ldy #var_newY
001A23  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
001A25  3  18           	clc
001A26  3  69 0F        	adc #15			; add sprite height minus one.
001A28  3  C9 1F        	cmp #31			; within range?
001A2A  3  90 03        	bcc :+
001A2C  3  4C 4A 1A     	jmp skobj2		; no, ignore object.
001A2F  3               :
001A2F  3  A0 22        	ldy #34			; point to x coordinate now.
001A31  3  B1 66        	lda (z80_hl),y 		; get coordinate.
001A33  3  38           	sec
001A34  3  A0 09        	ldy #var_newX
001A36  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
001A38  3  18           	clc			; add sprite width minus one.
001A39  3  69 0F        	adc #15
001A3B  3  C9 1F        	cmp #31			; within range?
001A3D  3  90 03        	bcc :+
001A3F  3  4C 4A 1A     	jmp skobj2		; no, ignore object.
001A42  3               :
001A42  3  68           	pla			; remove return address from stack.
001A43  3  68           	pla
001A44  3               
001A44  3  AD 21 11     	lda numob 		; objects in game.
001A47  3  38           	sec
001A48  3  E5 63        	sbc z80_b		; subtract loop counter.
001A4A  3               skobj2:
001A4A  3  60           	rts			; accumulator now points to object.
001A4B  3               
001A4B  3               
001A4B  3               ;---------------------------------------------------------------------
001A4B  3               ; Spawn a new sprite.
001A4B  3               ;---------------------------------------------------------------------
001A4B  3               
001A4B  3               spawn:
001A4B  3  A9 2E        	lda #<sprtab		; sprite table.
001A4D  3  85 66        	sta z80_l
001A4F  3  A9 2A        	lda #>sprtab
001A51  3  85 67        	sta z80_h
001A53  3               numsp1:
001A53  3  A9 0C        	lda #NUMSPR		; number of sprites.
001A55  3  8D F6 1A     	sta spcnt
001A58  3               spaw0:
001A58  3  A0 00        	ldy #var_Type
001A5A  3  B1 66        	lda (z80_hl),y		; get sprite type.
001A5C  3  C9 FF        	cmp #255		; is it an unused slot?
001A5E  3  F0 10        	beq spaw1 		; yes, we can use this one.
001A60  3               
001A60  3  18           	clc 			; point to next sprite in table.
001A61  3  A5 66        	lda z80_l
001A63  3  69 11        	adc #TABSIZ		; size of each entry.
001A65  3  85 66        	sta z80_l
001A67  3  90 02        	bcc :+
001A69  3  E6 67        	inc z80_h
001A6B  3               :
001A6B  3  CE F6 1A     	dec spcnt		; one less iteration.
001A6E  3  D0 E8        	bne spaw0		; keep going until we find a slot.
001A70  3               
001A70  3               ; Didn't find one but drop through and set up a dummy sprite instead.
001A70  3               
001A70  3               spaw1:
001A70  3  A5 69        	lda z80_i		; address of original sprite.
001A72  3  48           	pha
001A73  3  A5 68        	lda z80_x
001A75  3  48           	pha
001A76  3               
001A76  3  A5 66        	lda z80_l		; store spawned sprite address.
001A78  3  8D F7 1A     	sta spptr
001A7B  3  A5 67        	lda z80_h
001A7D  3  8D F8 1A     	sta spptr+1
001A80  3               
001A80  3  A5 62        	lda z80_c
001A82  3  A0 00        	ldy #var_Type
001A84  3  91 66        	sta (z80_hl),y 		; set the type.
001A86  3  A0 05        	ldy #var_newType
001A88  3  91 66        	sta (z80_hl),y		; copy
001A8A  3               
001A8A  3  A5 63        	lda z80_b
001A8C  3  A0 01        	ldy #var_Image
001A8E  3  91 66        	sta (z80_hl),y		; set the image.
001A90  3  A0 06        	ldy #var_newImage
001A92  3  91 66        	sta (z80_hl),y		; copy
001A94  3               
001A94  3  A9 00        	lda #0 				; frame zero.
001A96  3  A0 02        	ldy #var_Frame
001A98  3  91 66        	sta (z80_hl),y		; set frame.
001A9A  3  A0 07        	ldy #var_newFrame
001A9C  3  91 66        	sta (z80_hl),y		; copy
001A9E  3               
001A9E  3  A0 09        	ldy #9
001AA0  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001AA2  3  A0 04        	ldy #var_X
001AA4  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
001AA6  3  A0 09        	ldy #var_newX
001AA8  3  91 66        	sta (z80_hl),y		; copy
001AAA  3               
001AAA  3  A0 08        	ldy #8
001AAC  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001AAE  3  A0 03        	ldy #var_Y
001AB0  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
001AB2  3  A0 08        	ldy #var_newY
001AB4  3  91 66        	sta (z80_hl),y		; copy
001AB6  3               
001AB6  3  A0 0A        	ldy #10				; direction of original.
001AB8  3  B1 68        	lda (z80_ix),y
001ABA  3  A0 0A        	ldy #var_Direction
001ABC  3  91 66        	sta (z80_hl),y		; direction
001ABE  3               
001ABE  3  A9 00        	lda #0
001AC0  3  A0 0D        	ldy #var_jumpLo
001AC2  3  91 66        	sta (z80_hl),y		; reset parameter.
001AC4  3  C8           	iny
001AC5  3  91 66        	sta (z80_hl),y		; reset parameter.
001AC7  3  C8           	iny
001AC8  3  91 66        	sta (z80_hl),y		; reset parameter.
001ACA  3  C8           	iny
001ACB  3  91 66        	sta (z80_hl),y		; reset parameter.
001ACD  3               rtssp:
001ACD  3  AD F7 1A     	lda spptr			; address of new sprite.
001AD0  3  85 68        	sta z80_x
001AD2  3  AD F8 1A     	lda spptr+1
001AD5  3  85 69        	sta z80_i
001AD7  3               evis1:
001AD7  3  20 D9 35     	jsr evnt09 			; call sprite initialisation event.
001ADA  3               
001ADA  3  AD F7 1A     	lda spptr 			; address of new sprite.
001ADD  3  85 68        	sta z80_x
001ADF  3  AD F8 1A     	lda spptr+1
001AE2  3  85 69        	sta z80_i
001AE4  3               
001AE4  3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
001AE4  3  A0 03        	ldy #var_Y
001AE6  3  B1 66        	lda (z80_hl), y		; old x coord
001AE8  3  C9 B9        	cmp #SpriteMaxY     ; beyond maximum?
001AEA  3  B0 03        	bcs :+				; yes, don't draw it.
001AEC  3               
001AEC  3  20 41 25     	jsr sspria 			; display the new sprite.
001AEF  3               :
001AEF  3  68           	pla					; address of original sprite.
001AF0  3  85 68        	sta z80_x
001AF2  3  68           	pla
001AF3  3  85 69        	sta z80_i
001AF5  3               
001AF5  3  60           	rts
001AF6  3               
001AF6  3  00           spcnt:	.byte 0
001AF7  3  00 00        spptr:	.word 0			; spawned sprite pointer.
001AF9  3  00           seed:	.byte 0			; seed for random numbers.
001AFA  3  30 30 30 30  score:	.byte "000000"		; player"s score.
001AFE  3  30 30        
001B00  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
001B04  3  30 30        
001B06  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
001B0A  3  30 30        
001B0C  3  00 58        grbase:	.word ScreenAddr	; graphics base address.
001B0E  3               
001B0E  3               ;----------------------------------------------------
001B0E  3               ; Check y-pos
001B0E  3               ;----------------------------------------------------
001B0E  3               
001B0E  3               checkx:
001B0E  3  AD 4C 11     	lda dispy		; y position.
001B11  3  C9 18        	cmp #24			; off screen?
001B13  3  B0 01        	bcs :+
001B15  3  60           	rts			; no, it's okay.
001B16  3               :
001B16  3  68           	pla			; remove return address from stack.
001B17  3  85 66        	sta z80_l
001B19  3  68           	pla
001B1A  3  85 67        	sta z80_h
001B1C  3  60           	rts
001B1D  3               
001B1D  3               ;-----------------------------------------------
001B1D  3               ; Displays the current high score.
001B1D  3               ;-----------------------------------------------
001B1D  3               
001B1D  3               dhisc:
001B1D  3  A9 00        	lda #<hiscor 		; high score text.
001B1F  3  85 66        	sta z80_l
001B21  3  A9 1B        	lda #>hiscor
001B23  3  85 67        	sta z80_h
001B25  3  4C 30 1B     	jmp dscor1		; check in printable range then show 6 digits.
001B28  3               
001B28  3               ;------------------------------------------------------
001B28  3               ; Displays the current score.
001B28  3               ;------------------------------------------------------
001B28  3               
001B28  3               dscor:
001B28  3  A9 FA        	lda #<score		; score text.
001B2A  3  85 66        	sta z80_l
001B2C  3  A9 1A        	lda #>score
001B2E  3  85 67        	sta z80_h
001B30  3               dscor1:
001B30  3  20 B4 22     	jsr preprt		; set up font and print position.
001B33  3  20 0E 1B     	jsr checkx		; make sure we're in a printable range.
001B36  3               
001B36  3  A9 06        	lda #6			; digits to display.
001B38  3  85 63        	sta z80_b
001B3A  3  AD F6 21     	lda prtmod		; get print mode.
001B3D  3  F0 03        	beq :+			; standard size text?
001B3F  3  4C 63 1B     	jmp bscor0		; no, show double-height.
001B42  3               :
001B42  3               dscor0:
001B42  3  A0 00        	ldy #0
001B44  3  B1 66        	lda (z80_hl),y 		; fetch character.
001B46  3  20 B1 1C     	jsr pchar 		; display character.
001B49  3  EE 4B 11     	inc dispx		; move along x coordinate
001B4C  3               
001B4C  3  E6 66        	inc z80_l		; next score column.
001B4E  3  D0 02        	bne :+
001B50  3  E6 67        	inc z80_h
001B52  3               :
001B52  3  C6 63        	dec z80_b
001B54  3  D0 EC        	bne dscor0 		; repeat for all digits.
001B56  3               dscor2:
001B56  3  AD 4B 11     	lda dispx 		; set up display coordinates.
001B59  3  8D 40 11     	sta charx
001B5C  3  AD 4C 11     	lda dispy
001B5F  3  8D 41 11     	sta chary
001B62  3  60           	rts
001B63  3               
001B63  3               ;------------------------------------------------------
001B63  3               ; Displays the current score in double-height characters.
001B63  3               ;
001B63  3               ; Input:
001B63  3               ;  B  = digit number
001B63  3               ;  HL = score string
001B63  3               ;------------------------------------------------------
001B63  3               
001B63  3               bscor0:
001B63  3  A0 00        	ldy #0
001B65  3               
001B65  3  B1 66        	lda (z80_hl),y 		; fetch character.
001B67  3  20 2E 22     	jsr bchar 		; display big char.
001B6A  3               
001B6A  3  E6 66        	inc z80_l 		; next score column.
001B6C  3  D0 02        	bne :+
001B6E  3  E6 67        	inc z80_h
001B70  3               :
001B70  3  C6 63        	dec z80_b
001B72  3  F0 03        	beq :+
001B74  3  4C 63 1B     	jmp bscor0 		; repeat for all digits.
001B77  3               :
001B77  3  4C 56 1B     	jmp dscor2 		; tidy up line and column variables.
001B7A  3               
001B7A  3               ;-----------------------------------------------------
001B7A  3               ; Adds number in the hl pair to the score.
001B7A  3               ;-----------------------------------------------------
001B7A  3               
001B7A  3               addsc:
001B7A  3  A9 FB        	lda #<(score+1) 	; ten thousands column.
001B7C  3  85 64        	sta z80_e
001B7E  3  A9 1A        	lda #>(score+1)
001B80  3  85 65        	sta z80_d
001B82  3  A9 10        	lda #<10000		; amount to add each time.
001B84  3  85 62        	sta z80_c
001B86  3  A9 27        	lda #>10000
001B88  3  85 63        	sta z80_b
001B8A  3  20 CE 1B     	jsr incsc		; add to score.
001B8D  3               
001B8D  3  E6 64        	inc z80_e		; thousands column.
001B8F  3  D0 02        	bne :+
001B91  3  E6 65        	inc z80_d
001B93  3               :
001B93  3  A9 E8        	lda #<1000		; amount to add each time.
001B95  3  85 62        	sta z80_c
001B97  3  A9 03        	lda #>1000
001B99  3  85 63        	sta z80_b
001B9B  3  20 CE 1B     	jsr incsc 		; add to score.
001B9E  3               
001B9E  3  E6 64        	inc z80_e		; hundreds column.
001BA0  3  D0 02        	bne :+
001BA2  3  E6 65        	inc z80_d
001BA4  3               :
001BA4  3  A9 64        	lda #<100		; amount to add each time.
001BA6  3  85 62        	sta z80_c
001BA8  3  A9 00        	lda #>100
001BAA  3  85 63        	sta z80_b
001BAC  3  20 CE 1B     	jsr incsc		; add to score.
001BAF  3               
001BAF  3  E6 64        	inc z80_e 		; tens column.
001BB1  3  D0 02        	bne :+
001BB3  3  E6 65        	inc z80_d
001BB5  3               :
001BB5  3  A9 0A        	lda #<10		; amount to add each time.
001BB7  3  85 62        	sta z80_c
001BB9  3  A9 00        	lda #>10
001BBB  3  85 63        	sta z80_b
001BBD  3  20 CE 1B     	jsr incsc 		; add to score.
001BC0  3               
001BC0  3  E6 64        	inc z80_e		; units column.
001BC2  3  D0 02        	bne :+
001BC4  3  E6 65        	inc z80_d
001BC6  3               :
001BC6  3  A9 01        	lda #<1			; units.
001BC8  3  85 62        	sta z80_c
001BCA  3  A9 00        	lda #>1
001BCC  3  85 63        	sta z80_b
001BCE  3               incsc:
001BCE  3  A5 67        	lda z80_h		; store amount to add.
001BD0  3  48           	pha
001BD1  3  A5 66        	lda z80_l
001BD3  3  48           	pha
001BD4  3               
001BD4  3  38           	sec			; subtract from amount to add.
001BD5  3  A5 66        	lda z80_l
001BD7  3  E5 62        	sbc z80_c
001BD9  3  85 66        	sta z80_l
001BDB  3  A5 67        	lda z80_h
001BDD  3  E5 63        	sbc z80_b
001BDF  3  85 67        	sta z80_h
001BE1  3  90 14        	bcc incsc0		; too much, restore value.
001BE3  3               
001BE3  3  68           	pla			; delete the previous amount from the stack.
001BE4  3  68           	pla
001BE5  3               
001BE5  3  A5 65        	lda z80_d 		; store column position.
001BE7  3  48           	pha
001BE8  3  A5 64        	lda z80_e
001BEA  3  48           	pha
001BEB  3  20 FE 1B     	jsr incsc2		; do the increment.
001BEE  3               
001BEE  3  68           	pla			; restore column.
001BEF  3  85 64        	sta z80_e
001BF1  3  68           	pla
001BF2  3  85 65        	sta z80_d
001BF4  3  4C CE 1B     	jmp incsc		; repeat until all added.
001BF7  3               
001BF7  3               incsc0:
001BF7  3  68           	pla			; restore previous value.
001BF8  3  85 66        	sta z80_l
001BFA  3  68           	pla
001BFB  3  85 67        	sta z80_h
001BFD  3  60           	rts
001BFE  3               incsc2:
001BFE  3  A0 00        	ldy #0
001C00  3  B1 64        	lda (z80_de),y 		; get amount.
001C02  3  18           	clc
001C03  3  69 01        	adc #1			; add one to column.
001C05  3  91 64        	sta (z80_de),y		; write new column total.
001C07  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
001C09  3  B0 01        	bcs :+
001C0B  3  60           	rts			; no, carry on.
001C0C  3               :
001C0C  3  A9 30        	lda #'0'		; make it zero.
001C0E  3  91 64        	sta (z80_de),y		; write new column total.
001C10  3  C6 64        	dec z80_e		; back one column.
001C12  3  D0 02        	bne :+
001C14  3  C6 65        	dec z80_d
001C16  3               :
001C16  3  4C FE 1B     	jmp incsc2
001C19  3               
001C19  3               ;------------------------------------
001C19  3               ; Add bonus to score and reset bonus
001C19  3               ;------------------------------------
001C19  3               
001C19  3               addbo:
001C19  3  A2 05        	ldx #5			; last digit.
001C1B  3  18           	clc			; clear carry.
001C1C  3               addbo0:
001C1C  3  BD FA 1A     	lda score,x		; get score.
001C1F  3  7D 06 1B     	adc bonus,x		; add bonus.
001C22  3  38           	sec			; 0 to 18.
001C23  3  E9 30        	sbc #48
001C25  3  48           	pha
001C26  3  A9 30        	lda #'0'
001C28  3  9D 06 1B     	sta bonus,x		; zeroise bonus.
001C2B  3  68           	pla
001C2C  3  C9 3A        	cmp #58			; carried?
001C2E  3  B0 07        	bcs addbo2		; no, do next one.
001C30  3  38           	sec
001C31  3  E9 0A        	sbc #10			; subtract 10.
001C33  3  38           	sec
001C34  3  4C 38 1C     	jmp addbo1
001C37  3               addbo2:
001C37  3  18           	clc
001C38  3               addbo1:
001C38  3  9D FA 1A     	sta score,x		; write new score.
001C3B  3  CA           	dex			; next digit.
001C3C  3  10 DE        	bpl addbo0		; repeat for all 6 digits.
001C3E  3  60           	rts
001C3F  3               
001C3F  3               ;------------------------------------
001C3F  3               ; Swap score and bonus.
001C3F  3               ;------------------------------------
001C3F  3               
001C3F  3               swpsb:
001C3F  3  A2 05        	ldx #5			; digits to add.
001C41  3               swpsb0:
001C41  3  BD FA 1A     	lda score,x 		; get score digits.
001C44  3  48           	pha			; save digit
001C45  3  BD 06 1B     	lda bonus,x 		; get bonus digits.
001C48  3  9D FA 1A     	sta score,x		; switch score-bonus
001C4B  3  68           	pla
001C4C  3  9D 06 1B     	sta bonus,x
001C4F  3  CA           	dex 			; repeat for all 6 digits.
001C50  3  10 EF        	bpl swpsb0
001C52  3  60           	rts
001C53  3               
001C53  3               ;----------------------------------------------------
001C53  3               ; Get print address.
001C53  3               ;----------------------------------------------------
001C53  3               
001C53  3               gprad:
001C53  3  98           	tya
001C54  3  48           	pha
001C55  3               
001C55  3  AD 4B 11     	lda dispx 		; x coordinate.
001C58  3  85 80        	sta scraddr
001C5A  3  A9 00        	lda #0
001C5C  3  85 81        	sta scraddr+1
001C5E  3  06 80        	asl scraddr  	; multiply char by 8
001C60  3  26 81        	rol scraddr+1
001C62  3  06 80        	asl scraddr
001C64  3  26 81        	rol scraddr+1
001C66  3  06 80        	asl scraddr
001C68  3  26 81        	rol scraddr+1
001C6A  3               
001C6A  3  AD 4C 11     	lda dispy		; y coordinate.
001C6D  3  0A           	asl a
001C6E  3  0A           	asl a
001C6F  3  0A           	asl a			; multiply char by 8
001C70  3  A8           	tay
001C71  3               
001C71  3  18           	clc
001C72  3  A5 80        	lda scraddr
001C74  3  79 00 06     	adc SCADTB_lb,y
001C77  3  85 80        	sta scraddr
001C79  3  A5 81        	lda scraddr+1
001C7B  3  79 00 07     	adc SCADTB_hb,y
001C7E  3  85 81        	sta scraddr+1
001C80  3               
001C80  3  68           	pla
001C81  3  A8           	tay
001C82  3  60           	rts
001C83  3               
001C83  3               ;--------------------------------------------------------------
001C83  3               ; Get property buffer address of char at (dispx, dispy) in hl.
001C83  3               ; 
001C83  3               ; Output:
001C83  3               ;  buffaddr = bufaddr = MAP + dispy*32 + dispx
001C83  3               ;--------------------------------------------------------------
001C83  3               
001C83  3               pradd:
001C83  3  AD 4C 11     	lda dispy 		; y coordinate.
001C86  3  85 86        	sta bufaddr
001C88  3  A9 00        	lda #0
001C8A  3  85 87        	sta bufaddr+1
001C8C  3  06 86        	asl bufaddr  		; multiply char by 32
001C8E  3  26 87        	rol bufaddr+1
001C90  3  06 86        	asl bufaddr
001C92  3  26 87        	rol bufaddr+1
001C94  3  06 86        	asl bufaddr
001C96  3  26 87        	rol bufaddr+1
001C98  3  06 86        	asl bufaddr
001C9A  3  26 87        	rol bufaddr+1
001C9C  3  06 86        	asl bufaddr
001C9E  3  26 87        	rol bufaddr+1
001CA0  3  18           	clc			; add address of MAP graphics.
001CA1  3  A5 86        	lda bufaddr
001CA3  3  6D 4B 11     	adc dispx
001CA6  3  69 00        	adc #<MAP
001CA8  3  85 86        	sta bufaddr
001CAA  3  A5 87        	lda bufaddr+1
001CAC  3  69 03        	adc #>MAP
001CAE  3  85 87        	sta bufaddr+1
001CB0  3  60           	rts
001CB1  3               
001CB1  3               ;----------------------------------------------------
001CB1  3               ; Display character in A at dispx,dispy.
001CB1  3               ;
001CB1  3               ; Input:
001CB1  3               ;  A 	   = character to print
001CB1  3               ;----------------------------------------------------
001CB1  3               
001CB1  3               pchar:
001CB1  3  85 82        	sta fntaddr
001CB3  3  A9 00        	lda #0
001CB5  3  85 83        	sta fntaddr+1
001CB7  3  06 82        	asl fntaddr  		; multiply char by 8.
001CB9  3  26 83        	rol fntaddr+1
001CBB  3  06 82        	asl fntaddr
001CBD  3  26 83        	rol fntaddr+1
001CBF  3  06 82        	asl fntaddr
001CC1  3  26 83        	rol fntaddr+1
001CC3  3               
001CC3  3  A5 82        	lda fntaddr
001CC5  3  18           	clc
001CC6  3  6D 4F 11     	adc FontPtr
001CC9  3  85 82        	sta fntaddr		; that's the low byte.
001CCB  3  A5 83        	lda fntaddr+1
001CCD  3  6D 50 11     	adc FontPtr+1
001CD0  3  85 83        	sta fntaddr+1		; add displacement.
001CD2  3               pchark:
001CD2  3  20 53 1C     	jsr gprad		; get screen address.
001CD5  3  A2 07        	ldx #7			; lines to write.
001CD7  3               pchar0:
001CD7  3  A0 00        	ldy #0
001CD9  3  B1 82        	lda (fntaddr),y 	; get image byte.
001CDB  3  BC EC 1C     	ldy scrtab,x		; Get rowoffset
001CDE  3               
001CDE  3  49 00        	eor #TxtInvert		; Invert
001CE0  3               
001CE0  3  91 80        	sta (scraddr),y 	; copy to screen.
001CE2  3  E6 82        	inc fntaddr		; next image byte.
001CE4  3  D0 02        	bne :+
001CE6  3  E6 83        	inc fntaddr+1
001CE8  3               :
001CE8  3  CA           	dex			; next screen row down.
001CE9  3  10 EC        	bpl pchar0		; repeat.
001CEB  3  60           	rts
001CEC  3               
001CEC  3  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
001CF0  3  03 02 01 00  
001CF4  3               ;scrtab:	.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
001CF4  3               
001CF4  3               ;----------------------------------------------
001CF4  3               ; Print attributes, properties and pixels.
001CF4  3               ;
001CF4  3               ; Input:
001CF4  3               ;  A	= tile number
001CF4  3               ;----------------------------------------------
001CF4  3               
001CF4  3               pattr:
001CF4  3  85 63        	sta z80_b		; store cell in b register for now.
001CF6  3  AA           	tax
001CF7  3  BD E0 38     	lda bprop,x 		; block properties.
001CFA  3  85 62        	sta z80_c
001CFC  3  20 83 1C     	jsr pradd 		; get property buffer address.
001CFF  3  A5 62        	lda z80_c
001D01  3  A0 00        	ldy #0
001D03  3  91 86        	sta (bufaddr),y 	; write property.
001D05  3  A5 63        	lda z80_b 		; restore cell.
001D07  3               
001D07  3               ; Print attributes, no properties.
001D07  3               
001D07  3               panp:
001D07  3  85 64        	sta z80_e		; displacement in e.
001D09  3  A9 00        	lda #0
001D0B  3  85 65        	sta z80_d		; no high byte.
001D0D  3  06 64        	asl z80_e  		; multiply char by 8.
001D0F  3  26 65        	rol z80_d
001D11  3  06 64        	asl z80_e
001D13  3  26 65        	rol z80_d
001D15  3  06 64        	asl z80_e
001D17  3  26 65        	rol z80_d
001D19  3  18           	clc
001D1A  3  A5 64        	lda z80_e
001D1C  3  69 C8        	adc #<chgfx 		; address of graphics.
001D1E  3  85 84        	sta tileaddr
001D20  3  A5 65        	lda z80_d
001D22  3  69 38        	adc #>chgfx
001D24  3  85 85        	sta tileaddr+1
001D26  3  20 53 1C     	jsr gprad 		; get screen address.
001D29  3  A2 07        	ldx #7			; number of pixel rows to write.
001D2B  3               panp0:
001D2B  3  A0 00        	ldy #0
001D2D  3  B1 84        	lda (tileaddr),y 	; get image byte.
001D2F  3  49 00        	eor #TxtInvert		; Invert
001D31  3  BC EC 1C     	ldy scrtab,x
001D34  3  91 80        	sta (scraddr),y 	; copy to screen.
001D36  3  E6 84        	inc tileaddr 		; next image byte.
001D38  3  D0 02        	bne :+
001D3A  3  E6 85        	inc tileaddr+1
001D3C  3               :
001D3C  3  CA           	dex	 		; repeat for 8 pixel rows.
001D3D  3  10 EC        	bpl panp0
001D3F  3  EE 4B 11     	inc dispx 		; move along one.
001D42  3  EE 40 11     	inc charx
001D45  3  60           	rts
001D46  3               
001D46  3               ;----------------------------------------------
001D46  3               ; Print character pixels, no more.
001D46  3               ;
001D46  3               ; Input:
001D46  3               ;  A	= character to print
001D46  3               ;----------------------------------------------
001D46  3               
001D46  3               pchr:
001D46  3  20 B1 1C     	jsr pchar 		; show character in accumulator.
001D49  3  EE 4B 11     	inc dispx		; move along one.
001D4C  3  60           	rts
001D4D  3               
001D4D  3               ;----------------------------------------------------
001D4D  3               ; Shifter sprite routine for objects.
001D4D  3               ;----------------------------------------------------
001D4D  3               
001D4D  3               sprit7:
001D4D  3  A5 63        	lda z80_b
001D4F  3  F0 0F        	beq sprit0
001D51  3  85 61        	sta z80_a
001D53  3               sprit3:
001D53  3  4E DE 1D     	lsr spr			; shift into position.
001D56  3  6E DF 1D     	ror spr+1
001D59  3  6E E0 1D     	ror spr+2
001D5C  3  C6 61        	dec z80_a		; one less iteration.
001D5E  3  D0 F3        	bne sprit3
001D60  3               sprit0:
001D60  3  60           	rts 			; now apply to screen.
001D61  3               
001D61  3               ;----------------------------------------------------
001D61  3               ; Draw sprite
001D61  3               ;----------------------------------------------------
001D61  3               
001D61  3               sprite:
001D61  3  8E E1 1D     	stx xtmp		; Save X-reg
001D64  3  20 23 25     	jsr scadd 		; get screen address in scraddr.
001D67  3               
001D67  3  AD 4B 11     	lda dispx 		; x position.
001D6A  3  29 07        	and #7 			; position straddling cells.
001D6C  3  85 63        	sta z80_b		; store in b register.
001D6E  3               
001D6E  3  A5 66        	lda z80_l		; store sprite graphic address.
001D70  3  8D 83 1D     	sta sprit1+1
001D73  3  8D 8A 1D     	sta sprit2+1
001D76  3  A5 67        	lda z80_h
001D78  3  8D 84 1D     	sta sprit1+2
001D7B  3  8D 8B 1D     	sta sprit2+2
001D7E  3               
001D7E  3  A2 00        	ldx #0			; pixel height.
001D80  3  A0 00        	ldy #0
001D82  3               sprit1:
001D82  3  BD 75 50     	lda objdta,x		; fetch first byte.
001D85  3  8D DE 1D     	sta spr
001D88  3  E8           	inx
001D89  3               sprit2:
001D89  3  BD 75 50     	lda objdta,x
001D8C  3  8D DF 1D     	sta spr+1
001D8F  3               
001D8F  3  A9 00        	lda #0
001D91  3  8D E0 1D     	sta spr+2
001D94  3  20 4D 1D     	jsr sprit7		; shift sprite
001D97  3               
001D97  3  AD DE 1D     	lda spr			; fetch graphic.
001D9A  3  A0 00        	ldy #0			; _BEEB
001D9C  3  51 80        	eor (scraddr),y		; merge with screen image.
001D9E  3  91 80        	sta (scraddr),y		; write to screen.
001DA0  3               
001DA0  3  AD DF 1D     	lda spr+1		; fetch graphic.
001DA3  3  A0 08        	ldy #8			; _BEEB
001DA5  3  51 80        	eor (scraddr),y		; merge with screen image.
001DA7  3  91 80        	sta (scraddr),y		; write to screen.
001DA9  3               
001DA9  3  AD E0 1D     	lda spr+2		; fetch graphic.
001DAC  3  A0 10        	ldy #16			; _BEEB
001DAE  3  51 80        	eor (scraddr),y		; merge with screen image.
001DB0  3  91 80        	sta (scraddr),y		; write to screen.
001DB2  3               
001DB2  3  20 C5 25     	jsr nline
001DB5  3               
001DB5  3  E8           	inx			; next source byte.
001DB6  3  E0 20        	cpx #32
001DB8  3  D0 C8        	bne sprit1		; repeat
001DBA  3               
001DBA  3  AE E1 1D     	ldx xtmp		; retreive X-reg
001DBD  3  60           	rts
001DBE  3               
001DBE  3               spritetab:
001DBE  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
001DC2  3  40 41 60 61  
001DC6  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
001DCA  3  C0 C1 E0 E1  
001DCE  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
001DD2  3  40 41 60 61  
001DD6  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
001DDA  3  C0 C1 E0 E1  
001DDE  3               
001DDE  3  00 00 00     spr:	.byte 0,0,0
001DE1  3               
001DE1  3  00           xtmp:	.byte 0
001DE2  3               
001DE2  3               ;-----------------------------------------------------------
001DE2  3               ; Get room address.
001DE2  3               ;-----------------------------------------------------------
001DE2  3               
001DE2  3               groom:
001DE2  3  AE 26 11     	ldx scno 		; screen number.
001DE5  3  A0 00        	ldy #0
001DE7  3               groomx:
001DE7  3  A9 FF        	lda #<scdat 		; pointer to screens.
001DE9  3  85 66        	sta z80_l
001DEB  3  A9 4F        	lda #>scdat
001DED  3  85 67        	sta z80_h
001DEF  3               groom1:
001DEF  3  E0 00        	cpx #0			; is it the first one?
001DF1  3  F0 15        	beq groom0 		; no more screens to skip.
001DF3  3               
001DF3  3  18           	clc
001DF4  3  A5 66        	lda z80_l
001DF6  3  79 FF 4F     	adc scdat,y 		; low byte of screen size.
001DF9  3  85 66        	sta z80_l
001DFB  3  C8           	iny			; point to high byte.
001DFC  3  A5 67        	lda z80_h
001DFE  3  79 FF 4F     	adc scdat,y 		; high byte of screen size.
001E01  3  85 67        	sta z80_h
001E03  3  C8           	iny			; next address.
001E04  3               
001E04  3  CA           	dex 			; one less iteration.
001E05  3  4C EF 1D     	jmp groom1 		; loop until we reach the end.
001E08  3               groom0:
001E08  3  AD 6B 50     	lda numsc 		; add displacement.
001E0B  3  0A           	asl a
001E0C  3  18           	clc			; add double displacement to address.
001E0D  3  65 66        	adc z80_l
001E0F  3  85 66        	sta z80_l
001E11  3  A5 67        	lda z80_h
001E13  3  69 00        	adc #0
001E15  3  85 67        	sta z80_h
001E17  3  60           	rts
001E18  3               
001E18  3               ;-----------------------------------------------------------
001E18  3               ; Draw present room.
001E18  3               ;-----------------------------------------------------------
001E18  3               
001E18  3               droom:
001E18  3  AD 1D 11     	lda wintop 		; window top.
001E1B  3  8D 4C 11     	sta dispy		; set cursor y position.
001E1E  3               droom2:
001E1E  3  20 E2 1D     	jsr groom 		; get address of current room.
001E21  3  A9 00        	lda #0	 		; zero in accumulator.
001E23  3  8D 80 1E     	sta comcnt 		; reset compression counter.
001E26  3  AD 1F 11     	lda winhgt 		; height of window.
001E29  3  8D 4D 1E     	sta rrow		; set row counter
001E2C  3               droom0:
001E2C  3  AD 1E 11     	lda winlft 		; window left edge.
001E2F  3  8D 4B 11     	sta dispx 		; set cursor x position.
001E32  3  AD 20 11     	lda winwid 		; width of window.
001E35  3  8D 4C 1E     	sta rcol		; set column counter
001E38  3               droom1:
001E38  3  20 4E 1E     	jsr flbyt 		; decompress next byte on the fly.
001E3B  3  20 F4 1C     	jsr pattr 		; show attributes and block.
001E3E  3  CE 4C 1E     	dec rcol		; one less column.
001E41  3  D0 F5        	bne droom1 		; repeat for entire line.
001E43  3  EE 4C 11     	inc dispy		; move down one line.
001E46  3  CE 4D 1E     	dec rrow 		; one less row.
001E49  3  D0 E1        	bne droom0 		; repeat for all rows.
001E4B  3  60           	rts
001E4C  3               
001E4C  3  00           rcol:	.byte 0
001E4D  3  00           rrow:	.byte 0
001E4E  3               
001E4E  3               ;----------------------------------------------
001E4E  3               ; Decompress bytes on-the-fly.
001E4E  3               ;----------------------------------------------
001E4E  3               
001E4E  3               flbyt:
001E4E  3  AD 80 1E     	lda comcnt 		; compression counter.
001E51  3  D0 22        	bne flbyt1		; any more to decompress?  yes.
001E53  3               
001E53  3  A0 00        	ldy #0
001E55  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
001E57  3  E6 66        	inc z80_l 		; point to next cell.
001E59  3  D0 02        	bne :+
001E5B  3  E6 67        	inc z80_h
001E5D  3               :
001E5D  3  C9 FF        	cmp #255 		; is this byte a control code?
001E5F  3  F0 01        	beq :+
001E61  3  60           	rts 			; no, this byte is uncompressed.
001E62  3               :
001E62  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
001E64  3  8D 7F 1E     	sta combyt 		; set up the type.
001E67  3  E6 66        	inc z80_l 		; point to quantity.
001E69  3  D0 02        	bne :+
001E6B  3  E6 67        	inc z80_h
001E6D  3               :
001E6D  3  B1 66        	lda (z80_hl),y 		; get quantity.
001E6F  3  E6 66        	inc z80_l 		; point to next byte.
001E71  3  D0 02        	bne :+
001E73  3  E6 67        	inc z80_h
001E75  3               :
001E75  3               flbyt1:
001E75  3  8D 80 1E     	sta comcnt 		; store new quantity.
001E78  3  CE 80 1E     	dec comcnt		; one less.
001E7B  3  AD 7F 1E     	lda combyt 		; byte to expand.
001E7E  3  60           	rts
001E7F  3               
001E7F  3  00           combyt:	.byte 0			; byte type compressed.
001E80  3  00           comcnt:	.byte 0			; compression counter.
001E81  3               
001E81  3               ;------------------------------------------
001E81  3               ; Ladder down check.
001E81  3               ;
001E81  3               ; Input:
001E81  3               ;  IX = sprite pointer
001E81  3               ;------------------------------------------
001E81  3               
001E81  3               laddd:
001E81  3  A0 09        	ldy #9
001E83  3  B1 68        	lda (z80_ix),y		; x coordinate.
001E85  3  8D 4B 11     	sta dispx
001E88  3               
001E88  3  A0 08        	ldy #8
001E8A  3  B1 68        	lda (z80_ix),y		; y coordinate.
001E8C  3  29 FE        	and #254		; make it even.
001E8E  3  91 68        	sta (z80_ix),y 		; reset it.
001E90  3               numsp5:
001E90  3  18           	clc 			; look down 16 pixels.
001E91  3  69 10        	adc #16
001E93  3  8D 4C 11     	sta dispy		; coords in dispx,dispy.
001E96  3  4C AE 1E     	jmp laddv
001E99  3               
001E99  3               ;------------------------------------------
001E99  3               ; Ladder up check.
001E99  3               ;
001E99  3               ; Input:
001E99  3               ;  IX = sprite pointer
001E99  3               ;
001E99  3               ; Output:
001E99  3               ;  A  = 0 is ok, A <>0 is not ok
001E99  3               ;------------------------------------------
001E99  3               
001E99  3               laddu:
001E99  3  A0 09        	ldy #9
001E9B  3  B1 68        	lda (z80_ix),y		; x coordinate.
001E9D  3  8D 4B 11     	sta dispx
001EA0  3               
001EA0  3  A0 08        	ldy #8
001EA2  3  B1 68        	lda (z80_ix),y		; y coordinate.
001EA4  3  29 FE        	and #254 		; make it even.
001EA6  3  91 68        	sta (z80_ix),y		; reset it.
001EA8  3               numsp6:
001EA8  3  18           	clc 			; look 2 pixels above feet.
001EA9  3  69 0E        	adc #14
001EAB  3  8D 4C 11     	sta dispy		; coords in dispx,dispy.
001EAE  3               laddv:
001EAE  3  20 95 20     	jsr tstbl 		; get map address.
001EB1  3  20 C8 1F     	jsr ldchk 		; standard ladder check.
001EB4  3  F0 01        	beq :+
001EB6  3  60           	rts 			; no way through.
001EB7  3               :
001EB7  3  E6 86        	inc bufaddr 		; look right one cell.
001EB9  3  D0 02        	bne :+
001EBB  3  E6 87        	inc bufaddr+1
001EBD  3               :
001EBD  3  20 C8 1F     	jsr ldchk 		; do the check.
001EC0  3  F0 01        	beq :+
001EC2  3  60           	rts 			; impassable.
001EC3  3               :
001EC3  3  AD 4B 11     	lda dispx 		; y coordinate.
001EC6  3  29 07        	and #7 			; position straddling block cells.
001EC8  3  D0 01        	bne :+
001ECA  3  60           	rts 			; no more checks needed.
001ECB  3               :
001ECB  3  E6 86        	inc bufaddr 		; look to third cell.
001ECD  3  D0 02        	bne :+
001ECF  3  E6 87        	inc bufaddr+1
001ED1  3               :
001ED1  3  20 C8 1F     	jsr ldchk 		; do the check.
001ED4  3  60           	rts  			; return with zero flag set accordingly.
001ED5  3               
001ED5  3               ;---------------------------------------------------------
001ED5  3               ; Can go up check.
001ED5  3               ;
001ED5  3               ; Input:
001ED5  3               ;  IX = sprite pointer
001ED5  3               ;
001ED5  3               ; Output:
001ED5  3               ;  A  = 0 is ok, A <>0 is not ok
001ED5  3               ;---------------------------------------------------------
001ED5  3               
001ED5  3               cangu:
001ED5  3  A0 09        	ldy #9
001ED7  3  B1 68        	lda (z80_ix),y		; x coordinate.
001ED9  3  8D 4B 11     	sta dispx
001EDC  3  A0 08        	ldy #8
001EDE  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001EE0  3  38           	sec
001EE1  3  E9 02        	sbc #2
001EE3  3  8D 4C 11     	sta dispy		; coords in dispx,dispy.
001EE6  3  20 95 20     	jsr tstbl 		; get map address.
001EE9  3  20 92 1F     	jsr lrchk 		; standard left/right check.
001EEC  3  F0 01        	beq :+
001EEE  3  60           	rts			; no way through.
001EEF  3               :
001EEF  3  E6 86        	inc bufaddr		; look right one cell.
001EF1  3  D0 02        	bne :+
001EF3  3  E6 87        	inc bufaddr+1
001EF5  3               :
001EF5  3  20 92 1F     	jsr lrchk 		; do the check.
001EF8  3  F0 01        	beq :+
001EFA  3  60           	rts			; impassable.
001EFB  3               :
001EFB  3  AD 4B 11     	lda dispx		; x coordinate.
001EFE  3  29 07        	and #7			; position straddling block cells.
001F00  3  D0 01        	bne :+
001F02  3  60           	rts			; no more checks needed.
001F03  3               :
001F03  3  E6 86        	inc bufaddr		; look to third cell.
001F05  3  D0 02        	bne :+
001F07  3  E6 87        	inc bufaddr+1
001F09  3               :
001F09  3  20 92 1F     	jsr lrchk		; do the check.
001F0C  3  60           	rts 			; return with zero flag set accordingly.
001F0D  3               
001F0D  3               ;---------------------------------------------------------
001F0D  3               ; Can go down check.
001F0D  3               ;
001F0D  3               ; Input:
001F0D  3               ;  IX = sprite pointer
001F0D  3               ;
001F0D  3               ; Output:
001F0D  3               ;  A  = 0 is ok, A <>0 is not ok
001F0D  3               ;---------------------------------------------------------
001F0D  3               
001F0D  3               cangd:
001F0D  3  A0 09        	ldy #9
001F0F  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001F11  3  8D 4B 11     	sta dispx
001F14  3  A0 08        	ldy #8
001F16  3  B1 68        	lda (z80_ix),y		; y coordinate.
001F18  3               numsp3:
001F18  3  18           	clc
001F19  3  69 10        	adc #16 		; look down 16 pixels.
001F1B  3  8D 4C 11     	sta dispy		; coords in dispx,dispy.
001F1E  3  20 95 20     	jsr tstbl 		; get map address.
001F21  3  20 A7 1F     	jsr plchk 		; block, platform check.
001F24  3  F0 01        	beq :+
001F26  3  60           	rts			; no way through.
001F27  3               :
001F27  3  E6 86        	inc bufaddr		; look right one cell.
001F29  3  D0 02        	bne :+
001F2B  3  E6 87        	inc bufaddr+1
001F2D  3               :
001F2D  3  20 A7 1F     	jsr plchk		; block, platform check.
001F30  3  F0 01        	beq :+
001F32  3  60           	rts			; impassable.
001F33  3               :
001F33  3  AD 4B 11     	lda dispx		; x coordinate.
001F36  3  29 07        	and #7			; position straddling block cells.
001F38  3  D0 01        	bne :+
001F3A  3  60           	rts			; no more checks needed.
001F3B  3               :
001F3B  3  E6 86        	inc bufaddr		; look to third cell.
001F3D  3  D0 02        	bne :+
001F3F  3  E6 87        	inc bufaddr+1
001F41  3               :
001F41  3  20 A7 1F     	jsr plchk		; block, platform check.
001F44  3  60           	rts			; return with zero flag set accordingly.
001F45  3               
001F45  3               ;---------------------------------------------------------
001F45  3               ; Can go left check.
001F45  3               ;
001F45  3               ; Input:
001F45  3               ;  IX = sprite pointer
001F45  3               ;
001F45  3               ; Output:
001F45  3               ;  A  = 0 is ok, A <>0 is not ok
001F45  3               ;---------------------------------------------------------
001F45  3               
001F45  3               cangl:
001F45  3  A0 08        	ldy #8
001F47  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001F49  3  8D 4C 11     	sta dispy
001F4C  3  A0 09        	ldy #9
001F4E  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001F50  3  38           	sec
001F51  3  E9 02        	sbc #2			; look left 2 pixels.
001F53  3  8D 4B 11     	sta dispx		; coords in dispx,dispy.
001F56  3  4C 6A 1F     	jmp cangh		; test if we can go there.
001F59  3               
001F59  3               ;---------------------------------------------------------
001F59  3               ; Can go right check.
001F59  3               ;
001F59  3               ; Input:
001F59  3               ;  IX = sprite pointer
001F59  3               ;
001F59  3               ; Output:
001F59  3               ;  A  = 0 is ok, A <>0 is not ok
001F59  3               ;---------------------------------------------------------
001F59  3               
001F59  3               cangr:
001F59  3  A0 08        	ldy #8
001F5B  3  B1 68        	lda (z80_ix),y		; y coordinate.
001F5D  3  8D 4C 11     	sta dispy
001F60  3  A0 09        	ldy #9
001F62  3  B1 68        	lda (z80_ix),y		; x coordinate.
001F64  3  18           	clc
001F65  3  69 10        	adc #16			; look right 16 pixels.
001F67  3  8D 4B 11     	sta dispx		; coords in dispx,dispy.
001F6A  3               cangh:
001F6A  3               cangh2:
001F6A  3  A9 03        	lda #3			; default rows to write.
001F6C  3  85 63        	sta z80_b
001F6E  3  AD 4C 11     	lda dispy		; y position.
001F71  3  29 07        	and #7			; does x straddle cells?
001F73  3  D0 02        	bne cangh0		; yes, loop counter is good.
001F75  3  C6 63        	dec z80_b		; one less row to write.
001F77  3               cangh0:
001F77  3  20 95 20     	jsr tstbl		; get map address.
001F7A  3               cangh1:
001F7A  3  20 92 1F     	jsr lrchk		; standard left/right check.
001F7D  3  F0 01        	beq :+
001F7F  3  60           	rts			; no way through.
001F80  3               :
001F80  3  48           	pha
001F81  3  18           	clc
001F82  3  A5 86        	lda bufaddr
001F84  3  69 20        	adc #32			; look down.
001F86  3  85 86        	sta bufaddr
001F88  3  90 02        	bcc :+
001F8A  3  E6 87        	inc bufaddr+1
001F8C  3               :
001F8C  3  68           	pla
001F8D  3               
001F8D  3  C6 63        	dec z80_b
001F8F  3  D0 E9        	bne cangh1
001F91  3  60           	rts
001F92  3               
001F92  3               ;-------------------------------------
001F92  3               ; Check left/right movement is okay.
001F92  3               ;
001F92  3               ; Input:
001F92  3               ;  bufaddr = MAP + x/8 + y/8*32
001F92  3               ;
001F92  3               ; Output:
001F92  3               ;  A  = 0 is ok, A <>0 is not ok
001F92  3               ;-------------------------------------
001F92  3               
001F92  3               lrchk:
001F92  3  A0 00        	ldy #0
001F94  3  B1 86        	lda (bufaddr),y		; fetch map cell.
001F96  3  C9 02        	cmp #WALL 		; is it passable?
001F98  3  F0 0A        	beq lrchkx		; no.
001F9A  3               
001F9A  3  C9 04        	cmp #FODDER		; fodder has to be dug.
001F9C  3  F0 06        	beq lrchkx		; not passable.
001F9E  3  A9 00        	lda #0
001FA0  3  60           	rts
001FA1  3               
001FA1  3               ;--------------------------------------------------------------
001FA1  3               ; Called by mmenu
001FA1  3               ;--------------------------------------------------------------
001FA1  3               
001FA1  3               always:
001FA1  3  A9 FF        	lda #255		; report it as okay.
001FA3  3  60           	rts
001FA4  3               
001FA4  3               lrchkx:
001FA4  3  A9 01        	lda #1 			; reset all bits.
001FA6  3  60           	rts
001FA7  3               
001FA7  3               
001FA7  3               ;--------------------------------------------------------------
001FA7  3               ; Check platform or solid item is not in way.
001FA7  3               ;
001FA7  3               ; Input:
001FA7  3               ;  bufaddr = MAP + x/8 + y/8*32
001FA7  3               ;
001FA7  3               ; Output:
001FA7  3               ;  A  = 0 is ok, A <>0 is not ok
001FA7  3               ;--------------------------------------------------------------
001FA7  3               
001FA7  3               plchk:
001FA7  3  A0 00        	ldy #0
001FA9  3  B1 86        	lda (bufaddr),y 	; fetch map cell.
001FAB  3  C9 02        	cmp #WALL 		; is it passable?
001FAD  3  F0 F5        	beq lrchkx		; no.
001FAF  3               
001FAF  3  C9 04        	cmp #FODDER		; fodder has to be dug.
001FB1  3  F0 F1        	beq lrchkx		; not passable.
001FB3  3               
001FB3  3  C9 01        	cmp #PLATFM		; platform is solid.
001FB5  3  F0 07        	beq plchkx		; not passable.
001FB7  3               
001FB7  3  C9 03        	cmp #LADDER		; is it a ladder?
001FB9  3  F0 E9        	beq lrchkx		; on ladder, deny movement.
001FBB  3               plchk0:
001FBB  3  A9 00        	lda #0			; report as ok
001FBD  3  60           	rts
001FBE  3               plchkx:
001FBE  3  AD 4C 11     	lda dispy		; x coordinate.
001FC1  3  29 07        	and #7			; position straddling blocks.
001FC3  3  F0 DF        	beq lrchkx		; on platform, deny movement.
001FC5  3  4C BB 1F     	jmp plchk0
001FC8  3               
001FC8  3               ;--------------------------------------------------------------
001FC8  3               ; Check ladder is available.
001FC8  3               ;
001FC8  3               ; Input:
001FC8  3               ;  bufaddr = MAP + x/8 + y/8*32
001FC8  3               ;
001FC8  3               ; Output:
001FC8  3               ;  A  = 0 is ok, A <>0 is not ok
001FC8  3               ;--------------------------------------------------------------
001FC8  3               
001FC8  3               ldchk:
001FC8  3  A0 00        	ldy #0
001FCA  3  B1 86        	lda (bufaddr),y 	; fetch cell.
001FCC  3  C9 03        	cmp #LADDER 		; is it a ladder?
001FCE  3  F0 03        	beq ldchk1
001FD0  3  A9 01        	lda #1
001FD2  3  60           	rts  			; return with zero flag set accordingly.
001FD3  3               ldchk1:
001FD3  3  A9 00        	lda #0
001FD5  3  60           	rts
001FD6  3               
001FD6  3               ;--------------------------------------------------------------
001FD6  3               ; Touched deadly block check.
001FD6  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
001FD6  3               ;
001FD6  3               ; Input:
001FD6  3               ;  IX = sprite address
001FD6  3               ;
001FD6  3               ; Output:
001FD6  3               ;  A  = 0 is ok, A=5 is not ok
001FD6  3               ;--------------------------------------------------------------
001FD6  3               
001FD6  3               tded:
001FD6  3  A0 08        	ldy #8
001FD8  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001FDA  3  8D 4C 11     	sta dispy
001FDD  3  C8           	iny
001FDE  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001FE0  3  8D 4B 11     	sta dispx		; coords in dispx,dispy.
001FE3  3  20 95 20     	jsr tstbl		; get map address.
001FE6  3  48           	pha
001FE7  3  A9 1F        	lda #31			; default distance to next line down.
001FE9  3  85 64        	sta z80_e
001FEB  3  68           	pla
001FEC  3  C5 63        	cmp z80_b		; is this the required block?
001FEE  3  D0 01        	bne :+
001FF0  3  60           	rts			; yes.
001FF1  3               :
001FF1  3  E6 86        	inc bufaddr 		; next cell.
001FF3  3  D0 02        	bne :+
001FF5  3  E6 87        	inc bufaddr+1
001FF7  3               :
001FF7  3  A0 00        	ldy #0
001FF9  3  B1 86        	lda (bufaddr),y		; fetch type.
001FFB  3  C5 63        	cmp z80_b 		; is this deadly/custom?
001FFD  3  D0 01        	bne :+
001FFF  3  60           	rts			; yes.
002000  3               :
002000  3  AD 4B 11     	lda dispx		; horizontal position.
002003  3  85 62        	sta z80_c 		; store column in c register.
002005  3  29 07        	and #7			; is it straddling cells?
002007  3  D0 03        	bne :+
002009  3  4C 1D 20     	jmp tded0		; no.
00200C  3               :
00200C  3  E6 86        	inc bufaddr 		; last cell.
00200E  3  D0 02        	bne :+
002010  3  E6 87        	inc bufaddr+1
002012  3               :
002012  3  A0 00        	ldy #0
002014  3  B1 86        	lda (bufaddr),y 	; fetch type.
002016  3  C5 63        	cmp z80_b		; is this the block?
002018  3  D0 01        	bne :+
00201A  3  60           	rts			; yes.
00201B  3               :
00201B  3  C6 64        	dec z80_e		; one less cell to next row down.
00201D  3               tded0:
00201D  3  18           	clc 			; point to next row.
00201E  3  A5 86        	lda bufaddr
002020  3  65 64        	adc z80_e
002022  3  85 86        	sta bufaddr
002024  3  90 02        	bcc :+
002026  3  E6 87        	inc bufaddr+1
002028  3               :
002028  3  A0 00        	ldy #0
00202A  3  B1 86        	lda (bufaddr),y		; fetch left cell block.
00202C  3  C5 63        	cmp z80_b		; is this fatal?
00202E  3  D0 01        	bne :+
002030  3  60           	rts			; yes.
002031  3               :
002031  3  E6 86        	inc bufaddr 		; next cell.
002033  3  D0 02        	bne :+
002035  3  E6 87        	inc bufaddr+1
002037  3               :
002037  3  A0 00        	ldy #0
002039  3  B1 86        	lda (bufaddr),y 	; fetch type.
00203B  3  C5 63        	cmp z80_b		; is this fatal?
00203D  3  D0 01        	bne :+
00203F  3  60           	rts			; yes.
002040  3               :
002040  3  A5 62        	lda z80_c		; horizontal position.
002042  3  29 07        	and #7			; is it straddling cells?
002044  3  D0 03        	bne :+
002046  3  4C 58 20     	jmp tded1 		; no.
002049  3               :
002049  3  E6 86        	inc bufaddr		; last cell.
00204B  3  D0 02        	bne :+
00204D  3  E6 87        	inc bufaddr+1
00204F  3               :
00204F  3  A0 00        	ldy #0
002051  3  B1 86        	lda (bufaddr),y		; fetch type.
002053  3  C5 63        	cmp z80_b		; is this fatal?
002055  3  D0 01        	bne :+
002057  3  60           	rts			; yes.
002058  3               :
002058  3               tded1:
002058  3  AD 4C 11     	lda dispy		; vertical position.
00205B  3  29 07        	and #7 			; is it straddling cells?
00205D  3  D0 01        	bne :+
00205F  3  60           	rts			; no, job done.
002060  3               :
002060  3  18           	clc			; point to next row.
002061  3  A5 86        	lda bufaddr
002063  3  65 64        	adc z80_e
002065  3  85 86        	sta bufaddr
002067  3  90 02        	bcc :+
002069  3  E6 87        	inc bufaddr+1
00206B  3               :
00206B  3  A0 00        	ldy #0
00206D  3  B1 86        	lda (bufaddr),y 	; fetch left cell block.
00206F  3  C5 63        	cmp z80_b		; is this fatal?
002071  3  D0 01        	bne :+
002073  3  60           	rts			; yes.
002074  3               :
002074  3  E6 86        	inc bufaddr		; next cell.
002076  3  D0 02        	bne :+
002078  3  E6 87        	inc bufaddr+1
00207A  3               :
00207A  3  A0 00        	ldy #0
00207C  3  B1 86        	lda (bufaddr),y 	; fetch type.
00207E  3  C5 63        	cmp z80_b		; is this fatal?
002080  3  D0 01        	bne :+
002082  3  60           	rts			; yes.
002083  3               :
002083  3  A5 62        	lda z80_c		; horizontal position.
002085  3  29 07        	and #7			; is it straddling cells?
002087  3  D0 01        	bne :+
002089  3  60           	rts			; no.
00208A  3               :
00208A  3  E6 86        	inc bufaddr		; last cell.
00208C  3  D0 02        	bne :+
00208E  3  E6 87        	inc bufaddr+1
002090  3               :
002090  3  A0 00        	ldy #0
002092  3  B1 86        	lda (bufaddr),y		; fetch final type.
002094  3  60           	rts 			; return with final type in accumulator.
002095  3               
002095  3               ;---------------------------------------------------
002095  3               ; Fetch block type at (dispx, dispy).
002095  3               ;
002095  3               ; Output:
002095  3               ;  A = block type
002095  3               ;---------------------------------------------------
002095  3               
002095  3               tstbl:
002095  3  AD 4C 11     	lda dispy 		; fetch y coord.
002098  3  4A           	lsr a			; bufaddr = y/8
002099  3  4A           	lsr a
00209A  3  4A           	lsr a
00209B  3  85 86        	sta bufaddr
00209D  3  A9 00        	lda #0
00209F  3  85 87        	sta bufaddr+1
0020A1  3               
0020A1  3  06 86        	asl bufaddr  		; bufaddr = y/8 * 32
0020A3  3  26 87        	rol bufaddr+1
0020A5  3  06 86        	asl bufaddr
0020A7  3  26 87        	rol bufaddr+1
0020A9  3  06 86        	asl bufaddr
0020AB  3  26 87        	rol bufaddr+1
0020AD  3  06 86        	asl bufaddr
0020AF  3  26 87        	rol bufaddr+1
0020B1  3  06 86        	asl bufaddr
0020B3  3  26 87        	rol bufaddr+1
0020B5  3               
0020B5  3  AD 4B 11     	lda dispx		; x/8
0020B8  3  4A           	lsr a
0020B9  3  4A           	lsr a
0020BA  3  4A           	lsr a
0020BB  3               
0020BB  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
0020BC  3  65 86        	adc bufaddr
0020BE  3  69 00        	adc #<MAP
0020C0  3  85 86        	sta bufaddr
0020C2  3  A5 87        	lda bufaddr+1
0020C4  3  69 03        	adc #>MAP
0020C6  3  85 87        	sta bufaddr+1
0020C8  3               
0020C8  3  A0 00        	ldy #0
0020CA  3  B1 86        	lda (bufaddr),y 	; fetch byte there.
0020CC  3  60           	rts
0020CD  3               
0020CD  3               
0020CD  3               ;-------------------------------------------------------------------
0020CD  3               ; Jump - if we can.
0020CD  3               ; Requires initial speed to be set up in accumulator prior to call.
0020CD  3               ;
0020CD  3               ; Input:
0020CD  3               ;  IX = sprite address
0020CD  3               ;-------------------------------------------------------------------
0020CD  3               
0020CD  3               jump:
0020CD  3  A0 0D        	ldy #13
0020CF  3  B1 68        	lda (z80_ix),y		; jump table low.
0020D1  3  A0 0E        	ldy #14
0020D3  3  11 68        	ora (z80_ix),y		; jump table high.
0020D5  3  F0 01        	beq :+
0020D7  3  60           	rts			; already in the air.
0020D8  3               :
0020D8  3  A9 20        	lda #>jtab
0020DA  3  A0 0E        	ldy #14
0020DC  3  91 68        	sta (z80_ix),y		; set jump high.
0020DE  3  A9 E5        	lda #<jtab		; jump table start.
0020E0  3  A0 0D        	ldy #13
0020E2  3  91 68        	sta (z80_ix),y		; set jump low.
0020E4  3  60           	rts
0020E5  3               
0020E5  3               ; Jump table.
0020E5  3               
0020E5  3               jtab:
0020E5  3  F8 FA FC     	.byte 248,250,252
0020E8  3  FE FE FF     	.byte 254,254,255
0020EB  3  FF FF 00 00  	.byte 255,255,0,0
0020EF  3  00 01 01 01  	.byte 0,1,1,1,2,2
0020F3  3  02 02        
0020F5  3  04 06 08 08  	.byte 4,6,8,8,8,99
0020F9  3  08 63        
0020FB  3               
0020FB  3               ;------------------------------------------------
0020FB  3               ; Random numbers code.
0020FB  3               ; Pseudo-random number generator, 8-bit.
0020FB  3               ;
0020FB  3               ; Output:
0020FB  3               ;  RND = random number
0020FB  3               ;------------------------------------------------
0020FB  3               
0020FB  3               random:
0020FB  3  AD F9 1A     	lda seed		; get last random number.
0020FE  3  0A           	asl a
0020FF  3  0A           	asl a
002100  3  18           	clc
002101  3  6D F9 1A     	adc seed
002104  3  18           	clc
002105  3  69 45        	adc #$45
002107  3  8D F9 1A     	sta seed		; store new seed.
00210A  3  8D 43 11     	sta varrnd		; return number in variable.
00210D  3  60           	rts
00210E  3               
00210E  3               ;--------------------------------------------------------
00210E  3               ; Keys
00210E  3               ;
00210E  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
00210E  3               ;             ||||||||
00210E  3               ;             |||||||+> Right    KEY 0  - X
00210E  3               ;             ||||||+-> Left     KEY 1  - Z
00210E  3               ;             |||||+--> Down     KEY 2  - .
00210E  3               ;             ||||+---> Up       KEY 3  - ;
00210E  3               ;             |||+----> Fire1    KEY 4  - SPC
00210E  3               ;             ||+-----> Fire2    KEY 5  - Q
00210E  3               ;             |+------> Fire3    KEY 6  - P
00210E  3               ;             +-------> Not used
00210E  3               ;
00210E  3               ;                       Option1  KEY 7  - 1
00210E  3               ;                       Option2  KEY 8  - 2
00210E  3               ;                       Option3  KEY 9  - 3
00210E  3               ;                       Option4  KEY 10 - 4
00210E  3               ;--------------------------------------------------------
00210E  3               
00210E  3               ;              X   Z   .   ;  SPC  Q   P
00210E  3  42 61 68 48  keys:   .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
002112  3  62 10 37     
002115  3  30 31 11 12          .byte $30,$31,$11,$12                   ; menu options.
002119  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
002119  3               ;        .byte $21,$11,$01,$92                   ; menu options.
002119  3               
002119  3  42 61 68 48  jkeys:  .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
00211D  3  62 10 37     
002120  3  30 31 11 12          .byte $30,$31,$11,$12                   ; menu options.
002124  3               ;jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
002124  3               ;        .byte $21,$11,$01,$92                   ; menu options.
002124  3               
002124  3               ;--------------------------------------------------------
002124  3               ; Keyboard test routine.
002124  3               ;
002124  3               ; Input:
002124  3               ;  A = key to read, high nibble=row and low nibble=col
002124  3               ;
002124  3               ; Output:
002124  3               ;  carry clr = key pressed
002124  3               ;  carry set = key not pressed
002124  3               ;--------------------------------------------------------
002124  3               
002124  3               ktest:
002124  3  85 61        	sta z80_a		; save key
002126  3  98           	tya
002127  3  48           	pha
002128  3               
002128  3               ; _BEEB keyboard read
002128  3  A5 61        	lda z80_a
00212A  3  49 80        	eor #$80		; _BEEB just look for this key
00212C  3  AA           	tax
00212D  3               
00212D  3  A9 79        	lda #$79
00212F  3  20 F4 FF     	jsr OSBYTE
002132  3               
002132  3  8A           	txa
002133  3  30 04        	bmi pressed 	; _BEEB X is negative if key is pressed
002135  3               
002135  3  38           	sec			; key not pressed
002136  3  68           	pla
002137  3  A8           	tay
002138  3  60           	rts
002139  3               
002139  3               pressed:
002139  3  18           	clc			; key pressed
00213A  3  68           	pla
00213B  3  A8           	tay
00213C  3  60           	rts
00213D  3               
00213D  3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
002141  3  10 20        
002143  3               
002143  3               ;-------------------------------------------------------
002143  3               ; Joystick and keyboard reading routines.
002143  3               ;
002143  3               ; contrl = 0, Keyboard
002143  3               ;          1, JoyKeyb
002143  3               ;          2, JoyMMC
002143  3               ;-------------------------------------------------------
002143  3               
002143  3               joykey:
002143  3  AD 1A 11     	lda contrl 		; control flag.
002146  3  C9 01        	cmp #1
002148  3  D0 03        	bne :+
00214A  3  4C 68 21     	jmp joyjoy 		; read keyboard joystick
00214D  3               :
00214D  3  C9 02        	cmp #2
00214F  3  D0 03        	bne :+
002151  3  4C 80 21     	jmp joysin 		; read MMC joystick.
002154  3               :
002154  3               ; Keyboard controls.
002154  3               
002154  3  A9 00        	lda #0		 	; zero reading.
002156  3  85 64        	sta z80_e
002158  3               
002158  3  A0 06        	ldy #6	 		; address of last key.
00215A  3               joyke0:
00215A  3  B9 0E 21     	lda keys,y 		; get key from table.
00215D  3  20 24 21     	jsr ktest		; being pressed?
002160  3  26 64        	rol z80_e 		; rotate into reading.
002162  3               
002162  3  88           	dey		 	; next key.
002163  3  10 F5        	bpl joyke0 		; repeat for all keys.
002165  3  4C 79 21     	jmp joyjo1 		; store the value.
002168  3               
002168  3               ; Keyboard joystick controls.
002168  3               
002168  3               joyjoy:
002168  3  A9 00        	lda #0		 	; zero reading.
00216A  3  85 64        	sta z80_e
00216C  3               
00216C  3  A0 06        	ldy #6	 		; address of last key.
00216E  3               joyjo3:
00216E  3  B9 19 21     	lda jkeys,y 		; get key from table.
002171  3  20 24 21     	jsr ktest		; being pressed?
002174  3  26 64        	rol z80_e 		; rotate into reading.
002176  3               
002176  3  88           	dey		 	; next key.
002177  3  10 F5        	bpl joyjo3 		; repeat for all keys.
002179  3               joyjo1:
002179  3  A5 64        	lda z80_e 		; copy e register to accumulator.
00217B  3               joyjo2:
00217B  3  8D 1B 11     	sta joyval		; remember value.
00217E  3  60           	rts
00217F  3               
00217F  3               
00217F  3               ; AtoMMC joystick controls.
00217F  3               ; _BEEB TODO
00217F  3               ; Set PORTB direction
00217F  3               
00217F  3               joyinit:
00217F  3               .if 0
00217F  3               	lda #$ff   		; Write value to latch, bits 0-7 input
00217F  3               	sta DatReg
00217F  3               	jsr interwritedelay
00217F  3               	lda #$a1   		; Write direction in latch to PORTB
00217F  3               	sta CmdReg
00217F  3               
00217F  3               wait_until_not_busy:
00217F  3               	lda CmdReg
00217F  3               	bmi wait_until_not_busy
00217F  3               .endif
00217F  3  60           	rts
002180  3               
002180  3               ; Get PORTB value
002180  3               
002180  3               joysin:
002180  3               .if 0
002180  3               	lda #$a2   		; Read value PORTB in latch
002180  3               	sta CmdReg
002180  3               	jsr interwritedelay
002180  3               
002180  3               	lda DatReg		; Read joystick status
002180  3               	and #$7f
002180  3               	sta joyval
002180  3               	sta $f0
002180  3               
002180  3               	lda keys+5		; check fire2
002180  3               	jsr ktest
002180  3               	bcs :+
002180  3               	lda joyval
002180  3               	and #$df
002180  3               	sta joyval
002180  3               :
002180  3               	lda keys+6		; check fire3
002180  3               	jsr ktest
002180  3               	bcs :+
002180  3               	lda joyval
002180  3               	and #$bf
002180  3               	sta joyval
002180  3               :
002180  3               	rts
002180  3               
002180  3               ; Short delay
002180  3               ; Enough to intersperse 2 writes to the FATPIC.
002180  3               
002180  3               interwritedelay:
002180  3               	lda  #8
002180  3               	sec
002180  3               loop:
002180  3               	sbc  #1
002180  3               	bne  loop
002180  3               .endif
002180  3  60           	rts
002181  3               
002181  3               ;tmp_byte:   .byte 0
002181  3               
002181  3               ;---------------------------------------------------------------
002181  3               ; Getkey in column,row format
002181  3               ;
002181  3               ; Output:
002181  3               ;  A = high nibble=row and low nibble=column key in matrix
002181  3               ;---------------------------------------------------------------
002181  3               
002181  3               kget:
002181  3  8E E1 1D     	stx xtmp
002184  3               
002184  3               kget1:
002184  3  A9 79        	lda #$79			; _BEEB read keyboard with OSBYTE &79
002186  3  A2 01        	ldx #$01
002188  3  20 F4 FF     	jsr OSBYTE
00218B  3               
00218B  3  E0 FF        	cpx #$ff
00218D  3  F0 F5        	beq kget1
00218F  3               
00218F  3  8A           	txa
002190  3               
002190  3  AE E1 1D     	ldx xtmp
002193  3  60           	rts
002194  3               
002194  3               ;---------------------------------------------------------------
002194  3               ; Display message.
002194  3               ;
002194  3               ; Input:
002194  3               ;  A = message number
002194  3               ;---------------------------------------------------------------
002194  3               
002194  3               dmsg:
002194  3  AA           	tax
002195  3  A9 B7        	lda #<msgdat		; pointer to messages.
002197  3  85 66        	sta z80_l
002199  3  A9 38        	lda #>msgdat
00219B  3  85 67        	sta z80_h
00219D  3  20 CD 22     	jsr getwrd		; get message number.
0021A0  3               dmsg3:
0021A0  3  20 B4 22     	jsr preprt		; pre-printing stuff.
0021A3  3  20 0E 1B     	jsr checkx		; make sure we"re in a printable range.
0021A6  3  AD F6 21     	lda prtmod		; print mode.
0021A9  3  D0 4C        	bne bmsg1		; no, double-height text.
0021AB  3               dmsg0:
0021AB  3  A5 67        	lda z80_h		; store string pointer.
0021AD  3  48           	pha
0021AE  3  A5 66        	lda z80_l
0021B0  3  48           	pha
0021B1  3               
0021B1  3  A0 00        	ldy #0
0021B3  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
0021B5  3  29 7F        	and #127		; remove any end marker.
0021B7  3  C9 0D        	cmp #13
0021B9  3  F0 24        	beq dmsg1
0021BB  3  20 B1 1C     	jsr pchar		; display character.
0021BE  3  20 9A 22     	jsr nexpos 		; display position.
0021C1  3  D0 03        	bne dmsg2		; not on a new line.
0021C3  3  20 A3 22     	jsr nexlin		; next line down.
0021C6  3               dmsg2:
0021C6  3  68           	pla			; retrieve string pointer
0021C7  3  85 66        	sta z80_l
0021C9  3  68           	pla
0021CA  3  85 67        	sta z80_h
0021CC  3               
0021CC  3  A0 00        	ldy #0
0021CE  3  B1 66        	lda (z80_hl),y		; fetch last character.
0021D0  3  0A           	asl a  			; was it the end?
0021D1  3  90 03        	bcc :+
0021D3  3  4C 56 1B     	jmp dscor2		; yes, job done.
0021D6  3               :
0021D6  3  E6 66        	inc z80_l		; next character to display.
0021D8  3  D0 02        	bne :+
0021DA  3  E6 67        	inc z80_h
0021DC  3               :
0021DC  3  4C AB 21     	jmp dmsg0
0021DF  3               dmsg1:
0021DF  3  EE 4C 11     	inc dispy
0021E2  3  AD 4C 11     	lda dispy
0021E5  3  C9 18        	cmp #24
0021E7  3  90 05        	bcc dmsg4
0021E9  3  A9 00        	lda #0
0021EB  3  8D 4C 11     	sta dispy
0021EE  3               dmsg4:
0021EE  3  A9 00        	lda #0
0021F0  3  8D 4B 11     	sta dispx
0021F3  3  4C C6 21     	jmp dmsg2
0021F6  3               
0021F6  3  00           prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
0021F7  3               
0021F7  3               ;----------------------------------------------------------
0021F7  3               ; Display message in big text.
0021F7  3               ;
0021F7  3               ; Input:
0021F7  3               ;  HL = string pointer
0021F7  3               ;----------------------------------------------------------
0021F7  3               
0021F7  3               bmsg1:
0021F7  3  A0 00        	ldy #0
0021F9  3  B1 66        	lda (z80_hl),y 		; get character to display.
0021FB  3  29 7F        	and #127		; only want 7 bits.
0021FD  3  C9 0D        	cmp #13
0021FF  3  F0 13        	beq bmsg2
002201  3  20 2E 22     	jsr bchar 		; display big char.
002204  3               bmsg3:
002204  3  A0 00        	ldy #0
002206  3  B1 66        	lda (z80_hl),y 		; look at last character.
002208  3  48           	pha
002209  3  E6 66        	inc z80_l 		; next character in list.
00220B  3  D0 02        	bne :+
00220D  3  E6 67        	inc z80_h
00220F  3               :
00220F  3  68           	pla
002210  3  0A           	asl a  			; was terminator flag set?
002211  3  90 E4        	bcc bmsg1		; no, keep going.
002213  3               :
002213  3  60           	rts
002214  3               bmsg2:
002214  3  A9 00        	lda #0
002216  3  8D 4B 11     	sta dispx
002219  3  EE 4C 11     	inc dispy
00221C  3  EE 4C 11     	inc dispy
00221F  3  AD 4C 11     	lda dispy
002222  3  C9 17        	cmp #23
002224  3  90 DE        	bcc bmsg3
002226  3  A9 00        	lda #0
002228  3  8D 4C 11     	sta dispy
00222B  3  4C 04 22     	jmp bmsg3
00222E  3               
00222E  3               ;----------------------------------------------------------
00222E  3               ; Big character display.
00222E  3               ;
00222E  3               ; Input:
00222E  3               ;  A = character
00222E  3               ;----------------------------------------------------------
00222E  3               
00222E  3               bchar:
00222E  3  85 64        	sta z80_e		; save char in lb
002230  3  A9 00        	lda #0
002232  3  85 65        	sta z80_d		; reset hb
002234  3               
002234  3  06 64        	asl z80_e 		; multiply char by 8.
002236  3  26 65        	rol z80_d
002238  3  06 64        	asl z80_e
00223A  3  26 65        	rol z80_d
00223C  3  06 64        	asl z80_e
00223E  3  26 65        	rol z80_d		; de = a*8
002240  3               
002240  3  18           	clc			; de = FontPtr + a*8
002241  3  A5 64        	lda z80_e
002243  3  6D 4F 11     	adc FontPtr 		; address of font.
002246  3  85 64        	sta z80_e
002248  3  A5 65        	lda z80_d
00224A  3  6D 50 11     	adc FontPtr+1
00224D  3  85 65        	sta z80_d
00224F  3               
00224F  3  20 53 1C     	jsr gprad 		; get screen address.
002252  3               
002252  3  A2 00        	ldx #0			; height of character in font.
002254  3               bchar0:
002254  3  A0 00        	ldy #0
002256  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
002258  3               
002258  3  49 00        	eor #TxtInvert		; Invert
00225A  3               
00225A  3  91 80        	sta (scraddr),y
00225C  3  48           	pha
00225D  3  20 C5 25     	jsr nline 		; next line down.
002260  3  68           	pla
002261  3  91 80        	sta (scraddr),y
002263  3  20 C5 25     	jsr nline 		; next line down.
002266  3               
002266  3  18           	clc
002267  3  E6 64        	inc z80_e 		; next line of font.
002269  3  D0 02        	bne :+
00226B  3  E6 65        	inc z80_d
00226D  3               :
00226D  3  E8           	inx
00226E  3  E0 08        	cpx #8
002270  3  D0 E2        	bne bchar0
002272  3               	
002272  3  20 9A 22     	jsr nexpos		; display position.
002275  3  D0 06        	bne bchar2 		; not on a new line.
002277  3               bchar3:
002277  3  EE 4C 11     	inc dispy
00227A  3  20 A3 22     	jsr nexlin 		; next line check.
00227D  3               bchar2:
00227D  3  4C 56 1B     	jmp dscor2		; tidy up line and column variables.
002280  3               
002280  3               
002280  3               ;-------------------------------------------------
002280  3               ; Display a character.
002280  3               ;
002280  3               ; Input:
002280  3               ;  A = character
002280  3               ;-------------------------------------------------
002280  3               
002280  3               achar:
002280  3  85 63        	sta z80_b 		; copy to b.
002282  3  20 B4 22     	jsr preprt 		; get ready to print.
002285  3  A5 63        	lda z80_b		; character in accumulator.
002287  3  AE F6 21     	ldx prtmod 		; print mode.
00228A  3  F0 03        	beq :+
00228C  3  4C 2E 22     	jmp bchar 		; no, double-height text.
00228F  3               :
00228F  3  20 B1 1C     	jsr pchar 		; display character.
002292  3  20 9A 22     	jsr nexpos 		; display position.
002295  3  F0 E0        	beq bchar3		; next line down.
002297  3  4C 7D 22     	jmp bchar2 		; tidy up.
00229A  3               
00229A  3               
00229A  3               ;-------------------------------------------------
00229A  3               ; Get next print column position.
00229A  3               ;-------------------------------------------------
00229A  3               
00229A  3               nexpos:
00229A  3  EE 4B 11     	inc dispx		; move along one position.
00229D  3  AD 4B 11     	lda dispx 		; get coordinate.
0022A0  3  29 1F        	and #31
0022A2  3  60           	rts 			; return with status in zero flag.
0022A3  3               
0022A3  3               ;-------------------------------------------------
0022A3  3               ; Get next print line position.
0022A3  3               ;-------------------------------------------------
0022A3  3               
0022A3  3               nexlin:
0022A3  3  EE 4C 11     	inc dispy 		; newline.
0022A6  3  AD 4C 11     	lda dispy		; vertical position.
0022A9  3  C9 18        	cmp #24			; past screen edge?
0022AB  3  B0 01        	bcs :+
0022AD  3  60           	rts			; no, still okay.
0022AE  3               :
0022AE  3  A9 00        	lda #0			; restart at top.
0022B0  3  8D 4C 11     	sta dispy
0022B3  3  60           	rts
0022B4  3               
0022B4  3               ;--------------------------------------------------------
0022B4  3               ; Pre-print preliminaries.
0022B4  3               ;--------------------------------------------------------
0022B4  3               
0022B4  3               preprt:
0022B4  3  AD 4F 11     	lda FontPtr		; font pointer.
0022B7  3  8D 0C 1B     	sta grbase		; set up graphics base.
0022BA  3  AD 50 11     	lda FontPtr+1
0022BD  3  8D 0D 1B     	sta grbase+1
0022C0  3               prescr:
0022C0  3  AD 40 11     	lda charx 		; display coordinates.
0022C3  3  8D 4B 11     	sta dispx		; set up general coordinates.
0022C6  3  AD 41 11     	lda chary
0022C9  3  8D 4C 11     	sta dispy
0022CC  3  60           	rts
0022CD  3               
0022CD  3               ;--------------------------------------------------------------
0022CD  3               ; Get messagenr x in hl
0022CD  3               ;
0022CD  3               ; Input:
0022CD  3               ;  HL = pointer to message list
0022CD  3               ;  X  = message number.
0022CD  3               ;--------------------------------------------------------------
0022CD  3               
0022CD  3               getwrd:
0022CD  3  E0 00        	cpx #0
0022CF  3  D0 01        	bne:+ 			; first word in list?
0022D1  3  60           	rts 			; yep, don't search.
0022D2  3               :
0022D2  3  A0 00        	ldy #0
0022D4  3               getwd0:
0022D4  3  B1 66        	lda (z80_hl),y
0022D6  3  48           	pha
0022D7  3  E6 66        	inc z80_l
0022D9  3  D0 02        	bne :+
0022DB  3  E6 67        	inc z80_h
0022DD  3               :
0022DD  3  68           	pla
0022DE  3  C9 80        	cmp #128		; found end?
0022E0  3  30 F2        	bmi getwd0		; no, carry on.
0022E2  3  CA           	dex			; until we have right number.
0022E3  3  D0 EF        	bne getwd0
0022E5  3  60           	rts
0022E6  3               
0022E6  3               ;-----------------------------------------------------------
0022E6  3               ; Bubble sort.
0022E6  3               ;-----------------------------------------------------------
0022E6  3               
0022E6  3               bsort:
0022E6  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
0022E8  3  8D 1E 23     	sta qscnt
0022EB  3               
0022EB  3  A9 2E        	lda #<sprtab 		; sprite table.
0022ED  3  85 68        	sta z80_x
0022EF  3  A9 2A        	lda #>sprtab
0022F1  3  85 69        	sta z80_i
0022F3  3               bsort0:
0022F3  3  A0 00        	ldy #0
0022F5  3  B1 68        	lda (z80_ix),y 		; first sprite type.
0022F7  3  C9 FF        	cmp #255 		; is it switched off?
0022F9  3  F0 32        	beq swemp		; yes, may need to switch another in here.
0022FB  3               
0022FB  3  A0 11        	ldy #TABSIZ
0022FD  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
0022FF  3  C9 FF        	cmp #255 		; is it enabled?
002301  3  F0 0A        	beq bsort2 		; no, nothing to swap.
002303  3               
002303  3  A0 14        	ldy #TABSIZ+3
002305  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
002307  3  A0 03        	ldy #3
002309  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
00230B  3  90 12        	bcc bsort1		; next sprite is higher - may need to switch.
00230D  3               bsort2:
00230D  3  18           	clc
00230E  3  A5 68        	lda z80_x
002310  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002312  3  85 68        	sta z80_x
002314  3  90 02        	bcc :+
002316  3  E6 69        	inc z80_i
002318  3               :
002318  3  CE 1E 23     	dec qscnt 
00231B  3  D0 D6        	bne bsort0		; repeat for remaining sprites.
00231D  3  60           	rts
00231E  3               
00231E  3  00           qscnt:	.byte 0
00231F  3               
00231F  3               bsort1:
00231F  3  A0 11        	ldy #TABSIZ
002321  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
002323  3  C9 FF        	cmp #255		; is it enabled?
002325  3  F0 E6        	beq bsort2		; no, nothing to swap.
002327  3  20 3B 23     	jsr swspr		; swap positions.
00232A  3  4C 0D 23     	jmp bsort2
00232D  3               swemp:
00232D  3  A0 11        	ldy #TABSIZ
00232F  3  B1 68        	lda (z80_ix),y		; next table entry.
002331  3  C9 FF        	cmp #255		; is that one on?
002333  3  F0 D8        	beq bsort2		; no, nothing to swap.
002335  3  20 3B 23     	jsr swspr		; swap positions.
002338  3  4C 0D 23     	jmp bsort2
00233B  3               
00233B  3               ; Swap sprites.
00233B  3               
00233B  3               swspr:
00233B  3  A5 68        	lda z80_x		; table address 
00233D  3  85 64        	sta z80_e		; copy to de pair.
00233F  3  85 66        	sta z80_l		; copy to hl pair.
002341  3  A5 69        	lda z80_i
002343  3  85 67        	sta z80_h
002345  3  85 65        	sta z80_d
002347  3               
002347  3  18           	clc
002348  3  A5 66        	lda z80_l
00234A  3  69 11        	adc #TABSIZ		; distance to second entry.
00234C  3  85 66        	sta z80_l
00234E  3  90 02        	bcc :+
002350  3  E6 67        	inc z80_h
002352  3               :
002352  3  A9 11        	lda #TABSIZ		; bytes to swap.
002354  3  85 63        	sta z80_b
002356  3  A0 00        	ldy #0
002358  3               swspr0:
002358  3  B1 66        	lda (z80_hl),y		; fetch second byte.
00235A  3  48           	pha
00235B  3  B1 64        	lda (z80_de),y 		; fetch first byte.
00235D  3  91 66        	sta (z80_hl),y 		; copy to second.
00235F  3  68           	pla
002360  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
002362  3               
002362  3  E6 64        	inc z80_e 		; next byte.
002364  3  D0 02        	bne :+	
002366  3  E6 65        	inc z80_d
002368  3               :
002368  3  E6 66        	inc z80_l 		; next byte.
00236A  3  D0 02        	bne :+
00236C  3  E6 67        	inc z80_h
00236E  3               :
00236E  3  C6 63        	dec z80_b
002370  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
002372  3  60           	rts
002373  3               
002373  3               ;----------------------------------------------------
002373  3               ; Process sprites.
002373  3               ;----------------------------------------------------
002373  3               
002373  3               pspr:
002373  3  A9 0C        	lda #NUMSPR		; sprites to process.
002375  3  8D 9C 23     	sta sprptr
002378  3               
002378  3  A9 2E        	lda #<sprtab 		; sprite table.
00237A  3  85 68        	sta z80_x
00237C  3  A9 2A        	lda #>sprtab
00237E  3  85 69        	sta z80_i
002380  3               pspr1:
002380  3  A0 00        	ldy #0
002382  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
002384  3  C9 09        	cmp #9 			; within range of sprite types?
002386  3  B0 03        	bcs :+
002388  3  20 9D 23     	jsr pspr2 		; yes, process this one.
00238B  3               :
00238B  3  18           	clc
00238C  3  A5 68        	lda z80_x
00238E  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
002390  3  85 68        	sta z80_x
002392  3  90 02        	bcc :+
002394  3  E6 69        	inc z80_i		; next sprite.
002396  3               :
002396  3  CE 9C 23     	dec sprptr 		; repeat for remaining sprites.
002399  3  D0 E5        	bne pspr1
00239B  3  60           	rts
00239C  3               
00239C  3  00           sprptr:	.byte 0
00239D  3               
00239D  3               pspr2:
00239D  3  A5 68        	lda z80_x 		; store original sprite pointer.
00239F  3  8D EA 23     	sta ogptr
0023A2  3  A5 69        	lda z80_i
0023A4  3  8D EB 23     	sta ogptr+1
0023A7  3  20 B5 23     	jsr pspr3		; do the routine.
0023AA  3               rtorg:
0023AA  3  AD EA 23     	lda ogptr 		; restore original pointer to sprite.
0023AD  3  85 68        	sta z80_x
0023AF  3  AD EB 23     	lda ogptr+1
0023B2  3  85 69        	sta z80_i
0023B4  3               rtorg0:
0023B4  3  60           	rts
0023B5  3               
0023B5  3               pspr3:
0023B5  3  A9 EC        	lda #<evtyp0		; sprite type events list.
0023B7  3  85 66        	sta z80_l
0023B9  3  A9 23        	lda #>evtyp0
0023BB  3  85 67        	sta z80_h
0023BD  3               pspr4:
0023BD  3  B1 68        	lda (z80_ix),y
0023BF  3  0A           	asl a			; double accumulator.
0023C0  3  18           	clc
0023C1  3  65 66        	adc z80_l
0023C3  3  85 66        	sta z80_l
0023C5  3  90 02        	bcc :+
0023C7  3  E6 67        	inc z80_h
0023C9  3               :
0023C9  3  B1 66        	lda (z80_hl),y
0023CB  3  85 64        	sta z80_e 		; copy to de.
0023CD  3  48           	pha
0023CE  3               
0023CE  3  E6 66        	inc z80_l 		; next byte of address.
0023D0  3  D0 02        	bne :+
0023D2  3  E6 67        	inc z80_h
0023D4  3               :
0023D4  3  B1 66        	lda (z80_hl),y 		; address high.
0023D6  3  85 65        	sta z80_d
0023D8  3               
0023D8  3  48           	pha	 		; swap address into hl.
0023D9  3  A5 67        	lda z80_h
0023DB  3  85 65        	sta z80_d
0023DD  3  68           	pla
0023DE  3  85 67        	sta z80_h
0023E0  3  68           	pla
0023E1  3  85 66        	sta z80_l
0023E3  3  A5 66        	lda z80_l
0023E5  3  85 64        	sta z80_e
0023E7  3               	
0023E7  3  6C 66 00     	jmp (z80_hl) 		; go there.
0023EA  3               
0023EA  3  00 00        ogptr:	.word 0			; original sprite pointer.
0023EC  3               
0023EC  3               ; Address of each sprite type's routine.
0023EC  3               
0023EC  3  17 2B        evtyp0:	.word evnt00
0023EE  3  83 2C        evtyp1:	.word evnt01
0023F0  3  AC 2C        evtyp2:	.word evnt02
0023F2  3  4A 2E        evtyp3:	.word evnt03
0023F4  3  F4 31        evtyp4:	.word evnt04
0023F6  3  69 32        evtyp5:	.word evnt05
0023F8  3  E3 32        evtyp6:	.word evnt06
0023FA  3  E6 33        evtyp7:	.word evnt07
0023FC  3  DB 34        evtyp8:	.word evnt08
0023FE  3               
0023FE  3               ;--------------------------------------------------------------
0023FE  3               ; Display sprites.
0023FE  3               ;
0023FE  3               ; Input:
0023FE  3               ;  IX = sprite table
0023FE  3               ;--------------------------------------------------------------
0023FE  3               
0023FE  3               dspr:
0023FE  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
002400  3  8D B1 24     	sta sprcnt
002403  3               
002403  3               dspr0:
002403  3  A0 00        	ldy #var_Type
002405  3  B1 68        	lda (z80_ix),y 		; get sprite type.
002407  3  C9 FF        	cmp #255 			; is it enabled?
002409  3  D0 46        	bne dspr1 			; yes, it needs deleting.
00240B  3               
00240B  3               dspr5:
00240B  3  A0 05        	ldy #var_newType
00240D  3  B1 68        	lda (z80_ix),y 		; new type.
00240F  3  C9 FF        	cmp #255			; is it enabled?
002411  3  F0 03        	beq dspr2			; no, skip
002413  3  4C A0 24     	jmp dspr3 			; yes, it needs drawing.
002416  3               
002416  3               dspr2:
002416  3  A0 05        	ldy #var_newType
002418  3  B1 68        	lda (z80_ix),y 		; copy new type.
00241A  3  A0 00        	ldy #var_Type
00241C  3  91 68        	sta (z80_ix),y
00241E  3  A0 06        	ldy #var_newImage
002420  3  B1 68        	lda (z80_ix),y 		; copy new image number.
002422  3  A0 01        	ldy #var_Image
002424  3  91 68        	sta (z80_ix),y
002426  3  A0 07        	ldy #var_newFrame
002428  3  B1 68        	lda (z80_ix),y 		; copy new frame.
00242A  3  A0 02        	ldy #var_Frame
00242C  3  91 68        	sta (z80_ix),y
00242E  3  A0 08        	ldy #var_newY
002430  3  B1 68        	lda (z80_ix),y 		; copy new y.
002432  3  A0 03        	ldy #var_Y
002434  3  91 68        	sta (z80_ix),y
002436  3  A0 09        	ldy #var_newX
002438  3  B1 68        	lda (z80_ix),y 		; copy new x.
00243A  3  A0 04        	ldy #var_X
00243C  3  91 68        	sta (z80_ix),y
00243E  3               
00243E  3  18           	clc
00243F  3  A5 68        	lda z80_x
002441  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
002443  3  85 68        	sta z80_x
002445  3  A5 69        	lda z80_i
002447  3  69 00        	adc #0
002449  3  85 69        	sta z80_i 			; next sprite.
00244B  3  CE B1 24     	dec sprcnt
00244E  3  D0 B3        	bne dspr0			; repeat for remaining sprites.
002450  3  60           	rts
002451  3               
002451  3               dspr1:
002451  3               	; _BEEB clipping code copied from CPC Engine
002451  3  A0 03        	ldy #var_Y
002453  3  B1 68        	lda (z80_ix), y		; old x coord
002455  3  C9 B9        	cmp #SpriteMaxY     ; beyond maximum?
002457  3  B0 B2        	bcs dspr5			; yes, don't delete it.
002459  3               
002459  3  A0 05        	ldy #var_newType
00245B  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
00245D  3  C9 FF        	cmp #255			; is this enabled?
00245F  3  D0 06        	bne dspr4 			; yes, display both.
002461  3               
002461  3               dspr6:
002461  3  20 41 25     	jsr sspria 			; show single sprite.
002464  3  4C 16 24     	jmp dspr2
002467  3               
002467  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
002467  3               
002467  3               dspr4:
002467  3               	; _BEEB clipping code copied from CPC Engine
002467  3  A0 08        	ldy #var_newY
002469  3  B1 68        	lda (z80_ix), y		; old x coord
00246B  3  C9 B9        	cmp #SpriteMaxY     ; beyond maximum?
00246D  3  B0 F2        	bcs dspr6			; yes, don't display it.
00246F  3               
00246F  3  A0 04        	ldy #var_X
002471  3  B1 68        	lda (z80_ix),y		; old x.
002473  3  A0 09        	ldy #var_newX
002475  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
002477  3  D0 21        	bne dspr7 			; they differ, need to redraw.
002479  3               
002479  3  A0 03        	ldy #var_Y
00247B  3  B1 68        	lda (z80_ix),y		; old y.
00247D  3  A0 08        	ldy #var_newY
00247F  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002481  3  D0 17        	bne dspr7			; they differ, need to redraw.
002483  3               
002483  3  A0 02        	ldy #var_Frame
002485  3  B1 68        	lda (z80_ix),y 		; old frame.
002487  3  A0 07        	ldy #var_newFrame
002489  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
00248B  3  D0 0D        	bne dspr7 			; they differ, need to redraw.
00248D  3               
00248D  3  A0 01        	ldy #var_Image
00248F  3  B1 68        	lda (z80_ix),y 		; old image.
002491  3  A0 06        	ldy #var_newImage
002493  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
002495  3  D0 03        	bne dspr7 			; they differ, need to redraw.
002497  3  4C 16 24     	jmp dspr2			; everything is the same, don't redraw.
00249A  3               
00249A  3               dspr7:
00249A  3  20 59 25     	jsr sspric 			; delete old sprite, draw new one simultaneously.
00249D  3  4C 16 24     	jmp dspr2
0024A0  3               
0024A0  3               dspr3:
0024A0  3               	; _BEEB clipping code copied from CPC Engine
0024A0  3  A0 08        	ldy #var_newY
0024A2  3  B1 68        	lda (z80_ix), y		; old x coord
0024A4  3  C9 B9        	cmp #SpriteMaxY     ; beyond maximum?
0024A6  3  90 03        	bcc :+				; no, continue
0024A8  3  4C 16 24     	jmp dspr2			; yes, don't display it.
0024AB  3               :
0024AB  3  20 53 25     	jsr ssprib 			; show single sprite.
0024AE  3  4C 16 24     	jmp dspr2
0024B1  3               
0024B1  3  00           sprcnt:	.byte 0
0024B2  3               
0024B2  3               ;-----------------------------------------
0024B2  3               ; Get sprite address calculations.
0024B2  3               ; gspran = new sprite, gsprad = old sprite.
0024B2  3               ;
0024B2  3               ; Input:
0024B2  3               ;  IX = sprite address
0024B2  3               ;-----------------------------------------
0024B2  3               
0024B2  3               gspran:
0024B2  3  A0 08        	ldy #var_newY
0024B4  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
0024B6  3  8D 4C 11     	sta dispy
0024B9  3  A0 09        	ldy #var_newX
0024BB  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
0024BD  3  8D 4B 11     	sta dispx
0024C0  3  A0 06        	ldy #var_newImage
0024C2  3  B1 68        	lda (z80_ix),y 		; new sprite image.
0024C4  3  20 3D 28     	jsr gfrm		; fetch start frame for this sprite.
0024C7  3               
0024C7  3  A0 00        	ldy #0
0024C9  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0024CB  3  A0 07        	ldy #var_newFrame
0024CD  3  18           	clc
0024CE  3  71 68        	adc (z80_ix),y 		; new add frame number.
0024D0  3  4C F1 24     	jmp gspra0
0024D3  3               
0024D3  3               ;-----------------------------------------
0024D3  3               ; Calculate old sprite address
0024D3  3               ;
0024D3  3               ; Input:
0024D3  3               ;  IX = sprite address
0024D3  3               ;
0024D3  3               ; Output:
0024D3  3               ;  B  = right byte mask
0024D3  3               ;  C  = left byte mask
0024D3  3               ;  DE = spriteframe address
0024D3  3               ;  scraddr = screenaddress(dispx,dispy)
0024D3  3               ;-----------------------------------------
0024D3  3               
0024D3  3               gsprad:
0024D3  3  A0 03        	ldy #var_Y
0024D5  3  B1 68        	lda (z80_ix),y		; y coordinate.
0024D7  3  8D 4C 11     	sta dispy
0024DA  3  A0 04        	ldy #var_X
0024DC  3  B1 68        	lda (z80_ix),y		; x coordinate.
0024DE  3  8D 4B 11     	sta dispx
0024E1  3  A0 01        	ldy #var_Image
0024E3  3  B1 68        	lda (z80_ix),y 		; sprite image.
0024E5  3  20 3D 28     	jsr gfrm 		; fetch start frame for this sprite.
0024E8  3               
0024E8  3  A0 00        	ldy #0
0024EA  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0024EC  3  A0 02        	ldy #var_Frame
0024EE  3  18           	clc
0024EF  3  71 68        	adc (z80_ix),y 		; add frame number.
0024F1  3               
0024F1  3               gspra0:
0024F1  3  4A           	lsr a	  		; multiply by 128.
0024F2  3  85 65        	sta z80_d 		; store in d.
0024F4  3  A9 00        	lda #0
0024F6  3  6A           	ror a
0024F7  3  85 64        	sta z80_e 		; got low byte.
0024F9  3               
0024F9  3  18           	clc 			; address of play sprites.
0024FA  3  A5 64        	lda z80_e
0024FC  3  69 E3        	adc #<sprgfx
0024FE  3  85 64        	sta z80_e
002500  3  A5 65        	lda z80_d
002502  3  69 38        	adc #>sprgfx
002504  3  85 65        	sta z80_d
002506  3               
002506  3  AD 4B 11     	lda dispx 		; y coordinate.
002509  3  29 06        	and #6 			; position within byte boundary.
00250B  3  AA           	tax	 		; low byte of table displacement.
00250C  3               
00250C  3  0A           	asl a	  		; multiply by 32.
00250D  3  0A           	asl a  			; already a multiple
00250E  3  0A           	asl a  			; of 2, so just 4
00250F  3  0A           	asl a  			; shifts needed.
002510  3               
002510  3  18           	clc 			; add to sprite address.
002511  3  65 64        	adc z80_e
002513  3  85 64        	sta z80_e
002515  3  90 02        	bcc :+
002517  3  E6 65        	inc z80_d
002519  3               :
002519  3  BD 39 25     	lda spmask,x		 ; pointer to mask table.
00251C  3  85 62        	sta z80_c 		; left mask.
00251E  3  BD 3A 25     	lda spmask+1,x
002521  3  85 63        	sta z80_b 		; right mask.
002523  3               
002523  3               ;------------------------------------------------------------------
002523  3               ; Drop into screen address routine.
002523  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
002523  3               ;------------------------------------------------------------------
002523  3               
002523  3               scadd:
002523  3  AE 4C 11     	ldx dispy
002526  3  AD 4B 11     	lda dispx
002529  3  29 F8        	and #$f8
00252B  3  18           	clc
00252C  3  7D 00 06     	adc SCADTB_lb,x
00252F  3  85 80        	sta scraddr
002531  3  BD 00 07     	lda SCADTB_hb,x
002534  3  69 00        	adc #0
002536  3  85 81        	sta scraddr+1
002538  3  60           	rts
002539  3               
002539  3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
00253D  3  0F F0 03 FC  
002541  3               
002541  3               
002541  3               ;-----------------------------------------------------------------
002541  3               ; These are the sprite routines.
002541  3               ; sspria = single sprite, old (ix).
002541  3               ; ssprib = single sprite, new (ix+5).
002541  3               ; sspric = both sprites, old (ix) and new (ix+5).
002541  3               ;-----------------------------------------------------------------
002541  3               
002541  3               sspria:
002541  3  20 D3 24     	jsr gsprad		; get old sprite address.
002544  3               sspri2:
002544  3  A9 10        	lda #16			; vertical lines.
002546  3  8D 52 25     	sta acnt
002549  3               sspri0:
002549  3  20 7C 25     	jsr dline		; draw a line.
00254C  3  CE 52 25     	dec acnt
00254F  3  D0 F8        	bne sspri0		; repeat 16 times
002551  3  60           	rts
002552  3               
002552  3  00           acnt:	.byte 0
002553  3               
002553  3               ;-----------------------------------------------------------------
002553  3               
002553  3               ssprib:
002553  3  20 B2 24     	jsr gspran 		; get new sprite address.
002556  3  4C 44 25     	jmp sspri2
002559  3               
002559  3               ;-----------------------------------------------------------------
002559  3               
002559  3               ccnt = $7c
002559  3               
002559  3               sspric:
002559  3  20 D3 24     	jsr gsprad 		; get old sprite address.
00255C  3  20 A8 53     	jsr exx  		; store addresses.
00255F  3  20 B2 24     	jsr gspran 		; get new sprite addresses.
002562  3               
002562  3  A9 0F        	lda #15
002564  3  85 7C        	sta ccnt
002566  3               lloop:
002566  3  20 7C 25     	jsr dline 		; draw a line.
002569  3  20 A8 53     	jsr exx  		; restore old addresses.
00256C  3  20 7C 25     	jsr dline 		; delete a line.
00256F  3  20 A8 53     	jsr exx  		; flip to new sprite addresses.
002572  3  C6 7C        	dec ccnt
002574  3  D0 F0        	bne lloop
002576  3               
002576  3  20 7C 25     	jsr dline		; draw a line.
002579  3  20 A8 53     	jsr exx 		; restore old addresses.
00257C  3               
00257C  3               ;-------------------------------------------------------------
00257C  3               ; Drop through.
00257C  3               ; Line drawn, now work out next target address.
00257C  3               ;
00257C  3               ; Input:
00257C  3               ;  B  = right mask
00257C  3               ;  C  = left mask
00257C  3               ;  DE = spriteaddress
00257C  3               ;  scraddr = screen address
00257C  3               ;-------------------------------------------------------------
00257C  3               
00257C  3               dline:
00257C  3  A0 00        	ldy #0
00257E  3  B1 64        	lda (z80_de),y 		; graphic data.
002580  3  25 62        	and z80_c 		; mask away what's not needed.
002582  3  51 80        	eor (scraddr),y 	; XOR with what's there.
002584  3  91 80        	sta (scraddr),y 	; bung it in.
002586  3               
002586  3               ; _BEEB screen arrangement
002586  3  18           	clc
002587  3  A5 80        	lda scraddr
002589  3  69 10        	adc #16
00258B  3  85 80        	sta scraddr
00258D  3  90 02        	bcc :+
00258F  3  E6 81        	inc scraddr+1
002591  3               :
002591  3               
002591  3  B1 64        	lda (z80_de),y 		; fetch data.
002593  3  25 63        	and z80_b 		; mask away unwanted bits.
002595  3  51 80        	eor (scraddr),y 	; XOR with what's there.
002597  3  91 80        	sta (scraddr),y 	; bung it in.
002599  3               
002599  3  E6 64        	inc z80_e 		; next graphic.
00259B  3  D0 02        	bne :+
00259D  3  E6 65        	inc z80_d
00259F  3               :
00259F  3               ; _BEEB screen arrangement
00259F  3  38           	sec
0025A0  3  A5 80        	lda scraddr 		; one character cell to the left.
0025A2  3  E9 08        	sbc #8
0025A4  3  85 80        	sta scraddr
0025A6  3  A5 81        	lda scraddr+1
0025A8  3  E9 00        	sbc #0
0025AA  3  85 81        	sta scraddr+1
0025AC  3               
0025AC  3  B1 64        	lda (z80_de),y 		; second bit of data.
0025AE  3  51 80        	eor (scraddr),y 	; XOR with what's there.
0025B0  3  91 80        	sta (scraddr),y 	; bung it in.
0025B2  3               
0025B2  3  E6 64        	inc z80_e 		; point to next line of data.
0025B4  3  D0 02        	bne :+
0025B6  3  E6 65        	inc z80_d
0025B8  3               :
0025B8  3               ; _BEEB screen arrangement
0025B8  3  38           	sec
0025B9  3  A5 80        	lda scraddr 		; another char left.
0025BB  3  E9 08        	sbc #8
0025BD  3  85 80        	sta scraddr
0025BF  3  A5 81        	lda scraddr+1
0025C1  3  E9 00        	sbc #0
0025C3  3  85 81        	sta scraddr+1
0025C5  3               
0025C5  3               ;----------------------------------------------------------------------
0025C5  3               ; Line drawn, now work out next target address.
0025C5  3               ;----------------------------------------------------------------------
0025C5  3               
0025C5  3               ; _BEEB screen arrangement
0025C5  3               
0025C5  3               nline:
0025C5  3  A5 80        	lda scraddr 		; get low byte of address.
0025C7  3  29 07        	and #7				
0025C9  3  C9 07        	cmp #7				; is this last line of row?
0025CB  3  F0 03        	beq beeb_next_row
0025CD  3               
0025CD  3               	; within same row
0025CD  3  E6 80        	inc scraddr			; new low byte of address.
0025CF  3               ;	bne :+
0025CF  3               ;	inc scraddr+1		; new high byte of address.
0025CF  3               :
0025CF  3  60           	rts
0025D0  3               
0025D0  3               beeb_next_row:
0025D0  3  18           	clc
0025D1  3  A5 80        	lda scraddr
0025D3  3  69 39        	adc #<(ScreenRowBytes-7)
0025D5  3  85 80        	sta scraddr			; new low byte of address.
0025D7  3  A5 81        	lda scraddr+1
0025D9  3  69 01        	adc #>(ScreenRowBytes-7)
0025DB  3  85 81        	sta scraddr+1		; new high byte of address.
0025DD  3  60           	rts
0025DE  3               
0025DE  3               ;-----------------------------------------------------------
0025DE  3               ; Animates a sprite.
0025DE  3               ;
0025DE  3               ; Input:
0025DE  3               ;  IX = sprite address
0025DE  3               ;  HL = last sprite address
0025DE  3               ;-----------------------------------------------------------
0025DE  3               
0025DE  3               animsp:
0025DE  3  A0 06        	ldy #var_newImage
0025E0  3  B1 68        	lda (z80_ix),y		; sprite image
0025E2  3  20 3D 28     	jsr gfrm		; get frame data.
0025E5  3               
0025E5  3  E6 66        	inc z80_l		; point to frames.
0025E7  3  D0 02        	bne :+
0025E9  3  E6 67        	inc z80_h
0025EB  3               :
0025EB  3  A0 07        	ldy #var_newFrame
0025ED  3  B1 68        	lda (z80_ix),y		; sprite frame.
0025EF  3  18           	clc
0025F0  3  69 01        	adc #1			; next one along.
0025F2  3  A0 00        	ldy #0
0025F4  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
0025F6  3  90 02        	bcc anims0		; no, not yet.
0025F8  3  A9 00        	lda #0			; start at first frame.
0025FA  3               anims0:
0025FA  3  A0 07        	ldy #var_newFrame
0025FC  3  91 68        	sta (z80_ix),y		; new frame.
0025FE  3  60           	rts
0025FF  3               
0025FF  3               ;--------------------------------------------------------------
0025FF  3               ; Animate back
0025FF  3               ;
0025FF  3               ; Input:
0025FF  3               ;  IX = sprite address
0025FF  3               ;  HL = last sprite address
0025FF  3               ;--------------------------------------------------------------
0025FF  3               
0025FF  3               animbk:
0025FF  3  A0 06        	ldy #var_newImage
002601  3  B1 68        	lda (z80_ix),y		; sprite image.
002603  3  20 3D 28     	jsr gfrm		; get frame data.
002606  3               
002606  3  E6 66        	inc z80_l 		; point to frames.
002608  3  D0 02        	bne :+
00260A  3  E6 67        	inc z80_h
00260C  3               :
00260C  3  A0 07        	ldy #var_newFrame
00260E  3  B1 68        	lda (z80_ix),y 		; sprite frame.
002610  3  F0 03        	beq :+
002612  3  4C 19 26     	jmp rtanb0 		; yes, start at end.
002615  3               :
002615  3  A0 00        	ldy #0
002617  3  B1 66        	lda (z80_hl),y 		; last sprite.
002619  3               rtanb0:
002619  3  38           	sec
00261A  3  E9 01        	sbc #1			; next one along.
00261C  3  4C FA 25     	jmp anims0		; set new frame.
00261F  3               
00261F  3               ;--------------------------------------------------------------
00261F  3               ; Check for collision with other sprite, strict enforcement.
00261F  3               ;
00261F  3               ; Input:
00261F  3               ;  b		= sprite to test for
00261F  3               ;  ix		= current sprite pointer
00261F  3               ;
00261F  3               ; global:	b
00261F  3               ; local:	x,y,hl,de,skptr
00261F  3               ; calls:	-
00261F  3               ;--------------------------------------------------------------
00261F  3               
00261F  3               sktyp:
00261F  3  A9 2E        	lda #<sprtab				; sprite table.
002621  3  85 66        	sta z80_l
002623  3  A9 2A        	lda #>sprtab
002625  3  85 67        	sta z80_h
002627  3               numsp2:
002627  3  A9 0C        	lda #NUMSPR				; number of sprites.
002629  3  8D 62 26     	sta sktptr
00262C  3               sktyp0:
00262C  3  A5 66        	lda z80_l 				; store pointer to sprite.
00262E  3  8D 60 26     	sta skptr
002631  3  A5 67        	lda z80_h
002633  3  8D 61 26     	sta skptr+1
002636  3               
002636  3  A0 00        	ldy #0
002638  3  B1 66        	lda (z80_hl),y 				; get sprite type.
00263A  3  C5 63        	cmp z80_b				; is it the type we seek?
00263C  3  F0 25        	beq coltyp				; yes, we can use this one.
00263E  3               :
00263E  3               sktyp1:
00263E  3  18           	clc
00263F  3  AD 60 26     	lda skptr				; retrieve sprite pointer.
002642  3  69 11        	adc #TABSIZ				; size of each entry.
002644  3  85 66        	sta z80_l
002646  3  AD 61 26     	lda skptr+1
002649  3  69 00        	adc #0
00264B  3  85 67        	sta z80_h
00264D  3  CE 62 26     	dec sktptr					; one less iteration.
002650  3  D0 DA        	bne sktyp0				; keep going until we find a slot.
002652  3               :
002652  3  A9 00        	lda #0					; default to ROM address - no sprite.
002654  3  85 66        	sta z80_l
002656  3  85 67        	sta z80_h
002658  3  8D 60 26     	sta skptr				; store pointer to sprite.
00265B  3  8D 61 26     	sta skptr+1
00265E  3               
00265E  3  18           	clc					; don't return with zero flag set.
00265F  3  60           	rts 					; didn't find one.
002660  3               
002660  3  00 00        skptr:	.word 0					; search pointer.
002662  3  00           sktptr:	.byte 0
002663  3               
002663  3               coltyp:
002663  3  A0 00        	ldy #0
002665  3  B1 68        	lda (z80_ix),y				; current sprite type.
002667  3  C5 63        	cmp z80_b				; seeking sprite of same type?
002669  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
00266B  3               colty0:
00266B  3  A0 09        	ldy #9					; distance to x position in table.
00266D  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
00266F  3  85 64        	sta z80_e
002671  3  88           	dey
002672  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
002674  3  85 65        	sta z80_d
002676  3               
002676  3               ; Drop into collision detection.
002676  3               
002676  3               colc16:
002676  3  A0 09        	ldy #9
002678  3  B1 68        	lda (z80_ix),y			 	; x coord.
00267A  3  38           	sec					; subtract x.
00267B  3  E5 64        	sbc z80_e
00267D  3  B0 05        	bcs  colc1a 				; result is positive.
00267F  3  49 FF        	eor #$ff				; make negative positive.
002681  3  18           	clc
002682  3  69 01        	adc #1
002684  3               colc1a:
002684  3  C9 10        	cmp #16 				; within x range?
002686  3  B0 B6        	bcs sktyp1				; no - they"ve missed.
002688  3  85 62        	sta z80_c				; store difference.
00268A  3               
00268A  3  A0 08        	ldy #8
00268C  3  B1 68        	lda (z80_ix),y				; y coord.
00268E  3  38           	sec
00268F  3  E5 65        	sbc z80_d				; subtract y.
002691  3  B0 05        	bcs colc1b				; result is positive.
002693  3  49 FF        	eor #$ff				; make negative positive.
002695  3  18           	clc
002696  3  69 01        	adc #1
002698  3               colc1b:
002698  3  C9 10        	cmp #16					; within y range?
00269A  3  B0 A2        	bcs sktyp1 				; no - they've missed.
00269C  3  18           	clc					; add x difference.
00269D  3  65 62        	adc z80_c
00269F  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
0026A1  3  B0 02        	bcs :+
0026A3  3  38           	sec
0026A4  3  60           	rts 					; carry set if there's a collision.
0026A5  3               :
0026A5  3  4C 3E 26     	jmp sktyp1				; try next sprite in table.
0026A8  3               colty1:
0026A8  3  A5 68        	lda z80_x  				; compare the two.
0026AA  3  C5 66        	cmp z80_l
0026AC  3  D0 09        	bne end_col
0026AE  3  A5 69        	lda z80_i
0026B0  3  C5 67        	cmp z80_h
0026B2  3  D0 03        	bne end_col
0026B4  3  4C 3E 26     	jmp sktyp1 				; addresses are identical.
0026B7  3               end_col:
0026B7  3  4C 6B 26     	jmp colty0
0026BA  3               
0026BA  3               ;-----------------------------------------------------------
0026BA  3               ; Display number, left aligned
0026BA  3               ; 
0026BA  3               ; Input:
0026BA  3               ;  a		= number
0026BA  3               ;
0026BA  3               ; global:	-
0026BA  3               ; local:	a,y,bc,hl,displ0
0026BA  3               ; calls:	num2ch,dmsg3
0026BA  3               ;-----------------------------------------------------------
0026BA  3               
0026BA  3               disply:
0026BA  3  85 61        	sta z80_a
0026BC  3  A9 E2        	lda #<displ0				; display workspace.
0026BE  3  85 62        	sta z80_c
0026C0  3  A9 26        	lda #>displ0
0026C2  3  85 63        	sta z80_b
0026C4  3  A5 61        	lda z80_a
0026C6  3  20 7F 18     	jsr num2ch				; convert accumulator to string.
0026C9  3               
0026C9  3  C6 62        	dec z80_c				; back one character.
0026CB  3  D0 02        	bne :+
0026CD  3  C6 63        	dec z80_b
0026CF  3               :
0026CF  3  A0 00        	ldy #0
0026D1  3  B1 62        	lda (z80_bc),y				; fetch digit.
0026D3  3  09 80        	ora #128				; insert end marker.
0026D5  3  91 62        	sta (z80_bc),y				; new value.
0026D7  3               
0026D7  3  A9 E2        	lda #<displ0				; display space.
0026D9  3  85 66        	sta z80_l
0026DB  3  A9 26        	lda #>displ0
0026DD  3  85 67        	sta z80_h
0026DF  3  4C A0 21     	jmp dmsg3				; display the string.
0026E2  3               
0026E2  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
0026E6  3               
0026E6  3               ;----------------------------------------------------------------
0026E6  3               ; Initialise screen.
0026E6  3               ;
0026E6  3               ; global:	roomtb,scno
0026E6  3               ; local:	-
0026E6  3               ; calls:	tstcs
0026E6  3               ;----------------------------------------------------------------
0026E6  3               
0026E6  3               initsc:
0026E6  3  AD 0B 2B     	lda roomtb 			; whereabouts in the map are we?
0026E9  3  20 F4 26     	jsr tstsc 			; find displacement.
0026EC  3  C9 FF        	cmp #255 			; is it valid?
0026EE  3  F0 03        	beq init_end 			; no, it's rubbish.
0026F0  3  8D 26 11     	sta scno			; store new room number.
0026F3  3               init_end:
0026F3  3  60           	rts
0026F4  3               
0026F4  3               ;----------------------------------------------------------------
0026F4  3               ; Test screen.
0026F4  3               ;
0026F4  3               ; global:	-
0026F4  3               ; local:	x
0026F4  3               ; calls:	-
0026F4  3               ;----------------------------------------------------------------
0026F4  3               
0026F4  3               tstsc:
0026F4  3  8D FF 26     	sta tmproom
0026F7  3  18           	clc
0026F8  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
0026FA  3  AA           	tax 				; add displacement to map data.
0026FB  3  BD 0D 2B     	lda mapdat-MAPWID,x 		; find room number there.
0026FE  3  60           	rts
0026FF  3               
0026FF  3  00           tmproom:	.byte 0
002700  3               
002700  3               ;--------------------------
002700  3               ; Screen left.
002700  3               ;--------------------------
002700  3               
002700  3               scrl:
002700  3  AD 0B 2B     	lda roomtb 			; present room table pointer.
002703  3  38           	sec
002704  3  E9 01        	sbc #1				; room left.
002706  3               scrl0:
002706  3  20 F4 26     	jsr tstsc			; test screen.
002709  3  C9 FF        	cmp #255			; is there a screen this way?
00270B  3  D0 01        	bne :+
00270D  3  60           	rts				; no, return to loop.
00270E  3               :
00270E  3  AD FF 26     	lda tmproom			; restore room displacement.
002711  3  8D 0B 2B     	sta roomtb			; new room table position.
002714  3               scrl1:
002714  3  20 E6 26     	jsr initsc 			; set new screen.
002717  3  A9 02        	lda #2
002719  3  8D 48 11     	sta restfl 			; set it.
00271C  3  60           	rts
00271D  3               scrr:
00271D  3  AD 0B 2B     	lda roomtb 			; room table pointer.
002720  3  18           	clc
002721  3  69 01        	adc #1				; room right.
002723  3  4C 06 27     	jmp scrl0
002726  3               scru:
002726  3  AD 0B 2B     	lda roomtb 			; room table pointer.
002729  3  38           	sec
00272A  3  E9 03        	sbc #MAPWID 			; room up.
00272C  3  4C 06 27     	jmp scrl0
00272F  3               scrd:
00272F  3  AD 0B 2B     	lda roomtb 			; room table pointer.
002732  3  18           	clc
002733  3  69 03        	adc #MAPWID 			; room down.
002735  3  4C 06 27     	jmp scrl0
002738  3               
002738  3               ;-----------------------------------------
002738  3               ; Jump to new screen.
002738  3               ;-----------------------------------------
002738  3               
002738  3               nwscr:
002738  3  A2 00        	ldx #0				; start of map data.
00273A  3               nwscr0:
00273A  3  DD 10 2B     	cmp mapdat,x
00273D  3  F0 06        	beq nwscr1			; have we found a match for screen?
00273F  3  E8           	inx 				; next room.
002740  3  E0 50        	cpx #80				; zero room count, 80 to search.
002742  3  D0 F6        	bne nwscr0			; keep looking.
002744  3  60           	rts
002745  3               nwscr1:
002745  3  8E 0B 2B     	stx roomtb			; set the map position.
002748  3  4C 14 27     	jmp scrl1			; draw new room.
00274B  3               
00274B  3               
00274B  3               ;----------------------------------------------------------
00274B  3               ; Gravity processing.
00274B  3               ;----------------------------------------------------------
00274B  3               
00274B  3               grav:
00274B  3  A0 0D        	ldy #13
00274D  3  B1 68        	lda (z80_ix),y			; jump pointer low.
00274F  3  85 66        	sta z80_l
002751  3  A0 0E        	ldy #14
002753  3  B1 68        	lda (z80_ix),y			; jump pointer high.
002755  3  85 67        	sta z80_h
002757  3  05 66        	ora z80_l			; merge in low byte.
002759  3  D0 01        	bne :+
00275B  3  60           	rts				; if neither is set, we're not in the air.
00275C  3               :
00275C  3  A0 00        	ldy #0
00275E  3  B1 66        	lda (z80_hl),y			; pixels to move.
002760  3  85 61        	sta z80_a
002762  3  C9 63        	cmp #99				; reached the end?
002764  3  D0 06        	bne grav0			; no, continue.
002766  3               grav2:
002766  3  C6 66        	dec z80_l			; go back to previous value.
002768  3  B1 66        	lda (z80_hl),y			; fetch that from table.
00276A  3  85 61        	sta z80_a
00276C  3               grav0:
00276C  3  E6 66        	inc z80_l			; point to next table entry.
00276E  3  A5 66        	lda z80_l
002770  3  A0 0D        	ldy #13
002772  3  91 68        	sta (z80_ix),y			; store new pointer low.
002774  3  A5 67        	lda z80_h
002776  3  A0 0E        	ldy #14
002778  3  91 68        	sta (z80_ix),y			; store new pointer high.
00277A  3               grav1:
00277A  3  A5 61        	lda z80_a
00277C  3  D0 01        	bne :+				; any movement required?
00277E  3  60           	rts				; no, not this time.
00277F  3               :
00277F  3  A5 61        	lda z80_a
002781  3  C9 80        	cmp #128			; is it up or down?
002783  3  B0 15        	bcs gravu			; it's up.
002785  3               gravd:
002785  3  85 63        	sta z80_b			; set pixels to move.
002787  3               gravd0:
002787  3  20 0D 1F     	jsr cangd			; can we go down?
00278A  3  D0 28        	bne gravst			; can't move down, so stop.
00278C  3  A0 08        	ldy #8
00278E  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
002790  3  18           	clc
002791  3  69 01        	adc #1
002793  3  91 68        	sta (z80_ix),y
002795  3  C6 63        	dec z80_b
002797  3  D0 EE        	bne gravd0
002799  3  60           	rts
00279A  3               gravu:
00279A  3  49 FF        	eor #$ff			; flip the sign so it's positive.
00279C  3  18           	clc
00279D  3  69 01        	adc #1
00279F  3  85 63        	sta z80_b			; set pixels to move.
0027A1  3               gravu0:
0027A1  3  20 D5 1E     	jsr cangu			; can we go up?
0027A4  3  D0 71        	bne ifalls			; can't move up, go down next.
0027A6  3  A0 08        	ldy #8
0027A8  3  B1 68        	lda (z80_ix),y
0027AA  3  38           	sec
0027AB  3  E9 01        	sbc #1
0027AD  3  91 68        	sta (z80_ix),y			; adjust new x coord.
0027AF  3  C6 63        	dec z80_b
0027B1  3  D0 EE        	bne gravu0
0027B3  3  60           	rts
0027B4  3               gravst:
0027B4  3  A0 0D        	ldy #13
0027B6  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0027B8  3  85 66        	sta z80_l
0027BA  3  A0 0E        	ldy #14
0027BC  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0027BE  3  85 67        	sta z80_h
0027C0  3               
0027C0  3  A9 00        	lda #0				; null value in pointer.
0027C2  3  A0 0D        	ldy #13
0027C4  3  91 68        	sta (z80_ix),y			; store new pointer low.
0027C6  3  C8           	iny
0027C7  3  91 68        	sta (z80_ix),y			; store new pointer high.
0027C9  3               
0027C9  3  A0 00        	ldy #0
0027CB  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
0027CD  3  C9 63        	cmp #99				; is it the end marker?
0027CF  3               evftf:
0027CF  3  F0 01        	beq :+				; yes, fallen too far.
0027D1  3  60           	rts
0027D2  3               :
0027D2  3  4C 8F 38     	jmp evnt15			; EVENT FELLTOOFAR
0027D5  3               
0027D5  3               ;------------------------------------------------
0027D5  3               ; Initiate fall check.
0027D5  3               ;------------------------------------------------
0027D5  3               
0027D5  3               ifall:
0027D5  3  A0 0D        	ldy #13
0027D7  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
0027D9  3  85 66        	sta z80_l
0027DB  3  A0 0E        	ldy #14
0027DD  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
0027DF  3  85 67        	sta z80_h			; high byte in accumulator.
0027E1  3  05 66        	ora z80_l			; merge in low byte.
0027E3  3  F0 01        	beq :+
0027E5  3  60           	rts				; if either is set, we're already in the air.
0027E6  3               :
0027E6  3  A0 09        	ldy #9
0027E8  3  B1 68        	lda (z80_ix),y			; y coordinate.
0027EA  3  8D 4B 11     	sta dispx
0027ED  3               numsp7:
0027ED  3  A0 08        	ldy #8
0027EF  3  B1 68        	lda (z80_ix),y			; look x coordinate.
0027F1  3  18           	clc
0027F2  3  69 10        	adc #16				; add 16 pixels.
0027F4  3  8D 4C 11     	sta dispy			; set up test coordinates.
0027F7  3  20 95 20     	jsr tstbl			; get map address.
0027FA  3  20 A7 1F     	jsr plchk			; block, platform check.
0027FD  3  F0 01        	beq :+
0027FF  3  60           	rts				; it's solid, don't fall.
002800  3               :
002800  3  E6 86        	inc bufaddr			; look right one cell.
002802  3  20 A7 1F     	jsr plchk			; block, platform check.
002805  3  F0 01        	beq :+
002807  3  60           	rts				; it's solid, don't fall.
002808  3               :
002808  3  AD 4B 11     	lda dispx			; y coordinate.
00280B  3  29 07        	and #7				; position straddling block cells.
00280D  3  F0 08        	beq ifalls			; no more checks needed.
00280F  3  E6 86        	inc bufaddr			; look to third cell.
002811  3  20 A7 1F     	jsr plchk			; block, platform check.
002814  3  F0 01        	beq :+
002816  3  60           	rts				; it's solid, don't fall.
002817  3               :
002817  3               ifalls:
002817  3  A9 E5        	lda #<jtab			; jump table start.
002819  3  85 66        	sta z80_l
00281B  3  A9 20        	lda #>jtab
00281D  3  85 67        	sta z80_h
00281F  3               ifal0:
00281F  3  E6 66        	inc z80_l			; point to next value.
002821  3  A0 00        	ldy #0
002823  3  B1 66        	lda (z80_hl),y			; fetch value.
002825  3  F0 F8        	beq ifal0			; no, get next value.
002827  3  C9 63        	cmp #99				; reached end of table?
002829  3  D0 01        	bne :+
00282B  3  60           	rts				; yes, don't fall.
00282C  3               :
00282C  3  C9 80        	cmp #128			; is it going up?
00282E  3  B0 EF        	bcs ifal0			; yes, looking for first movement down.
002830  3               
002830  3  A0 0D        	ldy #13
002832  3  A5 66        	lda z80_l
002834  3  91 68        	sta (z80_ix),y 			; set jump low.
002836  3  A0 0E        	ldy #14
002838  3  A5 67        	lda z80_h
00283A  3  91 68        	sta (z80_ix),y 			; set jump high.
00283C  3  60           	rts
00283D  3               
00283D  3               
00283D  3               ;----------------------------------------------------
00283D  3               ; Get frame data for a particular sprite.
00283D  3               ; Input:
00283D  3               ;  a		= framenumer
00283D  3               ; Output:
00283D  3               ;  hl		= frame address
00283D  3               ;
00283D  3               ; global:	hl,frmptr
00283D  3               ; local:	-
00283D  3               ; calls:	-
00283D  3               ;----------------------------------------------------
00283D  3               
00283D  3               gfrm:
00283D  3  0A           	asl a	 		 	; multiple of 2.
00283E  3  18           	clc
00283F  3  6D 4D 11     	adc frmptr 			; frames used by game.
002842  3  85 66        	sta z80_l
002844  3  AD 4E 11     	lda frmptr+1
002847  3  69 00        	adc #0
002849  3  85 67        	sta z80_h 			; point to frame start.
00284B  3  60           	rts
00284C  3               
00284C  3               ;----------------------------------------------------
00284C  3               ; Find sprite list for current room.
00284C  3               ;
00284C  3               ; global:	hl
00284C  3               ; local:	x,y
00284C  3               ; calls:	-
00284C  3               ;----------------------------------------------------
00284C  3               
00284C  3               sprlst:
00284C  3  A9 6C        	lda #<nmedat 			; list of enemy sprites.
00284E  3  85 66        	sta z80_l
002850  3  A9 50        	lda #>nmedat
002852  3  85 67        	sta z80_h
002854  3  AE 26 11     	ldx scno 			; screen number.
002857  3  D0 01        	bne sprls2 			; is it the first screen?
002859  3  60           	rts 				; yes, don't need to search data.
00285A  3               sprls2:
00285A  3  A0 00        	ldy #0
00285C  3               sprls1:
00285C  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
00285E  3  C9 FF        	cmp #255			; is it an end marker?
002860  3  F0 0E        	beq sprls0 			; yes, end of this room.
002862  3               
002862  3  18           	clc 				; point to next sprite in list.
002863  3  A5 66        	lda z80_l
002865  3  69 04        	adc #NMESIZ
002867  3  85 66        	sta z80_l
002869  3  90 02        	bcc :+
00286B  3  E6 67        	inc z80_h
00286D  3               :
00286D  3  4C 5C 28     	jmp sprls1 			; continue until end of room.
002870  3               sprls0:
002870  3  E6 66        	inc z80_l 			; point to start of next screen.s
002872  3  D0 02        	bne :+
002874  3  E6 67        	inc z80_h
002876  3               :
002876  3  CA           	dex
002877  3  D0 E3        	bne sprls1 			; continue until room found.
002879  3  60           	rts
00287A  3               
00287A  3               
00287A  3               ;----------------------------------------------------
00287A  3               ; Clear all but a single player sprite.
00287A  3               ;
00287A  3               ; global:	-
00287A  3               ; local:	x,y,ix
00287A  3               ; calls:	-
00287A  3               ;----------------------------------------------------
00287A  3               
00287A  3               nspr:
00287A  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00287C  3  8D B1 24     	sta sprcnt
00287F  3  A9 2E        	lda #<sprtab 			; sprite table.
002881  3  85 68        	sta z80_x
002883  3  A9 2A        	lda #>sprtab
002885  3  85 69        	sta z80_i
002887  3               nspr0:
002887  3  A0 00        	ldy #0 				; fetch sprite type.
002889  3  B1 68        	lda (z80_ix),y 			; is it a player?
00288B  3  F0 1B        	beq nspr1 			; yes, keep this one.
00288D  3               
00288D  3  A9 FF        	lda #255
00288F  3  A0 00        	ldy #0 				; fetch sprite type.
002891  3  91 68        	sta (z80_ix),y 			; delete sprite.
002893  3  A0 05        	ldy #5
002895  3  91 68        	sta (z80_ix),y 			; remove next type.
002897  3               
002897  3  18           	clc	 			; next sprite.
002898  3  A5 68        	lda z80_x
00289A  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00289C  3  85 68        	sta z80_x
00289E  3  90 02        	bcc :+
0028A0  3  E6 69        	inc z80_i
0028A2  3               :
0028A2  3  CE B1 24     	dec sprcnt	 			; one less space in the table.
0028A5  3  D0 E0        	bne nspr0
0028A7  3  60           	rts
0028A8  3               nspr1:
0028A8  3  A9 FF        	lda #255
0028AA  3  A0 00        	ldy #0
0028AC  3  91 68        	sta (z80_ix),y 			; delete sprite.
0028AE  3               
0028AE  3  18           	clc	 			; point to next sprite.
0028AF  3  A5 68        	lda z80_x
0028B1  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0028B3  3  85 68        	sta z80_x
0028B5  3  90 02        	bcc :+
0028B7  3  E6 69        	inc z80_i
0028B9  3               :
0028B9  3  CE B1 24     	dec sprcnt	 			; one less to do.
0028BC  3  D0 01        	bne nspr2
0028BE  3  60           	rts
0028BF  3               nspr2:
0028BF  3  A9 FF        	lda #255
0028C1  3  A0 00        	ldy #0
0028C3  3  91 68        	sta (z80_ix),y 			; delete sprite.
0028C5  3  A0 05        	ldy #5
0028C7  3  91 68        	sta (z80_ix),y 			; remove next type.
0028C9  3               
0028C9  3  18           	clc	 			; next sprite.
0028CA  3  A5 68        	lda z80_x
0028CC  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0028CE  3  85 68        	sta z80_x
0028D0  3  90 02        	bcc :+
0028D2  3  E6 69        	inc z80_i
0028D4  3               :
0028D4  3  CE B1 24     	dec sprcnt	 			; one less space in table.
0028D7  3  D0 E6        	bne nspr2
0028D9  3  60           	rts
0028DA  3               
0028DA  3               ;----------------------------------------------------------
0028DA  3               ; Two initialisation routines.
0028DA  3               ; Initialise sprites - copy everything from list to table.
0028DA  3               ;
0028DA  3               ; global:	-
0028DA  3               ; local:	x,y,ix
0028DA  3               ; calls:	cpsp
0028DA  3               ;----------------------------------------------------------
0028DA  3               
0028DA  3               ispr:
0028DA  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0028DC  3  8D B1 24     	sta sprcnt
0028DF  3  A9 2E        	lda #<sprtab			; sprite table.
0028E1  3  85 68        	sta z80_x
0028E3  3  A9 2A        	lda #>sprtab
0028E5  3  85 69        	sta z80_i
0028E7  3               ispr2:
0028E7  3  A0 00        	ldy #0
0028E9  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0028EB  3  C9 FF        	cmp #255 			; is it an end marker?
0028ED  3  D0 01        	bne :+
0028EF  3  60           	rts 				; yes, no more to do.
0028F0  3               :
0028F0  3               ispr1:
0028F0  3  A0 00        	ldy #0
0028F2  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
0028F4  3  C9 FF        	cmp #255 			; is it enabled yet?
0028F6  3  D0 08        	bne ispr4			; yes, try another slot.
0028F8  3               
0028F8  3  A0 05        	ldy #5
0028FA  3  B1 68        	lda (z80_ix),y		 	; next type.
0028FC  3  C9 FF        	cmp #255 			; is it enabled yet?
0028FE  3  F0 11        	beq ispr3 			; no, process this one.
002900  3               ispr4:
002900  3  18           	clc 				; next sprite.
002901  3  A5 68        	lda z80_x
002903  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
002905  3  85 68        	sta z80_x
002907  3  90 02        	bcc :+
002909  3  E6 69        	inc z80_i
00290B  3               :
00290B  3  CE B1 24     	dec sprcnt
00290E  3  D0 E0        	bne ispr1 			; repeat for remaining sprites.
002910  3  60           	rts  				; no more room in table.
002911  3               ispr3:
002911  3  20 65 29     	jsr cpsp			; initialise a sprite.
002914  3  CE B1 24     	dec sprcnt			; one less space in the table.
002917  3  D0 CE        	bne ispr2
002919  3  60           	rts
00291A  3               
00291A  3               
00291A  3               ;-----------------------------------------------------------------------
00291A  3               ; Initialise sprites - but not player, we're keeping the old one.
00291A  3               ;
00291A  3               ; global:	-
00291A  3               ; local:	x,y,ix
00291A  3               ; calls:	cpsp
00291A  3               ;-----------------------------------------------------------------------
00291A  3               
00291A  3               kspr:
00291A  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
00291C  3  A9 2E        	lda #<sprtab 			; sprite table.
00291E  3  85 68        	sta z80_x
002920  3  A9 2A        	lda #>sprtab
002922  3  85 69        	sta z80_i
002924  3               kspr2:
002924  3  A0 00        	ldy #0
002926  3  B1 66        	lda (z80_hl),y 			; fetch byte.
002928  3  C9 FF        	cmp #255 			; is it an end marker?
00292A  3  D0 01        	bne :+
00292C  3  60           	rts 				; yes, no more to do.
00292D  3               :
00292D  3  C9 00        	cmp #0
00292F  3  D0 0E        	bne kspr1 			; no, add to table as normal.
002931  3               
002931  3  18           	clc 				; next sprite.
002932  3  A5 66        	lda z80_l
002934  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
002936  3  85 66        	sta z80_l
002938  3  90 02        	bcc :+
00293A  3  E6 67        	inc z80_h
00293C  3               :
00293C  3  4C 24 29     	jmp kspr2
00293F  3               kspr1:
00293F  3  A0 00        	ldy #0 				; fetch sprite type.
002941  3  B1 68        	lda (z80_ix),y
002943  3  C9 FF        	cmp #255 			; is it enabled yet?
002945  3  D0 08        	bne kspr4 			; yes, try another slot.
002947  3               
002947  3  A0 05        	ldy #5 				; next type.
002949  3  B1 68        	lda (z80_ix),y
00294B  3  C9 FF        	cmp #255 			; is it enabled yet?
00294D  3  F0 0F        	beq kspr3 			; no, process this one.
00294F  3               kspr4:
00294F  3  18           	clc 				; next sprite.
002950  3  A5 68        	lda z80_x
002952  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
002954  3  85 68        	sta z80_x
002956  3  90 02        	bcc :+
002958  3  E6 69        	inc z80_i
00295A  3               :
00295A  3  CA           	dex	 			; repeat for remaining sprites.
00295B  3  D0 E2        	bne kspr1
00295D  3  60           	rts  				; no more room in table.
00295E  3               kspr3:
00295E  3  20 65 29     	jsr cpsp 			; copy sprite to table.
002961  3  CA           	dex	 			; one less space in the table.
002962  3  D0 C0        	bne kspr2
002964  3  60           	rts
002965  3               
002965  3               ;----------------------------------------------
002965  3               ; Copy sprite from list to table.
002965  3               ;
002965  3               ; global:	hl,ix
002965  3               ; local:	y
002965  3               ; calls:	evnt09
002965  3               ;----------------------------------------------
002965  3               
002965  3               cpsp:
002965  3  A0 00        	ldy #0					; fetch byte from table.
002967  3  B1 66        	lda (z80_hl),y
002969  3               	; y=var_Type
002969  3  91 68        	sta (z80_ix),y			; set up type.
00296B  3  A0 05        	ldy #var_newType
00296D  3  91 68        	sta (z80_ix),y 			; set up type.
00296F  3               
00296F  3  E6 66        	inc z80_l 				; move to next byte.
002971  3  D0 02        	bne :+
002973  3  E6 67        	inc z80_h
002975  3               :
002975  3  A0 00        	ldy #0 					; fetch byte from table.
002977  3  B1 66        	lda (z80_hl),y
002979  3  A0 06        	ldy #var_newImage
00297B  3  91 68        	sta (z80_ix),y			; set up image.
00297D  3               
00297D  3  E6 66        	inc z80_l 				; move to next byte.
00297F  3  D0 02        	bne :+
002981  3  E6 67        	inc z80_h
002983  3               :
002983  3  A0 00        	ldy #0
002985  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
002987  3  A0 08        	ldy #var_newY
002989  3  91 68        	sta (z80_ix),y 			; set up coordinate.
00298B  3               
00298B  3  A9 C8        	lda #200 				; set initial coordinate off screen.
00298D  3  A0 03        	ldy #var_Y
00298F  3  91 68        	sta (z80_ix),y
002991  3               
002991  3  E6 66        	inc z80_l 				; move to next byte.
002993  3  D0 02        	bne :+
002995  3  E6 67        	inc z80_h
002997  3               :
002997  3  A0 00        	ldy #0 					; fetch byte from table.
002999  3  B1 66        	lda (z80_hl),y
00299B  3  A0 09        	ldy #var_newX
00299D  3  91 68        	sta (z80_ix),y 			; set up coordinate.
00299F  3               
00299F  3  E6 66        	inc z80_l 				; move to next byte.
0029A1  3  D0 02        	bne :+
0029A3  3  E6 67        	inc z80_h
0029A5  3               :
0029A5  3  A9 00        	lda #0					; zeroes in accumulator.
0029A7  3  A0 07        	ldy #var_newFrame 		; reset frame number.
0029A9  3  91 68        	sta (z80_ix),y
0029AB  3  A0 0A        	ldy #var_Direction 		; reset direction.
0029AD  3  91 68        	sta (z80_ix),y
0029AF  3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
0029B1  3  91 68        	sta (z80_ix),y
0029B3  3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
0029B5  3  91 68        	sta (z80_ix),y
0029B7  3               
0029B7  3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
0029B9  3  A0 10        	ldy #var_dataHi
0029BB  3  91 68        	sta (z80_ix),y
0029BD  3               evis0:
0029BD  3  A5 69        	lda z80_i
0029BF  3  48           	pha
0029C0  3  A5 68        	lda z80_x
0029C2  3  48           	pha
0029C3  3  A5 67        	lda z80_h
0029C5  3  48           	pha
0029C6  3  A5 66        	lda z80_l
0029C8  3  48           	pha
0029C9  3               
0029C9  3  20 D9 35     	jsr evnt09 				; perform event.
0029CC  3               
0029CC  3  68           	pla
0029CD  3  85 66        	sta z80_l
0029CF  3  68           	pla
0029D0  3  85 67        	sta z80_h
0029D2  3  68           	pla
0029D3  3  85 68        	sta z80_x
0029D5  3  68           	pla
0029D6  3  85 69        	sta z80_i
0029D8  3               
0029D8  3  18           	clc
0029D9  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
0029DB  3  69 11        	adc #TABSIZ		 	; next sprite.
0029DD  3  85 68        	sta z80_x
0029DF  3  90 02        	bcc :+
0029E1  3  E6 69        	inc z80_i
0029E3  3               :
0029E3  3  60           	rts
0029E4  3               
0029E4  3               
0029E4  3               ;-------------------------------------
0029E4  3               ; Clear the play area window.
0029E4  3               ;-------------------------------------
0029E4  3               
0029E4  3               clw:
0029E4  3  AD 1D 11     	lda wintop			; get coordinates of window.
0029E7  3  8D 4C 11     	sta dispy			; put into dispx for calculation.
0029EA  3  AD 1E 11     	lda winlft
0029ED  3  8D 4B 11     	sta dispx
0029F0  3               
0029F0  3  AD 1F 11     	lda winhgt			; height of window.
0029F3  3  8D 4D 1E     	sta rrow			; copy to b register.
0029F6  3               clw3:
0029F6  3  AD 20 11     	lda winwid 			; width of window.
0029F9  3  8D 4C 1E     	sta rcol
0029FC  3               clw2:
0029FC  3  20 53 1C     	jsr gprad 			; get print address.
0029FF  3  A9 00        	lda #0				; zero byte to write.
002A01  3  A2 07        	ldx #7				; pixel height of each cell.
002A03  3               clw1:
002A03  3  BC EC 1C     	ldy scrtab,x
002A06  3  91 80        	sta (scraddr),y 			; copy to screen.
002A08  3  CA           	dex				; next screen row down.
002A09  3  10 F8        	bpl clw1
002A0B  3               
002A0B  3  EE 4B 11     	inc dispx			; next column.
002A0E  3  CE 4C 1E     	dec rcol			; one less to do.
002A11  3  D0 E9        	bne clw2			; repeat for remaining columns.
002A13  3               
002A13  3  AD 1E 11     	lda winlft			; get left edge.
002A16  3  8D 4B 11     	sta dispx 			; reset x.
002A19  3  EE 4C 11     	inc dispy 			; next line down.
002A1C  3               
002A1C  3  CE 4D 1E     	dec rrow
002A1F  3  D0 D5        	bne clw3			; repeat down the screen.
002A21  3               
002A21  3  AD 1D 11     	lda wintop			; get coordinates of window.
002A24  3  8D 41 11     	sta chary			; put into display position.
002A27  3  AD 1E 11     	lda winlft
002A2A  3  8D 40 11     	sta charx
002A2D  3  60           	rts
002A2E  3               
002A2E  3               
002A2E  3               ;----------------------------------------------------------
002A2E  3               ; Effects code.
002A2E  3               ; Ticker routine is called 25 times per second.
002A2E  3               ;
002A2E  3               ; HL = txtscr = left text screen address
002A2E  3               ; DE = txtscr+txtwid-1 = right text screen address
002A2E  3               ; BC = txtpos = text scroller position
002A2E  3               ;
002A2E  3               ;----------------------------------------------------------
002A2E  3               
002A2E  3               .if sflag
002A2E  3               scrly:
002A2E  3               	rts
002A2E  3               	.word txtscr         	; get left screen address.
002A2E  3               	sta scr_l
002A2E  3               	lda txtscr+1
002A2E  3               	sta scr_l+1
002A2E  3               	sta scr_r+1
002A2E  3               	
002A2E  3               	stx xtmp
002A2E  3               
002A2E  3               	clc         		; get right screen address.
002A2E  3               	lda scr_l
002A2E  3               	adc txtwid
002A2E  3               	sta scr_r
002A2E  3               	dec scr_r
002A2E  3               scrly1:
002A2E  3               	ldy txtwid		; set txtwide
002A2E  3               	dey
002A2E  3               	clc
002A2E  3               scrly0:
002A2E  3               	lda (scr_l),y		; scroll 1 line
002A2E  3               	rol a
002A2E  3               	sta (scr_l),y
002A2E  3               	dey
002A2E  3               	bpl scrly0
002A2E  3               
002A2E  3               	clc			; point to next line
002A2E  3               	lda scr_l
002A2E  3               	adc #32
002A2E  3               	sta scr_l
002A2E  3               	bcc scrly1		; repeat 8 times
002A2E  3               
002A2E  3               	lda txtpos 		; get text pointer.
002A2E  3               	sta scr_txt
002A2E  3               	lda txtpos+1
002A2E  3               	sta scr_txt+1
002A2E  3               
002A2E  3               	ldy #0
002A2E  3               	lda (scr_txt),y 		; find character we're displaying.
002A2E  3               	and #127 		; remove end marker bit if applicable.
002A2E  3               	cmp #13			; is it newline?
002A2E  3               	bne scrly5 		; no, it's okay.
002A2E  3               	lda #32			; convert to a space instead.
002A2E  3               scrly5:
002A2E  3               	sta fntaddr		; calculate char address
002A2E  3               	lda #0
002A2E  3               	sta fntaddr+1
002A2E  3               	asl fntaddr  		; multiply char by 8.
002A2E  3               	rol fntaddr+1
002A2E  3               	asl fntaddr
002A2E  3               	rol fntaddr+1
002A2E  3               	asl fntaddr
002A2E  3               	rol fntaddr+1
002A2E  3               	lda fntaddr
002A2E  3               	clc
002A2E  3               	adc FontPtr
002A2E  3               	sta scrly3+1		; that's the low byte.
002A2E  3               	lda fntaddr+1
002A2E  3               	adc FontPtr+1
002A2E  3               	sta scrly3+2		; add displacement.
002A2E  3               
002A2E  3               	ldx #0
002A2E  3               scrly3:
002A2E  3               	lda $3333,x		; get image of char line.
002A2E  3               	and txtbit
002A2E  3               	beq scrly2		; don't plot pixel
002A2E  3               	ldy scrline,x
002A2E  3               	lda (scr_r),y
002A2E  3               	clc
002A2E  3               	ora #1
002A2E  3               	sta (scr_r),y		; plot pixel
002A2E  3               scrly2:
002A2E  3               	inx			; next line of char.
002A2E  3               	cpx #8
002A2E  3               	bne scrly3
002A2E  3               
002A2E  3               	lsr txtbit		; bit of text to display.
002A2E  3               	bcs :+
002A2E  3               	rts
002A2E  3               :
002A2E  3               	ldy #0
002A2E  3               	lda (scr_txt),y 	; what was the character?
002A2E  3               	asl a	  		; end of message?
002A2E  3               	bcs scrly4
002A2E  3               	inc txtpos
002A2E  3               	bne :+
002A2E  3               	inc txtpos+1
002A2E  3               :
002A2E  3               	jmp scrly6 		; not yet - continue.
002A2E  3               scrly4:
002A2E  3               	lda txtini 		; start of scrolling message.
002A2E  3               	sta txtpos
002A2E  3               	lda txtini+1
002A2E  3               	sta txtpos+1
002A2E  3               scrly6:
002A2E  3               	lda #128
002A2E  3               	sta txtbit
002A2E  3               	ldx xtmp
002A2E  3               	rts
002A2E  3               
002A2E  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
002A2E  3               
002A2E  3               ;-------------------------------------------------------
002A2E  3               ; Entry TICKER command
002A2E  3               ;
002A2E  3               ; Entry:
002A2E  3               ;  z80_b = message nr
002A2E  3               ;  z80_c = width
002A2E  3               ;-------------------------------------------------------
002A2E  3               
002A2E  3               iscrly:
002A2E  3               	jsr prescr 		; set up display position.
002A2E  3               
002A2E  3               	lda #<msgdat 		; text messages.
002A2E  3               	sta z80_l
002A2E  3               	lda #>msgdat
002A2E  3               	sta z80_h
002A2E  3               
002A2E  3               	lda z80_c 		; width.
002A2E  3               	sec
002A2E  3               	sbc #1			; subtract one.
002A2E  3               	cmp #32 		; is it between 1 and 32?
002A2E  3               	bcc :+
002A2E  3               	lda #$60
002A2E  3               	jmp iscrl0		; no, disable messages.
002A2E  3               :
002A2E  3               	ldx z80_b		; message number.
002A2E  3               	jsr getwrd 		; find message start.
002A2E  3               
002A2E  3               	lda z80_l		; set initial text position.
002A2E  3               	sta txtini
002A2E  3               	lda z80_h
002A2E  3               	sta txtini+1
002A2E  3               
002A2E  3               	lda #$ad		; code for lda adrr
002A2E  3               iscrl0:
002A2E  3               	sta scrly		; enable/disable scrolling routine.
002A2E  3               
002A2E  3               	jsr prescr 		; set up display position.
002A2E  3               	jsr gprad 		; get print address.
002A2E  3               
002A2E  3               	lda scraddr 		; set text screen address.
002A2E  3               	sta txtscr
002A2E  3               	lda scraddr+1
002A2E  3               	sta txtscr+1
002A2E  3               
002A2E  3               	lda z80_c		; width.
002A2E  3               	sta txtwid		; set width in working storage.
002A2E  3               
002A2E  3               	lda #128 		; start with leftmost bit.
002A2E  3               	sta txtbit
002A2E  3               
002A2E  3               	jmp scrly4
002A2E  3               .endif
002A2E  3               
002A2E  3               ;------------------------------------------------------------------
002A2E  3               ; Sprite table 
002A2E  3               ;------------------------------------------------------------------
002A2E  3               
002A2E  3               
002A2E  3               ; ix+0  = type.
002A2E  3               ; ix+1  = sprite image number.
002A2E  3               ; ix+2  = frame.
002A2E  3               ; ix+3  = y coord.
002A2E  3               ; ix+4  = x coord.
002A2E  3               
002A2E  3               ; ix+5  = new type.
002A2E  3               ; ix+6  = new image number.
002A2E  3               ; ix+7  = new frame.
002A2E  3               ; ix+8  = new y coord.
002A2E  3               ; ix+9  = new x coord.
002A2E  3               
002A2E  3               ; ix+10 = direction.
002A2E  3               ; ix+11 = parameter 1.
002A2E  3               ; ix+12 = parameter 2.
002A2E  3               ; ix+13 = jump pointer low.
002A2E  3               ; ix+14 = jump pointer high.
002A2E  3               ; ix+15 = data pointer low.
002A2E  3               ; ix+16 = data pointer high.
002A2E  3               
002A2E  3               ; block NUMSPR * TABSIZ,255
002A2E  3               
002A2E  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
002A32  3  FF FF FF FF  
002A36  3  FF FF FF FF  
002AFA  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
002AFE  3  FF FF FF 00  
002B02  3  C0 78 00 00  
002B0B  3  07           roomtb:	.byte 7                      ; start room map offset.
002B0C  3               
002B0C  3               ; User routine.  Put your own code in here to be called with USER instruction.
002B0C  3               ; if USER has an argument it will be passed in the accumulator.
002B0C  3               
002B0C  3               user:
002B0C  3  60           	rts
002B0D  3               
002B0D  3               ; Everything below here will be generated by the editors.
002B0D  3               
002B0D  3               WINDOWTOP = 0
002B0D  3               WINDOWLFT = 0
002B0D  3               WINDOWHGT = 23
002B0D  3               WINDOWWID = 31 ;a
002B0D  3               MAPWID = 3
002B0D  3  FF FF FF             .byte 255,255,255
002B10  3               mapdat:
002B10  3  FF 00 FF             .byte 255,0,255
002B13  3  FF FF FF             .byte 255,255,255
002B16  3  02           stmap:  .byte 2
002B17  3               
002B17  3               evnt00:
002B17  3  A9 05                lda #5
002B19  3  85 63                sta z80_b
002B1B  3  20 1F 26             jsr sktyp
002B1E  3  B0 03                bcs :+
002B20  3  4C 29 2B             jmp a00037
002B23  3               :
002B23  3  A9 01                lda #1
002B25  3  A0 0B                ldy #11
002B27  3  91 68                sta (z80_ix),y
002B29  3  A9 06        a00037: lda #6
002B2B  3  85 63                sta z80_b
002B2D  3  20 1F 26             jsr sktyp
002B30  3  B0 03                bcs :+
002B32  3  4C 3B 2B             jmp a00072
002B35  3               :
002B35  3  A9 01                lda #1
002B37  3  A0 0B                ldy #11
002B39  3  91 68                sta (z80_ix),y
002B3B  3  A9 07        a00072: lda #7
002B3D  3  85 63                sta z80_b
002B3F  3  20 1F 26             jsr sktyp
002B42  3  B0 03                bcs :+
002B44  3  4C 4D 2B             jmp a00107
002B47  3               :
002B47  3  A9 01                lda #1
002B49  3  A0 0B                ldy #11
002B4B  3  91 68                sta (z80_ix),y
002B4D  3  A9 08        a00107: lda #8
002B4F  3  85 63                sta z80_b
002B51  3  20 1F 26             jsr sktyp
002B54  3  B0 03                bcs :+
002B56  3  4C 5F 2B             jmp a00143
002B59  3               :
002B59  3  A9 01                lda #1
002B5B  3  A0 0B                ldy #11
002B5D  3  91 68                sta (z80_ix),y
002B5F  3  A9 00        a00143: lda #0
002B61  3  A0 0B                ldy #11
002B63  3  D1 68                cmp (z80_ix),y
002B65  3  F0 03                beq *+5
002B67  3  4C 0C 2C             jmp a00479
002B6A  3  A9 00                lda #0
002B6C  3  CD 28 11             cmp vara
002B6F  3  90 03                bcc *+5
002B71  3  4C 77 2B             jmp a00186
002B74  3  20 DE 25             jsr animsp
002B77  3  A9 0C        a00186: lda #12
002B79  3  CD 2A 11             cmp varc
002B7C  3  90 03                bcc *+5
002B7E  3  4C 8A 2B             jmp a00222
002B81  3  A9 0B                lda #11
002B83  3  A0 06                ldy #6
002B85  3  91 68                sta (z80_ix),y
002B87  3  4C 90 2B             jmp a00235
002B8A  3  A9 00        a00222: lda #0
002B8C  3  A0 06                ldy #6
002B8E  3  91 68                sta (z80_ix),y
002B90  3  AD 1B 11     a00235: lda joyval
002B93  3  29 01                and #1
002B95  3  F0 03                beq :+
002B97  3  4C B4 2B             jmp a00310
002B9A  3               :
002B9A  3  A0 09                ldy #9
002B9C  3  B1 68                lda (z80_ix),y
002B9E  3  C9 E6                cmp #230
002BA0  3  90 03                bcc *+5
002BA2  3  4C B4 2B             jmp a00310
002BA5  3  A9 07                lda #7
002BA7  3  85 62                sta z80_c
002BA9  3  A0 09                ldy #9
002BAB  3  B1 68                lda (z80_ix),y
002BAD  3  18                   clc
002BAE  3  65 62                adc z80_c
002BB0  3  A0 09                ldy #9
002BB2  3  91 68                sta (z80_ix),y
002BB4  3  AD 1B 11     a00310: lda joyval
002BB7  3  29 02                and #2
002BB9  3  F0 03                beq :+
002BBB  3  4C D8 2B             jmp a00384
002BBE  3               :
002BBE  3  A9 05                lda #5
002BC0  3  A0 09                ldy #9
002BC2  3  D1 68                cmp (z80_ix),y
002BC4  3  90 03                bcc *+5
002BC6  3  4C D8 2B             jmp a00384
002BC9  3  A9 07                lda #7
002BCB  3  85 62                sta z80_c
002BCD  3  A0 09                ldy #9
002BCF  3  B1 68                lda (z80_ix),y
002BD1  3  38                   sec
002BD2  3  E5 62                sbc z80_c
002BD4  3  A0 09                ldy #9
002BD6  3  91 68                sta (z80_ix),y
002BD8  3  AD 1B 11     a00384: lda joyval
002BDB  3  29 10                and #16
002BDD  3  F0 03                beq :+
002BDF  3  4C 02 2C             jmp a00460
002BE2  3               :
002BE2  3  A9 0C                lda #12
002BE4  3  CD 2A 11             cmp varc
002BE7  3  90 03                bcc *+5
002BE9  3  4C 02 2C             jmp a00460
002BEC  3  A9 01                lda #1
002BEE  3  85 62                sta z80_c
002BF0  3  A9 01                lda #1
002BF2  3  85 63                sta z80_b
002BF4  3  20 4B 1A             jsr spawn
002BF7  3  A9 00                lda #0
002BF9  3  8D 2A 11             sta varc
002BFC  3  A9 64                lda #100
002BFE  3  0A                   asl a
002BFF  3  8D E1 11             sta sndtyp
002C02  3  A0 09        a00460: ldy #9
002C04  3  B1 68                lda (z80_ix),y
002C06  3  8D 34 11             sta varm
002C09  3  4C 82 2C             jmp a00720
002C0C  3  A9 0C        a00479: lda #12
002C0E  3  A0 06                ldy #6
002C10  3  91 68                sta (z80_ix),y
002C12  3  A0 0B                ldy #11
002C14  3  B1 68                lda (z80_ix),y
002C16  3  18                   clc
002C17  3  69 01                adc #1
002C19  3  A0 0B                ldy #11
002C1B  3  91 68                sta (z80_ix),y
002C1D  3  A0 0C                ldy #12
002C1F  3  B1 68                lda (z80_ix),y
002C21  3  18                   clc
002C22  3  69 01                adc #1
002C24  3  A0 0C                ldy #12
002C26  3  91 68                sta (z80_ix),y
002C28  3  A9 03                lda #3
002C2A  3  A0 0C                ldy #12
002C2C  3  D1 68                cmp (z80_ix),y
002C2E  3  F0 03                beq *+5
002C30  3  4C 39 2C             jmp a00580
002C33  3  A9 00                lda #0
002C35  3  A0 0C                ldy #12
002C37  3  91 68                sta (z80_ix),y
002C39  3  A9 00        a00580: lda #0
002C3B  3  A0 0C                ldy #12
002C3D  3  D1 68                cmp (z80_ix),y
002C3F  3  F0 03                beq *+5
002C41  3  4C 44 2C             jmp a00603
002C44  3  A9 01        a00603: lda #1
002C46  3  A0 0C                ldy #12
002C48  3  D1 68                cmp (z80_ix),y
002C4A  3  F0 03                beq *+5
002C4C  3  4C 4F 2C             jmp a00625
002C4F  3  A9 02        a00625: lda #2
002C51  3  A0 0C                ldy #12
002C53  3  D1 68                cmp (z80_ix),y
002C55  3  F0 03                beq *+5
002C57  3  4C 5A 2C             jmp a00647
002C5A  3  20 DE 25     a00647: jsr animsp
002C5D  3  A9 02                lda #2
002C5F  3  CD 28 11             cmp vara
002C62  3  F0 03                beq *+5
002C64  3  4C 72 2C             jmp a00689
002C67  3  A9 32                lda #50
002C69  3  0A                   asl a
002C6A  3  8D E1 11             sta sndtyp
002C6D  3  A9 06                lda #6
002C6F  3  20 21 16             jsr explod
002C72  3  A9 1E        a00689: lda #30
002C74  3  A0 0B                ldy #11
002C76  3  D1 68                cmp (z80_ix),y
002C78  3  F0 03                beq *+5
002C7A  3  4C 82 2C             jmp a00720
002C7D  3  A9 01                lda #1
002C7F  3  8D 4A 11             sta gamwon
002C82  3  60           a00720: rts
002C83  3               evnt01:
002C83  3  A9 00                lda #0
002C85  3  A0 08                ldy #8
002C87  3  D1 68                cmp (z80_ix),y
002C89  3  90 03                bcc *+5
002C8B  3  4C A0 2C             jmp b00063
002C8E  3  A9 0A                lda #10
002C90  3  85 62                sta z80_c
002C92  3  A0 08                ldy #8
002C94  3  B1 68                lda (z80_ix),y
002C96  3  38                   sec
002C97  3  E5 62                sbc z80_c
002C99  3  A0 08                ldy #8
002C9B  3  91 68                sta (z80_ix),y
002C9D  3  4C AB 2C             jmp b00085
002CA0  3  A9 00        b00063: lda #0
002CA2  3  8D 2A 11             sta varc
002CA5  3  A9 FF                lda #255
002CA7  3  A0 05                ldy #5
002CA9  3  91 68                sta (z80_ix),y
002CAB  3  60           b00085: rts
002CAC  3               evnt02:
002CAC  3  A9 0A                lda #10
002CAE  3  8D 2D 11             sta varf
002CB1  3  A9 00                lda #0
002CB3  3  A0 0B                ldy #11
002CB5  3  D1 68                cmp (z80_ix),y
002CB7  3  F0 03                beq *+5
002CB9  3  4C 02 2D             jmp c00169
002CBC  3  A9 02                lda #2
002CBE  3  A0 06                ldy #6
002CC0  3  91 68                sta (z80_ix),y
002CC2  3  A9 01                lda #1
002CC4  3  20 21 16             jsr explod
002CC7  3  A9 00                lda #0
002CC9  3  8D 2A 11             sta varc
002CCC  3  A9 02                lda #2
002CCE  3  CD 28 11             cmp vara
002CD1  3  90 03                bcc *+5
002CD3  3  4C F2 2C             jmp c00140
002CD6  3  A0 07                ldy #7
002CD8  3  B1 68                lda (z80_ix),y
002CDA  3  38                   sec
002CDB  3  E9 01                sbc #1
002CDD  3  A0 07                ldy #7
002CDF  3  91 68                sta (z80_ix),y
002CE1  3  A9 00                lda #0
002CE3  3  A0 07                ldy #7
002CE5  3  D1 68                cmp (z80_ix),y
002CE7  3  F0 03                beq *+5
002CE9  3  4C F2 2C             jmp c00140
002CEC  3  A9 01                lda #1
002CEE  3  A0 0B                ldy #11
002CF0  3  91 68                sta (z80_ix),y
002CF2  3  A9 00        c00140: lda #0
002CF4  3  CD 28 11             cmp vara
002CF7  3  F0 03                beq *+5
002CF9  3  4C 02 2D             jmp c00169
002CFC  3  A9 0A                lda #10
002CFE  3  0A                   asl a
002CFF  3  8D E1 11             sta sndtyp
002D02  3  A9 01        c00169: lda #1
002D04  3  A0 0B                ldy #11
002D06  3  D1 68                cmp (z80_ix),y
002D08  3  F0 03                beq *+5
002D0A  3  4C 59 2D             jmp c00342
002D0D  3  A9 02                lda #2
002D0F  3  A0 06                ldy #6
002D11  3  91 68                sta (z80_ix),y
002D13  3  A9 01                lda #1
002D15  3  20 21 16             jsr explod
002D18  3  A9 00                lda #0
002D1A  3  8D 2A 11             sta varc
002D1D  3  A9 02                lda #2
002D1F  3  CD 28 11             cmp vara
002D22  3  90 03                bcc *+5
002D24  3  4C 49 2D             jmp c00313
002D27  3  A0 07                ldy #7
002D29  3  B1 68                lda (z80_ix),y
002D2B  3  18                   clc
002D2C  3  69 01                adc #1
002D2E  3  A0 07                ldy #7
002D30  3  91 68                sta (z80_ix),y
002D32  3  A9 0B                lda #11
002D34  3  A0 07                ldy #7
002D36  3  D1 68                cmp (z80_ix),y
002D38  3  F0 03                beq *+5
002D3A  3  4C 49 2D             jmp c00313
002D3D  3  A9 02                lda #2
002D3F  3  A0 0B                ldy #11
002D41  3  91 68                sta (z80_ix),y
002D43  3  A9 00                lda #0
002D45  3  A0 0C                ldy #12
002D47  3  91 68                sta (z80_ix),y
002D49  3  A9 00        c00313: lda #0
002D4B  3  CD 28 11             cmp vara
002D4E  3  F0 03                beq *+5
002D50  3  4C 59 2D             jmp c00342
002D53  3  A9 0A                lda #10
002D55  3  0A                   asl a
002D56  3  8D E1 11             sta sndtyp
002D59  3  A9 02        c00342: lda #2
002D5B  3  A0 0B                ldy #11
002D5D  3  D1 68                cmp (z80_ix),y
002D5F  3  F0 03                beq *+5
002D61  3  4C A5 2D             jmp c00502
002D64  3  A9 00                lda #0
002D66  3  8D 2A 11             sta varc
002D69  3  A9 48                lda #72
002D6B  3  A0 0A                ldy #10
002D6D  3  D1 68                cmp (z80_ix),y
002D6F  3  F0 03                beq *+5
002D71  3  4C 7A 2D             jmp c00408
002D74  3  A9 41                lda #65
002D76  3  A0 0A                ldy #10
002D78  3  91 68                sta (z80_ix),y
002D7A  3  A9 03        c00408: lda #3
002D7C  3  A0 06                ldy #6
002D7E  3  91 68                sta (z80_ix),y
002D80  3  20 DE 25             jsr animsp
002D83  3  A0 0C                ldy #12
002D85  3  B1 68                lda (z80_ix),y
002D87  3  18                   clc
002D88  3  69 01                adc #1
002D8A  3  A0 0C                ldy #12
002D8C  3  91 68                sta (z80_ix),y
002D8E  3  A9 05                lda #5
002D90  3  A0 0C                ldy #12
002D92  3  D1 68                cmp (z80_ix),y
002D94  3  F0 03                beq *+5
002D96  3  4C A5 2D             jmp c00502
002D99  3  A9 03                lda #3
002D9B  3  A0 0B                ldy #11
002D9D  3  91 68                sta (z80_ix),y
002D9F  3  A9 00                lda #0
002DA1  3  A0 0C                ldy #12
002DA3  3  91 68                sta (z80_ix),y
002DA5  3  A9 03        c00502: lda #3
002DA7  3  A0 0B                ldy #11
002DA9  3  D1 68                cmp (z80_ix),y
002DAB  3  F0 03                beq *+5
002DAD  3  4C 49 2E             jmp c00826
002DB0  3  A0 0A                ldy #10
002DB2  3  B1 68                lda (z80_ix),y
002DB4  3  18                   clc
002DB5  3  69 01                adc #1
002DB7  3  A0 0A                ldy #10
002DB9  3  91 68                sta (z80_ix),y
002DBB  3  A9 48                lda #72
002DBD  3  A0 0A                ldy #10
002DBF  3  D1 68                cmp (z80_ix),y
002DC1  3  F0 03                beq *+5
002DC3  3  4C CC 2D             jmp c00586
002DC6  3  A9 41                lda #65
002DC8  3  A0 0A                ldy #10
002DCA  3  91 68                sta (z80_ix),y
002DCC  3  A9 04        c00586: lda #4
002DCE  3  A0 06                ldy #6
002DD0  3  91 68                sta (z80_ix),y
002DD2  3  20 DE 25             jsr animsp
002DD5  3  A9 00                lda #0
002DD7  3  CD 28 11             cmp vara
002DDA  3  F0 03                beq *+5
002DDC  3  4C 49 2E             jmp c00826
002DDF  3  A0 0C                ldy #12
002DE1  3  B1 68                lda (z80_ix),y
002DE3  3  C9 07                cmp #7
002DE5  3  90 03                bcc *+5
002DE7  3  4C 39 2E             jmp c00796
002DEA  3  A9 00                lda #0
002DEC  3  8D 2A 11             sta varc
002DEF  3  A9 46                lda #70
002DF1  3  0A                   asl a
002DF2  3  8D E1 11             sta sndtyp
002DF5  3  A9 03                lda #3
002DF7  3  85 62                sta z80_c
002DF9  3  A9 05                lda #5
002DFB  3  85 63                sta z80_b
002DFD  3  20 4B 1A             jsr spawn
002E00  3  AD F7 1A             lda spptr
002E03  3  85 68                sta z80_x
002E05  3  AD F8 1A             lda spptr+1
002E08  3  85 69                sta z80_i
002E0A  3  AD 32 11             lda vark
002E0D  3  A0 0A                ldy #10
002E0F  3  91 68                sta (z80_ix),y
002E11  3  AD 2C 11             lda vare
002E14  3  A0 0C                ldy #12
002E16  3  91 68                sta (z80_ix),y
002E18  3  AD EA 23             lda ogptr
002E1B  3  85 68                sta z80_x
002E1D  3  AD EB 23             lda ogptr+1
002E20  3  85 69                sta z80_i
002E22  3  A0 0C                ldy #12
002E24  3  B1 68                lda (z80_ix),y
002E26  3  18                   clc
002E27  3  69 01                adc #1
002E29  3  A0 0C                ldy #12
002E2B  3  91 68                sta (z80_ix),y
002E2D  3  AD 2C 11             lda vare
002E30  3  18                   clc
002E31  3  69 01                adc #1
002E33  3  8D 2C 11             sta vare
002E36  3  4C 49 2E             jmp c00826
002E39  3  A9 FF        c00796: lda #255
002E3B  3  A0 05                ldy #5
002E3D  3  91 68                sta (z80_ix),y
002E3F  3  A9 08                lda #8
002E41  3  8D 2C 11             sta vare
002E44  3  A9 64                lda #100
002E46  3  8D 2A 11             sta varc
002E49  3  60           c00826: rts
002E4A  3               evnt03:
002E4A  3  A9 08                lda #8
002E4C  3  CD 2C 11             cmp vare
002E4F  3  F0 03                beq *+5
002E51  3  4C 54 2E             jmp d00018
002E54  3  A9 03        d00018: lda #3
002E56  3  CD 31 11             cmp varj
002E59  3  90 03                bcc *+5
002E5B  3  4C 6F 2E             jmp d00067
002E5E  3  A9 C8                lda #200
002E60  3  85 65                sta z80_d
002E62  3  20 FB 20             jsr random
002E65  3  85 67                sta z80_h
002E67  3  20 D2 18             jsr imul
002E6A  3  A5 67                lda z80_h
002E6C  3  8D 43 11             sta varrnd
002E6F  3  A9 01        d00067: lda #1
002E71  3  CD 31 11             cmp varj
002E74  3  F0 03                beq *+5
002E76  3  4C 8A 2E             jmp d00115
002E79  3  A9 1E                lda #30
002E7B  3  85 65                sta z80_d
002E7D  3  20 FB 20             jsr random
002E80  3  85 67                sta z80_h
002E82  3  20 D2 18             jsr imul
002E85  3  A5 67                lda z80_h
002E87  3  8D 43 11             sta varrnd
002E8A  3  A9 03        d00115: lda #3
002E8C  3  CD 31 11             cmp varj
002E8F  3  F0 03                beq *+5
002E91  3  4C A5 2E             jmp d00163
002E94  3  A9 78                lda #120
002E96  3  85 65                sta z80_d
002E98  3  20 FB 20             jsr random
002E9B  3  85 67                sta z80_h
002E9D  3  20 D2 18             jsr imul
002EA0  3  A5 67                lda z80_h
002EA2  3  8D 43 11             sta varrnd
002EA5  3  A9 02        d00163: lda #2
002EA7  3  CD 31 11             cmp varj
002EAA  3  F0 03                beq *+5
002EAC  3  4C C0 2E             jmp d00211
002EAF  3  A9 46                lda #70
002EB1  3  85 65                sta z80_d
002EB3  3  20 FB 20             jsr random
002EB6  3  85 67                sta z80_h
002EB8  3  20 D2 18             jsr imul
002EBB  3  A5 67                lda z80_h
002EBD  3  8D 43 11             sta varrnd
002EC0  3  A9 01        d00211: lda #1
002EC2  3  CD 43 11             cmp varrnd
002EC5  3  F0 03                beq *+5
002EC7  3  4C 90 2F             jmp d00574
002ECA  3  A9 01                lda #1
002ECC  3  CD 30 11             cmp vari
002ECF  3  F0 03                beq *+5
002ED1  3  4C D9 2E             jmp d00253
002ED4  3  A9 00                lda #0
002ED6  3  8D 35 11             sta varn
002ED9  3  A9 02        d00253: lda #2
002EDB  3  CD 30 11             cmp vari
002EDE  3  F0 03                beq *+5
002EE0  3  4C FA 2E             jmp d00310
002EE3  3  A9 02                lda #2
002EE5  3  85 65                sta z80_d
002EE7  3  20 FB 20             jsr random
002EEA  3  85 67                sta z80_h
002EEC  3  20 D2 18             jsr imul
002EEF  3  A5 67                lda z80_h
002EF1  3  8D 43 11             sta varrnd
002EF4  3  AD 43 11             lda varrnd
002EF7  3  8D 35 11             sta varn
002EFA  3  A9 03        d00310: lda #3
002EFC  3  CD 30 11             cmp vari
002EFF  3  F0 03                beq *+5
002F01  3  4C 1B 2F             jmp d00366
002F04  3  A9 03                lda #3
002F06  3  85 65                sta z80_d
002F08  3  20 FB 20             jsr random
002F0B  3  85 67                sta z80_h
002F0D  3  20 D2 18             jsr imul
002F10  3  A5 67                lda z80_h
002F12  3  8D 43 11             sta varrnd
002F15  3  AD 43 11             lda varrnd
002F18  3  8D 35 11             sta varn
002F1B  3  A9 04        d00366: lda #4
002F1D  3  CD 30 11             cmp vari
002F20  3  F0 03                beq *+5
002F22  3  4C 3C 2F             jmp d00423
002F25  3  A9 04                lda #4
002F27  3  85 65                sta z80_d
002F29  3  20 FB 20             jsr random
002F2C  3  85 67                sta z80_h
002F2E  3  20 D2 18             jsr imul
002F31  3  A5 67                lda z80_h
002F33  3  8D 43 11             sta varrnd
002F36  3  AD 43 11             lda varrnd
002F39  3  8D 35 11             sta varn
002F3C  3  A9 00        d00423: lda #0
002F3E  3  CD 35 11             cmp varn
002F41  3  F0 03                beq *+5
002F43  3  4C 51 2F             jmp d00461
002F46  3  A9 05                lda #5
002F48  3  85 62                sta z80_c
002F4A  3  A9 07                lda #7
002F4C  3  85 63                sta z80_b
002F4E  3  20 4B 1A             jsr spawn
002F51  3  A9 01        d00461: lda #1
002F53  3  CD 35 11             cmp varn
002F56  3  F0 03                beq *+5
002F58  3  4C 66 2F             jmp d00499
002F5B  3  A9 06                lda #6
002F5D  3  85 62                sta z80_c
002F5F  3  A9 08                lda #8
002F61  3  85 63                sta z80_b
002F63  3  20 4B 1A             jsr spawn
002F66  3  A9 02        d00499: lda #2
002F68  3  CD 35 11             cmp varn
002F6B  3  F0 03                beq *+5
002F6D  3  4C 7B 2F             jmp d00536
002F70  3  A9 07                lda #7
002F72  3  85 62                sta z80_c
002F74  3  A9 09                lda #9
002F76  3  85 63                sta z80_b
002F78  3  20 4B 1A             jsr spawn
002F7B  3  A9 03        d00536: lda #3
002F7D  3  CD 35 11             cmp varn
002F80  3  F0 03                beq *+5
002F82  3  4C 90 2F             jmp d00574
002F85  3  A9 08                lda #8
002F87  3  85 62                sta z80_c
002F89  3  A9 0A                lda #10
002F8B  3  85 63                sta z80_b
002F8D  3  20 4B 1A             jsr spawn
002F90  3  A9 01        d00574: lda #1
002F92  3  85 63                sta z80_b
002F94  3  20 1F 26             jsr sktyp
002F97  3  B0 03                bcs :+
002F99  3  4C F3 2F             jmp d00758
002F9C  3               :
002F9C  3  AD 29 11             lda varb
002F9F  3  18                   clc
002FA0  3  69 01                adc #1
002FA2  3  8D 29 11             sta varb
002FA5  3  A9 02                lda #2
002FA7  3  CD 29 11             cmp varb
002FAA  3  F0 03                beq *+5
002FAC  3  4C B4 2F             jmp d00636
002FAF  3  A9 00                lda #0
002FB1  3  8D 29 11             sta varb
002FB4  3  A9 05        d00636: lda #<5
002FB6  3  85 66                sta z80_l
002FB8  3  A9 00                lda #>5
002FBA  3  85 67                sta z80_h
002FBC  3  20 7A 1B             jsr addsc
002FBF  3  A9 FF                lda #255
002FC1  3  A0 05                ldy #5
002FC3  3  91 68                sta (z80_ix),y
002FC5  3  A9 04                lda #4
002FC7  3  85 62                sta z80_c
002FC9  3  A9 06                lda #6
002FCB  3  85 63                sta z80_b
002FCD  3  20 4B 1A             jsr spawn
002FD0  3  AD 31 11             lda varj
002FD3  3  38                   sec
002FD4  3  E9 01                sbc #1
002FD6  3  8D 31 11             sta varj
002FD9  3  AD 60 26             lda skptr
002FDC  3  85 68                sta z80_x
002FDE  3  AD 61 26             lda skptr+1
002FE1  3  85 69                sta z80_i
002FE3  3  A9 FF                lda #255
002FE5  3  A0 05                ldy #5
002FE7  3  91 68                sta (z80_ix),y
002FE9  3  AD EA 23             lda ogptr
002FEC  3  85 68                sta z80_x
002FEE  3  AD EB 23             lda ogptr+1
002FF1  3  85 69                sta z80_i
002FF3  3  A9 06        d00758: lda #CUSTOM
002FF5  3  85 63                sta z80_b
002FF7  3  20 D6 1F             jsr tded
002FFA  3  C5 63                cmp z80_b
002FFC  3  F0 03                beq :+
002FFE  3  4C 22 30             jmp d00856
003001  3               :
003001  3  A0 0A                ldy #10
003003  3  B1 68                lda (z80_ix),y
003005  3  18                   clc
003006  3  69 01                adc #1
003008  3  A0 0A                ldy #10
00300A  3  91 68                sta (z80_ix),y
00300C  3  A9 05                lda #5
00300E  3  A0 0A                ldy #10
003010  3  D1 68                cmp (z80_ix),y
003012  3  F0 03                beq *+5
003014  3  4C 1D 30             jmp d00848
003017  3  A9 01                lda #1
003019  3  A0 0A                ldy #10
00301B  3  91 68                sta (z80_ix),y
00301D  3  A9 05        d00848: lda #5
00301F  3  8D 2E 11             sta varg
003022  3  A9 00        d00856: lda #0
003024  3  CD 28 11             cmp vara
003027  3  F0 03                beq *+5
003029  3  4C 85 30             jmp d01046
00302C  3  AD 2C 11             lda vare
00302F  3  A0 0C                ldy #12
003031  3  D1 68                cmp (z80_ix),y
003033  3  F0 03                beq *+5
003035  3  4C 85 30             jmp d01046
003038  3  AD 2C 11             lda vare
00303B  3  18                   clc
00303C  3  69 01                adc #1
00303E  3  8D 2C 11             sta vare
003041  3  A0 0A                ldy #10
003043  3  B1 68                lda (z80_ix),y
003045  3  18                   clc
003046  3  69 01                adc #1
003048  3  A0 0A                ldy #10
00304A  3  91 68                sta (z80_ix),y
00304C  3  A9 05                lda #5
00304E  3  A0 0A                ldy #10
003050  3  D1 68                cmp (z80_ix),y
003052  3  F0 03                beq *+5
003054  3  4C 5D 30             jmp d00972
003057  3  A9 01                lda #1
003059  3  A0 0A                ldy #10
00305B  3  91 68                sta (z80_ix),y
00305D  3  A9 00        d00972: lda #0
00305F  3  CD 29 11             cmp varb
003062  3  F0 03                beq *+5
003064  3  4C 70 30             jmp d01007
003067  3  A9 00                lda #0
003069  3  A0 0B                ldy #11
00306B  3  91 68                sta (z80_ix),y
00306D  3  4C 76 30             jmp d01021
003070  3  A9 01        d01007: lda #1
003072  3  A0 0B                ldy #11
003074  3  91 68                sta (z80_ix),y
003076  3  A9 07        d01021: lda #7
003078  3  CD 2C 11             cmp vare
00307B  3  F0 03                beq *+5
00307D  3  4C 85 30             jmp d01046
003080  3  A9 08                lda #8
003082  3  8D 2C 11             sta vare
003085  3  A9 01        d01046: lda #1
003087  3  A0 0A                ldy #10
003089  3  D1 68                cmp (z80_ix),y
00308B  3  F0 03                beq *+5
00308D  3  4C DE 30             jmp d01236
003090  3  A9 00                lda #0
003092  3  A0 0B                ldy #11
003094  3  D1 68                cmp (z80_ix),y
003096  3  F0 03                beq *+5
003098  3  4C BE 30             jmp d01165
00309B  3  AD 37 11             lda varp
00309E  3  85 62                sta z80_c
0030A0  3  A0 09                ldy #9
0030A2  3  B1 68                lda (z80_ix),y
0030A4  3  18                   clc
0030A5  3  65 62                adc z80_c
0030A7  3  A0 09                ldy #9
0030A9  3  91 68                sta (z80_ix),y
0030AB  3  AD 37 11             lda varp
0030AE  3  85 62                sta z80_c
0030B0  3  A0 08                ldy #8
0030B2  3  B1 68                lda (z80_ix),y
0030B4  3  18                   clc
0030B5  3  65 62                adc z80_c
0030B7  3  A0 08                ldy #8
0030B9  3  91 68                sta (z80_ix),y
0030BB  3  4C DE 30             jmp d01236
0030BE  3  AD 37 11     d01165: lda varp
0030C1  3  85 62                sta z80_c
0030C3  3  A0 09                ldy #9
0030C5  3  B1 68                lda (z80_ix),y
0030C7  3  38                   sec
0030C8  3  E5 62                sbc z80_c
0030CA  3  A0 09                ldy #9
0030CC  3  91 68                sta (z80_ix),y
0030CE  3  AD 37 11             lda varp
0030D1  3  85 62                sta z80_c
0030D3  3  A0 08                ldy #8
0030D5  3  B1 68                lda (z80_ix),y
0030D7  3  38                   sec
0030D8  3  E5 62                sbc z80_c
0030DA  3  A0 08                ldy #8
0030DC  3  91 68                sta (z80_ix),y
0030DE  3  A9 02        d01236: lda #2
0030E0  3  A0 0A                ldy #10
0030E2  3  D1 68                cmp (z80_ix),y
0030E4  3  F0 03                beq *+5
0030E6  3  4C 37 31             jmp d01426
0030E9  3  A9 00                lda #0
0030EB  3  A0 0B                ldy #11
0030ED  3  D1 68                cmp (z80_ix),y
0030EF  3  F0 03                beq *+5
0030F1  3  4C 17 31             jmp d01356
0030F4  3  AD 37 11             lda varp
0030F7  3  85 62                sta z80_c
0030F9  3  A0 09                ldy #9
0030FB  3  B1 68                lda (z80_ix),y
0030FD  3  18                   clc
0030FE  3  65 62                adc z80_c
003100  3  A0 09                ldy #9
003102  3  91 68                sta (z80_ix),y
003104  3  AD 37 11             lda varp
003107  3  85 62                sta z80_c
003109  3  A0 08                ldy #8
00310B  3  B1 68                lda (z80_ix),y
00310D  3  38                   sec
00310E  3  E5 62                sbc z80_c
003110  3  A0 08                ldy #8
003112  3  91 68                sta (z80_ix),y
003114  3  4C 37 31             jmp d01426
003117  3  AD 37 11     d01356: lda varp
00311A  3  85 62                sta z80_c
00311C  3  A0 09                ldy #9
00311E  3  B1 68                lda (z80_ix),y
003120  3  38                   sec
003121  3  E5 62                sbc z80_c
003123  3  A0 09                ldy #9
003125  3  91 68                sta (z80_ix),y
003127  3  AD 37 11             lda varp
00312A  3  85 62                sta z80_c
00312C  3  A0 08                ldy #8
00312E  3  B1 68                lda (z80_ix),y
003130  3  18                   clc
003131  3  65 62                adc z80_c
003133  3  A0 08                ldy #8
003135  3  91 68                sta (z80_ix),y
003137  3  A9 03        d01426: lda #3
003139  3  A0 0A                ldy #10
00313B  3  D1 68                cmp (z80_ix),y
00313D  3  F0 03                beq *+5
00313F  3  4C 90 31             jmp d01616
003142  3  A9 00                lda #0
003144  3  A0 0B                ldy #11
003146  3  D1 68                cmp (z80_ix),y
003148  3  F0 03                beq *+5
00314A  3  4C 70 31             jmp d01546
00314D  3  AD 37 11             lda varp
003150  3  85 62                sta z80_c
003152  3  A0 08                ldy #8
003154  3  B1 68                lda (z80_ix),y
003156  3  38                   sec
003157  3  E5 62                sbc z80_c
003159  3  A0 08                ldy #8
00315B  3  91 68                sta (z80_ix),y
00315D  3  AD 37 11             lda varp
003160  3  85 62                sta z80_c
003162  3  A0 09                ldy #9
003164  3  B1 68                lda (z80_ix),y
003166  3  38                   sec
003167  3  E5 62                sbc z80_c
003169  3  A0 09                ldy #9
00316B  3  91 68                sta (z80_ix),y
00316D  3  4C 90 31             jmp d01616
003170  3  AD 37 11     d01546: lda varp
003173  3  85 62                sta z80_c
003175  3  A0 08                ldy #8
003177  3  B1 68                lda (z80_ix),y
003179  3  18                   clc
00317A  3  65 62                adc z80_c
00317C  3  A0 08                ldy #8
00317E  3  91 68                sta (z80_ix),y
003180  3  AD 37 11             lda varp
003183  3  85 62                sta z80_c
003185  3  A0 09                ldy #9
003187  3  B1 68                lda (z80_ix),y
003189  3  18                   clc
00318A  3  65 62                adc z80_c
00318C  3  A0 09                ldy #9
00318E  3  91 68                sta (z80_ix),y
003190  3  A9 04        d01616: lda #4
003192  3  A0 0A                ldy #10
003194  3  D1 68                cmp (z80_ix),y
003196  3  F0 03                beq *+5
003198  3  4C E9 31             jmp d01807
00319B  3  A9 00                lda #0
00319D  3  A0 0B                ldy #11
00319F  3  D1 68                cmp (z80_ix),y
0031A1  3  F0 03                beq *+5
0031A3  3  4C C9 31             jmp d01736
0031A6  3  AD 37 11             lda varp
0031A9  3  85 62                sta z80_c
0031AB  3  A0 09                ldy #9
0031AD  3  B1 68                lda (z80_ix),y
0031AF  3  38                   sec
0031B0  3  E5 62                sbc z80_c
0031B2  3  A0 09                ldy #9
0031B4  3  91 68                sta (z80_ix),y
0031B6  3  AD 37 11             lda varp
0031B9  3  85 62                sta z80_c
0031BB  3  A0 08                ldy #8
0031BD  3  B1 68                lda (z80_ix),y
0031BF  3  18                   clc
0031C0  3  65 62                adc z80_c
0031C2  3  A0 08                ldy #8
0031C4  3  91 68                sta (z80_ix),y
0031C6  3  4C E9 31             jmp d01807
0031C9  3  AD 37 11     d01736: lda varp
0031CC  3  85 62                sta z80_c
0031CE  3  A0 09                ldy #9
0031D0  3  B1 68                lda (z80_ix),y
0031D2  3  18                   clc
0031D3  3  65 62                adc z80_c
0031D5  3  A0 09                ldy #9
0031D7  3  91 68                sta (z80_ix),y
0031D9  3  AD 37 11             lda varp
0031DC  3  85 62                sta z80_c
0031DE  3  A0 08                ldy #8
0031E0  3  B1 68                lda (z80_ix),y
0031E2  3  38                   sec
0031E3  3  E5 62                sbc z80_c
0031E5  3  A0 08                ldy #8
0031E7  3  91 68                sta (z80_ix),y
0031E9  3  A9 08        d01807: lda #8
0031EB  3  CD 2C 11             cmp vare
0031EE  3  F0 03                beq *+5
0031F0  3  4C F3 31             jmp d01823
0031F3  3  60           d01823: rts
0031F4  3               evnt04:
0031F4  3  A0 0C                ldy #12
0031F6  3  B1 68                lda (z80_ix),y
0031F8  3  38                   sec
0031F9  3  E9 01                sbc #1
0031FB  3  A0 0C                ldy #12
0031FD  3  91 68                sta (z80_ix),y
0031FF  3  A9 00                lda #0
003201  3  A0 0B                ldy #11
003203  3  D1 68                cmp (z80_ix),y
003205  3  F0 03                beq *+5
003207  3  4C 0A 32             jmp e00050
00320A  3  A9 01        e00050: lda #1
00320C  3  A0 0B                ldy #11
00320E  3  D1 68                cmp (z80_ix),y
003210  3  F0 03                beq *+5
003212  3  4C 15 32             jmp e00072
003215  3  A9 02        e00072: lda #2
003217  3  A0 0B                ldy #11
003219  3  D1 68                cmp (z80_ix),y
00321B  3  F0 03                beq *+5
00321D  3  4C 20 32             jmp e00095
003220  3  A0 0B        e00095: ldy #11
003222  3  B1 68                lda (z80_ix),y
003224  3  18                   clc
003225  3  69 01                adc #1
003227  3  A0 0B                ldy #11
003229  3  91 68                sta (z80_ix),y
00322B  3  A9 03                lda #3
00322D  3  A0 0B                ldy #11
00322F  3  D1 68                cmp (z80_ix),y
003231  3  F0 03                beq *+5
003233  3  4C 3C 32             jmp e00157
003236  3  A9 00                lda #0
003238  3  A0 0B                ldy #11
00323A  3  91 68                sta (z80_ix),y
00323C  3  20 DE 25     e00157: jsr animsp
00323F  3  A9 02                lda #2
003241  3  CD 28 11             cmp vara
003244  3  90 03                bcc *+5
003246  3  4C 4F 32             jmp e00190
003249  3  A9 1E                lda #30
00324B  3  0A                   asl a
00324C  3  8D E1 11             sta sndtyp
00324F  3  A9 05        e00190: lda #5
003251  3  A0 0C                ldy #12
003253  3  D1 68                cmp (z80_ix),y
003255  3  90 03                bcc *+5
003257  3  4C 5D 32             jmp e00217
00325A  3  4C 68 32             jmp e00240
00325D  3  A9 0A        e00217: lda #10
00325F  3  20 21 16             jsr explod
003262  3  A9 FF                lda #255
003264  3  A0 05                ldy #5
003266  3  91 68                sta (z80_ix),y
003268  3  60           e00240: rts
003269  3               evnt05:
003269  3  AD 37 11             lda varp
00326C  3  85 62                sta z80_c
00326E  3  A0 08                ldy #8
003270  3  B1 68                lda (z80_ix),y
003272  3  18                   clc
003273  3  65 62                adc z80_c
003275  3  A0 08                ldy #8
003277  3  91 68                sta (z80_ix),y
003279  3  AD 37 11             lda varp
00327C  3  85 62                sta z80_c
00327E  3  A0 08                ldy #8
003280  3  B1 68                lda (z80_ix),y
003282  3  18                   clc
003283  3  65 62                adc z80_c
003285  3  A0 08                ldy #8
003287  3  91 68                sta (z80_ix),y
003289  3  20 DE 25             jsr animsp
00328C  3  A9 05                lda #DEADLY
00328E  3  85 63                sta z80_b
003290  3  20 D6 1F             jsr tded
003293  3  C5 63                cmp z80_b
003295  3  F0 03                beq :+
003297  3  4C A0 32             jmp f00118
00329A  3               :
00329A  3  A9 FF                lda #255
00329C  3  A0 05                ldy #5
00329E  3  91 68                sta (z80_ix),y
0032A0  3  A9 01        f00118: lda #1
0032A2  3  85 63                sta z80_b
0032A4  3  20 1F 26             jsr sktyp
0032A7  3  B0 03                bcs :+
0032A9  3  4C E2 32             jmp f00247
0032AC  3               :
0032AC  3  A9 02                lda #<2
0032AE  3  85 66                sta z80_l
0032B0  3  A9 00                lda #>2
0032B2  3  85 67                sta z80_h
0032B4  3  20 7A 1B             jsr addsc
0032B7  3  A9 04                lda #4
0032B9  3  85 62                sta z80_c
0032BB  3  A9 06                lda #6
0032BD  3  85 63                sta z80_b
0032BF  3  20 4B 1A             jsr spawn
0032C2  3  A9 FF                lda #255
0032C4  3  A0 05                ldy #5
0032C6  3  91 68                sta (z80_ix),y
0032C8  3  AD 60 26             lda skptr
0032CB  3  85 68                sta z80_x
0032CD  3  AD 61 26             lda skptr+1
0032D0  3  85 69                sta z80_i
0032D2  3  A9 FF                lda #255
0032D4  3  A0 05                ldy #5
0032D6  3  91 68                sta (z80_ix),y
0032D8  3  AD EA 23             lda ogptr
0032DB  3  85 68                sta z80_x
0032DD  3  AD EB 23             lda ogptr+1
0032E0  3  85 69                sta z80_i
0032E2  3  60           f00247: rts
0032E3  3               evnt06:
0032E3  3  A9 00                lda #0
0032E5  3  A0 0B                ldy #11
0032E7  3  D1 68                cmp (z80_ix),y
0032E9  3  F0 03                beq *+5
0032EB  3  4C F1 32             jmp g00029
0032EE  3  4C F1 32             jmp g00029
0032F1  3  A0 0B        g00029: ldy #11
0032F3  3  B1 68                lda (z80_ix),y
0032F5  3  18                   clc
0032F6  3  69 01                adc #1
0032F8  3  A0 0B                ldy #11
0032FA  3  91 68                sta (z80_ix),y
0032FC  3  A9 02                lda #2
0032FE  3  A0 0B                ldy #11
003300  3  D1 68                cmp (z80_ix),y
003302  3  F0 03                beq *+5
003304  3  4C 0D 33             jmp g00091
003307  3  A9 00                lda #0
003309  3  A0 0B                ldy #11
00330B  3  91 68                sta (z80_ix),y
00330D  3  AD 37 11     g00091: lda varp
003310  3  85 62                sta z80_c
003312  3  A0 08                ldy #8
003314  3  B1 68                lda (z80_ix),y
003316  3  18                   clc
003317  3  65 62                adc z80_c
003319  3  A0 08                ldy #8
00331B  3  91 68                sta (z80_ix),y
00331D  3  A9 03                lda #3
00331F  3  85 65                sta z80_d
003321  3  20 FB 20             jsr random
003324  3  85 67                sta z80_h
003326  3  20 D2 18             jsr imul
003329  3  A5 67                lda z80_h
00332B  3  8D 43 11             sta varrnd
00332E  3  A9 01                lda #1
003330  3  CD 43 11             cmp varrnd
003333  3  F0 03                beq *+5
003335  3  4C 87 33             jmp g00342
003338  3  A0 09                ldy #9
00333A  3  B1 68                lda (z80_ix),y
00333C  3  CD 34 11             cmp varm
00333F  3  90 03                bcc *+5
003341  3  4C 67 33             jmp g00272
003344  3  AD 37 11             lda varp
003347  3  85 62                sta z80_c
003349  3  A0 09                ldy #9
00334B  3  B1 68                lda (z80_ix),y
00334D  3  18                   clc
00334E  3  65 62                adc z80_c
003350  3  A0 09                ldy #9
003352  3  91 68                sta (z80_ix),y
003354  3  AD 37 11             lda varp
003357  3  85 62                sta z80_c
003359  3  A0 09                ldy #9
00335B  3  B1 68                lda (z80_ix),y
00335D  3  18                   clc
00335E  3  65 62                adc z80_c
003360  3  A0 09                ldy #9
003362  3  91 68                sta (z80_ix),y
003364  3  4C 87 33             jmp g00342
003367  3  AD 37 11     g00272: lda varp
00336A  3  85 62                sta z80_c
00336C  3  A0 09                ldy #9
00336E  3  B1 68                lda (z80_ix),y
003370  3  38                   sec
003371  3  E5 62                sbc z80_c
003373  3  A0 09                ldy #9
003375  3  91 68                sta (z80_ix),y
003377  3  AD 37 11             lda varp
00337A  3  85 62                sta z80_c
00337C  3  A0 09                ldy #9
00337E  3  B1 68                lda (z80_ix),y
003380  3  38                   sec
003381  3  E5 62                sbc z80_c
003383  3  A0 09                ldy #9
003385  3  91 68                sta (z80_ix),y
003387  3  20 DE 25     g00342: jsr animsp
00338A  3  A9 05                lda #DEADLY
00338C  3  85 63                sta z80_b
00338E  3  20 D6 1F             jsr tded
003391  3  C5 63                cmp z80_b
003393  3  F0 03                beq :+
003395  3  4C 9E 33             jmp g00388
003398  3               :
003398  3  A9 FF                lda #255
00339A  3  A0 05                ldy #5
00339C  3  91 68                sta (z80_ix),y
00339E  3  A9 01        g00388: lda #1
0033A0  3  85 63                sta z80_b
0033A2  3  20 1F 26             jsr sktyp
0033A5  3  B0 03                bcs :+
0033A7  3  4C E5 33             jmp g00525
0033AA  3               :
0033AA  3  A9 04                lda #<4
0033AC  3  85 66                sta z80_l
0033AE  3  A9 00                lda #>4
0033B0  3  85 67                sta z80_h
0033B2  3  20 7A 1B             jsr addsc
0033B5  3  A9 00                lda #0
0033B7  3  8D 2D 11             sta varf
0033BA  3  A9 04                lda #4
0033BC  3  85 62                sta z80_c
0033BE  3  A9 06                lda #6
0033C0  3  85 63                sta z80_b
0033C2  3  20 4B 1A             jsr spawn
0033C5  3  A9 FF                lda #255
0033C7  3  A0 05                ldy #5
0033C9  3  91 68                sta (z80_ix),y
0033CB  3  AD 60 26             lda skptr
0033CE  3  85 68                sta z80_x
0033D0  3  AD 61 26             lda skptr+1
0033D3  3  85 69                sta z80_i
0033D5  3  A9 FF                lda #255
0033D7  3  A0 05                ldy #5
0033D9  3  91 68                sta (z80_ix),y
0033DB  3  AD EA 23             lda ogptr
0033DE  3  85 68                sta z80_x
0033E0  3  AD EB 23             lda ogptr+1
0033E3  3  85 69                sta z80_i
0033E5  3  60           g00525: rts
0033E6  3               evnt07:
0033E6  3  A0 0B                ldy #11
0033E8  3  B1 68                lda (z80_ix),y
0033EA  3  18                   clc
0033EB  3  69 01                adc #1
0033ED  3  A0 0B                ldy #11
0033EF  3  91 68                sta (z80_ix),y
0033F1  3  A9 02                lda #2
0033F3  3  A0 0B                ldy #11
0033F5  3  D1 68                cmp (z80_ix),y
0033F7  3  F0 03                beq *+5
0033F9  3  4C 02 34             jmp h00064
0033FC  3  A9 00                lda #0
0033FE  3  A0 0B                ldy #11
003400  3  91 68                sta (z80_ix),y
003402  3  A9 00        h00064: lda #0
003404  3  A0 0B                ldy #11
003406  3  D1 68                cmp (z80_ix),y
003408  3  F0 03                beq *+5
00340A  3  4C 10 34             jmp h00091
00340D  3  4C 10 34             jmp h00091
003410  3  20 DE 25     h00091: jsr animsp
003413  3  A9 9D                lda #157
003415  3  A0 08                ldy #8
003417  3  D1 68                cmp (z80_ix),y
003419  3  90 03                bcc *+5
00341B  3  4C 88 34             jmp h00341
00341E  3  A9 A0                lda #160
003420  3  A0 08                ldy #8
003422  3  91 68                sta (z80_ix),y
003424  3  A0 09                ldy #9
003426  3  B1 68                lda (z80_ix),y
003428  3  CD 34 11             cmp varm
00342B  3  90 03                bcc *+5
00342D  3  4C 4E 34             jmp h00217
003430  3  A0 09                ldy #9
003432  3  B1 68                lda (z80_ix),y
003434  3  C9 EB                cmp #235
003436  3  90 03                bcc *+5
003438  3  4C 4B 34             jmp h00212
00343B  3  AD 37 11             lda varp
00343E  3  85 62                sta z80_c
003440  3  A0 09                ldy #9
003442  3  B1 68                lda (z80_ix),y
003444  3  18                   clc
003445  3  65 62                adc z80_c
003447  3  A0 09                ldy #9
003449  3  91 68                sta (z80_ix),y
00344B  3  4C 69 34     h00212: jmp h00274
00344E  3  A9 03        h00217: lda #3
003450  3  A0 09                ldy #9
003452  3  D1 68                cmp (z80_ix),y
003454  3  90 03                bcc *+5
003456  3  4C 69 34             jmp h00274
003459  3  AD 37 11             lda varp
00345C  3  85 62                sta z80_c
00345E  3  A0 09                ldy #9
003460  3  B1 68                lda (z80_ix),y
003462  3  38                   sec
003463  3  E5 62                sbc z80_c
003465  3  A0 09                ldy #9
003467  3  91 68                sta (z80_ix),y
003469  3  A0 0C        h00274: ldy #12
00346B  3  B1 68                lda (z80_ix),y
00346D  3  18                   clc
00346E  3  69 01                adc #1
003470  3  A0 0C                ldy #12
003472  3  91 68                sta (z80_ix),y
003474  3  A9 1E                lda #30
003476  3  A0 0C                ldy #12
003478  3  D1 68                cmp (z80_ix),y
00347A  3  F0 03                beq *+5
00347C  3  4C 85 34             jmp h00336
00347F  3  A9 FF                lda #255
003481  3  A0 05                ldy #5
003483  3  91 68                sta (z80_ix),y
003485  3  4C 98 34     h00336: jmp h00376
003488  3  AD 37 11     h00341: lda varp
00348B  3  85 62                sta z80_c
00348D  3  A0 08                ldy #8
00348F  3  B1 68                lda (z80_ix),y
003491  3  18                   clc
003492  3  65 62                adc z80_c
003494  3  A0 08                ldy #8
003496  3  91 68                sta (z80_ix),y
003498  3  A9 01        h00376: lda #1
00349A  3  85 63                sta z80_b
00349C  3  20 1F 26             jsr sktyp
00349F  3  B0 03                bcs :+
0034A1  3  4C DA 34             jmp h00505
0034A4  3               :
0034A4  3  A9 08                lda #<8
0034A6  3  85 66                sta z80_l
0034A8  3  A9 00                lda #>8
0034AA  3  85 67                sta z80_h
0034AC  3  20 7A 1B             jsr addsc
0034AF  3  A9 04                lda #4
0034B1  3  85 62                sta z80_c
0034B3  3  A9 06                lda #6
0034B5  3  85 63                sta z80_b
0034B7  3  20 4B 1A             jsr spawn
0034BA  3  A9 FF                lda #255
0034BC  3  A0 05                ldy #5
0034BE  3  91 68                sta (z80_ix),y
0034C0  3  AD 60 26             lda skptr
0034C3  3  85 68                sta z80_x
0034C5  3  AD 61 26             lda skptr+1
0034C8  3  85 69                sta z80_i
0034CA  3  A9 FF                lda #255
0034CC  3  A0 05                ldy #5
0034CE  3  91 68                sta (z80_ix),y
0034D0  3  AD EA 23             lda ogptr
0034D3  3  85 68                sta z80_x
0034D5  3  AD EB 23             lda ogptr+1
0034D8  3  85 69                sta z80_i
0034DA  3  60           h00505: rts
0034DB  3               evnt08:
0034DB  3  A0 0B                ldy #11
0034DD  3  B1 68                lda (z80_ix),y
0034DF  3  18                   clc
0034E0  3  69 01                adc #1
0034E2  3  A0 0B                ldy #11
0034E4  3  91 68                sta (z80_ix),y
0034E6  3  A9 02                lda #2
0034E8  3  A0 0B                ldy #11
0034EA  3  D1 68                cmp (z80_ix),y
0034EC  3  F0 03                beq *+5
0034EE  3  4C F7 34             jmp i00064
0034F1  3  A9 00                lda #0
0034F3  3  A0 0B                ldy #11
0034F5  3  91 68                sta (z80_ix),y
0034F7  3  A9 01        i00064: lda #1
0034F9  3  A0 0B                ldy #11
0034FB  3  D1 68                cmp (z80_ix),y
0034FD  3  F0 03                beq *+5
0034FF  3  4C 05 35             jmp i00091
003502  3  4C 05 35             jmp i00091
003505  3  AD 37 11     i00091: lda varp
003508  3  85 62                sta z80_c
00350A  3  A0 08                ldy #8
00350C  3  B1 68                lda (z80_ix),y
00350E  3  18                   clc
00350F  3  65 62                adc z80_c
003511  3  A0 08                ldy #8
003513  3  91 68                sta (z80_ix),y
003515  3  20 DE 25             jsr animsp
003518  3  A9 02                lda #2
00351A  3  85 65                sta z80_d
00351C  3  20 FB 20             jsr random
00351F  3  85 67                sta z80_h
003521  3  20 D2 18             jsr imul
003524  3  A5 67                lda z80_h
003526  3  8D 43 11             sta varrnd
003529  3  A9 01                lda #1
00352B  3  CD 43 11             cmp varrnd
00352E  3  F0 03                beq *+5
003530  3  4C 82 35             jmp i00347
003533  3  A0 09                ldy #9
003535  3  B1 68                lda (z80_ix),y
003537  3  CD 34 11             cmp varm
00353A  3  90 03                bcc *+5
00353C  3  4C 62 35             jmp i00277
00353F  3  AD 37 11             lda varp
003542  3  85 62                sta z80_c
003544  3  A0 09                ldy #9
003546  3  B1 68                lda (z80_ix),y
003548  3  18                   clc
003549  3  65 62                adc z80_c
00354B  3  A0 09                ldy #9
00354D  3  91 68                sta (z80_ix),y
00354F  3  AD 37 11             lda varp
003552  3  85 62                sta z80_c
003554  3  A0 09                ldy #9
003556  3  B1 68                lda (z80_ix),y
003558  3  18                   clc
003559  3  65 62                adc z80_c
00355B  3  A0 09                ldy #9
00355D  3  91 68                sta (z80_ix),y
00355F  3  4C 82 35             jmp i00347
003562  3  AD 37 11     i00277: lda varp
003565  3  85 62                sta z80_c
003567  3  A0 09                ldy #9
003569  3  B1 68                lda (z80_ix),y
00356B  3  38                   sec
00356C  3  E5 62                sbc z80_c
00356E  3  A0 09                ldy #9
003570  3  91 68                sta (z80_ix),y
003572  3  AD 37 11             lda varp
003575  3  85 62                sta z80_c
003577  3  A0 09                ldy #9
003579  3  B1 68                lda (z80_ix),y
00357B  3  38                   sec
00357C  3  E5 62                sbc z80_c
00357E  3  A0 09                ldy #9
003580  3  91 68                sta (z80_ix),y
003582  3  A9 05        i00347: lda #DEADLY
003584  3  85 63                sta z80_b
003586  3  20 D6 1F             jsr tded
003589  3  C5 63                cmp z80_b
00358B  3  F0 03                beq :+
00358D  3  4C 96 35             jmp i00388
003590  3               :
003590  3  A9 FF                lda #255
003592  3  A0 05                ldy #5
003594  3  91 68                sta (z80_ix),y
003596  3  A9 01        i00388: lda #1
003598  3  85 63                sta z80_b
00359A  3  20 1F 26             jsr sktyp
00359D  3  B0 03                bcs :+
00359F  3  4C D8 35             jmp i00517
0035A2  3               :
0035A2  3  A9 10                lda #<16
0035A4  3  85 66                sta z80_l
0035A6  3  A9 00                lda #>16
0035A8  3  85 67                sta z80_h
0035AA  3  20 7A 1B             jsr addsc
0035AD  3  A9 04                lda #4
0035AF  3  85 62                sta z80_c
0035B1  3  A9 06                lda #6
0035B3  3  85 63                sta z80_b
0035B5  3  20 4B 1A             jsr spawn
0035B8  3  A9 FF                lda #255
0035BA  3  A0 05                ldy #5
0035BC  3  91 68                sta (z80_ix),y
0035BE  3  AD 60 26             lda skptr
0035C1  3  85 68                sta z80_x
0035C3  3  AD 61 26             lda skptr+1
0035C6  3  85 69                sta z80_i
0035C8  3  A9 FF                lda #255
0035CA  3  A0 05                ldy #5
0035CC  3  91 68                sta (z80_ix),y
0035CE  3  AD EA 23             lda ogptr
0035D1  3  85 68                sta z80_x
0035D3  3  AD EB 23             lda ogptr+1
0035D6  3  85 69                sta z80_i
0035D8  3  60           i00517: rts
0035D9  3               evnt09:
0035D9  3  A9 02                lda #2
0035DB  3  A0 05                ldy #5
0035DD  3  D1 68                cmp (z80_ix),y
0035DF  3  F0 03                beq *+5
0035E1  3  4C FC 35             jmp j00078
0035E4  3  A9 02                lda #2
0035E6  3  A0 06                ldy #6
0035E8  3  91 68                sta (z80_ix),y
0035EA  3  A9 0A                lda #10
0035EC  3  A0 07                ldy #7
0035EE  3  91 68                sta (z80_ix),y
0035F0  3  A9 00                lda #0
0035F2  3  A0 0B                ldy #11
0035F4  3  91 68                sta (z80_ix),y
0035F6  3  A9 40                lda #64
0035F8  3  A0 0A                ldy #10
0035FA  3  91 68                sta (z80_ix),y
0035FC  3  A9 04        j00078: lda #4
0035FE  3  A0 05                ldy #5
003600  3  D1 68                cmp (z80_ix),y
003602  3  F0 03                beq *+5
003604  3  4C 19 36             jmp j00140
003607  3  A9 0A                lda #10
003609  3  A0 0C                ldy #12
00360B  3  91 68                sta (z80_ix),y
00360D  3  A9 06                lda #6
00360F  3  A0 06                ldy #6
003611  3  91 68                sta (z80_ix),y
003613  3  A9 00                lda #0
003615  3  A0 07                ldy #7
003617  3  91 68                sta (z80_ix),y
003619  3  A9 05        j00140: lda #5
00361B  3  A0 05                ldy #5
00361D  3  D1 68                cmp (z80_ix),y
00361F  3  F0 03                beq *+5
003621  3  4C 39 36             jmp j00209
003624  3  A9 0A                lda #10
003626  3  85 62                sta z80_c
003628  3  A0 08                ldy #8
00362A  3  B1 68                lda (z80_ix),y
00362C  3  18                   clc
00362D  3  65 62                adc z80_c
00362F  3  A0 08                ldy #8
003631  3  91 68                sta (z80_ix),y
003633  3  A9 0A                lda #10
003635  3  0A                   asl a
003636  3  8D E1 11             sta sndtyp
003639  3  A9 06        j00209: lda #6
00363B  3  A0 05                ldy #5
00363D  3  D1 68                cmp (z80_ix),y
00363F  3  F0 03                beq *+5
003641  3  4C 4A 36             jmp j00243
003644  3  A9 0A                lda #10
003646  3  0A                   asl a
003647  3  8D E1 11             sta sndtyp
00364A  3  A9 07        j00243: lda #7
00364C  3  A0 05                ldy #5
00364E  3  D1 68                cmp (z80_ix),y
003650  3  F0 03                beq *+5
003652  3  4C 5B 36             jmp j00278
003655  3  A9 0A                lda #10
003657  3  0A                   asl a
003658  3  8D E1 11             sta sndtyp
00365B  3  A9 08        j00278: lda #8
00365D  3  A0 05                ldy #5
00365F  3  D1 68                cmp (z80_ix),y
003661  3  F0 03                beq *+5
003663  3  4C 6C 36             jmp j00312
003666  3  A9 0A                lda #10
003668  3  0A                   asl a
003669  3  8D E1 11             sta sndtyp
00366C  3  60           j00312: rts
00366D  3               evnt10:
00366D  3  AD 2D 11             lda varf
003670  3  18                   clc
003671  3  69 01                adc #1
003673  3  8D 2D 11             sta varf
003676  3  A9 28                lda #40
003678  3  CD 2D 11             cmp varf
00367B  3  F0 03                beq *+5
00367D  3  4C 8B 36             jmp k00054
003680  3  A9 00                lda #0
003682  3  8D 2D 11             sta varf
003685  3  A9 28                lda #40
003687  3  0A                   asl a
003688  3  8D E1 11             sta sndtyp
00368B  3  A9 14        k00054: lda #20
00368D  3  CD 2D 11             cmp varf
003690  3  F0 03                beq *+5
003692  3  4C 9B 36             jmp k00083
003695  3  A9 50                lda #80
003697  3  0A                   asl a
003698  3  8D E1 11             sta sndtyp
00369B  3  AD 2A 11     k00083: lda varc
00369E  3  18                   clc
00369F  3  69 01                adc #1
0036A1  3  8D 2A 11             sta varc
0036A4  3  AD 28 11             lda vara
0036A7  3  18                   clc
0036A8  3  69 01                adc #1
0036AA  3  8D 28 11             sta vara
0036AD  3  A9 06                lda #6
0036AF  3  CD 28 11             cmp vara
0036B2  3  F0 03                beq *+5
0036B4  3  4C BC 36             jmp k00139
0036B7  3  A9 00                lda #0
0036B9  3  8D 28 11             sta vara
0036BC  3  A9 00        k00139: lda #0
0036BE  3  CD 2E 11             cmp varg
0036C1  3  90 03                bcc *+5
0036C3  3  4C CF 36             jmp k00171
0036C6  3  AD 2E 11             lda varg
0036C9  3  38                   sec
0036CA  3  E9 01                sbc #1
0036CC  3  8D 2E 11             sta varg
0036CF  3  A9 00        k00171: lda #0
0036D1  3  CD 2E 11             cmp varg
0036D4  3  F0 03                beq *+5
0036D6  3  4C 11 37             jmp k00284
0036D9  3  A9 08                lda #8
0036DB  3  CD 2C 11             cmp vare
0036DE  3  F0 03                beq *+5
0036E0  3  4C 11 37             jmp k00284
0036E3  3  A9 0A                lda #10
0036E5  3  85 65                sta z80_d
0036E7  3  20 FB 20             jsr random
0036EA  3  85 67                sta z80_h
0036EC  3  20 D2 18             jsr imul
0036EF  3  A5 67                lda z80_h
0036F1  3  8D 43 11             sta varrnd
0036F4  3  A9 01                lda #1
0036F6  3  CD 43 11             cmp varrnd
0036F9  3  F0 03                beq *+5
0036FB  3  4C 11 37             jmp k00284
0036FE  3  AD 29 11             lda varb
003701  3  18                   clc
003702  3  69 01                adc #1
003704  3  8D 29 11             sta varb
003707  3  A9 00                lda #0
003709  3  8D 2C 11             sta vare
00370C  3  A9 05                lda #5
00370E  3  8D 2E 11             sta varg
003711  3  A9 02        k00284: lda #2
003713  3  CD 29 11             cmp varb
003716  3  F0 03                beq *+5
003718  3  4C 20 37             jmp k00309
00371B  3  A9 00                lda #0
00371D  3  8D 29 11             sta varb
003720  3  AD 31 11     k00309: lda varj
003723  3  C9 01                cmp #1
003725  3  90 03                bcc *+5
003727  3  4C 2F 37             jmp k00334
00372A  3  A9 01                lda #1
00372C  3  8D 48 11             sta restfl
00372F  3  60           k00334: rts
003730  3               evnt11:
003730  3  A9 17                lda #23
003732  3  8D 41 11             sta chary
003735  3  A9 19                lda #25
003737  3  8D 40 11             sta charx
00373A  3  20 28 1B             jsr dscor
00373D  3  60                   rts
00373E  3               evnt12:
00373E  3  A9 00                lda #0
003740  3  8D 2D 11             sta varf
003743  3  60                   rts
003744  3               evnt13:
003744  3  A9 00                lda #0
003746  3  8D 27 11             sta numlif
003749  3  20 23 12             jsr cls
00374C  3  A9 17                lda #23
00374E  3  8D 41 11             sta chary
003751  3  A9 00                lda #0
003753  3  8D 40 11             sta charx
003756  3  A9 00                lda #0
003758  3  20 94 21             jsr dmsg
00375B  3  A9 17                lda #23
00375D  3  8D 41 11             sta chary
003760  3  A9 01                lda #1
003762  3  8D 40 11             sta charx
003765  3  A9 01                lda #1
003767  3  20 94 21             jsr dmsg
00376A  3  A9 17                lda #23
00376C  3  8D 41 11             sta chary
00376F  3  A9 02                lda #2
003771  3  8D 40 11             sta charx
003774  3  A9 02                lda #2
003776  3  20 94 21             jsr dmsg
003779  3  A9 17                lda #23
00377B  3  8D 41 11             sta chary
00377E  3  A9 03                lda #3
003780  3  8D 40 11             sta charx
003783  3  A9 02                lda #2
003785  3  20 94 21             jsr dmsg
003788  3  A9 17                lda #23
00378A  3  8D 41 11             sta chary
00378D  3  A9 04                lda #4
00378F  3  8D 40 11             sta charx
003792  3  A9 03                lda #3
003794  3  20 94 21             jsr dmsg
003797  3  A9 17                lda #23
003799  3  8D 41 11             sta chary
00379C  3  A9 05                lda #5
00379E  3  8D 40 11             sta charx
0037A1  3  A9 04                lda #4
0037A3  3  20 94 21             jsr dmsg
0037A6  3  A9 17                lda #23
0037A8  3  8D 41 11             sta chary
0037AB  3  A9 06                lda #6
0037AD  3  8D 40 11             sta charx
0037B0  3  A9 03                lda #3
0037B2  3  20 94 21             jsr dmsg
0037B5  3  A9 17                lda #23
0037B7  3  8D 41 11             sta chary
0037BA  3  A9 07                lda #7
0037BC  3  8D 40 11             sta charx
0037BF  3  A9 05                lda #5
0037C1  3  20 94 21             jsr dmsg
0037C4  3  A9 17                lda #23
0037C6  3  8D 41 11             sta chary
0037C9  3  A9 08                lda #8
0037CB  3  8D 40 11             sta charx
0037CE  3  A9 06                lda #6
0037D0  3  20 94 21             jsr dmsg
0037D3  3  A9 17                lda #23
0037D5  3  8D 41 11             sta chary
0037D8  3  A9 09                lda #9
0037DA  3  8D 40 11             sta charx
0037DD  3  A9 07                lda #7
0037DF  3  20 94 21             jsr dmsg
0037E2  3  60                   rts
0037E3  3               evnt14:
0037E3  3  A9 07                lda #7
0037E5  3  8D 31 11             sta varj
0037E8  3  A9 04                lda #4
0037EA  3  85 65                sta z80_d
0037EC  3  20 FB 20             jsr random
0037EF  3  85 67                sta z80_h
0037F1  3  20 D2 18             jsr imul
0037F4  3  A5 67                lda z80_h
0037F6  3  8D 43 11             sta varrnd
0037F9  3  AD 43 11             lda varrnd
0037FC  3  8D 32 11             sta vark
0037FF  3  AD 32 11             lda vark
003802  3  18                   clc
003803  3  69 01                adc #1
003805  3  8D 32 11             sta vark
003808  3  AD 27 11             lda numlif
00380B  3  18                   clc
00380C  3  69 01                adc #1
00380E  3  8D 27 11             sta numlif
003811  3  A9 01                lda #1
003813  3  CD 27 11             cmp numlif
003816  3  F0 03                beq *+5
003818  3  4C 25 38             jmp o00114
00381B  3  A9 02                lda #2
00381D  3  8D 37 11             sta varp
003820  3  A9 01                lda #1
003822  3  8D 30 11             sta vari
003825  3  A9 02        o00114: lda #2
003827  3  CD 27 11             cmp numlif
00382A  3  F0 03                beq *+5
00382C  3  4C 39 38             jmp o00148
00382F  3  A9 02                lda #2
003831  3  8D 37 11             sta varp
003834  3  A9 02                lda #2
003836  3  8D 30 11             sta vari
003839  3  A9 03        o00148: lda #3
00383B  3  CD 27 11             cmp numlif
00383E  3  F0 03                beq *+5
003840  3  4C 4D 38             jmp o00181
003843  3  A9 02                lda #2
003845  3  8D 37 11             sta varp
003848  3  A9 03                lda #3
00384A  3  8D 30 11             sta vari
00384D  3  A9 04        o00181: lda #4
00384F  3  CD 27 11             cmp numlif
003852  3  F0 03                beq *+5
003854  3  4C 61 38             jmp o00214
003857  3  A9 02                lda #2
003859  3  8D 37 11             sta varp
00385C  3  A9 04                lda #4
00385E  3  8D 30 11             sta vari
003861  3  A9 05        o00214: lda #5
003863  3  CD 27 11             cmp numlif
003866  3  F0 03                beq *+5
003868  3  4C 70 38             jmp o00239
00386B  3  A9 03                lda #3
00386D  3  8D 37 11             sta varp
003870  3  A9 07        o00239: lda #7
003872  3  CD 27 11             cmp numlif
003875  3  F0 03                beq *+5
003877  3  4C 7F 38             jmp o00265
00387A  3  A9 04                lda #4
00387C  3  8D 37 11             sta varp
00387F  3  A9 09        o00265: lda #9
003881  3  CD 27 11             cmp numlif
003884  3  90 03                bcc *+5
003886  3  4C 8E 38             jmp o00290
003889  3  A9 05                lda #5
00388B  3  8D 37 11             sta varp
00388E  3  60           o00290: rts
00388F  3               evnt15:
00388F  3  60                   rts
003890  3               evnt16:
003890  3  A9 14                lda #20
003892  3  20 21 16             jsr explod
003895  3  AD 27 11             lda numlif
003898  3  38                   sec
003899  3  E9 01                sbc #1
00389B  3  8D 27 11             sta numlif
00389E  3  A9 00                lda #0
0038A0  3  8D 2D 11             sta varf
0038A3  3  60                   rts
0038A4  3               evnt17:
0038A4  3  A9 32                lda #50
0038A6  3  20 67 11             jsr delay
0038A9  3  60                   rts
0038AA  3               evnt18:
0038AA  3  A9 46                lda #70
0038AC  3  20 67 11             jsr delay
0038AF  3  A9 0A                lda #10
0038B1  3  20 67 11             jsr delay
0038B4  3  60                   rts
0038B5  3               evnt19:
0038B5  3  60                   rts
0038B6  3  60           ptcusr: rts
0038B7  3               msgdat:
0038B7  3  54 8D                .byte "T",141
0038B9  3  45 8D                .byte "E",141
0038BB  3  52 8D                .byte "R",141
0038BD  3  41 8D                .byte "A",141
0038BF  3  48 8D                .byte "H",141
0038C1  3  57 8D                .byte "W",141
0038C3  3  4B 8D                .byte "K",141
0038C5  3  53 8D                .byte "S",141
0038C7  3               nummsg:
0038C7  3  08                   .byte 8
0038C8  3               chgfx:
0038C8  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0038CC  3  00 00 00 00  
0038D0  3  FF FF 00 00          .byte 255,255,0,0,0,0,0,0
0038D4  3  00 00 00 00  
0038D8  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0038DC  3  00 00 00 00  
0038E0  3               bprop:
0038E0  3  01                   .byte 1
0038E1  3  05                   .byte 5
0038E2  3  06                   .byte 6
0038E3  3               sprgfx:
0038E3  3  00 00 00 00          .byte 0,0,0,0,6,96,0,0,6,96,6,96,12,48,12,48,24,24,24,24,48,12,48,12,96,6,96,6,192,3,192,3
0038E7  3  06 60 00 00  
0038EB  3  06 60 06 60  
003903  3  00 00 00 00          .byte 0,0,0,0,1,152,0,0,1,152,1,152,3,12,3,12,6,6,6,6,12,3,12,3,152,1,152,1,240,0,240,0
003907  3  01 98 00 00  
00390B  3  01 98 01 98  
003923  3  00 00 00 00          .byte 0,0,0,0,0,102,0,0,0,102,0,102,0,195,0,195,129,129,129,129,195,0,195,0,102,0,102,0,60,0,60,0
003927  3  00 66 00 00  
00392B  3  00 66 00 66  
003943  3  00 00 00 00          .byte 0,0,0,0,128,25,0,0,128,25,128,25,192,48,192,48,96,96,96,96,48,192,48,192,25,128,25,128,15,0,15,0
003947  3  80 19 00 00  
00394B  3  80 19 80 19  
003963  3  02 40 00 00          .byte 2,64,0,0,0,0,0,0,6,96,6,96,12,48,12,48,24,24,24,24,48,12,48,12,96,6,96,6,192,3,192,3
003967  3  00 00 00 00  
00396B  3  06 60 06 60  
003983  3  00 90 00 00          .byte 0,144,0,0,0,0,0,0,1,152,1,152,3,12,3,12,6,6,6,6,12,3,12,3,152,1,152,1,240,0,240,0
003987  3  00 00 00 00  
00398B  3  01 98 01 98  
0039A3  3  00 24 00 00          .byte 0,36,0,0,0,0,0,0,0,102,0,102,0,195,0,195,129,129,129,129,195,0,195,0,102,0,102,0,60,0,60,0
0039A7  3  00 00 00 00  
0039AB  3  00 66 00 66  
0039C3  3  00 09 00 00          .byte 0,9,0,0,0,0,0,0,128,25,128,25,192,48,192,48,96,96,96,96,48,192,48,192,25,128,25,128,15,0,15,0
0039C7  3  00 00 00 00  
0039CB  3  80 19 80 19  
0039E3  3  01 80 01 80          .byte 1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128
0039E7  3  01 80 01 80  
0039EB  3  01 80 01 80  
003A03  3  00 60 00 60          .byte 0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96
003A07  3  00 60 00 60  
003A0B  3  00 60 00 60  
003A23  3  00 18 00 18          .byte 0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24,0,24
003A27  3  00 18 00 18  
003A2B  3  00 18 00 18  
003A43  3  00 06 00 06          .byte 0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6
003A47  3  00 06 00 06  
003A4B  3  00 06 00 06  
003A63  3  3F FC 3F FC          .byte 63,252,63,252,207,243,207,243,243,207,243,207,63,252,63,252,15,240,15,240,48,12,48,12,63,252,63,252,15,240,15,240
003A67  3  CF F3 CF F3  
003A6B  3  F3 CF F3 CF  
003A83  3  0F FF 0F FF          .byte 15,255,15,255,243,252,243,252,252,243,252,243,15,255,15,255,3,252,3,252,12,3,12,3,15,255,15,255,3,252,3,252
003A87  3  F3 FC F3 FC  
003A8B  3  FC F3 FC F3  
003AA3  3  C3 FF C3 FF          .byte 195,255,195,255,60,255,60,255,255,60,255,60,195,255,195,255,0,255,0,255,195,0,195,0,195,255,195,255,0,255,0,255
003AA7  3  3C FF 3C FF  
003AAB  3  FF 3C FF 3C  
003AC3  3  F0 FF F0 FF          .byte 240,255,240,255,207,63,207,63,63,207,63,207,240,255,240,255,192,63,192,63,48,192,48,192,240,255,240,255,192,63,192,63
003AC7  3  CF 3F CF 3F  
003ACB  3  3F CF 3F CF  
003AE3  3  3F FC 3F FC          .byte 63,252,63,252,207,243,207,243,243,207,243,207,63,252,63,252,63,252,63,252,63,252,63,252,15,240,15,240,0,0,0,0
003AE7  3  CF F3 CF F3  
003AEB  3  F3 CF F3 CF  
003B03  3  0F FF 0F FF          .byte 15,255,15,255,243,252,243,252,252,243,252,243,15,255,15,255,15,255,15,255,15,255,15,255,3,252,3,252,0,0,0,0
003B07  3  F3 FC F3 FC  
003B0B  3  FC F3 FC F3  
003B23  3  C3 FF C3 FF          .byte 195,255,195,255,60,255,60,255,255,60,255,60,195,255,195,255,195,255,195,255,195,255,195,255,0,255,0,255,0,0,0,0
003B27  3  3C FF 3C FF  
003B2B  3  FF 3C FF 3C  
003B43  3  F0 FF F0 FF          .byte 240,255,240,255,207,63,207,63,63,207,63,207,240,255,240,255,240,255,240,255,240,255,240,255,192,63,192,63,0,0,0,0
003B47  3  CF 3F CF 3F  
003B4B  3  3F CF 3F CF  
003B63  3  3F FC 3F FC          .byte 63,252,63,252,207,243,207,243,243,207,243,207,63,252,63,252,15,240,15,240,48,12,48,12,63,252,63,252,15,240,15,240
003B67  3  CF F3 CF F3  
003B6B  3  F3 CF F3 CF  
003B83  3  0F FF 0F FF          .byte 15,255,15,255,243,252,243,252,252,243,252,243,15,255,15,255,3,252,3,252,12,3,12,3,15,255,15,255,3,252,3,252
003B87  3  F3 FC F3 FC  
003B8B  3  FC F3 FC F3  
003BA3  3  C3 FF C3 FF          .byte 195,255,195,255,60,255,60,255,255,60,255,60,195,255,195,255,0,255,0,255,195,0,195,0,195,255,195,255,0,255,0,255
003BA7  3  3C FF 3C FF  
003BAB  3  FF 3C FF 3C  
003BC3  3  F0 FF F0 FF          .byte 240,255,240,255,207,63,207,63,63,207,63,207,240,255,240,255,192,63,192,63,48,192,48,192,240,255,240,255,192,63,192,63
003BC7  3  CF 3F CF 3F  
003BCB  3  3F CF 3F CF  
003BE3  3  3F FC 3F FC          .byte 63,252,63,252,207,243,207,243,243,207,243,207,63,252,63,252,63,252,63,252,63,252,63,252,15,240,15,240,0,0,0,0
003BE7  3  CF F3 CF F3  
003BEB  3  F3 CF F3 CF  
003C03  3  0F FF 0F FF          .byte 15,255,15,255,243,252,243,252,252,243,252,243,15,255,15,255,15,255,15,255,15,255,15,255,3,252,3,252,0,0,0,0
003C07  3  F3 FC F3 FC  
003C0B  3  FC F3 FC F3  
003C23  3  C3 FF C3 FF          .byte 195,255,195,255,60,255,60,255,255,60,255,60,195,255,195,255,195,255,195,255,195,255,195,255,0,255,0,255,0,0,0,0
003C27  3  3C FF 3C FF  
003C2B  3  FF 3C FF 3C  
003C43  3  F0 FF F0 FF          .byte 240,255,240,255,207,63,207,63,63,207,63,207,240,255,240,255,240,255,240,255,240,255,240,255,192,63,192,63,0,0,0,0
003C47  3  CF 3F CF 3F  
003C4B  3  3F CF 3F CF  
003C63  3  3F FC 3F FC          .byte 63,252,63,252,207,243,207,243,243,207,243,207,63,252,63,252,15,240,15,240,48,12,48,12,63,252,63,252,15,240,15,240
003C67  3  CF F3 CF F3  
003C6B  3  F3 CF F3 CF  
003C83  3  0F FF 0F FF          .byte 15,255,15,255,243,252,243,252,252,243,252,243,15,255,15,255,3,252,3,252,12,3,12,3,15,255,15,255,3,252,3,252
003C87  3  F3 FC F3 FC  
003C8B  3  FC F3 FC F3  
003CA3  3  C3 FF C3 FF          .byte 195,255,195,255,60,255,60,255,255,60,255,60,195,255,195,255,0,255,0,255,195,0,195,0,195,255,195,255,0,255,0,255
003CA7  3  3C FF 3C FF  
003CAB  3  FF 3C FF 3C  
003CC3  3  F0 FF F0 FF          .byte 240,255,240,255,207,63,207,63,63,207,63,207,240,255,240,255,192,63,192,63,48,192,48,192,240,255,240,255,192,63,192,63
003CC7  3  CF 3F CF 3F  
003CCB  3  3F CF 3F CF  
003CE3  3  3F FC 3F FC          .byte 63,252,63,252,207,243,207,243,243,207,243,207,63,252,63,252,63,252,63,252,63,252,63,252,15,240,15,240,0,0,0,0
003CE7  3  CF F3 CF F3  
003CEB  3  F3 CF F3 CF  
003D03  3  0F FF 0F FF          .byte 15,255,15,255,243,252,243,252,252,243,252,243,15,255,15,255,15,255,15,255,15,255,15,255,3,252,3,252,0,0,0,0
003D07  3  F3 FC F3 FC  
003D0B  3  FC F3 FC F3  
003D23  3  C3 FF C3 FF          .byte 195,255,195,255,60,255,60,255,255,60,255,60,195,255,195,255,195,255,195,255,195,255,195,255,0,255,0,255,0,0,0,0
003D27  3  3C FF 3C FF  
003D2B  3  FF 3C FF 3C  
003D43  3  F0 FF F0 FF          .byte 240,255,240,255,207,63,207,63,63,207,63,207,240,255,240,255,240,255,240,255,240,255,240,255,192,63,192,63,0,0,0,0
003D47  3  CF 3F CF 3F  
003D4B  3  3F CF 3F CF  
003D63  3  3F FC 3F FC          .byte 63,252,63,252,207,243,207,243,243,207,243,207,63,252,63,252,15,240,15,240,48,12,48,12,63,252,63,252,15,240,15,240
003D67  3  CF F3 CF F3  
003D6B  3  F3 CF F3 CF  
003D83  3  0F FF 0F FF          .byte 15,255,15,255,243,252,243,252,252,243,252,243,15,255,15,255,3,252,3,252,12,3,12,3,15,255,15,255,3,252,3,252
003D87  3  F3 FC F3 FC  
003D8B  3  FC F3 FC F3  
003DA3  3  C3 FF C3 FF          .byte 195,255,195,255,60,255,60,255,255,60,255,60,195,255,195,255,0,255,0,255,195,0,195,0,195,255,195,255,0,255,0,255
003DA7  3  3C FF 3C FF  
003DAB  3  FF 3C FF 3C  
003DC3  3  F0 FF F0 FF          .byte 240,255,240,255,207,63,207,63,63,207,63,207,240,255,240,255,192,63,192,63,48,192,48,192,240,255,240,255,192,63,192,63
003DC7  3  CF 3F CF 3F  
003DCB  3  3F CF 3F CF  
003DE3  3  3F FC 3F FC          .byte 63,252,63,252,207,243,207,243,243,207,243,207,63,252,63,252,63,252,63,252,63,252,63,252,15,240,15,240,0,0,0,0
003DE7  3  CF F3 CF F3  
003DEB  3  F3 CF F3 CF  
003E03  3  0F FF 0F FF          .byte 15,255,15,255,243,252,243,252,252,243,252,243,15,255,15,255,15,255,15,255,15,255,15,255,3,252,3,252,0,0,0,0
003E07  3  F3 FC F3 FC  
003E0B  3  FC F3 FC F3  
003E23  3  C3 FF C3 FF          .byte 195,255,195,255,60,255,60,255,255,60,255,60,195,255,195,255,195,255,195,255,195,255,195,255,0,255,0,255,0,0,0,0
003E27  3  3C FF 3C FF  
003E2B  3  FF 3C FF 3C  
003E43  3  F0 FF F0 FF          .byte 240,255,240,255,207,63,207,63,63,207,63,207,240,255,240,255,240,255,240,255,240,255,240,255,192,63,192,63,0,0,0,0
003E47  3  CF 3F CF 3F  
003E4B  3  3F CF 3F CF  
003E63  3  00 00 00 00          .byte 0,0,0,0,15,240,15,240,51,204,51,204,63,252,63,252,63,252,63,252,15,240,15,240,0,0,0,0,0,0,0,0
003E67  3  0F F0 0F F0  
003E6B  3  33 CC 33 CC  
003E83  3  00 00 00 00          .byte 0,0,0,0,3,252,3,252,12,243,12,243,15,255,15,255,15,255,15,255,3,252,3,252,0,0,0,0,0,0,0,0
003E87  3  03 FC 03 FC  
003E8B  3  0C F3 0C F3  
003EA3  3  00 00 00 00          .byte 0,0,0,0,0,255,0,255,195,60,195,60,195,255,195,255,195,255,195,255,0,255,0,255,0,0,0,0,0,0,0,0
003EA7  3  00 FF 00 FF  
003EAB  3  C3 3C C3 3C  
003EC3  3  00 00 00 00          .byte 0,0,0,0,192,63,192,63,48,207,48,207,240,255,240,255,240,255,240,255,192,63,192,63,0,0,0,0,0,0,0,0
003EC7  3  C0 3F C0 3F  
003ECB  3  30 CF 30 CF  
003EE3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,3,192,3,192,15,240,15,240,15,240,15,240,3,192,3,192,0,0,0,0,0,0,0,0
003EE7  3  00 00 00 00  
003EEB  3  03 C0 03 C0  
003F03  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,240,0,240,3,252,3,252,3,252,3,252,0,240,0,240,0,0,0,0,0,0,0,0
003F07  3  00 00 00 00  
003F0B  3  00 F0 00 F0  
003F23  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,60,0,60,0,255,0,255,0,255,0,255,0,60,0,60,0,0,0,0,0,0,0,0
003F27  3  00 00 00 00  
003F2B  3  00 3C 00 3C  
003F43  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,15,0,15,192,63,192,63,192,63,192,63,0,15,0,15,0,0,0,0,0,0,0,0
003F47  3  00 00 00 00  
003F4B  3  00 0F 00 0F  
003F63  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,1,128,3,192,3,192,1,128,0,0,0,0,0,0,0,0,0,0,0,0
003F67  3  00 00 00 00  
003F6B  3  00 00 00 00  
003F83  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,240,0,240,0,96,0,0,0,0,0,0,0,0,0,0,0,0
003F87  3  00 00 00 00  
003F8B  3  00 00 00 00  
003FA3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,60,0,60,0,24,0,0,0,0,0,0,0,0,0,0,0,0
003FA7  3  00 00 00 00  
003FAB  3  00 00 00 00  
003FC3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,15,0,15,0,6,0,0,0,0,0,0,0,0,0,0,0,0
003FC7  3  00 00 00 00  
003FCB  3  00 00 00 00  
003FE3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,1,128,1,128,7,224,7,224,1,128,1,128,0,0,0,0,0,0,0,0,0,0
003FE7  3  00 00 00 00  
003FEB  3  00 00 01 80  
004003  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,96,0,96,1,248,1,248,0,96,0,96,0,0,0,0,0,0,0,0,0,0
004007  3  00 00 00 00  
00400B  3  00 00 00 60  
004023  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,24,0,24,0,126,0,126,0,24,0,24,0,0,0,0,0,0,0,0,0,0
004027  3  00 00 00 00  
00402B  3  00 00 00 18  
004043  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,6,0,6,128,31,128,31,0,6,0,6,0,0,0,0,0,0,0,0,0,0
004047  3  00 00 00 00  
00404B  3  00 00 00 06  
004063  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,6,96,6,96,1,128,1,128,6,96,6,96,0,0,0,0,0,0,0,0,0,0
004067  3  00 00 00 00  
00406B  3  00 00 06 60  
004083  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,1,152,1,152,0,96,0,96,1,152,1,152,0,0,0,0,0,0,0,0,0,0
004087  3  00 00 00 00  
00408B  3  00 00 01 98  
0040A3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,102,0,102,0,24,0,24,0,102,0,102,0,0,0,0,0,0,0,0,0,0
0040A7  3  00 00 00 00  
0040AB  3  00 00 00 66  
0040C3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,128,25,128,25,0,6,0,6,128,25,128,25,0,0,0,0,0,0,0,0,0,0
0040C7  3  00 00 00 00  
0040CB  3  00 00 80 19  
0040E3  3  00 00 00 00          .byte 0,0,0,0,0,0,30,120,30,120,30,120,30,120,1,128,1,128,30,120,30,120,30,120,30,120,0,0,0,0,0,0
0040E7  3  00 00 1E 78  
0040EB  3  1E 78 1E 78  
004103  3  00 00 00 00          .byte 0,0,0,0,0,0,7,158,7,158,7,158,7,158,0,96,0,96,7,158,7,158,7,158,7,158,0,0,0,0,0,0
004107  3  00 00 07 9E  
00410B  3  07 9E 07 9E  
004123  3  00 00 00 00          .byte 0,0,0,0,0,0,129,231,129,231,129,231,129,231,0,24,0,24,129,231,129,231,129,231,129,231,0,0,0,0,0,0
004127  3  00 00 81 E7  
00412B  3  81 E7 81 E7  
004143  3  00 00 00 00          .byte 0,0,0,0,0,0,224,121,224,121,224,121,224,121,0,6,0,6,224,121,224,121,224,121,224,121,0,0,0,0,0,0
004147  3  00 00 E0 79  
00414B  3  E0 79 E0 79  
004163  3  00 F0 00 F0          .byte 0,240,0,240,0,240,0,240,252,240,252,240,255,192,255,192,3,255,3,255,15,63,15,63,15,0,15,0,15,0,15,0
004167  3  00 F0 00 F0  
00416B  3  FC F0 FC F0  
004183  3  00 3C 00 3C          .byte 0,60,0,60,0,60,0,60,63,60,63,60,63,240,63,240,192,255,192,255,195,207,195,207,3,192,3,192,3,192,3,192
004187  3  00 3C 00 3C  
00418B  3  3F 3C 3F 3C  
0041A3  3  00 0F 00 0F          .byte 0,15,0,15,0,15,0,15,15,207,15,207,15,252,15,252,240,63,240,63,240,243,240,243,0,240,0,240,0,240,0,240
0041A7  3  00 0F 00 0F  
0041AB  3  0F CF 0F CF  
0041C3  3  C0 03 C0 03          .byte 192,3,192,3,192,3,192,3,195,243,195,243,3,255,3,255,252,15,252,15,252,60,252,60,0,60,0,60,0,60,0,60
0041C7  3  C0 03 C0 03  
0041CB  3  C3 F3 C3 F3  
0041E3  3  03 C0 03 C0          .byte 3,192,3,192,3,192,3,192,3,192,3,192,255,255,255,255,255,255,255,255,3,192,3,192,3,192,3,192,3,192,3,192
0041E7  3  03 C0 03 C0  
0041EB  3  03 C0 03 C0  
004203  3  00 F0 00 F0          .byte 0,240,0,240,0,240,0,240,0,240,0,240,255,255,255,255,255,255,255,255,0,240,0,240,0,240,0,240,0,240,0,240
004207  3  00 F0 00 F0  
00420B  3  00 F0 00 F0  
004223  3  00 3C 00 3C          .byte 0,60,0,60,0,60,0,60,0,60,0,60,255,255,255,255,255,255,255,255,0,60,0,60,0,60,0,60,0,60,0,60
004227  3  00 3C 00 3C  
00422B  3  00 3C 00 3C  
004243  3  00 0F 00 0F          .byte 0,15,0,15,0,15,0,15,0,15,0,15,255,255,255,255,255,255,255,255,0,15,0,15,0,15,0,15,0,15,0,15
004247  3  00 0F 00 0F  
00424B  3  00 0F 00 0F  
004263  3  0F 00 0F 00          .byte 15,0,15,0,15,0,15,0,15,63,15,63,3,255,3,255,255,192,255,192,252,240,252,240,0,240,0,240,0,240,0,240
004267  3  0F 00 0F 00  
00426B  3  0F 3F 0F 3F  
004283  3  03 C0 03 C0          .byte 3,192,3,192,3,192,3,192,195,207,195,207,192,255,192,255,63,240,63,240,63,60,63,60,0,60,0,60,0,60,0,60
004287  3  03 C0 03 C0  
00428B  3  C3 CF C3 CF  
0042A3  3  00 F0 00 F0          .byte 0,240,0,240,0,240,0,240,240,243,240,243,240,63,240,63,15,252,15,252,15,207,15,207,0,15,0,15,0,15,0,15
0042A7  3  00 F0 00 F0  
0042AB  3  F0 F3 F0 F3  
0042C3  3  00 3C 00 3C          .byte 0,60,0,60,0,60,0,60,252,60,252,60,252,15,252,15,3,255,3,255,195,243,195,243,192,3,192,3,192,3,192,3
0042C7  3  00 3C 00 3C  
0042CB  3  FC 3C FC 3C  
0042E3  3  F0 0F F0 0F          .byte 240,15,240,15,240,15,240,15,15,240,15,240,15,240,15,240,15,240,15,240,15,240,15,240,240,15,240,15,240,15,240,15
0042E7  3  F0 0F F0 0F  
0042EB  3  0F F0 0F F0  
004303  3  FC 03 FC 03          .byte 252,3,252,3,252,3,252,3,3,252,3,252,3,252,3,252,3,252,3,252,3,252,3,252,252,3,252,3,252,3,252,3
004307  3  FC 03 FC 03  
00430B  3  03 FC 03 FC  
004323  3  FF 00 FF 00          .byte 255,0,255,0,255,0,255,0,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,255,0,255,0,255,0,255,0
004327  3  FF 00 FF 00  
00432B  3  00 FF 00 FF  
004343  3  3F C0 3F C0          .byte 63,192,63,192,63,192,63,192,192,63,192,63,192,63,192,63,192,63,192,63,192,63,192,63,63,192,63,192,63,192,63,192
004347  3  3F C0 3F C0  
00434B  3  C0 3F C0 3F  
004363  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,63,252,63,252
004367  3  00 00 00 00  
00436B  3  00 00 00 00  
004383  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,15,255,15,255
004387  3  00 00 00 00  
00438B  3  00 00 00 00  
0043A3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,195,255,195,255
0043A7  3  00 00 00 00  
0043AB  3  00 00 00 00  
0043C3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,240,255,240,255
0043C7  3  00 00 00 00  
0043CB  3  00 00 00 00  
0043E3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,3,192,7,224,15,240,15,240,15,240,15,240,7,224,3,192,0,0,0,0,0,0,0,0
0043E7  3  00 00 00 00  
0043EB  3  03 C0 07 E0  
004403  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,240,1,248,3,252,3,252,3,252,3,252,1,248,0,240,0,0,0,0,0,0,0,0
004407  3  00 00 00 00  
00440B  3  00 F0 01 F8  
004423  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,60,0,126,0,255,0,255,0,255,0,255,0,126,0,60,0,0,0,0,0,0,0,0
004427  3  00 00 00 00  
00442B  3  00 3C 00 7E  
004443  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,15,128,31,192,63,192,63,192,63,192,63,128,31,0,15,0,0,0,0,0,0,0,0
004447  3  00 00 00 00  
00444B  3  00 0F 80 1F  
004463  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,1,128,3,192,7,224,7,224,3,192,1,128,0,0,0,0,0,0,0,0,0,0
004467  3  00 00 00 00  
00446B  3  00 00 01 80  
004483  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,96,0,240,1,248,1,248,0,240,0,96,0,0,0,0,0,0,0,0,0,0
004487  3  00 00 00 00  
00448B  3  00 00 00 60  
0044A3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,24,0,60,0,126,0,126,0,60,0,24,0,0,0,0,0,0,0,0,0,0
0044A7  3  00 00 00 00  
0044AB  3  00 00 00 18  
0044C3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,6,0,15,128,31,128,31,0,15,0,6,0,0,0,0,0,0,0,0,0,0
0044C7  3  00 00 00 00  
0044CB  3  00 00 00 06  
0044E3  3  00 00 00 18          .byte 0,0,0,24,0,24,48,60,48,60,120,24,120,24,48,24,49,152,49,128,49,128,1,128,1,128,1,128,1,128,1,128
0044E7  3  00 18 30 3C  
0044EB  3  30 3C 78 18  
004503  3  00 00 00 06          .byte 0,0,0,6,0,6,12,15,12,15,30,6,30,6,12,6,12,102,12,96,12,96,0,96,0,96,0,96,0,96,0,96
004507  3  00 06 0C 0F  
00450B  3  0C 0F 1E 06  
004523  3  00 00 80 01          .byte 0,0,128,1,128,1,195,3,195,3,135,129,135,129,131,1,131,25,3,24,3,24,0,24,0,24,0,24,0,24,0,24
004527  3  80 01 C3 03  
00452B  3  C3 03 87 81  
004543  3  00 00 60 00          .byte 0,0,96,0,96,0,240,192,240,192,97,224,97,224,96,192,96,198,0,198,0,198,0,6,0,6,0,6,0,6,0,6
004547  3  60 00 F0 C0  
00454B  3  F0 C0 61 E0  
004563  3  00 00 00 18          .byte 0,0,0,24,0,24,48,24,48,24,48,24,48,24,48,24,49,152,49,128,51,192,3,192,1,128,1,128,1,128,1,128
004567  3  00 18 30 18  
00456B  3  30 18 30 18  
004583  3  00 00 00 06          .byte 0,0,0,6,0,6,12,6,12,6,12,6,12,6,12,6,12,102,12,96,12,240,0,240,0,96,0,96,0,96,0,96
004587  3  00 06 0C 06  
00458B  3  0C 06 0C 06  
0045A3  3  00 00 80 01          .byte 0,0,128,1,128,1,131,1,131,1,131,1,131,1,131,1,131,25,3,24,3,60,0,60,0,24,0,24,0,24,0,24
0045A7  3  80 01 83 01  
0045AB  3  83 01 83 01  
0045C3  3  00 00 60 00          .byte 0,0,96,0,96,0,96,192,96,192,96,192,96,192,96,192,96,198,0,198,0,207,0,15,0,6,0,6,0,6,0,6
0045C7  3  60 00 60 C0  
0045CB  3  60 C0 60 C0  
0045E3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,1,128,0,0
0045E7  3  00 00 00 00  
0045EB  3  00 00 00 00  
004603  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,96,0,0
004607  3  00 00 00 00  
00460B  3  00 00 00 00  
004623  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,24,0,0
004627  3  00 00 00 00  
00462B  3  00 00 00 00  
004643  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,0
004647  3  00 00 00 00  
00464B  3  00 00 00 00  
004663  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,3,192,3,192,1,128
004667  3  00 00 00 00  
00466B  3  00 00 00 00  
004683  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,240,0,240,0,96
004687  3  00 00 00 00  
00468B  3  00 00 00 00  
0046A3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,60,0,60,0,24
0046A7  3  00 00 00 00  
0046AB  3  00 00 00 00  
0046C3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,15,0,15,0,6
0046C7  3  00 00 00 00  
0046CB  3  00 00 00 00  
0046E3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,96,6,96,1,128,1,128,6,96,6,96
0046E7  3  00 00 00 00  
0046EB  3  00 00 00 00  
004703  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,152,1,152,0,96,0,96,1,152,1,152
004707  3  00 00 00 00  
00470B  3  00 00 00 00  
004723  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,102,0,24,0,24,0,102,0,102
004727  3  00 00 00 00  
00472B  3  00 00 00 00  
004743  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,25,128,25,0,6,0,6,128,25,128,25
004747  3  00 00 00 00  
00474B  3  00 00 00 00  
004763  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,1,128,7,224,7,224,1,128,1,128
004767  3  00 00 00 00  
00476B  3  00 00 00 00  
004783  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,96,1,248,1,248,0,96,0,96
004787  3  00 00 00 00  
00478B  3  00 00 00 00  
0047A3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,24,0,126,0,126,0,24,0,24
0047A7  3  00 00 00 00  
0047AB  3  00 00 00 00  
0047C3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,128,31,128,31,0,6,0,6
0047C7  3  00 00 00 00  
0047CB  3  00 00 00 00  
0047E3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,96,6,96,6,24,24,24,24,0,0,0,0,24,24,24,24,96,6,96,6
0047E7  3  00 00 00 00  
0047EB  3  00 00 00 00  
004803  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,152,1,152,1,6,6,6,6,0,0,0,0,6,6,6,6,152,1,152,1
004807  3  00 00 00 00  
00480B  3  00 00 00 00  
004823  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,102,0,102,0,129,129,129,129,0,0,0,0,129,129,129,129,102,0,102,0
004827  3  00 00 00 00  
00482B  3  00 00 00 00  
004843  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,25,128,25,128,96,96,96,96,0,0,0,0,96,96,96,96,25,128,25,128
004847  3  00 00 00 00  
00484B  3  00 00 00 00  
004863  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,96,6,96,1,128,1,128,6,96,6,96
004867  3  00 00 00 00  
00486B  3  00 00 00 00  
004883  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,152,1,152,0,96,0,96,1,152,1,152
004887  3  00 00 00 00  
00488B  3  00 00 00 00  
0048A3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,102,0,24,0,24,0,102,0,102
0048A7  3  00 00 00 00  
0048AB  3  00 00 00 00  
0048C3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,25,128,25,0,6,0,6,128,25,128,25
0048C7  3  00 00 00 00  
0048CB  3  00 00 00 00  
0048E3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,1,128,7,224,7,224,1,128,1,128
0048E7  3  00 00 00 00  
0048EB  3  00 00 00 00  
004903  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,96,1,248,1,248,0,96,0,96
004907  3  00 00 00 00  
00490B  3  00 00 00 00  
004923  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,24,0,126,0,126,0,24,0,24
004927  3  00 00 00 00  
00492B  3  00 00 00 00  
004943  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,128,31,128,31,0,6,0,6
004947  3  00 00 00 00  
00494B  3  00 00 00 00  
004963  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,96,6,96,1,128,1,128,6,96,6,96
004967  3  00 00 00 00  
00496B  3  00 00 00 00  
004983  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,152,1,152,0,96,0,96,1,152,1,152
004987  3  00 00 00 00  
00498B  3  00 00 00 00  
0049A3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,102,0,24,0,24,0,102,0,102
0049A7  3  00 00 00 00  
0049AB  3  00 00 00 00  
0049C3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,25,128,25,0,6,0,6,128,25,128,25
0049C7  3  00 00 00 00  
0049CB  3  00 00 00 00  
0049E3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,1,128,7,224,7,224,1,128,1,128
0049E7  3  00 00 00 00  
0049EB  3  00 00 00 00  
004A03  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,96,1,248,1,248,0,96,0,96
004A07  3  00 00 00 00  
004A0B  3  00 00 00 00  
004A23  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,24,0,126,0,126,0,24,0,24
004A27  3  00 00 00 00  
004A2B  3  00 00 00 00  
004A43  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,128,31,128,31,0,6,0,6
004A47  3  00 00 00 00  
004A4B  3  00 00 00 00  
004A63  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,96,6,96,1,128,1,128,6,96,6,96
004A67  3  00 00 00 00  
004A6B  3  00 00 00 00  
004A83  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,152,1,152,0,96,0,96,1,152,1,152
004A87  3  00 00 00 00  
004A8B  3  00 00 00 00  
004AA3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,102,0,24,0,24,0,102,0,102
004AA7  3  00 00 00 00  
004AAB  3  00 00 00 00  
004AC3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,25,128,25,0,6,0,6,128,25,128,25
004AC7  3  00 00 00 00  
004ACB  3  00 00 00 00  
004AE3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,1,128,7,224,7,224,1,128,1,128
004AE7  3  00 00 00 00  
004AEB  3  00 00 00 00  
004B03  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,96,1,248,1,248,0,96,0,96
004B07  3  00 00 00 00  
004B0B  3  00 00 00 00  
004B23  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,24,0,126,0,126,0,24,0,24
004B27  3  00 00 00 00  
004B2B  3  00 00 00 00  
004B43  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,128,31,128,31,0,6,0,6
004B47  3  00 00 00 00  
004B4B  3  00 00 00 00  
004B63  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,2,128,0,0,8,32,0,0,32,8,0,0,8,32,0,0,2,128,0,0
004B67  3  00 00 00 00  
004B6B  3  00 00 00 00  
004B83  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,0,2,8,0,0,8,2,0,0,2,8,0,0,0,160,0,0
004B87  3  00 00 00 00  
004B8B  3  00 00 00 00  
004BA3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,130,0,0,130,0,0,0,0,130,0,0,0,40,0,0
004BA7  3  00 00 00 00  
004BAB  3  00 00 00 00  
004BC3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,128,32,0,0,32,128,0,0,128,32,0,0,0,10,0,0
004BC7  3  00 00 00 00  
004BCB  3  00 00 00 00  
004BE3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,64,0,0,16,16,0,0,16,16,0,0,4,64,0,0,1,0
004BE7  3  00 00 00 00  
004BEB  3  00 00 01 00  
004C03  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,64,0,0,1,16,0,0,4,4,0,0,4,4,0,0,1,16,0,0,0,64
004C07  3  00 00 00 00  
004C0B  3  00 00 00 40  
004C23  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,68,0,0,1,1,0,0,1,1,0,0,0,68,0,0,0,16
004C27  3  00 00 00 00  
004C2B  3  00 00 00 10  
004C43  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,17,0,0,64,64,0,0,64,64,0,0,0,17,0,0,0,4
004C47  3  00 00 00 00  
004C4B  3  00 00 00 04  
004C63  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,64,0,0,4,64,0,0,1,0,0,0,0,0
004C67  3  00 00 00 00  
004C6B  3  00 00 00 00  
004C83  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,1,16,0,0,1,16,0,0,0,64,0,0,0,0
004C87  3  00 00 00 00  
004C8B  3  00 00 00 00  
004CA3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,68,0,0,0,68,0,0,0,16,0,0,0,0
004CA7  3  00 00 00 00  
004CAB  3  00 00 00 00  
004CC3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,17,0,0,0,17,0,0,0,4,0,0,0,0
004CC7  3  00 00 00 00  
004CCB  3  00 00 00 00  
004CE3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,128,0,0,8,32,0,0,2,128,0,0,0,0,0,0
004CE7  3  00 00 00 00  
004CEB  3  00 00 00 00  
004D03  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,0,2,8,0,0,0,160,0,0,0,0,0,0
004D07  3  00 00 00 00  
004D0B  3  00 00 00 00  
004D23  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,130,0,0,0,40,0,0,0,0,0,0
004D27  3  00 00 00 00  
004D2B  3  00 00 00 00  
004D43  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,128,32,0,0,0,10,0,0,0,0,0,0
004D47  3  00 00 00 00  
004D4B  3  00 00 00 00  
004D63  3  02 40 00 00          .byte 2,64,0,0,0,0,0,0,6,96,6,96,12,48,13,176,25,152,27,216,51,204,55,236,96,6,111,246,192,3,223,251
004D67  3  00 00 00 00  
004D6B  3  06 60 06 60  
004D83  3  00 90 00 00          .byte 0,144,0,0,0,0,0,0,1,152,1,152,3,12,3,108,6,102,6,246,12,243,13,251,152,1,155,253,240,0,247,254
004D87  3  00 00 00 00  
004D8B  3  01 98 01 98  
004DA3  3  00 24 00 00          .byte 0,36,0,0,0,0,0,0,0,102,0,102,0,195,0,219,129,153,129,189,195,60,195,126,102,0,102,255,60,0,189,255
004DA7  3  00 00 00 00  
004DAB  3  00 66 00 66  
004DC3  3  00 09 00 00          .byte 0,9,0,0,0,0,0,0,128,25,128,25,192,48,192,54,96,102,96,111,48,207,176,223,25,128,217,191,15,0,239,127
004DC7  3  00 00 00 00  
004DCB  3  80 19 80 19  
004DE3  3  00 00 00 00          .byte 0,0,0,0,6,96,0,0,6,96,6,96,12,48,13,176,25,152,27,216,51,204,55,236,103,230,96,6,207,243,192,3
004DE7  3  06 60 00 00  
004DEB  3  06 60 06 60  
004E03  3  00 00 00 00          .byte 0,0,0,0,1,152,0,0,1,152,1,152,3,12,3,108,6,102,6,246,12,243,13,251,153,249,152,1,243,252,240,0
004E07  3  01 98 00 00  
004E0B  3  01 98 01 98  
004E23  3  00 00 00 00          .byte 0,0,0,0,0,102,0,0,0,102,0,102,0,195,0,219,129,153,129,189,195,60,195,126,102,126,102,0,60,255,60,0
004E27  3  00 66 00 00  
004E2B  3  00 66 00 66  
004E43  3  00 00 00 00          .byte 0,0,0,0,128,25,0,0,128,25,128,25,192,48,192,54,96,102,96,111,48,207,176,223,153,159,25,128,207,63,15,0
004E47  3  80 19 00 00  
004E4B  3  80 19 80 19  
004E63  3  00 00 00 00          .byte 0,0,0,0,6,96,0,0,6,96,6,96,12,48,12,48,24,24,24,24,48,12,48,12,96,6,96,6,192,3,192,3
004E67  3  06 60 00 00  
004E6B  3  06 60 06 60  
004E83  3  00 00 00 00          .byte 0,0,0,0,1,152,0,0,1,152,1,152,3,12,3,12,6,6,6,6,12,3,12,3,152,1,152,1,240,0,240,0
004E87  3  01 98 00 00  
004E8B  3  01 98 01 98  
004EA3  3  00 00 00 00          .byte 0,0,0,0,0,102,0,0,0,102,0,102,0,195,0,195,129,129,129,129,195,0,195,0,102,0,102,0,60,0,60,0
004EA7  3  00 66 00 00  
004EAB  3  00 66 00 66  
004EC3  3  00 00 00 00          .byte 0,0,0,0,128,25,0,0,128,25,128,25,192,48,192,48,96,96,96,96,48,192,48,192,25,128,25,128,15,0,15,0
004EC7  3  80 19 00 00  
004ECB  3  80 19 80 19  
004EE3  3  00 00 00 00          .byte 0,0,0,0,0,0,7,224,15,240,31,248,31,248,31,248,31,248,31,248,31,248,15,240,7,224,0,0,0,0,0,0
004EE7  3  00 00 07 E0  
004EEB  3  0F F0 1F F8  
004F03  3  00 00 00 00          .byte 0,0,0,0,0,0,1,248,3,252,7,254,7,254,7,254,7,254,7,254,7,254,3,252,1,248,0,0,0,0,0,0
004F07  3  00 00 01 F8  
004F0B  3  03 FC 07 FE  
004F23  3  00 00 00 00          .byte 0,0,0,0,0,0,0,126,0,255,129,255,129,255,129,255,129,255,129,255,129,255,0,255,0,126,0,0,0,0,0,0
004F27  3  00 00 00 7E  
004F2B  3  00 FF 81 FF  
004F43  3  00 00 00 00          .byte 0,0,0,0,0,0,128,31,192,63,224,127,224,127,224,127,224,127,224,127,224,127,192,63,128,31,0,0,0,0,0,0
004F47  3  00 00 80 1F  
004F4B  3  C0 3F E0 7F  
004F63  3  07 E0 1F F8          .byte 7,224,31,248,63,252,127,254,127,254,255,255,255,255,255,255,255,255,255,255,255,255,127,254,127,254,63,252,31,248,7,224
004F67  3  3F FC 7F FE  
004F6B  3  7F FE FF FF  
004F83  3  01 F8 07 FE          .byte 1,248,7,254,15,255,159,255,159,255,255,255,255,255,255,255,255,255,255,255,255,255,159,255,159,255,15,255,7,254,1,248
004F87  3  0F FF 9F FF  
004F8B  3  9F FF FF FF  
004FA3  3  00 7E 81 FF          .byte 0,126,129,255,195,255,231,255,231,255,255,255,255,255,255,255,255,255,255,255,255,255,231,255,231,255,195,255,129,255,0,126
004FA7  3  C3 FF E7 FF  
004FAB  3  E7 FF FF FF  
004FC3  3  80 1F E0 7F          .byte 128,31,224,127,240,255,249,255,249,255,255,255,255,255,255,255,255,255,255,255,255,255,249,255,249,255,240,255,224,127,128,31
004FC7  3  F0 FF F9 FF  
004FCB  3  F9 FF FF FF  
004FE3  3               frmlst:
004FE3  3  00 02                .byte 0,2
004FE5  3  02 01                .byte 2,1
004FE7  3  03 0B                .byte 3,11
004FE9  3  0E 03                .byte 14,3
004FEB  3  11 04                .byte 17,4
004FED  3  15 01                .byte 21,1
004FEF  3  16 02                .byte 22,2
004FF1  3  18 02                .byte 24,2
004FF3  3  1A 02                .byte 26,2
004FF5  3  1C 09                .byte 28,9
004FF7  3  25 04                .byte 37,4
004FF9  3  29 03                .byte 41,3
004FFB  3  2C 02 2E 00          .byte 44,2,46,0
004FFF  3               scdat:
004FFF  3  6A 00                .word 106
005001  3  FF 02 20 FF          .byte 255,2,32,255,0,29,2,2,255,0,29,2,2,255,0,29,2,2,255,0,29,2,2,255,0,29,2,2,255,0,29,2,2
005005  3  00 1D 02 02  
005009  3  FF 00 1D 02  
005022  3  FF 00 1D 02          .byte 255,0,29,2,2,255,0,29,2,2,255,0,29,2,2,255,0,29,2,2,255,0,29,2,2,255,0,29,2,2,255,0,29
005026  3  02 FF 00 1D  
00502A  3  02 02 FF 00  
005043  3  02 02 FF 00          .byte 2,2,255,0,29,2,2,255,0,29,255,2,33,255,0,29,2,2,255,0,29,2,2,255,0,29,2,2,255,0,29,2,2
005047  3  1D 02 02 FF  
00504B  3  00 1D FF 02  
005064  3  FF 00 1D 02          .byte 255,0,29,2,255,1,31
005068  3  FF 01 1F     
00506B  3               numsc:
00506B  3  01                   .byte 1
00506C  3               nmedat:
00506C  3  02 02 38 78          .byte 2,2,56,120,0,0,160,120,255
005070  3  00 00 A0 78  
005074  3  FF           
005075  3               NUMOBJ = 1
005075  3               objdta:
005075  3  56 45 41 44          .byte 86,69,65,68,32,111,102,32,116,104,101,32,84,105,109,101,108,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,254,56,120,254,56,120
005079  3  20 6F 66 20  
00507D  3  74 68 65 20  
00509B  3               font:
00509B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00509F  3  00 00 00 00  
0050A3  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
0050A7  3  30 00 30 00  
0050AB  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
0050AF  3  00 00 00 00  
0050B3  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
0050B7  3  6C FE 6C 00  
0050BB  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
0050BF  3  7E 1E 7E 18  
0050C3  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
0050C7  3  30 6E CE 00  
0050CB  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
0050CF  3  7E CC 7E 00  
0050D3  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
0050D7  3  00 00 00 00  
0050DB  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
0050DF  3  18 18 0C 00  
0050E3  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
0050E7  3  30 30 60 00  
0050EB  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
0050EF  3  7E 18 3C 00  
0050F3  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
0050F7  3  7E 18 18 00  
0050FB  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0050FF  3  00 18 18 30  
005103  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
005107  3  7E 00 00 00  
00510B  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
00510F  3  00 38 38 00  
005113  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
005117  3  18 30 60 00  
00511B  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
00511F  3  F6 E6 7C 00  
005123  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
005127  3  18 18 7E 00  
00512B  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
00512F  3  7C C0 FE 00  
005133  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
005137  3  06 C6 7C 00  
00513B  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
00513F  3  D8 FE 18 00  
005143  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
005147  3  06 C6 7C 00  
00514B  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
00514F  3  C6 C6 7C 00  
005153  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
005157  3  18 30 30 00  
00515B  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
00515F  3  C6 C6 7C 00  
005163  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
005167  3  7E 06 7C 00  
00516B  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
00516F  3  00 00 30 00  
005173  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
005177  3  00 30 30 60  
00517B  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
00517F  3  30 18 0C 00  
005183  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
005187  3  00 7E 00 00  
00518B  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
00518F  3  0C 18 30 00  
005193  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
005197  3  18 00 18 00  
00519B  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
00519F  3  FE C0 7C 00  
0051A3  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
0051A7  3  FE C6 C6 00  
0051AB  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
0051AF  3  C6 C6 FC 00  
0051B3  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
0051B7  3  C0 C6 7C 00  
0051BB  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
0051BF  3  C6 CC F8 00  
0051C3  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
0051C7  3  C0 C0 FE 00  
0051CB  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
0051CF  3  C0 C0 C0 00  
0051D3  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
0051D7  3  DE C6 7C 00  
0051DB  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
0051DF  3  C6 C6 C6 00  
0051E3  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
0051E7  3  18 18 7E 00  
0051EB  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
0051EF  3  C6 C6 7C 00  
0051F3  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
0051F7  3  D8 CC C6 00  
0051FB  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
0051FF  3  C0 C0 FE 00  
005203  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
005207  3  C6 C6 C6 00  
00520B  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
00520F  3  DE CE C6 00  
005213  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
005217  3  C6 C6 7C 00  
00521B  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
00521F  3  FC C0 C0 00  
005223  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
005227  3  F6 DE 7C 00  
00522B  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
00522F  3  FC CC C6 00  
005233  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
005237  3  06 C6 7C 00  
00523B  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
00523F  3  30 30 30 00  
005243  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
005247  3  C6 C6 7C 00  
00524B  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
00524F  3  C6 6C 38 00  
005253  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
005257  3  C6 FE 6C 00  
00525B  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
00525F  3  38 6C C6 00  
005263  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
005267  3  30 30 30 00  
00526B  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
00526F  3  30 60 FE 00  
005273  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
005277  3  18 18 1E 00  
00527B  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
00527F  3  30 18 0C 00  
005283  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
005287  3  30 30 F0 00  
00528B  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
00528F  3  30 30 30 00  
005293  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
005297  3  00 00 00 FF  
00529B  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
00529F  3  60 60 FE 00  
0052A3  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
0052A7  3  7C CC 7C 00  
0052AB  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
0052AF  3  66 66 7C 00  
0052B3  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
0052B7  3  60 60 3C 00  
0052BB  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
0052BF  3  CC CC 7C 00  
0052C3  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
0052C7  3  F8 C0 7C 00  
0052CB  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
0052CF  3  30 30 30 00  
0052D3  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
0052D7  3  CC 7C 0C 78  
0052DB  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
0052DF  3  CC CC CC 00  
0052E3  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
0052E7  3  30 30 78 00  
0052EB  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
0052EF  3  0C 0C 6C 38  
0052F3  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
0052F7  3  70 78 6C 00  
0052FB  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
0052FF  3  30 30 1C 00  
005303  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
005307  3  FC FC FC 00  
00530B  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
00530F  3  CC CC CC 00  
005313  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
005317  3  CC CC 78 00  
00531B  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
00531F  3  CC F8 C0 C0  
005323  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
005327  3  CC 7C 0C 0E  
00532B  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
00532F  3  60 60 60 00  
005333  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
005337  3  78 0C F8 00  
00533B  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
00533F  3  30 30 1C 00  
005343  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
005347  3  CC CC 78 00  
00534B  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
00534F  3  78 78 30 00  
005353  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
005357  3  FC FC 78 00  
00535B  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
00535F  3  30 78 CC 00  
005363  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
005367  3  CC 7C 0C 78  
00536B  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
00536F  3  30 60 FC 00  
005373  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
005377  3  18 18 1E 00  
00537B  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
00537F  3  18 18 18 00  
005383  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
005387  3  30 30 F0 00  
00538B  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
00538F  3  00 00 00 00  
005393  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
005397  3  E3 BB C6 7C  
00539B  3               
00539B  1               eind_asm:
00539B  2               ;------------------------------------------------------
00539B  2               ; z80.asm
00539B  2               ; spectrum stuff
00539B  2               ; adresses
00539B  2               
00539B  2               ;ws	 = $60
00539B  2               
00539B  2               ;z80_f	 = ws+$00
00539B  2               ;z80_a	 = ws+$01
00539B  2               ;z80_af	 = z80_f
00539B  2               
00539B  2               ;z80_c	 = ws+$02
00539B  2               ;z80_b	 = ws+$03
00539B  2               ;z80_bc	 = z80_c
00539B  2               
00539B  2               ;z80_e	 = ws+$04
00539B  2               ;z80_d	 = ws+$05
00539B  2               ;z80_de	 = z80_e
00539B  2               
00539B  2               ;z80_l	 = ws+$06
00539B  2               ;z80_h	 = ws+$07
00539B  2               ;z80_hl	 = z80_l
00539B  2               
00539B  2               ;z80_x    = ws+$08
00539B  2               ;z80_i    = ws+$09
00539B  2               ;z80_ix	 = z80_x
00539B  2               
00539B  2               ;z80_iy	 = ws+$0a
00539B  2               
00539B  2               ;z80_fp	 = ws+$0c
00539B  2               ;z80_ap	 = ws+$0d
00539B  2               
00539B  2               ;z80_cp	 = ws+$0e
00539B  2               ;z80_bp	 = ws+$0f
00539B  2               ;z80_bcp = z80_cp
00539B  2               
00539B  2               ;z80_ep	 = ws+$10
00539B  2               ;z80_dp	 = ws+$11
00539B  2               ;z80_dep = z80_ep
00539B  2               
00539B  2               ;z80_lp	 = ws+$12
00539B  2               ;z80_hp	 = ws+$13
00539B  2               ;z80_hlp = z80_lp
00539B  2               
00539B  2               ;z80_sp   = ws+$14
00539B  2               
00539B  2               ;z80_reg0 = ws+$16
00539B  2               ;z80_reg1 = ws+$17
00539B  2               ;z80_reg2 = ws+$18
00539B  2               ;z80_reg3 = ws+$19
00539B  2               
00539B  2               ;z80_r	 = ws+$1a
00539B  2               
00539B  2               ; Contains seperatly 1 bit set
00539B  2               
00539B  2               _bitmem0	= $f8
00539B  2               _bitmem1	= $f9
00539B  2               _bitmem2	= $fa
00539B  2               _bitmem3	= $fb
00539B  2               _bitmem4	= $fc
00539B  2               _bitmem5	= $fd
00539B  2               _bitmem6	= $fe
00539B  2               _bitmem7	= $ff
00539B  2               	
00539B  2               ; constants	
00539B  2               _bitvalue0	= $01	
00539B  2               _bitvalue1	= $02	
00539B  2               _bitvalue2	= $04	
00539B  2               _bitvalue3	= $08	
00539B  2               _bitvalue4	= $10	
00539B  2               _bitvalue5	= $20	
00539B  2               _bitvalue6	= $40	
00539B  2               _bitvalue7	= $80	
00539B  2               
00539B  2               _notbitvalue0	= $fe	
00539B  2               _notbitvalue1	= $fd	
00539B  2               _notbitvalue2	= $fb	
00539B  2               _notbitvalue3	= $f7	
00539B  2               _notbitvalue4	= $ef	
00539B  2               _notbitvalue5	= $df	
00539B  2               _notbitvalue6	= $bf	
00539B  2               _notbitvalue7	= $7f	
00539B  2               
00539B  2               
00539B  2               ;add_hl_bc:
00539B  2               ;		lda z80_l
00539B  2               ;		clc
00539B  2               ;		adc z80_c
00539B  2               ;		sta z80_l
00539B  2               ;		lda z80_h
00539B  2               ;		adc z80_b
00539B  2               ;		sta z80_h
00539B  2               ;		rts
00539B  2               ;		
00539B  2               ;add_ix_de:
00539B  2               ;		lda z80_ix
00539B  2               ;		clc
00539B  2               ;		adc z80_e
00539B  2               ;		sta z80_ix
00539B  2               ;		lda z80_ix+1
00539B  2               ;		adc z80_d
00539B  2               ;		sta z80_ix+1
00539B  2               ;		rts
00539B  2               ;		
00539B  2               ;add_iy_de:
00539B  2               ;		lda z80_iy
00539B  2               ;		clc
00539B  2               ;		adc z80_e
00539B  2               ;		sta z80_iy
00539B  2               ;		lda z80_iy+1
00539B  2               ;		adc z80_d
00539B  2               ;		sta z80_iy+1
00539B  2               ;		rts
00539B  2               ;		
00539B  2               ;add_hl_de:
00539B  2               ;		lda z80_l
00539B  2               ;		clc
00539B  2               ;		adc z80_e
00539B  2               ;		sta z80_l
00539B  2               ;		lda z80_h
00539B  2               ;		adc z80_d
00539B  2               ;		sta z80_h
00539B  2               ;		rts
00539B  2               ;
00539B  2               ;add_ix_bc:
00539B  2               ;		lda z80_ix
00539B  2               ;		clc
00539B  2               ;		adc z80_c
00539B  2               ;		sta z80_ix
00539B  2               ;		lda z80_ix+1
00539B  2               ;		adc z80_b
00539B  2               ;		sta z80_ix+1
00539B  2               ;		rts
00539B  2               ;		
00539B  2               ;add_iy_bc:
00539B  2               ;		lda z80_iy
00539B  2               ;		clc
00539B  2               ;		adc z80_c
00539B  2               ;		sta z80_iy
00539B  2               ;		lda z80_iy+1
00539B  2               ;		adc z80_b
00539B  2               ;		sta z80_iy+1
00539B  2               ;		rts
00539B  2               ;		
00539B  2               sbc_hl_de:
00539B  2  A5 66        		lda z80_l
00539D  2  E5 64        		sbc z80_e
00539F  2  85 66        		sta z80_l
0053A1  2  A5 67        		lda z80_h
0053A3  2  E5 65        		sbc z80_d
0053A5  2  85 67        		sta z80_h
0053A7  2  60           		rts
0053A8  2               
0053A8  2               ;sbc_hl_bc:
0053A8  2               ;		lda z80_l
0053A8  2               ;		sbc z80_c
0053A8  2               ;		sta z80_l
0053A8  2               ;		lda z80_h
0053A8  2               ;		sbc z80_b
0053A8  2               ;		sta z80_h
0053A8  2               ;		rts
0053A8  2               ;
0053A8  2               ;cmp_hl_bc:
0053A8  2               ;		lda z80_l
0053A8  2               ;		cmp z80_c
0053A8  2               ;		bne cmp_hl_bc_end
0053A8  2               ;		lda z80_h
0053A8  2               ;		cmp z80_b
0053A8  2               ;cmp_hl_bc_end:
0053A8  2               ;		rts
0053A8  2               ;		
0053A8  2               ;cmp_iy_ix:
0053A8  2               ;		lda z80_iy
0053A8  2               ;		cmp z80_ix
0053A8  2               ;		bne cmp_iy_ix_end
0053A8  2               ;		lda z80_iy+1
0053A8  2               ;		cmp z80_ix+1
0053A8  2               ;cmp_iy_ix_end:
0053A8  2               ;		rts
0053A8  2               ;		
0053A8  2               ;dec_hl:
0053A8  2               ;		lda z80_l
0053A8  2               ;		bne dec_hl_no_dec_h
0053A8  2               ;		dec z80_h
0053A8  2               ;dec_hl_no_dec_h:
0053A8  2               ;		dec z80_l
0053A8  2               ;		rts
0053A8  2               ;	
0053A8  2               ;dec_ix:
0053A8  2               ;		lda z80_ix
0053A8  2               ;		bne dec_ix_no_dec_h
0053A8  2               ;		dec z80_ix+1
0053A8  2               ;dec_ix_no_dec_h:
0053A8  2               ;		dec z80_ix
0053A8  2               ;		rts
0053A8  2               ;		
0053A8  2               ;dec_bc:	
0053A8  2               ;		lda z80_c
0053A8  2               ;		bne dec_bc_no_dec_b
0053A8  2               ;		dec z80_b
0053A8  2               ;dec_bc_no_dec_b:
0053A8  2               ;		dec z80_c
0053A8  2               ;		rts
0053A8  2               ;	
0053A8  2               ;dec_de:
0053A8  2               ;		lda z80_e
0053A8  2               ;		bne dec_de_no_dec_d
0053A8  2               ;		dec z80_d
0053A8  2               ;dec_de_no_dec_d:
0053A8  2               ;		dec z80_e
0053A8  2               ;		rts
0053A8  2               ;		
0053A8  2               ;ex_af_afs:
0053A8  2               ;	rts
0053A8  2               ;ex_de_hl:
0053A8  2               ;		lda z80_e
0053A8  2               ;		ldx z80_l
0053A8  2               ;		stx z80_e
0053A8  2               ;		sta z80_l
0053A8  2               ;		lda z80_d
0053A8  2               ;		ldx z80_h
0053A8  2               ;		stx z80_d
0053A8  2               ;		sta z80_h
0053A8  2               ;		rts
0053A8  2               ;
0053A8  2               exx:
0053A8  2  A5 62        		lda z80_c
0053AA  2  A4 6E        		ldy z80_cp
0053AC  2  84 62        		sty z80_c
0053AE  2  85 6E        		sta z80_cp
0053B0  2  A5 63        		lda z80_b
0053B2  2  A4 6F        		ldy z80_bp
0053B4  2  84 63        		sty z80_b
0053B6  2  85 6F        		sta z80_bp
0053B8  2  A5 64        		lda z80_e
0053BA  2  A4 70        		ldy z80_ep
0053BC  2  84 64        		sty z80_e
0053BE  2  85 70        		sta z80_ep
0053C0  2  A5 65        		lda z80_d
0053C2  2  A4 71        		ldy z80_dp
0053C4  2  84 65        		sty z80_d
0053C6  2  85 71        		sta z80_dp		
0053C8  2  A5 80        		lda scraddr
0053CA  2  A4 72        		ldy z80_lp
0053CC  2  84 80        		sty scraddr
0053CE  2  85 72        		sta z80_lp
0053D0  2  A5 81        		lda scraddr+1
0053D2  2  A4 73        		ldy z80_hp
0053D4  2  84 81        		sty scraddr+1
0053D6  2  85 73        		sta z80_hp
0053D8  2  60           		rts
0053D9  2               		
0053D9  2               ;ex_sp_hl:
0053D9  2               ;		tsx
0053D9  2               ;		lda $0103,x
0053D9  2               ;		ldy z80_h
0053D9  2               ;		sta z80_h
0053D9  2               ;		tya
0053D9  2               ;		sta $0103,x
0053D9  2               ;		lda $0104,x
0053D9  2               ;		ldy z80_l
0053D9  2               ;		sta z80_l
0053D9  2               ;		tya
0053D9  2               ;		sta $104,x
0053D9  2               ;		rts
0053D9  2               ;		
0053D9  2               ;ldi:
0053D9  2               ;	rts
0053D9  2               ;ldir:
0053D9  2               ;		ldy #$00
0053D9  2               ;		ldx z80_b
0053D9  2               ;		beq ldir_last_page
0053D9  2               ;ldir_loop:		
0053D9  2               ;		lda (z80_hl),y
0053D9  2               ;		sta (z80_de),y
0053D9  2               ;		iny
0053D9  2               ;		bne ldir_loop
0053D9  2               ;		inc z80_h
0053D9  2               ;		inc z80_d
0053D9  2               ;		dex
0053D9  2               ;		bne ldir_loop
0053D9  2               ;ldir_last_page:
0053D9  2               ;		lda z80_c
0053D9  2               ;		beq ldir_end
0053D9  2               ;ldir_last_page_loop:		
0053D9  2               ;		lda (z80_hl),y
0053D9  2               ;		sta (z80_de),y
0053D9  2               ;		iny
0053D9  2               ;		cpy z80_c
0053D9  2               ;		bne ldir_last_page_loop
0053D9  2               ;ldir_end:		
0053D9  2               ;		stx z80_c
0053D9  2               ;		stx z80_b
0053D9  2               ;		tya
0053D9  2               ;		clc
0053D9  2               ;		adc z80_l
0053D9  2               ;		sta z80_l
0053D9  2               ;		bcc *+4
0053D9  2               ;		inc z80_h
0053D9  2               ;		tya
0053D9  2               ;		clc
0053D9  2               ;		adc z80_e
0053D9  2               ;		sta z80_e
0053D9  2               ;		bcc *+4
0053D9  2               ;		inc z80_d
0053D9  2               ;		rts
0053D9  2               ;		
0053D9  2               ;lddr:		ldy #$00
0053D9  2               ;lddr_loop:
0053D9  2               ;		lda (z80_hl),y
0053D9  2               ;		sta (z80_de),y
0053D9  2               ;		jsr dec_hl
0053D9  2               ;		jsr dec_de
0053D9  2               ;		jsr dec_bc
0053D9  2               ;		lda z80_b
0053D9  2               ;		ora z80_c
0053D9  2               ;		bne lddr_loop
0053D9  2               ;		rts
0053D9  2               ;ei:
0053D9  2               ;		rts
0053D9  2               ;di:
0053D9  2               ;		rts
0053D9  2               		
0053D9  2               ;-------------------------------------------------------------
0053D9  2               ; Set bits in bitmem
0053D9  2               ;-------------------------------------------------------------
0053D9  2               	
0053D9  2               z80_init:
0053D9  2  A2 00        	ldx #$00
0053DB  2  A9 01        	lda #$01
0053DD  2               z80_init_loop:		
0053DD  2  95 F8        	sta _bitmem0,x
0053DF  2  E8           	inx
0053E0  2  0A           	asl a
0053E1  2  D0 FA        	bne z80_init_loop
0053E3  2  60           	rts
0053E4  2               
0053E4  2               push_af:
0053E4  2               push_bc:
0053E4  2               push_de:
0053E4  2               push_hl:
0053E4  2               
0053E4  2               pop_af:
0053E4  2               pop_bc:
0053E4  2               pop_de:
0053E4  2               pop_ix:
0053E4  2               pop_hl:
0053E4  2               
0053E4  2               add_hl_hl:
0053E4  2               
0053E4  2               inc_bc:
0053E4  2               inc_de:
0053E4  2               inc_hl:
0053E4  2               inc_ix:
0053E4  2               inc_sp:
0053E4  2               
0053E4  2               cpir:
0053E4  2               
0053E4  2               ex_af_af:
0053E4  2               ;	rts
0053E4  2               
0053E4  1               
