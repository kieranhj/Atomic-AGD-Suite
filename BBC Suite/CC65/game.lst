ca65 V2.9.2 - (C) Copyright 1998-2000 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ; BBC Micro version by Kieran Connell 2018
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $0e00	; assembly address _BEEB
000000r 1               	.DEFINE load_address $1100	; load address _BEEB
000000r 1               	.DEFINE header   0		; Header Wouter Ras emulator
000000r 1               	.DEFINE filenaam "AGD"
000000r 1               
000000r 1               .org asm_code-22*header
000E00  1               
000E00  1               .IF header
000E00  1               ;********************************************************************
000E00  1               ; ATM Header for Atom emulator Wouter Ras
000E00  1               
000E00  1               name_start:
000E00  1               	.byte filenaam			; Filename
000E00  1               name_end:
000E00  1               	.repeat 16-name_end+name_start	; Fill with 0 till 16 chars
000E00  1               	  .byte $0
000E00  1               	.endrep
000E00  1               
000E00  1               	.word asm_code			; 2 bytes startaddress
000E00  1               	.word exec			; 2 bytes linkaddress
000E00  1               	.word eind_asm-start_asm	; 2 bytes filelength
000E00  1               
000E00  1               ;********************************************************************
000E00  1               .ENDIF
000E00  1               
000E00  1               start_asm:
000E00  1               	.include "z80-zp.inc"
000E00  1               
000E00  2               .segment "ZEROPAGE"
000E00  2               
000E00  2               ws	 = $60
000E00  2               
000E00  2               z80_f	 = ws+$00
000E00  2               z80_a	 = ws+$01
000E00  2               z80_af	 = z80_f
000E00  2               
000E00  2               z80_c	 = ws+$02
000E00  2               z80_b	 = ws+$03
000E00  2               z80_bc	 = z80_c
000E00  2               
000E00  2               z80_e	 = ws+$04
000E00  2               z80_d	 = ws+$05
000E00  2               z80_de	 = z80_e
000E00  2               
000E00  2               z80_l	 = ws+$06
000E00  2               z80_h	 = ws+$07
000E00  2               z80_hl	 = z80_l
000E00  2               
000E00  2               z80_x    = ws+$08
000E00  2               z80_i    = ws+$09
000E00  2               z80_ix	 = z80_x
000E00  2               
000E00  2               z80_iy	 = ws+$0a
000E00  2               
000E00  2               z80_fp	 = ws+$0c
000E00  2               z80_ap	 = ws+$0d
000E00  2               
000E00  2               z80_cp	 = ws+$0e
000E00  2               z80_bp	 = ws+$0f
000E00  2               z80_bcp	 = z80_cp
000E00  2               
000E00  2               z80_ep	 = ws+$10
000E00  2               z80_dp	 = ws+$11
000E00  2               z80_dep	 = z80_ep
000E00  2               
000E00  2               z80_lp	 = ws+$12
000E00  2               z80_hp	 = ws+$13
000E00  2               z80_hlp	 = z80_lp
000E00  2               
000E00  2               z80_sp   = ws+$14
000E00  2               
000E00  2               z80_reg0 = ws+$16
000E00  2               z80_reg1 = ws+$17
000E00  2               z80_reg2 = ws+$18
000E00  2               z80_reg3 = ws+$19
000E00  2               
000E00  2               z80_r	 = ws+$1a
000E00  2               
000E00  2               
000E00  1               .segment "CODE"
000E00  1               
000E00  1  4C 23 7A     	jmp relocate + load_address - asm_code
000E03  1               
000E03  1               exec_game:
000E03  1               	.include "game.inc"
000E03  1               	.include "z80.asm"
000E03  2               .include "vintik.inc" 
000E03  2               
000E03  3               ; Game engine code --------------------------------------------------------------
000E03  3               
000E03  3               ; Arcade Game Designer.
000E03  3               ; (C) 2008 Jonathan Cauldwell.
000E03  3               ; ZX Spectrum Next Engine v0.1.
000E03  3               
000E03  3               ; Global definitions ------------------------------------------------------------
000E03  3               
000E03  3               	FONT = font		; Font address
000E03  3               
000E03  3               ; Block characteristics.
000E03  3               
000E03  3               	PLATFM = 1		; platform.
000E03  3               	WALL = PLATFM + 1	; solid wall.
000E03  3               	LADDER = WALL + 1	; ladder.
000E03  3               	FODDER = LADDER + 1	; fodder block.
000E03  3               	DEADLY = FODDER + 1	; deadly block.
000E03  3               	CUSTOM = DEADLY + 1	; custom block.
000E03  3               	NUMTYP = CUSTOM + 1	; number of types.
000E03  3               
000E03  3               ; Sprites.
000E03  3               
000E03  3               	NUMSPR = 12		; number of sprites.
000E03  3               	TABSIZ = 17		; size of each entry.
000E03  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000E03  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
000E03  3               
000E03  3               	var_Type = 0	; sprite type
000E03  3               	var_Image = 1	; sprite time number
000E03  3               	var_Frame = 2	; sprite frame
000E03  3               	var_Y = 3		; sprite y coordinate
000E03  3               	var_X = 4		; sprite X coordinate
000E03  3               
000E03  3               	var_newType = 5	; sprite new type
000E03  3               	var_newImage = 6	; sprite new image number
000E03  3               	var_newFrame = 7	; sprite new frame
000E03  3               	var_newY = 8		; sprite new y coordinate
000E03  3               	var_newX = 9		; sprite new x coordinate
000E03  3               	
000E03  3               	var_Direction = 10	; sprite direction
000E03  3               	var_Param1 = 11		; sprite parameter 1
000E03  3               	var_Param2 = 12		; sprite parameter 2
000E03  3               
000E03  3               	var_jumpLo = 13		; sprite jump ptr low
000E03  3               	var_jumpHi = 14		; sprite jump ptr high
000E03  3               	var_dataLo = 15		; sprite data ptr low
000E03  3               	var_dataHi = 16		; sprite data ptr high
000E03  3               
000E03  3               ; Particle engine.
000E03  3               
000E03  3               	NUMSHR = 55		; pieces of shrapnel.
000E03  3               	SHRSIZ = 6		; bytes per particle.
000E03  3               
000E03  3               ; Local vars
000E03  3               
000E03  3               	scraddr	= $80
000E03  3               	fntaddr	= $82
000E03  3               	tileaddr= $84
000E03  3               	bufaddr	= $86
000E03  3               	tmp     = $88
000E03  3               
000E03  3               	scr_l	= $90
000E03  3               	scr_r	= $92
000E03  3               	scr_txt	= $94
000E03  3               
000E03  3               ; System constants
000E03  3               
000E03  3               	ScreenSize  = $1800	; Startaddress video RAM _BEEB
000E03  3               	ScreenAddr 	= $8000 - ScreenSize	; Screen size bytes _BEEB
000E03  3               	ScreenRowBytes = 256				; 40 columns
000E03  3               
000E03  3               	SpriteMaxY	= 185	; used for clipping bottom of screen
000E03  3               
000E03  3               ;	ScrSelAddr  = $b000	; Screen selection address
000E03  3               ;	KeyRowAddr  = $b000	; PIA key matrix row
000E03  3               ;	KeyColAddr  = $b001	; PIA key matrix column
000E03  3               ;	SpeakerBit  = $b002	; Speaker bit
000E03  3               ;	CmdReg      = $b400	; Command register AtoMMC
000E03  3               ;	DatReg      = $b401	; Data register AtoMMC 
000E03  3               ;	Timer2_Low  = $b808	; Timer 2 low byte
000E03  3               ;	Timer2_High = $b809	; Timer 2 high byte
000E03  3               
000E03  3               ; System calls
000E03  3               
000E03  3               ;	SCRSYNC	 = $fe66	; wait for next CRT field flyback 60 Hz
000E03  3               ;	SCRSYNC1 = $fe6b	; wait for CRT field flyback 60 Hz
000E03  3               ;	OSRDCH   = $fe94	; get key subroutine
000E03  3               ;   READKEY  = $fe71	; scan key matrix subroutine
000E03  3               
000E03  3               ; _BEEB MOS calls
000E03  3               
000E03  3               	OSBYTE	 = $fff4
000E03  3               	OSFILE	 = $ffdd
000E03  3               	OSWRCH	 = $ffee
000E03  3               	OSASCI	 = $ffe3
000E03  3               	OSWORD	 = $fff1
000E03  3               	OSFIND	 = $ffce
000E03  3               	OSGBPB	 = $ffd1
000E03  3               	OSARGS	 = $ffda
000E03  3               
000E03  3               	PAL_black = 0 ^ 7
000E03  3               	PAL_white = 7 ^ 7
000E03  3               
000E03  3               ; Conditional compilation flags
000E03  3               ; Flags are set in commandline assembly
000E03  3               
000E03  3               ;	mflag = 0 		; MENU + INV
000E03  3               ;	pflag = 0		; Particle engine
000E03  3               ;	sflag = 0		; scrollytext
000E03  3               ;	fflag = 1		; Fontflag
000E03  3               
000E03  3               .if iflag
000E03  3               	TxtInvert   = $ff	; Invert byte for character printing
000E03  3               	ScrFillByte = $ff	; Screen fill byte for CLS
000E03  3               .else
000E03  3               	TxtInvert   = $00	; Invert byte for character printing
000E03  3               	ScrFillByte = $00	; Screen fill byte for CLS
000E03  3               .endif
000E03  3               	ScrMode     = 4		; Screen mode:	_BEEB (320x256x2)
000E03  3               
000E03  3               ; Workspace
000E03  3               
000E03  3               MAP 	= $300				; properties map buffer (3x256 bytes)
000E03  3               SCADTB_lb = MAP + $300
000E03  3               SCADTB_hb = SCADTB_lb + $100
000E03  3               
000E03  3               .if pflag
000E03  3               SHRAPN 	= $B00 - (NUMSHR * SHRSIZ)	; shrapnel table (55x6 bytes)
000E03  3               .endif
000E03  3               
000E03  3               ;===============================================================
000E03  3               ; Game starts here
000E03  3               ;===============================================================
000E03  3               
000E03  3               ;--------------------------------------------------------------
000E03  3               ; If a font is required...
000E03  3               ;--------------------------------------------------------------
000E03  3               
000E03  3  A9 DA        	lda #<(FONT-256)	; address of font.
000E05  3  8D 52 0E     	sta FontPtr
000E08  3  A9 72        	lda #>(FONT-256)
000E0A  3  8D 53 0E     	sta FontPtr+1
000E0D  3               
000E0D  3               :
000E0D  3  20 C8 0F     	jsr game	 	; start the game.
000E10  3               
000E10  3  A2 FF        	ldx #$ff
000E12  3  A0 7F        	ldy #$7f
000E14  3  A9 81        	lda #$81
000E16  3  20 F4 FF     	jsr OSBYTE
000E19  3               
000E19  3  4C 0D 0E     	jmp :-
000E1C  3               
000E1C  3  60           	rts				; exit (to BASIC?)
000E1D  3               	
000E1D  3  00           contrl:	.byte 0			; control, 0 = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000E1E  3  00           joyval:	.byte 0			; joystick reading.
000E1F  3  00           frmno:	.byte 0			; selected frame.
000E20  3               
000E20  3               ; Don't change the order of these four.  
000E20  3               ; Menu routine relies on winlft following wintop.
000E20  3               
000E20  3  01           wintop:	.byte WINDOWTOP		; top of window.
000E21  3  00           winlft:	.byte WINDOWLFT		; left edge.
000E22  3  16           winhgt:	.byte WINDOWHGT		; window height.
000E23  3  20           winwid:	.byte WINDOWWID		; window width.
000E24  3  01           numob:	.byte NUMOBJ		; number of objects in game.
000E25  3               
000E25  3               ; Variables start here.
000E25  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000E25  3               
000E25  3  08           wntopx:	.byte (8 * WINDOWTOP)
000E26  3  00           wnlftx:	.byte (8 * WINDOWLFT)
000E27  3  A8           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
000E28  3  EE           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
000E29  3               
000E29  3  00           scno:	.byte 0			; present screen number.
000E2A  3  03           numlif:	.byte 3			; number of lives.
000E2B  3               
000E2B  3  00           vara:	.byte 0			; general-purpose variable.
000E2C  3  00           varb:	.byte 0			; general-purpose variable.
000E2D  3  00           varc:	.byte 0			; general-purpose variable.
000E2E  3  00           vard:	.byte 0			; general-purpose variable.
000E2F  3  00           vare:	.byte 0			; general-purpose variable.
000E30  3  00           varf:	.byte 0			; general-purpose variable.
000E31  3  00           varg:	.byte 0			; general-purpose variable.
000E32  3  00           varh:	.byte 0			; general-purpose variable.
000E33  3  00           vari:	.byte 0			; general-purpose variable.
000E34  3  00           varj:	.byte 0			; general-purpose variable.
000E35  3  00           vark:	.byte 0			; general-purpose variable.
000E36  3  00           varl:	.byte 0			; general-purpose variable.
000E37  3  00           varm:	.byte 0			; general-purpose variable.
000E38  3  00           varn:	.byte 0			; general-purpose variable.
000E39  3  00           varo:	.byte 0			; general-purpose variable.
000E3A  3  00           varp:	.byte 0			; general-purpose variable.
000E3B  3  00           varq:	.byte 0			; general-purpose variable.
000E3C  3  00           varr:	.byte 0			; general-purpose variable.
000E3D  3  00           vars:	.byte 0			; general-purpose variable.
000E3E  3  00           vart:	.byte 0			; general-purpose variable.
000E3F  3  00           varu:	.byte 0			; general-purpose variable.
000E40  3  00           varv:	.byte 0			; general-purpose variable.
000E41  3  00           varw:	.byte 0			; general-purpose variable.
000E42  3  00           varz:	.byte 0			; general-purpose variable.
000E43  3               
000E43  3  00           charx:	.byte 0			; cursor x position.
000E44  3  00           chary:	.byte 0			; cursor y position.
000E45  3               
000E45  3  00           clock:	.byte 0			; last clock reading.
000E46  3  FF           varrnd:	.byte 255		; last random number.
000E47  3  FE           varobj:	.byte 254		; last object number.
000E48  3  FF           varopt:	.byte 255		; last option chosen from menu.
000E49  3  FF           varblk:	.byte 255		; block type.
000E4A  3  00           nexlev:	.byte 0			; next level flag.
000E4B  3  00           restfl:	.byte 0			; restart screen flag.
000E4C  3  00           deadf:	.byte 0			; dead flag.
000E4D  3  00           gamwon:	.byte 0			; game won flag.
000E4E  3  00           dispx:	.byte 0			; cursor x position.
000E4F  3  00           dispy:	.byte 0			; cursor y position.
000E50  3               
000E50  3               ; Make sure pointers are arranged in the same order as the data itself.
000E50  3               
000E50  3  A2 55        frmptr:	.word frmlst         ; sprite frames.
000E52  3               
000E52  3               ;----------------------------------------------------
000E52  3               ; Missing vars 
000E52  3               ;----------------------------------------------------
000E52  3               
000E52  3  00 00        FontPtr:	.byte 0,0
000E54  3               
000E54  3  00           loopa:		.byte 0
000E55  3  00           loopb:		.byte 0
000E56  3  00           loopc:		.byte 0
000E57  3               
000E57  3               ; Assorted game routines which can go in contended memory.
000E57  3               
000E57  3               ;--------------------------------------------------------------
000E57  3               ; Modify for inventory.
000E57  3               ; called by the INV command
000E57  3               ;
000E57  3               ; Input:
000E57  3               ;  X   = message nr with objects seperated with ,
000E57  3               ;
000E57  3               ; Output:
000E57  3               ;  OPT = selected line nr of INV menu
000E57  3               ;--------------------------------------------------------------
000E57  3               
000E57  3               .if mflag
000E57  3               TmpAddr:	.byte 0,0
000E57  3               
000E57  3               minve:
000E57  3               	lda #<(invdis)		; routine address.
000E57  3               	sta mod0+1		; set up menu routine.
000E57  3               	sta mod2+1		; set up count routine.
000E57  3               	lda #>(invdis)
000E57  3               	sta mod0+2
000E57  3               	sta mod2+2
000E57  3               	lda #<(fopt)		; find option from available objects.
000E57  3               	sta mod1+1		; set up routine.
000E57  3               	lda #>(fopt)
000E57  3               	sta mod1+1+1
000E57  3               	jmp dbox		; do menu routine.
000E57  3               
000E57  3               ;--------------------------------------------------------------
000E57  3               ; Modify for menu.
000E57  3               ; called by the MENU command
000E57  3               ;
000E57  3               ; Input:
000E57  3               ;  X   = message nr with menu items seperated with ,
000E57  3               ;
000E57  3               ; Output:
000E57  3               ;  OPT = selected line nr of MENU menu
000E57  3               ;--------------------------------------------------------------
000E57  3               
000E57  3               mmenu:
000E57  3               	lda #<(always)		; routine address.
000E57  3               	sta mod0+1		; set up routine.
000E57  3               	sta mod2+1		; set up count routine.
000E57  3               	lda #>(always)
000E57  3               	sta mod0+2
000E57  3               	sta mod2+2
000E57  3               
000E57  3               	lda #<(fstd)		; standard option selection.
000E57  3               	sta mod1+1		; set up routine.
000E57  3               	lda #>(fstd)
000E57  3               	sta mod1+2
000E57  3               
000E57  3               ; Drop through into box routine.
000E57  3               
000E57  3               ;--------------------------------------------------------------
000E57  3               ; Work out size of box for message or menu.
000E57  3               ;--------------------------------------------------------------
000E57  3               
000E57  3               dbox:
000E57  3               	lda #<(msgdat)		; pointer to messages.
000E57  3               	sta z80_l
000E57  3               	lda #>(msgdat)
000E57  3               	sta z80_h
000E57  3               	
000E57  3               	jsr getwrd		; get message number.
000E57  3               
000E57  3               	lda z80_h		; store pointer to message.
000E57  3               	sta TmpAddr
000E57  3               	lda z80_l
000E57  3               	sta TmpAddr+1
000E57  3               
000E57  3               	lda #1			; height.
000E57  3               	sta z80_d
000E57  3               	lda #0			; start at object zero.
000E57  3               	sta combyt		; store number of object in combyt.
000E57  3               	sta z80_e		; maximum width.
000E57  3               dbox5:
000E57  3               	lda #0			; this line"s width.
000E57  3               	sta z80_b
000E57  3               mod2:
000E57  3               	jsr always		; item in player"s possession?
000E57  3               	cmp #255
000E57  3               	bne dbox6		; not in inventory, skip this line.
000E57  3               	inc z80_d		; add to tally.
000E57  3               dbox6:
000E57  3               	ldy #0			; get character.
000E57  3               	lda (z80_hl),y
000E57  3               	sta z80_a
000E57  3               	inc z80_l		; next character.
000E57  3               	bne :+
000E57  3               	inc z80_h
000E57  3               :
000E57  3               	lda z80_a		; reached end of line?
000E57  3               	cmp #','
000E57  3               	beq dbox3		; yes.
000E57  3               	cmp #13
000E57  3               	beq dbox3		; yes.
000E57  3               	inc z80_b		; add to this line"s width.
000E57  3               	lda z80_a
000E57  3               	bmi dbox4		; end of message? yes, end count.
000E57  3               	jmp dbox6		; repeat until we find the end.
000E57  3               dbox3:
000E57  3               	lda z80_e		; maximum line width.
000E57  3               	cmp z80_b		; have we exceeded longest so far?
000E57  3               	bpl dbox5		; no, carry on looking.
000E57  3               	lda z80_b		; make this the widest so far.
000E57  3               	sta z80_e
000E57  3               	jmp dbox5		; keep looking.
000E57  3               dbox4:
000E57  3               	lda z80_e		; maximum line width.
000E57  3               	cmp z80_b		; have we exceeded longest so far?
000E57  3               	bpl dbox8		; no, carry on looking.
000E57  3               	lda z80_b		; final line is the longest so far.
000E57  3               	sta z80_e
000E57  3               dbox8:
000E57  3               	dec z80_d		; decrement items found.
000E57  3               	bne :+			; total was zero.
000E57  3               	jmp dbox15		
000E57  3               :
000E57  3               	lda z80_e		; longest line.
000E57  3               	bne :+			; was it zero?
000E57  3               	jmp dbox15		; total was zero.
000E57  3               :
000E57  3               	sta bwid		; set up size.
000E57  3               	lda z80_d
000E57  3               	sta blen
000E57  3               
000E57  3               ;--------------------------------------------------------------
000E57  3               ; That's set up our box size.
000E57  3               ;--------------------------------------------------------------
000E57  3               
000E57  3               	lda winhgt		; window height in characters.
000E57  3               	sec
000E57  3               	sbc z80_d		; subtract height of box.
000E57  3               	lsr a			; divide by 2.
000E57  3               	clc
000E57  3               	adc wintop		; add top edge of window.
000E57  3               	sta btop		; set up box top.
000E57  3               
000E57  3               	lda winwid		; window width in characters.
000E57  3               	sec	
000E57  3               	sbc z80_e		; subtract box width.
000E57  3               	lsr a			; divide by 2.
000E57  3               	clc
000E57  3               	adc winlft		; add left edge of window.
000E57  3               	sta blft		; box left.
000E57  3               
000E57  3               	lda FontPtr		; font.
000E57  3               	sta grbase		; set up for text display.
000E57  3               	lda FontPtr+1
000E57  3               	sta grbase+1
000E57  3               
000E57  3               	lda TmpAddr+1		; restore message pointer.
000E57  3               	sta z80_l
000E57  3               	lda TmpAddr
000E57  3               	sta z80_h
000E57  3               
000E57  3               	lda btop		; box top.
000E57  3               	sta dispy		; set display coordinate.
000E57  3               	lda #0			; start at object zero.
000E57  3               	sta combyt		; store number of object in combyt.
000E57  3               dbox2:
000E57  3               	lda combyt		; get object number.
000E57  3               	sta z80_a
000E57  3               mod0:
000E57  3               	jsr always		; check inventory for display.
000E57  3               	cmp #255
000E57  3               	beq :+			
000E57  3               	jmp dbox13		; not in inventory, skip this line.
000E57  3               :
000E57  3               	lda blft		; box left.
000E57  3               	sta dispx		; set left display position.
000E57  3               	lda bwid		; box width.
000E57  3               	sta z80_b		; store width.
000E57  3               dbox0:
000E57  3               	ldy #0			; get character.
000E57  3               	lda (z80_hl),y
000E57  3               	cmp #','		; end of line?
000E57  3               	beq dbox1		; yes, next one.
000E57  3               	cmp #13			; end of line?
000E57  3               	beq dbox1		; yes, next one.
000E57  3               
000E57  3               	dec z80_b		; one less to display.
000E57  3               	and #127		; remove terminator.
000E57  3               
000E57  3               	jsr pchr		; display on screen.
000E57  3               
000E57  3               	ldy #0
000E57  3               	lda (z80_hl),y		; get character.
000E57  3               	sta z80_a
000E57  3               	inc z80_l		; next character.
000E57  3               	bne :+
000E57  3               	inc z80_h
000E57  3               :
000E57  3               	lda z80_a
000E57  3               	cmp #128		; end of message?
000E57  3               	bmi :+
000E57  3               	jmp dbox7		; yes, job done.
000E57  3               :
000E57  3               	lda z80_b		; chars remaining.
000E57  3               	beq :+			; are any left?
000E57  3               	jmp dbox0		; yes, continue.
000E57  3               :
000E57  3               ;---------------------------------------------------
000E57  3               ; Reached limit of characters per line.
000E57  3               ;---------------------------------------------------
000E57  3               
000E57  3               dbox9:
000E57  3               	ldy #0
000E57  3               	lda (z80_hl),y		; get character.
000E57  3               	inc z80_l		; next one.
000E57  3               	bne :+
000E57  3               	inc z80_h
000E57  3               :
000E57  3               	cmp #','		; another line?
000E57  3               	beq dbox10		; yes, do next line.
000E57  3               	cmp #13			; another line?
000E57  3               	beq dbox10		; yes, do next line.
000E57  3               	cmp #128		; end of message?
000E57  3               	bcs :+
000E57  3               	jmp dbox11		; yes, finish message.
000E57  3               :
000E57  3               	jmp dbox9
000E57  3               
000E57  3               ;---------------------------------------------------
000E57  3               ; Fill box to end of line.
000E57  3               ;---------------------------------------------------
000E57  3               
000E57  3               dboxf:
000E57  3               	lda #32			; space character.
000E57  3               	jsr pchr		; display character.
000E57  3               	dec z80_b
000E57  3               	beq :+
000E57  3               	jmp dboxf		; repeat for remaining chars on line.
000E57  3               :
000E57  3               	rts
000E57  3               dbox1:
000E57  3               	inc z80_l		; skip character.
000E57  3               	bne :+
000E57  3               	inc z80_h
000E57  3               :
000E57  3               	jsr dboxf		; fill box out to right side.
000E57  3               dbox10:
000E57  3               	inc dispy		; y coordinate down a line next position.
000E57  3               	jmp dbox2		; next line.
000E57  3               dbox7:
000E57  3               	lda z80_b		; chars remaining.
000E57  3               	bne :+			; are any left?
000E57  3               	jmp dbox11		; no, nothing to draw.
000E57  3               :
000E57  3               	jsr dboxf		; fill message to line.
000E57  3               
000E57  3               ;------------------------------------------------------
000E57  3               ; Drawn the box menu, now select option.
000E57  3               ;------------------------------------------------------
000E57  3               
000E57  3               dbox11:
000E57  3               	lda btop		; box top.
000E57  3               	sta dispy		; set bar position.
000E57  3               dbox14:
000E57  3               	jsr joykey		; get controls.
000E57  3               	cmp #$7f		; anything pressed?
000E57  3               	bne dbox14		; yes, debounce it.
000E57  3               	jsr dbar		; draw bar.
000E57  3               dbox12:
000E57  3               	jsr joykey		; get controls.
000E57  3               	cmp #$7f		; anything pressed?
000E57  3               	beq dbox12		; no, nothing.
000E57  3               	and #16			; fire button pressed?
000E57  3               	bne :+
000E57  3               mod1:
000E57  3               	jmp fstd		; yes, job done.
000E57  3               :
000E57  3               	jsr dbar		; delete bar.
000E57  3               
000E57  3               	lda joyval		; joystick reading.
000E57  3               	and #8			; going up?
000E57  3               	beq dboxu		; yes, go up.
000E57  3               
000E57  3               	ldx dispy		; vertical position of bar.
000E57  3               	inx			; look down.
000E57  3               	txa
000E57  3               	sec
000E57  3               	sbc btop		; find distance from top.
000E57  3               	cmp blen		; top of box.
000E57  3               	bne :+
000E57  3               	jmp dbox14		; yes, go no further.
000E57  3               :
000E57  3               	inc dispy		; move bar.
000E57  3               	jmp dbox14		; continue.
000E57  3               dboxu:
000E57  3               	lda dispy		; vertical position of bar.
000E57  3               	cmp btop		; are we at the top?
000E57  3               	bne :+
000E57  3               	jmp dbox14		; yes, go no further.
000E57  3               :
000E57  3               	dec dispy		; move bar.
000E57  3               	jmp dbox14		; continue.
000E57  3               fstd:
000E57  3               	lda dispy		; bar position.
000E57  3               	sec
000E57  3               	sbc btop		; find selected option.
000E57  3               	sta varopt		; store the option.
000E57  3               	jmp redraw		; redraw the screen.
000E57  3               
000E57  3               ;------------------------------------------------------
000E57  3               ; Option not available.  Skip this line.
000E57  3               ;------------------------------------------------------
000E57  3               
000E57  3               dbox13:
000E57  3               	ldy #0
000E57  3               	lda (z80_hl),y		; get character.
000E57  3               	inc z80_l		; next one.
000E57  3               	bne :+
000E57  3               	inc z80_h
000E57  3               :
000E57  3               	cmp #','		; another line?
000E57  3               	bne :+
000E57  3               	jmp dbox2		; yes, do next line.
000E57  3               :
000E57  3               	cmp #13			; another line?
000E57  3               	bne :+
000E57  3               	jmp dbox2		; yes, do next line.
000E57  3               :
000E57  3               
000E57  3               	bpl :+			; end of message?
000E57  3               	jmp dbox11		; yes, finish message.
000E57  3               :
000E57  3               	jmp dbox13
000E57  3               dbox15:
000E57  3               	lda TmpAddr		; pop message pointer from the stack.
000E57  3               	sta z80_h
000E57  3               	lda TmpAddr+1
000E57  3               	sta z80_l
000E57  3               	rts
000E57  3               
000E57  3               ;------------------------------------------------------
000E57  3               ; Invert bar
000E57  3               ;------------------------------------------------------
000E57  3               
000E57  3               dbar:
000E57  3               	lda blft		; box left.
000E57  3               	sta dispx		; set display coordinate.
000E57  3               	jsr gprad		; get printing address.
000E57  3               
000E57  3               	lda bwid		; box width.
000E57  3               	sta z80_c		; loop counter in c.
000E57  3               	lda z80_h		
000E57  3               	sta z80_d		; store screen address high byte.
000E57  3               dbar1:
000E57  3               	ldx #7			; pixel height in b.
000E57  3               dbar0:
000E57  3               	ldy scrtab,x
000E57  3               	lda (scraddr),y		; get screen byte.
000E57  3               	eor #255		; reverse all bits.
000E57  3               	sta (scraddr),y		; write back to screen.
000E57  3               	dex			; next line down.
000E57  3               	bpl dbar0		; draw rest of character.
000E57  3               
000E57  3               	clc
000E57  3               	lda scraddr		; one char right.
000E57  3               	adc #8
000E57  3               	sta scraddr
000E57  3               	bcc :+
000E57  3               	inc scraddr+1
000E57  3               :
000E57  3               
000E57  3               	dec z80_c		; decrement character counter.
000E57  3               	beq :+
000E57  3               	jmp dbar1		; repeat for whole line.
000E57  3               :
000E57  3               	rts
000E57  3               
000E57  3               ;------------------------------------------------------
000E57  3               ; Point to object
000E57  3               ;
000E57  3               ; Input:
000E57  3               ;  -
000E57  3               ;
000E57  3               ; Output:
000E57  3               ;  A = object number, A=255 if already in possession
000E57  3               ;------------------------------------------------------
000E57  3               
000E57  3               invdis:
000E57  3               	lda z80_l		; store message text pointer.
000E57  3               	pha
000E57  3               	lda z80_h
000E57  3               	pha
000E57  3               	lda combyt		; object number.
000E57  3               	inc combyt		; ready for next one.
000E57  3               	jsr gotob		; check if we have object.
000E57  3               	tay
000E57  3               	pla
000E57  3               	sta z80_h
000E57  3               	pla
000E57  3               	sta z80_l
000E57  3               	tya
000E57  3               	rts
000E57  3               
000E57  3               ;------------------------------------------------------
000E57  3               ; Find option selected.
000E57  3               ;
000E57  3               ; Input:
000E57  3               ;  -
000E57  3               ;
000E57  3               ; Output:
000E57  3               ;  OPT = selected object
000E57  3               ;------------------------------------------------------
000E57  3               
000E57  3               fopt:
000E57  3               	lda dispy
000E57  3               	sec
000E57  3               	sbc btop		; find selected option.
000E57  3               	sta tmp+2		; option selected in b register.
000E57  3               	inc tmp+2
000E57  3               
000E57  3               	lda #0			; set to first item.
000E57  3               	sta combyt		; object number.
000E57  3               fopt0:
000E57  3               	jsr fobj		; find next object in inventory.
000E57  3               	dec tmp+2
000E57  3               	bne fopt0		; repeat for relevant steps down the list.
000E57  3               
000E57  3               	lda combyt		; get option.
000E57  3               	sta varopt		; store the option.
000E57  3               	dec varopt		; one less, due to where we increment combyt.
000E57  3               	jmp redraw		; redraw the screen.
000E57  3               fobj:
000E57  3               	ldy combyt		; object number.
000E57  3               	inc combyt		; ready for next item.
000E57  3               	tya
000E57  3               	jsr gotob		; do we have this item?
000E57  3               	cmp #255
000E57  3               	bne :+
000E57  3               	rts
000E57  3               :
000E57  3               	jmp fobj		; yes, it's on the list.
000E57  3               
000E57  3               bwid:	.byte 0              ; box/menu width.
000E57  3               blen:	.byte 0              ; box/menu height.
000E57  3               btop:	.byte 0              ; box coordinates.
000E57  3               blft:	.byte 0
000E57  3               .endif
000E57  3               
000E57  3               ;----------------------------------------------------
000E57  3               ; Wait for keypress.
000E57  3               ;----------------------------------------------------
000E57  3               
000E57  3               prskey:
000E57  3  8A           	txa
000E58  3  48           	pha
000E59  3               prsloop:
000E59  3  20 C2 0E     	jsr vsync
000E5C  3               ; _BEEB KEYS
000E5C  3  A9 79        	lda #$79
000E5E  3  A2 01        	ldx #$01
000E60  3  20 F4 FF     	jsr OSBYTE
000E63  3  E0 FF        	cpx #$ff
000E65  3  F0 F2        	beq prsloop		; wait until key pressed
000E67  3  68           	pla
000E68  3  AA           	tax
000E69  3  60           	rts
000E6A  3               
000E6A  3               ;----------------------------------------------------
000E6A  3               ; Delay routine 1/50 sec
000E6A  3               ;
000E6A  3               ; Wait 1/60 sec = 16666 usec
000E6A  3               ; Wait 208 x 16 =  3328 usec
000E6A  3               ;                 19994 usec
000E6A  3               ; rts           =     6 usec
000E6A  3               ; Total         = 20000 usec
000E6A  3               ;----------------------------------------------------
000E6A  3               
000E6A  3               delay:
000E6A  3  8D 82 16     	sta xtmp
000E6D  3               del_loop:
000E6D  3  A9 13        	lda #19
000E6F  3  20 F4 FF     	jsr OSBYTE		; wait for vsync _BEEB
000E72  3               
000E72  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
000E74  3               delay1:
000E74  3  61 80        	adc ($80,x)		;	 6 usec
000E76  3  61 80        	adc ($80,x)		;	 6 usec
000E78  3  88           	dey			;	 2 usec
000E79  3  D0 F9        	bne delay1		;	 2 usec
000E7B  3  EA           	nop			; 2 usec
000E7C  3  EA           	nop			; 2 usec
000E7D  3               				; tot: 20000 usec
000E7D  3  CE 82 16     	dec xtmp
000E80  3  D0 EB        	bne del_loop
000E82  3  60           	rts
000E83  3               
000E83  3               ;----------------------------------------------------
000E83  3               ; Clear sprite table.
000E83  3               ;
000E83  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
000E83  3               ;----------------------------------------------------
000E83  3               
000E83  3               xspr:
000E83  3  A9 FF        	lda #255		; clear byte.
000E85  3  A2 00        	ldx #0			; length of table.
000E87  3               xspr0:
000E87  3  9D CF 22     	sta sprtab,x		; sprite table.
000E8A  3  E8           	inx			; move to next byte.
000E8B  3  E0 CC        	cpx #SPRBUF
000E8D  3  D0 F8        	bne xspr0		; repeat for rest of table.
000E8F  3  60           	rts
000E90  3               
000E90  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000E90  3               ; Sound, NOT IMPLEMENTED!!!
000E90  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000E90  3               ;
000E90  3               ;silenc:
000E90  3               ;	jsr silen1 		; silence channel 1.
000E90  3               ;	jsr silen2 		; silence channel 2.
000E90  3               ;	jsr silen3 		; silence channel 3.
000E90  3               ;	jmp plsnd 		; play all channels to switch them off.
000E90  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
000E90  3               
000E90  3               ;-------------------------------------------------------------
000E90  3               ; Initialise all objects.
000E90  3               ;
000E90  3               ; Reset current room,y,x to start room,y,x for all objects
000E90  3               ;-------------------------------------------------------------
000E90  3               
000E90  3               iniob:
000E90  3  A9 B4        	lda #<objdta 		; objects table.
000E92  3  85 68        	sta z80_x
000E94  3  A9 73        	lda #>objdta
000E96  3  85 69        	sta z80_i
000E98  3               
000E98  3  AE 24 0E     	ldx numob 		; number of objects in the game.
000E9B  3               iniob0:
000E9B  3  A0 23        	ldy #35
000E9D  3  B1 68        	lda (z80_ix),y 		; start screen.
000E9F  3  A0 20        	ldy #32
000EA1  3  91 68        	sta (z80_ix),y 		; set start screen.
000EA3  3               
000EA3  3  A0 24        	ldy #36
000EA5  3  B1 68        	lda (z80_ix),y 		; find start y.
000EA7  3  A0 21        	ldy #33
000EA9  3  91 68        	sta (z80_ix),y 		; set start y.
000EAB  3               
000EAB  3  A0 25        	ldy #37
000EAD  3  B1 68        	lda (z80_ix),y 		; get initial x.
000EAF  3  A0 22        	ldy #34
000EB1  3  91 68        	sta (z80_ix),y 		; set x coord.
000EB3  3               
000EB3  3  18           	clc 			; point to next object.
000EB4  3  A5 68        	lda z80_x
000EB6  3  69 26        	adc #38			; distance between objects.
000EB8  3  85 68        	sta z80_x
000EBA  3  90 02        	bcc :+
000EBC  3  E6 69        	inc z80_i
000EBE  3               :
000EBE  3  CA           	dex 			; repeat.
000EBF  3  D0 DA        	bne iniob0
000EC1  3               
000EC1  3  60           	rts
000EC2  3               
000EC2  3               ;-------------------------------------------------------------
000EC2  3               ; Screen synchronisation.
000EC2  3               ;
000EC2  3               ;  - read joystick/keyboard
000EC2  3               ;  - handle sound
000EC2  3               ;  - sync framerate with clock
000EC2  3               ;  - handle shrapnel every even frame
000EC2  3               ;-------------------------------------------------------------
000EC2  3               
000EC2  3               vsync:
000EC2  3  48           	pha
000EC3  3  98           	tya
000EC4  3  48           	pha
000EC5  3  8A           	txa
000EC6  3  48           	pha
000EC7  3  20 E4 19     	jsr joykey		; read joystick/keyboard.
000ECA  3               vsync1:
000ECA  3               ;	lda Timer2_High		; sync framerate with clock
000ECA  3               ;	bne vsync1
000ECA  3               ;	lda #>50000
000ECA  3               ;	sta Timer2_High
000ECA  3               ;	lda #<50000
000ECA  3               ;	sta Timer2_Low
000ECA  3               
000ECA  3  A9 13        	lda #19
000ECC  3  20 F4 FF     	jsr OSBYTE		; _BEEB vsync
000ECF  3               
000ECF  3  AD 45 0E     	lda clock
000ED2  3  29 01        	and #1
000ED4  3  D0 03        	bne:+
000ED6  3  20 C7 0F     	jsr proshr		; handle shrapnel every even frame
000ED9  3               :
000ED9  3  AD E4 0E     	lda sndtyp
000EDC  3  F0 00        	beq sndskip
000EDE  3               ; _BEEB TODO SOUND
000EDE  3               ;sndloop:
000EDE  3               ;	lda SpeakerBit		; handle sound
000EDE  3               ;	ldy sndtyp
000EDE  3               ;sndwait:
000EDE  3               ;	dey
000EDE  3               ;	bne sndwait
000EDE  3               ;	eor #4
000EDE  3               ;	sta SpeakerBit
000EDE  3               ;	dec sndtyp
000EDE  3               ;	bne sndloop
000EDE  3               sndskip: 
000EDE  3  68           	pla
000EDF  3  AA           	tax
000EE0  3  68           	pla
000EE1  3  A8           	tay
000EE2  3  68           	pla
000EE3  3  60           	rts
000EE4  3               
000EE4  3  00           sndtyp:	.byte 0
000EE5  3               
000EE5  3               ;-----------------------------------------------
000EE5  3               ; Redraw the screen.
000EE5  3               ;
000EE5  3               ; Remove old copy of all sprites for redraw.
000EE5  3               ;-----------------------------------------------
000EE5  3               
000EE5  3               redraw:
000EE5  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
000EE7  3  48           	pha
000EE8  3  A5 68        	lda z80_x
000EEA  3  48           	pha
000EEB  3               
000EEB  3  20 B9 16     	jsr droom		; show screen layout.
000EEE  3  20 B8 11     	jsr shwob		; draw objects.
000EF1  3               numsp0:
000EF1  3  A9 0C        	lda #NUMSPR		; sprites to draw.
000EF3  3  85 88        	sta tmp
000EF5  3               
000EF5  3  A9 CF        	lda #<sprtab		; sprite table.
000EF7  3  85 68        	sta z80_x
000EF9  3  A9 22        	lda #>sprtab
000EFB  3  85 69        	sta z80_i
000EFD  3               redrw0:
000EFD  3  A0 00        	ldy #0
000EFF  3  B1 68        	lda (z80_ix),y		; old sprite type.
000F01  3  C9 FF        	cmp #255		; is it enabled?
000F03  3  F0 0B        	beq redrw1 		; no, find next one.
000F05  3               
000F05  3  A0 03        	ldy #var_Y
000F07  3  B1 68        	lda (z80_ix),y 		; sprite y.
000F09  3  C9 B1        	cmp #177		; beyond maximum?
000F0B  3  B0 03        	bcs redrw1		; yes, nothing to draw.
000F0D  3               
000F0D  3  20 E2 1D     	jsr sspria		; show single sprite.
000F10  3               
000F10  3               redrw1:
000F10  3  18           	clc			; next sprite.
000F11  3  A5 68        	lda z80_x
000F13  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
000F15  3  85 68        	sta z80_x
000F17  3  90 02        	bcc :+
000F19  3  E6 69        	inc z80_i
000F1B  3               :
000F1B  3  C6 88        	dec tmp			; repeat for remaining sprites.
000F1D  3  D0 DE        	bne redrw0
000F1F  3               
000F1F  3               rpblc1:
000F1F  3               ;	jsr dshrp		; redraw shrapnel.
000F1F  3               
000F1F  3  68           	pla			; retrieve sprite pointer.
000F20  3  85 68        	sta z80_x
000F22  3  68           	pla
000F23  3  85 69        	sta z80_i
000F25  3               
000F25  3  60           	rts
000F26  3               
000F26  3               ;----------------------------------------------------------------------
000F26  3               ; Clear screen routine.
000F26  3               ;
000F26  3               ; Fill screenmem $8000-$97ff with ScrFillByte
000F26  3               ;----------------------------------------------------------------------
000F26  3               
000F26  3               cls:
000F26  3  A9 68        	lda #>ScreenAddr		; screen address.
000F28  3  8D 31 0F     	sta clsloop+2
000F2B  3  A9 00        	lda #ScrFillByte
000F2D  3  A0 00        	ldy #0
000F2F  3               clsloop:
000F2F  3  99 00 68     	sta ScreenAddr,y
000F32  3  C8           	iny
000F33  3  D0 FA        	bne clsloop
000F35  3  EE 31 0F     	inc clsloop+2
000F38  3  AE 31 0F     	ldx clsloop+2
000F3B  3  E0 80        	cpx #>(ScreenAddr+ScreenSize)		; _BEEB
000F3D  3  D0 F0        	bne clsloop
000F3F  3  60           	rts
000F40  3               
000F40  3               ;----------------------------------------------------------------------
000F40  3               ; Atomic palette is static 
000F40  3               ;----------------------------------------------------------------------
000F40  3               
000F40  3               setcrtc:
000F40  3  A2 0D        	ldx #13
000F42  3               crtcloop:
000F42  3  8E 00 FE     	stx $FE00
000F45  3  BD 63 0F     	lda crtc_regs_high,x
000F48  3  8D 01 FE     	sta $FE01
000F4B  3  CA           	dex
000F4C  3  10 F4        	bpl crtcloop
000F4E  3               
000F4E  3                   ; Set ULA
000F4E  3  A9 88            lda #$88            ; MODE 4
000F50  3  8D 48 02         sta $248            ; Tell the OS or it will mess with ULA settings at vsync
000F53  3  8D 20 FE         sta $FE20
000F56  3  60           	rts
000F57  3               
000F57  3               setpal:
000F57  3  A2 0F        	ldx #15
000F59  3               palloop:
000F59  3  BD 71 0F     	lda ula_pal,x
000F5C  3  8D 21 FE     	sta $fe21
000F5F  3  CA           	dex
000F60  3  10 F7        	bpl palloop
000F62  3  60           	rts
000F63  3               
000F63  3               crtc_regs_high:
000F63  3  3F           	.byte 63				; R0  horizontal total
000F64  3  20           	.byte 32				; R1  horizontal displayed
000F65  3  31           	.byte 49				; R2  horizontal position
000F66  3  24           	.byte $24				; R3  sync width 40 = &28
000F67  3  26           	.byte 38				; R4  vertical total
000F68  3  00           	.byte 0					; R5  vertical total adjust
000F69  3  18           	.byte 24				; R6  vertical displayed
000F6A  3  23           	.byte 35				; R7  vertical position; 35=top of screen
000F6B  3  00           	.byte $00				; R8  interlace
000F6C  3  07           	.byte 7					; R9  scanlines per row
000F6D  3  20           	.byte 32				; R10 cursor start
000F6E  3  08           	.byte 8					; R11 cursor end
000F6F  3  0D           	.byte >(ScreenAddr/8)	; R12 screen start address, high
000F70  3  00           	.byte <(ScreenAddr/8)	; R13 screen start address, low
000F71  3               
000F71  3               ula_pal:
000F71  3  07           	.byte $00 + PAL_black
000F72  3  17           	.byte $10 + PAL_black
000F73  3  27           	.byte $20 + PAL_black
000F74  3  37           	.byte $30 + PAL_black
000F75  3  47           	.byte $40 + PAL_black
000F76  3  57           	.byte $50 + PAL_black
000F77  3  67           	.byte $60 + PAL_black
000F78  3  77           	.byte $70 + PAL_black
000F79  3  80           	.byte $80 + PAL_white
000F7A  3  90           	.byte $90 + PAL_white
000F7B  3  A0           	.byte $a0 + PAL_white
000F7C  3  B0           	.byte $b0 + PAL_white
000F7D  3  C0           	.byte $c0 + PAL_white
000F7E  3  D0           	.byte $d0 + PAL_white
000F7F  3  E0           	.byte $e0 + PAL_white
000F80  3  F0           	.byte $f0 + PAL_white
000F81  3               
000F81  3               ;----------------------------------------------------------------------
000F81  3               ; FODDER check
000F81  3               ;----------------------------------------------------------------------
000F81  3               
000F81  3               fdchk:
000F81  3  A0 00        	ldy #0
000F83  3  B1 66        	lda (z80_hl),y	 	; fetch cell.
000F85  3  C9 04        	cmp #FODDER 		; is it fodder?
000F87  3  F0 01        	beq :+
000F89  3  60           	rts 			; no.
000F8A  3               :
000F8A  3  A9 00        	lda #0
000F8C  3  A0 00        	ldy #0
000F8E  3  91 66        	sta (z80_hl),y 		; rewrite block type.
000F90  3               
000F90  3  A5 67        	lda z80_h		; store pointer to block.
000F92  3  48           	pha
000F93  3  A5 66        	lda z80_l
000F95  3  48           	pha
000F96  3               
000F96  3  38           	sec			; set carry flag for subtraction.
000F97  3  A5 66        	lda z80_l 		; find simple displacement for block.
000F99  3  E9 00        	sbc #<MAP
000F9B  3  85 66        	sta z80_l
000F9D  3  A5 67        	lda z80_h
000F9F  3  E9 03        	sbc #>MAP
000FA1  3  85 67        	sta z80_h
000FA3  3               
000FA3  3  A5 66        	lda z80_l		; low byte is y coordinate.
000FA5  3  29 1F        	and #31 		; column position 0 - 31.
000FA7  3  8D 4E 0E     	sta dispx		; set up x position.
000FAA  3               
000FAA  3  06 66        	asl z80_l		; multiply displacement by 8.
000FAC  3  26 67        	rol z80_h
000FAE  3  06 66        	asl z80_l
000FB0  3  26 67        	rol z80_h
000FB2  3  06 66        	asl z80_l
000FB4  3  26 67        	rol z80_h
000FB6  3               
000FB6  3  A5 67        	lda z80_h		; x coordinate now in h.
000FB8  3  8D 4F 0E     	sta dispy		; set the display coordinate.
000FBB  3               
000FBB  3  A9 00        	lda #0 			; block to write.
000FBD  3  20 95 15     	jsr pattr 		; write block.
000FC0  3               
000FC0  3  68           	pla 			; restore block pointer.
000FC1  3  85 66        	sta z80_l
000FC3  3  68           	pla
000FC4  3  85 67        	sta z80_h
000FC6  3               
000FC6  3  60           	rts
000FC7  3               
000FC7  3               ;----------------------------------------------------
000FC7  3               ; Scrolly text and puzzle variables.
000FC7  3               ;----------------------------------------------------
000FC7  3               
000FC7  3               .if sflag
000FC7  3               txtbit:	.byte 128		; bit to write.
000FC7  3               txtwid:	.byte 16		; width of ticker message.
000FC7  3               txtpos:	.word msgdat
000FC7  3               txtini:	.word msgdat
000FC7  3               txtscr:	.word ScreenAddr
000FC7  3               .endif
000FC7  3               
000FC7  3               ;----------------------------------------------------
000FC7  3               ; Specialist routines.
000FC7  3               ; Process shrapnel.
000FC7  3               ;----------------------------------------------------
000FC7  3               proshr:
000FC7  3               .if pflag
000FC7  3               	lda #<SHRAPN		; table.
000FC7  3               	sta z80_x
000FC7  3               	lda #>SHRAPN
000FC7  3               	sta z80_i
000FC7  3               
000FC7  3               	lda #NUMSHR		; shrapnel pieces to process.
000FC7  3               	sta shrctr
000FC7  3               prosh0:
000FC7  3               	ldy #0
000FC7  3               	lda (z80_ix),y		; on/off marker.
000FC7  3               	asl a
000FC7  3               proshx:
000FC7  3               	bcs :+
000FC7  3               	jsr prosh1 		; on, so process it.
000FC7  3               :
000FC7  3               	clc
000FC7  3               	lda z80_x
000FC7  3               	adc #SHRSIZ
000FC7  3               	sta z80_x
000FC7  3               	bcc :+
000FC7  3               	inc z80_i
000FC7  3               :
000FC7  3               	dec shrctr		; round again.
000FC7  3               	bne prosh0
000FC7  3               .endif
000FC7  3               .if sflag
000FC7  3               	jsr scrly
000FC7  3               .endif
000FC7  3  60           	rts
000FC8  3               
000FC8  3               .if pflag
000FC8  3               shrctr:	.byte 0
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Proces shrapnel piece
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               prosh1:
000FC8  3               	jsr plot 		; delete the pixel.
000FC8  3               
000FC8  3               	lda #<shrptr		; shrapnel routine pointers.
000FC8  3               	sta z80_l
000FC8  3               	lda #>shrptr
000FC8  3               	sta z80_h
000FC8  3               
000FC8  3               	ldy #0
000FC8  3               	lda (z80_ix),y		; restore shrapnel type.
000FC8  3               	jsr prosh2 		; run the routine.
000FC8  3               	jsr chkxy		; check x and y are good before we redisplay.
000FC8  3               
000FC8  3               	lda #<SHRSIZ 		; distance to next.
000FC8  3               	sta z80_e
000FC8  3               	lda #>SHRSIZ
000FC8  3               	sta z80_d
000FC8  3               	rts
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Run the routine
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               prosh2:
000FC8  3               	asl a 			; 2 bytes per address.
000FC8  3               	tay
000FC8  3               	lda shrptr,y
000FC8  3               	sta z80_l
000FC8  3               	lda shrptr+1,y 		; fetch high byte from table.
000FC8  3               	sta z80_h
000FC8  3               	jmp (z80_hl) 		; jump to routine.
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Paricle routine table
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               shrptr:	.word laser		; laser.
000FC8  3               	.word trail		; vapour trail.
000FC8  3               	.word shrap		; shrapnel from explosion.
000FC8  3               	.word dotl		; horizontal starfield left.
000FC8  3               	.word dotr		; horizontal starfield right.
000FC8  3               	.word dotu		; vertical starfield up.
000FC8  3               	.word dotd		; vertical starfield down.
000FC8  3               	.word ptcusr		; user particle.
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Explosion shrapnel.
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               shrap:
000FC8  3               	ldy #1
000FC8  3               	lda (z80_ix),y 		; get the angle.
000FC8  3               	clc
000FC8  3               	adc #<shrsin		; shrapnel sine table.
000FC8  3               	sta z80_l
000FC8  3               	lda #>shrsin
000FC8  3               	adc #0
000FC8  3               	sta z80_h
000FC8  3               
000FC8  3               	ldy #0
000FC8  3               	lda (z80_hl),y 		; fetch value from table.
000FC8  3               	sta z80_e
000FC8  3               	inc z80_l 		; next byte of table.
000FC8  3               	bne :+
000FC8  3               	inc z80_h
000FC8  3               :
000FC8  3               	ldy #0
000FC8  3               	lda (z80_hl),y		; fetch value from table.
000FC8  3               	sta z80_d
000FC8  3               	inc z80_l		; next byte of table.
000FC8  3               	bne :+
000FC8  3               	inc z80_h
000FC8  3               :
000FC8  3               	ldy #0
000FC8  3               	lda (z80_hl),y 		; fetch value from table.
000FC8  3               	sta z80_c
000FC8  3               	inc z80_l 		; next byte of table.
000FC8  3               	bne :+
000FC8  3               	inc z80_h
000FC8  3               :
000FC8  3               	ldy #0
000FC8  3               	lda (z80_hl),y 		; fetch value from table.
000FC8  3               	sta z80_b
000FC8  3               
000FC8  3               	ldy #2
000FC8  3               	lda (z80_ix),y 		; x coordinate in hl.
000FC8  3               	clc
000FC8  3               	adc z80_e		; add sine lb
000FC8  3               	sta (z80_ix),y		; store new coordinate lb.
000FC8  3               	ldy #3
000FC8  3               	lda (z80_ix),y
000FC8  3               	adc z80_d		; add sine hb
000FC8  3               	sta (z80_ix),y		; store new coordinate hb.
000FC8  3               
000FC8  3               	ldy #4
000FC8  3               	lda (z80_ix),y	 	; y coordinate in hl.
000FC8  3               	clc
000FC8  3               	adc z80_c		; add cosine lb
000FC8  3               	sta (z80_ix),y		; store new coordinate lb.
000FC8  3               	ldy #5
000FC8  3               	lda (z80_ix),y
000FC8  3               	adc z80_b		; add cosine lb
000FC8  3               	sta (z80_ix),y		; store new coordinate hb.
000FC8  3               
000FC8  3               	rts
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Move dots
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               dotl:
000FC8  3               	ldy #5
000FC8  3               	lda (z80_ix),y
000FC8  3               	sec
000FC8  3               	sbc #1		 	; move left.
000FC8  3               	sta (z80_ix),y
000FC8  3               	rts
000FC8  3               dotr:
000FC8  3               	ldy #5
000FC8  3               	lda (z80_ix),y
000FC8  3               	clc
000FC8  3               	adc #1		 	; move left.
000FC8  3               	sta (z80_ix),y
000FC8  3               	rts
000FC8  3               dotu:
000FC8  3               	ldy #3
000FC8  3               	lda (z80_ix),y
000FC8  3               	sec
000FC8  3               	sbc #1		 	; move up.
000FC8  3               	sta (z80_ix),y
000FC8  3               	rts
000FC8  3               dotd:
000FC8  3               	ldy #3
000FC8  3               	lda (z80_ix),y
000FC8  3               	clc
000FC8  3               	adc #1			; move down.
000FC8  3               	sta (z80_ix),y
000FC8  3               	rts
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Check if coordinates are ok before redrawing at new position.
000FC8  3               ;
000FC8  3               ; left:   X>L		X=L	Ok
000FC8  3               ; right:  R+15>X	X=R	Ok
000FC8  3               ; top:    Y>T		Y=T	Ok
000FC8  3               ; bottom: B+15>Y	Y=B	Ok
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               chkxy:
000FC8  3               
000FC8  3               ; top:    Y>T		Y=T	Ok
000FC8  3               
000FC8  3               	ldy #3
000FC8  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000FC8  3               	cmp wntopx		; window top.
000FC8  3               	bcs :+			; compare with top window limit.
000FC8  3               	jmp kilshr		; out of window, kill shrapnel.
000FC8  3               :
000FC8  3               ; left:   X>L		X=L	Ok
000FC8  3               
000FC8  3               	ldy #5
000FC8  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000FC8  3               	cmp wnlftx		; left edge.
000FC8  3               	bcs :+			; compare with left window limit.
000FC8  3               	jmp kilshr		; out of window, kill shrapnel.
000FC8  3               :
000FC8  3               ; bottom: B+15>Y	Y=B	Ok
000FC8  3               
000FC8  3               	lda wnbotx		; point to bottom.
000FC8  3               	clc
000FC8  3               	adc #15
000FC8  3               	ldy #3
000FC8  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000FC8  3               	bcs :+			; compare with shrapnel x coordinate.
000FC8  3               	jmp kilshr		; off screen, kill shrapnel..
000FC8  3               :
000FC8  3               ; right:  R+15>X	X=R	Ok
000FC8  3               
000FC8  3               	lda wnrgtx		; point to right edge.
000FC8  3               	clc
000FC8  3               	adc #15
000FC8  3               	ldy #5
000FC8  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000FC8  3               	bcs :+			; compare with window limit.
000FC8  3               	jmp kilshr		; off screen, kill shrapnel.
000FC8  3               :
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Drop through.
000FC8  3               ; Display shrapnel.
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               plot:
000FC8  3               	ldy #3
000FC8  3               	lda (z80_ix),y		; y integer.
000FC8  3               	sta dispy	 	; workspace coordinates.
000FC8  3               	ldy #5
000FC8  3               	lda (z80_ix),y	 	; x integer.
000FC8  3               	sta dispx 		; workspace coordinates.
000FC8  3               
000FC8  3               	ldy #0
000FC8  3               	lda (z80_ix),y 		; type.
000FC8  3               	bne :+			; is it a laser?
000FC8  3               	jmp plot1 		; yes, draw laser instead.
000FC8  3               :
000FC8  3               plot0:
000FC8  3               	lda dispx		; which pixel within byte do we
000FC8  3               	and #7			; want to set first?
000FC8  3               	tay
000FC8  3               	lda dots,y 		; table of small pixel positions.
000FC8  3               	sta z80_e 		; get value.
000FC8  3               
000FC8  3               	jsr scadd 		; screen address.
000FC8  3               	ldy #0
000FC8  3               	lda (scraddr),y		; see what's already there.
000FC8  3               	eor z80_e
000FC8  3               	sta (scraddr),y 	; put back on screen.
000FC8  3               	rts
000FC8  3               
000FC8  3               plot1:
000FC8  3               	jsr scadd 		; screen address.
000FC8  3               	ldy #0
000FC8  3               	lda (scraddr),y 	; fetch byte there.
000FC8  3               	eor #255 		; toggle all bits.
000FC8  3               	sta (scraddr),y 	; new byte.
000FC8  3               	rts
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Switch off shrapnel
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               kilshr:
000FC8  3               	lda #128
000FC8  3               	ldy #0
000FC8  3               	sta (z80_ix),y	; switch off shrapnel.
000FC8  3               	rts
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Sine/cosine table
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               shrsin:	.word 0,1024,391,946,724,724,946,391
000FC8  3               	.word 1024,0,946,65144,724,64811,391,64589
000FC8  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
000FC8  3               	.word 64512,0,64589,391,64811,724,65144,946
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Create trail
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               trail:
000FC8  3               	ldy #1
000FC8  3               	lda (z80_ix),y 	; time remaining.
000FC8  3               	sec
000FC8  3               	sbc #1
000FC8  3               	sta (z80_ix),y
000FC8  3               	bne :+
000FC8  3               	jmp trailk		; time to switch it off.
000FC8  3               :
000FC8  3               	jsr qrand		; get a random number.
000FC8  3               	lsr a 			; x or y axis?
000FC8  3               	bcc :+
000FC8  3               	jmp trailv		; use y.
000FC8  3               :
000FC8  3               ; Trail horizontal
000FC8  3               
000FC8  3               	lsr a 			; which direction?
000FC8  3               	bcc :+
000FC8  3               	jmp traill		; go left.
000FC8  3               :
000FC8  3               ; Trail right
000FC8  3               
000FC8  3               	ldy #5
000FC8  3               	lda (z80_ix),y
000FC8  3               	clc
000FC8  3               	adc #1	 		; go right.
000FC8  3               	sta (z80_ix),y
000FC8  3               	rts
000FC8  3               
000FC8  3               ; Trail left
000FC8  3               
000FC8  3               traill:
000FC8  3               	ldy #5
000FC8  3               	lda (z80_ix),y
000FC8  3               	sec
000FC8  3               	sbc #1 			; go left.
000FC8  3               	sta (z80_ix),y
000FC8  3               	rts
000FC8  3               
000FC8  3               ; Trail vertical
000FC8  3               
000FC8  3               trailv:
000FC8  3               	lsr a		 	; which direction?
000FC8  3               	bcc :+
000FC8  3               	jmp trailu		; go up.
000FC8  3               :
000FC8  3               ; Trail down
000FC8  3               
000FC8  3               	ldy #3
000FC8  3               	lda (z80_ix),y
000FC8  3               	clc
000FC8  3               	adc #1 			; go down.
000FC8  3               	sta (z80_ix),y
000FC8  3               	rts
000FC8  3               
000FC8  3               ; Trail up
000FC8  3               
000FC8  3               trailu:
000FC8  3               	ldy #3
000FC8  3               	lda (z80_ix),y
000FC8  3               	sec
000FC8  3               	sbc #1 			; go up.
000FC8  3               	sta (z80_ix),y
000FC8  3               	rts
000FC8  3               
000FC8  3               ; Kill trail
000FC8  3               
000FC8  3               trailk:
000FC8  3               	lda #200		; set off-screen to kill vapour trail.
000FC8  3               	ldy #3
000FC8  3               	sta (z80_ix),y
000FC8  3               	rts
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Create laser beam
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               laser:
000FC8  3               	ldy #1
000FC8  3               	lda (z80_ix),y 		; direction.
000FC8  3               	ror a 			; left or right?
000FC8  3               	bcs :+
000FC8  3               	jmp laserl		; move left.
000FC8  3               :
000FC8  3               ; Laser right
000FC8  3               
000FC8  3               	lda #8			; distance to travel.
000FC8  3               	sta z80_b
000FC8  3               	jmp laserm		; move laser.
000FC8  3               
000FC8  3               ; Laser left
000FC8  3               
000FC8  3               laserl:
000FC8  3               	lda #248		; distance to travel.
000FC8  3               	sta z80_b
000FC8  3               laserm:
000FC8  3               	ldy #5
000FC8  3               	lda (z80_ix),y		; x position.
000FC8  3               	clc
000FC8  3               	adc z80_b		; add distance.
000FC8  3               	sta (z80_ix),y		; set new x coordinate.
000FC8  3               
000FC8  3               ; Test new block.
000FC8  3               
000FC8  3               	sta dispx 		; set x for block collision detection purposes.
000FC8  3               	ldy #3
000FC8  3               	lda (z80_ix),y 		; get y.
000FC8  3               	sta dispy		; set coordinate for collision test.
000FC8  3               	jsr tstbl 		; get block type there.
000FC8  3               	cmp #WALL		; is it solid?
000FC8  3               	bne :+
000FC8  3               	jmp trailk		; yes, it cannot pass.
000FC8  3               :
000FC8  3               	rts
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Dots mask
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               dots:	.byte 128,64,32,16,8,4,2,1
000FC8  3               
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Plot, preserving de.
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               plotde:
000FC8  3               	lda z80_d 		; put de on stack.
000FC8  3               	pha
000FC8  3               	lda z80_e
000FC8  3               	pha
000FC8  3               
000FC8  3               	jsr plot 		; plot pixel.
000FC8  3               
000FC8  3               	pla			; restore de from stack.
000FC8  3               	sta z80_e
000FC8  3               	pla
000FC8  3               	sta z80_d
000FC8  3               
000FC8  3               	rts
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Shoot a laser.
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               shoot:
000FC8  3               	sta z80_c		; store direction in c register.
000FC8  3               	ldy #8
000FC8  3               	lda (z80_ix),y 		; y coordinate.
000FC8  3               shoot1:
000FC8  3               	clc
000FC8  3               	adc #7 			; down 7 pixels.
000FC8  3               	sta z80_l 		; puty y coordinate in l.
000FC8  3               
000FC8  3               	ldy #9
000FC8  3               	lda (z80_ix),y 		; x coordinate in h.
000FC8  3               	sta z80_h
000FC8  3               
000FC8  3               	lda z80_i		; store pointer to sprite.
000FC8  3               	pha
000FC8  3               	lda z80_x
000FC8  3               	pha
000FC8  3               
000FC8  3               	jsr fpslot 		; find particle slot.
000FC8  3               	bcs :+
000FC8  3               	jmp vapou2		; failed, restore ix.
000FC8  3               :
000FC8  3               	lda #0
000FC8  3               	ldy #0
000FC8  3               	sta (z80_ix),y 		; set up a laser.
000FC8  3               
000FC8  3               	lda z80_c
000FC8  3               	ldy #1
000FC8  3               	sta (z80_ix),y 		; set the direction.
000FC8  3               
000FC8  3               	lda z80_l
000FC8  3               	ldy #3
000FC8  3               	sta (z80_ix),y		; set y coordinate.
000FC8  3               
000FC8  3               	ror z80_c		; check direction we want.
000FC8  3               	bcc :+
000FC8  3               	jmp shootr		; shoot right.
000FC8  3               :
000FC8  3               	lda z80_h		; X position.
000FC8  3               shoot0:
000FC8  3               	and #248		; align on character boundary.
000FC8  3               	ldy #5
000FC8  3               	sta (z80_ix),y		; set x coordinate.
000FC8  3               	jmp vapou0 		; draw first image.
000FC8  3               shootr:
000FC8  3               	lda z80_h		; x position.
000FC8  3               	clc
000FC8  3               	adc #15			; look right.
000FC8  3               	jmp shoot0		; align and continue.
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Create a bit of vapour trail.
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               vapour:
000FC8  3               	lda z80_i		; store pointer to sprite.
000FC8  3               	pha
000FC8  3               	lda z80_x
000FC8  3               	pha
000FC8  3               
000FC8  3               	ldy #8
000FC8  3               	lda (z80_ix),y 		; y coordinate.
000FC8  3               	clc
000FC8  3               	adc #7			; mid-point of sprite.
000FC8  3               	sta z80_l
000FC8  3               
000FC8  3               	ldy #9
000FC8  3               	lda (z80_ix),y 		; x coordinate.
000FC8  3               	adc #7
000FC8  3               	sta z80_h
000FC8  3               
000FC8  3               	jsr fpslot 		; find particle slot.
000FC8  3               	bcc :+
000FC8  3               	jmp vapou1		; no, we can use it.
000FC8  3               :
000FC8  3               vapou2:
000FC8  3               	pla
000FC8  3               	sta z80_x
000FC8  3               	pla
000FC8  3               	sta z80_i
000FC8  3               	rts
000FC8  3               vapou1:
000FC8  3               	lda z80_l
000FC8  3               	ldy #3
000FC8  3               	sta (z80_ix),y		; set up y.
000FC8  3               
000FC8  3               	lda z80_h
000FC8  3               	ldy #5
000FC8  3               	sta (z80_ix),y 		; set up x coordinate.
000FC8  3               
000FC8  3               	jsr qrand		; get quick random number.
000FC8  3               	and #15			; random time.
000FC8  3               	clc
000FC8  3               	adc #15			; minimum time on screen.
000FC8  3               	ldy #1
000FC8  3               	sta (z80_ix),y		; set time on screen.
000FC8  3               
000FC8  3               	lda #1
000FC8  3               	ldy #0
000FC8  3               	sta (z80_ix),y		; define particle as vapour trail.
000FC8  3               vapou0:
000FC8  3               	jsr chkxy		; plot first position.
000FC8  3               	jmp vapou2
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Create a user particle.
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               ptusr:
000FC8  3               	sta z80_f		; store timer.
000FC8  3               
000FC8  3               	ldy #8
000FC8  3               	lda (z80_ix),y 		; y coordinate.
000FC8  3               	clc
000FC8  3               	adc #7			; mid-point of sprite.
000FC8  3               	sta z80_l
000FC8  3               
000FC8  3               	ldy #9
000FC8  3               	lda (z80_ix),y 		; x coordinate.
000FC8  3               	clc
000FC8  3               	adc #7			; mid-point of sprite.
000FC8  3               	sta z80_h
000FC8  3               
000FC8  3               	jsr fpslot 		; find particle slot.
000FC8  3               	bcs ptusr1
000FC8  3               	rts 			; out of slots, can't generate anything.
000FC8  3               ptusr1:
000FC8  3               	lda z80_l
000FC8  3               	ldy #3
000FC8  3               	sta (z80_ix),y 		; set up y.
000FC8  3               
000FC8  3               	lda z80_h
000FC8  3               	ldy #5
000FC8  3               	sta (z80_ix),y		; set up x coordinate.
000FC8  3               
000FC8  3               	lda z80_f 		; restore timer.
000FC8  3               	ldy #1
000FC8  3               	sta (z80_ix),y		; set time on screen.
000FC8  3               
000FC8  3               	lda #7
000FC8  3               	ldy #0
000FC8  3               	sta (z80_ix),y		; define particle as user particle.
000FC8  3               
000FC8  3               	jmp chkxy		; plot first position.
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Create a vertical or horizontal star.
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               star:
000FC8  3               	lda z80_i		; store pointer to sprite.
000FC8  3               	pha
000FC8  3               	lda z80_x
000FC8  3               	pha
000FC8  3               
000FC8  3               	jsr fpslot 		; find particle slot.
000FC8  3               	bcs star7		; found one we can use.
000FC8  3               star0:
000FC8  3               	pla 			; restore sprite pointer.
000FC8  3               	sta z80_x
000FC8  3               	pla
000FC8  3               	sta z80_i
000FC8  3               	rts 			; out of slots, can't generate anything.
000FC8  3               star7:
000FC8  3               	lda z80_c		; direction.
000FC8  3               	and #3 			; is it left?
000FC8  3               	bne :+
000FC8  3               	jmp star1 		; yes, it's left.
000FC8  3               :
000FC8  3               	cmp #1 			; is it right?
000FC8  3               	bne :+
000FC8  3               	jmp star2 		; yes, it's right.
000FC8  3               :
000FC8  3               	cmp #2 			; is it up?
000FC8  3               	bne :+
000FC8  3               	jmp star3 		; yes, it's up.
000FC8  3               :
000FC8  3               	ldy wntopx 		; get edge of screen.
000FC8  3               	iny			; down one pixel.
000FC8  3               	tya
000FC8  3               star8:
000FC8  3               	ldy #3
000FC8  3               	sta (z80_ix),y 		; set y coord.
000FC8  3               	jsr qrand 		; get quick random number.
000FC8  3               star9:
000FC8  3               	ldy #5
000FC8  3               	sta (z80_ix),y		; set x position.
000FC8  3               
000FC8  3               	lda z80_c		; direction.
000FC8  3               	and #3			; zero to three.
000FC8  3               	clc
000FC8  3               	adc #3			; 3 to 6 for starfield.
000FC8  3               	ldy #0
000FC8  3               	sta (z80_ix),y		; define particle as star.
000FC8  3               	jsr chkxy		; plot first position.
000FC8  3               	jmp star0
000FC8  3               star1:
000FC8  3               	jsr qrand		; get quick random number.
000FC8  3               	ldy #3
000FC8  3               	sta (z80_ix),y 		; set y coord.
000FC8  3               
000FC8  3               	lda wnrgtx 		; get edge of screen.
000FC8  3               	clc
000FC8  3               	adc #15			; add width of sprite minus 1.
000FC8  3               	jmp star9
000FC8  3               star2:
000FC8  3               	jsr qrand 		; get quick random number.
000FC8  3               	ldy #3
000FC8  3               	sta (z80_ix),y		; set y coord.
000FC8  3               
000FC8  3               	lda wnlftx		; get edge of screen.
000FC8  3               	jmp star9
000FC8  3               star3:
000FC8  3               	lda wnbotx 		; get edge of screen.
000FC8  3               	clc
000FC8  3               	adc #15 		; height of sprite minus one pixel.
000FC8  3               	jmp star8
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Find particle slot for lasers or vapour trail.
000FC8  3               ; can't use alternate accumulator.
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               fpslot:
000FC8  3               	lda #<SHRAPN 		; shrapnel table.
000FC8  3               	sta z80_x
000FC8  3               	lda #>SHRAPN
000FC8  3               	sta z80_i
000FC8  3               
000FC8  3               	lda #NUMSHR		; number of pieces in table.
000FC8  3               	sta z80_b
000FC8  3               fpslt0:
000FC8  3               	ldy #0
000FC8  3               	lda (z80_ix),y		; get type.
000FC8  3               	asl a  			; is this slot in use?
000FC8  3               	bcc :+
000FC8  3               	rts			; no, we can use it.
000FC8  3               :
000FC8  3               	clc			; point to more shrapnel.
000FC8  3               	lda z80_x
000FC8  3               	adc #SHRSIZ
000FC8  3               	sta z80_x
000FC8  3               	bcc :+
000FC8  3               	inc z80_i
000FC8  3               :
000FC8  3               	dec z80_b		; repeat for all shrapnel.
000FC8  3               	bne fpslt0
000FC8  3               
000FC8  3               	clc
000FC8  3               	rts 			; out of slots, can't generate anything.
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Create an explosion at sprite position.
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               explod:
000FC8  3               	sta z80_c 		; particles to create.
000FC8  3               
000FC8  3               	lda z80_i 		; store pointer to sprite.
000FC8  3               	pha
000FC8  3               	lda z80_x
000FC8  3               	pha
000FC8  3               
000FC8  3               	ldy #8
000FC8  3               	lda (z80_ix),y 		; y coordinate.
000FC8  3               	sta z80_l
000FC8  3               	ldy #9
000FC8  3               	lda (z80_ix),y		; x coordinate.
000FC8  3               	sta z80_h
000FC8  3               
000FC8  3               	lda #<SHRAPN		; shrapnel table.
000FC8  3               	sta z80_x
000FC8  3               	lda #>SHRAPN
000FC8  3               	sta z80_i
000FC8  3               
000FC8  3               	lda #NUMSHR		; number of pieces in table.
000FC8  3               	sta explcnt
000FC8  3               expld0:
000FC8  3               	ldy #0
000FC8  3               	lda (z80_ix),y		; get type.
000FC8  3               	asl a 			; is this slot in use?
000FC8  3               	bcs expld1		; no, we can use it.
000FC8  3               expld2:
000FC8  3               	clc
000FC8  3               	lda z80_x
000FC8  3               	adc #SHRSIZ
000FC8  3               	sta z80_x
000FC8  3               	bcc :+
000FC8  3               	inc z80_i
000FC8  3               :
000FC8  3               	dec explcnt		; repeat for all shrapnel.
000FC8  3               	bne expld0
000FC8  3               expld3:
000FC8  3               	pla			; restore sprite pointer.
000FC8  3               	sta z80_x
000FC8  3               	pla
000FC8  3               	sta z80_i
000FC8  3               	rts 			; out of slots, can't generate any more.
000FC8  3               
000FC8  3               expld1:
000FC8  3               	lda z80_c		; shrapnel counter.
000FC8  3               	and #15			; 0 to 15.
000FC8  3               	clc			; add to x.
000FC8  3               	adc z80_l
000FC8  3               	ldy #3
000FC8  3               	sta (z80_ix),y		; y coord.
000FC8  3               
000FC8  3               	lda seed3 		; crap random number.
000FC8  3               	and #15			; 0 to 15.
000FC8  3               	clc 			; add to y.
000FC8  3               	adc z80_h
000FC8  3               	ldy #5
000FC8  3               	sta (z80_ix),y		; x coord.
000FC8  3               
000FC8  3               	lda #2
000FC8  3               	ldy #0
000FC8  3               	sta (z80_ix),y		; switch it on.
000FC8  3               
000FC8  3               	jsr chkxy		; plot first position.
000FC8  3               	jsr qrand		; quick random angle.
000FC8  3               	and #60 		; keep within range.
000FC8  3               	ldy #1
000FC8  3               	sta (z80_ix),y		; angle.
000FC8  3               
000FC8  3               	dec z80_c		; one less piece of shrapnel to generate.
000FC8  3               	bne expld2 		; back to main explosion loop.
000FC8  3               	jmp expld3 		; restore sprite pointer and exit.
000FC8  3               
000FC8  3               explcnt:	.byte 0
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Quick random
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               qrand:
000FC8  3               	jsr random		; r register.
000FC8  3               	eor seed3		; combine with seed.
000FC8  3               	sta seed3 		; new seed.
000FC8  3               	rts
000FC8  3               
000FC8  3               seed3:	.byte 0
000FC8  3               
000FC8  3               ;----------------------------------------------------
000FC8  3               ; Display all shrapnel.
000FC8  3               ;----------------------------------------------------
000FC8  3               
000FC8  3               dshrp:
000FC8  3               	lda #<plotde		; display routine.
000FC8  3               	sta proshx+1
000FC8  3               	lda #>plotde
000FC8  3               	sta proshx+2
000FC8  3               	jsr proshr		; process shrapnel.
000FC8  3               
000FC8  3               	lda #<prosh1		; processing routine.
000FC8  3               	sta proshx+1
000FC8  3               	lda #>prosh1
000FC8  3               	sta proshx+2
000FC8  3               	rts
000FC8  3               
000FC8  3               ;------------------------------------------------------
000FC8  3               ; Particle engine.
000FC8  3               ;
000FC8  3               ; Init particle data for 55 particles in SHRAPN table.
000FC8  3               ; Every particle has 6 bytes.
000FC8  3               ;
000FC8  3               ; global:	-
000FC8  3               ; local:	x,y,hl
000FC8  3               ; calls:	-
000FC8  3               ;------------------------------------------------------
000FC8  3               
000FC8  3               inishr:
000FC8  3               	lda #<SHRAPN 		; table.
000FC8  3               	sta z80_l
000FC8  3               	lda #>SHRAPN
000FC8  3               	sta z80_h
000FC8  3               
000FC8  3               	ldy #0
000FC8  3               	ldx #NUMSHR		; shrapnel pieces to process.
000FC8  3               inish0:
000FC8  3               	lda #255 		; kill the shrapnel.
000FC8  3               	sta (z80_hl),y
000FC8  3               
000FC8  3               	clc 			; point there.
000FC8  3               	lda z80_l
000FC8  3               	adc #SHRSIZ		; distance to next.
000FC8  3               	sta z80_l
000FC8  3               	bcc :+
000FC8  3               	inc z80_h
000FC8  3               :
000FC8  3               	dex
000FC8  3               	bne inish0 		; round again.
000FC8  3               	rts
000FC8  3               
000FC8  3               ;------------------------------------------------------
000FC8  3               ; Check for collision between laser and sprite.
000FC8  3               ;------------------------------------------------------
000FC8  3               
000FC8  3               lcol:
000FC8  3               	lda #<SHRAPN		; shrapnel table.
000FC8  3               	sta z80_l
000FC8  3               	lda #>SHRAPN
000FC8  3               	sta z80_h
000FC8  3               
000FC8  3               	lda #NUMSHR		; number of pieces in table.
000FC8  3               	sta z80_b
000FC8  3               lcol0:
000FC8  3               	ldy #0
000FC8  3               	lda (z80_hl),y 		; get type.
000FC8  3               	beq lcol1		; yes, check collision.
000FC8  3               lcol3:
000FC8  3               	clc			; point to more shrapnel.
000FC8  3               	lda z80_l
000FC8  3               	adc #SHRSIZ
000FC8  3               	sta z80_l
000FC8  3               	bcc :+
000FC8  3               	inc z80_h
000FC8  3               :
000FC8  3               	dec z80_b		; repeat for all shrapnel.
000FC8  3               	bne lcol0
000FC8  3               	rts 			; no collision, carry not set.
000FC8  3               lcol1:
000FC8  3               	ldy #3
000FC8  3               	lda (z80_hl),y		; get y.
000FC8  3               	sec
000FC8  3               	ldy #8
000FC8  3               	sbc (z80_ix),y		; subtract sprite y.
000FC8  3               lcolh:
000FC8  3               	cmp #16 		; within range?
000FC8  3               	bcc :+
000FC8  3               	jmp lcol2		; no, missed.
000FC8  3               :
000FC8  3               	ldy #5
000FC8  3               	lda (z80_hl),y 		; get x.
000FC8  3               	sec
000FC8  3               	ldy #9
000FC8  3               	sbc (z80_ix),y 		; subtract sprite y.
000FC8  3               	cmp #16			; within range?
000FC8  3               	bcs :+
000FC8  3               	jmp lcol4 		; yes, collision occurred.
000FC8  3               :
000FC8  3               lcol2:
000FC8  3               	jmp lcol3
000FC8  3               lcol4:
000FC8  3               	sec
000FC8  3               	rts 			; return with carry set for collision.
000FC8  3               .endif
000FC8  3               
000FC8  3               ;------------------------------------------------------
000FC8  3               ; Main game engine code starts here.
000FC8  3               ; After initialisation, mloop is the main loop
000FC8  3               ;------------------------------------------------------
000FC8  3               
000FC8  3               game:
000FC8  3               
000FC8  3               ; Set up screen address table.
000FC8  3               
000FC8  3               setsat:
000FC8  3  A9 00        	lda #<ScreenAddr		; start of screen.
000FCA  3  85 80        	sta scraddr
000FCC  3  A9 68        	lda #>ScreenAddr
000FCE  3  85 81        	sta scraddr+1
000FD0  3               
000FD0  3  A0 00        	ldy #0			; vertical lines on screen.
000FD2  3               setsa0:
000FD2  3  A5 80        	lda scraddr
000FD4  3  99 00 06     	sta SCADTB_lb,y		; write low byte.
000FD7  3  A5 81        	lda scraddr+1
000FD9  3  99 00 07     	sta SCADTB_hb,y		; write high byte.
000FDC  3  20 66 1E     	jsr nline		; next line down.
000FDF  3  C8           	iny			; next position in table.
000FE0  3  D0 F0        	bne setsa0
000FE2  3               
000FE2  3               ; Init graphics mode
000FE2  3               
000FE2  3  20 40 0F     	jsr setcrtc
000FE5  3  20 57 0F     	jsr setpal 		; set up palette.
000FE8  3               
000FE8  3               ; Init AtoMMC joystick
000FE8  3  20 20 1A     	jsr joyinit		; AtoMMC joystick on PORT B
000FEB  3               
000FEB  3               rpblc2:
000FEB  3               .if pflag
000FEB  3               	jsr inishr 		; initialise particle engine.
000FEB  3               .endif
000FEB  3               evintr:
000FEB  3  20 99 33     	jsr evnt12 		; call intro/menu event.
000FEE  3               
000FEE  3  A9 02        	lda #WALL 		; write default property.
000FF0  3  A2 00        	ldx #0
000FF2  3               clrmap:
000FF2  3  9D 00 03     	sta MAP,x 		; block properties.
000FF5  3  9D 00 04     	sta MAP+256,x
000FF8  3  9D 00 05     	sta MAP+512,x
000FFB  3  E8           	inx			; next byte.
000FFC  3  D0 F4        	bne clrmap
000FFE  3               
000FFE  3  20 90 0E     	jsr iniob 		; initialise objects.
001001  3               
001001  3  A9 00        	lda #0			; put zero in accumulator.
001003  3  8D 4D 0E     	sta gamwon		; reset game won flag.
001006  3               
001006  3  20 68 11     	jsr inisc 		; init the score.
001009  3               mapst:
001009  3  AD EF 23     	lda stmap 		; start position on map.
00100C  3  8D AC 23     	sta roomtb		; set up position in table, if there is one.
00100F  3               
00100F  3               inipbl:
00100F  3  20 87 1F     	jsr initsc 		; set up first screen.
001012  3               
001012  3  A9 9B        	lda #<ssprit 		; default to spare sprite in table.
001014  3  85 68        	sta z80_x
001016  3  A9 23        	lda #>ssprit
001018  3  85 69        	sta z80_i
00101A  3               evini:
00101A  3  20 BE 33     	jsr evnt13 		; initialisation.
00101D  3               
00101D  3               ; Two restarts.
00101D  3               ; First restart - clear all sprites and initialise everything.
00101D  3               
00101D  3               rstrt:
00101D  3  20 15 11     	jsr rsevt 		; restart events.
001020  3  20 83 0E     	jsr xspr 		; clear sprite table.
001023  3  20 ED 20     	jsr sprlst 		; fetch pointer to screen sprites.
001026  3  20 7B 21     	jsr ispr 		; initialise sprite table.
001029  3               
001029  3  4C 38 10     	jmp rstrt0
00102C  3               
00102C  3               ; Second restart - clear all but player, and don't initialise him.
00102C  3               
00102C  3               rstrtn:
00102C  3  20 15 11     	jsr rsevt		; restart events.
00102F  3  20 1B 21     	jsr nspr 		; clear all non-player sprites.
001032  3  20 ED 20     	jsr sprlst 		; fetch pointer to screen sprites.
001035  3  20 BB 21     	jsr kspr 		; initialise sprite table, no more players.
001038  3               
001038  3               ; Set up the player and/or enemy sprites.
001038  3               
001038  3               rstrt0:
001038  3  A9 00        	lda #0 			; zero in accumulator.
00103A  3  8D 4A 0E     	sta nexlev 		; reset next level flag.
00103D  3  8D 4B 0E     	sta restfl 		; reset restart flag.
001040  3  8D 4C 0E     	sta deadf 		; reset dead flag.
001043  3  20 B9 16     	jsr droom 		; show screen layout.
001046  3               rpblc0:
001046  3               .if pflag
001046  3               	jsr inishr 		; initialise particle engine.
001046  3               .endif
001046  3  20 B8 11     	jsr shwob		; draw objects.
001049  3               
001049  3  A9 CF        	lda #<sprtab 		; address of sprite table, even sprites.
00104B  3  85 68        	sta z80_x
00104D  3  A9 22        	lda #>sprtab
00104F  3  85 69        	sta z80_i
001051  3  20 9F 1C     	jsr dspr 		; display sprites.
001054  3               
001054  3  A9 E0        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
001056  3  85 68        	sta z80_x
001058  3  A9 22        	lda #>(sprtab+TABSIZ)
00105A  3  85 69        	sta z80_i
00105C  3  20 9F 1C     	jsr dspr 		; display sprites.
00105F  3               mloop:
00105F  3  20 C2 0E     	jsr vsync 		; synchronise with display.
001062  3               
001062  3  A9 CF        	lda #<sprtab 		; address of sprite table, even sprites.
001064  3  85 68        	sta z80_x
001066  3  A9 22        	lda #>sprtab
001068  3  85 69        	sta z80_i
00106A  3  20 9F 1C     	jsr dspr 		; display even sprites.
00106D  3               
00106D  3  20 B7 11     	jsr plsnd 		; play sounds.
001070  3  20 C2 0E     	jsr vsync 		; synchronise with display.
001073  3               
001073  3  A9 E0        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
001075  3  85 68        	sta z80_x
001077  3  A9 22        	lda #>(sprtab+TABSIZ)
001079  3  85 69        	sta z80_i
00107B  3  20 9F 1C     	jsr dspr 		; display odd sprites.
00107E  3               
00107E  3  A9 9B        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
001080  3  85 68        	sta z80_x
001082  3  A9 23        	lda #>(ssprit)
001084  3  85 69        	sta z80_i
001086  3               evlp1:
001086  3  20 97 33     	jsr evnt10 		; called once per main loop.
001089  3  20 14 1C     	jsr pspr 		; process sprites.
00108C  3               
00108C  3               ; Main loop events.
00108C  3               
00108C  3  A9 9B        	lda #<ssprit 		; point to spare sprite for spawning purposes.
00108E  3  85 68        	sta z80_x
001090  3  A9 23        	lda #>ssprit
001092  3  85 69        	sta z80_i
001094  3               evlp2:
001094  3  20 98 33     	jsr evnt11 		; called once per main loop.
001097  3               bsortx:
001097  3  20 87 1B     	jsr bsort 		; sort sprites.
00109A  3               
00109A  3  AD 4A 0E     	lda nexlev		; finished level flag.
00109D  3  D0 21        	bne newlev		; is set, go to next level.
00109F  3  AD 4D 0E     	lda gamwon		; finished game flag.
0010A2  3  D0 2D        	bne evwon		; is set, finish the game.
0010A4  3  AD 4B 0E     	lda restfl 		; finished level flag.
0010A7  3  C9 01        	cmp #1			; has it been set?
0010A9  3  D0 03        	bne :+
0010AB  3  4C 1D 10     	jmp rstrt		; yes, go to next level.
0010AE  3               :
0010AE  3  C9 02        	cmp #2			; has it been set?
0010B0  3  D0 03        	bne :+
0010B2  3  4C 2C 10     	jmp rstrtn		; yes, go to next level.
0010B5  3               :
0010B5  3  AD 4C 0E     	lda deadf 		; dead flag.
0010B8  3  D0 1D        	bne pdead		; yes, player dead.
0010BA  3               
0010BA  3               ; back to start of main loop.
0010BA  3               
0010BA  3  EE 45 0E     	inc clock
0010BD  3  4C 5F 10     	jmp mloop		; switched to a jmp mloop during test mode.
0010C0  3               
0010C0  3               ;----------------------------------------------------------
0010C0  3               ; New level
0010C0  3               ;----------------------------------------------------------
0010C0  3               
0010C0  3               newlev:
0010C0  3  AD 29 0E     	lda scno 			; current screen.
0010C3  3  18           	clc
0010C4  3  69 01        	adc #1				; next screen.
0010C6  3  CD 8C 70     	cmp numsc			; total number of screens.
0010C9  3  B0 06        	bcs evwon			; yes, game finished.
0010CB  3  8D 29 0E     	sta scno			; set new level number.
0010CE  3  4C 1D 10     	jmp rstrt			; restart, clearing all aliens.
0010D1  3               
0010D1  3               evwon:
0010D1  3  20 96 34     	jsr evnt18		 	; game completed.
0010D4  3  4C EA 10     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0010D7  3               
0010D7  3               ;----------------------------------------------------------
0010D7  3               ; Player dead.
0010D7  3               ;----------------------------------------------------------
0010D7  3               
0010D7  3               pdead:
0010D7  3  A9 00        	lda #0				; zeroise accumulator.
0010D9  3  8D 4C 0E     	sta deadf			; reset dead flag.
0010DC  3               evdie:
0010DC  3  20 58 34     	jsr evnt16 			; death subroutine.
0010DF  3  AD 2A 0E     	lda numlif			; number of lives.
0010E2  3  F0 03        	beq :+
0010E4  3  4C 1D 10     	jmp rstrt 			; restart game.
0010E7  3               :
0010E7  3               evfail:
0010E7  3  20 90 34     	jsr evnt17 			; failure event.
0010EA  3               
0010EA  3               ;----------------------------------------------------------
0010EA  3               ; Tidy things up
0010EA  3               ;----------------------------------------------------------
0010EA  3               
0010EA  3               tidyup:
0010EA  3  A0 00        	ldy #0				; digits to check.
0010EC  3               tidyu2:
0010EC  3  B9 9B 13     	lda score,y 			; get score digit.
0010EF  3  CD A1 13     	cmp hiscor 			; are we larger than high score digit?
0010F2  3  90 07        	bcc tidyu0			; high score is bigger.
0010F4  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0010F6  3  C8           	iny				; next digit of high score.
0010F7  3  C0 06        	cpy #6
0010F9  3  D0 F1        	bne tidyu2			; repeat for all digits
0010FB  3               tidyu0:
0010FB  3  A9 9B        	lda #<score			; return pointing to score.
0010FD  3  85 62        	sta z80_c
0010FF  3  A9 13        	lda #>score
001101  3  85 63        	sta z80_b
001103  3  60           	rts
001104  3               tidyu1:
001104  3  A0 05        	ldy #5
001106  3               tidyu3:
001106  3  B9 9B 13     	lda score,y			; score.
001109  3  99 A1 13     	sta hiscor,y			; high score.
00110C  3  88           	dey
00110D  3  10 F7        	bpl tidyu3 			; copy score to high score.
00110F  3               evnewh:
00110F  3  20 BF 34     	jsr evnt19			; new high score event.
001112  3  4C FB 10     	jmp tidyu0			; tidy up.
001115  3               
001115  3               ;--------------------------------------------------
001115  3               ; Restart event.
001115  3               ;--------------------------------------------------
001115  3               
001115  3               rsevt:
001115  3  A9 9B        	lda #<ssprit 			; default to spare element in table.
001117  3  85 68        	sta z80_x
001119  3  A9 23        	lda #>ssprit
00111B  3  85 69        	sta z80_i
00111D  3               evrs:
00111D  3  4C 16 34     	jmp evnt14	 		; call restart event.
001120  3               
001120  3               ;------------------------------------------------------------------
001120  3               ; Copy number passed in a to string position bc, right-justified.
001120  3               ;
001120  3               ; Input:
001120  3               ;  A  = number
001120  3               ;  BC = string address
001120  3               ;
001120  3               ; Output:
001120  3               ;  BC = string with number
001120  3               ;-----------------------------------------------------------------
001120  3               
001120  3               num2ch:
001120  3  85 65        	sta z80_d		; Save number
001122  3               
001122  3  A9 00        	lda #0
001124  3  8D 67 11     	sta flag
001127  3               
001127  3  A2 64        	ldx #100		; hundreds column.
001129  3  86 64        	stx z80_e
00112B  3  20 3C 11     	jsr numdg		; show digit.
00112E  3               
00112E  3  A2 0A        	ldx #10			; tens column.
001130  3  86 64        	stx z80_e
001132  3  20 3C 11     	jsr numdg		; show digit.
001135  3               
001135  3  EE 67 11     	inc flag
001138  3  A2 01        	ldx #1			; units column.
00113A  3  86 64        	stx z80_e
00113C  3               numdg:
00113C  3  A9 30        	lda #48			; clear digit.
00113E  3  85 61        	sta z80_a
001140  3               numdg1:
001140  3  A5 65        	lda z80_d
001142  3  C5 64        	cmp z80_e
001144  3  90 0F        	bcc numdg0		; nothing to show.
001146  3  38           	sec
001147  3  A5 65        	lda z80_d
001149  3  E5 64        	sbc z80_e		; subtract from column.
00114B  3  85 65        	sta z80_d
00114D  3  E6 61        	inc z80_a		; increment digit.
00114F  3  EE 67 11     	inc flag
001152  3  4C 40 11     	jmp numdg1		; repeat until column is zero.
001155  3               numdg0:
001155  3  A0 00        	ldy #0
001157  3  A5 61        	lda z80_a
001159  3  91 62        	sta (z80_bc),y		; write digit to buffer.
00115B  3  AD 67 11     	lda flag
00115E  3  F0 06        	beq :+
001160  3  E6 62        	inc z80_c		; next buffer position.
001162  3  D0 02        	bne :+
001164  3  E6 63        	inc z80_b
001166  3               :
001166  3  60           	rts
001167  3               
001167  3  00           flag:	.byte 0
001168  3               
001168  3               ;---------------------------------------------------------
001168  3               ; Reset score to "000000"
001168  3               ;---------------------------------------------------------
001168  3               
001168  3               inisc:
001168  3  A9 30        	lda #'0'
00116A  3  A2 05        	ldx #5			; digits to initialise.
00116C  3               inisc0:
00116C  3  9D 9B 13     	sta score,x 		; write zero digit.
00116F  3  CA           	dex			; next column.
001170  3  10 FA        	bpl inisc0		; repeat for all digits.
001172  3               
001172  3  60           	rts
001173  3               
001173  3               ;-----------------------------------------------------
001173  3               ; Multiply h by d and return in hl.
001173  3               ;
001173  3               ; Input:
001173  3               ;  H = first number
001173  3               ;  D = second number
001173  3               ;
001173  3               ; Output:
001173  3               ;  HL = result H x D
001173  3               ;-----------------------------------------------------
001173  3               
001173  3               imul:
001173  3  A5 65        	lda z80_d		; HL = H * D
001175  3  85 64        	sta z80_e
001177  3  A5 67        	lda z80_h
001179  3  85 62        	sta z80_c		; make c first multiplier.
00117B  3               imul0:
00117B  3  A9 00        	lda #0			; zeroise total.
00117D  3  85 66        	sta z80_l
00117F  3  85 67        	sta z80_h
001181  3               
001181  3  A5 67        	lda z80_h
001183  3  85 65        	sta z80_d		; zeroise high byte.
001185  3               
001185  3  A9 08        	lda #8			; repeat 8 times.
001187  3  85 63        	sta z80_b
001189  3               imul1:
001189  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
00118B  3  90 0E        	bcc imul2		; wasn't set.
00118D  3  18           	clc			; bit was set, so add de.
00118E  3  A5 66        	lda z80_l
001190  3  65 64        	adc z80_e
001192  3  85 66        	sta z80_l
001194  3  A5 67        	lda z80_h
001196  3  65 65        	adc z80_d
001198  3  85 67        	sta z80_h
00119A  3  18           	clc 			; reset carry.
00119B  3               imul2:
00119B  3  06 64        	asl z80_e 		; shift de 1 bit left.
00119D  3  26 65        	rol z80_d
00119F  3  C6 63        	dec z80_b
0011A1  3  D0 E6        	bne imul1		; repeat 8 times.
0011A3  3               
0011A3  3  60           	rts
0011A4  3               
0011A4  3               ;-----------------------------------------------
0011A4  3               ; Divide d by e and return in d, remainder in a.
0011A4  3               ;
0011A4  3               ; Input:
0011A4  3               ;  D = first number
0011A4  3               ;  E = second number
0011A4  3               ;
0011A4  3               ; Output:
0011A4  3               ;  D = result D/E
0011A4  3               ;  A = remainder
0011A4  3               ;-----------------------------------------------
0011A4  3               
0011A4  3               idiv:
0011A4  3  A9 00        	lda #0
0011A6  3  A0 08        	ldy #8		 	; bits to shift.
0011A8  3  06 65        	asl z80_d
0011AA  3               idiv0:
0011AA  3  2A           	rol a 			; multiply d by 2.
0011AB  3  C5 64        	cmp z80_e 		; test if e is smaller.
0011AD  3  90 02        	bcc idiv1		; e is greater, no division this time.
0011AF  3  E5 64        	sbc z80_e		; subtract it.
0011B1  3               idiv1:
0011B1  3  26 65        	rol z80_d		; rotate into d.
0011B3  3  88           	dey
0011B4  3  D0 F4        	bne idiv0		; repeat
0011B6  3  60           	rts
0011B7  3               
0011B7  3               ;---------------------------------------------------
0011B7  3               ; Play AY sound effect
0011B7  3               ;---------------------------------------------------
0011B7  3               
0011B7  3               plsnd:
0011B7  3  60           	rts
0011B8  3               
0011B8  3               ;---------------------------------------------------
0011B8  3               ; Objects handling.
0011B8  3               ; 32 bytes for image
0011B8  3               ; 3 for room, y and x
0011B8  3               ; 3 for starting room, y and x.
0011B8  3               ; 254 = disabled.
0011B8  3               ; 255 = object in player"s pockets.
0011B8  3               ;---------------------------------------------------
0011B8  3               
0011B8  3               ;---------------------------------------------------
0011B8  3               ; Show items present.
0011B8  3               ;---------------------------------------------------
0011B8  3               
0011B8  3               shwob:
0011B8  3  A9 B4        	lda #<objdta 			; objects table.
0011BA  3  85 66        	sta z80_l
0011BC  3  A9 73        	lda #>objdta
0011BE  3  85 67        	sta z80_h
0011C0  3               
0011C0  3  AD 24 0E     	lda numob 			; number of objects in the game.
0011C3  3  8D 52 1D     	sta sprcnt
0011C6  3               shwob0:
0011C6  3  A0 20        	ldy #32 			; distance to room number.
0011C8  3  B1 66        	lda (z80_hl),y 			; same as an item?
0011CA  3  CD 29 0E     	cmp scno 			; current location.
0011CD  3  D0 03        	bne :+
0011CF  3  20 E5 11     	jsr dobj 			; yes, display object.
0011D2  3               :
0011D2  3  18           	clc
0011D3  3  A5 66        	lda z80_l
0011D5  3  69 26        	adc #38 			; distance to next item.
0011D7  3  85 66        	sta z80_l
0011D9  3  A5 67        	lda z80_h
0011DB  3  69 00        	adc #0
0011DD  3  85 67        	sta z80_h	 		; point to it.
0011DF  3  CE 52 1D     	dec sprcnt
0011E2  3  D0 E2        	bne shwob0 			; repeat for others.
0011E4  3  60           	rts
0011E5  3               
0011E5  3               ;---------------------------------------------------
0011E5  3               ; Display object.
0011E5  3               ; hl must point to object's start address.
0011E5  3               ;
0011E5  3               ; Input:
0011E5  3               ;  HL = object address
0011E5  3               ;---------------------------------------------------
0011E5  3               
0011E5  3               dobj:
0011E5  3  A0 21        	ldy #33
0011E7  3  B1 66        	lda (z80_hl),y 			; point to y.
0011E9  3  8D 4F 0E     	sta dispy
0011EC  3  C8           	iny
0011ED  3  B1 66        	lda (z80_hl),y 			; point to x.
0011EF  3  8D 4E 0E     	sta dispx
0011F2  3               dobj1:
0011F2  3  4C 02 16     	jmp sprite 			; draw this sprite.
0011F5  3               
0011F5  3               ;--------------------------------------
0011F5  3               ; Remove an object.
0011F5  3               ;
0011F5  3               ; Input:
0011F5  3               ;  A = object number
0011F5  3               ;--------------------------------------
0011F5  3               
0011F5  3               remob:
0011F5  3  CD 24 0E     	cmp numob			; number of objects in game.
0011F8  3  90 01        	bcc :+				; are we checking past the end?
0011FA  3  60           	rts				; yes, can't get non-existent item.
0011FB  3               :
0011FB  3  48           	pha				; remember object.
0011FC  3  20 0A 12     	jsr getob			; pick it up if we haven't already got it.
0011FF  3  68           	pla				; retrieve object number.
001200  3  20 3C 12     	jsr gotob			; get its address.
001203  3  A9 FE        	lda #254
001205  3  A0 20        	ldy #32
001207  3  91 66        	sta (z80_hl),y			; remove it.
001209  3  60           	rts
00120A  3               
00120A  3               ;---------------------------------------------------
00120A  3               ; Pick up object number held in the accumulator.
00120A  3               ;
00120A  3               ; Input:
00120A  3               ;  A = object number
00120A  3               ;---------------------------------------------------
00120A  3               
00120A  3               getob:
00120A  3  CD 24 0E     	cmp numob 		; number of objects in game.
00120D  3  90 01        	bcc :+			; are we checking past the end?
00120F  3  60           	rts			; yes, can't get non-existent item.
001210  3               :
001210  3  20 3C 12     	jsr gotob 		; check if we already have it.
001213  3  C9 FF        	cmp #255
001215  3  D0 01        	bne :+
001217  3  60           	rts			; we already do.
001218  3               :
001218  3  A0 20        	ldy #32
00121A  3  B1 66        	lda (z80_hl),y		; is it on this screen?
00121C  3  CD 29 0E     	cmp scno 		; current screen.
00121F  3  D0 16        	bne getob0		; not on screen, so nothing to delete.
001221  3               
001221  3  A9 FF        	lda #255
001223  3  91 66        	sta (z80_hl),y		; pick it up.
001225  3  C8           	iny 			; point to y coord.
001226  3               getob1:
001226  3  A0 21        	ldy #33
001228  3  B1 66        	lda (z80_hl),y		; y coord.
00122A  3  8D 4F 0E     	sta dispy
00122D  3  A0 22        	ldy #34
00122F  3  B1 66        	lda (z80_hl),y 		; x coord.
001231  3  8D 4E 0E     	sta dispx
001234  3  4C F2 11     	jmp dobj1 		; delete object sprite.
001237  3               getob0:
001237  3  A9 FF        	lda #255
001239  3  91 66        	sta (z80_hl),y 		; pick it up.
00123B  3  60           	rts
00123C  3               
00123C  3               ;-----------------------------------------------------------------
00123C  3               ; Got object check.
00123C  3               ; Call with object in accumulator, returns zero set if in pockets.
00123C  3               ;
00123C  3               ; Input:
00123C  3               ;  A = object number
00123C  3               ;-----------------------------------------------------------------
00123C  3               
00123C  3               gotob:
00123C  3  CD 24 0E     	cmp numob 		; number of objects in game.
00123F  3  90 03        	bcc :+ 			; are we checking past the end?
001241  3  4C 48 12     	jmp gotob0 		; yes, we can't have a non-existent object.
001244  3               :
001244  3  20 4D 12     	jsr findob		; find the object.
001247  3               gotob1:
001247  3  60           	rts
001248  3               
001248  3               gotob0:
001248  3  A9 FE        	lda #254 		; missing.
00124A  3  4C 47 12     	jmp gotob1
00124D  3               
00124D  3               findob:
00124D  3  48           	pha			; save object number
00124E  3  A9 B4        	lda #<objdta 		; objects.
001250  3  85 66        	sta z80_l
001252  3  A9 73        	lda #>objdta
001254  3  85 67        	sta z80_h
001256  3  68           	pla			; retreive object number
001257  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
001259  3  AA           	tax 			; loop counter
00125A  3               fndob2:
00125A  3  18           	clc
00125B  3  A5 66        	lda z80_l
00125D  3  69 26        	adc #38 		; size of each object.
00125F  3  85 66        	sta z80_l
001261  3  90 02        	bcc :+
001263  3  E6 67        	inc z80_h
001265  3               :
001265  3  CA           	dex 			; repeat until we find address.
001266  3  D0 F2        	bne fndob2
001268  3               fndob1:
001268  3  A0 20        	ldy #32			; distance to room it's in.
00126A  3  B1 66        	lda (z80_hl),y		; fetch status.
00126C  3  60           	rts
00126D  3               
00126D  3               ;---------------------------------------------
00126D  3               ; Drop object number at (dispx, dispy).
00126D  3               ;
00126D  3               ; Input:
00126D  3               ;  A = object number
00126D  3               ;---------------------------------------------
00126D  3               
00126D  3               drpob:
00126D  3  CD 24 0E     	cmp numob 		; are we checking past the end?
001270  3  90 01        	bcc :+
001272  3  60           	rts			; yes, can't drop non-existent item.
001273  3               :
001273  3  20 3C 12     	jsr gotob		; make sure object is in inventory.
001276  3  CD 29 0E     	cmp scno		; already on this screen?
001279  3  D0 01        	bne :+
00127B  3  60           	rts			; yes, nothing to do.
00127C  3               :
00127C  3  A0 20        	ldy #32
00127E  3  AD 29 0E     	lda scno
001281  3  91 66        	sta (z80_hl),y		; bring onto screen.
001283  3  AD 4F 0E     	lda dispy		; sprite y coordinate.
001286  3  C8           	iny 
001287  3  91 66        	sta (z80_hl),y		; point to object y.
001289  3  AD 4E 0E     	lda dispx 		; sprite x coordinate.
00128C  3  C8           	iny
00128D  3  91 66        	sta (z80_hl),y 		; point to object x
00128F  3  4C E5 11     	jmp dobj		; draw the object sprite.
001292  3               
001292  3               ;-----------------------------------------------
001292  3               ; Seek objects at sprite position.
001292  3               ;
001292  3               ; Output:
001292  3               ;  A = object number, if not found A=255
001292  3               ;-----------------------------------------------
001292  3               
001292  3               skobj:
001292  3  A9 B4        	lda #<objdta 		; pointer to objects.
001294  3  85 66        	sta z80_l
001296  3  A9 73        	lda #>objdta
001298  3  85 67        	sta z80_h
00129A  3               
00129A  3  AD 24 0E     	lda numob 		; number of objects in game.
00129D  3  85 63        	sta z80_b 		; set up the loop counter.
00129F  3               skobj0:
00129F  3  AD 29 0E     	lda scno		; current room number.
0012A2  3  A0 20        	ldy #32
0012A4  3  D1 66        	cmp (z80_hl),y		; is object in here?
0012A6  3  D0 03        	bne :+
0012A8  3  20 BD 12     	jsr skobj1		; yes, check coordinates.
0012AB  3               :
0012AB  3  18           	clc			; point to next object in table.
0012AC  3  A5 66        	lda z80_l
0012AE  3  69 26        	adc #38			; size of each object.
0012B0  3  85 66        	sta z80_l
0012B2  3  90 02        	bcc :+
0012B4  3  E6 67        	inc z80_h
0012B6  3               :
0012B6  3  C6 63        	dec z80_b
0012B8  3  D0 E5        	bne skobj0		; repeat for all objects.
0012BA  3               
0012BA  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
0012BC  3  60           	rts
0012BD  3               
0012BD  3               skobj1:
0012BD  3  A0 21        	ldy #33			; point to y coordinate.
0012BF  3  B1 66        	lda (z80_hl),y		; point to y coordinate.
0012C1  3  38           	sec
0012C2  3  A0 08        	ldy #var_newY
0012C4  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
0012C6  3  18           	clc
0012C7  3  69 0F        	adc #15			; add sprite height minus one.
0012C9  3  C9 1F        	cmp #31			; within range?
0012CB  3  90 03        	bcc :+
0012CD  3  4C EB 12     	jmp skobj2		; no, ignore object.
0012D0  3               :
0012D0  3  A0 22        	ldy #34			; point to x coordinate now.
0012D2  3  B1 66        	lda (z80_hl),y 		; get coordinate.
0012D4  3  38           	sec
0012D5  3  A0 09        	ldy #var_newX
0012D7  3  F1 68        	sbc (z80_ix),y 		; subtract the sprite x.
0012D9  3  18           	clc			; add sprite width minus one.
0012DA  3  69 0F        	adc #15
0012DC  3  C9 1F        	cmp #31			; within range?
0012DE  3  90 03        	bcc :+
0012E0  3  4C EB 12     	jmp skobj2		; no, ignore object.
0012E3  3               :
0012E3  3  68           	pla			; remove return address from stack.
0012E4  3  68           	pla
0012E5  3               
0012E5  3  AD 24 0E     	lda numob 		; objects in game.
0012E8  3  38           	sec
0012E9  3  E5 63        	sbc z80_b		; subtract loop counter.
0012EB  3               skobj2:
0012EB  3  60           	rts			; accumulator now points to object.
0012EC  3               
0012EC  3               
0012EC  3               ;---------------------------------------------------------------------
0012EC  3               ; Spawn a new sprite.
0012EC  3               ;---------------------------------------------------------------------
0012EC  3               
0012EC  3               spawn:
0012EC  3  A9 CF        	lda #<sprtab		; sprite table.
0012EE  3  85 66        	sta z80_l
0012F0  3  A9 22        	lda #>sprtab
0012F2  3  85 67        	sta z80_h
0012F4  3               numsp1:
0012F4  3  A9 0C        	lda #NUMSPR		; number of sprites.
0012F6  3  8D 97 13     	sta spcnt
0012F9  3               spaw0:
0012F9  3  A0 00        	ldy #var_Type
0012FB  3  B1 66        	lda (z80_hl),y		; get sprite type.
0012FD  3  C9 FF        	cmp #255		; is it an unused slot?
0012FF  3  F0 10        	beq spaw1 		; yes, we can use this one.
001301  3               
001301  3  18           	clc 			; point to next sprite in table.
001302  3  A5 66        	lda z80_l
001304  3  69 11        	adc #TABSIZ		; size of each entry.
001306  3  85 66        	sta z80_l
001308  3  90 02        	bcc :+
00130A  3  E6 67        	inc z80_h
00130C  3               :
00130C  3  CE 97 13     	dec spcnt		; one less iteration.
00130F  3  D0 E8        	bne spaw0		; keep going until we find a slot.
001311  3               
001311  3               ; Didn't find one but drop through and set up a dummy sprite instead.
001311  3               
001311  3               spaw1:
001311  3  A5 69        	lda z80_i		; address of original sprite.
001313  3  48           	pha
001314  3  A5 68        	lda z80_x
001316  3  48           	pha
001317  3               
001317  3  A5 66        	lda z80_l		; store spawned sprite address.
001319  3  8D 98 13     	sta spptr
00131C  3  A5 67        	lda z80_h
00131E  3  8D 99 13     	sta spptr+1
001321  3               
001321  3  A5 62        	lda z80_c
001323  3  A0 00        	ldy #var_Type
001325  3  91 66        	sta (z80_hl),y 		; set the type.
001327  3  A0 05        	ldy #var_newType
001329  3  91 66        	sta (z80_hl),y		; copy
00132B  3               
00132B  3  A5 63        	lda z80_b
00132D  3  A0 01        	ldy #var_Image
00132F  3  91 66        	sta (z80_hl),y		; set the image.
001331  3  A0 06        	ldy #var_newImage
001333  3  91 66        	sta (z80_hl),y		; copy
001335  3               
001335  3  A9 00        	lda #0 				; frame zero.
001337  3  A0 02        	ldy #var_Frame
001339  3  91 66        	sta (z80_hl),y		; set frame.
00133B  3  A0 07        	ldy #var_newFrame
00133D  3  91 66        	sta (z80_hl),y		; copy
00133F  3               
00133F  3  A0 09        	ldy #9
001341  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001343  3  A0 04        	ldy #var_X
001345  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
001347  3  A0 09        	ldy #var_newX
001349  3  91 66        	sta (z80_hl),y		; copy
00134B  3               
00134B  3  A0 08        	ldy #8
00134D  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00134F  3  A0 03        	ldy #var_Y
001351  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
001353  3  A0 08        	ldy #var_newY
001355  3  91 66        	sta (z80_hl),y		; copy
001357  3               
001357  3  A0 0A        	ldy #10				; direction of original.
001359  3  B1 68        	lda (z80_ix),y
00135B  3  A0 0A        	ldy #var_Direction
00135D  3  91 66        	sta (z80_hl),y		; direction
00135F  3               
00135F  3  A9 00        	lda #0
001361  3  A0 0D        	ldy #var_jumpLo
001363  3  91 66        	sta (z80_hl),y		; reset parameter.
001365  3  C8           	iny
001366  3  91 66        	sta (z80_hl),y		; reset parameter.
001368  3  C8           	iny
001369  3  91 66        	sta (z80_hl),y		; reset parameter.
00136B  3  C8           	iny
00136C  3  91 66        	sta (z80_hl),y		; reset parameter.
00136E  3               rtssp:
00136E  3  AD 98 13     	lda spptr			; address of new sprite.
001371  3  85 68        	sta z80_x
001373  3  AD 99 13     	lda spptr+1
001376  3  85 69        	sta z80_i
001378  3               evis1:
001378  3  20 96 33     	jsr evnt09 			; call sprite initialisation event.
00137B  3               
00137B  3  AD 98 13     	lda spptr 			; address of new sprite.
00137E  3  85 68        	sta z80_x
001380  3  AD 99 13     	lda spptr+1
001383  3  85 69        	sta z80_i
001385  3               
001385  3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
001385  3  A0 03        	ldy #var_Y
001387  3  B1 66        	lda (z80_hl), y		; old x coord
001389  3  C9 B9        	cmp #SpriteMaxY     ; beyond maximum?
00138B  3  B0 03        	bcs :+				; yes, don't draw it.
00138D  3               
00138D  3  20 E2 1D     	jsr sspria 			; display the new sprite.
001390  3               :
001390  3  68           	pla					; address of original sprite.
001391  3  85 68        	sta z80_x
001393  3  68           	pla
001394  3  85 69        	sta z80_i
001396  3               
001396  3  60           	rts
001397  3               
001397  3  00           spcnt:	.byte 0
001398  3  00 00        spptr:	.word 0			; spawned sprite pointer.
00139A  3  00           seed:	.byte 0			; seed for random numbers.
00139B  3  30 30 30 30  score:	.byte "000000"		; player"s score.
00139F  3  30 30        
0013A1  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
0013A5  3  30 30        
0013A7  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
0013AB  3  30 30        
0013AD  3  00 68        grbase:	.word ScreenAddr	; graphics base address.
0013AF  3               
0013AF  3               ;----------------------------------------------------
0013AF  3               ; Check y-pos
0013AF  3               ;----------------------------------------------------
0013AF  3               
0013AF  3               checkx:
0013AF  3  AD 4F 0E     	lda dispy		; y position.
0013B2  3  C9 18        	cmp #24			; off screen?
0013B4  3  B0 01        	bcs :+
0013B6  3  60           	rts			; no, it's okay.
0013B7  3               :
0013B7  3  68           	pla			; remove return address from stack.
0013B8  3  85 66        	sta z80_l
0013BA  3  68           	pla
0013BB  3  85 67        	sta z80_h
0013BD  3  60           	rts
0013BE  3               
0013BE  3               ;-----------------------------------------------
0013BE  3               ; Displays the current high score.
0013BE  3               ;-----------------------------------------------
0013BE  3               
0013BE  3               dhisc:
0013BE  3  A9 A1        	lda #<hiscor 		; high score text.
0013C0  3  85 66        	sta z80_l
0013C2  3  A9 13        	lda #>hiscor
0013C4  3  85 67        	sta z80_h
0013C6  3  4C D1 13     	jmp dscor1		; check in printable range then show 6 digits.
0013C9  3               
0013C9  3               ;------------------------------------------------------
0013C9  3               ; Displays the current score.
0013C9  3               ;------------------------------------------------------
0013C9  3               
0013C9  3               dscor:
0013C9  3  A9 9B        	lda #<score		; score text.
0013CB  3  85 66        	sta z80_l
0013CD  3  A9 13        	lda #>score
0013CF  3  85 67        	sta z80_h
0013D1  3               dscor1:
0013D1  3  20 55 1B     	jsr preprt		; set up font and print position.
0013D4  3  20 AF 13     	jsr checkx		; make sure we're in a printable range.
0013D7  3               
0013D7  3  A9 06        	lda #6			; digits to display.
0013D9  3  85 63        	sta z80_b
0013DB  3  AD 97 1A     	lda prtmod		; get print mode.
0013DE  3  F0 03        	beq :+			; standard size text?
0013E0  3  4C 04 14     	jmp bscor0		; no, show double-height.
0013E3  3               :
0013E3  3               dscor0:
0013E3  3  A0 00        	ldy #0
0013E5  3  B1 66        	lda (z80_hl),y 		; fetch character.
0013E7  3  20 52 15     	jsr pchar 		; display character.
0013EA  3  EE 4E 0E     	inc dispx		; move along x coordinate
0013ED  3               
0013ED  3  E6 66        	inc z80_l		; next score column.
0013EF  3  D0 02        	bne :+
0013F1  3  E6 67        	inc z80_h
0013F3  3               :
0013F3  3  C6 63        	dec z80_b
0013F5  3  D0 EC        	bne dscor0 		; repeat for all digits.
0013F7  3               dscor2:
0013F7  3  AD 4E 0E     	lda dispx 		; set up display coordinates.
0013FA  3  8D 43 0E     	sta charx
0013FD  3  AD 4F 0E     	lda dispy
001400  3  8D 44 0E     	sta chary
001403  3  60           	rts
001404  3               
001404  3               ;------------------------------------------------------
001404  3               ; Displays the current score in double-height characters.
001404  3               ;
001404  3               ; Input:
001404  3               ;  B  = digit number
001404  3               ;  HL = score string
001404  3               ;------------------------------------------------------
001404  3               
001404  3               bscor0:
001404  3  A0 00        	ldy #0
001406  3               
001406  3  B1 66        	lda (z80_hl),y 		; fetch character.
001408  3  20 CF 1A     	jsr bchar 		; display big char.
00140B  3               
00140B  3  E6 66        	inc z80_l 		; next score column.
00140D  3  D0 02        	bne :+
00140F  3  E6 67        	inc z80_h
001411  3               :
001411  3  C6 63        	dec z80_b
001413  3  F0 03        	beq :+
001415  3  4C 04 14     	jmp bscor0 		; repeat for all digits.
001418  3               :
001418  3  4C F7 13     	jmp dscor2 		; tidy up line and column variables.
00141B  3               
00141B  3               ;-----------------------------------------------------
00141B  3               ; Adds number in the hl pair to the score.
00141B  3               ;-----------------------------------------------------
00141B  3               
00141B  3               addsc:
00141B  3  A9 9C        	lda #<(score+1) 	; ten thousands column.
00141D  3  85 64        	sta z80_e
00141F  3  A9 13        	lda #>(score+1)
001421  3  85 65        	sta z80_d
001423  3  A9 10        	lda #<10000		; amount to add each time.
001425  3  85 62        	sta z80_c
001427  3  A9 27        	lda #>10000
001429  3  85 63        	sta z80_b
00142B  3  20 6F 14     	jsr incsc		; add to score.
00142E  3               
00142E  3  E6 64        	inc z80_e		; thousands column.
001430  3  D0 02        	bne :+
001432  3  E6 65        	inc z80_d
001434  3               :
001434  3  A9 E8        	lda #<1000		; amount to add each time.
001436  3  85 62        	sta z80_c
001438  3  A9 03        	lda #>1000
00143A  3  85 63        	sta z80_b
00143C  3  20 6F 14     	jsr incsc 		; add to score.
00143F  3               
00143F  3  E6 64        	inc z80_e		; hundreds column.
001441  3  D0 02        	bne :+
001443  3  E6 65        	inc z80_d
001445  3               :
001445  3  A9 64        	lda #<100		; amount to add each time.
001447  3  85 62        	sta z80_c
001449  3  A9 00        	lda #>100
00144B  3  85 63        	sta z80_b
00144D  3  20 6F 14     	jsr incsc		; add to score.
001450  3               
001450  3  E6 64        	inc z80_e 		; tens column.
001452  3  D0 02        	bne :+
001454  3  E6 65        	inc z80_d
001456  3               :
001456  3  A9 0A        	lda #<10		; amount to add each time.
001458  3  85 62        	sta z80_c
00145A  3  A9 00        	lda #>10
00145C  3  85 63        	sta z80_b
00145E  3  20 6F 14     	jsr incsc 		; add to score.
001461  3               
001461  3  E6 64        	inc z80_e		; units column.
001463  3  D0 02        	bne :+
001465  3  E6 65        	inc z80_d
001467  3               :
001467  3  A9 01        	lda #<1			; units.
001469  3  85 62        	sta z80_c
00146B  3  A9 00        	lda #>1
00146D  3  85 63        	sta z80_b
00146F  3               incsc:
00146F  3  A5 67        	lda z80_h		; store amount to add.
001471  3  48           	pha
001472  3  A5 66        	lda z80_l
001474  3  48           	pha
001475  3               
001475  3  38           	sec			; subtract from amount to add.
001476  3  A5 66        	lda z80_l
001478  3  E5 62        	sbc z80_c
00147A  3  85 66        	sta z80_l
00147C  3  A5 67        	lda z80_h
00147E  3  E5 63        	sbc z80_b
001480  3  85 67        	sta z80_h
001482  3  90 14        	bcc incsc0		; too much, restore value.
001484  3               
001484  3  68           	pla			; delete the previous amount from the stack.
001485  3  68           	pla
001486  3               
001486  3  A5 65        	lda z80_d 		; store column position.
001488  3  48           	pha
001489  3  A5 64        	lda z80_e
00148B  3  48           	pha
00148C  3  20 9F 14     	jsr incsc2		; do the increment.
00148F  3               
00148F  3  68           	pla			; restore column.
001490  3  85 64        	sta z80_e
001492  3  68           	pla
001493  3  85 65        	sta z80_d
001495  3  4C 6F 14     	jmp incsc		; repeat until all added.
001498  3               
001498  3               incsc0:
001498  3  68           	pla			; restore previous value.
001499  3  85 66        	sta z80_l
00149B  3  68           	pla
00149C  3  85 67        	sta z80_h
00149E  3  60           	rts
00149F  3               incsc2:
00149F  3  A0 00        	ldy #0
0014A1  3  B1 64        	lda (z80_de),y 		; get amount.
0014A3  3  18           	clc
0014A4  3  69 01        	adc #1			; add one to column.
0014A6  3  91 64        	sta (z80_de),y		; write new column total.
0014A8  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
0014AA  3  B0 01        	bcs :+
0014AC  3  60           	rts			; no, carry on.
0014AD  3               :
0014AD  3  A9 30        	lda #'0'		; make it zero.
0014AF  3  91 64        	sta (z80_de),y		; write new column total.
0014B1  3  C6 64        	dec z80_e		; back one column.
0014B3  3  D0 02        	bne :+
0014B5  3  C6 65        	dec z80_d
0014B7  3               :
0014B7  3  4C 9F 14     	jmp incsc2
0014BA  3               
0014BA  3               ;------------------------------------
0014BA  3               ; Add bonus to score and reset bonus
0014BA  3               ;------------------------------------
0014BA  3               
0014BA  3               addbo:
0014BA  3  A2 05        	ldx #5			; last digit.
0014BC  3  18           	clc			; clear carry.
0014BD  3               addbo0:
0014BD  3  BD 9B 13     	lda score,x		; get score.
0014C0  3  7D A7 13     	adc bonus,x		; add bonus.
0014C3  3  38           	sec			; 0 to 18.
0014C4  3  E9 30        	sbc #48
0014C6  3  48           	pha
0014C7  3  A9 30        	lda #'0'
0014C9  3  9D A7 13     	sta bonus,x		; zeroise bonus.
0014CC  3  68           	pla
0014CD  3  C9 3A        	cmp #58			; carried?
0014CF  3  B0 07        	bcs addbo2		; no, do next one.
0014D1  3  38           	sec
0014D2  3  E9 0A        	sbc #10			; subtract 10.
0014D4  3  38           	sec
0014D5  3  4C D9 14     	jmp addbo1
0014D8  3               addbo2:
0014D8  3  18           	clc
0014D9  3               addbo1:
0014D9  3  9D 9B 13     	sta score,x		; write new score.
0014DC  3  CA           	dex			; next digit.
0014DD  3  10 DE        	bpl addbo0		; repeat for all 6 digits.
0014DF  3  60           	rts
0014E0  3               
0014E0  3               ;------------------------------------
0014E0  3               ; Swap score and bonus.
0014E0  3               ;------------------------------------
0014E0  3               
0014E0  3               swpsb:
0014E0  3  A2 05        	ldx #5			; digits to add.
0014E2  3               swpsb0:
0014E2  3  BD 9B 13     	lda score,x 		; get score digits.
0014E5  3  48           	pha			; save digit
0014E6  3  BD A7 13     	lda bonus,x 		; get bonus digits.
0014E9  3  9D 9B 13     	sta score,x		; switch score-bonus
0014EC  3  68           	pla
0014ED  3  9D A7 13     	sta bonus,x
0014F0  3  CA           	dex 			; repeat for all 6 digits.
0014F1  3  10 EF        	bpl swpsb0
0014F3  3  60           	rts
0014F4  3               
0014F4  3               ;----------------------------------------------------
0014F4  3               ; Get print address.
0014F4  3               ;----------------------------------------------------
0014F4  3               
0014F4  3               gprad:
0014F4  3  98           	tya
0014F5  3  48           	pha
0014F6  3               
0014F6  3  AD 4E 0E     	lda dispx 		; x coordinate.
0014F9  3  85 80        	sta scraddr
0014FB  3  A9 00        	lda #0
0014FD  3  85 81        	sta scraddr+1
0014FF  3  06 80        	asl scraddr  	; multiply char by 8
001501  3  26 81        	rol scraddr+1
001503  3  06 80        	asl scraddr
001505  3  26 81        	rol scraddr+1
001507  3  06 80        	asl scraddr
001509  3  26 81        	rol scraddr+1
00150B  3               
00150B  3  AD 4F 0E     	lda dispy		; y coordinate.
00150E  3  0A           	asl a
00150F  3  0A           	asl a
001510  3  0A           	asl a			; multiply char by 8
001511  3  A8           	tay
001512  3               
001512  3  18           	clc
001513  3  A5 80        	lda scraddr
001515  3  79 00 06     	adc SCADTB_lb,y
001518  3  85 80        	sta scraddr
00151A  3  A5 81        	lda scraddr+1
00151C  3  79 00 07     	adc SCADTB_hb,y
00151F  3  85 81        	sta scraddr+1
001521  3               
001521  3  68           	pla
001522  3  A8           	tay
001523  3  60           	rts
001524  3               
001524  3               ;--------------------------------------------------------------
001524  3               ; Get property buffer address of char at (dispx, dispy) in hl.
001524  3               ; 
001524  3               ; Output:
001524  3               ;  buffaddr = bufaddr = MAP + dispy*32 + dispx
001524  3               ;--------------------------------------------------------------
001524  3               
001524  3               pradd:
001524  3  AD 4F 0E     	lda dispy 		; y coordinate.
001527  3  85 86        	sta bufaddr
001529  3  A9 00        	lda #0
00152B  3  85 87        	sta bufaddr+1
00152D  3  06 86        	asl bufaddr  		; multiply char by 32
00152F  3  26 87        	rol bufaddr+1
001531  3  06 86        	asl bufaddr
001533  3  26 87        	rol bufaddr+1
001535  3  06 86        	asl bufaddr
001537  3  26 87        	rol bufaddr+1
001539  3  06 86        	asl bufaddr
00153B  3  26 87        	rol bufaddr+1
00153D  3  06 86        	asl bufaddr
00153F  3  26 87        	rol bufaddr+1
001541  3  18           	clc			; add address of MAP graphics.
001542  3  A5 86        	lda bufaddr
001544  3  6D 4E 0E     	adc dispx
001547  3  69 00        	adc #<MAP
001549  3  85 86        	sta bufaddr
00154B  3  A5 87        	lda bufaddr+1
00154D  3  69 03        	adc #>MAP
00154F  3  85 87        	sta bufaddr+1
001551  3  60           	rts
001552  3               
001552  3               ;----------------------------------------------------
001552  3               ; Display character in A at dispx,dispy.
001552  3               ;
001552  3               ; Input:
001552  3               ;  A 	   = character to print
001552  3               ;----------------------------------------------------
001552  3               
001552  3               pchar:
001552  3  85 82        	sta fntaddr
001554  3  A9 00        	lda #0
001556  3  85 83        	sta fntaddr+1
001558  3  06 82        	asl fntaddr  		; multiply char by 8.
00155A  3  26 83        	rol fntaddr+1
00155C  3  06 82        	asl fntaddr
00155E  3  26 83        	rol fntaddr+1
001560  3  06 82        	asl fntaddr
001562  3  26 83        	rol fntaddr+1
001564  3               
001564  3  A5 82        	lda fntaddr
001566  3  18           	clc
001567  3  6D 52 0E     	adc FontPtr
00156A  3  85 82        	sta fntaddr		; that's the low byte.
00156C  3  A5 83        	lda fntaddr+1
00156E  3  6D 53 0E     	adc FontPtr+1
001571  3  85 83        	sta fntaddr+1		; add displacement.
001573  3               pchark:
001573  3  20 F4 14     	jsr gprad		; get screen address.
001576  3  A2 07        	ldx #7			; lines to write.
001578  3               pchar0:
001578  3  A0 00        	ldy #0
00157A  3  B1 82        	lda (fntaddr),y 	; get image byte.
00157C  3  BC 8D 15     	ldy scrtab,x		; Get rowoffset
00157F  3               
00157F  3  49 00        	eor #TxtInvert		; Invert
001581  3               
001581  3  91 80        	sta (scraddr),y 	; copy to screen.
001583  3  E6 82        	inc fntaddr		; next image byte.
001585  3  D0 02        	bne :+
001587  3  E6 83        	inc fntaddr+1
001589  3               :
001589  3  CA           	dex			; next screen row down.
00158A  3  10 EC        	bpl pchar0		; repeat.
00158C  3  60           	rts
00158D  3               
00158D  3  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
001591  3  03 02 01 00  
001595  3               ;scrtab:	.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
001595  3               
001595  3               ;----------------------------------------------
001595  3               ; Print attributes, properties and pixels.
001595  3               ;
001595  3               ; Input:
001595  3               ;  A	= tile number
001595  3               ;----------------------------------------------
001595  3               
001595  3               pattr:
001595  3  85 63        	sta z80_b		; store cell in b register for now.
001597  3  AA           	tax
001598  3  BD 88 36     	lda bprop,x 		; block properties.
00159B  3  85 62        	sta z80_c
00159D  3  20 24 15     	jsr pradd 		; get property buffer address.
0015A0  3  A5 62        	lda z80_c
0015A2  3  A0 00        	ldy #0
0015A4  3  91 86        	sta (bufaddr),y 	; write property.
0015A6  3  A5 63        	lda z80_b 		; restore cell.
0015A8  3               
0015A8  3               ; Print attributes, no properties.
0015A8  3               
0015A8  3               panp:
0015A8  3  85 64        	sta z80_e		; displacement in e.
0015AA  3  A9 00        	lda #0
0015AC  3  85 65        	sta z80_d		; no high byte.
0015AE  3  06 64        	asl z80_e  		; multiply char by 8.
0015B0  3  26 65        	rol z80_d
0015B2  3  06 64        	asl z80_e
0015B4  3  26 65        	rol z80_d
0015B6  3  06 64        	asl z80_e
0015B8  3  26 65        	rol z80_d
0015BA  3  18           	clc
0015BB  3  A5 64        	lda z80_e
0015BD  3  69 B8        	adc #<chgfx 		; address of graphics.
0015BF  3  85 84        	sta tileaddr
0015C1  3  A5 65        	lda z80_d
0015C3  3  69 35        	adc #>chgfx
0015C5  3  85 85        	sta tileaddr+1
0015C7  3  20 F4 14     	jsr gprad 		; get screen address.
0015CA  3  A2 07        	ldx #7			; number of pixel rows to write.
0015CC  3               panp0:
0015CC  3  A0 00        	ldy #0
0015CE  3  B1 84        	lda (tileaddr),y 	; get image byte.
0015D0  3  49 00        	eor #TxtInvert		; Invert
0015D2  3  BC 8D 15     	ldy scrtab,x
0015D5  3  91 80        	sta (scraddr),y 	; copy to screen.
0015D7  3  E6 84        	inc tileaddr 		; next image byte.
0015D9  3  D0 02        	bne :+
0015DB  3  E6 85        	inc tileaddr+1
0015DD  3               :
0015DD  3  CA           	dex	 		; repeat for 8 pixel rows.
0015DE  3  10 EC        	bpl panp0
0015E0  3  EE 4E 0E     	inc dispx 		; move along one.
0015E3  3  EE 43 0E     	inc charx
0015E6  3  60           	rts
0015E7  3               
0015E7  3               ;----------------------------------------------
0015E7  3               ; Print character pixels, no more.
0015E7  3               ;
0015E7  3               ; Input:
0015E7  3               ;  A	= character to print
0015E7  3               ;----------------------------------------------
0015E7  3               
0015E7  3               pchr:
0015E7  3  20 52 15     	jsr pchar 		; show character in accumulator.
0015EA  3  EE 4E 0E     	inc dispx		; move along one.
0015ED  3  60           	rts
0015EE  3               
0015EE  3               ;----------------------------------------------------
0015EE  3               ; Shifter sprite routine for objects.
0015EE  3               ;----------------------------------------------------
0015EE  3               
0015EE  3               sprit7:
0015EE  3  A5 63        	lda z80_b
0015F0  3  F0 0F        	beq sprit0
0015F2  3  85 61        	sta z80_a
0015F4  3               sprit3:
0015F4  3  4E 7F 16     	lsr spr			; shift into position.
0015F7  3  6E 80 16     	ror spr+1
0015FA  3  6E 81 16     	ror spr+2
0015FD  3  C6 61        	dec z80_a		; one less iteration.
0015FF  3  D0 F3        	bne sprit3
001601  3               sprit0:
001601  3  60           	rts 			; now apply to screen.
001602  3               
001602  3               ;----------------------------------------------------
001602  3               ; Draw sprite
001602  3               ;----------------------------------------------------
001602  3               
001602  3               sprite:
001602  3  8E 82 16     	stx xtmp		; Save X-reg
001605  3  20 C4 1D     	jsr scadd 		; get screen address in scraddr.
001608  3               
001608  3  AD 4E 0E     	lda dispx 		; x position.
00160B  3  29 07        	and #7 			; position straddling cells.
00160D  3  85 63        	sta z80_b		; store in b register.
00160F  3               
00160F  3  A5 66        	lda z80_l		; store sprite graphic address.
001611  3  8D 24 16     	sta sprit1+1
001614  3  8D 2B 16     	sta sprit2+1
001617  3  A5 67        	lda z80_h
001619  3  8D 25 16     	sta sprit1+2
00161C  3  8D 2C 16     	sta sprit2+2
00161F  3               
00161F  3  A2 00        	ldx #0			; pixel height.
001621  3  A0 00        	ldy #0
001623  3               sprit1:
001623  3  BD B4 73     	lda objdta,x		; fetch first byte.
001626  3  8D 7F 16     	sta spr
001629  3  E8           	inx
00162A  3               sprit2:
00162A  3  BD B4 73     	lda objdta,x
00162D  3  8D 80 16     	sta spr+1
001630  3               
001630  3  A9 00        	lda #0
001632  3  8D 81 16     	sta spr+2
001635  3  20 EE 15     	jsr sprit7		; shift sprite
001638  3               
001638  3  AD 7F 16     	lda spr			; fetch graphic.
00163B  3  A0 00        	ldy #0			; _BEEB
00163D  3  51 80        	eor (scraddr),y		; merge with screen image.
00163F  3  91 80        	sta (scraddr),y		; write to screen.
001641  3               
001641  3  AD 80 16     	lda spr+1		; fetch graphic.
001644  3  A0 08        	ldy #8			; _BEEB
001646  3  51 80        	eor (scraddr),y		; merge with screen image.
001648  3  91 80        	sta (scraddr),y		; write to screen.
00164A  3               
00164A  3  AD 81 16     	lda spr+2		; fetch graphic.
00164D  3  A0 10        	ldy #16			; _BEEB
00164F  3  51 80        	eor (scraddr),y		; merge with screen image.
001651  3  91 80        	sta (scraddr),y		; write to screen.
001653  3               
001653  3  20 66 1E     	jsr nline
001656  3               
001656  3  E8           	inx			; next source byte.
001657  3  E0 20        	cpx #32
001659  3  D0 C8        	bne sprit1		; repeat
00165B  3               
00165B  3  AE 82 16     	ldx xtmp		; retreive X-reg
00165E  3  60           	rts
00165F  3               
00165F  3               spritetab:
00165F  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
001663  3  40 41 60 61  
001667  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
00166B  3  C0 C1 E0 E1  
00166F  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
001673  3  40 41 60 61  
001677  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
00167B  3  C0 C1 E0 E1  
00167F  3               
00167F  3  00 00 00     spr:	.byte 0,0,0
001682  3               
001682  3  00           xtmp:	.byte 0
001683  3               
001683  3               ;-----------------------------------------------------------
001683  3               ; Get room address.
001683  3               ;-----------------------------------------------------------
001683  3               
001683  3               groom:
001683  3  AE 29 0E     	ldx scno 		; screen number.
001686  3  A0 00        	ldy #0
001688  3               groomx:
001688  3  A9 D6        	lda #<scdat 		; pointer to screens.
00168A  3  85 66        	sta z80_l
00168C  3  A9 55        	lda #>scdat
00168E  3  85 67        	sta z80_h
001690  3               groom1:
001690  3  E0 00        	cpx #0			; is it the first one?
001692  3  F0 15        	beq groom0 		; no more screens to skip.
001694  3               
001694  3  18           	clc
001695  3  A5 66        	lda z80_l
001697  3  79 D6 55     	adc scdat,y 		; low byte of screen size.
00169A  3  85 66        	sta z80_l
00169C  3  C8           	iny			; point to high byte.
00169D  3  A5 67        	lda z80_h
00169F  3  79 D6 55     	adc scdat,y 		; high byte of screen size.
0016A2  3  85 67        	sta z80_h
0016A4  3  C8           	iny			; next address.
0016A5  3               
0016A5  3  CA           	dex 			; one less iteration.
0016A6  3  4C 90 16     	jmp groom1 		; loop until we reach the end.
0016A9  3               groom0:
0016A9  3  AD 8C 70     	lda numsc 		; add displacement.
0016AC  3  0A           	asl a
0016AD  3  18           	clc			; add double displacement to address.
0016AE  3  65 66        	adc z80_l
0016B0  3  85 66        	sta z80_l
0016B2  3  A5 67        	lda z80_h
0016B4  3  69 00        	adc #0
0016B6  3  85 67        	sta z80_h
0016B8  3  60           	rts
0016B9  3               
0016B9  3               ;-----------------------------------------------------------
0016B9  3               ; Draw present room.
0016B9  3               ;-----------------------------------------------------------
0016B9  3               
0016B9  3               droom:
0016B9  3  AD 20 0E     	lda wintop 		; window top.
0016BC  3  8D 4F 0E     	sta dispy		; set cursor y position.
0016BF  3               droom2:
0016BF  3  20 83 16     	jsr groom 		; get address of current room.
0016C2  3  A9 00        	lda #0	 		; zero in accumulator.
0016C4  3  8D 21 17     	sta comcnt 		; reset compression counter.
0016C7  3  AD 22 0E     	lda winhgt 		; height of window.
0016CA  3  8D EE 16     	sta rrow		; set row counter
0016CD  3               droom0:
0016CD  3  AD 21 0E     	lda winlft 		; window left edge.
0016D0  3  8D 4E 0E     	sta dispx 		; set cursor x position.
0016D3  3  AD 23 0E     	lda winwid 		; width of window.
0016D6  3  8D ED 16     	sta rcol		; set column counter
0016D9  3               droom1:
0016D9  3  20 EF 16     	jsr flbyt 		; decompress next byte on the fly.
0016DC  3  20 95 15     	jsr pattr 		; show attributes and block.
0016DF  3  CE ED 16     	dec rcol		; one less column.
0016E2  3  D0 F5        	bne droom1 		; repeat for entire line.
0016E4  3  EE 4F 0E     	inc dispy		; move down one line.
0016E7  3  CE EE 16     	dec rrow 		; one less row.
0016EA  3  D0 E1        	bne droom0 		; repeat for all rows.
0016EC  3  60           	rts
0016ED  3               
0016ED  3  00           rcol:	.byte 0
0016EE  3  00           rrow:	.byte 0
0016EF  3               
0016EF  3               ;----------------------------------------------
0016EF  3               ; Decompress bytes on-the-fly.
0016EF  3               ;----------------------------------------------
0016EF  3               
0016EF  3               flbyt:
0016EF  3  AD 21 17     	lda comcnt 		; compression counter.
0016F2  3  D0 22        	bne flbyt1		; any more to decompress?  yes.
0016F4  3               
0016F4  3  A0 00        	ldy #0
0016F6  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
0016F8  3  E6 66        	inc z80_l 		; point to next cell.
0016FA  3  D0 02        	bne :+
0016FC  3  E6 67        	inc z80_h
0016FE  3               :
0016FE  3  C9 FF        	cmp #255 		; is this byte a control code?
001700  3  F0 01        	beq :+
001702  3  60           	rts 			; no, this byte is uncompressed.
001703  3               :
001703  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
001705  3  8D 20 17     	sta combyt 		; set up the type.
001708  3  E6 66        	inc z80_l 		; point to quantity.
00170A  3  D0 02        	bne :+
00170C  3  E6 67        	inc z80_h
00170E  3               :
00170E  3  B1 66        	lda (z80_hl),y 		; get quantity.
001710  3  E6 66        	inc z80_l 		; point to next byte.
001712  3  D0 02        	bne :+
001714  3  E6 67        	inc z80_h
001716  3               :
001716  3               flbyt1:
001716  3  8D 21 17     	sta comcnt 		; store new quantity.
001719  3  CE 21 17     	dec comcnt		; one less.
00171C  3  AD 20 17     	lda combyt 		; byte to expand.
00171F  3  60           	rts
001720  3               
001720  3  00           combyt:	.byte 0			; byte type compressed.
001721  3  00           comcnt:	.byte 0			; compression counter.
001722  3               
001722  3               ;------------------------------------------
001722  3               ; Ladder down check.
001722  3               ;
001722  3               ; Input:
001722  3               ;  IX = sprite pointer
001722  3               ;------------------------------------------
001722  3               
001722  3               laddd:
001722  3  A0 09        	ldy #9
001724  3  B1 68        	lda (z80_ix),y		; x coordinate.
001726  3  8D 4E 0E     	sta dispx
001729  3               
001729  3  A0 08        	ldy #8
00172B  3  B1 68        	lda (z80_ix),y		; y coordinate.
00172D  3  29 FE        	and #254		; make it even.
00172F  3  91 68        	sta (z80_ix),y 		; reset it.
001731  3               numsp5:
001731  3  18           	clc 			; look down 16 pixels.
001732  3  69 10        	adc #16
001734  3  8D 4F 0E     	sta dispy		; coords in dispx,dispy.
001737  3  4C 4F 17     	jmp laddv
00173A  3               
00173A  3               ;------------------------------------------
00173A  3               ; Ladder up check.
00173A  3               ;
00173A  3               ; Input:
00173A  3               ;  IX = sprite pointer
00173A  3               ;
00173A  3               ; Output:
00173A  3               ;  A  = 0 is ok, A <>0 is not ok
00173A  3               ;------------------------------------------
00173A  3               
00173A  3               laddu:
00173A  3  A0 09        	ldy #9
00173C  3  B1 68        	lda (z80_ix),y		; x coordinate.
00173E  3  8D 4E 0E     	sta dispx
001741  3               
001741  3  A0 08        	ldy #8
001743  3  B1 68        	lda (z80_ix),y		; y coordinate.
001745  3  29 FE        	and #254 		; make it even.
001747  3  91 68        	sta (z80_ix),y		; reset it.
001749  3               numsp6:
001749  3  18           	clc 			; look 2 pixels above feet.
00174A  3  69 0E        	adc #14
00174C  3  8D 4F 0E     	sta dispy		; coords in dispx,dispy.
00174F  3               laddv:
00174F  3  20 36 19     	jsr tstbl 		; get map address.
001752  3  20 69 18     	jsr ldchk 		; standard ladder check.
001755  3  F0 01        	beq :+
001757  3  60           	rts 			; no way through.
001758  3               :
001758  3  E6 86        	inc bufaddr 		; look right one cell.
00175A  3  D0 02        	bne :+
00175C  3  E6 87        	inc bufaddr+1
00175E  3               :
00175E  3  20 69 18     	jsr ldchk 		; do the check.
001761  3  F0 01        	beq :+
001763  3  60           	rts 			; impassable.
001764  3               :
001764  3  AD 4E 0E     	lda dispx 		; y coordinate.
001767  3  29 07        	and #7 			; position straddling block cells.
001769  3  D0 01        	bne :+
00176B  3  60           	rts 			; no more checks needed.
00176C  3               :
00176C  3  E6 86        	inc bufaddr 		; look to third cell.
00176E  3  D0 02        	bne :+
001770  3  E6 87        	inc bufaddr+1
001772  3               :
001772  3  20 69 18     	jsr ldchk 		; do the check.
001775  3  60           	rts  			; return with zero flag set accordingly.
001776  3               
001776  3               ;---------------------------------------------------------
001776  3               ; Can go up check.
001776  3               ;
001776  3               ; Input:
001776  3               ;  IX = sprite pointer
001776  3               ;
001776  3               ; Output:
001776  3               ;  A  = 0 is ok, A <>0 is not ok
001776  3               ;---------------------------------------------------------
001776  3               
001776  3               cangu:
001776  3  A0 09        	ldy #9
001778  3  B1 68        	lda (z80_ix),y		; x coordinate.
00177A  3  8D 4E 0E     	sta dispx
00177D  3  A0 08        	ldy #8
00177F  3  B1 68        	lda (z80_ix),y 		; y coordinate.
001781  3  38           	sec
001782  3  E9 02        	sbc #2
001784  3  8D 4F 0E     	sta dispy		; coords in dispx,dispy.
001787  3  20 36 19     	jsr tstbl 		; get map address.
00178A  3  20 33 18     	jsr lrchk 		; standard left/right check.
00178D  3  F0 01        	beq :+
00178F  3  60           	rts			; no way through.
001790  3               :
001790  3  E6 86        	inc bufaddr		; look right one cell.
001792  3  D0 02        	bne :+
001794  3  E6 87        	inc bufaddr+1
001796  3               :
001796  3  20 33 18     	jsr lrchk 		; do the check.
001799  3  F0 01        	beq :+
00179B  3  60           	rts			; impassable.
00179C  3               :
00179C  3  AD 4E 0E     	lda dispx		; x coordinate.
00179F  3  29 07        	and #7			; position straddling block cells.
0017A1  3  D0 01        	bne :+
0017A3  3  60           	rts			; no more checks needed.
0017A4  3               :
0017A4  3  E6 86        	inc bufaddr		; look to third cell.
0017A6  3  D0 02        	bne :+
0017A8  3  E6 87        	inc bufaddr+1
0017AA  3               :
0017AA  3  20 33 18     	jsr lrchk		; do the check.
0017AD  3  60           	rts 			; return with zero flag set accordingly.
0017AE  3               
0017AE  3               ;---------------------------------------------------------
0017AE  3               ; Can go down check.
0017AE  3               ;
0017AE  3               ; Input:
0017AE  3               ;  IX = sprite pointer
0017AE  3               ;
0017AE  3               ; Output:
0017AE  3               ;  A  = 0 is ok, A <>0 is not ok
0017AE  3               ;---------------------------------------------------------
0017AE  3               
0017AE  3               cangd:
0017AE  3  A0 09        	ldy #9
0017B0  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0017B2  3  8D 4E 0E     	sta dispx
0017B5  3  A0 08        	ldy #8
0017B7  3  B1 68        	lda (z80_ix),y		; y coordinate.
0017B9  3               numsp3:
0017B9  3  18           	clc
0017BA  3  69 10        	adc #16 		; look down 16 pixels.
0017BC  3  8D 4F 0E     	sta dispy		; coords in dispx,dispy.
0017BF  3  20 36 19     	jsr tstbl 		; get map address.
0017C2  3  20 48 18     	jsr plchk 		; block, platform check.
0017C5  3  F0 01        	beq :+
0017C7  3  60           	rts			; no way through.
0017C8  3               :
0017C8  3  E6 86        	inc bufaddr		; look right one cell.
0017CA  3  D0 02        	bne :+
0017CC  3  E6 87        	inc bufaddr+1
0017CE  3               :
0017CE  3  20 48 18     	jsr plchk		; block, platform check.
0017D1  3  F0 01        	beq :+
0017D3  3  60           	rts			; impassable.
0017D4  3               :
0017D4  3  AD 4E 0E     	lda dispx		; x coordinate.
0017D7  3  29 07        	and #7			; position straddling block cells.
0017D9  3  D0 01        	bne :+
0017DB  3  60           	rts			; no more checks needed.
0017DC  3               :
0017DC  3  E6 86        	inc bufaddr		; look to third cell.
0017DE  3  D0 02        	bne :+
0017E0  3  E6 87        	inc bufaddr+1
0017E2  3               :
0017E2  3  20 48 18     	jsr plchk		; block, platform check.
0017E5  3  60           	rts			; return with zero flag set accordingly.
0017E6  3               
0017E6  3               ;---------------------------------------------------------
0017E6  3               ; Can go left check.
0017E6  3               ;
0017E6  3               ; Input:
0017E6  3               ;  IX = sprite pointer
0017E6  3               ;
0017E6  3               ; Output:
0017E6  3               ;  A  = 0 is ok, A <>0 is not ok
0017E6  3               ;---------------------------------------------------------
0017E6  3               
0017E6  3               cangl:
0017E6  3  A0 08        	ldy #8
0017E8  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0017EA  3  8D 4F 0E     	sta dispy
0017ED  3  A0 09        	ldy #9
0017EF  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0017F1  3  38           	sec
0017F2  3  E9 02        	sbc #2			; look left 2 pixels.
0017F4  3  8D 4E 0E     	sta dispx		; coords in dispx,dispy.
0017F7  3  4C 0B 18     	jmp cangh		; test if we can go there.
0017FA  3               
0017FA  3               ;---------------------------------------------------------
0017FA  3               ; Can go right check.
0017FA  3               ;
0017FA  3               ; Input:
0017FA  3               ;  IX = sprite pointer
0017FA  3               ;
0017FA  3               ; Output:
0017FA  3               ;  A  = 0 is ok, A <>0 is not ok
0017FA  3               ;---------------------------------------------------------
0017FA  3               
0017FA  3               cangr:
0017FA  3  A0 08        	ldy #8
0017FC  3  B1 68        	lda (z80_ix),y		; y coordinate.
0017FE  3  8D 4F 0E     	sta dispy
001801  3  A0 09        	ldy #9
001803  3  B1 68        	lda (z80_ix),y		; x coordinate.
001805  3  18           	clc
001806  3  69 10        	adc #16			; look right 16 pixels.
001808  3  8D 4E 0E     	sta dispx		; coords in dispx,dispy.
00180B  3               cangh:
00180B  3               cangh2:
00180B  3  A9 03        	lda #3			; default rows to write.
00180D  3  85 63        	sta z80_b
00180F  3  AD 4F 0E     	lda dispy		; y position.
001812  3  29 07        	and #7			; does x straddle cells?
001814  3  D0 02        	bne cangh0		; yes, loop counter is good.
001816  3  C6 63        	dec z80_b		; one less row to write.
001818  3               cangh0:
001818  3  20 36 19     	jsr tstbl		; get map address.
00181B  3               cangh1:
00181B  3  20 33 18     	jsr lrchk		; standard left/right check.
00181E  3  F0 01        	beq :+
001820  3  60           	rts			; no way through.
001821  3               :
001821  3  48           	pha
001822  3  18           	clc
001823  3  A5 86        	lda bufaddr
001825  3  69 20        	adc #32			; look down.
001827  3  85 86        	sta bufaddr
001829  3  90 02        	bcc :+
00182B  3  E6 87        	inc bufaddr+1
00182D  3               :
00182D  3  68           	pla
00182E  3               
00182E  3  C6 63        	dec z80_b
001830  3  D0 E9        	bne cangh1
001832  3  60           	rts
001833  3               
001833  3               ;-------------------------------------
001833  3               ; Check left/right movement is okay.
001833  3               ;
001833  3               ; Input:
001833  3               ;  bufaddr = MAP + x/8 + y/8*32
001833  3               ;
001833  3               ; Output:
001833  3               ;  A  = 0 is ok, A <>0 is not ok
001833  3               ;-------------------------------------
001833  3               
001833  3               lrchk:
001833  3  A0 00        	ldy #0
001835  3  B1 86        	lda (bufaddr),y		; fetch map cell.
001837  3  C9 02        	cmp #WALL 		; is it passable?
001839  3  F0 0A        	beq lrchkx		; no.
00183B  3               
00183B  3  C9 04        	cmp #FODDER		; fodder has to be dug.
00183D  3  F0 06        	beq lrchkx		; not passable.
00183F  3  A9 00        	lda #0
001841  3  60           	rts
001842  3               
001842  3               ;--------------------------------------------------------------
001842  3               ; Called by mmenu
001842  3               ;--------------------------------------------------------------
001842  3               
001842  3               always:
001842  3  A9 FF        	lda #255		; report it as okay.
001844  3  60           	rts
001845  3               
001845  3               lrchkx:
001845  3  A9 01        	lda #1 			; reset all bits.
001847  3  60           	rts
001848  3               
001848  3               
001848  3               ;--------------------------------------------------------------
001848  3               ; Check platform or solid item is not in way.
001848  3               ;
001848  3               ; Input:
001848  3               ;  bufaddr = MAP + x/8 + y/8*32
001848  3               ;
001848  3               ; Output:
001848  3               ;  A  = 0 is ok, A <>0 is not ok
001848  3               ;--------------------------------------------------------------
001848  3               
001848  3               plchk:
001848  3  A0 00        	ldy #0
00184A  3  B1 86        	lda (bufaddr),y 	; fetch map cell.
00184C  3  C9 02        	cmp #WALL 		; is it passable?
00184E  3  F0 F5        	beq lrchkx		; no.
001850  3               
001850  3  C9 04        	cmp #FODDER		; fodder has to be dug.
001852  3  F0 F1        	beq lrchkx		; not passable.
001854  3               
001854  3  C9 01        	cmp #PLATFM		; platform is solid.
001856  3  F0 07        	beq plchkx		; not passable.
001858  3               
001858  3  C9 03        	cmp #LADDER		; is it a ladder?
00185A  3  F0 E9        	beq lrchkx		; on ladder, deny movement.
00185C  3               plchk0:
00185C  3  A9 00        	lda #0			; report as ok
00185E  3  60           	rts
00185F  3               plchkx:
00185F  3  AD 4F 0E     	lda dispy		; x coordinate.
001862  3  29 07        	and #7			; position straddling blocks.
001864  3  F0 DF        	beq lrchkx		; on platform, deny movement.
001866  3  4C 5C 18     	jmp plchk0
001869  3               
001869  3               ;--------------------------------------------------------------
001869  3               ; Check ladder is available.
001869  3               ;
001869  3               ; Input:
001869  3               ;  bufaddr = MAP + x/8 + y/8*32
001869  3               ;
001869  3               ; Output:
001869  3               ;  A  = 0 is ok, A <>0 is not ok
001869  3               ;--------------------------------------------------------------
001869  3               
001869  3               ldchk:
001869  3  A0 00        	ldy #0
00186B  3  B1 86        	lda (bufaddr),y 	; fetch cell.
00186D  3  C9 03        	cmp #LADDER 		; is it a ladder?
00186F  3  F0 03        	beq ldchk1
001871  3  A9 01        	lda #1
001873  3  60           	rts  			; return with zero flag set accordingly.
001874  3               ldchk1:
001874  3  A9 00        	lda #0
001876  3  60           	rts
001877  3               
001877  3               ;--------------------------------------------------------------
001877  3               ; Touched deadly block check.
001877  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
001877  3               ;
001877  3               ; Input:
001877  3               ;  IX = sprite address
001877  3               ;
001877  3               ; Output:
001877  3               ;  A  = 0 is ok, A=5 is not ok
001877  3               ;--------------------------------------------------------------
001877  3               
001877  3               tded:
001877  3  A0 08        	ldy #8
001879  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00187B  3  8D 4F 0E     	sta dispy
00187E  3  C8           	iny
00187F  3  B1 68        	lda (z80_ix),y 		; x coordinate.
001881  3  8D 4E 0E     	sta dispx		; coords in dispx,dispy.
001884  3  20 36 19     	jsr tstbl		; get map address.
001887  3  48           	pha
001888  3  A9 1F        	lda #31			; default distance to next line down.
00188A  3  85 64        	sta z80_e
00188C  3  68           	pla
00188D  3  C5 63        	cmp z80_b		; is this the required block?
00188F  3  D0 01        	bne :+
001891  3  60           	rts			; yes.
001892  3               :
001892  3  E6 86        	inc bufaddr 		; next cell.
001894  3  D0 02        	bne :+
001896  3  E6 87        	inc bufaddr+1
001898  3               :
001898  3  A0 00        	ldy #0
00189A  3  B1 86        	lda (bufaddr),y		; fetch type.
00189C  3  C5 63        	cmp z80_b 		; is this deadly/custom?
00189E  3  D0 01        	bne :+
0018A0  3  60           	rts			; yes.
0018A1  3               :
0018A1  3  AD 4E 0E     	lda dispx		; horizontal position.
0018A4  3  85 62        	sta z80_c 		; store column in c register.
0018A6  3  29 07        	and #7			; is it straddling cells?
0018A8  3  D0 03        	bne :+
0018AA  3  4C BE 18     	jmp tded0		; no.
0018AD  3               :
0018AD  3  E6 86        	inc bufaddr 		; last cell.
0018AF  3  D0 02        	bne :+
0018B1  3  E6 87        	inc bufaddr+1
0018B3  3               :
0018B3  3  A0 00        	ldy #0
0018B5  3  B1 86        	lda (bufaddr),y 	; fetch type.
0018B7  3  C5 63        	cmp z80_b		; is this the block?
0018B9  3  D0 01        	bne :+
0018BB  3  60           	rts			; yes.
0018BC  3               :
0018BC  3  C6 64        	dec z80_e		; one less cell to next row down.
0018BE  3               tded0:
0018BE  3  18           	clc 			; point to next row.
0018BF  3  A5 86        	lda bufaddr
0018C1  3  65 64        	adc z80_e
0018C3  3  85 86        	sta bufaddr
0018C5  3  90 02        	bcc :+
0018C7  3  E6 87        	inc bufaddr+1
0018C9  3               :
0018C9  3  A0 00        	ldy #0
0018CB  3  B1 86        	lda (bufaddr),y		; fetch left cell block.
0018CD  3  C5 63        	cmp z80_b		; is this fatal?
0018CF  3  D0 01        	bne :+
0018D1  3  60           	rts			; yes.
0018D2  3               :
0018D2  3  E6 86        	inc bufaddr 		; next cell.
0018D4  3  D0 02        	bne :+
0018D6  3  E6 87        	inc bufaddr+1
0018D8  3               :
0018D8  3  A0 00        	ldy #0
0018DA  3  B1 86        	lda (bufaddr),y 	; fetch type.
0018DC  3  C5 63        	cmp z80_b		; is this fatal?
0018DE  3  D0 01        	bne :+
0018E0  3  60           	rts			; yes.
0018E1  3               :
0018E1  3  A5 62        	lda z80_c		; horizontal position.
0018E3  3  29 07        	and #7			; is it straddling cells?
0018E5  3  D0 03        	bne :+
0018E7  3  4C F9 18     	jmp tded1 		; no.
0018EA  3               :
0018EA  3  E6 86        	inc bufaddr		; last cell.
0018EC  3  D0 02        	bne :+
0018EE  3  E6 87        	inc bufaddr+1
0018F0  3               :
0018F0  3  A0 00        	ldy #0
0018F2  3  B1 86        	lda (bufaddr),y		; fetch type.
0018F4  3  C5 63        	cmp z80_b		; is this fatal?
0018F6  3  D0 01        	bne :+
0018F8  3  60           	rts			; yes.
0018F9  3               :
0018F9  3               tded1:
0018F9  3  AD 4F 0E     	lda dispy		; vertical position.
0018FC  3  29 07        	and #7 			; is it straddling cells?
0018FE  3  D0 01        	bne :+
001900  3  60           	rts			; no, job done.
001901  3               :
001901  3  18           	clc			; point to next row.
001902  3  A5 86        	lda bufaddr
001904  3  65 64        	adc z80_e
001906  3  85 86        	sta bufaddr
001908  3  90 02        	bcc :+
00190A  3  E6 87        	inc bufaddr+1
00190C  3               :
00190C  3  A0 00        	ldy #0
00190E  3  B1 86        	lda (bufaddr),y 	; fetch left cell block.
001910  3  C5 63        	cmp z80_b		; is this fatal?
001912  3  D0 01        	bne :+
001914  3  60           	rts			; yes.
001915  3               :
001915  3  E6 86        	inc bufaddr		; next cell.
001917  3  D0 02        	bne :+
001919  3  E6 87        	inc bufaddr+1
00191B  3               :
00191B  3  A0 00        	ldy #0
00191D  3  B1 86        	lda (bufaddr),y 	; fetch type.
00191F  3  C5 63        	cmp z80_b		; is this fatal?
001921  3  D0 01        	bne :+
001923  3  60           	rts			; yes.
001924  3               :
001924  3  A5 62        	lda z80_c		; horizontal position.
001926  3  29 07        	and #7			; is it straddling cells?
001928  3  D0 01        	bne :+
00192A  3  60           	rts			; no.
00192B  3               :
00192B  3  E6 86        	inc bufaddr		; last cell.
00192D  3  D0 02        	bne :+
00192F  3  E6 87        	inc bufaddr+1
001931  3               :
001931  3  A0 00        	ldy #0
001933  3  B1 86        	lda (bufaddr),y		; fetch final type.
001935  3  60           	rts 			; return with final type in accumulator.
001936  3               
001936  3               ;---------------------------------------------------
001936  3               ; Fetch block type at (dispx, dispy).
001936  3               ;
001936  3               ; Output:
001936  3               ;  A = block type
001936  3               ;---------------------------------------------------
001936  3               
001936  3               tstbl:
001936  3  AD 4F 0E     	lda dispy 		; fetch y coord.
001939  3  4A           	lsr a			; bufaddr = y/8
00193A  3  4A           	lsr a
00193B  3  4A           	lsr a
00193C  3  85 86        	sta bufaddr
00193E  3  A9 00        	lda #0
001940  3  85 87        	sta bufaddr+1
001942  3               
001942  3  06 86        	asl bufaddr  		; bufaddr = y/8 * 32
001944  3  26 87        	rol bufaddr+1
001946  3  06 86        	asl bufaddr
001948  3  26 87        	rol bufaddr+1
00194A  3  06 86        	asl bufaddr
00194C  3  26 87        	rol bufaddr+1
00194E  3  06 86        	asl bufaddr
001950  3  26 87        	rol bufaddr+1
001952  3  06 86        	asl bufaddr
001954  3  26 87        	rol bufaddr+1
001956  3               
001956  3  AD 4E 0E     	lda dispx		; x/8
001959  3  4A           	lsr a
00195A  3  4A           	lsr a
00195B  3  4A           	lsr a
00195C  3               
00195C  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
00195D  3  65 86        	adc bufaddr
00195F  3  69 00        	adc #<MAP
001961  3  85 86        	sta bufaddr
001963  3  A5 87        	lda bufaddr+1
001965  3  69 03        	adc #>MAP
001967  3  85 87        	sta bufaddr+1
001969  3               
001969  3  A0 00        	ldy #0
00196B  3  B1 86        	lda (bufaddr),y 	; fetch byte there.
00196D  3  60           	rts
00196E  3               
00196E  3               
00196E  3               ;-------------------------------------------------------------------
00196E  3               ; Jump - if we can.
00196E  3               ; Requires initial speed to be set up in accumulator prior to call.
00196E  3               ;
00196E  3               ; Input:
00196E  3               ;  IX = sprite address
00196E  3               ;-------------------------------------------------------------------
00196E  3               
00196E  3               jump:
00196E  3  A0 0D        	ldy #13
001970  3  B1 68        	lda (z80_ix),y		; jump table low.
001972  3  A0 0E        	ldy #14
001974  3  11 68        	ora (z80_ix),y		; jump table high.
001976  3  F0 01        	beq :+
001978  3  60           	rts			; already in the air.
001979  3               :
001979  3  A9 19        	lda #>jtab
00197B  3  A0 0E        	ldy #14
00197D  3  91 68        	sta (z80_ix),y		; set jump high.
00197F  3  A9 86        	lda #<jtab		; jump table start.
001981  3  A0 0D        	ldy #13
001983  3  91 68        	sta (z80_ix),y		; set jump low.
001985  3  60           	rts
001986  3               
001986  3               ; Jump table.
001986  3               
001986  3               jtab:
001986  3  F8 FA FC     	.byte 248,250,252
001989  3  FE FE FF     	.byte 254,254,255
00198C  3  FF FF 00 00  	.byte 255,255,0,0
001990  3  00 01 01 01  	.byte 0,1,1,1,2,2
001994  3  02 02        
001996  3  04 06 08 08  	.byte 4,6,8,8,8,99
00199A  3  08 63        
00199C  3               
00199C  3               ;------------------------------------------------
00199C  3               ; Random numbers code.
00199C  3               ; Pseudo-random number generator, 8-bit.
00199C  3               ;
00199C  3               ; Output:
00199C  3               ;  RND = random number
00199C  3               ;------------------------------------------------
00199C  3               
00199C  3               random:
00199C  3  AD 9A 13     	lda seed		; get last random number.
00199F  3  0A           	asl a
0019A0  3  0A           	asl a
0019A1  3  18           	clc
0019A2  3  6D 9A 13     	adc seed
0019A5  3  18           	clc
0019A6  3  69 45        	adc #$45
0019A8  3  8D 9A 13     	sta seed		; store new seed.
0019AB  3  8D 46 0E     	sta varrnd		; return number in variable.
0019AE  3  60           	rts
0019AF  3               
0019AF  3               ;--------------------------------------------------------
0019AF  3               ; Keys
0019AF  3               ;
0019AF  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
0019AF  3               ;             ||||||||
0019AF  3               ;             |||||||+> Right    KEY 0  - X
0019AF  3               ;             ||||||+-> Left     KEY 1  - Z
0019AF  3               ;             |||||+--> Down     KEY 2  - .
0019AF  3               ;             ||||+---> Up       KEY 3  - ;
0019AF  3               ;             |||+----> Fire1    KEY 4  - SPC
0019AF  3               ;             ||+-----> Fire2    KEY 5  - Q
0019AF  3               ;             |+------> Fire3    KEY 6  - P
0019AF  3               ;             +-------> Not used
0019AF  3               ;
0019AF  3               ;                       Option1  KEY 7  - 1
0019AF  3               ;                       Option2  KEY 8  - 2
0019AF  3               ;                       Option3  KEY 9  - 3
0019AF  3               ;                       Option4  KEY 10 - 4
0019AF  3               ;--------------------------------------------------------
0019AF  3               
0019AF  3               ;              X   Z   .   ;  SPC  Q   P
0019AF  3  42 61 68 48  keys:   .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
0019B3  3  62 10 37     
0019B6  3  30 31 11 12          .byte $30,$31,$11,$12                   ; menu options.
0019BA  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
0019BA  3               ;        .byte $21,$11,$01,$92                   ; menu options.
0019BA  3               
0019BA  3  42 61 68 48  jkeys:  .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
0019BE  3  62 10 37     
0019C1  3  30 31 11 12          .byte $30,$31,$11,$12                   ; menu options.
0019C5  3               ;jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
0019C5  3               ;        .byte $21,$11,$01,$92                   ; menu options.
0019C5  3               
0019C5  3               ;--------------------------------------------------------
0019C5  3               ; Keyboard test routine.
0019C5  3               ;
0019C5  3               ; Input:
0019C5  3               ;  A = key to read, high nibble=row and low nibble=col
0019C5  3               ;
0019C5  3               ; Output:
0019C5  3               ;  carry clr = key pressed
0019C5  3               ;  carry set = key not pressed
0019C5  3               ;--------------------------------------------------------
0019C5  3               
0019C5  3               ktest:
0019C5  3  85 61        	sta z80_a		; save key
0019C7  3  98           	tya
0019C8  3  48           	pha
0019C9  3               
0019C9  3               ; _BEEB keyboard read
0019C9  3  A5 61        	lda z80_a
0019CB  3  49 80        	eor #$80		; _BEEB just look for this key
0019CD  3  AA           	tax
0019CE  3               
0019CE  3  A9 79        	lda #$79
0019D0  3  20 F4 FF     	jsr OSBYTE
0019D3  3               
0019D3  3  8A           	txa
0019D4  3  30 04        	bmi pressed 	; _BEEB X is negative if key is pressed
0019D6  3               
0019D6  3  38           	sec			; key not pressed
0019D7  3  68           	pla
0019D8  3  A8           	tay
0019D9  3  60           	rts
0019DA  3               
0019DA  3               pressed:
0019DA  3  18           	clc			; key pressed
0019DB  3  68           	pla
0019DC  3  A8           	tay
0019DD  3  60           	rts
0019DE  3               
0019DE  3  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20
0019E2  3  10 20        
0019E4  3               
0019E4  3               ;-------------------------------------------------------
0019E4  3               ; Joystick and keyboard reading routines.
0019E4  3               ;
0019E4  3               ; contrl = 0, Keyboard
0019E4  3               ;          1, JoyKeyb
0019E4  3               ;          2, JoyMMC
0019E4  3               ;-------------------------------------------------------
0019E4  3               
0019E4  3               joykey:
0019E4  3  AD 1D 0E     	lda contrl 		; control flag.
0019E7  3  C9 01        	cmp #1
0019E9  3  D0 03        	bne :+
0019EB  3  4C 09 1A     	jmp joyjoy 		; read keyboard joystick
0019EE  3               :
0019EE  3  C9 02        	cmp #2
0019F0  3  D0 03        	bne :+
0019F2  3  4C 21 1A     	jmp joysin 		; read MMC joystick.
0019F5  3               :
0019F5  3               ; Keyboard controls.
0019F5  3               
0019F5  3  A9 00        	lda #0		 	; zero reading.
0019F7  3  85 64        	sta z80_e
0019F9  3               
0019F9  3  A0 06        	ldy #6	 		; address of last key.
0019FB  3               joyke0:
0019FB  3  B9 AF 19     	lda keys,y 		; get key from table.
0019FE  3  20 C5 19     	jsr ktest		; being pressed?
001A01  3  26 64        	rol z80_e 		; rotate into reading.
001A03  3               
001A03  3  88           	dey		 	; next key.
001A04  3  10 F5        	bpl joyke0 		; repeat for all keys.
001A06  3  4C 1A 1A     	jmp joyjo1 		; store the value.
001A09  3               
001A09  3               ; Keyboard joystick controls.
001A09  3               
001A09  3               joyjoy:
001A09  3  A9 00        	lda #0		 	; zero reading.
001A0B  3  85 64        	sta z80_e
001A0D  3               
001A0D  3  A0 06        	ldy #6	 		; address of last key.
001A0F  3               joyjo3:
001A0F  3  B9 BA 19     	lda jkeys,y 		; get key from table.
001A12  3  20 C5 19     	jsr ktest		; being pressed?
001A15  3  26 64        	rol z80_e 		; rotate into reading.
001A17  3               
001A17  3  88           	dey		 	; next key.
001A18  3  10 F5        	bpl joyjo3 		; repeat for all keys.
001A1A  3               joyjo1:
001A1A  3  A5 64        	lda z80_e 		; copy e register to accumulator.
001A1C  3               joyjo2:
001A1C  3  8D 1E 0E     	sta joyval		; remember value.
001A1F  3  60           	rts
001A20  3               
001A20  3               
001A20  3               ; AtoMMC joystick controls.
001A20  3               ; _BEEB TODO
001A20  3               ; Set PORTB direction
001A20  3               
001A20  3               joyinit:
001A20  3               .if 0
001A20  3               	lda #$ff   		; Write value to latch, bits 0-7 input
001A20  3               	sta DatReg
001A20  3               	jsr interwritedelay
001A20  3               	lda #$a1   		; Write direction in latch to PORTB
001A20  3               	sta CmdReg
001A20  3               
001A20  3               wait_until_not_busy:
001A20  3               	lda CmdReg
001A20  3               	bmi wait_until_not_busy
001A20  3               .endif
001A20  3  60           	rts
001A21  3               
001A21  3               ; Get PORTB value
001A21  3               
001A21  3               joysin:
001A21  3               .if 0
001A21  3               	lda #$a2   		; Read value PORTB in latch
001A21  3               	sta CmdReg
001A21  3               	jsr interwritedelay
001A21  3               
001A21  3               	lda DatReg		; Read joystick status
001A21  3               	and #$7f
001A21  3               	sta joyval
001A21  3               	sta $f0
001A21  3               
001A21  3               	lda keys+5		; check fire2
001A21  3               	jsr ktest
001A21  3               	bcs :+
001A21  3               	lda joyval
001A21  3               	and #$df
001A21  3               	sta joyval
001A21  3               :
001A21  3               	lda keys+6		; check fire3
001A21  3               	jsr ktest
001A21  3               	bcs :+
001A21  3               	lda joyval
001A21  3               	and #$bf
001A21  3               	sta joyval
001A21  3               :
001A21  3               	rts
001A21  3               
001A21  3               ; Short delay
001A21  3               ; Enough to intersperse 2 writes to the FATPIC.
001A21  3               
001A21  3               interwritedelay:
001A21  3               	lda  #8
001A21  3               	sec
001A21  3               loop:
001A21  3               	sbc  #1
001A21  3               	bne  loop
001A21  3               .endif
001A21  3  60           	rts
001A22  3               
001A22  3               ;tmp_byte:   .byte 0
001A22  3               
001A22  3               ;---------------------------------------------------------------
001A22  3               ; Getkey in column,row format
001A22  3               ;
001A22  3               ; Output:
001A22  3               ;  A = high nibble=row and low nibble=column key in matrix
001A22  3               ;---------------------------------------------------------------
001A22  3               
001A22  3               kget:
001A22  3  8E 82 16     	stx xtmp
001A25  3               
001A25  3               kget1:
001A25  3  A9 79        	lda #$79			; _BEEB read keyboard with OSBYTE &79
001A27  3  A2 01        	ldx #$01
001A29  3  20 F4 FF     	jsr OSBYTE
001A2C  3               
001A2C  3  E0 FF        	cpx #$ff
001A2E  3  F0 F5        	beq kget1
001A30  3               
001A30  3  8A           	txa
001A31  3               
001A31  3  AE 82 16     	ldx xtmp
001A34  3  60           	rts
001A35  3               
001A35  3               ;---------------------------------------------------------------
001A35  3               ; Display message.
001A35  3               ;
001A35  3               ; Input:
001A35  3               ;  A = message number
001A35  3               ;---------------------------------------------------------------
001A35  3               
001A35  3               dmsg:
001A35  3  AA           	tax
001A36  3  A9 C1        	lda #<msgdat		; pointer to messages.
001A38  3  85 66        	sta z80_l
001A3A  3  A9 34        	lda #>msgdat
001A3C  3  85 67        	sta z80_h
001A3E  3  20 6E 1B     	jsr getwrd		; get message number.
001A41  3               dmsg3:
001A41  3  20 55 1B     	jsr preprt		; pre-printing stuff.
001A44  3  20 AF 13     	jsr checkx		; make sure we"re in a printable range.
001A47  3  AD 97 1A     	lda prtmod		; print mode.
001A4A  3  D0 4C        	bne bmsg1		; no, double-height text.
001A4C  3               dmsg0:
001A4C  3  A5 67        	lda z80_h		; store string pointer.
001A4E  3  48           	pha
001A4F  3  A5 66        	lda z80_l
001A51  3  48           	pha
001A52  3               
001A52  3  A0 00        	ldy #0
001A54  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
001A56  3  29 7F        	and #127		; remove any end marker.
001A58  3  C9 0D        	cmp #13
001A5A  3  F0 24        	beq dmsg1
001A5C  3  20 52 15     	jsr pchar		; display character.
001A5F  3  20 3B 1B     	jsr nexpos 		; display position.
001A62  3  D0 03        	bne dmsg2		; not on a new line.
001A64  3  20 44 1B     	jsr nexlin		; next line down.
001A67  3               dmsg2:
001A67  3  68           	pla			; retrieve string pointer
001A68  3  85 66        	sta z80_l
001A6A  3  68           	pla
001A6B  3  85 67        	sta z80_h
001A6D  3               
001A6D  3  A0 00        	ldy #0
001A6F  3  B1 66        	lda (z80_hl),y		; fetch last character.
001A71  3  0A           	asl a  			; was it the end?
001A72  3  90 03        	bcc :+
001A74  3  4C F7 13     	jmp dscor2		; yes, job done.
001A77  3               :
001A77  3  E6 66        	inc z80_l		; next character to display.
001A79  3  D0 02        	bne :+
001A7B  3  E6 67        	inc z80_h
001A7D  3               :
001A7D  3  4C 4C 1A     	jmp dmsg0
001A80  3               dmsg1:
001A80  3  EE 4F 0E     	inc dispy
001A83  3  AD 4F 0E     	lda dispy
001A86  3  C9 18        	cmp #24
001A88  3  90 05        	bcc dmsg4
001A8A  3  A9 00        	lda #0
001A8C  3  8D 4F 0E     	sta dispy
001A8F  3               dmsg4:
001A8F  3  A9 00        	lda #0
001A91  3  8D 4E 0E     	sta dispx
001A94  3  4C 67 1A     	jmp dmsg2
001A97  3               
001A97  3  00           prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
001A98  3               
001A98  3               ;----------------------------------------------------------
001A98  3               ; Display message in big text.
001A98  3               ;
001A98  3               ; Input:
001A98  3               ;  HL = string pointer
001A98  3               ;----------------------------------------------------------
001A98  3               
001A98  3               bmsg1:
001A98  3  A0 00        	ldy #0
001A9A  3  B1 66        	lda (z80_hl),y 		; get character to display.
001A9C  3  29 7F        	and #127		; only want 7 bits.
001A9E  3  C9 0D        	cmp #13
001AA0  3  F0 13        	beq bmsg2
001AA2  3  20 CF 1A     	jsr bchar 		; display big char.
001AA5  3               bmsg3:
001AA5  3  A0 00        	ldy #0
001AA7  3  B1 66        	lda (z80_hl),y 		; look at last character.
001AA9  3  48           	pha
001AAA  3  E6 66        	inc z80_l 		; next character in list.
001AAC  3  D0 02        	bne :+
001AAE  3  E6 67        	inc z80_h
001AB0  3               :
001AB0  3  68           	pla
001AB1  3  0A           	asl a  			; was terminator flag set?
001AB2  3  90 E4        	bcc bmsg1		; no, keep going.
001AB4  3               :
001AB4  3  60           	rts
001AB5  3               bmsg2:
001AB5  3  A9 00        	lda #0
001AB7  3  8D 4E 0E     	sta dispx
001ABA  3  EE 4F 0E     	inc dispy
001ABD  3  EE 4F 0E     	inc dispy
001AC0  3  AD 4F 0E     	lda dispy
001AC3  3  C9 17        	cmp #23
001AC5  3  90 DE        	bcc bmsg3
001AC7  3  A9 00        	lda #0
001AC9  3  8D 4F 0E     	sta dispy
001ACC  3  4C A5 1A     	jmp bmsg3
001ACF  3               
001ACF  3               ;----------------------------------------------------------
001ACF  3               ; Big character display.
001ACF  3               ;
001ACF  3               ; Input:
001ACF  3               ;  A = character
001ACF  3               ;----------------------------------------------------------
001ACF  3               
001ACF  3               bchar:
001ACF  3  85 64        	sta z80_e		; save char in lb
001AD1  3  A9 00        	lda #0
001AD3  3  85 65        	sta z80_d		; reset hb
001AD5  3               
001AD5  3  06 64        	asl z80_e 		; multiply char by 8.
001AD7  3  26 65        	rol z80_d
001AD9  3  06 64        	asl z80_e
001ADB  3  26 65        	rol z80_d
001ADD  3  06 64        	asl z80_e
001ADF  3  26 65        	rol z80_d		; de = a*8
001AE1  3               
001AE1  3  18           	clc			; de = FontPtr + a*8
001AE2  3  A5 64        	lda z80_e
001AE4  3  6D 52 0E     	adc FontPtr 		; address of font.
001AE7  3  85 64        	sta z80_e
001AE9  3  A5 65        	lda z80_d
001AEB  3  6D 53 0E     	adc FontPtr+1
001AEE  3  85 65        	sta z80_d
001AF0  3               
001AF0  3  20 F4 14     	jsr gprad 		; get screen address.
001AF3  3               
001AF3  3  A2 00        	ldx #0			; height of character in font.
001AF5  3               bchar0:
001AF5  3  A0 00        	ldy #0
001AF7  3  B1 64        	lda (z80_de),y 		; get a bit of the font.
001AF9  3               
001AF9  3  49 00        	eor #TxtInvert		; Invert
001AFB  3               
001AFB  3  91 80        	sta (scraddr),y
001AFD  3  48           	pha
001AFE  3  20 66 1E     	jsr nline 		; next line down.
001B01  3  68           	pla
001B02  3  91 80        	sta (scraddr),y
001B04  3  20 66 1E     	jsr nline 		; next line down.
001B07  3               
001B07  3  18           	clc
001B08  3  E6 64        	inc z80_e 		; next line of font.
001B0A  3  D0 02        	bne :+
001B0C  3  E6 65        	inc z80_d
001B0E  3               :
001B0E  3  E8           	inx
001B0F  3  E0 08        	cpx #8
001B11  3  D0 E2        	bne bchar0
001B13  3               	
001B13  3  20 3B 1B     	jsr nexpos		; display position.
001B16  3  D0 06        	bne bchar2 		; not on a new line.
001B18  3               bchar3:
001B18  3  EE 4F 0E     	inc dispy
001B1B  3  20 44 1B     	jsr nexlin 		; next line check.
001B1E  3               bchar2:
001B1E  3  4C F7 13     	jmp dscor2		; tidy up line and column variables.
001B21  3               
001B21  3               
001B21  3               ;-------------------------------------------------
001B21  3               ; Display a character.
001B21  3               ;
001B21  3               ; Input:
001B21  3               ;  A = character
001B21  3               ;-------------------------------------------------
001B21  3               
001B21  3               achar:
001B21  3  85 63        	sta z80_b 		; copy to b.
001B23  3  20 55 1B     	jsr preprt 		; get ready to print.
001B26  3  A5 63        	lda z80_b		; character in accumulator.
001B28  3  AE 97 1A     	ldx prtmod 		; print mode.
001B2B  3  F0 03        	beq :+
001B2D  3  4C CF 1A     	jmp bchar 		; no, double-height text.
001B30  3               :
001B30  3  20 52 15     	jsr pchar 		; display character.
001B33  3  20 3B 1B     	jsr nexpos 		; display position.
001B36  3  F0 E0        	beq bchar3		; next line down.
001B38  3  4C 1E 1B     	jmp bchar2 		; tidy up.
001B3B  3               
001B3B  3               
001B3B  3               ;-------------------------------------------------
001B3B  3               ; Get next print column position.
001B3B  3               ;-------------------------------------------------
001B3B  3               
001B3B  3               nexpos:
001B3B  3  EE 4E 0E     	inc dispx		; move along one position.
001B3E  3  AD 4E 0E     	lda dispx 		; get coordinate.
001B41  3  29 1F        	and #31
001B43  3  60           	rts 			; return with status in zero flag.
001B44  3               
001B44  3               ;-------------------------------------------------
001B44  3               ; Get next print line position.
001B44  3               ;-------------------------------------------------
001B44  3               
001B44  3               nexlin:
001B44  3  EE 4F 0E     	inc dispy 		; newline.
001B47  3  AD 4F 0E     	lda dispy		; vertical position.
001B4A  3  C9 18        	cmp #24			; past screen edge?
001B4C  3  B0 01        	bcs :+
001B4E  3  60           	rts			; no, still okay.
001B4F  3               :
001B4F  3  A9 00        	lda #0			; restart at top.
001B51  3  8D 4F 0E     	sta dispy
001B54  3  60           	rts
001B55  3               
001B55  3               ;--------------------------------------------------------
001B55  3               ; Pre-print preliminaries.
001B55  3               ;--------------------------------------------------------
001B55  3               
001B55  3               preprt:
001B55  3  AD 52 0E     	lda FontPtr		; font pointer.
001B58  3  8D AD 13     	sta grbase		; set up graphics base.
001B5B  3  AD 53 0E     	lda FontPtr+1
001B5E  3  8D AE 13     	sta grbase+1
001B61  3               prescr:
001B61  3  AD 43 0E     	lda charx 		; display coordinates.
001B64  3  8D 4E 0E     	sta dispx		; set up general coordinates.
001B67  3  AD 44 0E     	lda chary
001B6A  3  8D 4F 0E     	sta dispy
001B6D  3  60           	rts
001B6E  3               
001B6E  3               ;--------------------------------------------------------------
001B6E  3               ; Get messagenr x in hl
001B6E  3               ;
001B6E  3               ; Input:
001B6E  3               ;  HL = pointer to message list
001B6E  3               ;  X  = message number.
001B6E  3               ;--------------------------------------------------------------
001B6E  3               
001B6E  3               getwrd:
001B6E  3  E0 00        	cpx #0
001B70  3  D0 01        	bne:+ 			; first word in list?
001B72  3  60           	rts 			; yep, don't search.
001B73  3               :
001B73  3  A0 00        	ldy #0
001B75  3               getwd0:
001B75  3  B1 66        	lda (z80_hl),y
001B77  3  48           	pha
001B78  3  E6 66        	inc z80_l
001B7A  3  D0 02        	bne :+
001B7C  3  E6 67        	inc z80_h
001B7E  3               :
001B7E  3  68           	pla
001B7F  3  C9 80        	cmp #128		; found end?
001B81  3  30 F2        	bmi getwd0		; no, carry on.
001B83  3  CA           	dex			; until we have right number.
001B84  3  D0 EF        	bne getwd0
001B86  3  60           	rts
001B87  3               
001B87  3               ;-----------------------------------------------------------
001B87  3               ; Bubble sort.
001B87  3               ;-----------------------------------------------------------
001B87  3               
001B87  3               bsort:
001B87  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
001B89  3  8D BF 1B     	sta qscnt
001B8C  3               
001B8C  3  A9 CF        	lda #<sprtab 		; sprite table.
001B8E  3  85 68        	sta z80_x
001B90  3  A9 22        	lda #>sprtab
001B92  3  85 69        	sta z80_i
001B94  3               bsort0:
001B94  3  A0 00        	ldy #0
001B96  3  B1 68        	lda (z80_ix),y 		; first sprite type.
001B98  3  C9 FF        	cmp #255 		; is it switched off?
001B9A  3  F0 32        	beq swemp		; yes, may need to switch another in here.
001B9C  3               
001B9C  3  A0 11        	ldy #TABSIZ
001B9E  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
001BA0  3  C9 FF        	cmp #255 		; is it enabled?
001BA2  3  F0 0A        	beq bsort2 		; no, nothing to swap.
001BA4  3               
001BA4  3  A0 14        	ldy #TABSIZ+3
001BA6  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
001BA8  3  A0 03        	ldy #3
001BAA  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
001BAC  3  90 12        	bcc bsort1		; next sprite is higher - may need to switch.
001BAE  3               bsort2:
001BAE  3  18           	clc
001BAF  3  A5 68        	lda z80_x
001BB1  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
001BB3  3  85 68        	sta z80_x
001BB5  3  90 02        	bcc :+
001BB7  3  E6 69        	inc z80_i
001BB9  3               :
001BB9  3  CE BF 1B     	dec qscnt 
001BBC  3  D0 D6        	bne bsort0		; repeat for remaining sprites.
001BBE  3  60           	rts
001BBF  3               
001BBF  3  00           qscnt:	.byte 0
001BC0  3               
001BC0  3               bsort1:
001BC0  3  A0 11        	ldy #TABSIZ
001BC2  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
001BC4  3  C9 FF        	cmp #255		; is it enabled?
001BC6  3  F0 E6        	beq bsort2		; no, nothing to swap.
001BC8  3  20 DC 1B     	jsr swspr		; swap positions.
001BCB  3  4C AE 1B     	jmp bsort2
001BCE  3               swemp:
001BCE  3  A0 11        	ldy #TABSIZ
001BD0  3  B1 68        	lda (z80_ix),y		; next table entry.
001BD2  3  C9 FF        	cmp #255		; is that one on?
001BD4  3  F0 D8        	beq bsort2		; no, nothing to swap.
001BD6  3  20 DC 1B     	jsr swspr		; swap positions.
001BD9  3  4C AE 1B     	jmp bsort2
001BDC  3               
001BDC  3               ; Swap sprites.
001BDC  3               
001BDC  3               swspr:
001BDC  3  A5 68        	lda z80_x		; table address 
001BDE  3  85 64        	sta z80_e		; copy to de pair.
001BE0  3  85 66        	sta z80_l		; copy to hl pair.
001BE2  3  A5 69        	lda z80_i
001BE4  3  85 67        	sta z80_h
001BE6  3  85 65        	sta z80_d
001BE8  3               
001BE8  3  18           	clc
001BE9  3  A5 66        	lda z80_l
001BEB  3  69 11        	adc #TABSIZ		; distance to second entry.
001BED  3  85 66        	sta z80_l
001BEF  3  90 02        	bcc :+
001BF1  3  E6 67        	inc z80_h
001BF3  3               :
001BF3  3  A9 11        	lda #TABSIZ		; bytes to swap.
001BF5  3  85 63        	sta z80_b
001BF7  3  A0 00        	ldy #0
001BF9  3               swspr0:
001BF9  3  B1 66        	lda (z80_hl),y		; fetch second byte.
001BFB  3  48           	pha
001BFC  3  B1 64        	lda (z80_de),y 		; fetch first byte.
001BFE  3  91 66        	sta (z80_hl),y 		; copy to second.
001C00  3  68           	pla
001C01  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
001C03  3               
001C03  3  E6 64        	inc z80_e 		; next byte.
001C05  3  D0 02        	bne :+	
001C07  3  E6 65        	inc z80_d
001C09  3               :
001C09  3  E6 66        	inc z80_l 		; next byte.
001C0B  3  D0 02        	bne :+
001C0D  3  E6 67        	inc z80_h
001C0F  3               :
001C0F  3  C6 63        	dec z80_b
001C11  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
001C13  3  60           	rts
001C14  3               
001C14  3               ;----------------------------------------------------
001C14  3               ; Process sprites.
001C14  3               ;----------------------------------------------------
001C14  3               
001C14  3               pspr:
001C14  3  A9 0C        	lda #NUMSPR		; sprites to process.
001C16  3  8D 3D 1C     	sta sprptr
001C19  3               
001C19  3  A9 CF        	lda #<sprtab 		; sprite table.
001C1B  3  85 68        	sta z80_x
001C1D  3  A9 22        	lda #>sprtab
001C1F  3  85 69        	sta z80_i
001C21  3               pspr1:
001C21  3  A0 00        	ldy #0
001C23  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
001C25  3  C9 09        	cmp #9 			; within range of sprite types?
001C27  3  B0 03        	bcs :+
001C29  3  20 3E 1C     	jsr pspr2 		; yes, process this one.
001C2C  3               :
001C2C  3  18           	clc
001C2D  3  A5 68        	lda z80_x
001C2F  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
001C31  3  85 68        	sta z80_x
001C33  3  90 02        	bcc :+
001C35  3  E6 69        	inc z80_i		; next sprite.
001C37  3               :
001C37  3  CE 3D 1C     	dec sprptr 		; repeat for remaining sprites.
001C3A  3  D0 E5        	bne pspr1
001C3C  3  60           	rts
001C3D  3               
001C3D  3  00           sprptr:	.byte 0
001C3E  3               
001C3E  3               pspr2:
001C3E  3  A5 68        	lda z80_x 		; store original sprite pointer.
001C40  3  8D 8B 1C     	sta ogptr
001C43  3  A5 69        	lda z80_i
001C45  3  8D 8C 1C     	sta ogptr+1
001C48  3  20 56 1C     	jsr pspr3		; do the routine.
001C4B  3               rtorg:
001C4B  3  AD 8B 1C     	lda ogptr 		; restore original pointer to sprite.
001C4E  3  85 68        	sta z80_x
001C50  3  AD 8C 1C     	lda ogptr+1
001C53  3  85 69        	sta z80_i
001C55  3               rtorg0:
001C55  3  60           	rts
001C56  3               
001C56  3               pspr3:
001C56  3  A9 8D        	lda #<evtyp0		; sprite type events list.
001C58  3  85 66        	sta z80_l
001C5A  3  A9 1C        	lda #>evtyp0
001C5C  3  85 67        	sta z80_h
001C5E  3               pspr4:
001C5E  3  B1 68        	lda (z80_ix),y
001C60  3  0A           	asl a			; double accumulator.
001C61  3  18           	clc
001C62  3  65 66        	adc z80_l
001C64  3  85 66        	sta z80_l
001C66  3  90 02        	bcc :+
001C68  3  E6 67        	inc z80_h
001C6A  3               :
001C6A  3  B1 66        	lda (z80_hl),y
001C6C  3  85 64        	sta z80_e 		; copy to de.
001C6E  3  48           	pha
001C6F  3               
001C6F  3  E6 66        	inc z80_l 		; next byte of address.
001C71  3  D0 02        	bne :+
001C73  3  E6 67        	inc z80_h
001C75  3               :
001C75  3  B1 66        	lda (z80_hl),y 		; address high.
001C77  3  85 65        	sta z80_d
001C79  3               
001C79  3  48           	pha	 		; swap address into hl.
001C7A  3  A5 67        	lda z80_h
001C7C  3  85 65        	sta z80_d
001C7E  3  68           	pla
001C7F  3  85 67        	sta z80_h
001C81  3  68           	pla
001C82  3  85 66        	sta z80_l
001C84  3  A5 66        	lda z80_l
001C86  3  85 64        	sta z80_e
001C88  3               	
001C88  3  6C 66 00     	jmp (z80_hl) 		; go there.
001C8B  3               
001C8B  3  00 00        ogptr:	.word 0			; original sprite pointer.
001C8D  3               
001C8D  3               ; Address of each sprite type's routine.
001C8D  3               
001C8D  3  F0 23        evtyp0:	.word evnt00
001C8F  3  D3 2B        evtyp1:	.word evnt01
001C91  3  B2 2C        evtyp2:	.word evnt02
001C93  3  22 2F        evtyp3:	.word evnt03
001C95  3  22 30        evtyp4:	.word evnt04
001C97  3  26 31        evtyp5:	.word evnt05
001C99  3  F9 31        evtyp6:	.word evnt06
001C9B  3  1B 33        evtyp7:	.word evnt07
001C9D  3  57 33        evtyp8:	.word evnt08
001C9F  3               
001C9F  3               ;--------------------------------------------------------------
001C9F  3               ; Display sprites.
001C9F  3               ;
001C9F  3               ; Input:
001C9F  3               ;  IX = sprite table
001C9F  3               ;--------------------------------------------------------------
001C9F  3               
001C9F  3               dspr:
001C9F  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
001CA1  3  8D 52 1D     	sta sprcnt
001CA4  3               
001CA4  3               dspr0:
001CA4  3  A0 00        	ldy #var_Type
001CA6  3  B1 68        	lda (z80_ix),y 		; get sprite type.
001CA8  3  C9 FF        	cmp #255 			; is it enabled?
001CAA  3  D0 46        	bne dspr1 			; yes, it needs deleting.
001CAC  3               
001CAC  3               dspr5:
001CAC  3  A0 05        	ldy #var_newType
001CAE  3  B1 68        	lda (z80_ix),y 		; new type.
001CB0  3  C9 FF        	cmp #255			; is it enabled?
001CB2  3  F0 03        	beq dspr2			; no, skip
001CB4  3  4C 41 1D     	jmp dspr3 			; yes, it needs drawing.
001CB7  3               
001CB7  3               dspr2:
001CB7  3  A0 05        	ldy #var_newType
001CB9  3  B1 68        	lda (z80_ix),y 		; copy new type.
001CBB  3  A0 00        	ldy #var_Type
001CBD  3  91 68        	sta (z80_ix),y
001CBF  3  A0 06        	ldy #var_newImage
001CC1  3  B1 68        	lda (z80_ix),y 		; copy new image number.
001CC3  3  A0 01        	ldy #var_Image
001CC5  3  91 68        	sta (z80_ix),y
001CC7  3  A0 07        	ldy #var_newFrame
001CC9  3  B1 68        	lda (z80_ix),y 		; copy new frame.
001CCB  3  A0 02        	ldy #var_Frame
001CCD  3  91 68        	sta (z80_ix),y
001CCF  3  A0 08        	ldy #var_newY
001CD1  3  B1 68        	lda (z80_ix),y 		; copy new y.
001CD3  3  A0 03        	ldy #var_Y
001CD5  3  91 68        	sta (z80_ix),y
001CD7  3  A0 09        	ldy #var_newX
001CD9  3  B1 68        	lda (z80_ix),y 		; copy new x.
001CDB  3  A0 04        	ldy #var_X
001CDD  3  91 68        	sta (z80_ix),y
001CDF  3               
001CDF  3  18           	clc
001CE0  3  A5 68        	lda z80_x
001CE2  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
001CE4  3  85 68        	sta z80_x
001CE6  3  A5 69        	lda z80_i
001CE8  3  69 00        	adc #0
001CEA  3  85 69        	sta z80_i 			; next sprite.
001CEC  3  CE 52 1D     	dec sprcnt
001CEF  3  D0 B3        	bne dspr0			; repeat for remaining sprites.
001CF1  3  60           	rts
001CF2  3               
001CF2  3               dspr1:
001CF2  3               	; _BEEB clipping code copied from CPC Engine
001CF2  3  A0 03        	ldy #var_Y
001CF4  3  B1 68        	lda (z80_ix), y		; old x coord
001CF6  3  C9 B9        	cmp #SpriteMaxY     ; beyond maximum?
001CF8  3  B0 B2        	bcs dspr5			; yes, don't delete it.
001CFA  3               
001CFA  3  A0 05        	ldy #var_newType
001CFC  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
001CFE  3  C9 FF        	cmp #255			; is this enabled?
001D00  3  D0 06        	bne dspr4 			; yes, display both.
001D02  3               
001D02  3               dspr6:
001D02  3  20 E2 1D     	jsr sspria 			; show single sprite.
001D05  3  4C B7 1C     	jmp dspr2
001D08  3               
001D08  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
001D08  3               
001D08  3               dspr4:
001D08  3               	; _BEEB clipping code copied from CPC Engine
001D08  3  A0 08        	ldy #var_newY
001D0A  3  B1 68        	lda (z80_ix), y		; old x coord
001D0C  3  C9 B9        	cmp #SpriteMaxY     ; beyond maximum?
001D0E  3  B0 F2        	bcs dspr6			; yes, don't display it.
001D10  3               
001D10  3  A0 04        	ldy #var_X
001D12  3  B1 68        	lda (z80_ix),y		; old x.
001D14  3  A0 09        	ldy #var_newX
001D16  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
001D18  3  D0 21        	bne dspr7 			; they differ, need to redraw.
001D1A  3               
001D1A  3  A0 03        	ldy #var_Y
001D1C  3  B1 68        	lda (z80_ix),y		; old y.
001D1E  3  A0 08        	ldy #var_newY
001D20  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001D22  3  D0 17        	bne dspr7			; they differ, need to redraw.
001D24  3               
001D24  3  A0 02        	ldy #var_Frame
001D26  3  B1 68        	lda (z80_ix),y 		; old frame.
001D28  3  A0 07        	ldy #var_newFrame
001D2A  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001D2C  3  D0 0D        	bne dspr7 			; they differ, need to redraw.
001D2E  3               
001D2E  3  A0 01        	ldy #var_Image
001D30  3  B1 68        	lda (z80_ix),y 		; old image.
001D32  3  A0 06        	ldy #var_newImage
001D34  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
001D36  3  D0 03        	bne dspr7 			; they differ, need to redraw.
001D38  3  4C B7 1C     	jmp dspr2			; everything is the same, don't redraw.
001D3B  3               
001D3B  3               dspr7:
001D3B  3  20 FA 1D     	jsr sspric 			; delete old sprite, draw new one simultaneously.
001D3E  3  4C B7 1C     	jmp dspr2
001D41  3               
001D41  3               dspr3:
001D41  3               	; _BEEB clipping code copied from CPC Engine
001D41  3  A0 08        	ldy #var_newY
001D43  3  B1 68        	lda (z80_ix), y		; old x coord
001D45  3  C9 B9        	cmp #SpriteMaxY     ; beyond maximum?
001D47  3  90 03        	bcc :+				; no, continue
001D49  3  4C B7 1C     	jmp dspr2			; yes, don't display it.
001D4C  3               :
001D4C  3  20 F4 1D     	jsr ssprib 			; show single sprite.
001D4F  3  4C B7 1C     	jmp dspr2
001D52  3               
001D52  3  00           sprcnt:	.byte 0
001D53  3               
001D53  3               ;-----------------------------------------
001D53  3               ; Get sprite address calculations.
001D53  3               ; gspran = new sprite, gsprad = old sprite.
001D53  3               ;
001D53  3               ; Input:
001D53  3               ;  IX = sprite address
001D53  3               ;-----------------------------------------
001D53  3               
001D53  3               gspran:
001D53  3  A0 08        	ldy #var_newY
001D55  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
001D57  3  8D 4F 0E     	sta dispy
001D5A  3  A0 09        	ldy #var_newX
001D5C  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
001D5E  3  8D 4E 0E     	sta dispx
001D61  3  A0 06        	ldy #var_newImage
001D63  3  B1 68        	lda (z80_ix),y 		; new sprite image.
001D65  3  20 DE 20     	jsr gfrm		; fetch start frame for this sprite.
001D68  3               
001D68  3  A0 00        	ldy #0
001D6A  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
001D6C  3  A0 07        	ldy #var_newFrame
001D6E  3  18           	clc
001D6F  3  71 68        	adc (z80_ix),y 		; new add frame number.
001D71  3  4C 92 1D     	jmp gspra0
001D74  3               
001D74  3               ;-----------------------------------------
001D74  3               ; Calculate old sprite address
001D74  3               ;
001D74  3               ; Input:
001D74  3               ;  IX = sprite address
001D74  3               ;
001D74  3               ; Output:
001D74  3               ;  B  = right byte mask
001D74  3               ;  C  = left byte mask
001D74  3               ;  DE = spriteframe address
001D74  3               ;  scraddr = screenaddress(dispx,dispy)
001D74  3               ;-----------------------------------------
001D74  3               
001D74  3               gsprad:
001D74  3  A0 03        	ldy #var_Y
001D76  3  B1 68        	lda (z80_ix),y		; y coordinate.
001D78  3  8D 4F 0E     	sta dispy
001D7B  3  A0 04        	ldy #var_X
001D7D  3  B1 68        	lda (z80_ix),y		; x coordinate.
001D7F  3  8D 4E 0E     	sta dispx
001D82  3  A0 01        	ldy #var_Image
001D84  3  B1 68        	lda (z80_ix),y 		; sprite image.
001D86  3  20 DE 20     	jsr gfrm 		; fetch start frame for this sprite.
001D89  3               
001D89  3  A0 00        	ldy #0
001D8B  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
001D8D  3  A0 02        	ldy #var_Frame
001D8F  3  18           	clc
001D90  3  71 68        	adc (z80_ix),y 		; add frame number.
001D92  3               
001D92  3               gspra0:
001D92  3  4A           	lsr a	  		; multiply by 128.
001D93  3  85 65        	sta z80_d 		; store in d.
001D95  3  A9 00        	lda #0
001D97  3  6A           	ror a
001D98  3  85 64        	sta z80_e 		; got low byte.
001D9A  3               
001D9A  3  18           	clc 			; address of play sprites.
001D9B  3  A5 64        	lda z80_e
001D9D  3  69 A2        	adc #<sprgfx
001D9F  3  85 64        	sta z80_e
001DA1  3  A5 65        	lda z80_d
001DA3  3  69 36        	adc #>sprgfx
001DA5  3  85 65        	sta z80_d
001DA7  3               
001DA7  3  AD 4E 0E     	lda dispx 		; y coordinate.
001DAA  3  29 06        	and #6 			; position within byte boundary.
001DAC  3  AA           	tax	 		; low byte of table displacement.
001DAD  3               
001DAD  3  0A           	asl a	  		; multiply by 32.
001DAE  3  0A           	asl a  			; already a multiple
001DAF  3  0A           	asl a  			; of 2, so just 4
001DB0  3  0A           	asl a  			; shifts needed.
001DB1  3               
001DB1  3  18           	clc 			; add to sprite address.
001DB2  3  65 64        	adc z80_e
001DB4  3  85 64        	sta z80_e
001DB6  3  90 02        	bcc :+
001DB8  3  E6 65        	inc z80_d
001DBA  3               :
001DBA  3  BD DA 1D     	lda spmask,x		 ; pointer to mask table.
001DBD  3  85 62        	sta z80_c 		; left mask.
001DBF  3  BD DB 1D     	lda spmask+1,x
001DC2  3  85 63        	sta z80_b 		; right mask.
001DC4  3               
001DC4  3               ;------------------------------------------------------------------
001DC4  3               ; Drop into screen address routine.
001DC4  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
001DC4  3               ;------------------------------------------------------------------
001DC4  3               
001DC4  3               scadd:
001DC4  3  AE 4F 0E     	ldx dispy
001DC7  3  AD 4E 0E     	lda dispx
001DCA  3  29 F8        	and #$f8
001DCC  3  18           	clc
001DCD  3  7D 00 06     	adc SCADTB_lb,x
001DD0  3  85 80        	sta scraddr
001DD2  3  BD 00 07     	lda SCADTB_hb,x
001DD5  3  69 00        	adc #0
001DD7  3  85 81        	sta scraddr+1
001DD9  3  60           	rts
001DDA  3               
001DDA  3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
001DDE  3  0F F0 03 FC  
001DE2  3               
001DE2  3               
001DE2  3               ;-----------------------------------------------------------------
001DE2  3               ; These are the sprite routines.
001DE2  3               ; sspria = single sprite, old (ix).
001DE2  3               ; ssprib = single sprite, new (ix+5).
001DE2  3               ; sspric = both sprites, old (ix) and new (ix+5).
001DE2  3               ;-----------------------------------------------------------------
001DE2  3               
001DE2  3               sspria:
001DE2  3  20 74 1D     	jsr gsprad		; get old sprite address.
001DE5  3               sspri2:
001DE5  3  A9 10        	lda #16			; vertical lines.
001DE7  3  8D F3 1D     	sta acnt
001DEA  3               sspri0:
001DEA  3  20 1D 1E     	jsr dline		; draw a line.
001DED  3  CE F3 1D     	dec acnt
001DF0  3  D0 F8        	bne sspri0		; repeat 16 times
001DF2  3  60           	rts
001DF3  3               
001DF3  3  00           acnt:	.byte 0
001DF4  3               
001DF4  3               ;-----------------------------------------------------------------
001DF4  3               
001DF4  3               ssprib:
001DF4  3  20 53 1D     	jsr gspran 		; get new sprite address.
001DF7  3  4C E5 1D     	jmp sspri2
001DFA  3               
001DFA  3               ;-----------------------------------------------------------------
001DFA  3               
001DFA  3               ccnt = $7c
001DFA  3               
001DFA  3               sspric:
001DFA  3  20 74 1D     	jsr gsprad 		; get old sprite address.
001DFD  3  20 E7 76     	jsr exx  		; store addresses.
001E00  3  20 53 1D     	jsr gspran 		; get new sprite addresses.
001E03  3               
001E03  3  A9 0F        	lda #15
001E05  3  85 7C        	sta ccnt
001E07  3               lloop:
001E07  3  20 1D 1E     	jsr dline 		; draw a line.
001E0A  3  20 E7 76     	jsr exx  		; restore old addresses.
001E0D  3  20 1D 1E     	jsr dline 		; delete a line.
001E10  3  20 E7 76     	jsr exx  		; flip to new sprite addresses.
001E13  3  C6 7C        	dec ccnt
001E15  3  D0 F0        	bne lloop
001E17  3               
001E17  3  20 1D 1E     	jsr dline		; draw a line.
001E1A  3  20 E7 76     	jsr exx 		; restore old addresses.
001E1D  3               
001E1D  3               ;-------------------------------------------------------------
001E1D  3               ; Drop through.
001E1D  3               ; Line drawn, now work out next target address.
001E1D  3               ;
001E1D  3               ; Input:
001E1D  3               ;  B  = right mask
001E1D  3               ;  C  = left mask
001E1D  3               ;  DE = spriteaddress
001E1D  3               ;  scraddr = screen address
001E1D  3               ;-------------------------------------------------------------
001E1D  3               
001E1D  3               dline:
001E1D  3  A0 00        	ldy #0
001E1F  3  B1 64        	lda (z80_de),y 		; graphic data.
001E21  3  25 62        	and z80_c 		; mask away what's not needed.
001E23  3  51 80        	eor (scraddr),y 	; XOR with what's there.
001E25  3  91 80        	sta (scraddr),y 	; bung it in.
001E27  3               
001E27  3               ; _BEEB screen arrangement
001E27  3  18           	clc
001E28  3  A5 80        	lda scraddr
001E2A  3  69 10        	adc #16
001E2C  3  85 80        	sta scraddr
001E2E  3  90 02        	bcc :+
001E30  3  E6 81        	inc scraddr+1
001E32  3               :
001E32  3               
001E32  3  B1 64        	lda (z80_de),y 		; fetch data.
001E34  3  25 63        	and z80_b 		; mask away unwanted bits.
001E36  3  51 80        	eor (scraddr),y 	; XOR with what's there.
001E38  3  91 80        	sta (scraddr),y 	; bung it in.
001E3A  3               
001E3A  3  E6 64        	inc z80_e 		; next graphic.
001E3C  3  D0 02        	bne :+
001E3E  3  E6 65        	inc z80_d
001E40  3               :
001E40  3               ; _BEEB screen arrangement
001E40  3  38           	sec
001E41  3  A5 80        	lda scraddr 		; one character cell to the left.
001E43  3  E9 08        	sbc #8
001E45  3  85 80        	sta scraddr
001E47  3  A5 81        	lda scraddr+1
001E49  3  E9 00        	sbc #0
001E4B  3  85 81        	sta scraddr+1
001E4D  3               
001E4D  3  B1 64        	lda (z80_de),y 		; second bit of data.
001E4F  3  51 80        	eor (scraddr),y 	; XOR with what's there.
001E51  3  91 80        	sta (scraddr),y 	; bung it in.
001E53  3               
001E53  3  E6 64        	inc z80_e 		; point to next line of data.
001E55  3  D0 02        	bne :+
001E57  3  E6 65        	inc z80_d
001E59  3               :
001E59  3               ; _BEEB screen arrangement
001E59  3  38           	sec
001E5A  3  A5 80        	lda scraddr 		; another char left.
001E5C  3  E9 08        	sbc #8
001E5E  3  85 80        	sta scraddr
001E60  3  A5 81        	lda scraddr+1
001E62  3  E9 00        	sbc #0
001E64  3  85 81        	sta scraddr+1
001E66  3               
001E66  3               ;----------------------------------------------------------------------
001E66  3               ; Line drawn, now work out next target address.
001E66  3               ;----------------------------------------------------------------------
001E66  3               
001E66  3               ; _BEEB screen arrangement
001E66  3               
001E66  3               nline:
001E66  3  A5 80        	lda scraddr 		; get low byte of address.
001E68  3  29 07        	and #7				
001E6A  3  C9 07        	cmp #7				; is this last line of row?
001E6C  3  F0 03        	beq beeb_next_row
001E6E  3               
001E6E  3               	; within same row
001E6E  3  E6 80        	inc scraddr			; new low byte of address.
001E70  3               ;	bne :+
001E70  3               ;	inc scraddr+1		; new high byte of address.
001E70  3               :
001E70  3  60           	rts
001E71  3               
001E71  3               beeb_next_row:
001E71  3  18           	clc
001E72  3  A5 80        	lda scraddr
001E74  3  69 F9        	adc #<(ScreenRowBytes-7)
001E76  3  85 80        	sta scraddr			; new low byte of address.
001E78  3  A5 81        	lda scraddr+1
001E7A  3  69 00        	adc #>(ScreenRowBytes-7)
001E7C  3  85 81        	sta scraddr+1		; new high byte of address.
001E7E  3  60           	rts
001E7F  3               
001E7F  3               ;-----------------------------------------------------------
001E7F  3               ; Animates a sprite.
001E7F  3               ;
001E7F  3               ; Input:
001E7F  3               ;  IX = sprite address
001E7F  3               ;  HL = last sprite address
001E7F  3               ;-----------------------------------------------------------
001E7F  3               
001E7F  3               animsp:
001E7F  3  A0 06        	ldy #var_newImage
001E81  3  B1 68        	lda (z80_ix),y		; sprite image
001E83  3  20 DE 20     	jsr gfrm		; get frame data.
001E86  3               
001E86  3  E6 66        	inc z80_l		; point to frames.
001E88  3  D0 02        	bne :+
001E8A  3  E6 67        	inc z80_h
001E8C  3               :
001E8C  3  A0 07        	ldy #var_newFrame
001E8E  3  B1 68        	lda (z80_ix),y		; sprite frame.
001E90  3  18           	clc
001E91  3  69 01        	adc #1			; next one along.
001E93  3  A0 00        	ldy #0
001E95  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
001E97  3  90 02        	bcc anims0		; no, not yet.
001E99  3  A9 00        	lda #0			; start at first frame.
001E9B  3               anims0:
001E9B  3  A0 07        	ldy #var_newFrame
001E9D  3  91 68        	sta (z80_ix),y		; new frame.
001E9F  3  60           	rts
001EA0  3               
001EA0  3               ;--------------------------------------------------------------
001EA0  3               ; Animate back
001EA0  3               ;
001EA0  3               ; Input:
001EA0  3               ;  IX = sprite address
001EA0  3               ;  HL = last sprite address
001EA0  3               ;--------------------------------------------------------------
001EA0  3               
001EA0  3               animbk:
001EA0  3  A0 06        	ldy #var_newImage
001EA2  3  B1 68        	lda (z80_ix),y		; sprite image.
001EA4  3  20 DE 20     	jsr gfrm		; get frame data.
001EA7  3               
001EA7  3  E6 66        	inc z80_l 		; point to frames.
001EA9  3  D0 02        	bne :+
001EAB  3  E6 67        	inc z80_h
001EAD  3               :
001EAD  3  A0 07        	ldy #var_newFrame
001EAF  3  B1 68        	lda (z80_ix),y 		; sprite frame.
001EB1  3  F0 03        	beq :+
001EB3  3  4C BA 1E     	jmp rtanb0 		; yes, start at end.
001EB6  3               :
001EB6  3  A0 00        	ldy #0
001EB8  3  B1 66        	lda (z80_hl),y 		; last sprite.
001EBA  3               rtanb0:
001EBA  3  38           	sec
001EBB  3  E9 01        	sbc #1			; next one along.
001EBD  3  4C 9B 1E     	jmp anims0		; set new frame.
001EC0  3               
001EC0  3               ;--------------------------------------------------------------
001EC0  3               ; Check for collision with other sprite, strict enforcement.
001EC0  3               ;
001EC0  3               ; Input:
001EC0  3               ;  b		= sprite to test for
001EC0  3               ;  ix		= current sprite pointer
001EC0  3               ;
001EC0  3               ; global:	b
001EC0  3               ; local:	x,y,hl,de,skptr
001EC0  3               ; calls:	-
001EC0  3               ;--------------------------------------------------------------
001EC0  3               
001EC0  3               sktyp:
001EC0  3  A9 CF        	lda #<sprtab				; sprite table.
001EC2  3  85 66        	sta z80_l
001EC4  3  A9 22        	lda #>sprtab
001EC6  3  85 67        	sta z80_h
001EC8  3               numsp2:
001EC8  3  A9 0C        	lda #NUMSPR				; number of sprites.
001ECA  3  8D 03 1F     	sta sktptr
001ECD  3               sktyp0:
001ECD  3  A5 66        	lda z80_l 				; store pointer to sprite.
001ECF  3  8D 01 1F     	sta skptr
001ED2  3  A5 67        	lda z80_h
001ED4  3  8D 02 1F     	sta skptr+1
001ED7  3               
001ED7  3  A0 00        	ldy #0
001ED9  3  B1 66        	lda (z80_hl),y 				; get sprite type.
001EDB  3  C5 63        	cmp z80_b				; is it the type we seek?
001EDD  3  F0 25        	beq coltyp				; yes, we can use this one.
001EDF  3               :
001EDF  3               sktyp1:
001EDF  3  18           	clc
001EE0  3  AD 01 1F     	lda skptr				; retrieve sprite pointer.
001EE3  3  69 11        	adc #TABSIZ				; size of each entry.
001EE5  3  85 66        	sta z80_l
001EE7  3  AD 02 1F     	lda skptr+1
001EEA  3  69 00        	adc #0
001EEC  3  85 67        	sta z80_h
001EEE  3  CE 03 1F     	dec sktptr					; one less iteration.
001EF1  3  D0 DA        	bne sktyp0				; keep going until we find a slot.
001EF3  3               :
001EF3  3  A9 00        	lda #0					; default to ROM address - no sprite.
001EF5  3  85 66        	sta z80_l
001EF7  3  85 67        	sta z80_h
001EF9  3  8D 01 1F     	sta skptr				; store pointer to sprite.
001EFC  3  8D 02 1F     	sta skptr+1
001EFF  3               
001EFF  3  18           	clc					; don't return with zero flag set.
001F00  3  60           	rts 					; didn't find one.
001F01  3               
001F01  3  00 00        skptr:	.word 0					; search pointer.
001F03  3  00           sktptr:	.byte 0
001F04  3               
001F04  3               coltyp:
001F04  3  A0 00        	ldy #0
001F06  3  B1 68        	lda (z80_ix),y				; current sprite type.
001F08  3  C5 63        	cmp z80_b				; seeking sprite of same type?
001F0A  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
001F0C  3               colty0:
001F0C  3  A0 09        	ldy #9					; distance to x position in table.
001F0E  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
001F10  3  85 64        	sta z80_e
001F12  3  88           	dey
001F13  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
001F15  3  85 65        	sta z80_d
001F17  3               
001F17  3               ; Drop into collision detection.
001F17  3               
001F17  3               colc16:
001F17  3  A0 09        	ldy #9
001F19  3  B1 68        	lda (z80_ix),y			 	; x coord.
001F1B  3  38           	sec					; subtract x.
001F1C  3  E5 64        	sbc z80_e
001F1E  3  B0 05        	bcs  colc1a 				; result is positive.
001F20  3  49 FF        	eor #$ff				; make negative positive.
001F22  3  18           	clc
001F23  3  69 01        	adc #1
001F25  3               colc1a:
001F25  3  C9 10        	cmp #16 				; within x range?
001F27  3  B0 B6        	bcs sktyp1				; no - they"ve missed.
001F29  3  85 62        	sta z80_c				; store difference.
001F2B  3               
001F2B  3  A0 08        	ldy #8
001F2D  3  B1 68        	lda (z80_ix),y				; y coord.
001F2F  3  38           	sec
001F30  3  E5 65        	sbc z80_d				; subtract y.
001F32  3  B0 05        	bcs colc1b				; result is positive.
001F34  3  49 FF        	eor #$ff				; make negative positive.
001F36  3  18           	clc
001F37  3  69 01        	adc #1
001F39  3               colc1b:
001F39  3  C9 10        	cmp #16					; within y range?
001F3B  3  B0 A2        	bcs sktyp1 				; no - they've missed.
001F3D  3  18           	clc					; add x difference.
001F3E  3  65 62        	adc z80_c
001F40  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
001F42  3  B0 02        	bcs :+
001F44  3  38           	sec
001F45  3  60           	rts 					; carry set if there's a collision.
001F46  3               :
001F46  3  4C DF 1E     	jmp sktyp1				; try next sprite in table.
001F49  3               colty1:
001F49  3  A5 68        	lda z80_x  				; compare the two.
001F4B  3  C5 66        	cmp z80_l
001F4D  3  D0 09        	bne end_col
001F4F  3  A5 69        	lda z80_i
001F51  3  C5 67        	cmp z80_h
001F53  3  D0 03        	bne end_col
001F55  3  4C DF 1E     	jmp sktyp1 				; addresses are identical.
001F58  3               end_col:
001F58  3  4C 0C 1F     	jmp colty0
001F5B  3               
001F5B  3               ;-----------------------------------------------------------
001F5B  3               ; Display number, left aligned
001F5B  3               ; 
001F5B  3               ; Input:
001F5B  3               ;  a		= number
001F5B  3               ;
001F5B  3               ; global:	-
001F5B  3               ; local:	a,y,bc,hl,displ0
001F5B  3               ; calls:	num2ch,dmsg3
001F5B  3               ;-----------------------------------------------------------
001F5B  3               
001F5B  3               disply:
001F5B  3  85 61        	sta z80_a
001F5D  3  A9 83        	lda #<displ0				; display workspace.
001F5F  3  85 62        	sta z80_c
001F61  3  A9 1F        	lda #>displ0
001F63  3  85 63        	sta z80_b
001F65  3  A5 61        	lda z80_a
001F67  3  20 20 11     	jsr num2ch				; convert accumulator to string.
001F6A  3               
001F6A  3  C6 62        	dec z80_c				; back one character.
001F6C  3  D0 02        	bne :+
001F6E  3  C6 63        	dec z80_b
001F70  3               :
001F70  3  A0 00        	ldy #0
001F72  3  B1 62        	lda (z80_bc),y				; fetch digit.
001F74  3  09 80        	ora #128				; insert end marker.
001F76  3  91 62        	sta (z80_bc),y				; new value.
001F78  3               
001F78  3  A9 83        	lda #<displ0				; display space.
001F7A  3  85 66        	sta z80_l
001F7C  3  A9 1F        	lda #>displ0
001F7E  3  85 67        	sta z80_h
001F80  3  4C 41 1A     	jmp dmsg3				; display the string.
001F83  3               
001F83  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
001F87  3               
001F87  3               ;----------------------------------------------------------------
001F87  3               ; Initialise screen.
001F87  3               ;
001F87  3               ; global:	roomtb,scno
001F87  3               ; local:	-
001F87  3               ; calls:	tstcs
001F87  3               ;----------------------------------------------------------------
001F87  3               
001F87  3               initsc:
001F87  3  AD AC 23     	lda roomtb 			; whereabouts in the map are we?
001F8A  3  20 95 1F     	jsr tstsc 			; find displacement.
001F8D  3  C9 FF        	cmp #255 			; is it valid?
001F8F  3  F0 03        	beq init_end 			; no, it's rubbish.
001F91  3  8D 29 0E     	sta scno			; store new room number.
001F94  3               init_end:
001F94  3  60           	rts
001F95  3               
001F95  3               ;----------------------------------------------------------------
001F95  3               ; Test screen.
001F95  3               ;
001F95  3               ; global:	-
001F95  3               ; local:	x
001F95  3               ; calls:	-
001F95  3               ;----------------------------------------------------------------
001F95  3               
001F95  3               tstsc:
001F95  3  8D A0 1F     	sta tmproom
001F98  3  18           	clc
001F99  3  69 0D        	adc #MAPWID 			; add width in case we"re negative.
001F9B  3  AA           	tax 				; add displacement to map data.
001F9C  3  BD AE 23     	lda mapdat-MAPWID,x 		; find room number there.
001F9F  3  60           	rts
001FA0  3               
001FA0  3  00           tmproom:	.byte 0
001FA1  3               
001FA1  3               ;--------------------------
001FA1  3               ; Screen left.
001FA1  3               ;--------------------------
001FA1  3               
001FA1  3               scrl:
001FA1  3  AD AC 23     	lda roomtb 			; present room table pointer.
001FA4  3  38           	sec
001FA5  3  E9 01        	sbc #1				; room left.
001FA7  3               scrl0:
001FA7  3  20 95 1F     	jsr tstsc			; test screen.
001FAA  3  C9 FF        	cmp #255			; is there a screen this way?
001FAC  3  D0 01        	bne :+
001FAE  3  60           	rts				; no, return to loop.
001FAF  3               :
001FAF  3  AD A0 1F     	lda tmproom			; restore room displacement.
001FB2  3  8D AC 23     	sta roomtb			; new room table position.
001FB5  3               scrl1:
001FB5  3  20 87 1F     	jsr initsc 			; set new screen.
001FB8  3  A9 02        	lda #2
001FBA  3  8D 4B 0E     	sta restfl 			; set it.
001FBD  3  60           	rts
001FBE  3               scrr:
001FBE  3  AD AC 23     	lda roomtb 			; room table pointer.
001FC1  3  18           	clc
001FC2  3  69 01        	adc #1				; room right.
001FC4  3  4C A7 1F     	jmp scrl0
001FC7  3               scru:
001FC7  3  AD AC 23     	lda roomtb 			; room table pointer.
001FCA  3  38           	sec
001FCB  3  E9 0D        	sbc #MAPWID 			; room up.
001FCD  3  4C A7 1F     	jmp scrl0
001FD0  3               scrd:
001FD0  3  AD AC 23     	lda roomtb 			; room table pointer.
001FD3  3  18           	clc
001FD4  3  69 0D        	adc #MAPWID 			; room down.
001FD6  3  4C A7 1F     	jmp scrl0
001FD9  3               
001FD9  3               ;-----------------------------------------
001FD9  3               ; Jump to new screen.
001FD9  3               ;-----------------------------------------
001FD9  3               
001FD9  3               nwscr:
001FD9  3  A2 00        	ldx #0				; start of map data.
001FDB  3               nwscr0:
001FDB  3  DD BB 23     	cmp mapdat,x
001FDE  3  F0 06        	beq nwscr1			; have we found a match for screen?
001FE0  3  E8           	inx 				; next room.
001FE1  3  E0 50        	cpx #80				; zero room count, 80 to search.
001FE3  3  D0 F6        	bne nwscr0			; keep looking.
001FE5  3  60           	rts
001FE6  3               nwscr1:
001FE6  3  8E AC 23     	stx roomtb			; set the map position.
001FE9  3  4C B5 1F     	jmp scrl1			; draw new room.
001FEC  3               
001FEC  3               
001FEC  3               ;----------------------------------------------------------
001FEC  3               ; Gravity processing.
001FEC  3               ;----------------------------------------------------------
001FEC  3               
001FEC  3               grav:
001FEC  3  A0 0D        	ldy #13
001FEE  3  B1 68        	lda (z80_ix),y			; jump pointer low.
001FF0  3  85 66        	sta z80_l
001FF2  3  A0 0E        	ldy #14
001FF4  3  B1 68        	lda (z80_ix),y			; jump pointer high.
001FF6  3  85 67        	sta z80_h
001FF8  3  05 66        	ora z80_l			; merge in low byte.
001FFA  3  D0 01        	bne :+
001FFC  3  60           	rts				; if neither is set, we're not in the air.
001FFD  3               :
001FFD  3  A0 00        	ldy #0
001FFF  3  B1 66        	lda (z80_hl),y			; pixels to move.
002001  3  85 61        	sta z80_a
002003  3  C9 63        	cmp #99				; reached the end?
002005  3  D0 06        	bne grav0			; no, continue.
002007  3               grav2:
002007  3  C6 66        	dec z80_l			; go back to previous value.
002009  3  B1 66        	lda (z80_hl),y			; fetch that from table.
00200B  3  85 61        	sta z80_a
00200D  3               grav0:
00200D  3  E6 66        	inc z80_l			; point to next table entry.
00200F  3  A5 66        	lda z80_l
002011  3  A0 0D        	ldy #13
002013  3  91 68        	sta (z80_ix),y			; store new pointer low.
002015  3  A5 67        	lda z80_h
002017  3  A0 0E        	ldy #14
002019  3  91 68        	sta (z80_ix),y			; store new pointer high.
00201B  3               grav1:
00201B  3  A5 61        	lda z80_a
00201D  3  D0 01        	bne :+				; any movement required?
00201F  3  60           	rts				; no, not this time.
002020  3               :
002020  3  A5 61        	lda z80_a
002022  3  C9 80        	cmp #128			; is it up or down?
002024  3  B0 15        	bcs gravu			; it's up.
002026  3               gravd:
002026  3  85 63        	sta z80_b			; set pixels to move.
002028  3               gravd0:
002028  3  20 AE 17     	jsr cangd			; can we go down?
00202B  3  D0 28        	bne gravst			; can't move down, so stop.
00202D  3  A0 08        	ldy #8
00202F  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
002031  3  18           	clc
002032  3  69 01        	adc #1
002034  3  91 68        	sta (z80_ix),y
002036  3  C6 63        	dec z80_b
002038  3  D0 EE        	bne gravd0
00203A  3  60           	rts
00203B  3               gravu:
00203B  3  49 FF        	eor #$ff			; flip the sign so it's positive.
00203D  3  18           	clc
00203E  3  69 01        	adc #1
002040  3  85 63        	sta z80_b			; set pixels to move.
002042  3               gravu0:
002042  3  20 76 17     	jsr cangu			; can we go up?
002045  3  D0 71        	bne ifalls			; can't move up, go down next.
002047  3  A0 08        	ldy #8
002049  3  B1 68        	lda (z80_ix),y
00204B  3  38           	sec
00204C  3  E9 01        	sbc #1
00204E  3  91 68        	sta (z80_ix),y			; adjust new x coord.
002050  3  C6 63        	dec z80_b
002052  3  D0 EE        	bne gravu0
002054  3  60           	rts
002055  3               gravst:
002055  3  A0 0D        	ldy #13
002057  3  B1 68        	lda (z80_ix),y			; jump pointer low.
002059  3  85 66        	sta z80_l
00205B  3  A0 0E        	ldy #14
00205D  3  B1 68        	lda (z80_ix),y			; jump pointer high.
00205F  3  85 67        	sta z80_h
002061  3               
002061  3  A9 00        	lda #0				; null value in pointer.
002063  3  A0 0D        	ldy #13
002065  3  91 68        	sta (z80_ix),y			; store new pointer low.
002067  3  C8           	iny
002068  3  91 68        	sta (z80_ix),y			; store new pointer high.
00206A  3               
00206A  3  A0 00        	ldy #0
00206C  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
00206E  3  C9 63        	cmp #99				; is it the end marker?
002070  3               evftf:
002070  3  F0 01        	beq :+				; yes, fallen too far.
002072  3  60           	rts
002073  3               :
002073  3  4C 40 34     	jmp evnt15			; EVENT FELLTOOFAR
002076  3               
002076  3               ;------------------------------------------------
002076  3               ; Initiate fall check.
002076  3               ;------------------------------------------------
002076  3               
002076  3               ifall:
002076  3  A0 0D        	ldy #13
002078  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
00207A  3  85 66        	sta z80_l
00207C  3  A0 0E        	ldy #14
00207E  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
002080  3  85 67        	sta z80_h			; high byte in accumulator.
002082  3  05 66        	ora z80_l			; merge in low byte.
002084  3  F0 01        	beq :+
002086  3  60           	rts				; if either is set, we're already in the air.
002087  3               :
002087  3  A0 09        	ldy #9
002089  3  B1 68        	lda (z80_ix),y			; y coordinate.
00208B  3  8D 4E 0E     	sta dispx
00208E  3               numsp7:
00208E  3  A0 08        	ldy #8
002090  3  B1 68        	lda (z80_ix),y			; look x coordinate.
002092  3  18           	clc
002093  3  69 10        	adc #16				; add 16 pixels.
002095  3  8D 4F 0E     	sta dispy			; set up test coordinates.
002098  3  20 36 19     	jsr tstbl			; get map address.
00209B  3  20 48 18     	jsr plchk			; block, platform check.
00209E  3  F0 01        	beq :+
0020A0  3  60           	rts				; it's solid, don't fall.
0020A1  3               :
0020A1  3  E6 86        	inc bufaddr			; look right one cell.
0020A3  3  20 48 18     	jsr plchk			; block, platform check.
0020A6  3  F0 01        	beq :+
0020A8  3  60           	rts				; it's solid, don't fall.
0020A9  3               :
0020A9  3  AD 4E 0E     	lda dispx			; y coordinate.
0020AC  3  29 07        	and #7				; position straddling block cells.
0020AE  3  F0 08        	beq ifalls			; no more checks needed.
0020B0  3  E6 86        	inc bufaddr			; look to third cell.
0020B2  3  20 48 18     	jsr plchk			; block, platform check.
0020B5  3  F0 01        	beq :+
0020B7  3  60           	rts				; it's solid, don't fall.
0020B8  3               :
0020B8  3               ifalls:
0020B8  3  A9 86        	lda #<jtab			; jump table start.
0020BA  3  85 66        	sta z80_l
0020BC  3  A9 19        	lda #>jtab
0020BE  3  85 67        	sta z80_h
0020C0  3               ifal0:
0020C0  3  E6 66        	inc z80_l			; point to next value.
0020C2  3  A0 00        	ldy #0
0020C4  3  B1 66        	lda (z80_hl),y			; fetch value.
0020C6  3  F0 F8        	beq ifal0			; no, get next value.
0020C8  3  C9 63        	cmp #99				; reached end of table?
0020CA  3  D0 01        	bne :+
0020CC  3  60           	rts				; yes, don't fall.
0020CD  3               :
0020CD  3  C9 80        	cmp #128			; is it going up?
0020CF  3  B0 EF        	bcs ifal0			; yes, looking for first movement down.
0020D1  3               
0020D1  3  A0 0D        	ldy #13
0020D3  3  A5 66        	lda z80_l
0020D5  3  91 68        	sta (z80_ix),y 			; set jump low.
0020D7  3  A0 0E        	ldy #14
0020D9  3  A5 67        	lda z80_h
0020DB  3  91 68        	sta (z80_ix),y 			; set jump high.
0020DD  3  60           	rts
0020DE  3               
0020DE  3               
0020DE  3               ;----------------------------------------------------
0020DE  3               ; Get frame data for a particular sprite.
0020DE  3               ; Input:
0020DE  3               ;  a		= framenumer
0020DE  3               ; Output:
0020DE  3               ;  hl		= frame address
0020DE  3               ;
0020DE  3               ; global:	hl,frmptr
0020DE  3               ; local:	-
0020DE  3               ; calls:	-
0020DE  3               ;----------------------------------------------------
0020DE  3               
0020DE  3               gfrm:
0020DE  3  0A           	asl a	 		 	; multiple of 2.
0020DF  3  18           	clc
0020E0  3  6D 50 0E     	adc frmptr 			; frames used by game.
0020E3  3  85 66        	sta z80_l
0020E5  3  AD 51 0E     	lda frmptr+1
0020E8  3  69 00        	adc #0
0020EA  3  85 67        	sta z80_h 			; point to frame start.
0020EC  3  60           	rts
0020ED  3               
0020ED  3               ;----------------------------------------------------
0020ED  3               ; Find sprite list for current room.
0020ED  3               ;
0020ED  3               ; global:	hl
0020ED  3               ; local:	x,y
0020ED  3               ; calls:	-
0020ED  3               ;----------------------------------------------------
0020ED  3               
0020ED  3               sprlst:
0020ED  3  A9 8D        	lda #<nmedat 			; list of enemy sprites.
0020EF  3  85 66        	sta z80_l
0020F1  3  A9 70        	lda #>nmedat
0020F3  3  85 67        	sta z80_h
0020F5  3  AE 29 0E     	ldx scno 			; screen number.
0020F8  3  D0 01        	bne sprls2 			; is it the first screen?
0020FA  3  60           	rts 				; yes, don't need to search data.
0020FB  3               sprls2:
0020FB  3  A0 00        	ldy #0
0020FD  3               sprls1:
0020FD  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
0020FF  3  C9 FF        	cmp #255			; is it an end marker?
002101  3  F0 0E        	beq sprls0 			; yes, end of this room.
002103  3               
002103  3  18           	clc 				; point to next sprite in list.
002104  3  A5 66        	lda z80_l
002106  3  69 04        	adc #NMESIZ
002108  3  85 66        	sta z80_l
00210A  3  90 02        	bcc :+
00210C  3  E6 67        	inc z80_h
00210E  3               :
00210E  3  4C FD 20     	jmp sprls1 			; continue until end of room.
002111  3               sprls0:
002111  3  E6 66        	inc z80_l 			; point to start of next screen.s
002113  3  D0 02        	bne :+
002115  3  E6 67        	inc z80_h
002117  3               :
002117  3  CA           	dex
002118  3  D0 E3        	bne sprls1 			; continue until room found.
00211A  3  60           	rts
00211B  3               
00211B  3               
00211B  3               ;----------------------------------------------------
00211B  3               ; Clear all but a single player sprite.
00211B  3               ;
00211B  3               ; global:	-
00211B  3               ; local:	x,y,ix
00211B  3               ; calls:	-
00211B  3               ;----------------------------------------------------
00211B  3               
00211B  3               nspr:
00211B  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00211D  3  8D 52 1D     	sta sprcnt
002120  3  A9 CF        	lda #<sprtab 			; sprite table.
002122  3  85 68        	sta z80_x
002124  3  A9 22        	lda #>sprtab
002126  3  85 69        	sta z80_i
002128  3               nspr0:
002128  3  A0 00        	ldy #0 				; fetch sprite type.
00212A  3  B1 68        	lda (z80_ix),y 			; is it a player?
00212C  3  F0 1B        	beq nspr1 			; yes, keep this one.
00212E  3               
00212E  3  A9 FF        	lda #255
002130  3  A0 00        	ldy #0 				; fetch sprite type.
002132  3  91 68        	sta (z80_ix),y 			; delete sprite.
002134  3  A0 05        	ldy #5
002136  3  91 68        	sta (z80_ix),y 			; remove next type.
002138  3               
002138  3  18           	clc	 			; next sprite.
002139  3  A5 68        	lda z80_x
00213B  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00213D  3  85 68        	sta z80_x
00213F  3  90 02        	bcc :+
002141  3  E6 69        	inc z80_i
002143  3               :
002143  3  CE 52 1D     	dec sprcnt	 			; one less space in the table.
002146  3  D0 E0        	bne nspr0
002148  3  60           	rts
002149  3               nspr1:
002149  3  A9 FF        	lda #255
00214B  3  A0 00        	ldy #0
00214D  3  91 68        	sta (z80_ix),y 			; delete sprite.
00214F  3               
00214F  3  18           	clc	 			; point to next sprite.
002150  3  A5 68        	lda z80_x
002152  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
002154  3  85 68        	sta z80_x
002156  3  90 02        	bcc :+
002158  3  E6 69        	inc z80_i
00215A  3               :
00215A  3  CE 52 1D     	dec sprcnt	 			; one less to do.
00215D  3  D0 01        	bne nspr2
00215F  3  60           	rts
002160  3               nspr2:
002160  3  A9 FF        	lda #255
002162  3  A0 00        	ldy #0
002164  3  91 68        	sta (z80_ix),y 			; delete sprite.
002166  3  A0 05        	ldy #5
002168  3  91 68        	sta (z80_ix),y 			; remove next type.
00216A  3               
00216A  3  18           	clc	 			; next sprite.
00216B  3  A5 68        	lda z80_x
00216D  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00216F  3  85 68        	sta z80_x
002171  3  90 02        	bcc :+
002173  3  E6 69        	inc z80_i
002175  3               :
002175  3  CE 52 1D     	dec sprcnt	 			; one less space in table.
002178  3  D0 E6        	bne nspr2
00217A  3  60           	rts
00217B  3               
00217B  3               ;----------------------------------------------------------
00217B  3               ; Two initialisation routines.
00217B  3               ; Initialise sprites - copy everything from list to table.
00217B  3               ;
00217B  3               ; global:	-
00217B  3               ; local:	x,y,ix
00217B  3               ; calls:	cpsp
00217B  3               ;----------------------------------------------------------
00217B  3               
00217B  3               ispr:
00217B  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00217D  3  8D 52 1D     	sta sprcnt
002180  3  A9 CF        	lda #<sprtab			; sprite table.
002182  3  85 68        	sta z80_x
002184  3  A9 22        	lda #>sprtab
002186  3  85 69        	sta z80_i
002188  3               ispr2:
002188  3  A0 00        	ldy #0
00218A  3  B1 66        	lda (z80_hl),y 			; fetch byte.
00218C  3  C9 FF        	cmp #255 			; is it an end marker?
00218E  3  D0 01        	bne :+
002190  3  60           	rts 				; yes, no more to do.
002191  3               :
002191  3               ispr1:
002191  3  A0 00        	ldy #0
002193  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
002195  3  C9 FF        	cmp #255 			; is it enabled yet?
002197  3  D0 08        	bne ispr4			; yes, try another slot.
002199  3               
002199  3  A0 05        	ldy #5
00219B  3  B1 68        	lda (z80_ix),y		 	; next type.
00219D  3  C9 FF        	cmp #255 			; is it enabled yet?
00219F  3  F0 11        	beq ispr3 			; no, process this one.
0021A1  3               ispr4:
0021A1  3  18           	clc 				; next sprite.
0021A2  3  A5 68        	lda z80_x
0021A4  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0021A6  3  85 68        	sta z80_x
0021A8  3  90 02        	bcc :+
0021AA  3  E6 69        	inc z80_i
0021AC  3               :
0021AC  3  CE 52 1D     	dec sprcnt
0021AF  3  D0 E0        	bne ispr1 			; repeat for remaining sprites.
0021B1  3  60           	rts  				; no more room in table.
0021B2  3               ispr3:
0021B2  3  20 06 22     	jsr cpsp			; initialise a sprite.
0021B5  3  CE 52 1D     	dec sprcnt			; one less space in the table.
0021B8  3  D0 CE        	bne ispr2
0021BA  3  60           	rts
0021BB  3               
0021BB  3               
0021BB  3               ;-----------------------------------------------------------------------
0021BB  3               ; Initialise sprites - but not player, we're keeping the old one.
0021BB  3               ;
0021BB  3               ; global:	-
0021BB  3               ; local:	x,y,ix
0021BB  3               ; calls:	cpsp
0021BB  3               ;-----------------------------------------------------------------------
0021BB  3               
0021BB  3               kspr:
0021BB  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
0021BD  3  A9 CF        	lda #<sprtab 			; sprite table.
0021BF  3  85 68        	sta z80_x
0021C1  3  A9 22        	lda #>sprtab
0021C3  3  85 69        	sta z80_i
0021C5  3               kspr2:
0021C5  3  A0 00        	ldy #0
0021C7  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0021C9  3  C9 FF        	cmp #255 			; is it an end marker?
0021CB  3  D0 01        	bne :+
0021CD  3  60           	rts 				; yes, no more to do.
0021CE  3               :
0021CE  3  C9 00        	cmp #0
0021D0  3  D0 0E        	bne kspr1 			; no, add to table as normal.
0021D2  3               
0021D2  3  18           	clc 				; next sprite.
0021D3  3  A5 66        	lda z80_l
0021D5  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
0021D7  3  85 66        	sta z80_l
0021D9  3  90 02        	bcc :+
0021DB  3  E6 67        	inc z80_h
0021DD  3               :
0021DD  3  4C C5 21     	jmp kspr2
0021E0  3               kspr1:
0021E0  3  A0 00        	ldy #0 				; fetch sprite type.
0021E2  3  B1 68        	lda (z80_ix),y
0021E4  3  C9 FF        	cmp #255 			; is it enabled yet?
0021E6  3  D0 08        	bne kspr4 			; yes, try another slot.
0021E8  3               
0021E8  3  A0 05        	ldy #5 				; next type.
0021EA  3  B1 68        	lda (z80_ix),y
0021EC  3  C9 FF        	cmp #255 			; is it enabled yet?
0021EE  3  F0 0F        	beq kspr3 			; no, process this one.
0021F0  3               kspr4:
0021F0  3  18           	clc 				; next sprite.
0021F1  3  A5 68        	lda z80_x
0021F3  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0021F5  3  85 68        	sta z80_x
0021F7  3  90 02        	bcc :+
0021F9  3  E6 69        	inc z80_i
0021FB  3               :
0021FB  3  CA           	dex	 			; repeat for remaining sprites.
0021FC  3  D0 E2        	bne kspr1
0021FE  3  60           	rts  				; no more room in table.
0021FF  3               kspr3:
0021FF  3  20 06 22     	jsr cpsp 			; copy sprite to table.
002202  3  CA           	dex	 			; one less space in the table.
002203  3  D0 C0        	bne kspr2
002205  3  60           	rts
002206  3               
002206  3               ;----------------------------------------------
002206  3               ; Copy sprite from list to table.
002206  3               ;
002206  3               ; global:	hl,ix
002206  3               ; local:	y
002206  3               ; calls:	evnt09
002206  3               ;----------------------------------------------
002206  3               
002206  3               cpsp:
002206  3  A0 00        	ldy #0					; fetch byte from table.
002208  3  B1 66        	lda (z80_hl),y
00220A  3               	; y=var_Type
00220A  3  91 68        	sta (z80_ix),y			; set up type.
00220C  3  A0 05        	ldy #var_newType
00220E  3  91 68        	sta (z80_ix),y 			; set up type.
002210  3               
002210  3  E6 66        	inc z80_l 				; move to next byte.
002212  3  D0 02        	bne :+
002214  3  E6 67        	inc z80_h
002216  3               :
002216  3  A0 00        	ldy #0 					; fetch byte from table.
002218  3  B1 66        	lda (z80_hl),y
00221A  3  A0 06        	ldy #var_newImage
00221C  3  91 68        	sta (z80_ix),y			; set up image.
00221E  3               
00221E  3  E6 66        	inc z80_l 				; move to next byte.
002220  3  D0 02        	bne :+
002222  3  E6 67        	inc z80_h
002224  3               :
002224  3  A0 00        	ldy #0
002226  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
002228  3  A0 08        	ldy #var_newY
00222A  3  91 68        	sta (z80_ix),y 			; set up coordinate.
00222C  3               
00222C  3  A9 C8        	lda #200 				; set initial coordinate off screen.
00222E  3  A0 03        	ldy #var_Y
002230  3  91 68        	sta (z80_ix),y
002232  3               
002232  3  E6 66        	inc z80_l 				; move to next byte.
002234  3  D0 02        	bne :+
002236  3  E6 67        	inc z80_h
002238  3               :
002238  3  A0 00        	ldy #0 					; fetch byte from table.
00223A  3  B1 66        	lda (z80_hl),y
00223C  3  A0 09        	ldy #var_newX
00223E  3  91 68        	sta (z80_ix),y 			; set up coordinate.
002240  3               
002240  3  E6 66        	inc z80_l 				; move to next byte.
002242  3  D0 02        	bne :+
002244  3  E6 67        	inc z80_h
002246  3               :
002246  3  A9 00        	lda #0					; zeroes in accumulator.
002248  3  A0 07        	ldy #var_newFrame 		; reset frame number.
00224A  3  91 68        	sta (z80_ix),y
00224C  3  A0 0A        	ldy #var_Direction 		; reset direction.
00224E  3  91 68        	sta (z80_ix),y
002250  3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
002252  3  91 68        	sta (z80_ix),y
002254  3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
002256  3  91 68        	sta (z80_ix),y
002258  3               
002258  3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
00225A  3  A0 10        	ldy #var_dataHi
00225C  3  91 68        	sta (z80_ix),y
00225E  3               evis0:
00225E  3  A5 69        	lda z80_i
002260  3  48           	pha
002261  3  A5 68        	lda z80_x
002263  3  48           	pha
002264  3  A5 67        	lda z80_h
002266  3  48           	pha
002267  3  A5 66        	lda z80_l
002269  3  48           	pha
00226A  3               
00226A  3  20 96 33     	jsr evnt09 				; perform event.
00226D  3               
00226D  3  68           	pla
00226E  3  85 66        	sta z80_l
002270  3  68           	pla
002271  3  85 67        	sta z80_h
002273  3  68           	pla
002274  3  85 68        	sta z80_x
002276  3  68           	pla
002277  3  85 69        	sta z80_i
002279  3               
002279  3  18           	clc
00227A  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
00227C  3  69 11        	adc #TABSIZ		 	; next sprite.
00227E  3  85 68        	sta z80_x
002280  3  90 02        	bcc :+
002282  3  E6 69        	inc z80_i
002284  3               :
002284  3  60           	rts
002285  3               
002285  3               
002285  3               ;-------------------------------------
002285  3               ; Clear the play area window.
002285  3               ;-------------------------------------
002285  3               
002285  3               clw:
002285  3  AD 20 0E     	lda wintop			; get coordinates of window.
002288  3  8D 4F 0E     	sta dispy			; put into dispx for calculation.
00228B  3  AD 21 0E     	lda winlft
00228E  3  8D 4E 0E     	sta dispx
002291  3               
002291  3  AD 22 0E     	lda winhgt			; height of window.
002294  3  8D EE 16     	sta rrow			; copy to b register.
002297  3               clw3:
002297  3  AD 23 0E     	lda winwid 			; width of window.
00229A  3  8D ED 16     	sta rcol
00229D  3               clw2:
00229D  3  20 F4 14     	jsr gprad 			; get print address.
0022A0  3  A9 00        	lda #0				; zero byte to write.
0022A2  3  A2 07        	ldx #7				; pixel height of each cell.
0022A4  3               clw1:
0022A4  3  BC 8D 15     	ldy scrtab,x
0022A7  3  91 80        	sta (scraddr),y 			; copy to screen.
0022A9  3  CA           	dex				; next screen row down.
0022AA  3  10 F8        	bpl clw1
0022AC  3               
0022AC  3  EE 4E 0E     	inc dispx			; next column.
0022AF  3  CE ED 16     	dec rcol			; one less to do.
0022B2  3  D0 E9        	bne clw2			; repeat for remaining columns.
0022B4  3               
0022B4  3  AD 21 0E     	lda winlft			; get left edge.
0022B7  3  8D 4E 0E     	sta dispx 			; reset x.
0022BA  3  EE 4F 0E     	inc dispy 			; next line down.
0022BD  3               
0022BD  3  CE EE 16     	dec rrow
0022C0  3  D0 D5        	bne clw3			; repeat down the screen.
0022C2  3               
0022C2  3  AD 20 0E     	lda wintop			; get coordinates of window.
0022C5  3  8D 44 0E     	sta chary			; put into display position.
0022C8  3  AD 21 0E     	lda winlft
0022CB  3  8D 43 0E     	sta charx
0022CE  3  60           	rts
0022CF  3               
0022CF  3               
0022CF  3               ;----------------------------------------------------------
0022CF  3               ; Effects code.
0022CF  3               ; Ticker routine is called 25 times per second.
0022CF  3               ;
0022CF  3               ; HL = txtscr = left text screen address
0022CF  3               ; DE = txtscr+txtwid-1 = right text screen address
0022CF  3               ; BC = txtpos = text scroller position
0022CF  3               ;
0022CF  3               ;----------------------------------------------------------
0022CF  3               
0022CF  3               .if sflag
0022CF  3               scrly:
0022CF  3               	rts
0022CF  3               	.word txtscr         	; get left screen address.
0022CF  3               	sta scr_l
0022CF  3               	lda txtscr+1
0022CF  3               	sta scr_l+1
0022CF  3               	sta scr_r+1
0022CF  3               	
0022CF  3               	stx xtmp
0022CF  3               
0022CF  3               	clc         		; get right screen address.
0022CF  3               	lda scr_l
0022CF  3               	adc txtwid
0022CF  3               	sta scr_r
0022CF  3               	dec scr_r
0022CF  3               scrly1:
0022CF  3               	ldy txtwid		; set txtwide
0022CF  3               	dey
0022CF  3               	clc
0022CF  3               scrly0:
0022CF  3               	lda (scr_l),y		; scroll 1 line
0022CF  3               	rol a
0022CF  3               	sta (scr_l),y
0022CF  3               	dey
0022CF  3               	bpl scrly0
0022CF  3               
0022CF  3               	clc			; point to next line
0022CF  3               	lda scr_l
0022CF  3               	adc #32
0022CF  3               	sta scr_l
0022CF  3               	bcc scrly1		; repeat 8 times
0022CF  3               
0022CF  3               	lda txtpos 		; get text pointer.
0022CF  3               	sta scr_txt
0022CF  3               	lda txtpos+1
0022CF  3               	sta scr_txt+1
0022CF  3               
0022CF  3               	ldy #0
0022CF  3               	lda (scr_txt),y 		; find character we're displaying.
0022CF  3               	and #127 		; remove end marker bit if applicable.
0022CF  3               	cmp #13			; is it newline?
0022CF  3               	bne scrly5 		; no, it's okay.
0022CF  3               	lda #32			; convert to a space instead.
0022CF  3               scrly5:
0022CF  3               	sta fntaddr		; calculate char address
0022CF  3               	lda #0
0022CF  3               	sta fntaddr+1
0022CF  3               	asl fntaddr  		; multiply char by 8.
0022CF  3               	rol fntaddr+1
0022CF  3               	asl fntaddr
0022CF  3               	rol fntaddr+1
0022CF  3               	asl fntaddr
0022CF  3               	rol fntaddr+1
0022CF  3               	lda fntaddr
0022CF  3               	clc
0022CF  3               	adc FontPtr
0022CF  3               	sta scrly3+1		; that's the low byte.
0022CF  3               	lda fntaddr+1
0022CF  3               	adc FontPtr+1
0022CF  3               	sta scrly3+2		; add displacement.
0022CF  3               
0022CF  3               	ldx #0
0022CF  3               scrly3:
0022CF  3               	lda $3333,x		; get image of char line.
0022CF  3               	and txtbit
0022CF  3               	beq scrly2		; don't plot pixel
0022CF  3               	ldy scrline,x
0022CF  3               	lda (scr_r),y
0022CF  3               	clc
0022CF  3               	ora #1
0022CF  3               	sta (scr_r),y		; plot pixel
0022CF  3               scrly2:
0022CF  3               	inx			; next line of char.
0022CF  3               	cpx #8
0022CF  3               	bne scrly3
0022CF  3               
0022CF  3               	lsr txtbit		; bit of text to display.
0022CF  3               	bcs :+
0022CF  3               	rts
0022CF  3               :
0022CF  3               	ldy #0
0022CF  3               	lda (scr_txt),y 	; what was the character?
0022CF  3               	asl a	  		; end of message?
0022CF  3               	bcs scrly4
0022CF  3               	inc txtpos
0022CF  3               	bne :+
0022CF  3               	inc txtpos+1
0022CF  3               :
0022CF  3               	jmp scrly6 		; not yet - continue.
0022CF  3               scrly4:
0022CF  3               	lda txtini 		; start of scrolling message.
0022CF  3               	sta txtpos
0022CF  3               	lda txtini+1
0022CF  3               	sta txtpos+1
0022CF  3               scrly6:
0022CF  3               	lda #128
0022CF  3               	sta txtbit
0022CF  3               	ldx xtmp
0022CF  3               	rts
0022CF  3               
0022CF  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
0022CF  3               
0022CF  3               ;-------------------------------------------------------
0022CF  3               ; Entry TICKER command
0022CF  3               ;
0022CF  3               ; Entry:
0022CF  3               ;  z80_b = message nr
0022CF  3               ;  z80_c = width
0022CF  3               ;-------------------------------------------------------
0022CF  3               
0022CF  3               iscrly:
0022CF  3               	jsr prescr 		; set up display position.
0022CF  3               
0022CF  3               	lda #<msgdat 		; text messages.
0022CF  3               	sta z80_l
0022CF  3               	lda #>msgdat
0022CF  3               	sta z80_h
0022CF  3               
0022CF  3               	lda z80_c 		; width.
0022CF  3               	sec
0022CF  3               	sbc #1			; subtract one.
0022CF  3               	cmp #32 		; is it between 1 and 32?
0022CF  3               	bcc :+
0022CF  3               	lda #$60
0022CF  3               	jmp iscrl0		; no, disable messages.
0022CF  3               :
0022CF  3               	ldx z80_b		; message number.
0022CF  3               	jsr getwrd 		; find message start.
0022CF  3               
0022CF  3               	lda z80_l		; set initial text position.
0022CF  3               	sta txtini
0022CF  3               	lda z80_h
0022CF  3               	sta txtini+1
0022CF  3               
0022CF  3               	lda #$ad		; code for lda adrr
0022CF  3               iscrl0:
0022CF  3               	sta scrly		; enable/disable scrolling routine.
0022CF  3               
0022CF  3               	jsr prescr 		; set up display position.
0022CF  3               	jsr gprad 		; get print address.
0022CF  3               
0022CF  3               	lda scraddr 		; set text screen address.
0022CF  3               	sta txtscr
0022CF  3               	lda scraddr+1
0022CF  3               	sta txtscr+1
0022CF  3               
0022CF  3               	lda z80_c		; width.
0022CF  3               	sta txtwid		; set width in working storage.
0022CF  3               
0022CF  3               	lda #128 		; start with leftmost bit.
0022CF  3               	sta txtbit
0022CF  3               
0022CF  3               	jmp scrly4
0022CF  3               .endif
0022CF  3               
0022CF  3               ;------------------------------------------------------------------
0022CF  3               ; Sprite table 
0022CF  3               ;------------------------------------------------------------------
0022CF  3               
0022CF  3               
0022CF  3               ; ix+0  = type.
0022CF  3               ; ix+1  = sprite image number.
0022CF  3               ; ix+2  = frame.
0022CF  3               ; ix+3  = y coord.
0022CF  3               ; ix+4  = x coord.
0022CF  3               
0022CF  3               ; ix+5  = new type.
0022CF  3               ; ix+6  = new image number.
0022CF  3               ; ix+7  = new frame.
0022CF  3               ; ix+8  = new y coord.
0022CF  3               ; ix+9  = new x coord.
0022CF  3               
0022CF  3               ; ix+10 = direction.
0022CF  3               ; ix+11 = parameter 1.
0022CF  3               ; ix+12 = parameter 2.
0022CF  3               ; ix+13 = jump pointer low.
0022CF  3               ; ix+14 = jump pointer high.
0022CF  3               ; ix+15 = data pointer low.
0022CF  3               ; ix+16 = data pointer high.
0022CF  3               
0022CF  3               ; block NUMSPR * TABSIZ,255
0022CF  3               
0022CF  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
0022D3  3  FF FF FF FF  
0022D7  3  FF FF FF FF  
00239B  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
00239F  3  FF FF FF 00  
0023A3  3  C0 78 00 00  
0023AC  3  07           roomtb:	.byte 7                      ; start room map offset.
0023AD  3               
0023AD  3               ; User routine.  Put your own code in here to be called with USER instruction.
0023AD  3               ; if USER has an argument it will be passed in the accumulator.
0023AD  3               
0023AD  3               user:
0023AD  3  60           	rts
0023AE  3               
0023AE  3               ; Everything below here will be generated by the editors.
0023AE  3               
0023AE  3               WINDOWTOP = 1
0023AE  3               WINDOWLFT = 0
0023AE  3               WINDOWHGT = 22
0023AE  3               WINDOWWID = 32 ;a
0023AE  3               MAPWID = 13
0023AE  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255
0023B2  3  FF FF FF FF  
0023B6  3  FF FF FF FF  
0023BB  3               mapdat:
0023BB  3  FF 00 01 02          .byte 255,0,1,2,3,4,5,6,7,8,9,10,255,255,11,12,13,14,15,16,17,18,19,20,21,255,255,22,23,255,255,255,255,255,255,255,255,255,255
0023BF  3  03 04 05 06  
0023C3  3  07 08 09 0A  
0023E2  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255
0023E6  3  FF FF FF FF  
0023EA  3  FF FF FF FF  
0023EF  3  01           stmap:  .byte 1
0023F0  3               
0023F0  3               evnt00:
0023F0  3  A9 15                lda #21
0023F2  3  CD 29 0E             cmp scno
0023F5  3  F0 03                beq *+5
0023F7  3  4C AE 24             jmp a00356
0023FA  3  A9 01                lda #1
0023FC  3  CD 34 0E             cmp varj
0023FF  3  F0 03                beq *+5
002401  3  4C 35 24             jmp a00131
002404  3  A9 00                lda #0
002406  3  CD 31 0E             cmp varg
002409  3  F0 03                beq *+5
00240B  3  4C 14 24             jmp a00066
00240E  3  A9 0A                lda #10
002410  3  A0 06                ldy #6
002412  3  91 68                sta (z80_ix),y
002414  3  A9 01        a00066: lda #1
002416  3  CD 31 0E             cmp varg
002419  3  F0 03                beq *+5
00241B  3  4C 24 24             jmp a00096
00241E  3  A9 0B                lda #11
002420  3  A0 06                ldy #6
002422  3  91 68                sta (z80_ix),y
002424  3  20 FA 17     a00096: jsr cangr
002427  3  F0 03                beq :+
002429  3  4C 35 24             jmp a00131
00242C  3               :
00242C  3  A0 09                ldy #9
00242E  3  B1 68                lda (z80_ix),y
002430  3  18                   clc
002431  3  69 02                adc #2
002433  3  91 68                sta (z80_ix),y
002435  3  A9 17        a00131: lda #23
002437  3  CD 2B 0E             cmp vara
00243A  3  90 03                bcc *+5
00243C  3  4C 4E 24             jmp a00172
00243F  3  A9 00                lda #0
002441  3  8D 32 0E             sta varh
002444  3  A9 01                lda #1
002446  3  8D 33 0E             sta vari
002449  3  A9 00                lda #0
00244B  3  8D 2B 0E             sta vara
00244E  3  A9 05        a00172: lda #DEADLY
002450  3  85 63                sta z80_b
002452  3  20 77 18             jsr tded
002455  3  C5 63                cmp z80_b
002457  3  F0 03                beq :+
002459  3  4C 62 24             jmp a00213
00245C  3               :
00245C  3  A9 07                lda #7
00245E  3  A0 05                ldy #5
002460  3  91 68                sta (z80_ix),y
002462  3  A9 03        a00213: lda #3
002464  3  85 63                sta z80_b
002466  3  20 C0 1E             jsr sktyp
002469  3  B0 03                bcs :+
00246B  3  4C 79 24             jmp a00256
00246E  3               :
00246E  3  A9 00                lda #0
002470  3  8D 32 0E             sta varh
002473  3  A9 07                lda #7
002475  3  A0 05                ldy #5
002477  3  91 68                sta (z80_ix),y
002479  3  A9 04        a00256: lda #4
00247B  3  85 63                sta z80_b
00247D  3  20 C0 1E             jsr sktyp
002480  3  B0 03                bcs :+
002482  3  4C 8B 24             jmp a00291
002485  3               :
002485  3  A9 07                lda #7
002487  3  A0 05                ldy #5
002489  3  91 68                sta (z80_ix),y
00248B  3  A9 05        a00291: lda #5
00248D  3  85 63                sta z80_b
00248F  3  20 C0 1E             jsr sktyp
002492  3  B0 03                bcs :+
002494  3  4C 9D 24             jmp a00326
002497  3               :
002497  3  A9 07                lda #7
002499  3  A0 05                ldy #5
00249B  3  91 68                sta (z80_ix),y
00249D  3  A9 01        a00326: lda #1
00249F  3  85 63                sta z80_b
0024A1  3  20 C0 1E             jsr sktyp
0024A4  3  B0 03                bcs :+
0024A6  3  4C AE 24             jmp a00356
0024A9  3               :
0024A9  3  A9 01                lda #1
0024AB  3  8D 4A 0E             sta nexlev
0024AE  3  A9 14        a00356: lda #20
0024B0  3  CD 29 0E             cmp scno
0024B3  3  F0 03                beq *+5
0024B5  3  4C D1 24             jmp a00415
0024B8  3  A9 17                lda #23
0024BA  3  CD 2B 0E             cmp vara
0024BD  3  90 03                bcc *+5
0024BF  3  4C D1 24             jmp a00415
0024C2  3  A9 64                lda #100
0024C4  3  20 6A 0E             jsr delay
0024C7  3  A9 00                lda #0
0024C9  3  8D 2B 0E             sta vara
0024CC  3  A9 01                lda #1
0024CE  3  8D 4A 0E             sta nexlev
0024D1  3  A9 03        a00415: lda #3
0024D3  3  85 63                sta z80_b
0024D5  3  20 C0 1E             jsr sktyp
0024D8  3  B0 03                bcs :+
0024DA  3  4C E5 24             jmp a00450
0024DD  3               :
0024DD  3  A9 01                lda #1
0024DF  3  8D 32 0E             sta varh
0024E2  3  4C EA 24             jmp a00458
0024E5  3  A9 00        a00450: lda #0
0024E7  3  8D 32 0E             sta varh
0024EA  3  A9 02        a00458: lda #2
0024EC  3  CD 29 0E             cmp scno
0024EF  3  F0 03                beq *+5
0024F1  3  4C 0D 25             jmp a00517
0024F4  3  A9 5A                lda #90
0024F6  3  CD 2B 0E             cmp vara
0024F9  3  90 03                bcc *+5
0024FB  3  4C 0D 25             jmp a00517
0024FE  3  A9 64                lda #100
002500  3  20 6A 0E             jsr delay
002503  3  A9 00                lda #0
002505  3  8D 2B 0E             sta vara
002508  3  A9 01                lda #1
00250A  3  8D 4A 0E             sta nexlev
00250D  3  A9 03        a00517: lda #3
00250F  3  CD 29 0E             cmp scno
002512  3  F0 03                beq *+5
002514  3  4C 30 25             jmp a00576
002517  3  A9 24                lda #36
002519  3  CD 2B 0E             cmp vara
00251C  3  90 03                bcc *+5
00251E  3  4C 30 25             jmp a00576
002521  3  A9 64                lda #100
002523  3  20 6A 0E             jsr delay
002526  3  A9 00                lda #0
002528  3  8D 2B 0E             sta vara
00252B  3  A9 01                lda #1
00252D  3  8D 4A 0E             sta nexlev
002530  3  A9 04        a00576: lda #4
002532  3  CD 29 0E             cmp scno
002535  3  F0 03                beq *+5
002537  3  4C 53 25             jmp a00635
00253A  3  A9 15                lda #21
00253C  3  CD 2B 0E             cmp vara
00253F  3  90 03                bcc *+5
002541  3  4C 53 25             jmp a00635
002544  3  A9 64                lda #100
002546  3  20 6A 0E             jsr delay
002549  3  A9 00                lda #0
00254B  3  8D 2B 0E             sta vara
00254E  3  A9 01                lda #1
002550  3  8D 4A 0E             sta nexlev
002553  3  A9 05        a00635: lda #5
002555  3  CD 29 0E             cmp scno
002558  3  F0 03                beq *+5
00255A  3  4C 76 25             jmp a00694
00255D  3  A9 76                lda #118
00255F  3  CD 2B 0E             cmp vara
002562  3  90 03                bcc *+5
002564  3  4C 76 25             jmp a00694
002567  3  A9 64                lda #100
002569  3  20 6A 0E             jsr delay
00256C  3  A9 00                lda #0
00256E  3  8D 2B 0E             sta vara
002571  3  A9 01                lda #1
002573  3  8D 4A 0E             sta nexlev
002576  3  A9 06        a00694: lda #6
002578  3  CD 29 0E             cmp scno
00257B  3  F0 03                beq *+5
00257D  3  4C 99 25             jmp a00753
002580  3  A9 15                lda #21
002582  3  CD 2B 0E             cmp vara
002585  3  90 03                bcc *+5
002587  3  4C 99 25             jmp a00753
00258A  3  A9 64                lda #100
00258C  3  20 6A 0E             jsr delay
00258F  3  A9 00                lda #0
002591  3  8D 2B 0E             sta vara
002594  3  A9 01                lda #1
002596  3  8D 4A 0E             sta nexlev
002599  3  A9 07        a00753: lda #7
00259B  3  CD 29 0E             cmp scno
00259E  3  F0 03                beq *+5
0025A0  3  4C BC 25             jmp a00812
0025A3  3  A9 22                lda #34
0025A5  3  CD 2B 0E             cmp vara
0025A8  3  90 03                bcc *+5
0025AA  3  4C BC 25             jmp a00812
0025AD  3  A9 64                lda #100
0025AF  3  20 6A 0E             jsr delay
0025B2  3  A9 00                lda #0
0025B4  3  8D 2B 0E             sta vara
0025B7  3  A9 01                lda #1
0025B9  3  8D 4A 0E             sta nexlev
0025BC  3  A9 08        a00812: lda #8
0025BE  3  CD 29 0E             cmp scno
0025C1  3  F0 03                beq *+5
0025C3  3  4C DF 25             jmp a00871
0025C6  3  A9 28                lda #40
0025C8  3  CD 2B 0E             cmp vara
0025CB  3  90 03                bcc *+5
0025CD  3  4C DF 25             jmp a00871
0025D0  3  A9 64                lda #100
0025D2  3  20 6A 0E             jsr delay
0025D5  3  A9 00                lda #0
0025D7  3  8D 2B 0E             sta vara
0025DA  3  A9 01                lda #1
0025DC  3  8D 4A 0E             sta nexlev
0025DF  3  A9 09        a00871: lda #9
0025E1  3  CD 29 0E             cmp scno
0025E4  3  F0 03                beq *+5
0025E6  3  4C 02 26             jmp a00930
0025E9  3  A9 0D                lda #13
0025EB  3  CD 2B 0E             cmp vara
0025EE  3  90 03                bcc *+5
0025F0  3  4C 02 26             jmp a00930
0025F3  3  A9 64                lda #100
0025F5  3  20 6A 0E             jsr delay
0025F8  3  A9 00                lda #0
0025FA  3  8D 2B 0E             sta vara
0025FD  3  A9 01                lda #1
0025FF  3  8D 4A 0E             sta nexlev
002602  3  A9 0A        a00930: lda #10
002604  3  CD 29 0E             cmp scno
002607  3  F0 03                beq *+5
002609  3  4C 25 26             jmp a00989
00260C  3  A9 16                lda #22
00260E  3  CD 2B 0E             cmp vara
002611  3  90 03                bcc *+5
002613  3  4C 25 26             jmp a00989
002616  3  A9 64                lda #100
002618  3  20 6A 0E             jsr delay
00261B  3  A9 00                lda #0
00261D  3  8D 2B 0E             sta vara
002620  3  A9 01                lda #1
002622  3  8D 4A 0E             sta nexlev
002625  3  A9 0B        a00989: lda #11
002627  3  CD 29 0E             cmp scno
00262A  3  F0 03                beq *+5
00262C  3  4C 48 26             jmp a01049
00262F  3  A9 1B                lda #27
002631  3  CD 2B 0E             cmp vara
002634  3  90 03                bcc *+5
002636  3  4C 48 26             jmp a01049
002639  3  A9 64                lda #100
00263B  3  20 6A 0E             jsr delay
00263E  3  A9 00                lda #0
002640  3  8D 2B 0E             sta vara
002643  3  A9 01                lda #1
002645  3  8D 4A 0E             sta nexlev
002648  3  A9 0C        a01049: lda #12
00264A  3  CD 29 0E             cmp scno
00264D  3  F0 03                beq *+5
00264F  3  4C 6B 26             jmp a01108
002652  3  A9 25                lda #37
002654  3  CD 2B 0E             cmp vara
002657  3  90 03                bcc *+5
002659  3  4C 6B 26             jmp a01108
00265C  3  A9 64                lda #100
00265E  3  20 6A 0E             jsr delay
002661  3  A9 00                lda #0
002663  3  8D 2B 0E             sta vara
002666  3  A9 01                lda #1
002668  3  8D 4A 0E             sta nexlev
00266B  3  A9 0D        a01108: lda #13
00266D  3  CD 29 0E             cmp scno
002670  3  F0 03                beq *+5
002672  3  4C 8E 26             jmp a01167
002675  3  A9 1F                lda #31
002677  3  CD 2B 0E             cmp vara
00267A  3  90 03                bcc *+5
00267C  3  4C 8E 26             jmp a01167
00267F  3  A9 64                lda #100
002681  3  20 6A 0E             jsr delay
002684  3  A9 00                lda #0
002686  3  8D 2B 0E             sta vara
002689  3  A9 01                lda #1
00268B  3  8D 4A 0E             sta nexlev
00268E  3  A9 0E        a01167: lda #14
002690  3  CD 29 0E             cmp scno
002693  3  F0 03                beq *+5
002695  3  4C C8 26             jmp a01276
002698  3  A9 35                lda #53
00269A  3  CD 2B 0E             cmp vara
00269D  3  90 03                bcc *+5
00269F  3  4C B1 26             jmp a01226
0026A2  3  A9 64                lda #100
0026A4  3  20 6A 0E             jsr delay
0026A7  3  A9 00                lda #0
0026A9  3  8D 2B 0E             sta vara
0026AC  3  A9 01                lda #1
0026AE  3  8D 4A 0E             sta nexlev
0026B1  3  A9 05        a01226: lda #DEADLY
0026B3  3  85 63                sta z80_b
0026B5  3  20 77 18             jsr tded
0026B8  3  C5 63                cmp z80_b
0026BA  3  F0 03                beq :+
0026BC  3  4C C8 26             jmp a01276
0026BF  3               :
0026BF  3  A0 09                ldy #9
0026C1  3  B1 68                lda (z80_ix),y
0026C3  3  18                   clc
0026C4  3  69 02                adc #2
0026C6  3  91 68                sta (z80_ix),y
0026C8  3  A9 0F        a01276: lda #15
0026CA  3  CD 29 0E             cmp scno
0026CD  3  F0 03                beq *+5
0026CF  3  4C FF 26             jmp a01375
0026D2  3  A9 11                lda #17
0026D4  3  CD 2B 0E             cmp vara
0026D7  3  90 03                bcc *+5
0026D9  3  4C EB 26             jmp a01335
0026DC  3  A9 64                lda #100
0026DE  3  20 6A 0E             jsr delay
0026E1  3  A9 00                lda #0
0026E3  3  8D 2B 0E             sta vara
0026E6  3  A9 01                lda #1
0026E8  3  8D 4A 0E             sta nexlev
0026EB  3  A9 05        a01335: lda #DEADLY
0026ED  3  85 63                sta z80_b
0026EF  3  20 77 18             jsr tded
0026F2  3  C5 63                cmp z80_b
0026F4  3  F0 03                beq :+
0026F6  3  4C FF 26             jmp a01375
0026F9  3               :
0026F9  3  A9 07                lda #7
0026FB  3  A0 05                ldy #5
0026FD  3  91 68                sta (z80_ix),y
0026FF  3  A9 10        a01375: lda #16
002701  3  CD 29 0E             cmp scno
002704  3  F0 03                beq *+5
002706  3  4C 36 27             jmp a01475
002709  3  A9 18                lda #24
00270B  3  CD 2B 0E             cmp vara
00270E  3  90 03                bcc *+5
002710  3  4C 22 27             jmp a01435
002713  3  A9 64                lda #100
002715  3  20 6A 0E             jsr delay
002718  3  A9 00                lda #0
00271A  3  8D 2B 0E             sta vara
00271D  3  A9 01                lda #1
00271F  3  8D 4A 0E             sta nexlev
002722  3  A9 05        a01435: lda #DEADLY
002724  3  85 63                sta z80_b
002726  3  20 77 18             jsr tded
002729  3  C5 63                cmp z80_b
00272B  3  F0 03                beq :+
00272D  3  4C 36 27             jmp a01475
002730  3               :
002730  3  A9 07                lda #7
002732  3  A0 05                ldy #5
002734  3  91 68                sta (z80_ix),y
002736  3  A9 11        a01475: lda #17
002738  3  CD 29 0E             cmp scno
00273B  3  F0 03                beq *+5
00273D  3  4C 59 27             jmp a01534
002740  3  A9 13                lda #19
002742  3  CD 2B 0E             cmp vara
002745  3  90 03                bcc *+5
002747  3  4C 59 27             jmp a01534
00274A  3  A9 64                lda #100
00274C  3  20 6A 0E             jsr delay
00274F  3  A9 00                lda #0
002751  3  8D 2B 0E             sta vara
002754  3  A9 01                lda #1
002756  3  8D 4A 0E             sta nexlev
002759  3  A9 12        a01534: lda #18
00275B  3  CD 29 0E             cmp scno
00275E  3  F0 03                beq *+5
002760  3  4C 7C 27             jmp a01594
002763  3  A9 26                lda #38
002765  3  CD 2B 0E             cmp vara
002768  3  90 03                bcc *+5
00276A  3  4C 7C 27             jmp a01594
00276D  3  A9 64                lda #100
00276F  3  20 6A 0E             jsr delay
002772  3  A9 00                lda #0
002774  3  8D 2B 0E             sta vara
002777  3  A9 01                lda #1
002779  3  8D 4A 0E             sta nexlev
00277C  3  A9 13        a01594: lda #19
00277E  3  CD 29 0E             cmp scno
002781  3  F0 03                beq *+5
002783  3  4C 9F 27             jmp a01653
002786  3  A9 09                lda #9
002788  3  CD 2B 0E             cmp vara
00278B  3  90 03                bcc *+5
00278D  3  4C 9F 27             jmp a01653
002790  3  A9 64                lda #100
002792  3  20 6A 0E             jsr delay
002795  3  A9 00                lda #0
002797  3  8D 2B 0E             sta vara
00279A  3  A9 01                lda #1
00279C  3  8D 4A 0E             sta nexlev
00279F  3  A9 06        a01653: lda #6
0027A1  3  85 63                sta z80_b
0027A3  3  20 C0 1E             jsr sktyp
0027A6  3  B0 03                bcs :+
0027A8  3  4C BE 27             jmp a01709
0027AB  3               :
0027AB  3  A9 00                lda #0
0027AD  3  CD 2C 0E             cmp varb
0027B0  3  F0 03                beq *+5
0027B2  3  4C BE 27             jmp a01709
0027B5  3  A9 07                lda #7
0027B7  3  A0 05                ldy #5
0027B9  3  91 68                sta (z80_ix),y
0027BB  3  20 7F 1E             jsr animsp
0027BE  3  A9 02        a01709: lda #2
0027C0  3  85 63                sta z80_b
0027C2  3  20 C0 1E             jsr sktyp
0027C5  3  B0 03                bcs :+
0027C7  3  4C DD 27             jmp a01766
0027CA  3               :
0027CA  3  A9 00                lda #0
0027CC  3  CD 2C 0E             cmp varb
0027CF  3  F0 03                beq *+5
0027D1  3  4C DD 27             jmp a01766
0027D4  3  A9 07                lda #7
0027D6  3  A0 05                ldy #5
0027D8  3  91 68                sta (z80_ix),y
0027DA  3  20 7F 1E             jsr animsp
0027DD  3  A9 01        a01766: lda #1
0027DF  3  CD 2C 0E             cmp varb
0027E2  3  F0 03                beq *+5
0027E4  3  4C FB 27             jmp a01821
0027E7  3  20 7F 1E             jsr animsp
0027EA  3  A9 02                lda #2
0027EC  3  A0 07                ldy #7
0027EE  3  D1 68                cmp (z80_ix),y
0027F0  3  F0 03                beq *+5
0027F2  3  4C FB 27             jmp a01821
0027F5  3  A9 0F                lda #15
0027F7  3  0A                   asl a
0027F8  3  8D E4 0E             sta sndtyp
0027FB  3  A9 00        a01821: lda #0
0027FD  3  CD 2C 0E             cmp varb
002800  3  F0 03                beq *+5
002802  3  4C 25 28             jmp a01898
002805  3  A9 00                lda #0
002807  3  CD 31 0E             cmp varg
00280A  3  F0 03                beq *+5
00280C  3  4C 15 28             jmp a01868
00280F  3  A9 00                lda #0
002811  3  A0 06                ldy #6
002813  3  91 68                sta (z80_ix),y
002815  3  A9 01        a01868: lda #1
002817  3  CD 31 0E             cmp varg
00281A  3  F0 03                beq *+5
00281C  3  4C 25 28             jmp a01898
00281F  3  A9 01                lda #1
002821  3  A0 06                ldy #6
002823  3  91 68                sta (z80_ix),y
002825  3  A9 01        a01898: lda #1
002827  3  CD 2C 0E             cmp varb
00282A  3  F0 03                beq *+5
00282C  3  4C 4C 28             jmp a01963
00282F  3  AD 2F 0E             lda vare
002832  3  38                   sec
002833  3  E9 01                sbc #1
002835  3  8D 2F 0E             sta vare
002838  3  A9 01                lda #1
00283A  3  CD 2F 0E             cmp vare
00283D  3  B0 03                bcs *+5
00283F  3  4C 4C 28             jmp a01963
002842  3  A9 01                lda #1
002844  3  8D 30 0E             sta varf
002847  3  A9 00                lda #0
002849  3  8D 2C 0E             sta varb
00284C  3  A9 05        a01963: lda #5
00284E  3  85 63                sta z80_b
002850  3  20 C0 1E             jsr sktyp
002853  3  B0 03                bcs :+
002855  3  4C 69 28             jmp a02020
002858  3               :
002858  3  20 FA 17             jsr cangr
00285B  3  F0 03                beq :+
00285D  3  4C 69 28             jmp a02020
002860  3               :
002860  3  A0 09                ldy #9
002862  3  B1 68                lda (z80_ix),y
002864  3  18                   clc
002865  3  69 02                adc #2
002867  3  91 68                sta (z80_ix),y
002869  3  A9 04        a02020: lda #4
00286B  3  85 63                sta z80_b
00286D  3  20 C0 1E             jsr sktyp
002870  3  B0 03                bcs :+
002872  3  4C 86 28             jmp a02077
002875  3               :
002875  3  20 E6 17             jsr cangl
002878  3  F0 03                beq :+
00287A  3  4C 86 28             jmp a02077
00287D  3               :
00287D  3  A0 09                ldy #9
00287F  3  B1 68                lda (z80_ix),y
002881  3  38                   sec
002882  3  E9 02                sbc #2
002884  3  91 68                sta (z80_ix),y
002886  3  AD 1E 0E     a02077: lda joyval
002889  3  29 10                and #16
00288B  3  F0 03                beq :+
00288D  3  4C BD 28             jmp a02177
002890  3               :
002890  3  20 6E 19             jsr jump
002893  3  A9 01                lda #1
002895  3  CD 2C 0E             cmp varb
002898  3  F0 03                beq *+5
00289A  3  4C BD 28             jmp a02177
00289D  3  A9 00                lda #0
00289F  3  CD 31 0E             cmp varg
0028A2  3  F0 03                beq *+5
0028A4  3  4C AD 28             jmp a02146
0028A7  3  A9 0A                lda #10
0028A9  3  A0 06                ldy #6
0028AB  3  91 68                sta (z80_ix),y
0028AD  3  A9 01        a02146: lda #1
0028AF  3  CD 31 0E             cmp varg
0028B2  3  F0 03                beq *+5
0028B4  3  4C BD 28             jmp a02177
0028B7  3  A9 0B                lda #11
0028B9  3  A0 06                ldy #6
0028BB  3  91 68                sta (z80_ix),y
0028BD  3  20 AE 17     a02177: jsr cangd
0028C0  3  F0 03                beq :+
0028C2  3  4C 0E 29             jmp a02322
0028C5  3               :
0028C5  3  20 22 17             jsr laddd
0028C8  3  F0 03                beq :+
0028CA  3  4C D0 28             jmp a02208
0028CD  3               :
0028CD  3  4C 0E 29             jmp a02322
0028D0  3  A9 05        a02208: lda #DEADLY
0028D2  3  85 63                sta z80_b
0028D4  3  20 77 18             jsr tded
0028D7  3  C5 63                cmp z80_b
0028D9  3  F0 03                beq :+
0028DB  3  4C E1 28             jmp a02240
0028DE  3               :
0028DE  3  4C 0E 29             jmp a02322
0028E1  3  20 76 20     a02240: jsr ifall
0028E4  3  A9 01                lda #1
0028E6  3  CD 2C 0E             cmp varb
0028E9  3  F0 03                beq *+5
0028EB  3  4C 0E 29             jmp a02322
0028EE  3  A9 00                lda #0
0028F0  3  CD 31 0E             cmp varg
0028F3  3  F0 03                beq *+5
0028F5  3  4C FE 28             jmp a02292
0028F8  3  A9 0A                lda #10
0028FA  3  A0 06                ldy #6
0028FC  3  91 68                sta (z80_ix),y
0028FE  3  A9 01        a02292: lda #1
002900  3  CD 31 0E             cmp varg
002903  3  F0 03                beq *+5
002905  3  4C 0E 29             jmp a02322
002908  3  A9 0B                lda #11
00290A  3  A0 06                ldy #6
00290C  3  91 68                sta (z80_ix),y
00290E  3  AD 1E 0E     a02322: lda joyval
002911  3  29 08                and #8
002913  3  F0 03                beq :+
002915  3  4C 4F 29             jmp a02445
002918  3               :
002918  3  20 3A 17             jsr laddu
00291B  3  F0 03                beq :+
00291D  3  4C 4F 29             jmp a02445
002920  3               :
002920  3  A9 00                lda #0
002922  3  CD 2C 0E             cmp varb
002925  3  F0 03                beq *+5
002927  3  4C 33 29             jmp a02388
00292A  3  A9 02                lda #2
00292C  3  A0 06                ldy #6
00292E  3  91 68                sta (z80_ix),y
002930  3  20 7F 1E             jsr animsp
002933  3  A9 01        a02388: lda #1
002935  3  CD 2C 0E             cmp varb
002938  3  F0 03                beq *+5
00293A  3  4C 46 29             jmp a02423
00293D  3  A9 0C                lda #12
00293F  3  A0 06                ldy #6
002941  3  91 68                sta (z80_ix),y
002943  3  20 7F 1E             jsr animsp
002946  3  A0 08        a02423: ldy #8
002948  3  B1 68                lda (z80_ix),y
00294A  3  38                   sec
00294B  3  E9 02                sbc #2
00294D  3  91 68                sta (z80_ix),y
00294F  3  AD 1E 0E     a02445: lda joyval
002952  3  29 04                and #4
002954  3  F0 03                beq :+
002956  3  4C 90 29             jmp a02568
002959  3               :
002959  3  20 22 17             jsr laddd
00295C  3  F0 03                beq :+
00295E  3  4C 90 29             jmp a02568
002961  3               :
002961  3  A9 00                lda #0
002963  3  CD 2C 0E             cmp varb
002966  3  F0 03                beq *+5
002968  3  4C 74 29             jmp a02511
00296B  3  A9 02                lda #2
00296D  3  A0 06                ldy #6
00296F  3  91 68                sta (z80_ix),y
002971  3  20 7F 1E             jsr animsp
002974  3  A9 01        a02511: lda #1
002976  3  CD 2C 0E             cmp varb
002979  3  F0 03                beq *+5
00297B  3  4C 87 29             jmp a02546
00297E  3  A9 0C                lda #12
002980  3  A0 06                ldy #6
002982  3  91 68                sta (z80_ix),y
002984  3  20 7F 1E             jsr animsp
002987  3  A0 08        a02546: ldy #8
002989  3  B1 68                lda (z80_ix),y
00298B  3  18                   clc
00298C  3  69 02                adc #2
00298E  3  91 68                sta (z80_ix),y
002990  3  AD 1E 0E     a02568: lda joyval
002993  3  29 01                and #1
002995  3  F0 03                beq :+
002997  3  4C B0 2A             jmp a03092
00299A  3               :
00299A  3  A9 EF                lda #239
00299C  3  A0 09                ldy #9
00299E  3  D1 68                cmp (z80_ix),y
0029A0  3  90 03                bcc *+5
0029A2  3  4C B1 29             jmp a02630
0029A5  3  20 BE 1F             jsr scrr
0029A8  3  A9 EF                lda #239
0029AA  3  A0 09                ldy #9
0029AC  3  91 68                sta (z80_ix),y
0029AE  3  4C B0 2A             jmp a03092
0029B1  3  20 FA 17     a02630: jsr cangr
0029B4  3  F0 03                beq :+
0029B6  3  4C B0 2A             jmp a03092
0029B9  3               :
0029B9  3  A9 00                lda #0
0029BB  3  CD 2C 0E             cmp varb
0029BE  3  F0 03                beq *+5
0029C0  3  4C CC 29             jmp a02679
0029C3  3  A9 00                lda #0
0029C5  3  A0 06                ldy #6
0029C7  3  91 68                sta (z80_ix),y
0029C9  3  20 7F 1E             jsr animsp
0029CC  3  A9 01        a02679: lda #1
0029CE  3  CD 2C 0E             cmp varb
0029D1  3  F0 03                beq *+5
0029D3  3  4C DF 29             jmp a02714
0029D6  3  A9 0A                lda #10
0029D8  3  A0 06                ldy #6
0029DA  3  91 68                sta (z80_ix),y
0029DC  3  20 7F 1E             jsr animsp
0029DF  3  A0 09        a02714: ldy #9
0029E1  3  B1 68                lda (z80_ix),y
0029E3  3  18                   clc
0029E4  3  69 02                adc #2
0029E6  3  91 68                sta (z80_ix),y
0029E8  3  A9 00                lda #0
0029EA  3  8D 31 0E             sta varg
0029ED  3  A9 06                lda #CUSTOM
0029EF  3  85 63                sta z80_b
0029F1  3  20 77 18             jsr tded
0029F4  3  C5 63                cmp z80_b
0029F6  3  F0 03                beq :+
0029F8  3  4C B0 2A             jmp a03092
0029FB  3               :
0029FB  3  A0 08                ldy #8
0029FD  3  B1 68                lda (z80_ix),y
0029FF  3  8D 2D 0E             sta varc
002A02  3  A0 09                ldy #9
002A04  3  B1 68                lda (z80_ix),y
002A06  3  8D 2E 0E             sta vard
002A09  3  AD 2D 0E             lda varc
002A0C  3  4A                   lsr a
002A0D  3  4A                   lsr a
002A0E  3  4A                   lsr a
002A0F  3  8D 2D 0E             sta varc
002A12  3  AD 2E 0E             lda vard
002A15  3  4A                   lsr a
002A16  3  4A                   lsr a
002A17  3  4A                   lsr a
002A18  3  8D 2E 0E             sta vard
002A1B  3  A9 02                lda #2
002A1D  3  85 62                sta z80_c
002A1F  3  AD 2D 0E             lda varc
002A22  3  18                   clc
002A23  3  65 62                adc z80_c
002A25  3  8D 2D 0E             sta varc
002A28  3  A9 02                lda #2
002A2A  3  85 62                sta z80_c
002A2C  3  AD 2E 0E             lda vard
002A2F  3  18                   clc
002A30  3  65 62                adc z80_c
002A32  3  8D 2E 0E             sta vard
002A35  3  AD 2D 0E             lda varc
002A38  3  8D 44 0E             sta chary
002A3B  3  AD 2E 0E             lda vard
002A3E  3  8D 43 0E             sta charx
002A41  3  AD 43 0E             lda charx
002A44  3  8D 4E 0E             sta dispx
002A47  3  AD 44 0E             lda chary
002A4A  3  8D 4F 0E             sta dispy
002A4D  3  A9 04                lda #4
002A4F  3  20 95 15             jsr pattr
002A52  3  A9 02                lda #2
002A54  3  85 62                sta z80_c
002A56  3  AD 2D 0E             lda varc
002A59  3  38                   sec
002A5A  3  E5 62                sbc z80_c
002A5C  3  8D 2D 0E             sta varc
002A5F  3  A9 00                lda #0
002A61  3  85 62                sta z80_c
002A63  3  AD 2E 0E             lda vard
002A66  3  18                   clc
002A67  3  65 62                adc z80_c
002A69  3  8D 2E 0E             sta vard
002A6C  3  AD 2D 0E             lda varc
002A6F  3  8D 44 0E             sta chary
002A72  3  AD 2E 0E             lda vard
002A75  3  8D 43 0E             sta charx
002A78  3  AD 43 0E             lda charx
002A7B  3  8D 4E 0E             sta dispx
002A7E  3  AD 44 0E             lda chary
002A81  3  8D 4F 0E             sta dispy
002A84  3  A9 06                lda #6
002A86  3  20 95 15             jsr pattr
002A89  3  A9 19                lda #25
002A8B  3  0A                   asl a
002A8C  3  8D E4 0E             sta sndtyp
002A8F  3  A9 19                lda #<25
002A91  3  85 66                sta z80_l
002A93  3  A9 00                lda #>25
002A95  3  85 67                sta z80_h
002A97  3  20 1B 14             jsr addsc
002A9A  3  A9 00                lda #0
002A9C  3  8D 44 0E             sta chary
002A9F  3  A9 19                lda #25
002AA1  3  8D 43 0E             sta charx
002AA4  3  20 C9 13             jsr dscor
002AA7  3  AD 2B 0E             lda vara
002AAA  3  18                   clc
002AAB  3  69 01                adc #1
002AAD  3  8D 2B 0E             sta vara
002AB0  3  AD 1E 0E     a03092: lda joyval
002AB3  3  29 02                and #2
002AB5  3  F0 03                beq :+
002AB7  3  4C D0 2B             jmp a03615
002ABA  3               :
002ABA  3  A9 01                lda #1
002ABC  3  A0 09                ldy #9
002ABE  3  D1 68                cmp (z80_ix),y
002AC0  3  B0 03                bcs *+5
002AC2  3  4C D1 2A             jmp a03153
002AC5  3  20 A1 1F             jsr scrl
002AC8  3  A9 01                lda #1
002ACA  3  A0 09                ldy #9
002ACC  3  91 68                sta (z80_ix),y
002ACE  3  4C D0 2B             jmp a03615
002AD1  3  20 E6 17     a03153: jsr cangl
002AD4  3  F0 03                beq :+
002AD6  3  4C D0 2B             jmp a03615
002AD9  3               :
002AD9  3  A9 00                lda #0
002ADB  3  CD 2C 0E             cmp varb
002ADE  3  F0 03                beq *+5
002AE0  3  4C EC 2A             jmp a03202
002AE3  3  A9 01                lda #1
002AE5  3  A0 06                ldy #6
002AE7  3  91 68                sta (z80_ix),y
002AE9  3  20 7F 1E             jsr animsp
002AEC  3  A9 01        a03202: lda #1
002AEE  3  CD 2C 0E             cmp varb
002AF1  3  F0 03                beq *+5
002AF3  3  4C FF 2A             jmp a03237
002AF6  3  A9 0B                lda #11
002AF8  3  A0 06                ldy #6
002AFA  3  91 68                sta (z80_ix),y
002AFC  3  20 7F 1E             jsr animsp
002AFF  3  A0 09        a03237: ldy #9
002B01  3  B1 68                lda (z80_ix),y
002B03  3  38                   sec
002B04  3  E9 02                sbc #2
002B06  3  91 68                sta (z80_ix),y
002B08  3  A9 01                lda #1
002B0A  3  8D 31 0E             sta varg
002B0D  3  A9 06                lda #CUSTOM
002B0F  3  85 63                sta z80_b
002B11  3  20 77 18             jsr tded
002B14  3  C5 63                cmp z80_b
002B16  3  F0 03                beq :+
002B18  3  4C D0 2B             jmp a03615
002B1B  3               :
002B1B  3  A0 08                ldy #8
002B1D  3  B1 68                lda (z80_ix),y
002B1F  3  8D 2D 0E             sta varc
002B22  3  A0 09                ldy #9
002B24  3  B1 68                lda (z80_ix),y
002B26  3  8D 2E 0E             sta vard
002B29  3  AD 2D 0E             lda varc
002B2C  3  4A                   lsr a
002B2D  3  4A                   lsr a
002B2E  3  4A                   lsr a
002B2F  3  8D 2D 0E             sta varc
002B32  3  AD 2E 0E             lda vard
002B35  3  4A                   lsr a
002B36  3  4A                   lsr a
002B37  3  4A                   lsr a
002B38  3  8D 2E 0E             sta vard
002B3B  3  A9 02                lda #2
002B3D  3  85 62                sta z80_c
002B3F  3  AD 2D 0E             lda varc
002B42  3  18                   clc
002B43  3  65 62                adc z80_c
002B45  3  8D 2D 0E             sta varc
002B48  3  A9 00                lda #0
002B4A  3  85 62                sta z80_c
002B4C  3  AD 2E 0E             lda vard
002B4F  3  18                   clc
002B50  3  65 62                adc z80_c
002B52  3  8D 2E 0E             sta vard
002B55  3  AD 2D 0E             lda varc
002B58  3  8D 44 0E             sta chary
002B5B  3  AD 2E 0E             lda vard
002B5E  3  8D 43 0E             sta charx
002B61  3  AD 43 0E             lda charx
002B64  3  8D 4E 0E             sta dispx
002B67  3  AD 44 0E             lda chary
002B6A  3  8D 4F 0E             sta dispy
002B6D  3  A9 04                lda #4
002B6F  3  20 95 15             jsr pattr
002B72  3  A9 02                lda #2
002B74  3  85 62                sta z80_c
002B76  3  AD 2D 0E             lda varc
002B79  3  38                   sec
002B7A  3  E5 62                sbc z80_c
002B7C  3  8D 2D 0E             sta varc
002B7F  3  A9 00                lda #0
002B81  3  85 62                sta z80_c
002B83  3  AD 2E 0E             lda vard
002B86  3  18                   clc
002B87  3  65 62                adc z80_c
002B89  3  8D 2E 0E             sta vard
002B8C  3  AD 2D 0E             lda varc
002B8F  3  8D 44 0E             sta chary
002B92  3  AD 2E 0E             lda vard
002B95  3  8D 43 0E             sta charx
002B98  3  AD 43 0E             lda charx
002B9B  3  8D 4E 0E             sta dispx
002B9E  3  AD 44 0E             lda chary
002BA1  3  8D 4F 0E             sta dispy
002BA4  3  A9 06                lda #6
002BA6  3  20 95 15             jsr pattr
002BA9  3  A9 19                lda #25
002BAB  3  0A                   asl a
002BAC  3  8D E4 0E             sta sndtyp
002BAF  3  A9 19                lda #<25
002BB1  3  85 66                sta z80_l
002BB3  3  A9 00                lda #>25
002BB5  3  85 67                sta z80_h
002BB7  3  20 1B 14             jsr addsc
002BBA  3  A9 00                lda #0
002BBC  3  8D 44 0E             sta chary
002BBF  3  A9 19                lda #25
002BC1  3  8D 43 0E             sta charx
002BC4  3  20 C9 13             jsr dscor
002BC7  3  AD 2B 0E             lda vara
002BCA  3  18                   clc
002BCB  3  69 01                adc #1
002BCD  3  8D 2B 0E             sta vara
002BD0  3  4C EC 1F     a03615: jmp grav
002BD3  3               evnt01:
002BD3  3  A9 00                lda #0
002BD5  3  CD 29 0E             cmp scno
002BD8  3  F0 03                beq *+5
002BDA  3  4C F4 2B             jmp b00061
002BDD  3  A9 04                lda #4
002BDF  3  85 63                sta z80_b
002BE1  3  20 C0 1E             jsr sktyp
002BE4  3  B0 03                bcs :+
002BE6  3  4C F4 2B             jmp b00061
002BE9  3               :
002BE9  3  A9 2D                lda #45
002BEB  3  0A                   asl a
002BEC  3  8D E4 0E             sta sndtyp
002BEF  3  A9 01                lda #1
002BF1  3  8D 4A 0E             sta nexlev
002BF4  3  A9 01        b00061: lda #1
002BF6  3  CD 29 0E             cmp scno
002BF9  3  F0 03                beq *+5
002BFB  3  4C 3F 2C             jmp b00217
002BFE  3  A0 0B                ldy #11
002C00  3  B1 68                lda (z80_ix),y
002C02  3  18                   clc
002C03  3  69 01                adc #1
002C05  3  A0 0B                ldy #11
002C07  3  91 68                sta (z80_ix),y
002C09  3  A9 64                lda #100
002C0B  3  A0 0B                ldy #11
002C0D  3  D1 68                cmp (z80_ix),y
002C0F  3  90 03                bcc *+5
002C11  3  4C 2F 2C             jmp b00185
002C14  3  A0 08                ldy #8
002C16  3  B1 68                lda (z80_ix),y
002C18  3  38                   sec
002C19  3  E9 02                sbc #2
002C1B  3  91 68                sta (z80_ix),y
002C1D  3  A9 0A                lda #10
002C1F  3  0A                   asl a
002C20  3  8D E4 0E             sta sndtyp
002C23  3  A9 14                lda #20
002C25  3  0A                   asl a
002C26  3  8D E4 0E             sta sndtyp
002C29  3  A9 1E                lda #30
002C2B  3  0A                   asl a
002C2C  3  8D E4 0E             sta sndtyp
002C2F  3  A9 AA        b00185: lda #170
002C31  3  A0 0B                ldy #11
002C33  3  D1 68                cmp (z80_ix),y
002C35  3  90 03                bcc *+5
002C37  3  4C 3F 2C             jmp b00217
002C3A  3  A9 01                lda #1
002C3C  3  8D 4A 0E             sta nexlev
002C3F  3  A9 15        b00217: lda #21
002C41  3  CD 29 0E             cmp scno
002C44  3  F0 03                beq *+5
002C46  3  4C 67 2C             jmp b00295
002C49  3  20 6E 19             jsr jump
002C4C  3  A0 0B                ldy #11
002C4E  3  B1 68                lda (z80_ix),y
002C50  3  18                   clc
002C51  3  69 01                adc #1
002C53  3  A0 0B                ldy #11
002C55  3  91 68                sta (z80_ix),y
002C57  3  A9 AF                lda #175
002C59  3  A0 0B                ldy #11
002C5B  3  D1 68                cmp (z80_ix),y
002C5D  3  90 03                bcc *+5
002C5F  3  4C 67 2C             jmp b00295
002C62  3  A9 01                lda #1
002C64  3  8D 4A 0E             sta nexlev
002C67  3  20 7F 1E     b00295: jsr animsp
002C6A  3  A9 00                lda #0
002C6C  3  85 63                sta z80_b
002C6E  3  20 C0 1E             jsr sktyp
002C71  3  B0 03                bcs :+
002C73  3  4C AF 2C             jmp b00429
002C76  3               :
002C76  3  A9 64                lda #100
002C78  3  0A                   asl a
002C79  3  8D E4 0E             sta sndtyp
002C7C  3  A9 46                lda #70
002C7E  3  0A                   asl a
002C7F  3  8D E4 0E             sta sndtyp
002C82  3  A9 01                lda #1
002C84  3  8D 2C 0E             sta varb
002C87  3  A9 AA                lda #170
002C89  3  8D 2F 0E             sta vare
002C8C  3  A9 00                lda #0
002C8E  3  8D 30 0E             sta varf
002C91  3  A9 FF                lda #255
002C93  3  A0 05                ldy #5
002C95  3  91 68                sta (z80_ix),y
002C97  3  A9 64                lda #<100
002C99  3  85 66                sta z80_l
002C9B  3  A9 00                lda #>100
002C9D  3  85 67                sta z80_h
002C9F  3  20 1B 14             jsr addsc
002CA2  3  A9 00                lda #0
002CA4  3  8D 44 0E             sta chary
002CA7  3  A9 19                lda #25
002CA9  3  8D 43 0E             sta charx
002CAC  3  20 C9 13             jsr dscor
002CAF  3  4C EC 1F     b00429: jmp grav
002CB2  3               evnt02:
002CB2  3  A9 0E                lda #14
002CB4  3  CD 29 0E             cmp scno
002CB7  3  F0 03                beq *+5
002CB9  3  4C D0 2C             jmp c00059
002CBC  3  A9 05                lda #DEADLY
002CBE  3  85 63                sta z80_b
002CC0  3  20 77 18             jsr tded
002CC3  3  C5 63                cmp z80_b
002CC5  3  F0 03                beq :+
002CC7  3  4C D0 2C             jmp c00059
002CCA  3               :
002CCA  3  A9 08                lda #8
002CCC  3  A0 05                ldy #5
002CCE  3  91 68                sta (z80_ix),y
002CD0  3  A9 0F        c00059: lda #15
002CD2  3  CD 29 0E             cmp scno
002CD5  3  F0 03                beq *+5
002CD7  3  4C EE 2C             jmp c00117
002CDA  3  A9 05                lda #DEADLY
002CDC  3  85 63                sta z80_b
002CDE  3  20 77 18             jsr tded
002CE1  3  C5 63                cmp z80_b
002CE3  3  F0 03                beq :+
002CE5  3  4C EE 2C             jmp c00117
002CE8  3               :
002CE8  3  A9 08                lda #8
002CEA  3  A0 05                ldy #5
002CEC  3  91 68                sta (z80_ix),y
002CEE  3  A9 10        c00117: lda #16
002CF0  3  CD 29 0E             cmp scno
002CF3  3  F0 03                beq *+5
002CF5  3  4C 0C 2D             jmp c00174
002CF8  3  A9 05                lda #DEADLY
002CFA  3  85 63                sta z80_b
002CFC  3  20 77 18             jsr tded
002CFF  3  C5 63                cmp z80_b
002D01  3  F0 03                beq :+
002D03  3  4C 0C 2D             jmp c00174
002D06  3               :
002D06  3  A9 08                lda #8
002D08  3  A0 05                ldy #5
002D0A  3  91 68                sta (z80_ix),y
002D0C  3  A9 14        c00174: lda #20
002D0E  3  CD 29 0E             cmp scno
002D11  3  F0 03                beq *+5
002D13  3  4C 21 2D             jmp c00209
002D16  3  20 FA 17             jsr cangr
002D19  3  F0 03                beq :+
002D1B  3  4C 21 2D             jmp c00209
002D1E  3               :
002D1E  3  20 6E 19             jsr jump
002D21  3  A9 15        c00209: lda #21
002D23  3  CD 29 0E             cmp scno
002D26  3  F0 03                beq *+5
002D28  3  4C 3D 2D             jmp c00261
002D2B  3  A9 06                lda #6
002D2D  3  85 63                sta z80_b
002D2F  3  20 C0 1E             jsr sktyp
002D32  3  B0 03                bcs :+
002D34  3  4C 3D 2D             jmp c00261
002D37  3               :
002D37  3  A9 08                lda #8
002D39  3  A0 05                ldy #5
002D3B  3  91 68                sta (z80_ix),y
002D3D  3  20 7F 1E     c00261: jsr animsp
002D40  3  20 AE 17             jsr cangd
002D43  3  F0 03                beq :+
002D45  3  4C 4B 2D             jmp c00284
002D48  3               :
002D48  3  20 76 20             jsr ifall
002D4B  3  A9 03        c00284: lda #3
002D4D  3  85 63                sta z80_b
002D4F  3  20 C0 1E             jsr sktyp
002D52  3  B0 03                bcs :+
002D54  3  4C 5D 2D             jmp c00319
002D57  3               :
002D57  3  A9 08                lda #8
002D59  3  A0 05                ldy #5
002D5B  3  91 68                sta (z80_ix),y
002D5D  3  A9 00        c00319: lda #0
002D5F  3  A0 0A                ldy #10
002D61  3  D1 68                cmp (z80_ix),y
002D63  3  F0 03                beq *+5
002D65  3  4C A6 2D             jmp c00461
002D68  3  20 3A 17             jsr laddu
002D6B  3  F0 03                beq :+
002D6D  3  4C 7C 2D             jmp c00381
002D70  3               :
002D70  3  A0 08                ldy #8
002D72  3  B1 68                lda (z80_ix),y
002D74  3  38                   sec
002D75  3  E9 02                sbc #2
002D77  3  91 68                sta (z80_ix),y
002D79  3  4C A6 2D             jmp c00461
002D7C  3  A9 02        c00381: lda #2
002D7E  3  85 65                sta z80_d
002D80  3  20 9C 19             jsr random
002D83  3  85 67                sta z80_h
002D85  3  20 73 11             jsr imul
002D88  3  A5 67                lda z80_h
002D8A  3  8D 46 0E             sta varrnd
002D8D  3  A9 00                lda #0
002D8F  3  CD 46 0E             cmp varrnd
002D92  3  F0 03                beq *+5
002D94  3  4C A0 2D             jmp c00448
002D97  3  A9 02                lda #2
002D99  3  A0 0A                ldy #10
002D9B  3  91 68                sta (z80_ix),y
002D9D  3  4C A6 2D             jmp c00461
002DA0  3  A9 03        c00448: lda #3
002DA2  3  A0 0A                ldy #10
002DA4  3  91 68                sta (z80_ix),y
002DA6  3  A9 01        c00461: lda #1
002DA8  3  A0 0A                ldy #10
002DAA  3  D1 68                cmp (z80_ix),y
002DAC  3  F0 03                beq *+5
002DAE  3  4C EF 2D             jmp c00604
002DB1  3  20 22 17             jsr laddd
002DB4  3  F0 03                beq :+
002DB6  3  4C C5 2D             jmp c00524
002DB9  3               :
002DB9  3  A0 08                ldy #8
002DBB  3  B1 68                lda (z80_ix),y
002DBD  3  18                   clc
002DBE  3  69 02                adc #2
002DC0  3  91 68                sta (z80_ix),y
002DC2  3  4C EF 2D             jmp c00604
002DC5  3  A9 02        c00524: lda #2
002DC7  3  85 65                sta z80_d
002DC9  3  20 9C 19             jsr random
002DCC  3  85 67                sta z80_h
002DCE  3  20 73 11             jsr imul
002DD1  3  A5 67                lda z80_h
002DD3  3  8D 46 0E             sta varrnd
002DD6  3  A9 00                lda #0
002DD8  3  CD 46 0E             cmp varrnd
002DDB  3  F0 03                beq *+5
002DDD  3  4C E9 2D             jmp c00590
002DE0  3  A9 02                lda #2
002DE2  3  A0 0A                ldy #10
002DE4  3  91 68                sta (z80_ix),y
002DE6  3  4C EF 2D             jmp c00604
002DE9  3  A9 03        c00590: lda #3
002DEB  3  A0 0A                ldy #10
002DED  3  91 68                sta (z80_ix),y
002DEF  3  A9 02        c00604: lda #2
002DF1  3  A0 0A                ldy #10
002DF3  3  D1 68                cmp (z80_ix),y
002DF5  3  F0 03                beq *+5
002DF7  3  4C 4E 2E             jmp c00787
002DFA  3  20 E6 17             jsr cangl
002DFD  3  F0 03                beq :+
002DFF  3  4C 0E 2E             jmp c00666
002E02  3               :
002E02  3  A0 09                ldy #9
002E04  3  B1 68                lda (z80_ix),y
002E06  3  38                   sec
002E07  3  E9 02                sbc #2
002E09  3  91 68                sta (z80_ix),y
002E0B  3  4C 14 2E             jmp c00680
002E0E  3  A9 03        c00666: lda #3
002E10  3  A0 0A                ldy #10
002E12  3  91 68                sta (z80_ix),y
002E14  3  A9 04        c00680: lda #4
002E16  3  85 65                sta z80_d
002E18  3  20 9C 19             jsr random
002E1B  3  85 67                sta z80_h
002E1D  3  20 73 11             jsr imul
002E20  3  A5 67                lda z80_h
002E22  3  8D 46 0E             sta varrnd
002E25  3  A9 00                lda #0
002E27  3  CD 46 0E             cmp varrnd
002E2A  3  F0 03                beq *+5
002E2C  3  4C 4E 2E             jmp c00787
002E2F  3  20 3A 17             jsr laddu
002E32  3  F0 03                beq :+
002E34  3  4C 40 2E             jmp c00760
002E37  3               :
002E37  3  A9 00                lda #0
002E39  3  A0 0A                ldy #10
002E3B  3  91 68                sta (z80_ix),y
002E3D  3  4C 4E 2E             jmp c00787
002E40  3  20 22 17     c00760: jsr laddd
002E43  3  F0 03                beq :+
002E45  3  4C 4E 2E             jmp c00787
002E48  3               :
002E48  3  A9 01                lda #1
002E4A  3  A0 0A                ldy #10
002E4C  3  91 68                sta (z80_ix),y
002E4E  3  A9 03        c00787: lda #3
002E50  3  A0 0A                ldy #10
002E52  3  D1 68                cmp (z80_ix),y
002E54  3  F0 03                beq *+5
002E56  3  4C AD 2E             jmp c00970
002E59  3  20 FA 17             jsr cangr
002E5C  3  F0 03                beq :+
002E5E  3  4C 6D 2E             jmp c00849
002E61  3               :
002E61  3  A0 09                ldy #9
002E63  3  B1 68                lda (z80_ix),y
002E65  3  18                   clc
002E66  3  69 02                adc #2
002E68  3  91 68                sta (z80_ix),y
002E6A  3  4C 73 2E             jmp c00863
002E6D  3  A9 02        c00849: lda #2
002E6F  3  A0 0A                ldy #10
002E71  3  91 68                sta (z80_ix),y
002E73  3  A9 04        c00863: lda #4
002E75  3  85 65                sta z80_d
002E77  3  20 9C 19             jsr random
002E7A  3  85 67                sta z80_h
002E7C  3  20 73 11             jsr imul
002E7F  3  A5 67                lda z80_h
002E81  3  8D 46 0E             sta varrnd
002E84  3  A9 00                lda #0
002E86  3  CD 46 0E             cmp varrnd
002E89  3  F0 03                beq *+5
002E8B  3  4C AD 2E             jmp c00970
002E8E  3  20 3A 17             jsr laddu
002E91  3  F0 03                beq :+
002E93  3  4C 9F 2E             jmp c00943
002E96  3               :
002E96  3  A9 00                lda #0
002E98  3  A0 0A                ldy #10
002E9A  3  91 68                sta (z80_ix),y
002E9C  3  4C AD 2E             jmp c00970
002E9F  3  20 22 17     c00943: jsr laddd
002EA2  3  F0 03                beq :+
002EA4  3  4C AD 2E             jmp c00970
002EA7  3               :
002EA7  3  A9 01                lda #1
002EA9  3  A0 0A                ldy #10
002EAB  3  91 68                sta (z80_ix),y
002EAD  3  A9 00        c00970: lda #0
002EAF  3  85 63                sta z80_b
002EB1  3  20 C0 1E             jsr sktyp
002EB4  3  B0 03                bcs :+
002EB6  3  4C F0 2E             jmp c01095
002EB9  3               :
002EB9  3  A9 01                lda #1
002EBB  3  CD 2C 0E             cmp varb
002EBE  3  F0 03                beq *+5
002EC0  3  4C F0 2E             jmp c01095
002EC3  3  A9 6E                lda #110
002EC5  3  0A                   asl a
002EC6  3  8D E4 0E             sta sndtyp
002EC9  3  A9 96                lda #150
002ECB  3  0A                   asl a
002ECC  3  8D E4 0E             sta sndtyp
002ECF  3  A9 FF                lda #255
002ED1  3  A0 05                ldy #5
002ED3  3  91 68                sta (z80_ix),y
002ED5  3  A9 96                lda #<150
002ED7  3  85 66                sta z80_l
002ED9  3  A9 00                lda #>150
002EDB  3  85 67                sta z80_h
002EDD  3  20 1B 14             jsr addsc
002EE0  3  A9 00                lda #0
002EE2  3  8D 44 0E             sta chary
002EE5  3  A9 19                lda #25
002EE7  3  8D 43 0E             sta charx
002EEA  3  20 C9 13             jsr dscor
002EED  3  4C F0 2E             jmp c01095
002EF0  3  A9 01        c01095: lda #1
002EF2  3  CD 2C 0E             cmp varb
002EF5  3  F0 03                beq *+5
002EF7  3  4C 00 2F             jmp c01125
002EFA  3  A9 06                lda #6
002EFC  3  A0 06                ldy #6
002EFE  3  91 68                sta (z80_ix),y
002F00  3  A9 00        c01125: lda #0
002F02  3  CD 2C 0E             cmp varb
002F05  3  F0 03                beq *+5
002F07  3  4C 10 2F             jmp c01155
002F0A  3  A9 05                lda #5
002F0C  3  A0 06                ldy #6
002F0E  3  91 68                sta (z80_ix),y
002F10  3  A9 01        c01155: lda #1
002F12  3  CD 30 0E             cmp varf
002F15  3  F0 03                beq *+5
002F17  3  4C 1F 2F             jmp c01180
002F1A  3  A9 00                lda #0
002F1C  3  8D 2C 0E             sta varb
002F1F  3  4C EC 1F     c01180: jmp grav
002F22  3               evnt03:
002F22  3  A9 15                lda #21
002F24  3  CD 29 0E             cmp scno
002F27  3  F0 03                beq *+5
002F29  3  4C 44 2F             jmp d00061
002F2C  3  A9 01                lda #1
002F2E  3  8D 32 0E             sta varh
002F31  3  A9 01                lda #1
002F33  3  CD 33 0E             cmp vari
002F36  3  F0 03                beq *+5
002F38  3  4C 44 2F             jmp d00061
002F3B  3  20 76 20             jsr ifall
002F3E  3  A9 08                lda #8
002F40  3  A0 05                ldy #5
002F42  3  91 68                sta (z80_ix),y
002F44  3  A9 06        d00061: lda #CUSTOM
002F46  3  85 63                sta z80_b
002F48  3  20 77 18             jsr tded
002F4B  3  C5 63                cmp z80_b
002F4D  3  F0 03                beq :+
002F4F  3  4C 58 2F             jmp d00102
002F52  3               :
002F52  3  A9 08                lda #8
002F54  3  A0 05                ldy #5
002F56  3  91 68                sta (z80_ix),y
002F58  3  A9 04        d00102: lda #4
002F5A  3  85 63                sta z80_b
002F5C  3  20 C0 1E             jsr sktyp
002F5F  3  B0 03                bcs :+
002F61  3  4C 75 2F             jmp d00159
002F64  3               :
002F64  3  20 E6 17             jsr cangl
002F67  3  F0 03                beq :+
002F69  3  4C 75 2F             jmp d00159
002F6C  3               :
002F6C  3  A0 09                ldy #9
002F6E  3  B1 68                lda (z80_ix),y
002F70  3  38                   sec
002F71  3  E9 02                sbc #2
002F73  3  91 68                sta (z80_ix),y
002F75  3  A9 05        d00159: lda #5
002F77  3  85 63                sta z80_b
002F79  3  20 C0 1E             jsr sktyp
002F7C  3  B0 03                bcs :+
002F7E  3  4C 92 2F             jmp d00216
002F81  3               :
002F81  3  20 FA 17             jsr cangr
002F84  3  F0 03                beq :+
002F86  3  4C 92 2F             jmp d00216
002F89  3               :
002F89  3  A0 09                ldy #9
002F8B  3  B1 68                lda (z80_ix),y
002F8D  3  18                   clc
002F8E  3  69 02                adc #2
002F90  3  91 68                sta (z80_ix),y
002F92  3  A9 02        d00216: lda #2
002F94  3  85 63                sta z80_b
002F96  3  20 C0 1E             jsr sktyp
002F99  3  B0 03                bcs :+
002F9B  3  4C A4 2F             jmp d00251
002F9E  3               :
002F9E  3  A9 08                lda #8
002FA0  3  A0 05                ldy #5
002FA2  3  91 68                sta (z80_ix),y
002FA4  3  A9 06        d00251: lda #6
002FA6  3  85 63                sta z80_b
002FA8  3  20 C0 1E             jsr sktyp
002FAB  3  B0 03                bcs :+
002FAD  3  4C B6 2F             jmp d00286
002FB0  3               :
002FB0  3  A9 08                lda #8
002FB2  3  A0 05                ldy #5
002FB4  3  91 68                sta (z80_ix),y
002FB6  3  A9 01        d00286: lda #1
002FB8  3  CD 31 0E             cmp varg
002FBB  3  F0 03                beq *+5
002FBD  3  4C DD 2F             jmp d00360
002FC0  3  20 E6 17             jsr cangl
002FC3  3  F0 03                beq :+
002FC5  3  4C DD 2F             jmp d00360
002FC8  3               :
002FC8  3  A9 00                lda #0
002FCA  3  85 63                sta z80_b
002FCC  3  20 C0 1E             jsr sktyp
002FCF  3  B0 03                bcs :+
002FD1  3  4C DD 2F             jmp d00360
002FD4  3               :
002FD4  3  A0 09                ldy #9
002FD6  3  B1 68                lda (z80_ix),y
002FD8  3  38                   sec
002FD9  3  E9 02                sbc #2
002FDB  3  91 68                sta (z80_ix),y
002FDD  3  A9 00        d00360: lda #0
002FDF  3  CD 31 0E             cmp varg
002FE2  3  F0 03                beq *+5
002FE4  3  4C 04 30             jmp d00434
002FE7  3  A9 00                lda #0
002FE9  3  85 63                sta z80_b
002FEB  3  20 C0 1E             jsr sktyp
002FEE  3  B0 03                bcs :+
002FF0  3  4C 04 30             jmp d00434
002FF3  3               :
002FF3  3  20 FA 17             jsr cangr
002FF6  3  F0 03                beq :+
002FF8  3  4C 04 30             jmp d00434
002FFB  3               :
002FFB  3  A0 09                ldy #9
002FFD  3  B1 68                lda (z80_ix),y
002FFF  3  18                   clc
003000  3  69 02                adc #2
003002  3  91 68                sta (z80_ix),y
003004  3  A9 00        d00434: lda #0
003006  3  CD 32 0E             cmp varh
003009  3  F0 03                beq *+5
00300B  3  4C 1F 30             jmp d00486
00300E  3  20 AE 17             jsr cangd
003011  3  F0 03                beq :+
003013  3  4C 1F 30             jmp d00486
003016  3               :
003016  3  A0 08                ldy #8
003018  3  B1 68                lda (z80_ix),y
00301A  3  18                   clc
00301B  3  69 02                adc #2
00301D  3  91 68                sta (z80_ix),y
00301F  3  4C EC 1F     d00486: jmp grav
003022  3               evnt04:
003022  3  A9 00                lda #0
003024  3  CD 29 0E             cmp scno
003027  3  F0 03                beq *+5
003029  3  4C 54 30             jmp e00097
00302C  3  20 7F 1E             jsr animsp
00302F  3  A0 09                ldy #9
003031  3  B1 68                lda (z80_ix),y
003033  3  18                   clc
003034  3  69 02                adc #2
003036  3  91 68                sta (z80_ix),y
003038  3  A9 02                lda #2
00303A  3  A0 07                ldy #7
00303C  3  D1 68                cmp (z80_ix),y
00303E  3  F0 03                beq *+5
003040  3  4C 54 30             jmp e00097
003043  3  A9 02                lda #2
003045  3  0A                   asl a
003046  3  8D E4 0E             sta sndtyp
003049  3  20 AE 17             jsr cangd
00304C  3  F0 03                beq :+
00304E  3  4C 54 30             jmp e00097
003051  3               :
003051  3  20 76 20             jsr ifall
003054  3  A9 01        e00097: lda #1
003056  3  CD 29 0E             cmp scno
003059  3  F0 03                beq *+5
00305B  3  4C 78 30             jmp e00165
00305E  3  20 7F 1E             jsr animsp
003061  3  A9 02                lda #2
003063  3  A0 07                ldy #7
003065  3  D1 68                cmp (z80_ix),y
003067  3  F0 03                beq *+5
003069  3  4C 78 30             jmp e00165
00306C  3  A9 0A                lda #10
00306E  3  0A                   asl a
00306F  3  8D E4 0E             sta sndtyp
003072  3  A9 05                lda #5
003074  3  0A                   asl a
003075  3  8D E4 0E             sta sndtyp
003078  3  A9 04        e00165: lda #4
00307A  3  CD 29 0E             cmp scno
00307D  3  F0 03                beq *+5
00307F  3  4C 85 30             jmp e00186
003082  3  20 7F 1E             jsr animsp
003085  3  A9 07        e00186: lda #7
003087  3  CD 29 0E             cmp scno
00308A  3  F0 03                beq *+5
00308C  3  4C 92 30             jmp e00208
00308F  3  20 7F 1E             jsr animsp
003092  3  A9 08        e00208: lda #8
003094  3  CD 29 0E             cmp scno
003097  3  F0 03                beq *+5
003099  3  4C 9F 30             jmp e00229
00309C  3  20 7F 1E             jsr animsp
00309F  3  A9 11        e00229: lda #17
0030A1  3  CD 29 0E             cmp scno
0030A4  3  F0 03                beq *+5
0030A6  3  4C AC 30             jmp e00251
0030A9  3  20 7F 1E             jsr animsp
0030AC  3  A9 12        e00251: lda #18
0030AE  3  CD 29 0E             cmp scno
0030B1  3  F0 03                beq *+5
0030B3  3  4C B9 30             jmp e00273
0030B6  3  20 7F 1E             jsr animsp
0030B9  3  A9 15        e00273: lda #21
0030BB  3  CD 29 0E             cmp scno
0030BE  3  F0 03                beq *+5
0030C0  3  4C EF 30             jmp e00378
0030C3  3  20 7F 1E             jsr animsp
0030C6  3  A9 01                lda #1
0030C8  3  CD 33 0E             cmp vari
0030CB  3  F0 03                beq *+5
0030CD  3  4C EF 30             jmp e00378
0030D0  3  20 76 20             jsr ifall
0030D3  3  A0 0B                ldy #11
0030D5  3  B1 68                lda (z80_ix),y
0030D7  3  18                   clc
0030D8  3  69 01                adc #1
0030DA  3  A0 0B                ldy #11
0030DC  3  91 68                sta (z80_ix),y
0030DE  3  A9 28                lda #40
0030E0  3  A0 0B                ldy #11
0030E2  3  D1 68                cmp (z80_ix),y
0030E4  3  F0 03                beq *+5
0030E6  3  4C EF 30             jmp e00378
0030E9  3  A9 08                lda #8
0030EB  3  A0 05                ldy #5
0030ED  3  91 68                sta (z80_ix),y
0030EF  3  A9 16        e00378: lda #22
0030F1  3  CD 29 0E             cmp scno
0030F4  3  F0 03                beq *+5
0030F6  3  4C 23 31             jmp e00484
0030F9  3  A0 0B                ldy #11
0030FB  3  B1 68                lda (z80_ix),y
0030FD  3  18                   clc
0030FE  3  69 01                adc #1
003100  3  A0 0B                ldy #11
003102  3  91 68                sta (z80_ix),y
003104  3  A9 0A                lda #10
003106  3  A0 0B                ldy #11
003108  3  D1 68                cmp (z80_ix),y
00310A  3  F0 03                beq *+5
00310C  3  4C 12 31             jmp e00448
00310F  3  20 6E 19             jsr jump
003112  3  A9 14        e00448: lda #20
003114  3  A0 0B                ldy #11
003116  3  D1 68                cmp (z80_ix),y
003118  3  90 03                bcc *+5
00311A  3  4C 23 31             jmp e00484
00311D  3  A9 00                lda #0
00311F  3  A0 0B                ldy #11
003121  3  91 68                sta (z80_ix),y
003123  3  4C EC 1F     e00484: jmp grav
003126  3               evnt05:
003126  3  A9 04                lda #4
003128  3  CD 29 0E             cmp scno
00312B  3  F0 03                beq *+5
00312D  3  4C 33 31             jmp f00023
003130  3  20 7F 1E             jsr animsp
003133  3  A9 11        f00023: lda #17
003135  3  CD 29 0E             cmp scno
003138  3  F0 03                beq *+5
00313A  3  4C 40 31             jmp f00045
00313D  3  20 7F 1E             jsr animsp
003140  3  A9 15        f00045: lda #21
003142  3  CD 29 0E             cmp scno
003145  3  F0 03                beq *+5
003147  3  4C F6 31             jmp f00411
00314A  3  A9 01                lda #1
00314C  3  CD 33 0E             cmp vari
00314F  3  F0 03                beq *+5
003151  3  4C 83 31             jmp f00175
003154  3  A9 16                lda #22
003156  3  A0 06                ldy #6
003158  3  91 68                sta (z80_ix),y
00315A  3  20 76 20             jsr ifall
00315D  3  A0 0C                ldy #12
00315F  3  B1 68                lda (z80_ix),y
003161  3  18                   clc
003162  3  69 01                adc #1
003164  3  A0 0C                ldy #12
003166  3  91 68                sta (z80_ix),y
003168  3  A9 14                lda #20
00316A  3  A0 0C                ldy #12
00316C  3  D1 68                cmp (z80_ix),y
00316E  3  90 03                bcc *+5
003170  3  4C 83 31             jmp f00175
003173  3  A9 08                lda #8
003175  3  A0 05                ldy #5
003177  3  91 68                sta (z80_ix),y
003179  3  A9 00                lda #0
00317B  3  8D 34 0E             sta varj
00317E  3  A9 00                lda #0
003180  3  8D 2C 0E             sta varb
003183  3  A0 0B        f00175: ldy #11
003185  3  B1 68                lda (z80_ix),y
003187  3  18                   clc
003188  3  69 01                adc #1
00318A  3  A0 0B                ldy #11
00318C  3  91 68                sta (z80_ix),y
00318E  3  A9 14                lda #20
003190  3  A0 0B                ldy #11
003192  3  D1 68                cmp (z80_ix),y
003194  3  F0 03                beq *+5
003196  3  4C A9 31             jmp f00253
003199  3  A9 17                lda #23
00319B  3  A0 06                ldy #6
00319D  3  91 68                sta (z80_ix),y
00319F  3  A9 00                lda #0
0031A1  3  8D 34 0E             sta varj
0031A4  3  A9 00                lda #0
0031A6  3  8D 2C 0E             sta varb
0031A9  3  A9 2D        f00253: lda #45
0031AB  3  A0 0B                ldy #11
0031AD  3  D1 68                cmp (z80_ix),y
0031AF  3  F0 03                beq *+5
0031B1  3  4C E5 31             jmp f00375
0031B4  3  A9 16                lda #22
0031B6  3  A0 06                ldy #6
0031B8  3  91 68                sta (z80_ix),y
0031BA  3  A9 01                lda #1
0031BC  3  8D 34 0E             sta varj
0031BF  3  A0 0C                ldy #12
0031C1  3  B1 68                lda (z80_ix),y
0031C3  3  18                   clc
0031C4  3  69 01                adc #1
0031C6  3  A0 0C                ldy #12
0031C8  3  91 68                sta (z80_ix),y
0031CA  3  A9 01                lda #1
0031CC  3  8D 2C 0E             sta varb
0031CF  3  A9 05                lda #5
0031D1  3  A0 0C                ldy #12
0031D3  3  D1 68                cmp (z80_ix),y
0031D5  3  F0 03                beq *+5
0031D7  3  4C E5 31             jmp f00375
0031DA  3  A9 00                lda #0
0031DC  3  8D 34 0E             sta varj
0031DF  3  A9 00                lda #0
0031E1  3  A0 0C                ldy #12
0031E3  3  91 68                sta (z80_ix),y
0031E5  3  A9 46        f00375: lda #70
0031E7  3  A0 0B                ldy #11
0031E9  3  D1 68                cmp (z80_ix),y
0031EB  3  90 03                bcc *+5
0031ED  3  4C F6 31             jmp f00411
0031F0  3  A9 00                lda #0
0031F2  3  A0 0B                ldy #11
0031F4  3  91 68                sta (z80_ix),y
0031F6  3  4C EC 1F     f00411: jmp grav
0031F9  3               evnt06:
0031F9  3  A9 03                lda #3
0031FB  3  85 63                sta z80_b
0031FD  3  20 C0 1E             jsr sktyp
003200  3  B0 03                bcs :+
003202  3  4C 0B 32             jmp g00037
003205  3               :
003205  3  A9 08                lda #8
003207  3  A0 05                ldy #5
003209  3  91 68                sta (z80_ix),y
00320B  3  A9 00        g00037: lda #0
00320D  3  85 63                sta z80_b
00320F  3  20 C0 1E             jsr sktyp
003212  3  B0 03                bcs :+
003214  3  4C 4E 32             jmp g00162
003217  3               :
003217  3  A9 01                lda #1
003219  3  CD 2C 0E             cmp varb
00321C  3  F0 03                beq *+5
00321E  3  4C 4E 32             jmp g00162
003221  3  A9 6E                lda #110
003223  3  0A                   asl a
003224  3  8D E4 0E             sta sndtyp
003227  3  A9 96                lda #150
003229  3  0A                   asl a
00322A  3  8D E4 0E             sta sndtyp
00322D  3  A9 FF                lda #255
00322F  3  A0 05                ldy #5
003231  3  91 68                sta (z80_ix),y
003233  3  A9 96                lda #<150
003235  3  85 66                sta z80_l
003237  3  A9 00                lda #>150
003239  3  85 67                sta z80_h
00323B  3  20 1B 14             jsr addsc
00323E  3  A9 00                lda #0
003240  3  8D 44 0E             sta chary
003243  3  A9 19                lda #25
003245  3  8D 43 0E             sta charx
003248  3  20 C9 13             jsr dscor
00324B  3  4C 4E 32             jmp g00162
00324E  3  A9 01        g00162: lda #1
003250  3  CD 2C 0E             cmp varb
003253  3  F0 03                beq *+5
003255  3  4C 5E 32             jmp g00192
003258  3  A9 06                lda #6
00325A  3  A0 06                ldy #6
00325C  3  91 68                sta (z80_ix),y
00325E  3  A9 00        g00192: lda #0
003260  3  CD 2C 0E             cmp varb
003263  3  F0 03                beq *+5
003265  3  4C 6E 32             jmp g00222
003268  3  A9 05                lda #5
00326A  3  A0 06                ldy #6
00326C  3  91 68                sta (z80_ix),y
00326E  3  A9 01        g00222: lda #1
003270  3  CD 30 0E             cmp varf
003273  3  F0 03                beq *+5
003275  3  4C 7D 32             jmp g00247
003278  3  A9 00                lda #0
00327A  3  8D 2C 0E             sta varb
00327D  3  A9 00        g00247: lda #0
00327F  3  A0 0B                ldy #11
003281  3  D1 68                cmp (z80_ix),y
003283  3  F0 03                beq *+5
003285  3  4C D1 32             jmp g00425
003288  3  20 E6 17             jsr cangl
00328B  3  F0 03                beq :+
00328D  3  4C C8 32             jmp g00407
003290  3               :
003290  3  A0 09                ldy #9
003292  3  B1 68                lda (z80_ix),y
003294  3  38                   sec
003295  3  E9 02                sbc #2
003297  3  91 68                sta (z80_ix),y
003299  3  A9 10                lda #16
00329B  3  85 62                sta z80_c
00329D  3  A0 09                ldy #9
00329F  3  B1 68                lda (z80_ix),y
0032A1  3  38                   sec
0032A2  3  E5 62                sbc z80_c
0032A4  3  A0 09                ldy #9
0032A6  3  91 68                sta (z80_ix),y
0032A8  3  20 AE 17             jsr cangd
0032AB  3  F0 03                beq :+
0032AD  3  4C B6 32             jmp g00367
0032B0  3               :
0032B0  3  A9 01                lda #1
0032B2  3  A0 0B                ldy #11
0032B4  3  91 68                sta (z80_ix),y
0032B6  3  A9 10        g00367: lda #16
0032B8  3  85 62                sta z80_c
0032BA  3  A0 09                ldy #9
0032BC  3  B1 68                lda (z80_ix),y
0032BE  3  18                   clc
0032BF  3  65 62                adc z80_c
0032C1  3  A0 09                ldy #9
0032C3  3  91 68                sta (z80_ix),y
0032C5  3  4C CE 32             jmp g00420
0032C8  3  A9 01        g00407: lda #1
0032CA  3  A0 0B                ldy #11
0032CC  3  91 68                sta (z80_ix),y
0032CE  3  4C 17 33     g00420: jmp g00576
0032D1  3  20 FA 17     g00425: jsr cangr
0032D4  3  F0 03                beq :+
0032D6  3  4C 11 33             jmp g00562
0032D9  3               :
0032D9  3  A0 09                ldy #9
0032DB  3  B1 68                lda (z80_ix),y
0032DD  3  18                   clc
0032DE  3  69 02                adc #2
0032E0  3  91 68                sta (z80_ix),y
0032E2  3  A9 10                lda #16
0032E4  3  85 62                sta z80_c
0032E6  3  A0 09                ldy #9
0032E8  3  B1 68                lda (z80_ix),y
0032EA  3  18                   clc
0032EB  3  65 62                adc z80_c
0032ED  3  A0 09                ldy #9
0032EF  3  91 68                sta (z80_ix),y
0032F1  3  20 AE 17             jsr cangd
0032F4  3  F0 03                beq :+
0032F6  3  4C FF 32             jmp g00522
0032F9  3               :
0032F9  3  A9 00                lda #0
0032FB  3  A0 0B                ldy #11
0032FD  3  91 68                sta (z80_ix),y
0032FF  3  A9 10        g00522: lda #16
003301  3  85 62                sta z80_c
003303  3  A0 09                ldy #9
003305  3  B1 68                lda (z80_ix),y
003307  3  38                   sec
003308  3  E5 62                sbc z80_c
00330A  3  A0 09                ldy #9
00330C  3  91 68                sta (z80_ix),y
00330E  3  4C 17 33             jmp g00576
003311  3  A9 00        g00562: lda #0
003313  3  A0 0B                ldy #11
003315  3  91 68                sta (z80_ix),y
003317  3  20 7F 1E     g00576: jsr animsp
00331A  3  60                   rts
00331B  3               evnt07:
00331B  3  A9 03                lda #3
00331D  3  A0 06                ldy #6
00331F  3  91 68                sta (z80_ix),y
003321  3  20 7F 1E             jsr animsp
003324  3  A9 02                lda #2
003326  3  A0 07                ldy #7
003328  3  D1 68                cmp (z80_ix),y
00332A  3  F0 03                beq *+5
00332C  3  4C 3B 33             jmp h00066
00332F  3  A9 0A                lda #10
003331  3  0A                   asl a
003332  3  8D E4 0E             sta sndtyp
003335  3  A9 05                lda #5
003337  3  0A                   asl a
003338  3  8D E4 0E             sta sndtyp
00333B  3  A0 0B        h00066: ldy #11
00333D  3  B1 68                lda (z80_ix),y
00333F  3  18                   clc
003340  3  69 01                adc #1
003342  3  A0 0B                ldy #11
003344  3  91 68                sta (z80_ix),y
003346  3  A9 64                lda #100
003348  3  A0 0B                ldy #11
00334A  3  D1 68                cmp (z80_ix),y
00334C  3  F0 03                beq *+5
00334E  3  4C 56 33             jmp h00123
003351  3  A9 01                lda #1
003353  3  8D 4C 0E             sta deadf
003356  3  60           h00123: rts
003357  3               evnt08:
003357  3  A9 0E                lda #14
003359  3  A0 06                ldy #6
00335B  3  91 68                sta (z80_ix),y
00335D  3  20 7F 1E             jsr animsp
003360  3  A9 03                lda #3
003362  3  A0 07                ldy #7
003364  3  D1 68                cmp (z80_ix),y
003366  3  F0 03                beq *+5
003368  3  4C 7D 33             jmp i00080
00336B  3  A9 FF                lda #255
00336D  3  A0 05                ldy #5
00336F  3  91 68                sta (z80_ix),y
003371  3  A9 28                lda #40
003373  3  0A                   asl a
003374  3  8D E4 0E             sta sndtyp
003377  3  A9 32                lda #50
003379  3  0A                   asl a
00337A  3  8D E4 0E             sta sndtyp
00337D  3  A9 0A        i00080: lda #<10
00337F  3  85 66                sta z80_l
003381  3  A9 00                lda #>10
003383  3  85 67                sta z80_h
003385  3  20 1B 14             jsr addsc
003388  3  A9 00                lda #0
00338A  3  8D 44 0E             sta chary
00338D  3  A9 19                lda #25
00338F  3  8D 43 0E             sta charx
003392  3  20 C9 13             jsr dscor
003395  3  60                   rts
003396  3               evnt09:
003396  3  60                   rts
003397  3               evnt10:
003397  3  60                   rts
003398  3               evnt11:
003398  3  60                   rts
003399  3               evnt12:
003399  3  20 26 0F             jsr cls
00339C  3  A9 04                lda #4
00339E  3  8D 44 0E             sta chary
0033A1  3  A9 09                lda #9
0033A3  3  8D 43 0E             sta charx
0033A6  3  A9 04                lda #4
0033A8  3  20 35 1A             jsr dmsg
0033AB  3  A9 01                lda #1
0033AD  3  8D 44 0E             sta chary
0033B0  3  A9 0B                lda #11
0033B2  3  8D 43 0E             sta charx
0033B5  3  A9 03                lda #3
0033B7  3  20 35 1A             jsr dmsg
0033BA  3  20 57 0E             jsr prskey
0033BD  3  60                   rts
0033BE  3               evnt13:
0033BE  3  A9 03                lda #3
0033C0  3  8D 2A 0E             sta numlif
0033C3  3  20 26 0F             jsr cls
0033C6  3  A9 00                lda #0
0033C8  3  8D 44 0E             sta chary
0033CB  3  A9 19                lda #25
0033CD  3  8D 43 0E             sta charx
0033D0  3  20 C9 13             jsr dscor
0033D3  3  A9 00                lda #0
0033D5  3  8D 44 0E             sta chary
0033D8  3  A9 01                lda #1
0033DA  3  8D 43 0E             sta charx
0033DD  3  AD 2A 0E             lda numlif
0033E0  3  20 5B 1F             jsr disply
0033E3  3  A9 00                lda #0
0033E5  3  8D 2B 0E             sta vara
0033E8  3  A9 00                lda #0
0033EA  3  8D 2C 0E             sta varb
0033ED  3  A9 00                lda #0
0033EF  3  8D 2D 0E             sta varc
0033F2  3  A9 00                lda #0
0033F4  3  8D 2E 0E             sta vard
0033F7  3  A9 AA                lda #170
0033F9  3  8D 2F 0E             sta vare
0033FC  3  A9 00                lda #0
0033FE  3  8D 30 0E             sta varf
003401  3  A9 00                lda #0
003403  3  8D 31 0E             sta varg
003406  3  A9 00                lda #0
003408  3  8D 32 0E             sta varh
00340B  3  A9 00                lda #0
00340D  3  8D 33 0E             sta vari
003410  3  A9 00                lda #0
003412  3  8D 34 0E             sta varj
003415  3  60                   rts
003416  3               evnt14:
003416  3  A9 00                lda #0
003418  3  8D 44 0E             sta chary
00341B  3  A9 01                lda #1
00341D  3  8D 43 0E             sta charx
003420  3  AD 2A 0E             lda numlif
003423  3  20 5B 1F             jsr disply
003426  3  A9 00                lda #0
003428  3  8D 2C 0E             sta varb
00342B  3  A9 00                lda #0
00342D  3  8D 30 0E             sta varf
003430  3  A9 00                lda #0
003432  3  8D 33 0E             sta vari
003435  3  A9 00                lda #0
003437  3  8D 32 0E             sta varh
00343A  3  A9 00                lda #0
00343C  3  8D 34 0E             sta varj
00343F  3  60                   rts
003440  3               evnt15:
003440  3  A9 03                lda #3
003442  3  A0 05                ldy #5
003444  3  D1 68                cmp (z80_ix),y
003446  3  F0 03                beq *+5
003448  3  4C 57 34             jmp p00047
00344B  3  20 7F 1E             jsr animsp
00344E  3  A9 FF                lda #255
003450  3  A0 05                ldy #5
003452  3  91 68                sta (z80_ix),y
003454  3  20 7F 1E             jsr animsp
003457  3  60           p00047: rts
003458  3               evnt16:
003458  3  AD 2A 0E             lda numlif
00345B  3  38                   sec
00345C  3  E9 01                sbc #1
00345E  3  8D 2A 0E             sta numlif
003461  3  A9 00                lda #0
003463  3  8D 44 0E             sta chary
003466  3  A9 01                lda #1
003468  3  8D 43 0E             sta charx
00346B  3  AD 2A 0E             lda numlif
00346E  3  20 5B 1F             jsr disply
003471  3  A9 00                lda #0
003473  3  CD 2A 0E             cmp numlif
003476  3  B0 03                bcs *+5
003478  3  4C 8F 34             jmp q00095
00347B  3  A9 0A                lda #10
00347D  3  8D 44 0E             sta chary
003480  3  A9 0C                lda #12
003482  3  8D 43 0E             sta charx
003485  3  A9 00                lda #0
003487  3  20 35 1A             jsr dmsg
00348A  3  A9 FA                lda #250
00348C  3  20 6A 0E             jsr delay
00348F  3  60           q00095: rts
003490  3               evnt17:
003490  3  A9 32                lda #50
003492  3  20 6A 0E             jsr delay
003495  3  60                   rts
003496  3               evnt18:
003496  3  A9 07                lda #7
003498  3  8D 44 0E             sta chary
00349B  3  A9 0C                lda #12
00349D  3  8D 43 0E             sta charx
0034A0  3  A9 02                lda #2
0034A2  3  20 35 1A             jsr dmsg
0034A5  3  A9 64                lda #100
0034A7  3  20 6A 0E             jsr delay
0034AA  3  A9 09                lda #9
0034AC  3  8D 44 0E             sta chary
0034AF  3  A9 0A                lda #10
0034B1  3  8D 43 0E             sta charx
0034B4  3  A9 01                lda #1
0034B6  3  20 35 1A             jsr dmsg
0034B9  3  A9 FA                lda #250
0034BB  3  20 6A 0E             jsr delay
0034BE  3  60                   rts
0034BF  3               evnt19:
0034BF  3  60                   rts
0034C0  3  60           ptcusr: rts
0034C1  3               msgdat:
0034C1  3  47 41 4D 45          .byte "GAME OVER",141
0034C5  3  20 4F 56 45  
0034C9  3  52 8D        
0034CB  3  47 41 4D 45          .byte "GAME COMPLETE",141
0034CF  3  20 43 4F 4D  
0034D3  3  50 4C 45 54  
0034D9  3  48 41 50 50          .byte "HAPPY END",141
0034DD  3  59 20 45 4E  
0034E1  3  44 8D        
0034E3  3  4D 52 2E 20          .byte "MR. VINTIK",141
0034E7  3  56 49 4E 54  
0034EB  3  49 4B 8D     
0034EE  3  50 52 45 53          .byte "PRESS TO START",13
0034F2  3  53 20 54 4F  
0034F6  3  20 53 54 41  
0034FD  3  0D                   .byte 13
0034FE  3  0D                   .byte 13
0034FF  3  31 2E 20 4F          .byte "1. OPQA SPACE",13
003503  3  50 51 41 20  
003507  3  53 50 41 43  
00350D  3  32 2E 20 4B          .byte "2. KEMPSTON JOYSTICK",13
003511  3  45 4D 50 53  
003515  3  54 4F 4E 20  
003522  3  33 2E 20 53          .byte "3. SINCLAIR JOYSTICK",13
003526  3  49 4E 43 4C  
00352A  3  41 49 52 20  
003537  3  0D                   .byte 13
003538  3  0D                   .byte 13
003539  3  0D                   .byte 13
00353A  3  4D 52 2E 56          .byte "MR.VINTIK ZX-SPECTRUM VERSION BY",13
00353E  3  49 4E 54 49  
003542  3  4B 20 5A 58  
00355B  3  41 4C 45 4B          .byte "ALEKSANDR TITOV & ZLATA TITOVA",13
00355F  3  53 41 4E 44  
003563  3  52 20 54 49  
00357A  3  45 4B 41 54          .byte "EKATERINBURG, RUSSIA, 2016",13
00357E  3  45 52 49 4E  
003582  3  42 55 52 47  
003595  3  0D                   .byte 13
003596  3  0D                   .byte 13
003597  3  0D                   .byte 13
003598  3  43 52 45 41          .byte "CREATED IN Arcade Game Designe",141
00359C  3  54 45 44 20  
0035A0  3  49 4E 20 41  
0035B7  3               nummsg:
0035B7  3  05                   .byte 5
0035B8  3               chgfx:
0035B8  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0035BC  3  00 00 00 00  
0035C0  3  FF C3 81 81          .byte 255,195,129,129,129,129,195,255
0035C4  3  81 81 C3 FF  
0035C8  3  03 07 06 06          .byte 3,7,6,6,6,6,7,3
0035CC  3  06 06 07 03  
0035D0  3  C0 E0 60 60          .byte 192,224,96,96,96,96,224,192
0035D4  3  60 60 E0 C0  
0035D8  3  FF C3 BD BD          .byte 255,195,189,189,189,189,195,255
0035DC  3  BD BD C3 FF  
0035E0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0035E4  3  00 00 00 00  
0035E8  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0035EC  3  00 00 00 00  
0035F0  3  00 FF 00 00          .byte 0,255,0,0,0,255,0,0
0035F4  3  00 FF 00 00  
0035F8  3  7F C3 99 A1          .byte 127,195,153,161,161,129,195,255
0035FC  3  A1 81 C3 FF  
003600  3  FE C3 99 A1          .byte 254,195,153,161,161,129,195,255
003604  3  A1 81 C3 FF  
003608  3  FF C3 99 A1          .byte 255,195,153,161,161,129,195,254
00360C  3  A1 81 C3 FE  
003610  3  FF C3 99 A1          .byte 255,195,153,161,161,129,195,127
003614  3  A1 81 C3 7F  
003618  3  FF C3 99 A1          .byte 255,195,153,161,161,129,195,255
00361C  3  A1 81 C3 FF  
003620  3  FF AA 55 00          .byte 255,170,85,0,0,0,0,0
003624  3  00 00 00 00  
003628  3  81 42 24 18          .byte 129,66,36,24,24,36,66,129
00362C  3  18 24 42 81  
003630  3  76 C5 AA 91          .byte 118,197,170,145,43,197,137,90
003634  3  2B C5 89 5A  
003638  3  80 C0 E0 F0          .byte 128,192,224,240,248,252,254,255
00363C  3  F8 FC FE FF  
003640  3  01 03 07 0F          .byte 1,3,7,15,31,63,127,255
003644  3  1F 3F 7F FF  
003648  3  FF 7F 7F 3F          .byte 255,127,127,63,31,15,7,1
00364C  3  1F 0F 07 01  
003650  3  FF FE FE FC          .byte 255,254,254,252,248,240,224,128
003654  3  F8 F0 E0 80  
003658  3  00 00 00 38          .byte 0,0,0,56,124,124,254,254
00365C  3  7C 7C FE FE  
003660  3  00 00 00 1C          .byte 0,0,0,28,62,62,127,127
003664  3  3E 3E 7F 7F  
003668  3  1C 76 AA D6          .byte 28,118,170,214,76,152,80,160
00366C  3  4C 98 50 A0  
003670  3  00 06 2B 56          .byte 0,6,43,86,109,90,84,165
003674  3  6D 5A 54 A5  
003678  3  01 01 02 02          .byte 1,1,2,2,1,1,2,2
00367C  3  01 01 02 02  
003680  3  01 01 02 02          .byte 1,1,2,2,4,4,56,192
003684  3  04 04 38 C0  
003688  3               bprop:
003688  3  00                   .byte 0
003689  3  02                   .byte 2
00368A  3  00                   .byte 0
00368B  3  00                   .byte 0
00368C  3  02                   .byte 2
00368D  3  06                   .byte 6
00368E  3  00                   .byte 0
00368F  3  03                   .byte 3
003690  3  02                   .byte 2
003691  3  02                   .byte 2
003692  3  02                   .byte 2
003693  3  02                   .byte 2
003694  3  02                   .byte 2
003695  3  01                   .byte 1
003696  3  05                   .byte 5
003697  3  04                   .byte 4
003698  3  00                   .byte 0
003699  3  00                   .byte 0
00369A  3  00                   .byte 0
00369B  3  00                   .byte 0
00369C  3  00                   .byte 0
00369D  3  00                   .byte 0
00369E  3  00                   .byte 0
00369F  3  00                   .byte 0
0036A0  3  00                   .byte 0
0036A1  3  00                   .byte 0
0036A2  3               sprgfx:
0036A2  3  03 C0 03 C0          .byte 3,192,3,192,3,240,3,192,3,192,1,128,15,192,15,192,15,192,15,192,3,192,3,128,3,0,3,0,3,0,3,192
0036A6  3  03 F0 03 C0  
0036AA  3  03 C0 01 80  
0036C2  3  00 F0 00 F0          .byte 0,240,0,240,0,252,0,240,0,240,0,96,3,240,3,240,3,240,3,240,0,240,0,224,0,192,0,192,0,192,0,240
0036C6  3  00 FC 00 F0  
0036CA  3  00 F0 00 60  
0036E2  3  00 3C 00 3C          .byte 0,60,0,60,0,63,0,60,0,60,0,24,0,252,0,252,0,252,0,252,0,60,0,56,0,48,0,48,0,48,0,60
0036E6  3  00 3F 00 3C  
0036EA  3  00 3C 00 18  
003702  3  00 0F 00 0F          .byte 0,15,0,15,192,15,0,15,0,15,0,6,0,63,0,63,0,63,0,63,0,15,0,14,0,12,0,12,0,12,0,15
003706  3  C0 0F 00 0F  
00370A  3  00 0F 00 06  
003722  3  03 C0 03 C0          .byte 3,192,3,192,3,240,3,192,3,192,1,128,15,192,15,192,15,252,15,252,3,192,3,240,7,56,62,28,60,12,32,14
003726  3  03 F0 03 C0  
00372A  3  03 C0 01 80  
003742  3  00 F0 00 F0          .byte 0,240,0,240,0,252,0,240,0,240,0,96,3,240,3,240,3,255,3,255,0,240,0,252,1,206,15,135,15,3,136,3
003746  3  00 FC 00 F0  
00374A  3  00 F0 00 60  
003762  3  00 3C 00 3C          .byte 0,60,0,60,0,63,0,60,0,60,0,24,0,252,0,252,192,255,192,255,0,60,0,63,128,115,195,225,195,192,226,0
003766  3  00 3F 00 3C  
00376A  3  00 3C 00 18  
003782  3  00 0F 00 0F          .byte 0,15,0,15,192,15,0,15,0,15,0,6,0,63,0,63,240,63,240,63,0,15,192,15,224,28,112,248,48,240,56,128
003786  3  C0 0F 00 0F  
00378A  3  00 0F 00 06  
0037A2  3  03 C0 03 C0          .byte 3,192,3,192,3,240,3,192,3,192,1,128,15,192,15,192,15,192,15,192,3,192,3,128,3,0,3,0,3,0,3,192
0037A6  3  03 F0 03 C0  
0037AA  3  03 C0 01 80  
0037C2  3  00 F0 00 F0          .byte 0,240,0,240,0,252,0,240,0,240,0,96,3,240,3,240,3,240,3,240,0,240,0,224,0,192,0,192,0,192,0,240
0037C6  3  00 FC 00 F0  
0037CA  3  00 F0 00 60  
0037E2  3  00 3C 00 3C          .byte 0,60,0,60,0,63,0,60,0,60,0,24,0,252,0,252,0,252,0,252,0,60,0,56,0,48,0,48,0,48,0,60
0037E6  3  00 3F 00 3C  
0037EA  3  00 3C 00 18  
003802  3  00 0F 00 0F          .byte 0,15,0,15,192,15,0,15,0,15,0,6,0,63,0,63,0,63,0,63,0,15,0,14,0,12,0,12,0,12,0,15
003806  3  C0 0F 00 0F  
00380A  3  00 0F 00 06  
003822  3  03 C0 03 C0          .byte 3,192,3,192,15,192,3,192,3,192,1,128,3,240,3,240,3,240,3,240,3,192,1,192,0,192,0,192,0,192,3,192
003826  3  0F C0 03 C0  
00382A  3  03 C0 01 80  
003842  3  00 F0 00 F0          .byte 0,240,0,240,3,240,0,240,0,240,0,96,0,252,0,252,0,252,0,252,0,240,0,112,0,48,0,48,0,48,0,240
003846  3  03 F0 00 F0  
00384A  3  00 F0 00 60  
003862  3  00 3C 00 3C          .byte 0,60,0,60,0,252,0,60,0,60,0,24,0,63,0,63,0,63,0,63,0,60,0,28,0,12,0,12,0,12,0,60
003866  3  00 FC 00 3C  
00386A  3  00 3C 00 18  
003882  3  00 0F 00 0F          .byte 0,15,0,15,0,63,0,15,0,15,0,6,192,15,192,15,192,15,192,15,0,15,0,7,0,3,0,3,0,3,0,15
003886  3  00 3F 00 0F  
00388A  3  00 0F 00 06  
0038A2  3  03 C0 03 C0          .byte 3,192,3,192,15,192,3,192,3,192,1,128,3,240,3,240,63,240,63,240,3,192,15,192,28,224,56,124,48,60,112,4
0038A6  3  0F C0 03 C0  
0038AA  3  03 C0 01 80  
0038C2  3  00 F0 00 F0          .byte 0,240,0,240,3,240,0,240,0,240,0,96,0,252,0,252,15,252,15,252,0,240,3,240,7,56,14,31,12,15,28,1
0038C6  3  03 F0 00 F0  
0038CA  3  00 F0 00 60  
0038E2  3  00 3C 00 3C          .byte 0,60,0,60,0,252,0,60,0,60,0,24,0,63,0,63,3,255,3,255,0,60,0,252,1,206,195,135,195,3,71,0
0038E6  3  00 FC 00 3C  
0038EA  3  00 3C 00 18  
003902  3  00 0F 00 0F          .byte 0,15,0,15,0,63,0,15,0,15,0,6,192,15,192,15,192,255,192,255,0,15,0,63,128,115,240,225,240,192,17,192
003906  3  00 3F 00 0F  
00390A  3  00 0F 00 06  
003922  3  03 C0 03 C0          .byte 3,192,3,192,15,192,3,192,3,192,1,128,3,240,3,240,3,240,3,240,3,192,1,192,0,192,0,192,0,192,3,192
003926  3  0F C0 03 C0  
00392A  3  03 C0 01 80  
003942  3  00 F0 00 F0          .byte 0,240,0,240,3,240,0,240,0,240,0,96,0,252,0,252,0,252,0,252,0,240,0,112,0,48,0,48,0,48,0,240
003946  3  03 F0 00 F0  
00394A  3  00 F0 00 60  
003962  3  00 3C 00 3C          .byte 0,60,0,60,0,252,0,60,0,60,0,24,0,63,0,63,0,63,0,63,0,60,0,28,0,12,0,12,0,12,0,60
003966  3  00 FC 00 3C  
00396A  3  00 3C 00 18  
003982  3  00 0F 00 0F          .byte 0,15,0,15,0,63,0,15,0,15,0,6,192,15,192,15,192,15,192,15,0,15,0,7,0,3,0,3,0,3,0,15
003986  3  00 3F 00 0F  
00398A  3  00 0F 00 06  
0039A2  3  03 C0 03 C0          .byte 3,192,3,192,51,192,51,192,49,140,63,252,15,240,3,192,3,192,3,240,3,252,3,140,3,60,3,48,3,48,3,0
0039A6  3  33 C0 33 C0  
0039AA  3  31 8C 3F FC  
0039C2  3  00 F0 00 F0          .byte 0,240,0,240,12,240,12,240,12,99,15,255,3,252,0,240,0,240,0,252,0,255,0,227,0,207,0,204,0,204,0,192
0039C6  3  0C F0 0C F0  
0039CA  3  0C 63 0F FF  
0039E2  3  00 3C 00 3C          .byte 0,60,0,60,3,60,3,60,195,24,195,255,0,255,0,60,0,60,0,63,192,63,192,56,192,51,0,51,0,51,0,48
0039E6  3  03 3C 03 3C  
0039EA  3  C3 18 C3 FF  
003A02  3  00 0F 00 0F          .byte 0,15,0,15,0,207,0,207,48,198,240,255,192,63,0,15,0,15,192,15,240,15,48,14,240,12,192,12,192,12,0,12
003A06  3  00 CF 00 CF  
003A0A  3  30 C6 F0 FF  
003A22  3  03 C0 03 C0          .byte 3,192,3,192,51,192,51,192,49,140,63,252,15,240,3,192,3,192,3,240,3,252,3,140,3,60,3,48,3,48,3,0
003A26  3  33 C0 33 C0  
003A2A  3  31 8C 3F FC  
003A42  3  00 F0 00 F0          .byte 0,240,0,240,12,240,12,240,12,99,15,255,3,252,0,240,0,240,0,252,0,255,0,227,0,207,0,204,0,204,0,192
003A46  3  0C F0 0C F0  
003A4A  3  0C 63 0F FF  
003A62  3  00 3C 00 3C          .byte 0,60,0,60,3,60,3,60,195,24,195,255,0,255,0,60,0,60,0,63,192,63,192,56,192,51,0,51,0,51,0,48
003A66  3  03 3C 03 3C  
003A6A  3  C3 18 C3 FF  
003A82  3  00 0F 00 0F          .byte 0,15,0,15,0,207,0,207,48,198,240,255,192,63,0,15,0,15,192,15,240,15,48,14,240,12,192,12,192,12,0,12
003A86  3  00 CF 00 CF  
003A8A  3  30 C6 F0 FF  
003AA2  3  03 C0 03 C0          .byte 3,192,3,192,3,204,3,204,49,140,63,252,15,240,3,192,3,192,15,192,63,192,49,192,60,192,12,192,12,192,0,192
003AA6  3  03 CC 03 CC  
003AAA  3  31 8C 3F FC  
003AC2  3  00 F0 00 F0          .byte 0,240,0,240,0,243,0,243,12,99,15,255,3,252,0,240,0,240,3,240,15,240,12,112,15,48,3,48,3,48,0,48
003AC6  3  00 F3 00 F3  
003ACA  3  0C 63 0F FF  
003AE2  3  00 3C 00 3C          .byte 0,60,0,60,192,60,192,60,195,24,195,255,0,255,0,60,0,60,0,252,3,252,3,28,3,204,0,204,0,204,0,12
003AE6  3  C0 3C C0 3C  
003AEA  3  C3 18 C3 FF  
003B02  3  00 0F 00 0F          .byte 0,15,0,15,48,15,48,15,48,198,240,255,192,63,0,15,0,15,0,63,0,255,0,199,0,243,0,51,0,51,0,3
003B06  3  30 0F 30 0F  
003B0A  3  30 C6 F0 FF  
003B22  3  03 C0 03 C0          .byte 3,192,3,192,3,204,3,204,49,140,63,252,15,240,3,192,3,192,15,192,63,192,49,192,60,192,12,192,12,192,0,192
003B26  3  03 CC 03 CC  
003B2A  3  31 8C 3F FC  
003B42  3  00 F0 00 F0          .byte 0,240,0,240,0,243,0,243,12,99,15,255,3,252,0,240,0,240,3,240,15,240,12,112,15,48,3,48,3,48,0,48
003B46  3  00 F3 00 F3  
003B4A  3  0C 63 0F FF  
003B62  3  00 3C 00 3C          .byte 0,60,0,60,192,60,192,60,195,24,195,255,0,255,0,60,0,60,0,252,3,252,3,28,3,204,0,204,0,204,0,12
003B66  3  C0 3C C0 3C  
003B6A  3  C3 18 C3 FF  
003B82  3  00 0F 00 0F          .byte 0,15,0,15,48,15,48,15,48,198,240,255,192,63,0,15,0,15,0,63,0,255,0,199,0,243,0,51,0,51,0,3
003B86  3  30 0F 30 0F  
003B8A  3  30 C6 F0 FF  
003BA2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,3,192,5,160,7,224,2,64,1,128,15,240,31,248,155,217,147,201,255,255,255,255
003BA6  3  00 00 00 00  
003BAA  3  00 00 03 C0  
003BC2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,240,1,104,1,248,0,144,0,96,3,252,7,254,102,246,100,242,255,255,255,255
003BC6  3  00 00 00 00  
003BCA  3  00 00 00 F0  
003BE2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,60,0,90,0,126,0,36,0,24,0,255,129,255,153,189,153,60,255,255,255,255
003BE6  3  00 00 00 00  
003BEA  3  00 00 00 3C  
003C02  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,15,128,22,128,31,0,9,0,6,192,63,224,127,102,111,38,79,255,255,255,255
003C06  3  00 00 00 00  
003C0A  3  00 00 00 0F  
003C22  3  06 60 00 00          .byte 6,96,0,0,128,0,0,0,0,0,35,192,5,160,7,224,3,192,1,128,15,240,31,248,155,217,147,201,255,255,255,255
003C26  3  80 00 00 00  
003C2A  3  00 00 23 C0  
003C42  3  01 98 00 00          .byte 1,152,0,0,32,0,0,0,0,0,8,240,1,104,1,248,0,240,0,96,3,252,7,254,102,246,100,242,255,255,255,255
003C46  3  20 00 00 00  
003C4A  3  00 00 08 F0  
003C62  3  00 66 00 00          .byte 0,102,0,0,8,0,0,0,0,0,2,60,0,90,0,126,0,60,0,24,0,255,129,255,153,189,153,60,255,255,255,255
003C66  3  08 00 00 00  
003C6A  3  00 00 02 3C  
003C82  3  80 19 00 00          .byte 128,25,0,0,2,0,0,0,0,0,0,143,128,22,128,31,0,15,0,6,192,63,224,127,102,111,38,79,255,255,255,255
003C86  3  02 00 00 00  
003C8A  3  00 00 00 8F  
003CA2  3  01 80 10 18          .byte 1,128,16,24,0,0,0,1,0,0,3,192,5,160,7,224,3,192,1,128,15,240,31,248,155,217,147,201,255,255,255,255
003CA6  3  00 00 00 01  
003CAA  3  00 00 03 C0  
003CC2  3  00 60 04 06          .byte 0,96,4,6,0,0,64,0,0,0,0,240,1,104,1,248,0,240,0,96,3,252,7,254,102,246,100,242,255,255,255,255
003CC6  3  00 00 40 00  
003CCA  3  00 00 00 F0  
003CE2  3  00 18 81 01          .byte 0,24,129,1,0,0,16,0,0,0,0,60,0,90,0,126,0,60,0,24,0,255,129,255,153,189,153,60,255,255,255,255
003CE6  3  00 00 10 00  
003CEA  3  00 00 00 3C  
003D02  3  00 06 60 40          .byte 0,6,96,64,0,0,4,0,0,0,0,15,128,22,128,31,0,15,0,6,192,63,224,127,102,111,38,79,255,255,255,255
003D06  3  00 00 04 00  
003D0A  3  00 00 00 0F  
003D22  3  00 00 00 00          .byte 0,0,0,0,64,0,0,0,0,4,3,192,5,160,7,224,3,192,1,128,15,240,31,248,155,217,147,201,255,255,255,255
003D26  3  40 00 00 00  
003D2A  3  00 04 03 C0  
003D42  3  00 00 00 00          .byte 0,0,0,0,16,0,0,0,0,1,0,240,1,104,1,248,0,240,0,96,3,252,7,254,102,246,100,242,255,255,255,255
003D46  3  10 00 00 00  
003D4A  3  00 01 00 F0  
003D62  3  00 00 00 00          .byte 0,0,0,0,4,0,0,0,64,0,0,60,0,90,0,126,0,60,0,24,0,255,129,255,153,189,153,60,255,255,255,255
003D66  3  04 00 00 00  
003D6A  3  40 00 00 3C  
003D82  3  00 00 00 00          .byte 0,0,0,0,1,0,0,0,16,0,0,15,128,22,128,31,0,15,0,6,192,63,224,127,102,111,38,79,255,255,255,255
003D86  3  01 00 00 00  
003D8A  3  10 00 00 0F  
003DA2  3  FF 00 FF 00          .byte 255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003DA6  3  FF 00 FF 00  
003DAA  3  FF 00 FF 00  
003DC2  3  3F C0 3F C0          .byte 63,192,63,192,63,192,63,192,63,192,63,192,63,192,63,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003DC6  3  3F C0 3F C0  
003DCA  3  3F C0 3F C0  
003DE2  3  0F F0 0F F0          .byte 15,240,15,240,15,240,15,240,15,240,15,240,15,240,15,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003DE6  3  0F F0 0F F0  
003DEA  3  0F F0 0F F0  
003E02  3  03 FC 03 FC          .byte 3,252,3,252,3,252,3,252,3,252,3,252,3,252,3,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003E06  3  03 FC 03 FC  
003E0A  3  03 FC 03 FC  
003E22  3  3C 00 3C 00          .byte 60,0,60,0,255,0,255,0,255,0,255,0,60,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003E26  3  FF 00 FF 00  
003E2A  3  FF 00 FF 00  
003E42  3  0F 00 0F 00          .byte 15,0,15,0,63,192,63,192,63,192,63,192,15,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003E46  3  3F C0 3F C0  
003E4A  3  3F C0 3F C0  
003E62  3  03 C0 03 C0          .byte 3,192,3,192,15,240,15,240,15,240,15,240,3,192,3,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003E66  3  0F F0 0F F0  
003E6A  3  0F F0 0F F0  
003E82  3  00 F0 00 F0          .byte 0,240,0,240,3,252,3,252,3,252,3,252,0,240,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003E86  3  03 FC 03 FC  
003E8A  3  03 FC 03 FC  
003EA2  3  00 00 00 00          .byte 0,0,0,0,24,0,60,0,60,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003EA6  3  18 00 3C 00  
003EAA  3  3C 00 18 00  
003EC2  3  00 00 00 00          .byte 0,0,0,0,6,0,15,0,15,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003EC6  3  06 00 0F 00  
003ECA  3  0F 00 06 00  
003EE2  3  00 00 00 00          .byte 0,0,0,0,1,128,3,192,3,192,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003EE6  3  01 80 03 C0  
003EEA  3  03 C0 01 80  
003F02  3  00 00 00 00          .byte 0,0,0,0,0,96,0,240,0,240,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003F06  3  00 60 00 F0  
003F0A  3  00 F0 00 60  
003F22  3  00 00 42 00          .byte 0,0,66,0,24,0,60,0,60,0,24,0,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003F26  3  18 00 3C 00  
003F2A  3  3C 00 18 00  
003F42  3  00 00 10 80          .byte 0,0,16,128,6,0,15,0,15,0,6,0,16,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003F46  3  06 00 0F 00  
003F4A  3  0F 00 06 00  
003F62  3  00 00 04 20          .byte 0,0,4,32,1,128,3,192,3,192,1,128,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003F66  3  01 80 03 C0  
003F6A  3  03 C0 01 80  
003F82  3  00 00 01 08          .byte 0,0,1,8,0,96,0,240,0,240,0,96,1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003F86  3  00 60 00 F0  
003F8A  3  00 F0 00 60  
003FA2  3  FF 00 FF 00          .byte 255,0,255,0,195,0,195,0,195,0,195,0,255,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003FA6  3  C3 00 C3 00  
003FAA  3  C3 00 C3 00  
003FC2  3  3F C0 3F C0          .byte 63,192,63,192,48,192,48,192,48,192,48,192,63,192,63,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003FC6  3  30 C0 30 C0  
003FCA  3  30 C0 30 C0  
003FE2  3  0F F0 0F F0          .byte 15,240,15,240,12,48,12,48,12,48,12,48,15,240,15,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003FE6  3  0C 30 0C 30  
003FEA  3  0C 30 0C 30  
004002  3  03 FC 03 FC          .byte 3,252,3,252,3,12,3,12,3,12,3,12,3,252,3,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004006  3  03 0C 03 0C  
00400A  3  03 0C 03 0C  
004022  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,231,231,231,231,255,255,255,255,255,255,123,222,49,140
004026  3  00 00 00 00  
00402A  3  00 00 00 00  
004042  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,255,249,249,249,249,255,255,255,255,255,255,158,247,12,99
004046  3  00 00 00 00  
00404A  3  00 00 00 00  
004062  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,255,126,126,126,126,255,255,255,255,255,255,231,189,195,24
004066  3  00 00 00 00  
00406A  3  00 00 00 00  
004082  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,159,159,159,159,255,255,255,255,255,255,121,239,48,198
004086  3  00 00 00 00  
00408A  3  00 00 00 00  
0040A2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,231,231,231,231,255,255,255,255,255,255,238,119,68,34
0040A6  3  00 00 00 00  
0040AA  3  00 00 00 00  
0040C2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,255,249,249,249,249,255,255,255,255,255,255,251,157,145,8
0040C6  3  00 00 00 00  
0040CA  3  00 00 00 00  
0040E2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,255,126,126,126,126,255,255,255,255,255,255,126,231,36,66
0040E6  3  00 00 00 00  
0040EA  3  00 00 00 00  
004102  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,159,159,159,159,255,255,255,255,255,255,223,185,137,16
004106  3  00 00 00 00  
00410A  3  00 00 00 00  
004122  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,128,1,152,25,128,1,128,1,132,33,74,82,49,140
004126  3  00 00 00 00  
00412A  3  00 00 00 00  
004142  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,255,96,0,102,6,96,0,96,0,97,8,146,148,12,99
004146  3  00 00 00 00  
00414A  3  00 00 00 00  
004162  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,255,24,0,153,129,24,0,24,0,24,66,36,165,195,24
004166  3  00 00 00 00  
00416A  3  00 00 00 00  
004182  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,6,0,102,96,6,0,6,0,134,16,73,41,48,198
004186  3  00 00 00 00  
00418A  3  00 00 00 00  
0041A2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,128,1,152,25,128,1,128,1,145,137,170,85,68,34
0041A6  3  00 00 00 00  
0041AA  3  00 00 00 00  
0041C2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,255,96,0,102,6,96,0,96,0,100,98,106,149,145,8
0041C6  3  00 00 00 00  
0041CA  3  00 00 00 00  
0041E2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,255,24,0,153,129,24,0,24,0,153,24,90,165,36,66
0041E6  3  00 00 00 00  
0041EA  3  00 00 00 00  
004202  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,6,0,102,96,6,0,6,0,38,70,86,169,137,16
004206  3  00 00 00 00  
00420A  3  00 00 00 00  
004222  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,128,1,152,25,128,1,128,1,132,33,74,82,49,140
004226  3  00 00 00 00  
00422A  3  00 00 00 00  
004242  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,255,96,0,102,6,96,0,96,0,97,8,146,148,12,99
004246  3  00 00 00 00  
00424A  3  00 00 00 00  
004262  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,255,24,0,153,129,24,0,24,0,24,66,36,165,195,24
004266  3  00 00 00 00  
00426A  3  00 00 00 00  
004282  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,6,0,102,96,6,0,6,0,134,16,73,41,48,198
004286  3  00 00 00 00  
00428A  3  00 00 00 00  
0042A2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,128,1,152,25,128,1,128,1,145,137,170,85,68,34
0042A6  3  00 00 00 00  
0042AA  3  00 00 00 00  
0042C2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,255,96,0,102,6,96,0,96,0,100,98,106,149,145,8
0042C6  3  00 00 00 00  
0042CA  3  00 00 00 00  
0042E2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,255,24,0,153,129,24,0,24,0,153,24,90,165,36,66
0042E6  3  00 00 00 00  
0042EA  3  00 00 00 00  
004302  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,255,6,0,102,96,6,0,6,0,38,70,86,169,137,16
004306  3  00 00 00 00  
00430A  3  00 00 00 00  
004322  3  7F FE C3 C3          .byte 127,254,195,195,153,153,161,161,161,161,129,129,195,195,255,255,255,255,195,195,153,153,161,161,161,161,129,129,195,195,127,254
004326  3  99 99 A1 A1  
00432A  3  A1 A1 81 81  
004342  3  9F FF F0 F0          .byte 159,255,240,240,102,102,104,104,104,104,96,96,240,240,255,255,255,255,240,240,102,102,104,104,104,104,96,96,240,240,159,255
004346  3  66 66 68 68  
00434A  3  68 68 60 60  
004362  3  E7 FF 3C 3C          .byte 231,255,60,60,153,153,26,26,26,26,24,24,60,60,255,255,255,255,60,60,153,153,26,26,26,26,24,24,60,60,231,255
004366  3  99 99 1A 1A  
00436A  3  1A 1A 18 18  
004382  3  F9 FF 0F 0F          .byte 249,255,15,15,102,102,134,134,134,134,6,6,15,15,255,255,255,255,15,15,102,102,134,134,134,134,6,6,15,15,249,255
004386  3  66 66 86 86  
00438A  3  86 86 06 06  
0043A2  3  F0 78 F0 78          .byte 240,120,240,120,255,255,0,0,255,255,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0043A6  3  FF FF 00 00  
0043AA  3  FF FF C3 C3  
0043C2  3  3C 1E 3C 1E          .byte 60,30,60,30,255,255,0,0,255,255,240,240,240,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0043C6  3  FF FF 00 00  
0043CA  3  FF FF F0 F0  
0043E2  3  8F 07 8F 07          .byte 143,7,143,7,255,255,0,0,255,255,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0043E6  3  FF FF 00 00  
0043EA  3  FF FF 3C 3C  
004402  3  E3 C1 E3 C1          .byte 227,193,227,193,255,255,0,0,255,255,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004406  3  FF FF 00 00  
00440A  3  FF FF 0F 0F  
004422  3  C3 C3 C3 C3          .byte 195,195,195,195,255,255,0,0,255,255,240,240,240,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004426  3  FF FF 00 00  
00442A  3  FF FF F0 F0  
004442  3  F0 F0 F0 F0          .byte 240,240,240,240,255,255,0,0,255,255,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004446  3  FF FF 00 00  
00444A  3  FF FF 3C 3C  
004462  3  3C 3C 3C 3C          .byte 60,60,60,60,255,255,0,0,255,255,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004466  3  FF FF 00 00  
00446A  3  FF FF 0F 0F  
004482  3  0F 0F 0F 0F          .byte 15,15,15,15,255,255,0,0,255,255,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004486  3  FF FF 00 00  
00448A  3  FF FF C3 C3  
0044A2  3  1E 1E 1E 1E          .byte 30,30,30,30,255,255,0,0,255,255,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0044A6  3  FF FF 00 00  
0044AA  3  FF FF 0F 0F  
0044C2  3  87 87 87 87          .byte 135,135,135,135,255,255,0,0,255,255,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0044C6  3  FF FF 00 00  
0044CA  3  FF FF C3 C3  
0044E2  3  E1 E1 E1 E1          .byte 225,225,225,225,255,255,0,0,255,255,240,240,240,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0044E6  3  FF FF 00 00  
0044EA  3  FF FF F0 F0  
004502  3  78 78 78 78          .byte 120,120,120,120,255,255,0,0,255,255,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004506  3  FF FF 00 00  
00450A  3  FF FF 3C 3C  
004522  3  3C 3C 3C 3C          .byte 60,60,60,60,255,255,0,0,255,255,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004526  3  FF FF 00 00  
00452A  3  FF FF 0F 0F  
004542  3  0F 0F 0F 0F          .byte 15,15,15,15,255,255,0,0,255,255,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004546  3  FF FF 00 00  
00454A  3  FF FF C3 C3  
004562  3  C3 C3 C3 C3          .byte 195,195,195,195,255,255,0,0,255,255,240,240,240,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004566  3  FF FF 00 00  
00456A  3  FF FF F0 F0  
004582  3  F0 F0 F0 F0          .byte 240,240,240,240,255,255,0,0,255,255,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004586  3  FF FF 00 00  
00458A  3  FF FF 3C 3C  
0045A2  3  1E 0F 1E 0F          .byte 30,15,30,15,255,255,0,0,255,255,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0045A6  3  FF FF 00 00  
0045AA  3  FF FF C3 C3  
0045C2  3  C7 83 C7 83          .byte 199,131,199,131,255,255,0,0,255,255,240,240,240,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0045C6  3  FF FF 00 00  
0045CA  3  FF FF F0 F0  
0045E2  3  F1 E0 F1 E0          .byte 241,224,241,224,255,255,0,0,255,255,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0045E6  3  FF FF 00 00  
0045EA  3  FF FF 3C 3C  
004602  3  3C 78 3C 78          .byte 60,120,60,120,255,255,0,0,255,255,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004606  3  FF FF 00 00  
00460A  3  FF FF 0F 0F  
004622  3  C3 C3 C3 C3          .byte 195,195,195,195,255,255,0,0,255,255,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004626  3  FF FF 00 00  
00462A  3  FF FF 0F 0F  
004642  3  F0 F0 F0 F0          .byte 240,240,240,240,255,255,0,0,255,255,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004646  3  FF FF 00 00  
00464A  3  FF FF C3 C3  
004662  3  3C 3C 3C 3C          .byte 60,60,60,60,255,255,0,0,255,255,240,240,240,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004666  3  FF FF 00 00  
00466A  3  FF FF F0 F0  
004682  3  0F 0F 0F 0F          .byte 15,15,15,15,255,255,0,0,255,255,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004686  3  FF FF 00 00  
00468A  3  FF FF 3C 3C  
0046A2  3  78 78 78 78          .byte 120,120,120,120,255,255,0,0,255,255,240,240,240,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0046A6  3  FF FF 00 00  
0046AA  3  FF FF F0 F0  
0046C2  3  1E 1E 1E 1E          .byte 30,30,30,30,255,255,0,0,255,255,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0046C6  3  FF FF 00 00  
0046CA  3  FF FF 3C 3C  
0046E2  3  87 87 87 87          .byte 135,135,135,135,255,255,0,0,255,255,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0046E6  3  FF FF 00 00  
0046EA  3  FF FF 0F 0F  
004702  3  E1 E1 E1 E1          .byte 225,225,225,225,255,255,0,0,255,255,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004706  3  FF FF 00 00  
00470A  3  FF FF C3 C3  
004722  3  3C 3C 3C 3C          .byte 60,60,60,60,255,255,0,0,255,255,240,240,240,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004726  3  FF FF 00 00  
00472A  3  FF FF F0 F0  
004742  3  0F 0F 0F 0F          .byte 15,15,15,15,255,255,0,0,255,255,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004746  3  FF FF 00 00  
00474A  3  FF FF 3C 3C  
004762  3  C3 C3 C3 C3          .byte 195,195,195,195,255,255,0,0,255,255,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004766  3  FF FF 00 00  
00476A  3  FF FF 0F 0F  
004782  3  F0 F0 F0 F0          .byte 240,240,240,240,255,255,0,0,255,255,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004786  3  FF FF 00 00  
00478A  3  FF FF C3 C3  
0047A2  3  1B C8 33 C4          .byte 27,200,51,196,3,240,67,194,3,192,193,131,79,192,79,193,143,192,79,194,3,195,35,128,67,6,3,4,51,0,19,204
0047A6  3  03 F0 43 C2  
0047AA  3  03 C0 C1 83  
0047C2  3  06 F2 0C F1          .byte 6,242,12,241,0,252,144,240,0,240,240,96,19,240,83,240,35,240,147,240,192,240,8,224,144,193,0,193,12,192,4,243
0047C6  3  00 FC 90 F0  
0047CA  3  00 F0 F0 60  
0047E2  3  81 BC 43 3C          .byte 129,188,67,60,0,63,36,60,0,60,60,24,4,252,20,252,8,252,36,252,48,60,2,56,100,48,64,48,3,48,193,60
0047E6  3  00 3F 24 3C  
0047EA  3  00 3C 3C 18  
004802  3  20 6F 10 CF          .byte 32,111,16,207,192,15,9,15,0,15,15,6,1,63,5,63,2,63,9,63,12,15,0,142,25,12,16,12,0,204,48,79
004806  3  C0 0F 09 0F  
00480A  3  00 0F 0F 06  
004822  3  1B C4 23 C0          .byte 27,196,35,192,35,242,3,192,35,194,129,130,207,193,143,192,207,249,79,249,131,192,195,242,135,49,14,24,60,12,32,14
004826  3  23 F2 03 C0  
00482A  3  23 C2 81 82  
004842  3  06 F1 08 F0          .byte 6,241,8,240,136,252,0,240,136,240,160,96,115,240,35,240,115,254,83,254,32,240,176,252,97,204,3,134,15,3,136,3
004846  3  88 FC 00 F0  
00484A  3  88 F0 A0 60  
004862  3  41 BC 02 3C          .byte 65,188,2,60,34,63,0,60,34,60,40,24,28,252,8,252,156,255,148,255,8,60,44,63,24,115,128,225,195,192,226,0
004866  3  22 3F 00 3C  
00486A  3  22 3C 28 18  
004882  3  10 6F 00 8F          .byte 16,111,0,143,200,143,0,15,8,143,10,6,7,63,2,63,231,63,229,63,2,15,203,15,198,28,96,56,48,240,56,128
004886  3  C8 8F 00 0F  
00488A  3  08 8F 0A 06  
0048A2  3  03 C0 03 C0          .byte 3,192,3,192,3,240,3,192,3,192,1,128,15,192,15,192,15,192,15,192,3,192,3,128,3,0,3,0,3,0,3,192
0048A6  3  03 F0 03 C0  
0048AA  3  03 C0 01 80  
0048C2  3  00 F0 00 F0          .byte 0,240,0,240,0,252,0,240,0,240,0,96,3,240,3,240,3,240,3,240,0,240,0,224,0,192,0,192,0,192,0,240
0048C6  3  00 FC 00 F0  
0048CA  3  00 F0 00 60  
0048E2  3  00 3C 00 3C          .byte 0,60,0,60,0,63,0,60,0,60,0,24,0,252,0,252,0,252,0,252,0,60,0,56,0,48,0,48,0,48,0,60
0048E6  3  00 3F 00 3C  
0048EA  3  00 3C 00 18  
004902  3  00 0F 00 0F          .byte 0,15,0,15,192,15,0,15,0,15,0,6,0,63,0,63,0,63,0,63,0,15,0,14,0,12,0,12,0,12,0,15
004906  3  C0 0F 00 0F  
00490A  3  00 0F 00 06  
004922  3  13 D8 23 CC          .byte 19,216,35,204,15,192,67,194,3,192,193,131,3,242,131,242,3,241,67,242,195,192,1,196,96,194,32,192,0,204,51,200
004926  3  0F C0 43 C2  
00492A  3  03 C0 C1 83  
004942  3  04 F6 08 F3          .byte 4,246,8,243,3,240,144,240,0,240,240,96,128,252,160,252,64,252,144,252,48,240,0,113,152,48,8,48,0,51,12,242
004946  3  03 F0 90 F0  
00494A  3  00 F0 F0 60  
004962  3  81 3D C2 3C          .byte 129,61,194,60,0,252,36,60,0,60,60,24,32,63,40,63,16,63,36,63,12,60,64,28,38,12,2,12,192,12,131,60
004966  3  00 FC 24 3C  
00496A  3  00 3C 3C 18  
004982  3  60 4F 30 8F          .byte 96,79,48,143,0,63,9,15,0,15,15,6,200,15,202,15,196,15,201,15,3,15,16,7,9,131,0,131,48,3,32,207
004986  3  00 3F 09 0F  
00498A  3  00 0F 0F 06  
0049A2  3  23 D8 03 C4          .byte 35,216,3,196,79,196,3,192,67,196,65,129,131,243,3,241,159,243,159,242,3,193,79,195,140,225,24,112,48,60,112,4
0049A6  3  4F C4 03 C0  
0049AA  3  43 C4 41 81  
0049C2  3  08 F6 00 F1          .byte 8,246,0,241,19,241,0,240,16,241,80,96,224,252,64,252,231,252,167,252,64,240,211,240,99,56,6,28,12,15,28,1
0049C6  3  13 F1 00 F0  
0049CA  3  10 F1 50 60  
0049E2  3  82 3D 40 3C          .byte 130,61,64,60,68,252,0,60,68,60,20,24,56,63,16,63,57,255,41,255,16,60,52,252,24,206,1,135,195,3,71,0
0049E6  3  44 FC 00 3C  
0049EA  3  44 3C 14 18  
004A02  3  60 8F 10 0F          .byte 96,143,16,15,17,63,0,15,17,15,5,6,206,15,196,15,206,127,202,127,4,15,13,63,134,51,192,97,240,192,17,192
004A06  3  11 3F 00 0F  
004A0A  3  11 0F 05 06  
004A22  3  03 C0 03 C0          .byte 3,192,3,192,15,192,3,192,3,192,1,128,3,240,3,240,3,240,3,240,3,192,1,192,0,192,0,192,0,192,3,192
004A26  3  0F C0 03 C0  
004A2A  3  03 C0 01 80  
004A42  3  00 F0 00 F0          .byte 0,240,0,240,3,240,0,240,0,240,0,96,0,252,0,252,0,252,0,252,0,240,0,112,0,48,0,48,0,48,0,240
004A46  3  03 F0 00 F0  
004A4A  3  00 F0 00 60  
004A62  3  00 3C 00 3C          .byte 0,60,0,60,0,252,0,60,0,60,0,24,0,63,0,63,0,63,0,63,0,60,0,28,0,12,0,12,0,12,0,60
004A66  3  00 FC 00 3C  
004A6A  3  00 3C 00 18  
004A82  3  00 0F 00 0F          .byte 0,15,0,15,0,63,0,15,0,15,0,6,192,15,192,15,192,15,192,15,0,15,0,7,0,3,0,3,0,3,0,15
004A86  3  00 3F 00 0F  
004A8A  3  00 0F 00 06  
004AA2  3  13 D8 23 CC          .byte 19,216,35,204,3,192,91,194,25,152,223,249,15,242,131,194,3,193,67,242,195,248,3,137,99,57,35,48,3,50,55,4
004AA6  3  03 C0 5B C2  
004AAA  3  19 98 DF F9  
004AC2  3  04 F6 08 F3          .byte 4,246,8,243,0,240,150,240,6,102,119,254,131,252,160,240,64,240,144,252,48,254,64,226,88,206,8,204,128,204,13,193
004AC6  3  00 F0 96 F0  
004ACA  3  06 66 77 FE  
004AE2  3  81 3D C2 3C          .byte 129,61,194,60,0,60,37,188,129,153,157,255,32,255,40,60,16,60,36,63,140,63,144,56,150,51,2,51,32,51,67,112
004AE6  3  00 3C 25 BC  
004AEA  3  81 99 9D FF  
004B02  3  60 4F 30 8F          .byte 96,79,48,143,0,15,9,111,96,102,231,127,200,63,10,15,4,15,201,15,227,15,36,14,229,140,192,140,200,12,16,220
004B06  3  00 0F 09 6F  
004B0A  3  60 66 E7 7F  
004B22  3  1B C8 33 C4          .byte 27,200,51,196,3,192,67,218,25,152,159,251,79,240,67,193,131,192,79,194,31,195,145,192,156,198,12,196,76,192,32,236
004B26  3  03 C0 43 DA  
004B2A  3  19 98 9F FB  
004B42  3  06 F2 0C F1          .byte 6,242,12,241,0,240,144,246,6,102,231,254,19,252,80,240,32,240,147,240,199,240,36,112,167,49,3,49,19,48,8,59
004B46  3  00 F0 90 F6  
004B4A  3  06 66 E7 FE  
004B62  3  81 BC 43 3C          .byte 129,188,67,60,0,60,164,61,129,153,185,255,4,255,20,60,8,60,36,252,49,252,9,28,105,204,64,204,4,204,194,14
004B66  3  00 3C A4 3D  
004B6A  3  81 99 B9 FF  
004B82  3  20 6F 10 CF          .byte 32,111,16,207,0,15,105,15,96,102,238,127,193,63,5,15,2,15,9,63,12,127,2,71,26,115,16,51,1,51,176,131
004B86  3  00 0F 69 0F  
004B8A  3  60 66 EE 7F  
004BA2  3  08 88 05 D0          .byte 8,136,5,208,7,240,0,0,3,224,6,176,4,144,11,104,73,201,88,13,50,166,4,16,8,8,31,252,2,32,6,48
004BA6  3  07 F0 00 00  
004BAA  3  03 E0 06 B0  
004BC2  3  02 22 01 74          .byte 2,34,1,116,1,252,0,0,0,248,1,172,1,36,2,218,82,114,86,3,140,169,1,4,2,2,7,255,0,136,1,140
004BC6  3  01 FC 00 00  
004BCA  3  00 F8 01 AC  
004BE2  3  80 88 00 5D          .byte 128,136,0,93,0,127,0,0,0,62,0,107,0,73,128,182,148,156,213,128,99,42,0,65,128,128,193,255,0,34,0,99
004BE6  3  00 7F 00 00  
004BEA  3  00 3E 00 6B  
004C02  3  20 22 40 17          .byte 32,34,64,23,192,31,0,0,128,15,192,26,64,18,160,45,37,39,53,96,152,202,64,16,32,32,240,127,128,8,192,24
004C06  3  C0 1F 00 00  
004C0A  3  80 0F C0 1A  
004C22  3  08 88 05 D0          .byte 8,136,5,208,7,240,0,0,3,224,6,176,4,144,11,104,73,201,88,13,50,166,4,16,8,8,31,252,6,32,0,48
004C26  3  07 F0 00 00  
004C2A  3  03 E0 06 B0  
004C42  3  02 22 01 74          .byte 2,34,1,116,1,252,0,0,0,248,1,172,1,36,2,218,82,114,86,3,140,169,1,4,2,2,7,255,1,136,0,12
004C46  3  01 FC 00 00  
004C4A  3  00 F8 01 AC  
004C62  3  80 88 00 5D          .byte 128,136,0,93,0,127,0,0,0,62,0,107,0,73,128,182,148,156,213,128,99,42,0,65,128,128,193,255,0,98,0,3
004C66  3  00 7F 00 00  
004C6A  3  00 3E 00 6B  
004C82  3  20 22 40 17          .byte 32,34,64,23,192,31,0,0,128,15,192,26,64,18,160,45,37,39,53,96,152,202,64,16,32,32,240,127,128,24,192,0
004C86  3  C0 1F 00 00  
004C8A  3  80 0F C0 1A  
004CA2  3  08 88 05 D0          .byte 8,136,5,208,7,240,0,0,3,224,6,176,4,144,11,104,73,201,88,13,50,166,4,16,8,8,31,252,0,32,0,48
004CA6  3  07 F0 00 00  
004CAA  3  03 E0 06 B0  
004CC2  3  02 22 01 74          .byte 2,34,1,116,1,252,0,0,0,248,1,172,1,36,2,218,82,114,86,3,140,169,1,4,2,2,7,255,0,8,0,12
004CC6  3  01 FC 00 00  
004CCA  3  00 F8 01 AC  
004CE2  3  80 88 00 5D          .byte 128,136,0,93,0,127,0,0,0,62,0,107,0,73,128,182,148,156,213,128,99,42,0,65,128,128,193,255,0,2,0,3
004CE6  3  00 7F 00 00  
004CEA  3  00 3E 00 6B  
004D02  3  20 22 40 17          .byte 32,34,64,23,192,31,0,0,128,15,192,26,64,18,160,45,37,39,53,96,152,202,64,16,32,32,240,127,128,0,192,0
004D06  3  C0 1F 00 00  
004D0A  3  80 0F C0 1A  
004D22  3  08 88 05 D0          .byte 8,136,5,208,7,240,0,0,3,224,6,176,4,144,11,104,73,201,88,13,50,166,4,16,8,8,31,252,6,32,0,48
004D26  3  07 F0 00 00  
004D2A  3  03 E0 06 B0  
004D42  3  02 22 01 74          .byte 2,34,1,116,1,252,0,0,0,248,1,172,1,36,2,218,82,114,86,3,140,169,1,4,2,2,7,255,1,136,0,12
004D46  3  01 FC 00 00  
004D4A  3  00 F8 01 AC  
004D62  3  80 88 00 5D          .byte 128,136,0,93,0,127,0,0,0,62,0,107,0,73,128,182,148,156,213,128,99,42,0,65,128,128,193,255,0,98,0,3
004D66  3  00 7F 00 00  
004D6A  3  00 3E 00 6B  
004D82  3  20 22 40 17          .byte 32,34,64,23,192,31,0,0,128,15,192,26,64,18,160,45,37,39,53,96,152,202,64,16,32,32,240,127,128,24,192,0
004D86  3  C0 1F 00 00  
004D8A  3  80 0F C0 1A  
004DA2  3  00 00 00 00          .byte 0,0,0,0,0,0,24,24,24,24,0,0,0,0,0,0,0,0,0,0,0,0,24,24,24,24,0,0,0,0,0,0
004DA6  3  00 00 18 18  
004DAA  3  18 18 00 00  
004DC2  3  00 00 00 00          .byte 0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0
004DC6  3  00 00 06 06  
004DCA  3  06 06 00 00  
004DE2  3  00 00 00 00          .byte 0,0,0,0,0,0,129,129,129,129,0,0,0,0,0,0,0,0,0,0,0,0,129,129,129,129,0,0,0,0,0,0
004DE6  3  00 00 81 81  
004DEA  3  81 81 00 00  
004E02  3  00 00 00 00          .byte 0,0,0,0,0,0,96,96,96,96,0,0,0,0,0,0,0,0,0,0,0,0,96,96,96,96,0,0,0,0,0,0
004E06  3  00 00 60 60  
004E0A  3  60 60 00 00  
004E22  3  00 00 00 00          .byte 0,0,0,0,36,36,24,24,24,24,36,36,0,0,0,0,0,0,0,0,36,36,24,24,24,24,36,36,0,0,0,0
004E26  3  24 24 18 18  
004E2A  3  18 18 24 24  
004E42  3  00 00 00 00          .byte 0,0,0,0,9,9,6,6,6,6,9,9,0,0,0,0,0,0,0,0,9,9,6,6,6,6,9,9,0,0,0,0
004E46  3  09 09 06 06  
004E4A  3  06 06 09 09  
004E62  3  00 00 00 00          .byte 0,0,0,0,66,66,129,129,129,129,66,66,0,0,0,0,0,0,0,0,66,66,129,129,129,129,66,66,0,0,0,0
004E66  3  42 42 81 81  
004E6A  3  81 81 42 42  
004E82  3  00 00 00 00          .byte 0,0,0,0,144,144,96,96,96,96,144,144,0,0,0,0,0,0,0,0,144,144,96,96,96,96,144,144,0,0,0,0
004E86  3  90 90 60 60  
004E8A  3  60 60 90 90  
004EA2  3  00 00 42 42          .byte 0,0,66,66,36,36,24,24,24,24,36,36,66,66,0,0,0,0,66,66,36,36,24,24,24,24,36,36,66,66,0,0
004EA6  3  24 24 18 18  
004EAA  3  18 18 24 24  
004EC2  3  00 00 90 90          .byte 0,0,144,144,9,9,6,6,6,6,9,9,144,144,0,0,0,0,144,144,9,9,6,6,6,6,9,9,144,144,0,0
004EC6  3  09 09 06 06  
004ECA  3  06 06 09 09  
004EE2  3  00 00 24 24          .byte 0,0,36,36,66,66,129,129,129,129,66,66,36,36,0,0,0,0,36,36,66,66,129,129,129,129,66,66,36,36,0,0
004EE6  3  42 42 81 81  
004EEA  3  81 81 42 42  
004F02  3  00 00 09 09          .byte 0,0,9,9,144,144,96,96,96,96,144,144,9,9,0,0,0,0,9,9,144,144,96,96,96,96,144,144,9,9,0,0
004F06  3  90 90 60 60  
004F0A  3  60 60 90 90  
004F22  3  00 00 3C 3C          .byte 0,0,60,60,126,126,102,102,102,102,126,126,60,60,0,0,0,0,60,60,126,126,102,102,102,102,126,126,60,60,0,0
004F26  3  7E 7E 66 66  
004F2A  3  66 66 7E 7E  
004F42  3  00 00 0F 0F          .byte 0,0,15,15,159,159,153,153,153,153,159,159,15,15,0,0,0,0,15,15,159,159,153,153,153,153,159,159,15,15,0,0
004F46  3  9F 9F 99 99  
004F4A  3  99 99 9F 9F  
004F62  3  00 00 C3 C3          .byte 0,0,195,195,231,231,102,102,102,102,231,231,195,195,0,0,0,0,195,195,231,231,102,102,102,102,231,231,195,195,0,0
004F66  3  E7 E7 66 66  
004F6A  3  66 66 E7 E7  
004F82  3  00 00 F0 F0          .byte 0,0,240,240,249,249,153,153,153,153,249,249,240,240,0,0,0,0,240,240,249,249,153,153,153,153,249,249,240,240,0,0
004F86  3  F9 F9 99 99  
004F8A  3  99 99 F9 F9  
004FA2  3  7F FE C3 C3          .byte 127,254,195,195,129,129,129,129,129,129,129,129,195,195,255,255,255,255,210,75,146,73,146,73,146,73,146,73,255,255,63,252
004FA6  3  81 81 81 81  
004FAA  3  81 81 81 81  
004FC2  3  9F FF F0 F0          .byte 159,255,240,240,96,96,96,96,96,96,96,96,240,240,255,255,255,255,244,146,100,146,100,146,100,146,100,146,255,255,15,255
004FC6  3  60 60 60 60  
004FCA  3  60 60 60 60  
004FE2  3  E7 FF 3C 3C          .byte 231,255,60,60,24,24,24,24,24,24,24,24,60,60,255,255,255,255,189,36,153,36,153,36,153,36,153,36,255,255,195,255
004FE6  3  18 18 18 18  
004FEA  3  18 18 18 18  
005002  3  F9 FF 0F 0F          .byte 249,255,15,15,6,6,6,6,6,6,6,6,15,15,255,255,255,255,47,73,38,73,38,73,38,73,38,73,255,255,240,255
005006  3  06 06 06 06  
00500A  3  06 06 06 06  
005022  3  7F FE C3 C3          .byte 127,254,195,195,129,129,153,153,153,153,129,129,195,195,255,255,255,255,210,75,146,73,146,73,146,73,146,73,255,255,63,252
005026  3  81 81 99 99  
00502A  3  99 99 81 81  
005042  3  9F FF F0 F0          .byte 159,255,240,240,96,96,102,102,102,102,96,96,240,240,255,255,255,255,244,146,100,146,100,146,100,146,100,146,255,255,15,255
005046  3  60 60 66 66  
00504A  3  66 66 60 60  
005062  3  E7 FF 3C 3C          .byte 231,255,60,60,24,24,153,153,153,153,24,24,60,60,255,255,255,255,189,36,153,36,153,36,153,36,153,36,255,255,195,255
005066  3  18 18 99 99  
00506A  3  99 99 18 18  
005082  3  F9 FF 0F 0F          .byte 249,255,15,15,6,6,102,102,102,102,6,6,15,15,255,255,255,255,47,73,38,73,38,73,38,73,38,73,255,255,240,255
005086  3  06 06 66 66  
00508A  3  66 66 06 06  
0050A2  3  7F FE C3 C3          .byte 127,254,195,195,129,129,129,129,129,129,129,129,195,195,255,255,255,255,210,75,146,73,146,73,146,73,146,73,255,255,63,252
0050A6  3  81 81 81 81  
0050AA  3  81 81 81 81  
0050C2  3  9F FF F0 F0          .byte 159,255,240,240,96,96,96,96,96,96,96,96,240,240,255,255,255,255,244,146,100,146,100,146,100,146,100,146,255,255,15,255
0050C6  3  60 60 60 60  
0050CA  3  60 60 60 60  
0050E2  3  E7 FF 3C 3C          .byte 231,255,60,60,24,24,24,24,24,24,24,24,60,60,255,255,255,255,189,36,153,36,153,36,153,36,153,36,255,255,195,255
0050E6  3  18 18 18 18  
0050EA  3  18 18 18 18  
005102  3  F9 FF 0F 0F          .byte 249,255,15,15,6,6,6,6,6,6,6,6,15,15,255,255,255,255,47,73,38,73,38,73,38,73,38,73,255,255,240,255
005106  3  06 06 06 06  
00510A  3  06 06 06 06  
005122  3  FF FF C3 C3          .byte 255,255,195,195,153,153,161,161,161,161,129,129,195,195,255,255,255,255,195,195,153,153,161,161,161,161,129,129,195,195,255,255
005126  3  99 99 A1 A1  
00512A  3  A1 A1 81 81  
005142  3  FF FF F0 F0          .byte 255,255,240,240,102,102,104,104,104,104,96,96,240,240,255,255,255,255,240,240,102,102,104,104,104,104,96,96,240,240,255,255
005146  3  66 66 68 68  
00514A  3  68 68 60 60  
005162  3  FF FF 3C 3C          .byte 255,255,60,60,153,153,26,26,26,26,24,24,60,60,255,255,255,255,60,60,153,153,26,26,26,26,24,24,60,60,255,255
005166  3  99 99 1A 1A  
00516A  3  1A 1A 18 18  
005182  3  FF FF 0F 0F          .byte 255,255,15,15,102,102,134,134,134,134,6,6,15,15,255,255,255,255,15,15,102,102,134,134,134,134,6,6,15,15,255,255
005186  3  66 66 86 86  
00518A  3  86 86 06 06  
0051A2  3  FF FF C3 C3          .byte 255,255,195,195,153,153,161,161,161,161,129,129,195,195,255,255,255,0,195,0,153,0,161,0,161,0,129,0,195,0,255,0
0051A6  3  99 99 A1 A1  
0051AA  3  A1 A1 81 81  
0051C2  3  FF FF F0 F0          .byte 255,255,240,240,102,102,104,104,104,104,96,96,240,240,255,255,63,192,48,192,38,64,40,64,40,64,32,64,48,192,63,192
0051C6  3  66 66 68 68  
0051CA  3  68 68 60 60  
0051E2  3  FF FF 3C 3C          .byte 255,255,60,60,153,153,26,26,26,26,24,24,60,60,255,255,15,240,12,48,9,144,10,16,10,16,8,16,12,48,15,240
0051E6  3  99 99 1A 1A  
0051EA  3  1A 1A 18 18  
005202  3  FF FF 0F 0F          .byte 255,255,15,15,102,102,134,134,134,134,6,6,15,15,255,255,3,252,3,12,2,100,2,132,2,132,2,4,3,12,3,252
005206  3  66 66 86 86  
00520A  3  86 86 06 06  
005222  3  FF FF C3 C3          .byte 255,255,195,195,153,153,161,161,161,161,129,129,195,195,255,255,0,255,0,195,0,153,0,161,0,161,0,129,0,195,0,255
005226  3  99 99 A1 A1  
00522A  3  A1 A1 81 81  
005242  3  FF FF F0 F0          .byte 255,255,240,240,102,102,104,104,104,104,96,96,240,240,255,255,192,63,192,48,64,38,64,40,64,40,64,32,192,48,192,63
005246  3  66 66 68 68  
00524A  3  68 68 60 60  
005262  3  FF FF 3C 3C          .byte 255,255,60,60,153,153,26,26,26,26,24,24,60,60,255,255,240,15,48,12,144,9,16,10,16,10,16,8,48,12,240,15
005266  3  99 99 1A 1A  
00526A  3  1A 1A 18 18  
005282  3  FF FF 0F 0F          .byte 255,255,15,15,102,102,134,134,134,134,6,6,15,15,255,255,252,3,12,3,100,2,132,2,132,2,4,2,12,3,252,3
005286  3  66 66 86 86  
00528A  3  86 86 06 06  
0052A2  3  00 FF 00 C3          .byte 0,255,0,195,0,153,0,161,0,161,0,129,0,195,0,255,0,255,0,195,0,153,0,161,0,161,0,129,0,195,0,255
0052A6  3  00 99 00 A1  
0052AA  3  00 A1 00 81  
0052C2  3  C0 3F C0 30          .byte 192,63,192,48,64,38,64,40,64,40,64,32,192,48,192,63,192,63,192,48,64,38,64,40,64,40,64,32,192,48,192,63
0052C6  3  40 26 40 28  
0052CA  3  40 28 40 20  
0052E2  3  F0 0F 30 0C          .byte 240,15,48,12,144,9,16,10,16,10,16,8,48,12,240,15,240,15,48,12,144,9,16,10,16,10,16,8,48,12,240,15
0052E6  3  90 09 10 0A  
0052EA  3  10 0A 10 08  
005302  3  FC 03 0C 03          .byte 252,3,12,3,100,2,132,2,132,2,4,2,12,3,252,3,252,3,12,3,100,2,132,2,132,2,4,2,12,3,252,3
005306  3  64 02 84 02  
00530A  3  84 02 04 02  
005322  3  FF 00 C3 00          .byte 255,0,195,0,153,0,161,0,161,0,129,0,195,0,255,0,255,0,195,0,153,0,161,0,161,0,129,0,195,0,255,0
005326  3  99 00 A1 00  
00532A  3  A1 00 81 00  
005342  3  3F C0 30 C0          .byte 63,192,48,192,38,64,40,64,40,64,32,64,48,192,63,192,63,192,48,192,38,64,40,64,40,64,32,64,48,192,63,192
005346  3  26 40 28 40  
00534A  3  28 40 20 40  
005362  3  0F F0 0C 30          .byte 15,240,12,48,9,144,10,16,10,16,8,16,12,48,15,240,15,240,12,48,9,144,10,16,10,16,8,16,12,48,15,240
005366  3  09 90 0A 10  
00536A  3  0A 10 08 10  
005382  3  03 FC 03 0C          .byte 3,252,3,12,2,100,2,132,2,132,2,4,3,12,3,252,3,252,3,12,2,100,2,132,2,132,2,4,3,12,3,252
005386  3  02 64 02 84  
00538A  3  02 84 02 04  
0053A2  3  00 FF 00 C3          .byte 0,255,0,195,0,153,0,161,0,161,0,129,0,195,0,255,255,255,195,195,153,153,161,161,161,161,129,129,195,195,255,255
0053A6  3  00 99 00 A1  
0053AA  3  00 A1 00 81  
0053C2  3  C0 3F C0 30          .byte 192,63,192,48,64,38,64,40,64,40,64,32,192,48,192,63,255,255,240,240,102,102,104,104,104,104,96,96,240,240,255,255
0053C6  3  40 26 40 28  
0053CA  3  40 28 40 20  
0053E2  3  F0 0F 30 0C          .byte 240,15,48,12,144,9,16,10,16,10,16,8,48,12,240,15,255,255,60,60,153,153,26,26,26,26,24,24,60,60,255,255
0053E6  3  90 09 10 0A  
0053EA  3  10 0A 10 08  
005402  3  FC 03 0C 03          .byte 252,3,12,3,100,2,132,2,132,2,4,2,12,3,252,3,255,255,15,15,102,102,134,134,134,134,6,6,15,15,255,255
005406  3  64 02 84 02  
00540A  3  84 02 04 02  
005422  3  FF 00 C3 00          .byte 255,0,195,0,153,0,161,0,161,0,129,0,195,0,255,0,255,255,195,195,153,153,161,161,161,161,129,129,195,195,255,255
005426  3  99 00 A1 00  
00542A  3  A1 00 81 00  
005442  3  3F C0 30 C0          .byte 63,192,48,192,38,64,40,64,40,64,32,64,48,192,63,192,255,255,240,240,102,102,104,104,104,104,96,96,240,240,255,255
005446  3  26 40 28 40  
00544A  3  28 40 20 40  
005462  3  0F F0 0C 30          .byte 15,240,12,48,9,144,10,16,10,16,8,16,12,48,15,240,255,255,60,60,153,153,26,26,26,26,24,24,60,60,255,255
005466  3  09 90 0A 10  
00546A  3  0A 10 08 10  
005482  3  03 FC 03 0C          .byte 3,252,3,12,2,100,2,132,2,132,2,4,3,12,3,252,255,255,15,15,102,102,134,134,134,134,6,6,15,15,255,255
005486  3  02 64 02 84  
00548A  3  02 84 02 04  
0054A2  3  FF FF C3 C3          .byte 255,255,195,195,153,153,161,161,161,161,129,129,195,195,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0054A6  3  99 99 A1 A1  
0054AA  3  A1 A1 81 81  
0054C2  3  FF FF F0 F0          .byte 255,255,240,240,102,102,104,104,104,104,96,96,240,240,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0054C6  3  66 66 68 68  
0054CA  3  68 68 60 60  
0054E2  3  FF FF 3C 3C          .byte 255,255,60,60,153,153,26,26,26,26,24,24,60,60,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0054E6  3  99 99 1A 1A  
0054EA  3  1A 1A 18 18  
005502  3  FF FF 0F 0F          .byte 255,255,15,15,102,102,134,134,134,134,6,6,15,15,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
005506  3  66 66 86 86  
00550A  3  86 86 06 06  
005522  3  08 88 05 D0          .byte 8,136,5,208,7,240,0,0,3,224,6,176,4,144,11,104,73,201,88,13,50,166,4,16,8,8,31,252,2,32,6,48
005526  3  07 F0 00 00  
00552A  3  03 E0 06 B0  
005542  3  02 22 01 74          .byte 2,34,1,116,1,252,0,0,0,248,1,172,1,36,2,218,82,114,86,3,140,169,1,4,2,2,7,255,0,136,1,140
005546  3  01 FC 00 00  
00554A  3  00 F8 01 AC  
005562  3  80 88 00 5D          .byte 128,136,0,93,0,127,0,0,0,62,0,107,0,73,128,182,148,156,213,128,99,42,0,65,128,128,193,255,0,34,0,99
005566  3  00 7F 00 00  
00556A  3  00 3E 00 6B  
005582  3  20 22 40 17          .byte 32,34,64,23,192,31,0,0,128,15,192,26,64,18,160,45,37,39,53,96,152,202,64,16,32,32,240,127,128,8,192,24
005586  3  C0 1F 00 00  
00558A  3  80 0F C0 1A  
0055A2  3               frmlst:
0055A2  3  00 03                .byte 0,3
0055A4  3  03 03                .byte 3,3
0055A6  3  06 04                .byte 6,4
0055A8  3  0A 04                .byte 10,4
0055AA  3  0E 05                .byte 14,5
0055AC  3  13 02                .byte 19,2
0055AE  3  15 04                .byte 21,4
0055B0  3  19 01                .byte 25,1
0055B2  3  1A 04                .byte 26,4
0055B4  3  1E 04                .byte 30,4
0055B6  3  22 03                .byte 34,3
0055B8  3  25 03                .byte 37,3
0055BA  3  28 02                .byte 40,2
0055BC  3  2A 04                .byte 42,4
0055BE  3  2E 04                .byte 46,4
0055C0  3  32 03                .byte 50,3
0055C2  3  35 01                .byte 53,1
0055C4  3  36 01                .byte 54,1
0055C6  3  37 01                .byte 55,1
0055C8  3  38 01                .byte 56,1
0055CA  3  39 01                .byte 57,1
0055CC  3  3A 01                .byte 58,1
0055CE  3  3B 01                .byte 59,1
0055D0  3  3C 01                .byte 60,1
0055D2  3  3D 01 3E 00          .byte 61,1,62,0
0055D6  3               scdat:
0055D6  3  A3 00 9A 00          .word 163,154,348,382,350,237,216,379,335,324,206,469,296,356,295,221,211,345,346,403,324,238,194
0055DA  3  5C 01 7E 01  
0055DE  3  5E 01 ED 00  
005604  3  FF 00 98 04          .byte 255,0,152,4,0,0,4,0,4,255,0,26,4,0,0,4,0,4,255,0,26,255,4,6,255,0,27,255,4,4,255,0,28
005608  3  00 00 04 00  
00560C  3  04 FF 00 1A  
005625  3  04 04 00 04          .byte 4,4,0,4,255,0,28,255,4,4,255,0,28,255,4,4,255,0,28,4,0,4,4,255,0,28,255,4,4,255,0,25,20
005629  3  FF 00 1C FF  
00562D  3  04 04 FF 00  
005646  3  15 00 FF 04          .byte 21,0,255,4,4,255,0,25,18,19,0,4,4,0,4,255,0,5,4,4,0,4,0,4,4,255,0,13,24,0,0,255,4,4
00564A  3  04 FF 00 19  
00564E  3  12 13 00 04  
005668  3  FF 00 06 FF          .byte 255,0,6,255,4,5,255,0,14,25,0,0,255,4,4,255,0,6,4,4,0,4,4,255,0,17,255,4,4,255,0,6,255,4,26
00566C  3  04 05 FF 00  
005670  3  0E 19 00 00  
00568B  3  FF 00 06 04          .byte 255,0,6,4,4,0,255,4,21,0,4,255,0,6,255,4,24,0,4,255,0,6,255,4,26,0,0,0
00568F  3  04 00 FF 04  
005693  3  15 00 04 FF  
0056A7  3  FF 00 98 04          .byte 255,0,152,4,0,0,4,0,4,255,0,26,4,0,0,4,0,4,255,0,26,255,4,6,255,0,27,255,4,4,255,0,28
0056AB  3  00 00 04 00  
0056AF  3  04 FF 00 1A  
0056C8  3  04 04 00 04          .byte 4,4,0,4,255,0,28,255,4,4,255,0,28,255,4,4,255,0,28,4,0,4,4,255,0,28,255,4,4,255,0,28,255,4,4
0056CC  3  FF 00 1C FF  
0056D0  3  04 04 FF 00  
0056EB  3  FF 00 1C 04          .byte 255,0,28,4,4,0,4,255,0,5,4,4,0,4,0,4,4,255,0,16,255,4,4,255,0,6,255,4,5,255,0,17,255,4,4
0056EF  3  04 00 04 FF  
0056F3  3  00 05 04 04  
00570E  3  FF 00 06 04          .byte 255,0,6,4,4,0,4,4,255,0,14,23,22,0,255,4,4,255,0,6,255,4,26,255,0,6,4,4,0,255,4,21,0
005712  3  04 00 04 04  
005716  3  FF 00 0E 17  
00572F  3  04 FF 00 06          .byte 4,255,0,6,255,4,24,0,4,255,0,6,255,4,26,0,0,0
005733  3  FF 04 18 00  
005737  3  04 FF 00 06  
005741  3  FF 0C 21 00          .byte 255,12,33,0,0,12,255,0,8,255,5,17,0,0,12,12,0,0,12,255,0,27,12,12,0,0,12,255,0,6,13,13,255,1,17
005745  3  00 0C FF 00  
005749  3  08 FF 05 11  
005764  3  07 07 0C 0C          .byte 7,7,12,12,0,0,12,255,0,8,15,255,5,14,12,12,7,7,12,12,0,0,12,13,13,255,0,6,15,255,0,14,12,12
005768  3  00 00 0C FF  
00576C  3  00 08 0F FF  
005786  3  07 07 0C 0C          .byte 7,7,12,12,0,0,12,255,0,6,13,13,12,255,1,14,12,12,7,7,12,12,0,0,12,255,0,8,15,255,5,14,12,12
00578A  3  00 00 0C FF  
00578E  3  00 06 0D 0D  
0057A8  3  07 07 0C 0C          .byte 7,7,12,12,0,0,12,255,0,8,15,255,0,14,12,12,7,7,12,12,0,0,12,255,0,6,13,13,12,255,1,14,12,12
0057AC  3  00 00 0C FF  
0057B0  3  00 08 0F FF  
0057CA  3  07 07 0C 0C          .byte 7,7,12,12,0,0,12,13,13,255,0,6,15,255,5,8,255,12,8,7,7,12,12,0,0,12,255,0,8,15,255,0,8
0057CE  3  00 00 0C 0D  
0057D2  3  0D FF 00 06  
0057EB  3  0C 0C FF 00          .byte 12,12,255,0,6,7,7,12,12,0,0,12,255,0,6,13,13,12,255,1,8,12,12,255,0,6,7,7,12,12,0,0,12
0057EF  3  06 07 07 0C  
0057F3  3  0C 00 00 0C  
00580C  3  FF 00 08 FF          .byte 255,0,8,255,12,11,7,7,255,12,4,7,7,12,12,0,0,12,255,0,8,255,12,11,7,7,255,12,4,7,7,12,12
005810  3  0C 0B 07 07  
005814  3  FF 0C 04 07  
00582D  3  00 00 0C 0D          .byte 0,0,12,13,13,255,0,6,255,12,11,7,7,255,12,4,7,7,12,12,0,0,12,255,0,8,15,255,5,9,12,7,7
005831  3  0D FF 00 06  
005835  3  FF 0C 0B 07  
00584E  3  0C 05 05 05          .byte 12,5,5,5,7,7,12,12,0,0,12,255,0,8,15,255,0,9,12,7,7,12,0,0,0,7,7,12,12,0,0,255,12,10
005852  3  07 07 0C 0C  
005856  3  00 00 0C FF  
005870  3  FF 01 09 0C          .byte 255,1,9,12,7,7,12,1,1,1,255,12,4,0,0,255,5,20,7,7,255,5,6,12,12,255,0,22,7,7,255,0,6
005874  3  07 07 0C 01  
005878  3  01 01 FF 0C  
005891  3  FF 0C 04 FF          .byte 255,12,4,255,1,20,12,12,255,1,6,12
005895  3  01 14 0C 0C  
005899  3  FF 01 06 0C  
00589D  3  FF 0C 21 FF          .byte 255,12,33,255,0,4,15,255,5,14,15,0,0,255,5,5,15,0,0,12,12,255,0,4,15,255,0,14,15,255,0,7,15
0058A1  3  00 04 0F FF  
0058A5  3  05 0E 0F 00  
0058BE  3  00 00 0C 0C          .byte 0,0,12,12,255,0,4,12,255,1,14,12,7,7,255,1,5,12,0,0,12,12,255,0,7,12,12,255,0,10,12,7,7
0058C2  3  FF 00 04 0C  
0058C6  3  FF 01 0E 0C  
0058DF  3  0C FF 00 07          .byte 12,255,0,7,12,12,255,0,7,12,12,255,0,10,12,7,7,12,255,0,7,12,12,255,0,7,12,12,255,0,10,12,7,7
0058E3  3  0C 0C FF 00  
0058E7  3  07 0C 0C FF  
005901  3  0C FF 00 07          .byte 12,255,0,7,12,12,255,0,7,12,12,255,0,10,12,7,7,12,255,0,7,12,12,255,0,6,255,12,4,255,0,9,12
005905  3  0C 0C FF 00  
005909  3  07 0C 0C FF  
005922  3  07 07 0C FF          .byte 7,7,12,255,0,7,12,12,255,0,5,255,12,6,255,0,8,12,7,7,12,255,0,7,12,12,255,0,4,255,12,8,255,0,7
005926  3  00 07 0C 0C  
00592A  3  FF 00 05 FF  
005945  3  0C 07 07 0C          .byte 12,7,7,12,255,0,7,12,12,255,0,4,255,12,8,255,0,7,12,7,7,12,255,0,7,12,12,255,0,4,5,5,5
005949  3  FF 00 07 0C  
00594D  3  0C FF 00 04  
005966  3  00 00 05 05          .byte 0,0,5,5,5,255,0,7,12,7,7,12,255,0,7,12,12,255,0,19,12,7,7,12,255,0,7,12,12,255,0,4,1,1,1
00596A  3  05 FF 00 07  
00596E  3  0C 07 07 0C  
005989  3  07 07 01 01          .byte 7,7,1,1,1,255,0,7,12,7,7,12,255,0,7,12,12,255,0,6,12,7,7,12,255,0,9,12,7,7,12,13,13
00598D  3  01 FF 00 07  
005991  3  0C 07 07 0C  
0059AA  3  FF 00 05 0C          .byte 255,0,5,12,12,255,0,6,12,7,7,12,255,0,9,15,7,7,15,255,0,7,12,12,255,0,6,12,7,7,12,255,0,9
0059AE  3  0C FF 00 06  
0059B2  3  0C 07 07 0C  
0059CC  3  0F 07 07 0F          .byte 15,7,7,15,255,0,7,12,12,255,0,6,12,7,7,12,255,0,5,255,12,12,0,0,0,12,12,255,0,6,5,7,7
0059D0  3  FF 00 07 0C  
0059D4  3  0C FF 00 06  
0059ED  3  05 FF 00 05          .byte 5,255,0,5,15,255,5,10,15,0,0,0,12,12,255,0,7,7,7,255,0,6,15,255,0,10,15,0,0,0,255,12,8
0059F1  3  0F FF 05 0A  
0059F5  3  0F 00 00 00  
005A0E  3  01 0C 0C 01          .byte 1,12,12,1,255,12,6,255,1,10,255,12,5
005A12  3  FF 0C 06 FF  
005A16  3  01 0A FF 0C  
005A1B  3  FF 0C 21 05          .byte 255,12,33,5,5,5,255,0,8,5,5,5,0,0,5,5,5,255,0,8,5,5,5,12,12,255,0,30,12,12,1,1,1
005A1F  3  05 05 FF 00  
005A23  3  08 05 05 05  
005A3C  3  00 00 00 FF          .byte 0,0,0,255,13,4,12,1,1,1,7,7,1,1,1,12,255,13,4,0,0,0,1,1,1,12,12,5,5,5,255,0,10
005A40  3  0D 04 0C 01  
005A44  3  01 01 07 07  
005A5D  3  0C 07 07 0C          .byte 12,7,7,12,255,0,10,5,5,5,12,12,255,0,13,12,7,7,12,255,0,13,12,12,1,1,1,255,12,5,255,0,5
005A61  3  FF 00 0A 05  
005A65  3  05 05 0C 0C  
005A7E  3  0C 07 07 0C          .byte 12,7,7,12,255,0,5,255,12,5,1,1,1,12,12,255,0,13,12,7,7,12,255,0,13,12,12,255,0,11,12,12,12
005A82  3  FF 00 05 FF  
005A86  3  0C 05 01 01  
005A9F  3  07 07 0C 0C          .byte 7,7,12,12,12,255,0,11,12,12,255,0,14,7,7,255,0,14,12,12,255,0,14,7,7,255,0,14,12,12,255,0,10
005AA3  3  0C FF 00 0B  
005AA7  3  0C 0C FF 00  
005AC0  3  FF 0D 04 07          .byte 255,13,4,7,7,255,13,4,255,0,10,12,12,255,0,30,12,12,255,0,30,12,12,0,0,0,12,7,7,12,255,0,16
005AC4  3  07 FF 0D 04  
005AC8  3  FF 00 0A 0C  
005AE1  3  0C 07 07 0C          .byte 12,7,7,12,0,0,0,12,12,0,0,0,12,7,7,12,255,0,16,12,7,7,12,0,0,0,12,12,0,0,0,12,7,7
005AE5  3  00 00 00 0C  
005AE9  3  0C 00 00 00  
005B03  3  0C FF 00 10          .byte 12,255,0,16,12,7,7,12,0,0,0,12,12,0,0,0,12,7,7,12,255,0,16,12,7,7,12,0,0,0,12,12,0,0,0
005B07  3  0C 07 07 0C  
005B0B  3  00 00 00 0C  
005B26  3  0C 07 07 0C          .byte 12,7,7,12,255,0,6,255,13,4,255,0,6,12,7,7,12,0,0,0,12,12,0,0,0,5,7,7,5,255,0,6,255,15,4
005B2A  3  FF 00 06 FF  
005B2E  3  0D 04 FF 00  
005B49  3  FF 00 06 05          .byte 255,0,6,5,7,7,5,0,0,0,12,12,255,0,4,7,7,255,0,7,255,15,4,255,0,7,7,7,255,0,4,255,12,5
005B4D  3  07 07 05 00  
005B51  3  00 00 0C 0C  
005B6B  3  01 0C 0C 01          .byte 1,12,12,1,255,12,16,1,12,12,1,255,12,4
005B6F  3  FF 0C 10 01  
005B73  3  0C 0C 01 FF  
005B79  3  FF 0C 21 FF          .byte 255,12,33,255,0,6,255,5,17,255,0,7,12,12,255,0,30,12,12,7,7,255,12,4,255,1,17,255,0,7,12,12,7,7
005B7D  3  00 06 FF 05  
005B81  3  11 FF 00 07  
005B9B  3  0C 00 00 00          .byte 12,0,0,0,255,5,17,255,0,7,12,12,7,7,12,255,0,27,12,12,7,7,12,0,0,0,255,1,17,13,13,255,0,5
005B9F  3  FF 05 11 FF  
005BA3  3  00 07 0C 0C  
005BBD  3  0C 0C 07 07          .byte 12,12,7,7,12,0,0,0,255,5,17,255,0,7,12,12,7,7,12,255,0,27,12,12,7,7,255,12,4,255,1,17,13,13
005BC1  3  0C 00 00 00  
005BC5  3  FF 05 11 FF  
005BDF  3  FF 00 05 0C          .byte 255,0,5,12,12,7,7,255,0,4,255,5,17,255,0,7,12,12,7,7,255,0,28,255,12,8,255,1,17,255,12,5,7,7
005BE3  3  0C 07 07 FF  
005BE7  3  00 04 FF 05  
005C01  3  0C 0C FF 00          .byte 12,12,255,0,6,255,5,17,255,0,4,12,7,7,12,12,255,0,27,12,7,7,12,12,255,0,6,255,1,17,255,0,4
005C05  3  06 FF 05 11  
005C09  3  FF 00 04 0C  
005C22  3  0C 07 07 0C          .byte 12,7,7,12,12,255,0,6,255,5,17,255,0,4,12,7,7,12,12,255,0,27,12,7,7,12,12,255,0,6,255,1,17
005C26  3  0C FF 00 06  
005C2A  3  FF 05 11 FF  
005C43  3  FF 0D 04 0C          .byte 255,13,4,12,7,7,12,12,255,0,6,255,5,17,255,0,5,7,7,12,12,255,0,28,7,7,255,12,8,255,1,17,255,12,8
005C47  3  07 07 0C 0C  
005C4B  3  FF 00 06 FF  
005C66  3  FF 0C 21 FF          .byte 255,12,33,255,15,30,12,12,15,0,0,255,15,23,0,0,15,15,12,12,15,0,0,255,15,23,0,0,15,15,12,12,255,15,26
005C6A  3  0F 1E 0C 0C  
005C6E  3  0F 00 00 FF  
005C89  3  00 00 0F 0F          .byte 0,0,15,15,12,12,255,15,26,0,0,15,15,12,12,255,15,13,0,0,255,15,11,0,0,15,15,12,12,255,15,13,0,0
005C8D  3  0C 0C FF 0F  
005C91  3  1A 00 00 0F  
005CAB  3  FF 0F 0F 0C          .byte 255,15,15,12,12,255,15,30,12,12,15,15,255,0,10,15,255,0,15,15,15,12,12,15,15,255,0,10,15,255,0,15,15,15
005CAF  3  0C FF 0F 1E  
005CB3  3  0C 0C 0F 0F  
005CCD  3  0C 0C FF 0F          .byte 12,12,255,15,30,12,12,15,15,255,0,16,15,255,0,9,15,15,12,12,15,15,255,0,16,15,255,0,9,15,15,12,12
005CD1  3  1E 0C 0C 0F  
005CD5  3  0F FF 00 10  
005CEE  3  FF 0F 1E 0C          .byte 255,15,30,12,12,15,15,255,0,9,15,255,0,16,15,15,12,12,15,15,255,0,9,15,255,0,16,15,15,12,12,255,15,30
005CF2  3  0C 0F 0F FF  
005CF6  3  00 09 0F FF  
005D10  3  0C 0C FF 0F          .byte 12,12,255,15,4,255,12,22,255,15,4,12,12,15,15,0,0,255,5,22,0,0,15,15,12,12,15,15,255,0,16,15,255,0,9
005D14  3  04 FF 0C 16  
005D18  3  FF 0F 04 0C  
005D33  3  0F 0F FF 0C          .byte 15,15,255,12,6,255,1,22,255,12,5
005D37  3  06 FF 01 16  
005D3B  3  FF 0C 05     
005D3E  3  FF 0F 05 FF          .byte 255,15,5,255,12,24,15,15,15,255,12,6,15,15,255,0,20,255,12,5,255,5,5,15,15,255,0,20,5,5,5,12,12
005D42  3  0C 18 0F 0F  
005D46  3  0F FF 0C 06  
005D5F  3  FF 00 05 0F          .byte 255,0,5,15,15,255,0,23,12,12,255,1,5,15,15,255,0,20,1,1,1,12,12,255,0,6,15,255,0,20,5,5,5
005D63  3  0F FF 00 17  
005D67  3  0C 0C FF 01  
005D80  3  0C 0C FF 00          .byte 12,12,255,0,6,15,255,0,23,12,12,15,15,255,12,5,0,0,0,12,12,12,7,7,12,12,12,0,0,0,255,12,4
005D84  3  06 0F FF 00  
005D88  3  17 0C 0C 0F  
005DA1  3  07 07 01 01          .byte 7,7,1,1,1,12,12,15,15,12,0,0,0,12,255,0,5,12,7,7,12,255,0,5,12,15,15,12,7,7,12,15,15
005DA5  3  01 0C 0C 0F  
005DA9  3  0F 0C 00 00  
005DC2  3  0C 0C 0F 0F          .byte 12,12,15,15,12,0,0,0,12,255,0,6,7,7,255,0,6,12,15,15,12,7,7,12,15,15,12,12,15,15,12,0,0,0
005DC6  3  0C 00 00 00  
005DCA  3  0C FF 00 06  
005DE4  3  0C FF 00 0E          .byte 12,255,0,14,12,15,15,12,7,7,12,15,15,12,12,15,15,12,0,0,0,12,255,0,5,255,13,4,255,0,5,12,15,15
005DE8  3  0C 0F 0F 0C  
005DEC  3  07 07 0C 0F  
005E06  3  0C 07 07 0C          .byte 12,7,7,12,15,15,12,12,15,15,12,0,0,0,12,255,0,14,12,15,15,12,7,7,12,15,15,12,12,15,15,12,0,0,0
005E0A  3  0F 0F 0C 0C  
005E0E  3  0F 0F 0C 00  
005E29  3  0C FF 00 0E          .byte 12,255,0,14,12,15,15,12,7,7,12,15,15,12,12,15,15,12,7,7,12,12,255,0,14,12,15,15,12,7,7,12,15,15
005E2D  3  0C 0F 0F 0C  
005E31  3  07 07 0C 0F  
005E4B  3  0C 0C 0F 0F          .byte 12,12,15,15,12,7,7,12,255,0,15,255,12,4,7,7,12,15,15,12,12,15,15,12,7,7,12,255,0,4,15,255,0,10
005E4F  3  0C 07 07 0C  
005E53  3  FF 00 0F FF  
005E6D  3  FF 05 04 07          .byte 255,5,4,7,7,12,15,15,12,12,15,15,12,7,7,12,255,0,4,15,255,0,14,7,7,12,15,15,12,12,15,15,12
005E71  3  07 0C 0F 0F  
005E75  3  0C 0C 0F 0F  
005E8E  3  07 07 0C FF          .byte 7,7,12,255,0,4,255,12,11,255,1,4,255,12,7,15,15,15,7,7,255,0,5,255,5,20,12,12,15,15,15,7,7
005E92  3  00 04 FF 0C  
005E96  3  0B FF 01 04  
005EAF  3  FF 00 19 FF          .byte 255,0,25,255,12,12,255,1,20,12
005EB3  3  0C 0C FF 01  
005EB7  3  14 0C        
005EB9  3  FF 0C 0E FF          .byte 255,12,14,255,15,18,12,255,0,12,12,255,15,18,12,255,0,12,255,12,20,255,0,12,255,5,16,0,0,12,12,255,0,30
005EBD  3  0F 12 0C FF  
005EC1  3  00 0C 0C FF  
005EDB  3  0C 0C FF 00          .byte 12,12,255,0,8,15,15,15,12,255,1,16,0,0,12,12,255,0,8,255,15,20,0,0,12,12,255,15,4,255,12,4,255,15,20
005EDF  3  08 0F 0F 0F  
005EE3  3  0C FF 01 10  
005EFE  3  00 00 0C 0C          .byte 0,0,12,12,255,0,4,5,5,5,12,255,0,13,255,15,7,0,0,12,12,255,0,7,12,255,0,13,255,15,7,0,0
005F02  3  FF 00 04 05  
005F06  3  05 05 0C FF  
005F1F  3  0C 0C 07 07          .byte 12,12,7,7,12,12,1,1,1,12,13,13,13,255,12,10,255,15,7,0,0,12,12,7,7,12,255,0,8,255,5,10,255,15,7
005F23  3  0C 0C 01 01  
005F27  3  01 0C 0D 0D  
005F42  3  00 00 0C 0C          .byte 0,0,12,12,7,7,12,255,0,18,255,15,7,0,0,12,12,7,7,12,0,0,255,12,6,255,1,10,12,7,7,12,15,15,15
005F46  3  07 07 0C FF  
005F4A  3  00 12 FF 0F  
005F65  3  00 00 0C 0C          .byte 0,0,12,12,7,7,12,255,0,8,255,12,4,255,0,6,12,7,7,12,15,15,15,0,0,12,12,7,7,12,255,0,8
005F69  3  07 07 0C FF  
005F6D  3  00 08 FF 0C  
005F86  3  FF 0C 04 FF          .byte 255,12,4,255,0,6,12,7,7,12,15,15,15,0,0,12,12,7,7,12,255,0,8,255,5,4,255,0,6,12,7,7,12
005F8A  3  00 06 0C 07  
005F8E  3  07 0C 0F 0F  
005FA7  3  0F 0F 0F 00          .byte 15,15,15,0,0,12,12,7,7,12,255,0,18,12,7,7,12,15,15,15,0,0,12,12,7,7,255,12,5,0,0,0,12
005FAB  3  00 0C 0C 07  
005FAF  3  07 0C FF 00  
005FC8  3  FF 01 04 0C          .byte 255,1,4,12,255,0,5,12,7,7,12,15,15,15,0,0,12,12,7,7,255,0,8,255,5,6,255,0,5,5,7,7,5
005FCC  3  FF 00 05 0C  
005FD0  3  07 07 0C 0F  
005FE9  3  FF 00 05 0C          .byte 255,0,5,12,12,7,7,255,0,20,7,7,255,0,6,255,12,12,255,1,6,255,12,5,1,12,12,1,255,12,6
005FED  3  0C 07 07 FF  
005FF1  3  00 14 07 07  
006008  3  FF 0C 21 FF          .byte 255,12,33,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,14,12,255,0,15,12,12,255,0,13,12,15,12
00600C  3  00 1E 0C 0C  
006010  3  FF 00 1E 0C  
006029  3  FF 00 0E 0C          .byte 255,0,14,12,12,255,0,6,12,255,0,5,12,15,15,15,12,255,0,5,12,255,0,5,13,13,12,12,7,7,12,0,0,0
00602D  3  0C FF 00 06  
006031  3  0C FF 00 05  
00604B  3  0C 0C 00 00          .byte 12,12,0,0,0,12,255,15,5,12,0,0,0,12,12,255,0,7,12,12,7,7,12,0,0,0,12,15,12,0,12,255,15,7
00604F  3  00 0C FF 0F  
006053  3  05 0C 00 00  
00606D  3  0C 00 0C 0F          .byte 12,0,12,15,12,255,0,7,12,12,7,7,12,0,0,0,12,15,15,12,255,15,9,12,15,15,12,13,13,255,0,5,12,12
006071  3  0C FF 00 07  
006075  3  0C 0C 07 07  
00608F  3  07 07 0C 00          .byte 7,7,12,0,0,0,12,255,15,15,12,255,0,7,12,12,7,7,12,0,0,0,12,255,15,15,12,255,0,7,12,12,7,7
006093  3  00 00 0C FF  
006097  3  0F 0F 0C FF  
0060B1  3  0C 00 00 00          .byte 12,0,0,0,255,12,17,255,0,5,13,13,12,12,7,7,12,0,0,0,12,255,5,7,0,0,255,5,6,12,255,0,7
0060B5  3  FF 0C 11 FF  
0060B9  3  00 05 0D 0D  
0060D2  3  0C 0C 07 07          .byte 12,12,7,7,12,0,0,0,12,255,0,15,12,255,0,7,12,12,7,7,12,0,0,0,12,255,1,7,7,7,255,1,6
0060D6  3  0C 00 00 00  
0060DA  3  0C FF 00 0F  
0060F3  3  0C 0D 0D FF          .byte 12,13,13,255,0,5,12,12,7,7,12,255,0,10,12,7,7,12,255,0,13,12,12,7,7,12,255,0,10,12,7,7,12
0060F7  3  00 05 0C 0C  
0060FB  3  07 07 0C FF  
006114  3  FF 00 0D 0C          .byte 255,0,13,12,12,7,7,12,255,0,10,12,7,7,12,255,0,11,13,13,12,12,7,7,5,255,0,10,15,7,7,15,255,0,13
006118  3  0C 07 07 0C  
00611C  3  FF 00 0A 0C  
006137  3  0C 0C 07 07          .byte 12,12,7,7,255,0,11,15,7,7,15,255,0,13,255,12,4,1,255,12,28
00613B  3  FF 00 0B 0F  
00613F  3  07 07 0F FF  
00614C  3  FF 0C 21 FF          .byte 255,12,33,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12
006150  3  00 1E 0C 0C  
006154  3  FF 00 1E 0C  
00616D  3  07 07 0C FF          .byte 7,7,12,255,15,24,12,7,7,12,12,7,7,12,255,15,24,12,7,7,12,12,7,7,12,255,15,24,12,7,7,12,12
006171  3  0F 18 0C 07  
006175  3  07 0C 0C 07  
00618E  3  07 07 0C FF          .byte 7,7,12,255,15,24,12,7,7,12,12,7,7,12,255,15,24,12,7,7,12,12,7,7,12,255,15,24,12,7,7,12,12
006192  3  0F 18 0C 07  
006196  3  07 0C 0C 07  
0061AF  3  07 07 0C FF          .byte 7,7,12,255,15,24,12,7,7,12,12,7,7,12,255,15,24,12,7,7,12,12,7,7,12,255,15,24,12,7,7,12,12
0061B3  3  0F 18 0C 07  
0061B7  3  07 0C 0C 07  
0061D0  3  07 07 0C FF          .byte 7,7,12,255,15,24,12,7,7,12,12,7,7,12,255,15,24,12,7,7,12,12,7,7,255,12,11,15,15,15,255,12,12
0061D4  3  0F 18 0C 07  
0061D8  3  07 0C 0C 07  
0061F1  3  07 07 0C 0C          .byte 7,7,12,12,7,7,255,5,11,0,0,0,255,5,12,7,7,12,12,7,7,255,0,26,7,7,255,12,4,255,1,11,12,12,12
0061F5  3  07 07 FF 05  
0061F9  3  0B 00 00 00  
006214  3  FF 01 0C 0C          .byte 255,1,12,12,12,12
006218  3  0C 0C        
00621A  3  FF 0C 21 FF          .byte 255,12,33,255,5,28,0,0,12,12,255,0,30,12,12,255,1,28,7,7,12,12,255,0,27,12,7,7,12,12,255,0,27
00621E  3  05 1C 00 00  
006222  3  0C 0C FF 00  
00623B  3  0C 07 07 0C          .byte 12,7,7,12,12,255,0,5,13,13,12,0,0,0,12,13,13,13,12,0,0,0,12,13,13,13,12,0,0,0,12,7,7
00623F  3  0C FF 00 05  
006243  3  0D 0D 0C 00  
00625C  3  0C 0C FF 00          .byte 12,12,255,0,7,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,7,7,12,12,255,0,7
006260  3  07 0C 00 00  
006264  3  00 0C 00 00  
00627D  3  0C 00 00 00          .byte 12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,7,7,12,12,255,0,5,13,13,12,0,0,0
006281  3  0C 00 00 00  
006285  3  0C 00 00 00  
00629F  3  0C 0D 0D 0D          .byte 12,13,13,13,12,0,0,0,12,13,13,13,12,0,0,0,12,7,7,12,12,255,0,7,12,0,0,0,12,0,0,0,12
0062A3  3  0C 00 00 00  
0062A7  3  0C 0D 0D 0D  
0062C0  3  00 00 00 0C          .byte 0,0,0,12,0,0,0,12,0,0,0,12,7,7,12,12,255,0,7,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0
0062C4  3  00 00 00 0C  
0062C8  3  00 00 00 0C  
0062E3  3  0C 00 00 00          .byte 12,0,0,0,12,7,7,12,12,255,0,5,13,13,12,0,0,0,12,13,13,13,12,0,0,0,12,13,13,13,12,0,0,0
0062E7  3  0C 07 07 0C  
0062EB  3  0C FF 00 05  
006305  3  0C 07 07 0C          .byte 12,7,7,12,12,255,0,7,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,7,7,12,12
006309  3  0C FF 00 07  
00630D  3  0C 00 00 00  
006326  3  FF 00 07 0C          .byte 255,0,7,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,7,7,12,12,255,0,5,13,13
00632A  3  00 00 00 0C  
00632E  3  00 00 00 0C  
006347  3  0C 00 00 00          .byte 12,0,0,0,12,13,13,13,12,0,0,0,12,13,13,13,12,0,0,0,12,7,7,12,12,255,0,7,12,0,0,0,12
00634B  3  0C 0D 0D 0D  
00634F  3  0C 00 00 00  
006368  3  00 00 00 0C          .byte 0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,7,7,12,12,255,0,7,12,0,0,0,12,0,0,0,12,0,0,0
00636C  3  00 00 00 0C  
006370  3  00 00 00 0C  
00638B  3  0C 00 00 00          .byte 12,0,0,0,12,0,0,0,12,7,7,12,12,13,13,255,0,5,12,0,0,0,12,13,13,13,12,0,0,0,12,13,13,13
00638F  3  0C 00 00 00  
006393  3  0C 07 07 0C  
0063AD  3  0C 00 00 00          .byte 12,0,0,0,12,7,7,12,12,255,0,7,12,0,0,0,15,0,0,0,12,0,0,0,15,0,0,0,12,0,0,0,15
0063B1  3  0C 07 07 0C  
0063B5  3  0C FF 00 07  
0063CE  3  07 07 0C 0C          .byte 7,7,12,12,255,0,7,12,0,0,0,15,0,0,0,12,0,0,0,15,0,0,0,12,0,0,0,15,7,7,255,12,33
0063D2  3  FF 00 07 0C  
0063D6  3  00 00 00 0F  
0063EF  3  FF 0C 21 FF          .byte 255,12,33,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,9,255,15,14,255,0,7,12,12
0063F3  3  00 1E 0C 0C  
0063F7  3  FF 00 1E 0C  
006411  3  FF 00 09 FF          .byte 255,0,9,255,15,14,255,0,7,12,12,255,0,4,12,7,7,255,12,18,255,0,5,12,12,255,0,4,12,7,7,12,255,5,14
006415  3  0F 0E FF 00  
006419  3  07 0C 0C FF  
006434  3  00 00 0C FF          .byte 0,0,12,255,0,5,12,12,255,0,4,12,7,7,12,255,0,16,12,255,0,5,12,12,255,0,4,12,7,7,12,255,1,14
006438  3  00 05 0C 0C  
00643C  3  FF 00 04 0C  
006456  3  07 07 0C FF          .byte 7,7,12,255,0,5,12,12,255,0,4,12,7,7,12,0,0,255,5,12,7,7,12,255,0,5,12,12,255,0,4,12,7,7
00645A  3  00 05 0C 0C  
00645E  3  FF 00 04 0C  
006478  3  0C FF 00 0E          .byte 12,255,0,14,7,7,12,255,0,5,12,12,255,0,4,12,7,7,12,7,7,255,1,12,12,12,12,255,0,5,12,12,255,0,4
00647C  3  07 07 0C FF  
006480  3  00 05 0C 0C  
00649B  3  0C 07 07 0C          .byte 12,7,7,12,7,7,255,5,12,0,0,12,255,0,5,12,12,255,0,4,12,7,7,12,7,7,255,0,14,12,255,0,5
00649F  3  07 07 FF 05  
0064A3  3  0C 00 00 0C  
0064BC  3  0C 0C FF 00          .byte 12,12,255,0,4,12,7,7,12,12,12,255,1,12,7,7,12,255,0,5,12,12,255,0,4,12,7,7,12,255,0,13,12
0064C0  3  04 0C 07 07  
0064C4  3  0C 0C 0C FF  
0064DD  3  07 07 0C FF          .byte 7,7,12,255,0,5,12,12,255,0,4,12,7,7,12,255,0,13,12,7,7,12,255,0,5,12,12,255,0,5,7,7,255,0,15
0064E1  3  00 05 0C 0C  
0064E5  3  FF 00 04 0C  
006500  3  07 07 FF 00          .byte 7,7,255,0,6,12,12,255,0,5,7,7,255,0,15,7,7,255,0,6,255,12,33
006504  3  06 0C 0C FF  
006508  3  00 05 07 07  
006517  3  FF 0C 21 FF          .byte 255,12,33,255,0,12,255,15,4,255,0,14,12,12,255,0,12,15,0,0,15,255,0,14,12,12,255,0,12,15,0,0,15
00651B  3  00 0C FF 0F  
00651F  3  04 FF 00 0E  
006538  3  FF 00 0E 0C          .byte 255,0,14,12,12,255,0,12,255,15,4,255,0,14,12,12,255,0,12,255,15,4,255,0,14,12,12,255,0,12,255,15,4
00653C  3  0C FF 00 0C  
006540  3  FF 0F 04 FF  
006559  3  FF 00 0E 0C          .byte 255,0,14,12,12,7,7,12,0,0,0,255,12,6,255,15,4,255,12,7,0,0,0,255,12,6,7,7,12,0,0,0,12
00655D  3  0C 07 07 0C  
006561  3  00 00 00 FF  
00657A  3  FF 0F 0F 0C          .byte 255,15,15,12,0,0,0,12,15,15,15,12,12,7,7,12,0,0,0,12,255,15,15,12,0,0,0,12,15,15,15,12,12
00657E  3  00 00 00 0C  
006582  3  0F 0F 0F 0C  
00659B  3  07 07 0C 00          .byte 7,7,12,0,0,0,12,255,15,15,12,0,0,0,12,15,15,15,12,12,7,7,12,0,0,0,12,255,15,15,12,0,0,0
00659F  3  00 00 0C FF  
0065A3  3  0F 0F 0C 00  
0065BD  3  0C 0F 0F 0F          .byte 12,15,15,15,12,12,7,7,12,0,0,0,12,255,15,4,255,12,8,15,15,15,12,0,0,0,12,15,15,15,12,12,7,7
0065C1  3  0C 0C 07 07  
0065C5  3  0C 00 00 00  
0065DF  3  0C 00 00 00          .byte 12,0,0,0,12,255,15,4,255,5,8,15,15,15,12,0,0,0,12,15,15,15,12,12,7,7,12,0,0,0,12,255,15,4
0065E3  3  0C FF 0F 04  
0065E7  3  FF 05 08 0F  
006601  3  FF 00 08 0F          .byte 255,0,8,15,15,15,12,0,0,0,12,15,15,15,12,12,7,7,12,0,0,0,12,255,15,4,255,1,8,255,15,4,0,0,0
006605  3  0F 0F 0C 00  
006609  3  00 00 0C 0F  
006624  3  FF 0C 06 07          .byte 255,12,6,7,7,12,0,0,0,12,255,15,16,0,0,0,255,5,4,12,12,7,7,12,0,0,0,12,255,15,16,255,0,7
006628  3  07 0C 00 00  
00662C  3  00 0C FF 0F  
006646  3  0C 0C 07 07          .byte 12,12,7,7,12,15,15,15,255,12,17,15,15,15,255,1,4,12,12,255,0,7,255,5,16,0,0,0,255,5,4,12,12
00664A  3  0C 0F 0F 0F  
00664E  3  FF 0C 11 0F  
006667  3  FF 00 0E 0F          .byte 255,0,14,15,255,0,15,255,12,9,255,1,16,12,12,12,255,1,4,12
00666B  3  FF 00 0F FF  
00666F  3  0C 09 FF 01  
00667B  3  FF 0C 21 FF          .byte 255,12,33,255,0,30,12,12,255,0,19,17,16,255,0,9,12,12,255,0,18,17,12,12,16,255,0,8,12,12,255,0,17
00667F  3  00 1E 0C 0C  
006683  3  FF 00 13 11  
00669C  3  11 FF 0C 04          .byte 17,255,12,4,16,255,0,7,12,12,255,0,16,17,255,12,6,16,255,0,6,12,12,255,0,15,17,255,12,8,16,255,0,5
0066A0  3  10 FF 00 07  
0066A4  3  0C 0C FF 00  
0066BE  3  0C 0C FF 00          .byte 12,12,255,0,14,17,255,12,10,16,255,0,4,12,12,255,0,13,17,255,12,12,16,0,0,0,12,12,255,0,12,17,255,12,14
0066C2  3  0E 11 FF 0C  
0066C6  3  0A 10 FF 00  
0066E1  3  10 00 00 0C          .byte 16,0,0,12,12,255,0,11,17,255,12,16,16,0,12,12,255,0,10,17,255,12,18,16,12,12,13,13,255,0,5,13,13
0066E5  3  0C FF 00 0B  
0066E9  3  11 FF 0C 10  
006702  3  FF 0C 17 FF          .byte 255,12,23,255,0,9,15,255,5,6,15,255,5,6,15,255,5,6,12,12,255,0,9,15,255,0,6,15,255,0,6,15,255,0,6
006706  3  00 09 0F FF  
00670A  3  05 06 0F FF  
006725  3  0C 0C 0D 0D          .byte 12,12,13,13,255,0,5,13,13,12,255,1,6,12,255,1,6,12,255,1,6,12,12,255,0,9,15,255,5,6,15,255,5,6
006729  3  FF 00 05 0D  
00672D  3  0D 0C FF 01  
006747  3  0F FF 05 06          .byte 15,255,5,6,12,12,255,0,9,15,255,0,6,15,255,0,6,15,255,0,6,12,12,13,13,255,0,5,13,13,12,255,1,6
00674B  3  0C 0C FF 00  
00674F  3  09 0F FF 00  
006769  3  0C FF 01 06          .byte 12,255,1,6,12,255,1,6,12,14,255,0,9,15,255,5,6,15,255,5,6,15,255,5,6,12,14,255,0,9,15,255,0,6
00676D  3  0C FF 01 06  
006771  3  0C 0E FF 00  
00678B  3  0F FF 00 06          .byte 15,255,0,6,15,255,0,6,255,12,12,255,1,6,12,255,1,6,12,255,1,6,12
00678F  3  0F FF 00 06  
006793  3  FF 0C 0C FF  
0067A2  3  FF 0C 21 FF          .byte 255,12,33,255,0,30,12,12,255,0,30,12,12,255,0,8,15,255,0,12,15,255,0,8,12,12,255,0,8,15,255,0,12
0067A6  3  00 1E 0C 0C  
0067AA  3  FF 00 1E 0C  
0067C3  3  0F FF 00 08          .byte 15,255,0,8,12,12,255,0,8,255,15,4,255,12,6,255,15,4,255,0,8,12,12,255,0,12,255,5,6,255,0,12,12,12
0067C7  3  0C 0C FF 00  
0067CB  3  08 FF 0F 04  
0067E5  3  FF 00 1E 0C          .byte 255,0,30,12,12,255,0,4,13,13,255,0,4,13,13,255,1,6,13,13,255,0,4,13,13,255,0,4,12,12,255,0,12
0067E9  3  0C FF 00 04  
0067ED  3  0D 0D FF 00  
006806  3  FF 05 06 FF          .byte 255,5,6,255,0,12,12,12,255,0,30,12,12,255,0,10,13,13,255,1,6,13,13,255,0,8,13,13,12,12,255,0,12
00680A  3  00 0C 0C 0C  
00680E  3  FF 00 1E 0C  
006827  3  FF 05 06 FF          .byte 255,5,6,255,0,12,12,12,255,0,30,12,12,255,0,10,13,13,255,1,6,13,13,255,0,4,13,13,255,0,4,12,12
00682B  3  00 0C 0C 0C  
00682F  3  FF 00 1E 0C  
006848  3  FF 00 08 0F          .byte 255,0,8,15,255,0,12,15,255,0,8,12,12,255,0,8,15,255,0,12,15,255,0,8,255,12,6,255,0,4,255,12,14
00684C  3  FF 00 0C 0F  
006850  3  FF 00 08 0C  
006869  3  FF 00 04 FF          .byte 255,0,4,255,12,6,255,0,30,12,12,255,0,30,12,12,255,14,30,255,12,33
00686D  3  0C 06 FF 00  
006871  3  1E 0C 0C FF  
00687F  3  FF 0C 21 FF          .byte 255,12,33,255,5,5,255,0,6,255,5,5,255,0,9,255,5,5,12,12,255,0,30,12,12,255,1,5,13,13,255,0,4
006883  3  05 05 FF 00  
006887  3  06 FF 05 05  
0068A0  3  FF 01 05 0D          .byte 255,1,5,13,13,255,0,7,255,1,5,12,12,255,0,25,255,5,5,12,12,255,0,18,13,13,255,0,10,12,12,255,0,7
0068A4  3  0D FF 00 07  
0068A8  3  FF 01 05 0C  
0068C2  3  FF 0D 04 FF          .byte 255,13,4,255,0,12,13,13,255,1,5,12,12,255,0,30,12,12,255,0,20,13,13,255,0,8,12,12,255,0,5,13,13
0068C6  3  00 0C 0D 0D  
0068CA  3  FF 01 05 0C  
0068E3  3  FF 00 17 0C          .byte 255,0,23,12,12,13,13,255,0,9,255,13,9,255,0,10,12,12,255,0,30,12,12,255,0,23,13,13,255,0,5,12,12
0068E7  3  0C 0D 0D FF  
0068EB  3  00 09 FF 0D  
006904  3  FF 00 1E 0C          .byte 255,0,30,12,12,255,0,30,255,12,7,255,0,4,255,12,11,255,0,5,255,12,7,255,15,4,12,255,0,5,255,12,9
006908  3  0C FF 00 1E  
00690C  3  FF 0C 07 FF  
006925  3  FF 00 06 FF          .byte 255,0,6,255,5,5,12,12,255,15,4,12,255,0,7,255,12,5,255,0,13,255,12,7,255,0,18,13,13,255,1,5,12,12
006929  3  05 05 0C 0C  
00692D  3  FF 0F 04 0C  
006947  3  FF 00 1E 0C          .byte 255,0,30,12,12,255,14,30,255,12,33
00694B  3  0C FF 0E 1E  
00694F  3  FF 0C 21     
006952  3  FF 0C 21 FF          .byte 255,12,33,255,5,4,255,0,13,15,255,0,7,15,255,0,4,12,12,255,0,17,15,255,0,7,15,255,0,4,12,12,255,1,4
006956  3  05 04 FF 00  
00695A  3  0D 0F FF 00  
006975  3  FF 00 0B 0D          .byte 255,0,11,13,13,12,255,13,10,0,0,12,12,255,0,17,12,255,0,12,12,12,255,0,17,12,255,0,12,12,12,255,0,4
006979  3  0D 0C FF 0D  
00697D  3  0A 00 00 0C  
006997  3  0D 0D FF 00          .byte 13,13,255,0,8,255,12,4,255,0,10,13,13,12,12,255,0,14,12,255,0,15,12,12,255,0,14,12,255,0,15,255,12,10
00699B  3  08 FF 0C 04  
00699F  3  FF 00 0A 0D  
0069B9  3  07 07 0C 00          .byte 7,7,12,0,0,0,12,255,0,4,255,13,9,0,0,255,12,10,7,7,12,0,0,0,12,255,0,15,255,12,10,7,7
0069BD  3  00 00 0C FF  
0069C1  3  00 04 FF 0D  
0069DA  3  0C 00 00 00          .byte 12,0,0,0,12,255,0,15,255,12,10,7,7,12,0,0,0,12,0,255,13,7,12,0,0,12,13,13,13,12,12,0,0,0
0069DE  3  0C FF 00 0F  
0069E2  3  FF 0C 0A 07  
0069FC  3  FF 05 04 00          .byte 255,5,4,0,7,7,12,0,0,0,12,255,0,8,12,0,0,12,0,0,0,12,12,255,0,8,7,7,12,0,0,0,12
006A00  3  07 07 0C 00  
006A04  3  00 00 0C FF  
006A1D  3  FF 00 08 0C          .byte 255,0,8,12,0,0,12,0,0,0,12,12,7,7,12,255,1,4,255,12,4,0,0,0,12,0,255,13,4,0,0,0,12
006A21  3  00 00 0C 00  
006A25  3  00 00 0C 0C  
006A3E  3  00 00 0C 00          .byte 0,0,12,0,0,0,12,12,7,7,12,255,5,4,255,0,7,12,255,0,8,12,0,0,12,0,0,0,12,12,7,7,12
006A42  3  00 00 0C 0C  
006A46  3  07 07 0C FF  
006A5F  3  FF 00 0B 0C          .byte 255,0,11,12,255,0,8,12,0,0,12,0,0,0,12,12,7,7,12,255,1,4,255,13,4,255,0,4,255,13,8,15,0,0
006A63  3  FF 00 08 0C  
006A67  3  00 00 0C 00  
006A81  3  FF 0C 06 07          .byte 255,12,6,7,7,0,255,5,4,255,0,16,15,0,0,255,5,4,12,12,7,7,255,0,21,15,255,0,6,255,12,5,255,1,4
006A85  3  07 00 FF 05  
006A89  3  04 FF 00 10  
006AA4  3  FF 0C 13 FF          .byte 255,12,19,255,1,4,12
006AA8  3  01 04 0C     
006AAB  3  FF 0C 21 00          .byte 255,12,33,0,0,15,255,5,7,15,255,0,16,5,5,5,12,12,0,0,15,255,0,7,15,255,0,19,12,12,13,13,12
006AAF  3  00 0F FF 05  
006AB3  3  07 0F FF 00  
006ACC  3  FF 01 07 0C          .byte 255,1,7,12,13,13,255,0,6,255,13,8,1,1,1,12,12,0,0,15,255,5,7,15,255,0,19,12,12,0,0,15,255,0,7
006AD0  3  0D 0D FF 00  
006AD4  3  06 FF 0D 08  
006AEF  3  0F FF 00 13          .byte 15,255,0,19,12,12,13,13,12,255,1,7,12,13,13,255,0,4,255,13,5,0,0,0,13,13,0,0,0,12,12,0,0
006AF3  3  0C 0C 0D 0D  
006AF7  3  0C FF 01 07  
006B10  3  0F FF 05 07          .byte 15,255,5,7,15,255,0,19,12,12,0,0,15,255,0,7,15,255,0,19,12,12,13,13,12,255,1,7,12,13,13,255,0,4
006B14  3  0F FF 00 13  
006B18  3  0C 0C 00 00  
006B32  3  FF 0D 05 00          .byte 255,13,5,0,0,0,13,13,12,7,7,12,12,0,0,15,255,5,7,15,255,0,16,12,7,7,12,12,0,0,15,255,0,7
006B36  3  00 00 0D 0D  
006B3A  3  0C 07 07 0C  
006B54  3  0F FF 00 10          .byte 15,255,0,16,12,7,7,12,12,13,13,12,255,1,7,12,13,13,255,0,5,255,13,6,0,0,0,12,7,7,12,12,255,5,4
006B58  3  0C 07 07 0C  
006B5C  3  0C 0D 0D 0C  
006B77  3  FF 00 06 0C          .byte 255,0,6,12,255,0,7,12,255,0,8,12,7,7,12,12,255,0,10,12,255,0,7,12,255,0,8,12,7,7,12,12,255,1,4
006B7B  3  FF 00 07 0C  
006B7F  3  FF 00 08 0C  
006B9A  3  0D 0D FF 00          .byte 13,13,255,0,4,255,12,4,255,0,4,12,255,0,8,12,7,7,12,12,255,5,4,255,0,9,12,255,0,4,12,255,0,8
006B9E  3  04 FF 0C 04  
006BA2  3  FF 00 04 0C  
006BBC  3  0C 07 07 0C          .byte 12,7,7,12,12,255,0,13,12,255,0,4,12,255,0,8,12,7,7,12,12,255,1,4,13,13,255,0,7,12,255,0,4
006BC0  3  0C FF 00 0D  
006BC4  3  0C FF 00 04  
006BDD  3  0C FF 00 08          .byte 12,255,0,8,12,7,7,12,12,255,0,13,15,255,0,4,15,255,0,9,7,7,12,12,255,0,13,15,255,0,4,15,255,0,9
006BE1  3  0C 07 07 0C  
006BE5  3  0C FF 00 0D  
006C00  3  07 07 FF 0C          .byte 7,7,255,12,33
006C04  3  21           
006C05  3  FF 0C 21 FF          .byte 255,12,33,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12,255,0,30,12,12
006C09  3  00 1E 0C 0C  
006C0D  3  FF 00 1E 0C  
006C26  3  07 07 0C 0C          .byte 7,7,12,12,12,255,0,4,12,255,0,4,12,255,0,4,12,255,0,4,255,12,8,7,7,12,15,12,255,0,4,12,255,0,4
006C2A  3  0C FF 00 04  
006C2E  3  0C FF 00 04  
006C49  3  0C FF 00 04          .byte 12,255,0,4,12,255,0,4,12,0,0,5,5,5,12,12,7,7,12,15,12,255,0,4,12,255,0,4,12,255,0,4,12
006C4D  3  0C FF 00 04  
006C51  3  0C 00 00 05  
006C6A  3  FF 00 04 0C          .byte 255,0,4,12,255,0,5,12,12,7,7,12,15,12,255,0,4,12,255,0,4,12,255,0,4,12,255,0,4,12,0,0,1,1,1
006C6E  3  FF 00 05 0C  
006C72  3  0C 07 07 0C  
006C8D  3  0C 0C 07 07          .byte 12,12,7,7,12,15,12,255,0,4,12,255,0,4,12,255,0,4,12,255,0,4,12,255,0,5,12,12,7,7,12,15,12
006C91  3  0C 0F 0C FF  
006C95  3  00 04 0C FF  
006CAE  3  FF 00 04 0C          .byte 255,0,4,12,255,0,4,12,255,0,4,12,255,0,4,12,255,0,5,12,12,7,7,12,15,12,255,0,4,12,255,0,4
006CB2  3  FF 00 04 0C  
006CB6  3  FF 00 04 0C  
006CCF  3  0C FF 00 04          .byte 12,255,0,4,12,255,0,4,12,13,13,0,0,0,12,12,7,7,12,15,12,255,0,4,12,255,0,4,12,255,0,4,12
006CD3  3  0C FF 00 04  
006CD7  3  0C 0D 0D 00  
006CF0  3  FF 00 04 0F          .byte 255,0,4,15,255,0,5,12,12,7,7,12,15,12,255,0,4,12,255,0,4,12,255,0,4,12,255,0,4,15,0,0,0
006CF4  3  FF 00 05 0C  
006CF8  3  0C 07 07 0C  
006D11  3  0D 0D 0C 0C          .byte 13,13,12,12,7,7,12,15,12,255,0,4,12,255,0,4,12,255,0,4,12,255,0,4,15,255,0,5,12,12,7,7,12
006D15  3  07 07 0C 0F  
006D19  3  0C FF 00 04  
006D32  3  0F 0C FF 00          .byte 15,12,255,0,4,12,255,0,4,12,255,0,4,12,255,0,4,15,255,0,5,12,12,7,7,12,12,12,255,15,4,12,255,15,4
006D36  3  04 0C FF 00  
006D3A  3  04 0C FF 00  
006D55  3  0C FF 0F 04          .byte 12,255,15,4,12,255,15,4,255,12,4,7,7,12,12,7,7,255,0,7,5,255,0,4,5,255,0,4,5,255,0,4,255,5,4
006D59  3  0C FF 0F 04  
006D5D  3  FF 0C 04 07  
006D78  3  07 07 0C 0C          .byte 7,7,12,12,7,7,255,0,26,7,7,255,12,11,1,255,12,4,1,255,12,4,1,255,12,4,255,1,4,12,12,12
006D7C  3  07 07 FF 00  
006D80  3  1A 07 07 FF  
006D98  3  FF 0C 21 00          .byte 255,12,33,0,0,5,5,5,255,0,22,5,5,5,12,12,255,0,30,12,12,7,7,1,1,1,13,13,255,0,18,13,13
006D9C  3  00 05 05 05  
006DA0  3  FF 00 16 05  
006DB9  3  01 01 01 0C          .byte 1,1,1,12,12,7,7,12,255,0,27,12,12,7,7,12,255,0,27,12,12,7,7,12,0,0,13,13,255,0,4,13,13
006DBD  3  0C 07 07 0C  
006DC1  3  FF 00 1B 0C  
006DDA  3  FF 00 06 0D          .byte 255,0,6,13,13,255,0,4,13,13,0,0,0,12,12,7,7,12,255,0,27,12,12,7,7,12,13,13,255,0,4,13,13
006DDE  3  0D FF 00 04  
006DE2  3  0D 0D 00 00  
006DFB  3  FF 00 0A 0D          .byte 255,0,10,13,13,255,0,4,13,13,0,12,12,7,7,12,255,0,27,12,12,7,7,12,255,0,27,12,12,7,7,12,0,0
006DFF  3  0D FF 00 04  
006E03  3  0D 0D 00 0C  
006E1D  3  0D 0D FF 00          .byte 13,13,255,0,6,255,12,6,255,0,6,13,13,0,0,0,12,12,7,7,12,255,0,10,15,255,0,4,15,255,0,11,12,12
006E21  3  06 FF 0C 06  
006E25  3  FF 00 06 0D  
006E3F  3  07 07 0C FF          .byte 7,7,12,255,0,10,15,255,0,4,15,255,0,11,12,12,7,7,12,13,13,0,0,0,13,13,0,0,0,15,255,0,4
006E43  3  00 0A 0F FF  
006E47  3  00 04 0F FF  
006E60  3  0F FF 00 08          .byte 15,255,0,8,13,13,0,12,12,7,7,12,255,0,10,255,12,6,255,0,11,12,12,7,7,12,0,0,13,13,255,0,6
006E64  3  0D 0D 00 0C  
006E68  3  0C 07 07 0C  
006E81  3  FF 05 06 FF          .byte 255,5,6,255,0,6,13,13,0,0,0,12,12,7,7,12,255,0,27,12,12,7,7,12,12,12,0,0,0,13,13,0,0,0
006E85  3  00 06 0D 0D  
006E89  3  00 00 00 0C  
006EA3  3  FF 01 06 00          .byte 255,1,6,0,0,0,13,13,0,0,0,255,12,5,7,7,5,5,5,255,0,8,255,5,6,255,0,8,5,5,5,12,12
006EA7  3  00 00 0D 0D  
006EAB  3  00 00 00 FF  
006EC4  3  07 07 FF 00          .byte 7,7,255,0,28,255,12,4,1,1,1,255,12,8,255,1,6,255,12,8,1,1,1,12
006EC8  3  1C FF 0C 04  
006ECC  3  01 01 01 FF  
006EDC  3  FF 0C 21 FF          .byte 255,12,33,255,0,30,12,12,255,0,25,12,255,0,4,12,12,255,0,25,12,255,0,4,12,12,255,0,25,12,12,12,7,7
006EE0  3  00 1E 0C 0C  
006EE4  3  FF 00 19 0C  
006EFE  3  FF 0C 0D FF          .byte 255,12,13,255,0,16,12,7,7,12,12,0,0,255,5,6,0,0,12,255,0,16,12,7,7,12,12,255,0,10,12,255,0,16
006F02  3  00 10 0C 07  
006F06  3  07 0C 0C 00  
006F20  3  0C 07 07 0C          .byte 12,7,7,12,12,0,0,255,1,6,12,12,12,255,0,16,12,7,7,12,12,0,0,255,5,6,0,0,12,255,0,16,12
006F24  3  0C 00 00 FF  
006F28  3  01 06 0C 0C  
006F41  3  07 07 0C 0C          .byte 7,7,12,12,255,0,10,12,255,0,16,12,7,7,255,12,4,255,1,6,0,0,12,255,0,16,12,7,7,12,12,0,0
006F45  3  FF 00 0A 0C  
006F49  3  FF 00 10 0C  
006F62  3  FF 05 06 00          .byte 255,5,6,0,0,12,255,0,16,12,7,7,12,12,255,0,10,12,255,0,16,12,7,7,12,12,0,0,255,1,6,12,12,12
006F66  3  00 0C FF 00  
006F6A  3  10 0C 07 07  
006F84  3  FF 00 10 0C          .byte 255,0,16,12,7,7,12,12,0,0,255,5,6,255,0,20,7,7,12,12,255,0,28,7,7,255,12,4,255,1,6,12,12
006F88  3  07 07 0C 0C  
006F8C  3  00 00 FF 05  
006FA5  3  0D 0D 00 00          .byte 13,13,0,0,0,13,13,255,15,13,12,12,255,0,17,255,15,13,12,12,255,0,17,255,15,13,12,12,255,14,17,255,15,13
006FA9  3  00 0D 0D FF  
006FAD  3  0F 0D 0C 0C  
006FC7  3  FF 0C 21             .byte 255,12,33
006FCA  3  FF 00 98 04          .byte 255,0,152,4,0,0,4,0,4,255,0,26,4,0,0,4,0,4,255,0,26,255,4,6,255,0,27,255,4,4,255,0,28
006FCE  3  00 00 04 00  
006FD2  3  04 FF 00 1A  
006FEB  3  04 04 00 04          .byte 4,4,0,4,255,0,28,255,4,4,255,0,28,255,4,4,255,0,28,4,0,4,4,255,0,23,20,21,0,0,0,255,4,4
006FEF  3  FF 00 1C FF  
006FF3  3  04 04 FF 00  
00700D  3  FF 00 17 12          .byte 255,0,23,18,19,0,0,0,255,4,4,255,0,14,20,21,255,0,7,24,255,0,4,4,4,0,4,255,0,5,4,4,0
007011  3  13 00 00 00  
007015  3  FF 04 04 FF  
00702E  3  04 00 04 04          .byte 4,0,4,4,0,0,18,19,255,0,7,24,255,0,4,255,4,4,255,0,6,255,4,5,0,0,0,24,255,0,8,24,255,0,4
007032  3  00 00 12 13  
007036  3  FF 00 07 18  
007051  3  FF 04 04 FF          .byte 255,4,4,255,0,6,4,4,0,4,4,0,0,0,24,255,0,8,24,255,0,4,255,4,4,255,0,6,255,4,26,255,0,6
007055  3  00 06 04 04  
007059  3  00 04 04 00  
007073  3  04 04 00 FF          .byte 4,4,0,255,4,21,0,4,255,0,6,255,4,24,0,4,255,0,6,255,4,26,0,0,0
007077  3  04 15 00 04  
00707B  3  FF 00 06 FF  
00708C  3               numsc:
00708C  3  17                   .byte 23
00708D  3               nmedat:
00708D  3  04 00 70 10          .byte 4,0,112,16,1,13,136,160,255
007091  3  01 0D 88 A0  
007095  3  FF           
007096  3  04 03 88 60          .byte 4,3,136,96,1,24,72,152,1,15,72,136,1,16,88,128,1,16,88,144,1,16,104,136,1,17,88,112,1,18,88,160,1,19,120,120,1,20,120,152,1,21,136,120,1,22,136,152,255
00709A  3  01 18 48 98  
00709E  3  01 0F 48 88  
0070C7  3  00 00 10 08          .byte 0,0,16,8,1,4,16,80,1,4,56,32,2,5,136,160,1,4,112,80,2,5,40,144,2,5,64,104,2,5,88,136,255
0070CB  3  01 04 10 50  
0070CF  3  01 04 38 20  
0070E8  3  00 00 38 50          .byte 0,0,56,80,1,4,80,240,2,5,160,168,2,5,104,64,2,5,16,168,2,5,16,64,255
0070EC  3  01 04 50 F0  
0070F0  3  02 05 A0 A8  
007101  3  00 00 88 78          .byte 0,0,136,120,4,8,24,56,4,8,24,72,5,9,24,184,2,5,104,200,5,9,24,168,1,4,72,232,4,8,88,152,5,9,88,88,4,8,88,136,5,9,88,104,2,5,104,40,255
007105  3  04 08 18 38  
007109  3  04 08 18 48  
007132  3  00 00 A0 08          .byte 0,0,160,8,1,4,48,232,2,5,16,120,2,5,88,224,2,5,88,32,1,4,128,16,6,5,40,176,6,5,64,80,1,4,48,40,3,7,136,208,255
007136  3  01 04 30 E8  
00713A  3  02 05 10 78  
00715B  3  00 00 38 70          .byte 0,0,56,112,1,4,24,224,2,5,128,120,2,5,80,72,2,5,80,120,2,5,104,48,2,5,104,168,6,5,160,64,6,5,160,200,2,5,128,32,3,7,24,16,255
00715F  3  01 04 18 E0  
007163  3  02 05 80 78  
007188  3  00 00 30 70          .byte 0,0,48,112,1,4,80,40,2,5,160,64,4,8,88,104,4,8,88,120,2,5,136,168,2,5,48,8,255
00718C  3  01 04 50 28  
007190  3  02 05 A0 40  
0071A5  3  00 00 20 48          .byte 0,0,32,72,2,5,96,80,2,5,160,64,3,7,48,40,1,4,128,160,4,8,168,232,255
0071A9  3  02 05 60 50  
0071AD  3  02 05 A0 40  
0071BE  3  00 00 18 70          .byte 0,0,24,112,3,7,40,232,1,4,48,80,1,4,48,160,2,5,112,64,2,5,160,24,2,5,152,184,255
0071C2  3  03 07 28 E8  
0071C6  3  01 04 30 50  
0071DB  3  00 00 10 78          .byte 0,0,16,120,2,5,160,200,2,5,160,96,2,5,160,24,2,5,160,152,1,4,16,56,255
0071DF  3  02 05 A0 C8  
0071E3  3  02 05 A0 60  
0071F4  3  00 00 A0 30          .byte 0,0,160,48,2,5,160,72,2,5,160,104,2,5,160,144,2,5,160,176,2,5,160,208,1,4,112,80,1,4,112,144,2,5,16,208,1,4,112,208,255
0071F8  3  02 05 A0 48  
0071FC  3  02 05 A0 68  
00721D  3  00 00 30 30          .byte 0,0,48,48,3,7,32,80,3,7,32,112,3,7,32,144,3,7,32,176,2,5,160,232,2,5,120,104,2,5,160,128,2,5,160,168,2,5,160,208,1,4,120,184,255
007221  3  03 07 20 50  
007225  3  03 07 20 70  
00724A  3  00 00 18 70          .byte 0,0,24,112,1,4,104,40,2,5,160,8,2,5,136,192,2,5,112,112,3,7,48,176,255
00724E  3  01 04 68 28  
007252  3  02 05 A0 08  
007263  3  00 00 40 08          .byte 0,0,64,8,2,5,160,112,2,5,160,152,2,5,160,216,2,5,136,104,2,5,136,224,2,5,136,160,2,5,112,112,2,5,112,152,2,5,112,208,1,4,32,96,255
007267  3  02 05 A0 70  
00726B  3  02 05 A0 98  
007290  3  00 00 80 08          .byte 0,0,128,8,2,5,128,136,6,5,56,104,6,5,80,112,6,5,104,120,2,5,32,120,255
007294  3  02 05 80 88  
007298  3  06 05 38 68  
0072A9  3  00 00 70 08          .byte 0,0,112,8,6,5,112,152,6,5,72,128,1,4,96,64,6,5,112,224,1,4,72,232,6,5,40,72,255
0072AD  3  06 05 70 98  
0072B1  3  06 05 48 80  
0072C6  3  00 00 28 80          .byte 0,0,40,128,4,8,96,232,4,8,96,216,4,8,48,232,5,9,72,216,2,5,136,80,6,5,136,168,3,7,16,216,6,5,88,136,2,5,16,192,2,5,160,200,1,4,120,176,255
0072CA  3  04 08 60 E8  
0072CE  3  04 08 60 D8  
0072F7  3  00 00 70 60          .byte 0,0,112,96,4,8,96,184,2,5,16,32,2,5,64,48,2,5,40,48,2,5,88,48,3,7,16,160,4,8,96,152,4,8,96,168,6,5,40,144,3,7,64,168,1,4,16,16,255
0072FB  3  04 08 60 B8  
0072FF  3  02 05 10 20  
007328  3  00 00 30 C8          .byte 0,0,48,200,1,4,24,32,6,6,136,232,2,5,136,64,2,5,136,96,2,5,136,136,2,5,136,168,6,5,160,88,255
00732C  3  01 04 18 20  
007330  3  06 06 88 E8  
007349  3  00 00 70 78          .byte 0,0,112,120,1,4,160,56,1,4,24,56,1,4,112,144,1,4,24,192,2,5,160,232,2,5,16,232,2,5,80,32,2,5,136,64,2,5,80,128,2,5,80,208,2,5,160,144,255
00734D  3  01 04 A0 38  
007351  3  01 04 18 38  
00737A  3  00 00 20 08          .byte 0,0,32,8,4,15,64,168,4,21,128,152,5,22,128,184,4,19,112,152,4,20,112,184,4,16,96,168,4,16,80,160,4,16,80,176,4,17,80,144,4,18,80,192,1,13,24,232,255
00737E  3  04 0F 40 A8  
007382  3  04 15 80 98  
0073AB  3  04 00 88 70          .byte 4,0,136,112,1,24,136,136,255
0073AF  3  01 18 88 88  
0073B3  3  FF           
0073B4  3               NUMOBJ = 1
0073B4  3               objdta:
0073B4  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,56,120,254,56,120
0073B8  3  00 00 00 00  
0073BC  3  00 00 00 00  
0073DA  3               font:
0073DA  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0073DE  3  00 00 00 00  
0073E2  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
0073E6  3  30 00 30 00  
0073EA  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
0073EE  3  00 00 00 00  
0073F2  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
0073F6  3  6C FE 6C 00  
0073FA  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
0073FE  3  7E 1E 7E 18  
007402  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
007406  3  30 6E CE 00  
00740A  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
00740E  3  7E CC 7E 00  
007412  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
007416  3  00 00 00 00  
00741A  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
00741E  3  18 18 0C 00  
007422  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
007426  3  30 30 60 00  
00742A  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
00742E  3  7E 18 3C 00  
007432  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
007436  3  7E 18 18 00  
00743A  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
00743E  3  00 18 18 30  
007442  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
007446  3  7E 00 00 00  
00744A  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
00744E  3  00 38 38 00  
007452  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
007456  3  18 30 60 00  
00745A  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
00745E  3  F6 E6 7C 00  
007462  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
007466  3  18 18 7E 00  
00746A  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
00746E  3  7C C0 FE 00  
007472  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
007476  3  06 C6 7C 00  
00747A  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
00747E  3  D8 FE 18 00  
007482  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
007486  3  06 C6 7C 00  
00748A  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
00748E  3  C6 C6 7C 00  
007492  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
007496  3  18 30 30 00  
00749A  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
00749E  3  C6 C6 7C 00  
0074A2  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
0074A6  3  7E 06 7C 00  
0074AA  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
0074AE  3  00 00 30 00  
0074B2  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
0074B6  3  00 30 30 60  
0074BA  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
0074BE  3  30 18 0C 00  
0074C2  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
0074C6  3  00 7E 00 00  
0074CA  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
0074CE  3  0C 18 30 00  
0074D2  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
0074D6  3  18 00 18 00  
0074DA  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
0074DE  3  FE C0 7C 00  
0074E2  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
0074E6  3  FE C6 C6 00  
0074EA  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
0074EE  3  C6 C6 FC 00  
0074F2  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
0074F6  3  C0 C6 7C 00  
0074FA  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
0074FE  3  C6 CC F8 00  
007502  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
007506  3  C0 C0 FE 00  
00750A  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
00750E  3  C0 C0 C0 00  
007512  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
007516  3  DE C6 7C 00  
00751A  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
00751E  3  C6 C6 C6 00  
007522  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
007526  3  18 18 7E 00  
00752A  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
00752E  3  C6 C6 7C 00  
007532  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
007536  3  D8 CC C6 00  
00753A  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
00753E  3  C0 C0 FE 00  
007542  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
007546  3  C6 C6 C6 00  
00754A  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
00754E  3  DE CE C6 00  
007552  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
007556  3  C6 C6 7C 00  
00755A  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
00755E  3  FC C0 C0 00  
007562  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
007566  3  F6 DE 7C 00  
00756A  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
00756E  3  FC CC C6 00  
007572  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
007576  3  06 C6 7C 00  
00757A  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
00757E  3  30 30 30 00  
007582  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
007586  3  C6 C6 7C 00  
00758A  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
00758E  3  C6 6C 38 00  
007592  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
007596  3  C6 FE 6C 00  
00759A  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
00759E  3  38 6C C6 00  
0075A2  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
0075A6  3  30 30 30 00  
0075AA  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
0075AE  3  30 60 FE 00  
0075B2  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
0075B6  3  18 18 1E 00  
0075BA  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
0075BE  3  30 18 0C 00  
0075C2  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
0075C6  3  30 30 F0 00  
0075CA  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
0075CE  3  30 30 30 00  
0075D2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
0075D6  3  00 00 00 FF  
0075DA  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
0075DE  3  60 60 FE 00  
0075E2  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
0075E6  3  7C CC 7C 00  
0075EA  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
0075EE  3  66 66 7C 00  
0075F2  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
0075F6  3  60 60 3C 00  
0075FA  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
0075FE  3  CC CC 7C 00  
007602  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
007606  3  F8 C0 7C 00  
00760A  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
00760E  3  30 30 30 00  
007612  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
007616  3  CC 7C 0C 78  
00761A  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
00761E  3  CC CC CC 00  
007622  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
007626  3  30 30 78 00  
00762A  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
00762E  3  0C 0C 6C 38  
007632  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
007636  3  70 78 6C 00  
00763A  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
00763E  3  30 30 1C 00  
007642  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
007646  3  FC FC FC 00  
00764A  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
00764E  3  CC CC CC 00  
007652  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
007656  3  CC CC 78 00  
00765A  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
00765E  3  CC F8 C0 C0  
007662  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
007666  3  CC 7C 0C 0E  
00766A  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
00766E  3  60 60 60 00  
007672  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
007676  3  78 0C F8 00  
00767A  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
00767E  3  30 30 1C 00  
007682  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
007686  3  CC CC 78 00  
00768A  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
00768E  3  78 78 30 00  
007692  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
007696  3  FC FC 78 00  
00769A  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
00769E  3  30 78 CC 00  
0076A2  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
0076A6  3  CC 7C 0C 78  
0076AA  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
0076AE  3  30 60 FC 00  
0076B2  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
0076B6  3  18 18 1E 00  
0076BA  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
0076BE  3  18 18 18 00  
0076C2  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
0076C6  3  30 30 F0 00  
0076CA  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
0076CE  3  00 00 00 00  
0076D2  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
0076D6  3  E3 BB C6 7C  
0076DA  3               
0076DA  1               
0076DA  2               ;------------------------------------------------------
0076DA  2               ; z80.asm
0076DA  2               ; spectrum stuff
0076DA  2               ; adresses
0076DA  2               
0076DA  2               ;ws	 = $60
0076DA  2               
0076DA  2               ;z80_f	 = ws+$00
0076DA  2               ;z80_a	 = ws+$01
0076DA  2               ;z80_af	 = z80_f
0076DA  2               
0076DA  2               ;z80_c	 = ws+$02
0076DA  2               ;z80_b	 = ws+$03
0076DA  2               ;z80_bc	 = z80_c
0076DA  2               
0076DA  2               ;z80_e	 = ws+$04
0076DA  2               ;z80_d	 = ws+$05
0076DA  2               ;z80_de	 = z80_e
0076DA  2               
0076DA  2               ;z80_l	 = ws+$06
0076DA  2               ;z80_h	 = ws+$07
0076DA  2               ;z80_hl	 = z80_l
0076DA  2               
0076DA  2               ;z80_x    = ws+$08
0076DA  2               ;z80_i    = ws+$09
0076DA  2               ;z80_ix	 = z80_x
0076DA  2               
0076DA  2               ;z80_iy	 = ws+$0a
0076DA  2               
0076DA  2               ;z80_fp	 = ws+$0c
0076DA  2               ;z80_ap	 = ws+$0d
0076DA  2               
0076DA  2               ;z80_cp	 = ws+$0e
0076DA  2               ;z80_bp	 = ws+$0f
0076DA  2               ;z80_bcp = z80_cp
0076DA  2               
0076DA  2               ;z80_ep	 = ws+$10
0076DA  2               ;z80_dp	 = ws+$11
0076DA  2               ;z80_dep = z80_ep
0076DA  2               
0076DA  2               ;z80_lp	 = ws+$12
0076DA  2               ;z80_hp	 = ws+$13
0076DA  2               ;z80_hlp = z80_lp
0076DA  2               
0076DA  2               ;z80_sp   = ws+$14
0076DA  2               
0076DA  2               ;z80_reg0 = ws+$16
0076DA  2               ;z80_reg1 = ws+$17
0076DA  2               ;z80_reg2 = ws+$18
0076DA  2               ;z80_reg3 = ws+$19
0076DA  2               
0076DA  2               ;z80_r	 = ws+$1a
0076DA  2               
0076DA  2               ; Contains seperatly 1 bit set
0076DA  2               
0076DA  2               _bitmem0	= $f8
0076DA  2               _bitmem1	= $f9
0076DA  2               _bitmem2	= $fa
0076DA  2               _bitmem3	= $fb
0076DA  2               _bitmem4	= $fc
0076DA  2               _bitmem5	= $fd
0076DA  2               _bitmem6	= $fe
0076DA  2               _bitmem7	= $ff
0076DA  2               	
0076DA  2               ; constants	
0076DA  2               _bitvalue0	= $01	
0076DA  2               _bitvalue1	= $02	
0076DA  2               _bitvalue2	= $04	
0076DA  2               _bitvalue3	= $08	
0076DA  2               _bitvalue4	= $10	
0076DA  2               _bitvalue5	= $20	
0076DA  2               _bitvalue6	= $40	
0076DA  2               _bitvalue7	= $80	
0076DA  2               
0076DA  2               _notbitvalue0	= $fe	
0076DA  2               _notbitvalue1	= $fd	
0076DA  2               _notbitvalue2	= $fb	
0076DA  2               _notbitvalue3	= $f7	
0076DA  2               _notbitvalue4	= $ef	
0076DA  2               _notbitvalue5	= $df	
0076DA  2               _notbitvalue6	= $bf	
0076DA  2               _notbitvalue7	= $7f	
0076DA  2               
0076DA  2               
0076DA  2               ;add_hl_bc:
0076DA  2               ;		lda z80_l
0076DA  2               ;		clc
0076DA  2               ;		adc z80_c
0076DA  2               ;		sta z80_l
0076DA  2               ;		lda z80_h
0076DA  2               ;		adc z80_b
0076DA  2               ;		sta z80_h
0076DA  2               ;		rts
0076DA  2               ;		
0076DA  2               ;add_ix_de:
0076DA  2               ;		lda z80_ix
0076DA  2               ;		clc
0076DA  2               ;		adc z80_e
0076DA  2               ;		sta z80_ix
0076DA  2               ;		lda z80_ix+1
0076DA  2               ;		adc z80_d
0076DA  2               ;		sta z80_ix+1
0076DA  2               ;		rts
0076DA  2               ;		
0076DA  2               ;add_iy_de:
0076DA  2               ;		lda z80_iy
0076DA  2               ;		clc
0076DA  2               ;		adc z80_e
0076DA  2               ;		sta z80_iy
0076DA  2               ;		lda z80_iy+1
0076DA  2               ;		adc z80_d
0076DA  2               ;		sta z80_iy+1
0076DA  2               ;		rts
0076DA  2               ;		
0076DA  2               ;add_hl_de:
0076DA  2               ;		lda z80_l
0076DA  2               ;		clc
0076DA  2               ;		adc z80_e
0076DA  2               ;		sta z80_l
0076DA  2               ;		lda z80_h
0076DA  2               ;		adc z80_d
0076DA  2               ;		sta z80_h
0076DA  2               ;		rts
0076DA  2               ;
0076DA  2               ;add_ix_bc:
0076DA  2               ;		lda z80_ix
0076DA  2               ;		clc
0076DA  2               ;		adc z80_c
0076DA  2               ;		sta z80_ix
0076DA  2               ;		lda z80_ix+1
0076DA  2               ;		adc z80_b
0076DA  2               ;		sta z80_ix+1
0076DA  2               ;		rts
0076DA  2               ;		
0076DA  2               ;add_iy_bc:
0076DA  2               ;		lda z80_iy
0076DA  2               ;		clc
0076DA  2               ;		adc z80_c
0076DA  2               ;		sta z80_iy
0076DA  2               ;		lda z80_iy+1
0076DA  2               ;		adc z80_b
0076DA  2               ;		sta z80_iy+1
0076DA  2               ;		rts
0076DA  2               ;		
0076DA  2               sbc_hl_de:
0076DA  2  A5 66        		lda z80_l
0076DC  2  E5 64        		sbc z80_e
0076DE  2  85 66        		sta z80_l
0076E0  2  A5 67        		lda z80_h
0076E2  2  E5 65        		sbc z80_d
0076E4  2  85 67        		sta z80_h
0076E6  2  60           		rts
0076E7  2               
0076E7  2               ;sbc_hl_bc:
0076E7  2               ;		lda z80_l
0076E7  2               ;		sbc z80_c
0076E7  2               ;		sta z80_l
0076E7  2               ;		lda z80_h
0076E7  2               ;		sbc z80_b
0076E7  2               ;		sta z80_h
0076E7  2               ;		rts
0076E7  2               ;
0076E7  2               ;cmp_hl_bc:
0076E7  2               ;		lda z80_l
0076E7  2               ;		cmp z80_c
0076E7  2               ;		bne cmp_hl_bc_end
0076E7  2               ;		lda z80_h
0076E7  2               ;		cmp z80_b
0076E7  2               ;cmp_hl_bc_end:
0076E7  2               ;		rts
0076E7  2               ;		
0076E7  2               ;cmp_iy_ix:
0076E7  2               ;		lda z80_iy
0076E7  2               ;		cmp z80_ix
0076E7  2               ;		bne cmp_iy_ix_end
0076E7  2               ;		lda z80_iy+1
0076E7  2               ;		cmp z80_ix+1
0076E7  2               ;cmp_iy_ix_end:
0076E7  2               ;		rts
0076E7  2               ;		
0076E7  2               ;dec_hl:
0076E7  2               ;		lda z80_l
0076E7  2               ;		bne dec_hl_no_dec_h
0076E7  2               ;		dec z80_h
0076E7  2               ;dec_hl_no_dec_h:
0076E7  2               ;		dec z80_l
0076E7  2               ;		rts
0076E7  2               ;	
0076E7  2               ;dec_ix:
0076E7  2               ;		lda z80_ix
0076E7  2               ;		bne dec_ix_no_dec_h
0076E7  2               ;		dec z80_ix+1
0076E7  2               ;dec_ix_no_dec_h:
0076E7  2               ;		dec z80_ix
0076E7  2               ;		rts
0076E7  2               ;		
0076E7  2               ;dec_bc:	
0076E7  2               ;		lda z80_c
0076E7  2               ;		bne dec_bc_no_dec_b
0076E7  2               ;		dec z80_b
0076E7  2               ;dec_bc_no_dec_b:
0076E7  2               ;		dec z80_c
0076E7  2               ;		rts
0076E7  2               ;	
0076E7  2               ;dec_de:
0076E7  2               ;		lda z80_e
0076E7  2               ;		bne dec_de_no_dec_d
0076E7  2               ;		dec z80_d
0076E7  2               ;dec_de_no_dec_d:
0076E7  2               ;		dec z80_e
0076E7  2               ;		rts
0076E7  2               ;		
0076E7  2               ;ex_af_afs:
0076E7  2               ;	rts
0076E7  2               ;ex_de_hl:
0076E7  2               ;		lda z80_e
0076E7  2               ;		ldx z80_l
0076E7  2               ;		stx z80_e
0076E7  2               ;		sta z80_l
0076E7  2               ;		lda z80_d
0076E7  2               ;		ldx z80_h
0076E7  2               ;		stx z80_d
0076E7  2               ;		sta z80_h
0076E7  2               ;		rts
0076E7  2               ;
0076E7  2               exx:
0076E7  2  A5 62        		lda z80_c
0076E9  2  A4 6E        		ldy z80_cp
0076EB  2  84 62        		sty z80_c
0076ED  2  85 6E        		sta z80_cp
0076EF  2  A5 63        		lda z80_b
0076F1  2  A4 6F        		ldy z80_bp
0076F3  2  84 63        		sty z80_b
0076F5  2  85 6F        		sta z80_bp
0076F7  2  A5 64        		lda z80_e
0076F9  2  A4 70        		ldy z80_ep
0076FB  2  84 64        		sty z80_e
0076FD  2  85 70        		sta z80_ep
0076FF  2  A5 65        		lda z80_d
007701  2  A4 71        		ldy z80_dp
007703  2  84 65        		sty z80_d
007705  2  85 71        		sta z80_dp		
007707  2  A5 80        		lda scraddr
007709  2  A4 72        		ldy z80_lp
00770B  2  84 80        		sty scraddr
00770D  2  85 72        		sta z80_lp
00770F  2  A5 81        		lda scraddr+1
007711  2  A4 73        		ldy z80_hp
007713  2  84 81        		sty scraddr+1
007715  2  85 73        		sta z80_hp
007717  2  60           		rts
007718  2               		
007718  2               ;ex_sp_hl:
007718  2               ;		tsx
007718  2               ;		lda $0103,x
007718  2               ;		ldy z80_h
007718  2               ;		sta z80_h
007718  2               ;		tya
007718  2               ;		sta $0103,x
007718  2               ;		lda $0104,x
007718  2               ;		ldy z80_l
007718  2               ;		sta z80_l
007718  2               ;		tya
007718  2               ;		sta $104,x
007718  2               ;		rts
007718  2               ;		
007718  2               ;ldi:
007718  2               ;	rts
007718  2               ;ldir:
007718  2               ;		ldy #$00
007718  2               ;		ldx z80_b
007718  2               ;		beq ldir_last_page
007718  2               ;ldir_loop:		
007718  2               ;		lda (z80_hl),y
007718  2               ;		sta (z80_de),y
007718  2               ;		iny
007718  2               ;		bne ldir_loop
007718  2               ;		inc z80_h
007718  2               ;		inc z80_d
007718  2               ;		dex
007718  2               ;		bne ldir_loop
007718  2               ;ldir_last_page:
007718  2               ;		lda z80_c
007718  2               ;		beq ldir_end
007718  2               ;ldir_last_page_loop:		
007718  2               ;		lda (z80_hl),y
007718  2               ;		sta (z80_de),y
007718  2               ;		iny
007718  2               ;		cpy z80_c
007718  2               ;		bne ldir_last_page_loop
007718  2               ;ldir_end:		
007718  2               ;		stx z80_c
007718  2               ;		stx z80_b
007718  2               ;		tya
007718  2               ;		clc
007718  2               ;		adc z80_l
007718  2               ;		sta z80_l
007718  2               ;		bcc *+4
007718  2               ;		inc z80_h
007718  2               ;		tya
007718  2               ;		clc
007718  2               ;		adc z80_e
007718  2               ;		sta z80_e
007718  2               ;		bcc *+4
007718  2               ;		inc z80_d
007718  2               ;		rts
007718  2               ;		
007718  2               ;lddr:		ldy #$00
007718  2               ;lddr_loop:
007718  2               ;		lda (z80_hl),y
007718  2               ;		sta (z80_de),y
007718  2               ;		jsr dec_hl
007718  2               ;		jsr dec_de
007718  2               ;		jsr dec_bc
007718  2               ;		lda z80_b
007718  2               ;		ora z80_c
007718  2               ;		bne lddr_loop
007718  2               ;		rts
007718  2               ;ei:
007718  2               ;		rts
007718  2               ;di:
007718  2               ;		rts
007718  2               		
007718  2               ;-------------------------------------------------------------
007718  2               ; Set bits in bitmem
007718  2               ;-------------------------------------------------------------
007718  2               	
007718  2               z80_init:
007718  2  A2 00        	ldx #$00
00771A  2  A9 01        	lda #$01
00771C  2               z80_init_loop:		
00771C  2  95 F8        	sta _bitmem0,x
00771E  2  E8           	inx
00771F  2  0A           	asl a
007720  2  D0 FA        	bne z80_init_loop
007722  2  60           	rts
007723  2               
007723  2               push_af:
007723  2               push_bc:
007723  2               push_de:
007723  2               push_hl:
007723  2               
007723  2               pop_af:
007723  2               pop_bc:
007723  2               pop_de:
007723  2               pop_ix:
007723  2               pop_hl:
007723  2               
007723  2               add_hl_hl:
007723  2               
007723  2               inc_bc:
007723  2               inc_de:
007723  2               inc_hl:
007723  2               inc_ix:
007723  2               inc_sp:
007723  2               
007723  2               cpir:
007723  2               
007723  2               ex_af_af:
007723  2               ;	rts
007723  2               
007723  1               eind_asm:
007723  1               
007723  1               relocate:
007723  1               ; Issue *TAPE otherwise DFS goes mental that we've overwritten workspace from &E00 - &1100
007723  1               
007723  1  A9 8C            lda #$8C
007725  1  A2 0C            ldx #$0C
007727  1  A0 00            ldy #$00
007729  1  20 F4 FF         jsr OSBYTE					; *FX &8C,0,0 - *TAPE 1200
00772C  1               
00772C  1               ; Relocate all code down to &E00
00772C  1  A2 6A        	ldx #>(eind_asm - start_asm) + 1
00772E  1  A0 00        	ldy #0
007730  1               reloop:
007730  1  B9 00 11     	lda load_address, y
007733  1  99 00 0E     	sta asm_code, y
007736  1  C8           	iny
007737  1  D0 F7        	bne reloop
007739  1  EE 32 7A     	inc reloop + 2 + load_address - asm_code
00773C  1  EE 35 7A     	inc reloop + 5 + load_address - asm_code
00773F  1  CA           	dex
007740  1  D0 EE        	bne reloop
007742  1  4C 03 0E     	jmp exec_game
007742  1               
